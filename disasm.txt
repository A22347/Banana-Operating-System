
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 90 02 00       	call   c00290d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 6e 9d 02 c0       	mov    ebx,0xc0029d6e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c 9d 02 c0    	cmp    ebx,0xc0029d7c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 e6 02 c0       	mov    eax,0xc002e678
c0000049:	3d 78 e6 02 c0       	cmp    eax,0xc002e678
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 e6 02 c0       	push   0xc002e678
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 e6 02 c0       	mov    eax,0xc002e678
c0000075:	2d 78 e6 02 c0       	sub    eax,0xc002e678
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 e6 02 c0       	push   0xc002e678
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 ec 02 c0 00 	cmp    BYTE PTR ds:0xc002eca8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 9d 02 c0       	mov    ebx,0xc0029d84
c00000bb:	81 eb 80 9d 02 c0    	sub    ebx,0xc0029d80
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 9d 02 c0       	mov    esi,0xc0029d80
c00000ca:	a1 ac ec 02 c0       	mov    eax,ds:0xc002ecac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac ec 02 c0       	mov    ds:0xc002ecac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac ec 02 c0       	mov    eax,ds:0xc002ecac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 e6 02 c0       	push   0xc002e678
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 ec 02 c0 01 	mov    BYTE PTR ds:0xc002eca8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 ec 02 c0       	push   0xc002ecb0
c000012c:	68 78 e6 02 c0       	push   0xc002e678
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 8f d7 01 00       	call   c001db32 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 c0 24 01 00       	call   c001287b <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 6d d7 01 00       	call   c001db32 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 15 dc 01 00       	call   c001dff9 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 73 e2 01 00       	call   c001e660 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 f0 f0 02 c0 	lgdtd  ds:0xc002f0f0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 d1 41 01 00       	call   c00147b3 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 c8 ec 02 c0       	mov    ds:0xc002ecc8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 c8 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d c8 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ecc8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 a0 9d 02 c0 02 	test   BYTE PTR [edx-0x3ffd6260],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 a0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6260],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 a0 9d 02 c0 08 	test   BYTE PTR [edx-0x3ffd6260],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 a0 9d 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6260],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 a0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6260],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d e0 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ece0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d e0 ec 02 c0    	mov    DWORD PTR ds:0xc002ece0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 e4 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd131c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 e4 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd131c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d e0 ec 02 c0    	mov    DWORD PTR ds:0xc002ece0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 0c ed 02 c0    	cmp    DWORD PTR ds:0xc002ed0c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 1c ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002ed1c
c0000e38:	c7 42 0c 14 ed 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ed14
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 1c ed 02 c0    	mov    DWORD PTR ds:0xc002ed1c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 0c ed 02 c0    	mov    DWORD PTR ds:0xc002ed0c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 e0 ec 02 c0 02 	test   BYTE PTR ds:0xc002ece0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d e0 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ece0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 e4 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd131c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 e4 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd131c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 14 ed 02 c0 	lea    edx,[eax*8-0x3ffd12ec]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 20 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed20
c00011ba:	81 fb 14 ed 02 c0    	cmp    ebx,0xc002ed14
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 14 ed 02 c0       	cmp    eax,0xc002ed14
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 10 ed 02 c0    	cmp    DWORD PTR ds:0xc002ed10,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 1c ed 02 c0       	mov    ds:0xc002ed1c,eax
c00011f6:	a3 20 ed 02 c0       	mov    ds:0xc002ed20,eax
c00011fb:	a3 10 ed 02 c0       	mov    ds:0xc002ed10,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 14 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ed14
c0001209:	c7 40 0c 14 ed 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ed14
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 20 ed 02 c0       	mov    ds:0xc002ed20,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 14 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ed14
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 d8 ec 02 c0 	lea    ebp,[edx*4-0x3ffd1328]
c000125a:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 e0 ec 02 c0 	lea    ecx,[edx*4-0x3ffd1320]
c0001275:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 14 f0 02 c0 	or     DWORD PTR [edi*4-0x3ffd0fec],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 14 ed 02 c0 	lea    eax,[eax*8-0x3ffd12ec]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 1c ed 02 c0    	mov    DWORD PTR ds:0xc002ed1c,ecx
c000132f:	89 0d 20 ed 02 c0    	mov    DWORD PTR ds:0xc002ed20,ecx
c0001335:	c7 41 08 14 ed 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ed14
c000133c:	c7 41 0c 14 ed 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ed14
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 0c ed 02 c0 	lea    edx,[ecx*8-0x3ffd12f4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 14 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0fec]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 14 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0fec]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 0c ed 02 c0 	lea    edx,[eax*4-0x3ffd12f4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 14 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0fec],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 1c ed 02 c0    	mov    DWORD PTR ds:0xc002ed1c,edi
c0001402:	89 3d 20 ed 02 c0    	mov    DWORD PTR ds:0xc002ed20,edi
c0001408:	c7 47 08 14 ed 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ed14
c000140f:	c7 47 0c 14 ed 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ed14
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 10 ed 02 c0    	mov    DWORD PTR ds:0xc002ed10,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 0c ed 02 c0       	mov    eax,ds:0xc002ed0c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 0c ed 02 c0    	mov    DWORD PTR ds:0xc002ed0c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba e0 ec 02 c0       	mov    edx,0xc002ece0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d e0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ece0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 34 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f034
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 34 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f034,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 34 f0 02 c0    	mov    DWORD PTR ds:0xc002f034,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 0c ed 02 c0    	cmp    DWORD PTR ds:0xc002ed0c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 0c ed 02 c0    	mov    DWORD PTR ds:0xc002ed0c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d e0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ece0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 3c f0 02 c0    	push   DWORD PTR ds:0xc002f03c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d e0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ece0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 3c f0 02 c0       	mov    eax,ds:0xc002f03c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 0c ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed0c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 0c ed 02 c0       	mov    eax,ds:0xc002ed0c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 e4 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd131c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 14 ed 02 c0       	mov    eax,0xc002ed14
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 0c f0 02 c0       	cmp    eax,0xc002f00c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 48 f0 02 c0       	mov    eax,ds:0xc002f048
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 30 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f030
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 44 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f044
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 54 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f054
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 a4 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd615c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 e0 ec 02 c0       	mov    ds:0xc002ece0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 24 f0 02 c0    	mov    DWORD PTR ds:0xc002f024,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 28 f0 02 c0    	mov    DWORD PTR ds:0xc002f028,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 2c f0 02 c0    	mov    DWORD PTR ds:0xc002f02c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 34 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f034,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 a0 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd860]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 be f5 01 00       	jmp    c00211b0 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 a0 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd860]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 ef f5 01 00       	jmp    c00211f7 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 a0 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd860]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 17 f6 01 00       	jmp    c002123e <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 2a 55 02 00       	call   c0027434 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 c0 9f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6040]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 c0 9f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6040]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba c0 9e 02 c0       	mov    edx,0xc0029ec0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba e0 9f 02 c0       	mov    edx,0xc0029fe0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 2c d3 02 c0       	mov    edx,0xc002d32c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ec 9f 02 c0       	mov    edx,0xc0029fec
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba d0 9f 02 c0       	mov    edx,0xc0029fd0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 80 f0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0f80]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 60 f0 02 c0    	mov    ax,ds:0xc002f060
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 60 f0 02 c0    	mov    ds:0xc002f060,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 27 43 02 00       	call   c0027434 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 40 9f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd60c0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 fb 9f 02 c0       	mov    eax,0xc0029ffb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 c0 9f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6040]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 f2 2c 02 00       	call   c0027434 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba d0 9f 02 c0       	mov    edx,0xc0029fd0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba c0 9e 02 c0       	mov    edx,0xc0029ec0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba d0 9e 02 c0       	mov    edx,0xc0029ed0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 80 f0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0f80]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 80 f0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0f80],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 b9 16 02 00       	call   c0027434 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 9f 16 02 00       	call   c0027434 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 17 9f 02 c0       	mov    eax,0xc0029f17
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 10 9f 02 c0       	mov    eax,0xc0029f10
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 80 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f80]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 00 9f 02 c0       	mov    esi,0xc0029f00
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 e2 fd 01 00       	call   c0027434 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba e0 9f 02 c0       	mov    edx,0xc0029fe0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba e0 9e 02 c0       	mov    edx,0xc0029ee0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba f0 9e 02 c0       	mov    edx,0xc0029ef0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 02 a0 02 c0       	mov    edx,0xc002a002
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 0e a0 02 c0       	mov    edx,0xc002a00e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 22 a0 02 c0       	mov    edx,0xc002a022
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 40 a3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a340
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 40 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a340
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 40 a1 02 c0       	mov    eax,0xc002a140
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 80 a0 02 c0       	mov    eax,0xc002a080
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 40 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fc0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 36 07 02 00       	call   c0028f07 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 f9 06 02 00       	call   c0028ee9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 cd 06 02 00       	call   c0028f07 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 80 fd 01 00       	call   c002860c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 02 08 02 00       	call   c00290a0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 47 06 02 00       	call   c0028f07 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 89 05 02 00       	call   c0028f07 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 56 05 02 00       	call   c0028ee9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 43 04 02 00       	call   c0028f07 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 0b 04 02 00       	call   c0028ee9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 40 a4 02 c0       	mov    eax,0xc002a440
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 17 02 02 00       	call   c0028f07 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 dc 01 02 00       	call   c0028ee9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 a0 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5760]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ec fe 01 00       	call   c0028c9b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 6a f8 01 00       	call   c0028638 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 26 01 02 00       	call   c0028f0b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 14 02 02 00       	call   c002902f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 fe f7 01 00       	call   c0028638 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 a9 00 02 00       	call   c0028f05 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 8a 00 02 00       	call   c0028f09 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 20 02 02 00       	call   c00290c0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 ca fd 01 00       	call   c0028c9b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 48 f7 01 00       	call   c0028638 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 04 00 02 00       	call   c0028f0b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 f2 00 02 00       	call   c002902f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 dc f6 01 00       	call   c0028638 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 87 ff 01 00       	call   c0028f05 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 67 ff 01 00       	call   c0028f09 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 fc 00 02 00       	call   c00290c0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 a2 fe 01 00       	call   c0028f07 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 60 fe 01 00       	call   c0028ee9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 48 fe 01 00       	call   c0028f07 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ba fb 01 00       	call   c0028c9b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 bc ee 01 00       	call   c0027fbb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 1f f5 01 00       	call   c0028638 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 71 fb 01 00       	call   c0028c9b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 77 ee 01 00       	call   c0027fbb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 46 fb 01 00       	call   c0028c9b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 96 fd 01 00       	call   c0028f05 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 73 f4 01 00       	call   c002860c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 f5 fe 01 00       	call   c00290a0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 1c fd 01 00       	call   c0028ee9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 17 f4 01 00       	call   c002860c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 95 fa 01 00       	call   c0028c9b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 18 f4 01 00       	call   c0028638 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 6a fa 01 00       	call   c0028c9b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 d1 f6 01 00       	call   c002891c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 50 ed 01 00       	call   c0027fbb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 b0 e6 01 00       	call   c0027950 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 87 fd 01 00       	call   c002902f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 70 f3 01 00       	call   c0028638 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 57 fd 01 00       	call   c002902f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 c9 ec 01 00       	call   c0027fbb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 02 fc 01 00       	call   c0028f0b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ea f5 01 00       	call   c002891c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 70 ec 01 00       	call   c0027fbb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 5e fd 01 00       	call   c00290c0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 30 f9 01 00       	call   c0028c9b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 87 f2 01 00       	call   c002860c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 66 fb 01 00       	call   c0028f07 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 ff eb 01 00       	call   c0027fbb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 2b f2 01 00       	call   c002860c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 cd fc 01 00       	call   c00290c0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 7e f8 01 00       	call   c0028c9b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 fb f1 01 00       	call   c0028638 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 4e f8 01 00       	call   c0028c9b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 54 eb 01 00       	call   c0027fbb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 24 f8 01 00       	call   c0028c9b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 76 fa 01 00       	call   c0028f07 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 4d f1 01 00       	call   c002860c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 cf fb 01 00       	call   c00290a0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 f6 f9 01 00       	call   c0028ee9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 f0 f0 01 00       	call   c002860c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 6e f7 01 00       	call   c0028c9b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 f1 f0 01 00       	call   c0028638 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 43 f7 01 00       	call   c0028c9b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 aa f3 01 00       	call   c002891c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 29 ea 01 00       	call   c0027fbb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 79 e3 01 00       	call   c0027950 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 50 fa 01 00       	call   c002902f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 39 f0 01 00       	call   c0028638 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 20 fa 01 00       	call   c002902f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 92 e9 01 00       	call   c0027fbb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 cb f8 01 00       	call   c0028f0b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 b2 f2 01 00       	call   c002891c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 31 e9 01 00       	call   c0027fbb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 1f fa 01 00       	call   c00290c0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 f1 f5 01 00       	call   c0028c9b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 48 ef 01 00       	call   c002860c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 27 f8 01 00       	call   c0028f07 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 c0 e8 01 00       	call   c0027fbb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ec ee 01 00       	call   c002860c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 61 f5 01 00       	call   c0028c9b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 67 e8 01 00       	call   c0027fbb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 00 a9 02 c0       	mov    eax,0xc002a900
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 14 a9 02 c0       	mov    eax,0xc002a914
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 dc f3 01 00       	call   c0028c9b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 5a ed 01 00       	call   c0028638 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ec df 01 00       	call   c0027950 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 c3 f6 01 00       	call   c002902f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 ac ec 01 00       	call   c0028638 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 8f f6 01 00       	call   c002902f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 01 e6 01 00       	call   c0027fbb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 61 f6 01 00       	call   c002902f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 50 ec 01 00       	call   c0028638 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 b9 e5 01 00       	call   c0027fbb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 da de 01 00       	call   c0027950 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 b1 f5 01 00       	call   c002902f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 9a eb 01 00       	call   c0028638 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 7d f5 01 00       	call   c002902f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ef e4 01 00       	call   c0027fbb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 4f f5 01 00       	call   c002902f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 3e eb 01 00       	call   c0028638 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 a7 e4 01 00       	call   c0027fbb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 85 e4 01 00       	call   c0027fbb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 61 dd 01 00       	call   c0027950 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 38 f4 01 00       	call   c002902f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 21 ea 01 00       	call   c0028638 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 04 f4 01 00       	call   c002902f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 76 e3 01 00       	call   c0027fbb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 d6 f3 01 00       	call   c002902f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 bf e9 01 00       	call   c0028638 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 28 e3 01 00       	call   c0027fbb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 88 f3 01 00       	call   c002902f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 71 e9 01 00       	call   c0028638 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 da e2 01 00       	call   c0027fbb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ef db 01 00       	call   c0027950 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 c6 f2 01 00       	call   c002902f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 af e8 01 00       	call   c0028638 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 96 f2 01 00       	call   c002902f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 08 e2 01 00       	call   c0027fbb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 68 f2 01 00       	call   c002902f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 51 e8 01 00       	call   c0028638 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ba e1 01 00       	call   c0027fbb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 1a f2 01 00       	call   c002902f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 03 e8 01 00       	call   c0028638 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 6c e1 01 00       	call   c0027fbb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 40 e1 01 00       	call   c0027fbb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 9d e7 01 00       	call   c0028638 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 59 f0 01 00       	call   c0028f0b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 e8 e0 01 00       	call   c0027fbb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 45 e7 01 00       	call   c0028638 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 01 f0 01 00       	call   c0028f0b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 7b d9 01 00       	call   c0027950 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 52 f0 01 00       	call   c002902f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 3b e6 01 00       	call   c0028638 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 1e f0 01 00       	call   c002902f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 90 df 01 00       	call   c0027fbb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 f0 ef 01 00       	call   c002902f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 d9 e5 01 00       	call   c0028638 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 42 df 01 00       	call   c0027fbb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 a2 ef 01 00       	call   c002902f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 8b e5 01 00       	call   c0028638 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 f4 de 01 00       	call   c0027fbb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 54 ef 01 00       	call   c002902f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 3d e5 01 00       	call   c0028638 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 a6 de 01 00       	call   c0027fbb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 06 ef 01 00       	call   c002902f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ef e4 01 00       	call   c0028638 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 58 de 01 00       	call   c0027fbb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 5a d7 01 00       	call   c0027950 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 31 ee 01 00       	call   c002902f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 1a e4 01 00       	call   c0028638 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 01 ee 01 00       	call   c002902f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 73 dd 01 00       	call   c0027fbb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 d3 ed 01 00       	call   c002902f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 bc e3 01 00       	call   c0028638 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 25 dd 01 00       	call   c0027fbb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 85 ed 01 00       	call   c002902f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 6e e3 01 00       	call   c0028638 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 d7 dc 01 00       	call   c0027fbb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 37 ed 01 00       	call   c002902f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 20 e3 01 00       	call   c0028638 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 89 dc 01 00       	call   c0027fbb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 e9 ec 01 00       	call   c002902f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 d2 e2 01 00       	call   c0028638 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 3b dc 01 00       	call   c0027fbb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 0f dc 01 00       	call   c0027fbb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 6c e2 01 00       	call   c0028638 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 28 eb 01 00       	call   c0028f0b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 b7 db 01 00       	call   c0027fbb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 14 e2 01 00       	call   c0028638 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 d0 ea 01 00       	call   c0028f0b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 5e db 01 00       	call   c0027fbb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 bb e1 01 00       	call   c0028638 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 77 ea 01 00       	call   c0028f0b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 05 db 01 00       	call   c0027fbb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 62 e1 01 00       	call   c0028638 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 1e ea 01 00       	call   c0028f0b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 7c d3 01 00       	call   c0027950 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 53 ea 01 00       	call   c002902f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 3c e0 01 00       	call   c0028638 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 1f ea 01 00       	call   c002902f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 91 d9 01 00       	call   c0027fbb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 f1 e9 01 00       	call   c002902f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 da df 01 00       	call   c0028638 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 43 d9 01 00       	call   c0027fbb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 a3 e9 01 00       	call   c002902f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 8c df 01 00       	call   c0028638 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 f5 d8 01 00       	call   c0027fbb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 55 e9 01 00       	call   c002902f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 3e df 01 00       	call   c0028638 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 a7 d8 01 00       	call   c0027fbb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 07 e9 01 00       	call   c002902f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 f0 de 01 00       	call   c0028638 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 59 d8 01 00       	call   c0027fbb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 b9 e8 01 00       	call   c002902f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 a2 de 01 00       	call   c0028638 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 08 d8 01 00       	call   c0027fbb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 68 e8 01 00       	call   c002902f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 51 de 01 00       	call   c0028638 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ba d7 01 00       	call   c0027fbb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 b4 d0 01 00       	call   c0027950 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 8b e7 01 00       	call   c002902f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 74 dd 01 00       	call   c0028638 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 54 e7 01 00       	call   c002902f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 c6 d6 01 00       	call   c0027fbb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 26 e7 01 00       	call   c002902f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 0f dd 01 00       	call   c0028638 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 78 d6 01 00       	call   c0027fbb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 d8 e6 01 00       	call   c002902f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 c1 dc 01 00       	call   c0028638 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 2a d6 01 00       	call   c0027fbb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 8a e6 01 00       	call   c002902f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 73 dc 01 00       	call   c0028638 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 dc d5 01 00       	call   c0027fbb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 3c e6 01 00       	call   c002902f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 25 dc 01 00       	call   c0028638 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 8e d5 01 00       	call   c0027fbb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ee e5 01 00       	call   c002902f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 d7 db 01 00       	call   c0028638 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 3d d5 01 00       	call   c0027fbb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 9d e5 01 00       	call   c002902f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 86 db 01 00       	call   c0028638 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 f5 d4 01 00       	call   c0027fbb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ce d4 01 00       	call   c0027fbb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 2c db 01 00       	call   c0028638 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 e8 e3 01 00       	call   c0028f0b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 77 d4 01 00       	call   c0027fbb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 d5 da 01 00       	call   c0028638 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 91 e3 01 00       	call   c0028f0b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 1f d4 01 00       	call   c0027fbb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 7d da 01 00       	call   c0028638 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 39 e3 01 00       	call   c0028f0b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 c7 d3 01 00       	call   c0027fbb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 25 da 01 00       	call   c0028638 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 e1 e2 01 00       	call   c0028f0b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 6f d3 01 00       	call   c0027fbb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 cd d9 01 00       	call   c0028638 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 89 e2 01 00       	call   c0028f0b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 1d d3 01 00       	call   c0027fbb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 7b d9 01 00       	call   c0028638 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 37 e2 01 00       	call   c0028f0b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 4b cb 01 00       	call   c0027950 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 22 e2 01 00       	call   c002902f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 0b d8 01 00       	call   c0028638 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 f2 e1 01 00       	call   c002902f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 64 d1 01 00       	call   c0027fbb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 44 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd56bc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 98 e1 01 00       	call   c002902f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 81 d7 01 00       	call   c0028638 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ec d0 01 00       	call   c0027fbb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 39 e1 01 00       	call   c002902f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 22 d7 01 00       	call   c0028638 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 8d d0 01 00       	call   c0027fbb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 da e0 01 00       	call   c002902f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 c3 d6 01 00       	call   c0028638 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 2e d0 01 00       	call   c0027fbb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 7b e0 01 00       	call   c002902f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 64 d6 01 00       	call   c0028638 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 cf cf 01 00       	call   c0027fbb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 1c e0 01 00       	call   c002902f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 05 d6 01 00       	call   c0028638 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 70 cf 01 00       	call   c0027fbb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 bd df 01 00       	call   c002902f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 a6 d5 01 00       	call   c0028638 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 11 cf 01 00       	call   c0027fbb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 5e df 01 00       	call   c002902f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 47 d5 01 00       	call   c0028638 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 b2 ce 01 00       	call   c0027fbb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 ff de 01 00       	call   c002902f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 e8 d4 01 00       	call   c0028638 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 53 ce 01 00       	call   c0027fbb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 5d c7 01 00       	call   c0027950 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 34 de 01 00       	call   c002902f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 1d d4 01 00       	call   c0028638 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 04 de 01 00       	call   c002902f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 76 cd 01 00       	call   c0027fbb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 60 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd56a0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 a9 dd 01 00       	call   c002902f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 92 d3 01 00       	call   c0028638 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 fd cc 01 00       	call   c0027fbb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 49 dd 01 00       	call   c002902f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 32 d3 01 00       	call   c0028638 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 9d cc 01 00       	call   c0027fbb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 e9 dc 01 00       	call   c002902f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 d2 d2 01 00       	call   c0028638 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 3d cc 01 00       	call   c0027fbb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 89 dc 01 00       	call   c002902f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 72 d2 01 00       	call   c0028638 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 dd cb 01 00       	call   c0027fbb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 29 dc 01 00       	call   c002902f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 12 d2 01 00       	call   c0028638 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 7d cb 01 00       	call   c0027fbb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 c9 db 01 00       	call   c002902f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 b2 d1 01 00       	call   c0028638 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 1d cb 01 00       	call   c0027fbb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 69 db 01 00       	call   c002902f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 52 d1 01 00       	call   c0028638 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 bd ca 01 00       	call   c0027fbb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 09 db 01 00       	call   c002902f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 f2 d0 01 00       	call   c0028638 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 5d ca 01 00       	call   c0027fbb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 7c a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5684]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 02 ca 01 00       	call   c0027fbb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 5f d0 01 00       	call   c0028638 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 1b d9 01 00       	call   c0028f0b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 a5 c9 01 00       	call   c0027fbb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 02 d0 01 00       	call   c0028638 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 be d8 01 00       	call   c0028f0b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 48 c9 01 00       	call   c0027fbb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 a5 cf 01 00       	call   c0028638 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 61 d8 01 00       	call   c0028f0b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 eb c8 01 00       	call   c0027fbb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 48 cf 01 00       	call   c0028638 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 04 d8 01 00       	call   c0028f0b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 8e c8 01 00       	call   c0027fbb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 eb ce 01 00       	call   c0028638 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 a7 d7 01 00       	call   c0028f0b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 31 c8 01 00       	call   c0027fbb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 8e ce 01 00       	call   c0028638 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 4a d7 01 00       	call   c0028f0b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 d4 c7 01 00       	call   c0027fbb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 31 ce 01 00       	call   c0028638 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ed d6 01 00       	call   c0028f0b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 77 c7 01 00       	call   c0027fbb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 d4 cd 01 00       	call   c0028638 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 90 d6 01 00       	call   c0028f0b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 8c cd 01 00       	call   c0028638 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 04 d8 01 00       	jmp    c00290c0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 6e d4 01 00       	call   c0028f07 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 2c d4 01 00       	call   c0028ee9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 c3 d1 01 00       	call   c0028c9b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 c4 c4 01 00       	call   c0027fbb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 93 d1 01 00       	call   c0028c9b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 fa cd 01 00       	call   c002891c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 99 d3 01 00       	call   c0028ee9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 9c d3 01 00       	call   c0028f07 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 6f d3 01 00       	call   c0028f07 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 68 cd 01 00       	call   c002891c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 f2 d4 01 00       	call   c00290c0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 cd d4 01 00       	call   c00290c0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 9f d0 01 00       	call   c0028c9b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 f6 c9 01 00       	call   c002860c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 d5 d2 01 00       	call   c0028f07 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 6e c3 01 00       	call   c0027fbb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 92 c9 01 00       	call   c002860c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 34 d4 01 00       	call   c00290c0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 6c cc 01 00       	call   c002891c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 e9 c2 01 00       	call   c0027fbb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 15 cf 01 00       	call   c0028c9b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 15 c2 01 00       	call   c0027fbb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 f5 c1 01 00       	call   c0027fbb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 c5 ce 01 00       	call   c0028c9b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 15 d1 01 00       	call   c0028f05 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 f4 c7 01 00       	call   c002860c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 76 d2 01 00       	call   c00290a0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 9d d0 01 00       	call   c0028ee9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 9b c7 01 00       	call   c002860c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 19 ce 01 00       	call   c0028c9b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 9c c7 01 00       	call   c0028638 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ee cd 01 00       	call   c0028c9b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 55 ca 01 00       	call   c002891c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 d4 c0 01 00       	call   c0027fbb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 9e cd 01 00       	call   c0028c9b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ea cf 01 00       	call   c0028f07 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 df c6 01 00       	call   c0028638 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 b1 c6 01 00       	call   c0028638 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ea cc 01 00       	call   c0028c9b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 4e c9 01 00       	call   c002891c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 16 c9 01 00       	call   c002891c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 95 bf 01 00       	call   c0027fbb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 82 d0 01 00       	call   c00290c0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 54 cc 01 00       	call   c0028c9b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 ab c5 01 00       	call   c002860c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 8a ce 01 00       	call   c0028f07 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 22 bf 01 00       	call   c0027fbb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 46 c5 01 00       	call   c002860c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 e8 cf 01 00       	call   c00290c0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 a9 cd 01 00       	call   c0028f07 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 67 cd 01 00       	call   c0028ee9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 fe ca 01 00       	call   c0028c9b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 ff bd 01 00       	call   c0027fbb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ce ca 01 00       	call   c0028c9b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 35 c7 01 00       	call   c002891c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 d4 cc 01 00       	call   c0028ee9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 d7 cc 01 00       	call   c0028f07 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 aa cc 01 00       	call   c0028f07 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 a3 c6 01 00       	call   c002891c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 2d ce 01 00       	call   c00290c0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 08 ce 01 00       	call   c00290c0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 da c9 01 00       	call   c0028c9b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 31 c3 01 00       	call   c002860c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 10 cc 01 00       	call   c0028f07 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 a9 bc 01 00       	call   c0027fbb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 cd c2 01 00       	call   c002860c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 6f cd 01 00       	call   c00290c0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 a7 c5 01 00       	call   c002891c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 24 bc 01 00       	call   c0027fbb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 4f c8 01 00       	call   c0028c9b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 4f bb 01 00       	call   c0027fbb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 2f bb 01 00       	call   c0027fbb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 ff c7 01 00       	call   c0028c9b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 4f ca 01 00       	call   c0028f05 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 2d c1 01 00       	call   c002860c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 af cb 01 00       	call   c00290a0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 d6 c9 01 00       	call   c0028ee9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 d3 c0 01 00       	call   c002860c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 51 c7 01 00       	call   c0028c9b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 d4 c0 01 00       	call   c0028638 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 26 c7 01 00       	call   c0028c9b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 8d c3 01 00       	call   c002891c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 0c ba 01 00       	call   c0027fbb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 d6 c6 01 00       	call   c0028c9b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 22 c9 01 00       	call   c0028f07 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 17 c0 01 00       	call   c0028638 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 e9 bf 01 00       	call   c0028638 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 20 c6 01 00       	call   c0028c9b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 84 c2 01 00       	call   c002891c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 51 c2 01 00       	call   c002891c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 d0 b8 01 00       	call   c0027fbb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 bd c9 01 00       	call   c00290c0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 8f c5 01 00       	call   c0028c9b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 e6 be 01 00       	call   c002860c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 c5 c7 01 00       	call   c0028f07 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 5d b8 01 00       	call   c0027fbb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 81 be 01 00       	call   c002860c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 23 c9 01 00       	call   c00290c0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 e4 c6 01 00       	call   c0028f07 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 a2 c6 01 00       	call   c0028ee9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 39 c4 01 00       	call   c0028c9b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 3a b7 01 00       	call   c0027fbb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 09 c4 01 00       	call   c0028c9b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 70 c0 01 00       	call   c002891c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 0f c6 01 00       	call   c0028ee9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 12 c6 01 00       	call   c0028f07 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 e5 c5 01 00       	call   c0028f07 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 de bf 01 00       	call   c002891c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 68 c7 01 00       	call   c00290c0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 43 c7 01 00       	call   c00290c0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 15 c3 01 00       	call   c0028c9b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 6c bc 01 00       	call   c002860c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 4b c5 01 00       	call   c0028f07 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 e4 b5 01 00       	call   c0027fbb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 08 bc 01 00       	call   c002860c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 aa c6 01 00       	call   c00290c0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 e2 be 01 00       	call   c002891c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 5f b5 01 00       	call   c0027fbb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 8a c1 01 00       	call   c0028c9b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 8a b4 01 00       	call   c0027fbb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 6a b4 01 00       	call   c0027fbb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 3a c1 01 00       	call   c0028c9b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 8a c3 01 00       	call   c0028f05 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 68 ba 01 00       	call   c002860c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ea c4 01 00       	call   c00290a0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 11 c3 01 00       	call   c0028ee9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 0e ba 01 00       	call   c002860c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 8c c0 01 00       	call   c0028c9b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 0f ba 01 00       	call   c0028638 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 61 c0 01 00       	call   c0028c9b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 c8 bc 01 00       	call   c002891c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 47 b3 01 00       	call   c0027fbb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 11 c0 01 00       	call   c0028c9b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 5d c2 01 00       	call   c0028f07 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 52 b9 01 00       	call   c0028638 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 24 b9 01 00       	call   c0028638 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 5b bf 01 00       	call   c0028c9b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 bf bb 01 00       	call   c002891c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 8c bb 01 00       	call   c002891c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 0b b2 01 00       	call   c0027fbb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 f8 c2 01 00       	call   c00290c0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 ca be 01 00       	call   c0028c9b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 21 b8 01 00       	call   c002860c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 00 c1 01 00       	call   c0028f07 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 98 b1 01 00       	call   c0027fbb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 bc b7 01 00       	call   c002860c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 5e c2 01 00       	call   c00290c0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 1f c0 01 00       	call   c0028f07 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 dd bf 01 00       	call   c0028ee9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 74 bd 01 00       	call   c0028c9b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 75 b0 01 00       	call   c0027fbb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 44 bd 01 00       	call   c0028c9b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 ab b9 01 00       	call   c002891c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 4a bf 01 00       	call   c0028ee9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 4d bf 01 00       	call   c0028f07 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 20 bf 01 00       	call   c0028f07 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 19 b9 01 00       	call   c002891c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 a3 c0 01 00       	call   c00290c0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 7e c0 01 00       	call   c00290c0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 50 bc 01 00       	call   c0028c9b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 a7 b5 01 00       	call   c002860c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 86 be 01 00       	call   c0028f07 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 1f af 01 00       	call   c0027fbb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 43 b5 01 00       	call   c002860c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 e5 bf 01 00       	call   c00290c0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 1d b8 01 00       	call   c002891c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 9a ae 01 00       	call   c0027fbb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 c5 ba 01 00       	call   c0028c9b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 c5 ad 01 00       	call   c0027fbb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 a5 ad 01 00       	call   c0027fbb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 75 ba 01 00       	call   c0028c9b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 c5 bc 01 00       	call   c0028f05 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 a3 b3 01 00       	call   c002860c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 25 be 01 00       	call   c00290a0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 4c bc 01 00       	call   c0028ee9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 49 b3 01 00       	call   c002860c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 c7 b9 01 00       	call   c0028c9b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 4a b3 01 00       	call   c0028638 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 9c b9 01 00       	call   c0028c9b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 03 b6 01 00       	call   c002891c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 82 ac 01 00       	call   c0027fbb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 4c b9 01 00       	call   c0028c9b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 98 bb 01 00       	call   c0028f07 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 8d b2 01 00       	call   c0028638 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 5f b2 01 00       	call   c0028638 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 96 b8 01 00       	call   c0028c9b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 fa b4 01 00       	call   c002891c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 c7 b4 01 00       	call   c002891c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 46 ab 01 00       	call   c0027fbb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 33 bc 01 00       	call   c00290c0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 05 b8 01 00       	call   c0028c9b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 5c b1 01 00       	call   c002860c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 3b ba 01 00       	call   c0028f07 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 d3 aa 01 00       	call   c0027fbb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 f7 b0 01 00       	call   c002860c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 99 bb 01 00       	call   c00290c0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 57 b9 01 00       	call   c0028f07 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 15 b9 01 00       	call   c0028ee9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 ac b6 01 00       	call   c0028c9b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 ad a9 01 00       	call   c0027fbb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 7c b6 01 00       	call   c0028c9b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 e3 b2 01 00       	call   c002891c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 82 b8 01 00       	call   c0028ee9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 85 b8 01 00       	call   c0028f07 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 58 b8 01 00       	call   c0028f07 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 51 b2 01 00       	call   c002891c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 db b9 01 00       	call   c00290c0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 b2 b9 01 00       	call   c00290c0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 84 b5 01 00       	call   c0028c9b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 db ae 01 00       	call   c002860c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ba b7 01 00       	call   c0028f07 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 53 a8 01 00       	call   c0027fbb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 7b ae 01 00       	call   c002860c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 1d b9 01 00       	call   c00290c0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 56 b1 01 00       	call   c002891c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 d3 a7 01 00       	call   c0027fbb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 ff b3 01 00       	call   c0028c9b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 ff a6 01 00       	call   c0027fbb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 df a6 01 00       	call   c0027fbb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 af b3 01 00       	call   c0028c9b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 e3 b5 01 00       	call   c0028ee9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 da ac 01 00       	call   c002860c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 5c b7 01 00       	call   c00290a0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 83 b5 01 00       	call   c0028ee9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 7d ac 01 00       	call   c002860c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 fb b2 01 00       	call   c0028c9b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 7e ac 01 00       	call   c0028638 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 d0 b2 01 00       	call   c0028c9b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 37 af 01 00       	call   c002891c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 b6 a5 01 00       	call   c0027fbb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 80 b2 01 00       	call   c0028c9b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 cc b4 01 00       	call   c0028f07 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 c1 ab 01 00       	call   c0028638 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 93 ab 01 00       	call   c0028638 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 d7 b1 01 00       	call   c0028c9b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 3e ae 01 00       	call   c002891c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 27 ab 01 00       	call   c0028638 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 e3 b3 01 00       	call   c0028f0b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 d6 ad 01 00       	call   c002891c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 55 a4 01 00       	call   c0027fbb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 42 b5 01 00       	call   c00290c0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 14 b1 01 00       	call   c0028c9b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 6b aa 01 00       	call   c002860c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 4a b3 01 00       	call   c0028f07 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 e2 a3 01 00       	call   c0027fbb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 0a aa 01 00       	call   c002860c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 ac b4 01 00       	call   c00290c0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 a4 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd565c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 98 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5668]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 5f b1 01 00       	call   c0028f07 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 1d b1 01 00       	call   c0028ee9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 09 b1 01 00       	call   c0028f07 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 7b ae 01 00       	call   c0028c9b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 f9 a7 01 00       	call   c0028638 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 4b ae 01 00       	call   c0028c9b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 51 a1 01 00       	call   c0027fbb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 20 ae 01 00       	call   c0028c9b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 70 b0 01 00       	call   c0028f05 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 51 a7 01 00       	call   c002860c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 d3 b1 01 00       	call   c00290a0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 fa af 01 00       	call   c0028ee9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 f9 a6 01 00       	call   c002860c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 77 ad 01 00       	call   c0028c9b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 fa a6 01 00       	call   c0028638 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 4c ad 01 00       	call   c0028c9b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 b3 a9 01 00       	call   c002891c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 32 a0 01 00       	call   c0027fbb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 5a a9 01 00       	call   c002891c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 e0 9f 01 00       	call   c0027fbb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ce b0 01 00       	call   c00290c0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 a0 ac 01 00       	call   c0028c9b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 f7 a5 01 00       	call   c002860c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 d6 ae 01 00       	call   c0028f07 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 6f 9f 01 00       	call   c0027fbb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 9b a5 01 00       	call   c002860c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 3d b0 01 00       	call   c00290c0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ea ab 01 00       	call   c0028c9b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 67 a5 01 00       	call   c0028638 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 b8 ab 01 00       	call   c0028c9b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 be 9e 01 00       	call   c0027fbb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 8e ab 01 00       	call   c0028c9b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 e2 ad 01 00       	call   c0028f09 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 bb a4 01 00       	call   c002860c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 3d af 01 00       	call   c00290a0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 64 ad 01 00       	call   c0028ee9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 62 a4 01 00       	call   c002860c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 e0 aa 01 00       	call   c0028c9b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 63 a4 01 00       	call   c0028638 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 b5 aa 01 00       	call   c0028c9b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 1c a7 01 00       	call   c002891c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 9b 9d 01 00       	call   c0027fbb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 b7 a6 01 00       	call   c002891c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 36 9d 01 00       	call   c0027fbb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 24 ae 01 00       	call   c00290c0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 f6 a9 01 00       	call   c0028c9b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 4d a3 01 00       	call   c002860c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 2c ac 01 00       	call   c0028f07 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 c5 9c 01 00       	call   c0027fbb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 f1 a2 01 00       	call   c002860c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 62 a9 01 00       	call   c0028c9b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 68 9c 01 00       	call   c0027fbb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 be aa 02 c0       	mov    eax,0xc002aabe
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 cf aa 02 c0       	mov    eax,0xc002aacf
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c000e4e3:	ff 05 04 26 03 c0    	inc    DWORD PTR ds:0xc0032604
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 00 26 03 c0 00 	cmp    DWORD PTR ds:0xc0032600,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c000e50d:	e8 74 fd 00 00       	call   c001e286 <schedule()>
c000e512:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c000e517:	48                   	dec    eax
c000e518:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 06 ab 02 c0       	push   0xc002ab06
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 e8 f0 02 c0       	mov    eax,0xc002f0e8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 0f ab 02 c0       	push   0xc002ab0f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 34 74 02 c0       	mov    eax,0xc0027434
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 19 ab 02 c0       	push   0xc002ab19
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 68 71 02 c0       	mov    eax,0xc0027168
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 22 ab 02 c0       	push   0xc002ab22
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 34 75 02 c0       	mov    eax,0xc0027534
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 2c ab 02 c0       	push   0xc002ab2c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 b4 72 02 c0       	mov    eax,0xc00272b4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 35 ab 02 c0       	push   0xc002ab35
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ec f0 02 c0       	mov    eax,0xc002f0ec
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 42 ab 02 c0       	push   0xc002ab42
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ed f0 02 c0       	mov    eax,0xc002f0ed
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 f3 59 00 00       	call   c0014060 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c000e6b2:	68 4f ab 02 c0       	push   0xc002ab4f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 8b f7 00 00       	call   c001de4a <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 6e f9 00 00       	call   c001e042 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 c0 ea 01 c0       	push   0xc001eac0
c000e6dd:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c000e6e3:	e8 5a f9 00 00       	call   c001e042 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000e6f0:	c6 05 ed f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0ed,0x1
c000e6f7:	e8 fb 07 01 00       	call   c001eef7 <Vm::initialise8086()>
c000e6fc:	e8 27 47 00 00       	call   c0012e28 <Fs::initVFS()>
c000e701:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 ba df 00 00       	call   c001c6d7 <Sys::loadSyscalls()>
c000e71d:	e8 78 bc 00 00       	call   c001a39a <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 5c ab 02 c0       	push   0xc002ab5c
c000e72c:	68 65 ab 02 c0       	push   0xc002ab65
c000e731:	e8 53 cb 00 00       	call   c001b289 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 da 51 00 00       	call   c0013918 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 d1 58 00 00       	call   c0014020 <Device::loadDriversForAll()>
c000e74f:	e8 92 b7 00 00       	call   c0019ee6 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 6d ab 02 c0       	push   0xc002ab6d
c000e763:	e8 3f f1 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 61 f3 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 07 fd 00 00       	call   c001e485 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 89 ab 02 c0       	push   0xc002ab89
c000e793:	50                   	push   eax
c000e794:	e8 41 59 00 00       	call   c00140da <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 01 f1 02 c0 04 	test   BYTE PTR ds:0xc002f101,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 c9 87 01 00       	call   c00270f6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 8e a2 00 00       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 67 a2 00 00       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 45 a2 00 00       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 23 a2 00 00       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 00 f1 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f100,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 31 a1 00 00       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 0c a1 00 00       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 33 86 01 00       	call   c00270b0 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 f0 85 01 00       	call   c0027090 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 28 a1 00 00       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 99 ab 02 c0       	push   0xc002ab99
c000eaf9:	e8 9f 3f 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 ac ab 02 c0       	push   0xc002abac
c000eb1c:	e8 7c 3f 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 bd ab 02 c0       	push   0xc002abbd
c000eb3f:	e8 59 3f 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 ce ab 02 c0       	push   0xc002abce
c000eb62:	e8 36 3f 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 df ab 02 c0       	push   0xc002abdf
c000eb85:	e8 13 3f 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 f0 ab 02 c0       	push   0xc002abf0
c000eba8:	e8 f0 3e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 01 ac 02 c0       	push   0xc002ac01
c000ebcb:	e8 cd 3e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 12 ac 02 c0       	push   0xc002ac12
c000ebee:	e8 aa 3e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 23 ac 02 c0       	push   0xc002ac23
c000ec11:	e8 87 3e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 34 ac 02 c0       	push   0xc002ac34
c000ec34:	e8 64 3e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 45 ac 02 c0       	push   0xc002ac45
c000ec57:	e8 41 3e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 56 ac 02 c0       	push   0xc002ac56
c000ec7a:	e8 1e 3e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 67 ac 02 c0       	push   0xc002ac67
c000ec9d:	e8 fb 3d 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 78 ac 02 c0       	push   0xc002ac78
c000ecc0:	e8 d8 3d 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 89 ac 02 c0       	push   0xc002ac89
c000ece3:	e8 b5 3d 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 9a ac 02 c0       	push   0xc002ac9a
c000ed06:	e8 92 3d 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 ab ac 02 c0       	push   0xc002acab
c000ed29:	e8 6f 3d 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 bc ac 02 c0       	push   0xc002acbc
c000ed4c:	e8 4c 3d 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 cd ac 02 c0       	push   0xc002accd
c000ed6b:	e8 2d 3d 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 b0 c6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c6b0
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 1c 3d 00 00       	jmp    c0012a9d <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 de ac 02 c0       	push   0xc002acde
c000ee54:	e8 7a b6 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 e4 ac 02 c0       	push   0xc002ace4
c000ee8c:	e8 42 b6 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 00 f1 02 c0 04 	test   BYTE PTR ds:0xc002f100,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 20 e0 02 c0 	sete   BYTE PTR ds:0xc002e020
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 33 90 00 00       	call   c0017f32 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 c8 4f 00 00       	call   c0013ed6 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 70 9d 00 00       	call   c0018cae <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 89 4f 00 00       	call   c0013ed6 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 15 55 00 00       	call   c001447e <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 59 4f 00 00       	call   c0013ed6 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 c5 f1 00 00       	call   c001e164 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 ea ac 02 c0       	push   0xc002acea
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 b0 3a 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 fb ac 02 c0       	push   0xc002acfb
c000f00a:	e8 c4 b4 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 08 ad 02 c0       	push   0xc002ad08
c000f01f:	e8 af b4 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 12 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad12
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 98 b4 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 4c ad 02 c0       	push   0xc002ad4c
c000f0d0:	e8 c8 39 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 f2 f0 02 c0       	mov    ds:0xc002f0f2,eax
c000f111:	66 89 15 f0 f0 02 c0 	mov    WORD PTR ds:0xc002f0f0,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c000f228:	48                   	dec    eax
c000f229:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 e8 f0 02 c0    	push   DWORD PTR ds:0xc002f0e8
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 c1 9e 01 00       	call   c0029140 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 b8 9e 01 00       	call   c0029140 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 f8 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f0f8,0x7ff
c000f375:	a3 fa f0 02 c0       	mov    ds:0xc002f0fa,eax
c000f37a:	0f 01 1d f8 f0 02 c0 	lidtd  ds:0xc002f0f8
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000f66c:	e8 5f 29 00 00       	call   c0011fd0 <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 39 19 00 00       	call   c0010fc8 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 6a 19 00 00       	call   c0011008 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 e8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e8
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d 00 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e000
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 68 ad 02 c0       	push   0xc002ad68
c000f745:	e8 53 33 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 00 e0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e000,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000f771:	8b 2d 00 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e000
c000f777:	e8 f0 03 00 00       	call   c000fb6c <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 45 27 00 00       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d 00 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e000
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 98 ad 02 c0       	push   0xc002ad98
c000f7fd:	e8 d1 ac 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 9d ad 02 c0       	push   0xc002ad9d
c000f813:	e8 bb ac 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c000f833:	48                   	dec    eax
c000f834:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000f854:	e8 77 27 00 00       	call   c0011fd0 <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000f86a:	e8 0b 24 00 00       	call   c0011c7a <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 a4 ad 02 c0       	push   0xc002ada4
c000f92b:	e8 6d 31 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000f930:	e8 e9 08 00 00       	call   c001021e <installVgaTextImplementation()>
c000f935:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f93a:	a3 00 f1 02 c0       	mov    ds:0xc002f100,eax
c000f93f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f944:	05 ff 0f 00 00       	add    eax,0xfff
c000f949:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f94e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f951:	e8 8f 03 00 00       	call   c000fce5 <Phys::physicalMemorySetup(unsigned int)>
c000f956:	e8 fb 1e 00 00       	call   c0011856 <Virt::virtualMemorySetup()>
c000f95b:	58                   	pop    eax
c000f95c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f960:	53                   	push   ebx
c000f961:	e8 3c 21 00 00       	call   c0011aa2 <VAS::VAS()>
c000f966:	89 1d 50 f2 02 c0    	mov    DWORD PTR ds:0xc002f250,ebx
c000f96c:	e8 af 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f971:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f978:	e8 0f ff ff ff       	call   c000f88c <malloc>
c000f97d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f980:	89 c6                	mov    esi,eax
c000f982:	e8 fd ed ff ff       	call   c000e784 <Computer::Computer()>
c000f987:	6a 00                	push   0x0
c000f989:	89 35 e8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e8,esi
c000f98f:	6a 00                	push   0x0
c000f991:	6a 00                	push   0x0
c000f993:	56                   	push   esi
c000f994:	e8 3b f5 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000f999:	83 c4 14             	add    esp,0x14
c000f99c:	53                   	push   ebx
c000f99d:	e8 b0 23 00 00       	call   c0011d52 <VAS::~VAS()>
c000f9a2:	83 c4 30             	add    esp,0x30
c000f9a5:	5b                   	pop    ebx
c000f9a6:	5e                   	pop    esi
c000f9a7:	5f                   	pop    edi
c000f9a8:	c3                   	ret    

c000f9a9 <Phys::allocateDMA(unsigned long)>:
c000f9a9:	55                   	push   ebp
c000f9aa:	31 d2                	xor    edx,edx
c000f9ac:	57                   	push   edi
c000f9ad:	31 ed                	xor    ebp,ebp
c000f9af:	56                   	push   esi
c000f9b0:	31 c9                	xor    ecx,ecx
c000f9b2:	53                   	push   ebx
c000f9b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9b7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f9bd:	31 c0                	xor    eax,eax
c000f9bf:	c1 ee 0c             	shr    esi,0xc
c000f9c2:	eb 17                	jmp    c000f9db <Phys::allocateDMA(unsigned long)+0x32>
c000f9c4:	85 c9                	test   ecx,ecx
c000f9c6:	75 04                	jne    c000f9cc <Phys::allocateDMA(unsigned long)+0x23>
c000f9c8:	89 d5                	mov    ebp,edx
c000f9ca:	89 d0                	mov    eax,edx
c000f9cc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f9cf:	39 de                	cmp    esi,ebx
c000f9d1:	74 20                	je     c000f9f3 <Phys::allocateDMA(unsigned long)+0x4a>
c000f9d3:	42                   	inc    edx
c000f9d4:	89 d9                	mov    ecx,ebx
c000f9d6:	83 fa 2f             	cmp    edx,0x2f
c000f9d9:	7f 11                	jg     c000f9ec <Phys::allocateDMA(unsigned long)+0x43>
c000f9db:	80 ba 40 f1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0ec0],0x0
c000f9e2:	74 e0                	je     c000f9c4 <Phys::allocateDMA(unsigned long)+0x1b>
c000f9e4:	31 c9                	xor    ecx,ecx
c000f9e6:	42                   	inc    edx
c000f9e7:	83 fa 2f             	cmp    edx,0x2f
c000f9ea:	7e ef                	jle    c000f9db <Phys::allocateDMA(unsigned long)+0x32>
c000f9ec:	5b                   	pop    ebx
c000f9ed:	31 c0                	xor    eax,eax
c000f9ef:	5e                   	pop    esi
c000f9f0:	5f                   	pop    edi
c000f9f1:	5d                   	pop    ebp
c000f9f2:	c3                   	ret    
c000f9f3:	8d 14 30             	lea    edx,[eax+esi*1]
c000f9f6:	89 d7                	mov    edi,edx
c000f9f8:	4f                   	dec    edi
c000f9f9:	79 03                	jns    c000f9fe <Phys::allocateDMA(unsigned long)+0x55>
c000f9fb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f9fe:	c1 ff 04             	sar    edi,0x4
c000fa01:	89 c2                	mov    edx,eax
c000fa03:	c1 fa 04             	sar    edx,0x4
c000fa06:	39 fa                	cmp    edx,edi
c000fa08:	75 2f                	jne    c000fa39 <Phys::allocateDMA(unsigned long)+0x90>
c000fa0a:	85 db                	test   ebx,ebx
c000fa0c:	74 1a                	je     c000fa28 <Phys::allocateDMA(unsigned long)+0x7f>
c000fa0e:	be 40 f1 02 c0       	mov    esi,0xc002f140
c000fa13:	8d 90 40 f1 02 c0    	lea    edx,[eax-0x3ffd0ec0]
c000fa19:	f7 d6                	not    esi
c000fa1b:	29 c6                	sub    esi,eax
c000fa1d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa20:	42                   	inc    edx
c000fa21:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa24:	39 d9                	cmp    ecx,ebx
c000fa26:	7f f5                	jg     c000fa1d <Phys::allocateDMA(unsigned long)+0x74>
c000fa28:	85 ff                	test   edi,edi
c000fa2a:	74 13                	je     c000fa3f <Phys::allocateDMA(unsigned long)+0x96>
c000fa2c:	5b                   	pop    ebx
c000fa2d:	05 50 20 0c 00       	add    eax,0xc2050
c000fa32:	5e                   	pop    esi
c000fa33:	c1 e0 0c             	shl    eax,0xc
c000fa36:	5f                   	pop    edi
c000fa37:	5d                   	pop    ebp
c000fa38:	c3                   	ret    
c000fa39:	89 ea                	mov    edx,ebp
c000fa3b:	31 c9                	xor    ecx,ecx
c000fa3d:	eb a7                	jmp    c000f9e6 <Phys::allocateDMA(unsigned long)+0x3d>
c000fa3f:	5b                   	pop    ebx
c000fa40:	c1 e0 0c             	shl    eax,0xc
c000fa43:	5e                   	pop    esi
c000fa44:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa49:	5f                   	pop    edi
c000fa4a:	5d                   	pop    ebp
c000fa4b:	c3                   	ret    

c000fa4c <Phys::freeDMA(unsigned long, unsigned long)>:
c000fa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fa54:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fa5a:	c1 e9 0c             	shr    ecx,0xc
c000fa5d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fa62:	76 25                	jbe    c000fa89 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fa64:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fa69:	c1 e8 0c             	shr    eax,0xc
c000fa6c:	8d 50 10             	lea    edx,[eax+0x10]
c000fa6f:	85 c9                	test   ecx,ecx
c000fa71:	74 15                	je     c000fa88 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fa73:	8d 82 40 f1 02 c0    	lea    eax,[edx-0x3ffd0ec0]
c000fa79:	8d 94 11 40 f1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0ec0]
c000fa80:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa83:	40                   	inc    eax
c000fa84:	39 d0                	cmp    eax,edx
c000fa86:	75 f8                	jne    c000fa80 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fa88:	c3                   	ret    
c000fa89:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fa8f:	c1 ea 0c             	shr    edx,0xc
c000fa92:	eb db                	jmp    c000fa6f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fa94 <Phys::setPageState(unsigned long, bool)>:
c000fa94:	56                   	push   esi
c000fa95:	ba 01 00 00 00       	mov    edx,0x1
c000fa9a:	53                   	push   ebx
c000fa9b:	8b 35 04 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e004
c000faa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faa5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faa9:	89 c8                	mov    eax,ecx
c000faab:	83 e1 07             	and    ecx,0x7
c000faae:	c1 e8 03             	shr    eax,0x3
c000fab1:	d3 e3                	shl    ebx,cl
c000fab3:	01 c6                	add    esi,eax
c000fab5:	d3 e2                	shl    edx,cl
c000fab7:	f7 d2                	not    edx
c000fab9:	20 16                	and    BYTE PTR [esi],dl
c000fabb:	03 05 04 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e004
c000fac1:	08 18                	or     BYTE PTR [eax],bl
c000fac3:	5b                   	pop    ebx
c000fac4:	5e                   	pop    esi
c000fac5:	c3                   	ret    

c000fac6 <Phys::getPageState(unsigned long)>:
c000fac6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000faca:	8b 15 04 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e004
c000fad0:	89 c8                	mov    eax,ecx
c000fad2:	83 e1 07             	and    ecx,0x7
c000fad5:	c1 e8 03             	shr    eax,0x3
c000fad8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fadc:	d3 f8                	sar    eax,cl
c000fade:	83 e0 01             	and    eax,0x1
c000fae1:	c3                   	ret    

c000fae2 <Phys::freePage(unsigned long)>:
c000fae2:	53                   	push   ebx
c000fae3:	83 ec 08             	sub    esp,0x8
c000fae6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faea:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000faf0:	76 57                	jbe    c000fb49 <Phys::freePage(unsigned long)+0x67>
c000faf2:	c1 eb 0c             	shr    ebx,0xc
c000faf5:	53                   	push   ebx
c000faf6:	e8 cb ff ff ff       	call   c000fac6 <Phys::getPageState(unsigned long)>
c000fafb:	5a                   	pop    edx
c000fafc:	84 c0                	test   al,al
c000fafe:	74 5b                	je     c000fb5b <Phys::freePage(unsigned long)+0x79>
c000fb00:	a1 30 f1 02 c0       	mov    eax,ds:0xc002f130
c000fb05:	48                   	dec    eax
c000fb06:	a3 30 f1 02 c0       	mov    ds:0xc002f130,eax
c000fb0b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb0e:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb11:	c1 e0 02             	shl    eax,0x2
c000fb14:	99                   	cdq    
c000fb15:	f7 3d 34 f1 02 c0    	idiv   DWORD PTR ds:0xc002f134
c000fb1b:	39 05 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,eax
c000fb21:	75 13                	jne    c000fb36 <Phys::freePage(unsigned long)+0x54>
c000fb23:	83 ec 08             	sub    esp,0x8
c000fb26:	6a 00                	push   0x0
c000fb28:	53                   	push   ebx
c000fb29:	e8 66 ff ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fb2e:	83 c4 10             	add    esp,0x10
c000fb31:	83 c4 08             	add    esp,0x8
c000fb34:	5b                   	pop    ebx
c000fb35:	c3                   	ret    
c000fb36:	83 ec 0c             	sub    esp,0xc
c000fb39:	a3 2c f1 02 c0       	mov    ds:0xc002f12c,eax
c000fb3e:	50                   	push   eax
c000fb3f:	e8 08 0a 00 00       	call   c001054c <VgaText::updateRAMUsageDisplay(int)>
c000fb44:	83 c4 10             	add    esp,0x10
c000fb47:	eb da                	jmp    c000fb23 <Phys::freePage(unsigned long)+0x41>
c000fb49:	68 00 10 00 00       	push   0x1000
c000fb4e:	53                   	push   ebx
c000fb4f:	e8 f8 fe ff ff       	call   c000fa4c <Phys::freeDMA(unsigned long, unsigned long)>
c000fb54:	59                   	pop    ecx
c000fb55:	5b                   	pop    ebx
c000fb56:	83 c4 08             	add    esp,0x8
c000fb59:	5b                   	pop    ebx
c000fb5a:	c3                   	ret    
c000fb5b:	c7 44 24 10 bb ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002adbb
c000fb63:	83 c4 08             	add    esp,0x8
c000fb66:	5b                   	pop    ebx
c000fb67:	e9 67 a9 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>

c000fb6c <Phys::allocatePage()>:
c000fb6c:	56                   	push   esi
c000fb6d:	53                   	push   ebx
c000fb6e:	51                   	push   ecx
c000fb6f:	8b 35 24 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f124
c000fb75:	89 f3                	mov    ebx,esi
c000fb77:	eb 0a                	jmp    c000fb83 <Phys::allocatePage()+0x17>
c000fb79:	89 1d 24 f1 02 c0    	mov    DWORD PTR ds:0xc002f124,ebx
c000fb7f:	39 de                	cmp    esi,ebx
c000fb81:	74 24                	je     c000fba7 <Phys::allocatePage()+0x3b>
c000fb83:	53                   	push   ebx
c000fb84:	e8 3d ff ff ff       	call   c000fac6 <Phys::getPageState(unsigned long)>
c000fb89:	5a                   	pop    edx
c000fb8a:	84 c0                	test   al,al
c000fb8c:	74 77                	je     c000fc05 <Phys::allocatePage()+0x99>
c000fb8e:	43                   	inc    ebx
c000fb8f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb95:	75 e2                	jne    c000fb79 <Phys::allocatePage()+0xd>
c000fb97:	31 db                	xor    ebx,ebx
c000fb99:	c7 05 24 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f124,0x0
c000fba3:	39 de                	cmp    esi,ebx
c000fba5:	75 dc                	jne    c000fb83 <Phys::allocatePage()+0x17>
c000fba7:	83 ec 0c             	sub    esp,0xc
c000fbaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fbb2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fbb8:	e8 0d 2c 00 00       	call   c00127ca <VAS::scanForEviction()>
c000fbbd:	83 c4 10             	add    esp,0x10
c000fbc0:	85 c0                	test   eax,eax
c000fbc2:	75 76                	jne    c000fc3a <Phys::allocatePage()+0xce>
c000fbc4:	83 ec 0c             	sub    esp,0xc
c000fbc7:	68 d1 ad 02 c0       	push   0xc002add1
c000fbcc:	e8 cc 2e 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000fbd1:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fbd8:	e8 cc fd ff ff       	call   c000f9a9 <Phys::allocateDMA(unsigned long)>
c000fbdd:	83 c4 10             	add    esp,0x10
c000fbe0:	85 c0                	test   eax,eax
c000fbe2:	75 56                	jne    c000fc3a <Phys::allocatePage()+0xce>
c000fbe4:	83 ec 0c             	sub    esp,0xc
c000fbe7:	68 e2 ad 02 c0       	push   0xc002ade2
c000fbec:	e8 e2 a8 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000fbf1:	83 c4 10             	add    esp,0x10
c000fbf4:	8b 1d 24 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f124
c000fbfa:	53                   	push   ebx
c000fbfb:	e8 c6 fe ff ff       	call   c000fac6 <Phys::getPageState(unsigned long)>
c000fc00:	5a                   	pop    edx
c000fc01:	84 c0                	test   al,al
c000fc03:	75 89                	jne    c000fb8e <Phys::allocatePage()+0x22>
c000fc05:	6a 01                	push   0x1
c000fc07:	53                   	push   ebx
c000fc08:	e8 87 fe ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fc0d:	a1 30 f1 02 c0       	mov    eax,ds:0xc002f130
c000fc12:	59                   	pop    ecx
c000fc13:	40                   	inc    eax
c000fc14:	5b                   	pop    ebx
c000fc15:	a3 30 f1 02 c0       	mov    ds:0xc002f130,eax
c000fc1a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc1d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc20:	c1 e0 02             	shl    eax,0x2
c000fc23:	99                   	cdq    
c000fc24:	f7 3d 34 f1 02 c0    	idiv   DWORD PTR ds:0xc002f134
c000fc2a:	39 05 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,eax
c000fc30:	75 0c                	jne    c000fc3e <Phys::allocatePage()+0xd2>
c000fc32:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c000fc37:	c1 e0 0c             	shl    eax,0xc
c000fc3a:	5a                   	pop    edx
c000fc3b:	5b                   	pop    ebx
c000fc3c:	5e                   	pop    esi
c000fc3d:	c3                   	ret    
c000fc3e:	83 ec 0c             	sub    esp,0xc
c000fc41:	a3 2c f1 02 c0       	mov    ds:0xc002f12c,eax
c000fc46:	50                   	push   eax
c000fc47:	e8 00 09 00 00       	call   c001054c <VgaText::updateRAMUsageDisplay(int)>
c000fc4c:	83 c4 10             	add    esp,0x10
c000fc4f:	eb e1                	jmp    c000fc32 <Phys::allocatePage()+0xc6>

c000fc51 <Phys::allocateContiguousPages(int)>:
c000fc51:	57                   	push   edi
c000fc52:	56                   	push   esi
c000fc53:	53                   	push   ebx
c000fc54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc58:	fa                   	cli    
c000fc59:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c000fc5f:	31 db                	xor    ebx,ebx
c000fc61:	85 db                	test   ebx,ebx
c000fc63:	75 11                	jne    c000fc76 <Phys::allocateContiguousPages(int)+0x25>
c000fc65:	e8 02 ff ff ff       	call   c000fb6c <Phys::allocatePage()>
c000fc6a:	83 fe 01             	cmp    esi,0x1
c000fc6d:	89 c7                	mov    edi,eax
c000fc6f:	74 21                	je     c000fc92 <Phys::allocateContiguousPages(int)+0x41>
c000fc71:	bb 01 00 00 00       	mov    ebx,0x1
c000fc76:	e8 f1 fe ff ff       	call   c000fb6c <Phys::allocatePage()>
c000fc7b:	89 da                	mov    edx,ebx
c000fc7d:	c1 e2 0c             	shl    edx,0xc
c000fc80:	01 fa                	add    edx,edi
c000fc82:	39 c2                	cmp    edx,eax
c000fc84:	74 20                	je     c000fca6 <Phys::allocateContiguousPages(int)+0x55>
c000fc86:	bb 01 00 00 00       	mov    ebx,0x1
c000fc8b:	89 c7                	mov    edi,eax
c000fc8d:	83 fe 01             	cmp    esi,0x1
c000fc90:	75 e4                	jne    c000fc76 <Phys::allocateContiguousPages(int)+0x25>
c000fc92:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c000fc97:	48                   	dec    eax
c000fc98:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c000fc9d:	75 01                	jne    c000fca0 <Phys::allocateContiguousPages(int)+0x4f>
c000fc9f:	fb                   	sti    
c000fca0:	89 f8                	mov    eax,edi
c000fca2:	5b                   	pop    ebx
c000fca3:	5e                   	pop    esi
c000fca4:	5f                   	pop    edi
c000fca5:	c3                   	ret    
c000fca6:	43                   	inc    ebx
c000fca7:	39 f3                	cmp    ebx,esi
c000fca9:	75 b6                	jne    c000fc61 <Phys::allocateContiguousPages(int)+0x10>
c000fcab:	eb e5                	jmp    c000fc92 <Phys::allocateContiguousPages(int)+0x41>

c000fcad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fcad:	56                   	push   esi
c000fcae:	53                   	push   ebx
c000fcaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcb3:	39 1d 28 f1 02 c0    	cmp    DWORD PTR ds:0xc002f128,ebx
c000fcb9:	73 06                	jae    c000fcc1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fcbb:	89 1d 28 f1 02 c0    	mov    DWORD PTR ds:0xc002f128,ebx
c000fcc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcc5:	c1 eb 0c             	shr    ebx,0xc
c000fcc8:	c1 e8 0c             	shr    eax,0xc
c000fccb:	39 d8                	cmp    eax,ebx
c000fccd:	73 13                	jae    c000fce2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fccf:	6a 00                	push   0x0
c000fcd1:	8d 70 01             	lea    esi,[eax+0x1]
c000fcd4:	50                   	push   eax
c000fcd5:	e8 ba fd ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fcda:	5a                   	pop    edx
c000fcdb:	89 f0                	mov    eax,esi
c000fcdd:	59                   	pop    ecx
c000fcde:	39 f3                	cmp    ebx,esi
c000fce0:	75 ed                	jne    c000fccf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fce2:	5b                   	pop    ebx
c000fce3:	5e                   	pop    esi
c000fce4:	c3                   	ret    

c000fce5 <Phys::physicalMemorySetup(unsigned int)>:
c000fce5:	55                   	push   ebp
c000fce6:	57                   	push   edi
c000fce7:	56                   	push   esi
c000fce8:	53                   	push   ebx
c000fce9:	31 db                	xor    ebx,ebx
c000fceb:	83 ec 40             	sub    esp,0x40
c000fcee:	6a 30                	push   0x30
c000fcf0:	6a 00                	push   0x0
c000fcf2:	68 40 f1 02 c0       	push   0xc002f140
c000fcf7:	e8 54 0a ff ff       	call   c0000750 <memset>
c000fcfc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd00:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd05:	05 00 10 00 00       	add    eax,0x1000
c000fd0a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd0e:	83 c4 10             	add    esp,0x10
c000fd11:	83 ec 08             	sub    esp,0x8
c000fd14:	6a 01                	push   0x1
c000fd16:	53                   	push   ebx
c000fd17:	43                   	inc    ebx
c000fd18:	e8 77 fd ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fd1d:	83 c4 10             	add    esp,0x10
c000fd20:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd26:	75 e9                	jne    c000fd11 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fd28:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fd2f:	66 85 c0             	test   ax,ax
c000fd32:	0f 84 8e 01 00 00    	je     c000fec6 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd3c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd48:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd51:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd59:	eb 15                	jmp    c000fd70 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd5b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd5f:	83 c3 18             	add    ebx,0x18
c000fd62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd66:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd6a:	0f 84 66 01 00 00    	je     c000fed6 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd70:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd73:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd81:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd83:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd86:	01 f0                	add    eax,esi
c000fd88:	55                   	push   ebp
c000fd89:	11 fa                	adc    edx,edi
c000fd8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd8f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd93:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd97:	56                   	push   esi
c000fd98:	68 1c ae 02 c0       	push   0xc002ae1c
c000fd9d:	e8 fb 2c 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000fda2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	09 f8                	or     eax,edi
c000fdab:	0f 85 25 01 00 00    	jne    c000fed6 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fdb1:	4d                   	dec    ebp
c000fdb2:	75 a7                	jne    c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdb4:	ba 00 00 08 00       	mov    edx,0x80000
c000fdb9:	89 c1                	mov    ecx,eax
c000fdbb:	39 f2                	cmp    edx,esi
c000fdbd:	19 f9                	sbb    ecx,edi
c000fdbf:	0f 82 a7 00 00 00    	jb     c000fe6c <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdc5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fdc9:	89 c1                	mov    ecx,eax
c000fdcb:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fdcf:	0f 83 97 00 00 00    	jae    c000fe6c <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdd5:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fdda:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdde:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fde2:	39 fa                	cmp    edx,edi
c000fde4:	19 e8                	sbb    eax,ebp
c000fde6:	0f 82 14 01 00 00    	jb     c000ff00 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fdec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdf0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdf4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fdfa:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdff:	83 d5 ff             	adc    ebp,0xffffffff
c000fe02:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fe06:	31 c0                	xor    eax,eax
c000fe08:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe0c:	39 fa                	cmp    edx,edi
c000fe0e:	89 c1                	mov    ecx,eax
c000fe10:	19 e9                	sbb    ecx,ebp
c000fe12:	0f 83 43 ff ff ff    	jae    c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe18:	be 00 00 08 00       	mov    esi,0x80000
c000fe1d:	50                   	push   eax
c000fe1e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe22:	57                   	push   edi
c000fe23:	56                   	push   esi
c000fe24:	68 40 ae 02 c0       	push   0xc002ae40
c000fe29:	e8 6f 2c 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000fe2e:	5a                   	pop    edx
c000fe2f:	59                   	pop    ecx
c000fe30:	57                   	push   edi
c000fe31:	56                   	push   esi
c000fe32:	e8 76 fe ff ff       	call   c000fcad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fe37:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe3f:	83 c4 0c             	add    esp,0xc
c000fe42:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe46:	03 05 34 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f134
c000fe4c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe53:	a3 34 f1 02 c0       	mov    ds:0xc002f134,eax
c000fe58:	52                   	push   edx
c000fe59:	50                   	push   eax
c000fe5a:	68 fe ad 02 c0       	push   0xc002adfe
c000fe5f:	e8 39 2c 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c000fe64:	83 c4 10             	add    esp,0x10
c000fe67:	e9 ef fe ff ff       	jmp    c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe6c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe78:	39 ea                	cmp    edx,ebp
c000fe7a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe7e:	0f 82 d7 fe ff ff    	jb     c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe84:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe89:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe8d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe91:	0f 83 c4 fe ff ff    	jae    c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe97:	39 ee                	cmp    esi,ebp
c000fe99:	89 f8                	mov    eax,edi
c000fe9b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe9f:	0f 83 78 ff ff ff    	jae    c000fe1d <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fea5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fea9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fead:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000feb1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000feb5:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000feb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000febd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fec1:	e9 57 ff ff ff       	jmp    c000fe1d <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fec6:	83 ec 0c             	sub    esp,0xc
c000fec9:	68 f0 ad 02 c0       	push   0xc002adf0
c000fece:	e8 00 a6 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	bb 40 01 00 00       	mov    ebx,0x140
c000fedb:	83 ec 08             	sub    esp,0x8
c000fede:	6a 00                	push   0x0
c000fee0:	53                   	push   ebx
c000fee1:	43                   	inc    ebx
c000fee2:	e8 ad fb ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fee7:	ff 05 34 f1 02 c0    	inc    DWORD PTR ds:0xc002f134
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fef6:	75 e3                	jne    c000fedb <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fef8:	83 c4 3c             	add    esp,0x3c
c000fefb:	5b                   	pop    ebx
c000fefc:	5e                   	pop    esi
c000fefd:	5f                   	pop    edi
c000fefe:	5d                   	pop    ebp
c000feff:	c3                   	ret    
c000ff00:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff10:	e9 d7 fe ff ff       	jmp    c000fdec <Phys::physicalMemorySetup(unsigned int)+0x107>
c000ff15:	90                   	nop

c000ff16 <Pipe::isAtty()>:
c000ff16:	31 c0                	xor    eax,eax
c000ff18:	c3                   	ret    
c000ff19:	90                   	nop

c000ff1a <Pipe::~Pipe()>:
c000ff1a:	83 ec 0c             	sub    esp,0xc
c000ff1d:	ba ac ae 02 c0       	mov    edx,0xc002aeac
c000ff22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff26:	89 10                	mov    DWORD PTR [eax],edx
c000ff28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2c:	83 ec 0c             	sub    esp,0xc
c000ff2f:	50                   	push   eax
c000ff30:	e8 01 15 00 00       	call   c0011436 <UnixFile::~UnixFile()>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	90                   	nop
c000ff39:	83 c4 0c             	add    esp,0xc
c000ff3c:	c3                   	ret    
c000ff3d:	90                   	nop

c000ff3e <Pipe::~Pipe()>:
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	83 ec 0c             	sub    esp,0xc
c000ff44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff48:	e8 cd ff ff ff       	call   c000ff1a <Pipe::~Pipe()>
c000ff4d:	83 c4 10             	add    esp,0x10
c000ff50:	83 ec 08             	sub    esp,0x8
c000ff53:	6a 20                	push   0x20
c000ff55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff59:	e8 5f 2a 00 00       	call   c00129bd <operator delete(void*, unsigned long)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	83 c4 0c             	add    esp,0xc
c000ff64:	c3                   	ret    
c000ff65:	90                   	nop

c000ff66 <Pipe::read(unsigned long long, void*, int*)>:
c000ff66:	55                   	push   ebp
c000ff67:	57                   	push   edi
c000ff68:	56                   	push   esi
c000ff69:	53                   	push   ebx
c000ff6a:	83 ec 1c             	sub    esp,0x1c
c000ff6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff71:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff75:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff79:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff7c:	89 c8                	mov    eax,ecx
c000ff7e:	99                   	cdq    
c000ff7f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff83:	74 24                	je     c000ffa9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff85:	39 f9                	cmp    ecx,edi
c000ff87:	89 d1                	mov    ecx,edx
c000ff89:	19 f1                	sbb    ecx,esi
c000ff8b:	73 1c                	jae    c000ffa9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff8d:	fa                   	cli    
c000ff8e:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c000ff94:	e8 ed e2 00 00       	call   c001e286 <schedule()>
c000ff99:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c000ff9e:	48                   	dec    eax
c000ff9f:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c000ffa4:	75 d3                	jne    c000ff79 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ffa6:	fb                   	sti    
c000ffa7:	eb d0                	jmp    c000ff79 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ffa9:	39 f8                	cmp    eax,edi
c000ffab:	89 d1                	mov    ecx,edx
c000ffad:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffb0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ffb4:	19 f1                	sbb    ecx,esi
c000ffb6:	73 07                	jae    c000ffbf <Pipe::read(unsigned long long, void*, int*)+0x59>
c000ffb8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ffbf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000ffc2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000ffc5:	29 f7                	sub    edi,esi
c000ffc7:	89 f8                	mov    eax,edi
c000ffc9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ffcd:	99                   	cdq    
c000ffce:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000ffd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffd5:	19 d0                	sbb    eax,edx
c000ffd7:	73 07                	jae    c000ffe0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000ffd9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffe0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000ffe3:	89 ea                	mov    edx,ebp
c000ffe5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000ffe9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ffee:	74 0d                	je     c000fffd <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fff0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fff3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fff7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fffd:	85 d2                	test   edx,edx
c000ffff:	74 11                	je     c0010012 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010005:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010008:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001000c:	89 d1                	mov    ecx,edx
c001000e:	89 c7                	mov    edi,eax
c0010010:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010012:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010015:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010018:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001001b:	99                   	cdq    
c001001c:	89 f7                	mov    edi,esi
c001001e:	03 04 24             	add    eax,DWORD PTR [esp]
c0010021:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010025:	c1 ff 1f             	sar    edi,0x1f
c0010028:	57                   	push   edi
c0010029:	56                   	push   esi
c001002a:	52                   	push   edx
c001002b:	50                   	push   eax
c001002c:	e8 03 75 01 00       	call   c0027534 <__umoddi3>
c0010031:	83 c4 10             	add    esp,0x10
c0010034:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010037:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001003c:	75 10                	jne    c001004e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c001003e:	83 ec 0c             	sub    esp,0xc
c0010041:	68 69 ae 02 c0       	push   0xc002ae69
c0010046:	e8 88 a4 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001004b:	83 c4 10             	add    esp,0x10
c001004e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010052:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010055:	89 10                	mov    DWORD PTR [eax],edx
c0010057:	83 c4 1c             	add    esp,0x1c
c001005a:	31 c0                	xor    eax,eax
c001005c:	5b                   	pop    ebx
c001005d:	5e                   	pop    esi
c001005e:	5f                   	pop    edi
c001005f:	5d                   	pop    ebp
c0010060:	c3                   	ret    
c0010061:	90                   	nop

c0010062 <Pipe::write(unsigned long long, void*, int*)>:
c0010062:	55                   	push   ebp
c0010063:	57                   	push   edi
c0010064:	56                   	push   esi
c0010065:	53                   	push   ebx
c0010066:	83 ec 1c             	sub    esp,0x1c
c0010069:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001006d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010071:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010074:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010078:	89 04 24             	mov    DWORD PTR [esp],eax
c001007b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001007f:	89 d8                	mov    eax,ebx
c0010081:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010084:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010088:	89 d6                	mov    esi,edx
c001008a:	89 d7                	mov    edi,edx
c001008c:	c1 ff 1f             	sar    edi,0x1f
c001008f:	03 34 24             	add    esi,DWORD PTR [esp]
c0010092:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010096:	c1 f8 1f             	sar    eax,0x1f
c0010099:	39 f3                	cmp    ebx,esi
c001009b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001009f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100a3:	19 f8                	sbb    eax,edi
c00100a5:	b8 01 00 00 00       	mov    eax,0x1
c00100aa:	72 6e                	jb     c001011a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00100ac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00100af:	01 d0                	add    eax,edx
c00100b1:	99                   	cdq    
c00100b2:	f7 fb                	idiv   ebx
c00100b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b8:	29 d3                	sub    ebx,edx
c00100ba:	89 d7                	mov    edi,edx
c00100bc:	89 de                	mov    esi,ebx
c00100be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100c1:	c1 fb 1f             	sar    ebx,0x1f
c00100c4:	39 f2                	cmp    edx,esi
c00100c6:	19 d8                	sbb    eax,ebx
c00100c8:	b8 00 00 00 00       	mov    eax,0x0
c00100cd:	72 04                	jb     c00100d3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00100cf:	89 d0                	mov    eax,edx
c00100d1:	29 f0                	sub    eax,esi
c00100d3:	89 d3                	mov    ebx,edx
c00100d5:	29 c3                	sub    ebx,eax
c00100d7:	74 0b                	je     c00100e4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00100d9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00100dc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00100e0:	89 d9                	mov    ecx,ebx
c00100e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100e4:	85 c0                	test   eax,eax
c00100e6:	74 0d                	je     c00100f5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00100e8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00100ec:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00100ef:	89 de                	mov    esi,ebx
c00100f1:	89 c1                	mov    ecx,eax
c00100f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100f5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00100f8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100fd:	75 10                	jne    c001010f <Pipe::write(unsigned long long, void*, int*)+0xad>
c00100ff:	83 ec 0c             	sub    esp,0xc
c0010102:	68 85 ae 02 c0       	push   0xc002ae85
c0010107:	e8 c7 a3 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001010c:	83 c4 10             	add    esp,0x10
c001010f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010113:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010116:	89 08                	mov    DWORD PTR [eax],ecx
c0010118:	31 c0                	xor    eax,eax
c001011a:	83 c4 1c             	add    esp,0x1c
c001011d:	5b                   	pop    ebx
c001011e:	5e                   	pop    esi
c001011f:	5f                   	pop    edi
c0010120:	5d                   	pop    ebp
c0010121:	c3                   	ret    

c0010122 <Pipe::Pipe(int)>:
c0010122:	83 ec 0c             	sub    esp,0xc
c0010125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010129:	83 ec 08             	sub    esp,0x8
c001012c:	6a 00                	push   0x0
c001012e:	50                   	push   eax
c001012f:	e8 20 11 00 00       	call   c0011254 <UnixFile::UnixFile(int)>
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	ba ac ae 02 c0       	mov    edx,0xc002aeac
c001013c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010140:	89 10                	mov    DWORD PTR [eax],edx
c0010142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010146:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001014a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001014d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010151:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010167:	83 ec 0c             	sub    esp,0xc
c001016a:	50                   	push   eax
c001016b:	e8 1c f7 ff ff       	call   c000f88c <malloc>
c0010170:	83 c4 10             	add    esp,0x10
c0010173:	89 c2                	mov    edx,eax
c0010175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010179:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001017c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010180:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010184:	90                   	nop
c0010185:	83 c4 0c             	add    esp,0xc
c0010188:	c3                   	ret    
c0010189:	90                   	nop

c001018a <VgaText::isAtty()>:
c001018a:	b0 01                	mov    al,0x1
c001018c:	c3                   	ret    
c001018d:	90                   	nop

c001018e <VgaText::~VgaText()>:
c001018e:	83 ec 0c             	sub    esp,0xc
c0010191:	ba 68 af 02 c0       	mov    edx,0xc002af68
c0010196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019a:	89 10                	mov    DWORD PTR [eax],edx
c001019c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	50                   	push   eax
c00101a4:	e8 8d 12 00 00       	call   c0011436 <UnixFile::~UnixFile()>
c00101a9:	83 c4 10             	add    esp,0x10
c00101ac:	90                   	nop
c00101ad:	83 c4 0c             	add    esp,0xc
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::~VgaText()>:
c00101b2:	83 ec 0c             	sub    esp,0xc
c00101b5:	83 ec 0c             	sub    esp,0xc
c00101b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101bc:	e8 cd ff ff ff       	call   c001018e <VgaText::~VgaText()>
c00101c1:	83 c4 10             	add    esp,0x10
c00101c4:	83 ec 08             	sub    esp,0x8
c00101c7:	68 c4 02 00 00       	push   0x2c4
c00101cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d0:	e8 e8 27 00 00       	call   c00129bd <operator delete(void*, unsigned long)>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	83 c4 0c             	add    esp,0xc
c00101db:	c3                   	ret    

c00101dc <VgaText::read(unsigned long long, void*, int*)>:
c00101dc:	83 ec 10             	sub    esp,0x10
c00101df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101eb:	e8 62 5d 00 00       	call   c0015f52 <readKeyboard(VgaText*, char*, unsigned long)>
c00101f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101f4:	89 02                	mov    DWORD PTR [edx],eax
c00101f6:	31 c0                	xor    eax,eax
c00101f8:	83 c4 1c             	add    esp,0x1c
c00101fb:	c3                   	ret    

c00101fc <setTerminalScrollLock(bool)>:
c00101fc:	c3                   	ret    

c00101fd <addToTerminalCycle(VgaText*)>:
c00101fd:	8b 15 a0 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1a0
c0010203:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010207:	85 d2                	test   edx,edx
c0010209:	75 09                	jne    c0010214 <addToTerminalCycle(VgaText*)+0x17>
c001020b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001020e:	a3 a0 f1 02 c0       	mov    ds:0xc002f1a0,eax
c0010213:	c3                   	ret    
c0010214:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010217:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001021a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001021d:	c3                   	ret    

c001021e <installVgaTextImplementation()>:
c001021e:	83 ec 10             	sub    esp,0x10
c0010221:	6a 20                	push   0x20
c0010223:	6a 00                	push   0x0
c0010225:	68 80 f1 02 c0       	push   0xc002f180
c001022a:	e8 21 05 ff ff       	call   c0000750 <memset>
c001022f:	83 c4 1c             	add    esp,0x1c
c0010232:	c3                   	ret    

c0010233 <scrollTerminalScrollLock(int)>:
c0010233:	c3                   	ret    

c0010234 <VgaText::load()>:
c0010234:	53                   	push   ebx
c0010235:	31 c0                	xor    eax,eax
c0010237:	83 ec 58             	sub    esp,0x58
c001023a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001023e:	89 e2                	mov    edx,esp
c0010240:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010244:	40                   	inc    eax
c0010245:	83 f8 50             	cmp    eax,0x50
c0010248:	75 f6                	jne    c0010240 <VgaText::load()+0xc>
c001024a:	31 c0                	xor    eax,eax
c001024c:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010253:	84 c9                	test   cl,cl
c0010255:	74 06                	je     c001025d <VgaText::load()+0x29>
c0010257:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001025a:	40                   	inc    eax
c001025b:	eb ef                	jmp    c001024c <VgaText::load()+0x18>
c001025d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010260:	85 c0                	test   eax,eax
c0010262:	74 09                	je     c001026d <VgaText::load()+0x39>
c0010264:	51                   	push   ecx
c0010265:	51                   	push   ecx
c0010266:	52                   	push   edx
c0010267:	53                   	push   ebx
c0010268:	ff d0                	call   eax
c001026a:	83 c4 10             	add    esp,0x10
c001026d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010270:	85 c0                	test   eax,eax
c0010272:	74 09                	je     c001027d <VgaText::load()+0x49>
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	53                   	push   ebx
c0010278:	ff d0                	call   eax
c001027a:	83 c4 10             	add    esp,0x10
c001027d:	83 c4 58             	add    esp,0x58
c0010280:	5b                   	pop    ebx
c0010281:	c3                   	ret    

c0010282 <VgaText::updateCursor()>:
c0010282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010286:	39 05 a4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1a4,eax
c001028c:	75 09                	jne    c0010297 <VgaText::updateCursor()+0x15>
c001028e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010291:	85 c0                	test   eax,eax
c0010293:	74 02                	je     c0010297 <VgaText::updateCursor()+0x15>
c0010295:	ff e0                	jmp    eax
c0010297:	c3                   	ret    

c0010298 <VgaText::showCursor(bool)>:
c0010298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001029c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102a0:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00102a3:	c3                   	ret    

c00102a4 <VgaText::disableBlink(bool)>:
c00102a4:	56                   	push   esi
c00102a5:	53                   	push   ebx
c00102a6:	51                   	push   ecx
c00102a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102af:	39 1d a4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1a4,ebx
c00102b5:	75 15                	jne    c00102cc <VgaText::disableBlink(bool)+0x28>
c00102b7:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00102ba:	85 c0                	test   eax,eax
c00102bc:	74 0e                	je     c00102cc <VgaText::disableBlink(bool)+0x28>
c00102be:	89 f1                	mov    ecx,esi
c00102c0:	52                   	push   edx
c00102c1:	52                   	push   edx
c00102c2:	0f b6 d1             	movzx  edx,cl
c00102c5:	52                   	push   edx
c00102c6:	53                   	push   ebx
c00102c7:	ff d0                	call   eax
c00102c9:	83 c4 10             	add    esp,0x10
c00102cc:	89 f0                	mov    eax,esi
c00102ce:	83 f0 01             	xor    eax,0x1
c00102d1:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00102d4:	58                   	pop    eax
c00102d5:	5b                   	pop    ebx
c00102d6:	5e                   	pop    esi
c00102d7:	c3                   	ret    

c00102d8 <VgaText::doANSI_SGR(int)>:
c00102d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e0:	85 d2                	test   edx,edx
c00102e2:	75 0b                	jne    c00102ef <VgaText::doANSI_SGR(int)+0x17>
c00102e4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00102e7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00102ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00102ed:	eb 59                	jmp    c0010348 <VgaText::doANSI_SGR(int)+0x70>
c00102ef:	83 fa 07             	cmp    edx,0x7
c00102f2:	75 0b                	jne    c00102ff <VgaText::doANSI_SGR(int)+0x27>
c00102f4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00102f7:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00102fa:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00102fd:	eb 49                	jmp    c0010348 <VgaText::doANSI_SGR(int)+0x70>
c00102ff:	83 fa 1b             	cmp    edx,0x1b
c0010302:	74 e0                	je     c00102e4 <VgaText::doANSI_SGR(int)+0xc>
c0010304:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010307:	83 f9 07             	cmp    ecx,0x7
c001030a:	77 09                	ja     c0010315 <VgaText::doANSI_SGR(int)+0x3d>
c001030c:	8b 14 8d 40 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1fc0]
c0010313:	eb 20                	jmp    c0010335 <VgaText::doANSI_SGR(int)+0x5d>
c0010315:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010318:	83 f9 07             	cmp    ecx,0x7
c001031b:	77 09                	ja     c0010326 <VgaText::doANSI_SGR(int)+0x4e>
c001031d:	8b 14 8d 40 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1fc0]
c0010324:	eb 22                	jmp    c0010348 <VgaText::doANSI_SGR(int)+0x70>
c0010326:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010329:	83 f9 07             	cmp    ecx,0x7
c001032c:	77 0b                	ja     c0010339 <VgaText::doANSI_SGR(int)+0x61>
c001032e:	8b 14 95 f8 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2108]
c0010335:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010338:	c3                   	ret    
c0010339:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001033c:	83 f9 07             	cmp    ecx,0x7
c001033f:	77 0a                	ja     c001034b <VgaText::doANSI_SGR(int)+0x73>
c0010341:	8b 14 95 d0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2130]
c0010348:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001034b:	c3                   	ret    

c001034c <VgaText::setDefaultBgColour(VgaColour)>:
c001034c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010354:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010357:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001035a:	c3                   	ret    
c001035b:	90                   	nop

c001035c <VgaText::setDefaultFgColour(VgaColour)>:
c001035c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010364:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010367:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001036a:	c3                   	ret    
c001036b:	90                   	nop

c001036c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001036c:	53                   	push   ebx
c001036d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010371:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010375:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010379:	51                   	push   ecx
c001037a:	e8 cd ff ff ff       	call   c001034c <VgaText::setDefaultBgColour(VgaColour)>
c001037f:	58                   	pop    eax
c0010380:	5a                   	pop    edx
c0010381:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010385:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010389:	5b                   	pop    ebx
c001038a:	eb d0                	jmp    c001035c <VgaText::setDefaultFgColour(VgaColour)>

c001038c <VgaText::combineColours(unsigned char, unsigned char)>:
c001038c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010390:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010395:	83 e0 0f             	and    eax,0xf
c0010398:	c1 e2 04             	shl    edx,0x4
c001039b:	09 d0                	or     eax,edx
c001039d:	c3                   	ret    

c001039e <VgaText::scrollScreen()>:
c001039e:	55                   	push   ebp
c001039f:	b9 01 00 00 00       	mov    ecx,0x1
c00103a4:	57                   	push   edi
c00103a5:	56                   	push   esi
c00103a6:	53                   	push   ebx
c00103a7:	83 ec 0c             	sub    esp,0xc
c00103aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00103ae:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00103b4:	31 ff                	xor    edi,edi
c00103b6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00103b9:	83 f9 17             	cmp    ecx,0x17
c00103bc:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00103bf:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00103c6:	75 27                	jne    c00103ef <VgaText::scrollScreen()+0x51>
c00103c8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00103cb:	01 f5                	add    ebp,esi
c00103cd:	f7 c7 01 00 00 00    	test   edi,0x1
c00103d3:	74 16                	je     c00103eb <VgaText::scrollScreen()+0x4d>
c00103d5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00103d9:	50                   	push   eax
c00103da:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00103de:	50                   	push   eax
c00103df:	e8 a8 ff ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c00103e4:	5a                   	pop    edx
c00103e5:	5a                   	pop    edx
c00103e6:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00103e9:	eb 04                	jmp    c00103ef <VgaText::scrollScreen()+0x51>
c00103eb:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00103ef:	47                   	inc    edi
c00103f0:	46                   	inc    esi
c00103f1:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00103f7:	75 bd                	jne    c00103b6 <VgaText::scrollScreen()+0x18>
c00103f9:	41                   	inc    ecx
c00103fa:	83 f9 18             	cmp    ecx,0x18
c00103fd:	75 af                	jne    c00103ae <VgaText::scrollScreen()+0x10>
c00103ff:	39 1d a4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1a4,ebx
c0010405:	75 1b                	jne    c0010422 <VgaText::scrollScreen()+0x84>
c0010407:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001040b:	74 05                	je     c0010412 <VgaText::scrollScreen()+0x74>
c001040d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010410:	eb 10                	jmp    c0010422 <VgaText::scrollScreen()+0x84>
c0010412:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010415:	85 c0                	test   eax,eax
c0010417:	74 09                	je     c0010422 <VgaText::scrollScreen()+0x84>
c0010419:	83 ec 0c             	sub    esp,0xc
c001041c:	53                   	push   ebx
c001041d:	ff d0                	call   eax
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010426:	83 c4 0c             	add    esp,0xc
c0010429:	5b                   	pop    ebx
c001042a:	5e                   	pop    esi
c001042b:	5f                   	pop    edi
c001042c:	5d                   	pop    ebp
c001042d:	e9 50 fe ff ff       	jmp    c0010282 <VgaText::updateCursor()>

c0010432 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010432:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010437:	c1 e0 08             	shl    eax,0x8
c001043a:	89 c2                	mov    edx,eax
c001043c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010441:	09 d0                	or     eax,edx
c0010443:	c3                   	ret    

c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010444:	56                   	push   esi
c0010445:	53                   	push   ebx
c0010446:	51                   	push   ecx
c0010447:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001044b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010450:	50                   	push   eax
c0010451:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010456:	50                   	push   eax
c0010457:	e8 30 ff ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c001045c:	5b                   	pop    ebx
c001045d:	0f b6 c0             	movzx  eax,al
c0010460:	5e                   	pop    esi
c0010461:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010466:	50                   	push   eax
c0010467:	53                   	push   ebx
c0010468:	e8 c5 ff ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001046d:	5a                   	pop    edx
c001046e:	5e                   	pop    esi
c001046f:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010472:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010478:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001047c:	0f b7 d2             	movzx  edx,dx
c001047f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010483:	39 0d a4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1a4,ecx
c0010489:	75 10                	jne    c001049b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001048b:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001048e:	85 c0                	test   eax,eax
c0010490:	74 09                	je     c001049b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010492:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010496:	5a                   	pop    edx
c0010497:	5b                   	pop    ebx
c0010498:	5e                   	pop    esi
c0010499:	ff e0                	jmp    eax
c001049b:	58                   	pop    eax
c001049c:	5b                   	pop    ebx
c001049d:	5e                   	pop    esi
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <VgaText::getCursorX()>:
c00104a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00104a7:	c3                   	ret    

c00104a8 <VgaText::getCursorY()>:
c00104a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ac:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00104af:	c3                   	ret    

c00104b0 <VgaText::setCursor(int, int)>:
c00104b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104b8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00104bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104c2:	e9 bb fd ff ff       	jmp    c0010282 <VgaText::updateCursor()>
c00104c7:	90                   	nop

c00104c8 <VgaText::setCursorX(int)>:
c00104c8:	83 ec 10             	sub    esp,0x10
c00104cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104cf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00104d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104d6:	50                   	push   eax
c00104d7:	e8 d4 ff ff ff       	call   c00104b0 <VgaText::setCursor(int, int)>
c00104dc:	83 c4 1c             	add    esp,0x1c
c00104df:	c3                   	ret    

c00104e0 <VgaText::setCursorY(int)>:
c00104e0:	83 ec 10             	sub    esp,0x10
c00104e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104eb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00104ee:	50                   	push   eax
c00104ef:	e8 bc ff ff ff       	call   c00104b0 <VgaText::setCursor(int, int)>
c00104f4:	83 c4 1c             	add    esp,0x1c
c00104f7:	c3                   	ret    

c00104f8 <VgaText::incrementCursor(bool)>:
c00104f8:	56                   	push   esi
c00104f9:	53                   	push   ebx
c00104fa:	51                   	push   ecx
c00104fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010503:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010506:	40                   	inc    eax
c0010507:	83 f8 50             	cmp    eax,0x50
c001050a:	74 05                	je     c0010511 <VgaText::incrementCursor(bool)+0x19>
c001050c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001050f:	eb 24                	jmp    c0010535 <VgaText::incrementCursor(bool)+0x3d>
c0010511:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010514:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001051b:	8d 50 01             	lea    edx,[eax+0x1]
c001051e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010521:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010524:	75 0f                	jne    c0010535 <VgaText::incrementCursor(bool)+0x3d>
c0010526:	83 ec 0c             	sub    esp,0xc
c0010529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001052c:	53                   	push   ebx
c001052d:	e8 6c fe ff ff       	call   c001039e <VgaText::scrollScreen()>
c0010532:	83 c4 10             	add    esp,0x10
c0010535:	89 f0                	mov    eax,esi
c0010537:	84 c0                	test   al,al
c0010539:	74 0c                	je     c0010547 <VgaText::incrementCursor(bool)+0x4f>
c001053b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001053f:	5a                   	pop    edx
c0010540:	5b                   	pop    ebx
c0010541:	5e                   	pop    esi
c0010542:	e9 3b fd ff ff       	jmp    c0010282 <VgaText::updateCursor()>
c0010547:	58                   	pop    eax
c0010548:	5b                   	pop    ebx
c0010549:	5e                   	pop    esi
c001054a:	c3                   	ret    
c001054b:	90                   	nop

c001054c <VgaText::updateRAMUsageDisplay(int)>:
c001054c:	53                   	push   ebx
c001054d:	bb 0a 00 00 00       	mov    ebx,0xa
c0010552:	6a 0f                	push   0xf
c0010554:	6a 00                	push   0x0
c0010556:	e8 31 fe ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c001055b:	5a                   	pop    edx
c001055c:	59                   	pop    ecx
c001055d:	0f b6 c8             	movzx  ecx,al
c0010560:	51                   	push   ecx
c0010561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010565:	99                   	cdq    
c0010566:	f7 fb                	idiv   ebx
c0010568:	89 d3                	mov    ebx,edx
c001056a:	83 c0 30             	add    eax,0x30
c001056d:	83 c3 30             	add    ebx,0x30
c0010570:	0f be c0             	movsx  eax,al
c0010573:	0f b6 db             	movzx  ebx,bl
c0010576:	50                   	push   eax
c0010577:	e8 b6 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001057c:	5a                   	pop    edx
c001057d:	5a                   	pop    edx
c001057e:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010584:	51                   	push   ecx
c0010585:	53                   	push   ebx
c0010586:	e8 a7 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001058b:	5b                   	pop    ebx
c001058c:	5a                   	pop    edx
c001058d:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010593:	51                   	push   ecx
c0010594:	6a 25                	push   0x25
c0010596:	e8 97 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001059b:	59                   	pop    ecx
c001059c:	5b                   	pop    ebx
c001059d:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00105a3:	5b                   	pop    ebx
c00105a4:	c3                   	ret    
c00105a5:	90                   	nop

c00105a6 <VgaText::updateDiskUsage()>:
c00105a6:	55                   	push   ebp
c00105a7:	bd 10 27 00 00       	mov    ebp,0x2710
c00105ac:	57                   	push   edi
c00105ad:	56                   	push   esi
c00105ae:	53                   	push   ebx
c00105af:	6a 0f                	push   0xf
c00105b1:	6a 00                	push   0x0
c00105b3:	e8 d4 fd ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c00105b8:	5a                   	pop    edx
c00105b9:	0f b6 d8             	movzx  ebx,al
c00105bc:	59                   	pop    ecx
c00105bd:	a1 38 34 03 c0       	mov    eax,ds:0xc0033438
c00105c2:	53                   	push   ebx
c00105c3:	b9 0a 00 00 00       	mov    ecx,0xa
c00105c8:	99                   	cdq    
c00105c9:	f7 fd                	idiv   ebp
c00105cb:	99                   	cdq    
c00105cc:	f7 f9                	idiv   ecx
c00105ce:	8d 42 30             	lea    eax,[edx+0x30]
c00105d1:	0f b6 c0             	movzx  eax,al
c00105d4:	50                   	push   eax
c00105d5:	e8 58 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00105da:	5e                   	pop    esi
c00105db:	5f                   	pop    edi
c00105dc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00105e2:	bf e8 03 00 00       	mov    edi,0x3e8
c00105e7:	53                   	push   ebx
c00105e8:	a1 38 34 03 c0       	mov    eax,ds:0xc0033438
c00105ed:	99                   	cdq    
c00105ee:	f7 ff                	idiv   edi
c00105f0:	99                   	cdq    
c00105f1:	f7 f9                	idiv   ecx
c00105f3:	8d 42 30             	lea    eax,[edx+0x30]
c00105f6:	0f b6 c0             	movzx  eax,al
c00105f9:	50                   	push   eax
c00105fa:	e8 33 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00105ff:	5a                   	pop    edx
c0010600:	5e                   	pop    esi
c0010601:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010607:	be 64 00 00 00       	mov    esi,0x64
c001060c:	53                   	push   ebx
c001060d:	a1 38 34 03 c0       	mov    eax,ds:0xc0033438
c0010612:	99                   	cdq    
c0010613:	f7 fe                	idiv   esi
c0010615:	99                   	cdq    
c0010616:	f7 f9                	idiv   ecx
c0010618:	8d 42 30             	lea    eax,[edx+0x30]
c001061b:	0f b6 c0             	movzx  eax,al
c001061e:	50                   	push   eax
c001061f:	e8 0e fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010624:	5a                   	pop    edx
c0010625:	5a                   	pop    edx
c0010626:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001062c:	53                   	push   ebx
c001062d:	a1 38 34 03 c0       	mov    eax,ds:0xc0033438
c0010632:	99                   	cdq    
c0010633:	f7 f9                	idiv   ecx
c0010635:	99                   	cdq    
c0010636:	f7 f9                	idiv   ecx
c0010638:	8d 42 30             	lea    eax,[edx+0x30]
c001063b:	0f b6 c0             	movzx  eax,al
c001063e:	50                   	push   eax
c001063f:	e8 ee fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010644:	5a                   	pop    edx
c0010645:	5a                   	pop    edx
c0010646:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001064c:	53                   	push   ebx
c001064d:	a1 38 34 03 c0       	mov    eax,ds:0xc0033438
c0010652:	99                   	cdq    
c0010653:	f7 f9                	idiv   ecx
c0010655:	8d 42 30             	lea    eax,[edx+0x30]
c0010658:	0f b6 c0             	movzx  eax,al
c001065b:	50                   	push   eax
c001065c:	e8 d1 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010661:	5a                   	pop    edx
c0010662:	5a                   	pop    edx
c0010663:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010669:	53                   	push   ebx
c001066a:	a1 34 34 03 c0       	mov    eax,ds:0xc0033434
c001066f:	99                   	cdq    
c0010670:	f7 fd                	idiv   ebp
c0010672:	99                   	cdq    
c0010673:	f7 f9                	idiv   ecx
c0010675:	8d 42 30             	lea    eax,[edx+0x30]
c0010678:	0f b6 c0             	movzx  eax,al
c001067b:	50                   	push   eax
c001067c:	e8 b1 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010681:	5d                   	pop    ebp
c0010682:	5a                   	pop    edx
c0010683:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010689:	53                   	push   ebx
c001068a:	a1 34 34 03 c0       	mov    eax,ds:0xc0033434
c001068f:	99                   	cdq    
c0010690:	f7 ff                	idiv   edi
c0010692:	99                   	cdq    
c0010693:	f7 f9                	idiv   ecx
c0010695:	8d 42 30             	lea    eax,[edx+0x30]
c0010698:	0f b6 c0             	movzx  eax,al
c001069b:	50                   	push   eax
c001069c:	e8 91 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00106a1:	5f                   	pop    edi
c00106a2:	5d                   	pop    ebp
c00106a3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00106a9:	53                   	push   ebx
c00106aa:	a1 34 34 03 c0       	mov    eax,ds:0xc0033434
c00106af:	99                   	cdq    
c00106b0:	f7 fe                	idiv   esi
c00106b2:	99                   	cdq    
c00106b3:	f7 f9                	idiv   ecx
c00106b5:	8d 42 30             	lea    eax,[edx+0x30]
c00106b8:	0f b6 c0             	movzx  eax,al
c00106bb:	50                   	push   eax
c00106bc:	e8 71 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00106c1:	5a                   	pop    edx
c00106c2:	5e                   	pop    esi
c00106c3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00106c9:	53                   	push   ebx
c00106ca:	a1 34 34 03 c0       	mov    eax,ds:0xc0033434
c00106cf:	99                   	cdq    
c00106d0:	f7 f9                	idiv   ecx
c00106d2:	99                   	cdq    
c00106d3:	f7 f9                	idiv   ecx
c00106d5:	8d 42 30             	lea    eax,[edx+0x30]
c00106d8:	0f b6 c0             	movzx  eax,al
c00106db:	50                   	push   eax
c00106dc:	e8 51 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00106e1:	5f                   	pop    edi
c00106e2:	5d                   	pop    ebp
c00106e3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c00106e9:	53                   	push   ebx
c00106ea:	a1 34 34 03 c0       	mov    eax,ds:0xc0033434
c00106ef:	99                   	cdq    
c00106f0:	f7 f9                	idiv   ecx
c00106f2:	83 c2 30             	add    edx,0x30
c00106f5:	0f b6 d2             	movzx  edx,dl
c00106f8:	52                   	push   edx
c00106f9:	e8 34 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00106fe:	5a                   	pop    edx
c00106ff:	59                   	pop    ecx
c0010700:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010706:	5b                   	pop    ebx
c0010707:	5e                   	pop    esi
c0010708:	5f                   	pop    edi
c0010709:	5d                   	pop    ebp
c001070a:	c3                   	ret    
c001070b:	90                   	nop

c001070c <VgaText::updateTitle()>:
c001070c:	53                   	push   ebx
c001070d:	31 c0                	xor    eax,eax
c001070f:	83 ec 58             	sub    esp,0x58
c0010712:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010716:	89 e1                	mov    ecx,esp
c0010718:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001071c:	40                   	inc    eax
c001071d:	83 f8 50             	cmp    eax,0x50
c0010720:	75 f6                	jne    c0010718 <VgaText::updateTitle()+0xc>
c0010722:	31 c0                	xor    eax,eax
c0010724:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001072b:	84 db                	test   bl,bl
c001072d:	74 06                	je     c0010735 <VgaText::updateTitle()+0x29>
c001072f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010732:	40                   	inc    eax
c0010733:	eb ef                	jmp    c0010724 <VgaText::updateTitle()+0x18>
c0010735:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010738:	85 c0                	test   eax,eax
c001073a:	74 09                	je     c0010745 <VgaText::updateTitle()+0x39>
c001073c:	53                   	push   ebx
c001073d:	53                   	push   ebx
c001073e:	51                   	push   ecx
c001073f:	52                   	push   edx
c0010740:	ff d0                	call   eax
c0010742:	83 c4 10             	add    esp,0x10
c0010745:	e8 5c fe ff ff       	call   c00105a6 <VgaText::updateDiskUsage()>
c001074a:	83 c4 58             	add    esp,0x58
c001074d:	5b                   	pop    ebx
c001074e:	c3                   	ret    
c001074f:	90                   	nop

c0010750 <VgaText::setTitleTextColour(VgaColour)>:
c0010750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010758:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001075b:	eb af                	jmp    c001070c <VgaText::updateTitle()>
c001075d:	90                   	nop

c001075e <VgaText::setTitleColour(VgaColour)>:
c001075e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010766:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010769:	eb a1                	jmp    c001070c <VgaText::updateTitle()>
c001076b:	90                   	nop

c001076c <VgaText::setTitle(char*)>:
c001076c:	53                   	push   ebx
c001076d:	83 ec 10             	sub    esp,0x10
c0010770:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010778:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001077e:	50                   	push   eax
c001077f:	e8 88 00 ff ff       	call   c000080c <strcpy>
c0010784:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010788:	83 c4 18             	add    esp,0x18
c001078b:	5b                   	pop    ebx
c001078c:	e9 7b ff ff ff       	jmp    c001070c <VgaText::updateTitle()>
c0010791:	90                   	nop

c0010792 <VgaText::decrementCursor(bool)>:
c0010792:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001079a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001079d:	85 c0                	test   eax,eax
c001079f:	74 04                	je     c00107a5 <VgaText::decrementCursor(bool)+0x13>
c00107a1:	48                   	dec    eax
c00107a2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00107a5:	84 c9                	test   cl,cl
c00107a7:	74 09                	je     c00107b2 <VgaText::decrementCursor(bool)+0x20>
c00107a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107ad:	e9 d0 fa ff ff       	jmp    c0010282 <VgaText::updateCursor()>
c00107b2:	c3                   	ret    
c00107b3:	90                   	nop

c00107b4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00107b4:	53                   	push   ebx
c00107b5:	83 ec 08             	sub    esp,0x8
c00107b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00107c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00107c8:	3c 07                	cmp    al,0x7
c00107ca:	75 2a                	jne    c00107f6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00107cc:	a1 58 f2 02 c0       	mov    eax,ds:0xc002f258
c00107d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00107d9:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00107e1:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00107e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00107ed:	83 c4 08             	add    esp,0x8
c00107f0:	5b                   	pop    ebx
c00107f1:	e9 b4 30 00 00       	jmp    c00138aa <Buzzer::beep(int, int, bool)>
c00107f6:	3c 0d                	cmp    al,0xd
c00107f8:	75 09                	jne    c0010803 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00107fa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010801:	eb 2c                	jmp    c001082f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010803:	3c 0a                	cmp    al,0xa
c0010805:	75 31                	jne    c0010838 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010807:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001080a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010811:	8d 50 01             	lea    edx,[eax+0x1]
c0010814:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010817:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001081a:	75 0f                	jne    c001082b <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001081c:	83 ec 0c             	sub    esp,0xc
c001081f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010822:	53                   	push   ebx
c0010823:	e8 76 fb ff ff       	call   c001039e <VgaText::scrollScreen()>
c0010828:	83 c4 10             	add    esp,0x10
c001082b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001082f:	83 c4 08             	add    esp,0x8
c0010832:	5b                   	pop    ebx
c0010833:	e9 4a fa ff ff       	jmp    c0010282 <VgaText::updateCursor()>
c0010838:	3c 08                	cmp    al,0x8
c001083a:	75 25                	jne    c0010861 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001083c:	50                   	push   eax
c001083d:	50                   	push   eax
c001083e:	6a 01                	push   0x1
c0010840:	53                   	push   ebx
c0010841:	e8 4c ff ff ff       	call   c0010792 <VgaText::decrementCursor(bool)>
c0010846:	5a                   	pop    edx
c0010847:	59                   	pop    ecx
c0010848:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001084b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001084e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010851:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010854:	6a 20                	push   0x20
c0010856:	53                   	push   ebx
c0010857:	e8 e8 fb ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001085c:	83 c4 28             	add    esp,0x28
c001085f:	5b                   	pop    ebx
c0010860:	c3                   	ret    
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	0f be c0             	movsx  eax,al
c0010867:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001086a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001086d:	51                   	push   ecx
c001086e:	52                   	push   edx
c001086f:	50                   	push   eax
c0010870:	53                   	push   ebx
c0010871:	e8 ce fb ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010876:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001087a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010882:	83 c4 28             	add    esp,0x28
c0010885:	5b                   	pop    ebx
c0010886:	e9 6d fc ff ff       	jmp    c00104f8 <VgaText::incrementCursor(bool)>
c001088b:	90                   	nop

c001088c <VgaText::isShowingCursor()>:
c001088c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010890:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010893:	c3                   	ret    

c0010894 <VgaText::isBlinkDisabled()>:
c0010894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010898:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c001089b:	83 f0 01             	xor    eax,0x1
c001089e:	c3                   	ret    
c001089f:	90                   	nop

c00108a0 <VgaText::setCursorHeight(int)>:
c00108a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108a8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00108ab:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c00108af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108b3:	e9 e0 f9 ff ff       	jmp    c0010298 <VgaText::showCursor(bool)>

c00108b8 <VgaText::getCursorHeight()>:
c00108b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108bc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00108bf:	c3                   	ret    

c00108c0 <setActiveTerminal(VgaText*)>:
c00108c0:	53                   	push   ebx
c00108c1:	83 ec 08             	sub    esp,0x8
c00108c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108c8:	85 db                	test   ebx,ebx
c00108ca:	75 11                	jne    c00108dd <setActiveTerminal(VgaText*)+0x1d>
c00108cc:	c7 44 24 10 c0 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aec0
c00108d4:	83 c4 08             	add    esp,0x8
c00108d7:	5b                   	pop    ebx
c00108d8:	e9 f6 9b 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>
c00108dd:	50                   	push   eax
c00108de:	50                   	push   eax
c00108df:	53                   	push   ebx
c00108e0:	68 ce ae 02 c0       	push   0xc002aece
c00108e5:	e8 b3 21 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00108ea:	a1 a4 f1 02 c0       	mov    eax,ds:0xc002f1a4
c00108ef:	83 c4 10             	add    esp,0x10
c00108f2:	85 c0                	test   eax,eax
c00108f4:	74 0c                	je     c0010902 <setActiveTerminal(VgaText*)+0x42>
c00108f6:	83 ec 0c             	sub    esp,0xc
c00108f9:	50                   	push   eax
c00108fa:	e8 83 f9 ff ff       	call   c0010282 <VgaText::updateCursor()>
c00108ff:	83 c4 10             	add    esp,0x10
c0010902:	89 1d a4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1a4,ebx
c0010908:	51                   	push   ecx
c0010909:	51                   	push   ecx
c001090a:	53                   	push   ebx
c001090b:	68 e6 ae 02 c0       	push   0xc002aee6
c0010910:	e8 88 21 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0010915:	83 c4 0c             	add    esp,0xc
c0010918:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001091b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001091e:	53                   	push   ebx
c001091f:	e8 8c fb ff ff       	call   c00104b0 <VgaText::setCursor(int, int)>
c0010924:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010927:	e8 68 ff ff ff       	call   c0010894 <VgaText::isBlinkDisabled()>
c001092c:	5a                   	pop    edx
c001092d:	0f b6 c0             	movzx  eax,al
c0010930:	59                   	pop    ecx
c0010931:	50                   	push   eax
c0010932:	53                   	push   ebx
c0010933:	e8 6c f9 ff ff       	call   c00102a4 <VgaText::disableBlink(bool)>
c0010938:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001093b:	e8 78 ff ff ff       	call   c00108b8 <VgaText::getCursorHeight()>
c0010940:	5a                   	pop    edx
c0010941:	59                   	pop    ecx
c0010942:	50                   	push   eax
c0010943:	53                   	push   ebx
c0010944:	e8 57 ff ff ff       	call   c00108a0 <VgaText::setCursorHeight(int)>
c0010949:	83 c4 10             	add    esp,0x10
c001094c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010950:	75 07                	jne    c0010959 <setActiveTerminal(VgaText*)+0x99>
c0010952:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010959:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001095d:	83 c4 08             	add    esp,0x8
c0010960:	5b                   	pop    ebx
c0010961:	e9 ce f8 ff ff       	jmp    c0010234 <VgaText::load()>

c0010966 <doTerminalCycle()>:
c0010966:	83 ec 18             	sub    esp,0x18
c0010969:	a1 a0 f1 02 c0       	mov    eax,ds:0xc002f1a0
c001096e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010971:	50                   	push   eax
c0010972:	a3 a0 f1 02 c0       	mov    ds:0xc002f1a0,eax
c0010977:	e8 44 ff ff ff       	call   c00108c0 <setActiveTerminal(VgaText*)>
c001097c:	83 c4 1c             	add    esp,0x1c
c001097f:	c3                   	ret    

c0010980 <VgaText::doUpdate()>:
c0010980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010984:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010987:	85 c0                	test   eax,eax
c0010989:	74 02                	je     c001098d <VgaText::doUpdate()+0xd>
c001098b:	ff e0                	jmp    eax
c001098d:	c3                   	ret    

c001098e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001098e:	55                   	push   ebp
c001098f:	31 ed                	xor    ebp,ebp
c0010991:	57                   	push   edi
c0010992:	56                   	push   esi
c0010993:	53                   	push   ebx
c0010994:	83 ec 1c             	sub    esp,0x1c
c0010997:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001099b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00109a0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00109a7:	50                   	push   eax
c00109a8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00109ad:	50                   	push   eax
c00109ae:	e8 d9 f9 ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c00109b3:	59                   	pop    ecx
c00109b4:	0f b6 c0             	movzx  eax,al
c00109b7:	5e                   	pop    esi
c00109b8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00109c1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109c8:	0f b7 f6             	movzx  esi,si
c00109cb:	01 f6                	add    esi,esi
c00109cd:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109d0:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00109d3:	84 c0                	test   al,al
c00109d5:	0f 84 fd 00 00 00    	je     c0010ad8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00109db:	3c 0d                	cmp    al,0xd
c00109dd:	75 0c                	jne    c00109eb <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00109df:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00109e6:	e9 e7 00 00 00       	jmp    c0010ad2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00109eb:	3c 0a                	cmp    al,0xa
c00109ed:	75 47                	jne    c0010a36 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00109ef:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00109f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00109f9:	8d 48 01             	lea    ecx,[eax+0x1]
c00109fc:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00109ff:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010a02:	75 0f                	jne    c0010a13 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010a0a:	53                   	push   ebx
c0010a0b:	e8 8e f9 ff ff       	call   c001039e <VgaText::scrollScreen()>
c0010a10:	83 c4 10             	add    esp,0x10
c0010a13:	83 ec 0c             	sub    esp,0xc
c0010a16:	31 ed                	xor    ebp,ebp
c0010a18:	53                   	push   ebx
c0010a19:	e8 64 f8 ff ff       	call   c0010282 <VgaText::updateCursor()>
c0010a1e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a23:	83 c4 10             	add    esp,0x10
c0010a26:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a29:	0f b7 f6             	movzx  esi,si
c0010a2c:	01 f6                	add    esi,esi
c0010a2e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a31:	e9 9c 00 00 00       	jmp    c0010ad2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a36:	3c 08                	cmp    al,0x8
c0010a38:	75 35                	jne    c0010a6f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010a3a:	56                   	push   esi
c0010a3b:	56                   	push   esi
c0010a3c:	6a 01                	push   0x1
c0010a3e:	53                   	push   ebx
c0010a3f:	e8 4e fd ff ff       	call   c0010792 <VgaText::decrementCursor(bool)>
c0010a44:	58                   	pop    eax
c0010a45:	5a                   	pop    edx
c0010a46:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a4c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a4f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a52:	6a 20                	push   0x20
c0010a54:	53                   	push   ebx
c0010a55:	e8 ea f9 ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a5a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a5f:	83 c4 20             	add    esp,0x20
c0010a62:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a65:	0f b7 f6             	movzx  esi,si
c0010a68:	01 f6                	add    esi,esi
c0010a6a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a6d:	eb 63                	jmp    c0010ad2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a6f:	51                   	push   ecx
c0010a70:	51                   	push   ecx
c0010a71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010a75:	50                   	push   eax
c0010a76:	e8 b7 f9 ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7b:	83 c4 10             	add    esp,0x10
c0010a7e:	66 89 06             	mov    WORD PTR [esi],ax
c0010a81:	39 1d a4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1a4,ebx
c0010a87:	75 21                	jne    c0010aaa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a89:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010a8c:	85 c0                	test   eax,eax
c0010a8e:	74 1a                	je     c0010aaa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a90:	52                   	push   edx
c0010a91:	52                   	push   edx
c0010a92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010aa0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010aa3:	51                   	push   ecx
c0010aa4:	53                   	push   ebx
c0010aa5:	ff d0                	call   eax
c0010aa7:	83 c4 20             	add    esp,0x20
c0010aaa:	83 c6 02             	add    esi,0x2
c0010aad:	50                   	push   eax
c0010aae:	50                   	push   eax
c0010aaf:	6a 00                	push   0x0
c0010ab1:	53                   	push   ebx
c0010ab2:	e8 41 fa ff ff       	call   c00104f8 <VgaText::incrementCursor(bool)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010abe:	75 0d                	jne    c0010acd <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010ac0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ac5:	0f b7 f6             	movzx  esi,si
c0010ac8:	01 f6                	add    esi,esi
c0010aca:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010acd:	bd 01 00 00 00       	mov    ebp,0x1
c0010ad2:	47                   	inc    edi
c0010ad3:	e9 f8 fe ff ff       	jmp    c00109d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	53                   	push   ebx
c0010adc:	e8 a1 f7 ff ff       	call   c0010282 <VgaText::updateCursor()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	89 e8                	mov    eax,ebp
c0010ae6:	84 c0                	test   al,al
c0010ae8:	74 0c                	je     c0010af6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010aea:	83 ec 0c             	sub    esp,0xc
c0010aed:	53                   	push   ebx
c0010aee:	e8 8d fe ff ff       	call   c0010980 <VgaText::doUpdate()>
c0010af3:	83 c4 10             	add    esp,0x10
c0010af6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010afd:	83 c4 1c             	add    esp,0x1c
c0010b00:	5b                   	pop    ebx
c0010b01:	5e                   	pop    esi
c0010b02:	5f                   	pop    edi
c0010b03:	5d                   	pop    ebp
c0010b04:	c3                   	ret    
c0010b05:	90                   	nop

c0010b06 <VgaText::clearScreen()>:
c0010b06:	57                   	push   edi
c0010b07:	56                   	push   esi
c0010b08:	31 f6                	xor    esi,esi
c0010b0a:	53                   	push   ebx
c0010b0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b0f:	52                   	push   edx
c0010b10:	6a 00                	push   0x0
c0010b12:	6a 00                	push   0x0
c0010b14:	53                   	push   ebx
c0010b15:	e8 96 f9 ff ff       	call   c00104b0 <VgaText::setCursor(int, int)>
c0010b1a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010b27:	7e 20                	jle    c0010b49 <VgaText::clearScreen()+0x43>
c0010b29:	31 ff                	xor    edi,edi
c0010b2b:	50                   	push   eax
c0010b2c:	50                   	push   eax
c0010b2d:	56                   	push   esi
c0010b2e:	57                   	push   edi
c0010b2f:	47                   	inc    edi
c0010b30:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b33:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010b36:	6a 20                	push   0x20
c0010b38:	53                   	push   ebx
c0010b39:	e8 06 f9 ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b3e:	83 c4 20             	add    esp,0x20
c0010b41:	83 ff 50             	cmp    edi,0x50
c0010b44:	75 e5                	jne    c0010b2b <VgaText::clearScreen()+0x25>
c0010b46:	46                   	inc    esi
c0010b47:	eb db                	jmp    c0010b24 <VgaText::clearScreen()+0x1e>
c0010b49:	83 ec 0c             	sub    esp,0xc
c0010b4c:	53                   	push   ebx
c0010b4d:	e8 2e fe ff ff       	call   c0010980 <VgaText::doUpdate()>
c0010b52:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010b59:	83 c4 10             	add    esp,0x10
c0010b5c:	5b                   	pop    ebx
c0010b5d:	5e                   	pop    esi
c0010b5e:	5f                   	pop    edi
c0010b5f:	c3                   	ret    

c0010b60 <VgaText::putchar(char)>:
c0010b60:	56                   	push   esi
c0010b61:	53                   	push   ebx
c0010b62:	83 ec 14             	sub    esp,0x14
c0010b65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b6d:	3c 5b                	cmp    al,0x5b
c0010b6f:	75 18                	jne    c0010b89 <VgaText::putchar(char)+0x29>
c0010b71:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010b75:	74 1f                	je     c0010b96 <VgaText::putchar(char)+0x36>
c0010b77:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010b7d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010b84:	e9 bd 00 00 00       	jmp    c0010c46 <VgaText::putchar(char)+0xe6>
c0010b89:	3c 1b                	cmp    al,0x1b
c0010b8b:	75 09                	jne    c0010b96 <VgaText::putchar(char)+0x36>
c0010b8d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010b91:	e9 b0 00 00 00       	jmp    c0010c46 <VgaText::putchar(char)+0xe6>
c0010b96:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010b99:	84 c9                	test   cl,cl
c0010b9b:	0f 84 92 00 00 00    	je     c0010c33 <VgaText::putchar(char)+0xd3>
c0010ba1:	8d 50 c0             	lea    edx,[eax-0x40]
c0010ba4:	80 fa 3e             	cmp    dl,0x3e
c0010ba7:	77 76                	ja     c0010c1f <VgaText::putchar(char)+0xbf>
c0010ba9:	3c 6d                	cmp    al,0x6d
c0010bab:	75 47                	jne    c0010bf4 <VgaText::putchar(char)+0x94>
c0010bad:	31 f6                	xor    esi,esi
c0010baf:	31 d2                	xor    edx,edx
c0010bb1:	31 c0                	xor    eax,eax
c0010bb3:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010bb6:	7e 2d                	jle    c0010be5 <VgaText::putchar(char)+0x85>
c0010bb8:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010bbd:	80 fa 3b             	cmp    dl,0x3b
c0010bc0:	75 17                	jne    c0010bd9 <VgaText::putchar(char)+0x79>
c0010bc2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bc6:	50                   	push   eax
c0010bc7:	53                   	push   ebx
c0010bc8:	e8 0b f7 ff ff       	call   c00102d8 <VgaText::doANSI_SGR(int)>
c0010bcd:	59                   	pop    ecx
c0010bce:	31 d2                	xor    edx,edx
c0010bd0:	58                   	pop    eax
c0010bd1:	31 c0                	xor    eax,eax
c0010bd3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bd7:	eb 09                	jmp    c0010be2 <VgaText::putchar(char)+0x82>
c0010bd9:	6b c0 0a             	imul   eax,eax,0xa
c0010bdc:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010be0:	88 ca                	mov    dl,cl
c0010be2:	46                   	inc    esi
c0010be3:	eb ce                	jmp    c0010bb3 <VgaText::putchar(char)+0x53>
c0010be5:	84 d2                	test   dl,dl
c0010be7:	74 2e                	je     c0010c17 <VgaText::putchar(char)+0xb7>
c0010be9:	50                   	push   eax
c0010bea:	53                   	push   ebx
c0010beb:	e8 e8 f6 ff ff       	call   c00102d8 <VgaText::doANSI_SGR(int)>
c0010bf0:	58                   	pop    eax
c0010bf1:	5a                   	pop    edx
c0010bf2:	eb 23                	jmp    c0010c17 <VgaText::putchar(char)+0xb7>
c0010bf4:	3c 4a                	cmp    al,0x4a
c0010bf6:	75 1f                	jne    c0010c17 <VgaText::putchar(char)+0xb7>
c0010bf8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010bfc:	75 19                	jne    c0010c17 <VgaText::putchar(char)+0xb7>
c0010bfe:	83 ec 0c             	sub    esp,0xc
c0010c01:	53                   	push   ebx
c0010c02:	e8 ff fe ff ff       	call   c0010b06 <VgaText::clearScreen()>
c0010c07:	83 c4 0c             	add    esp,0xc
c0010c0a:	6a 00                	push   0x0
c0010c0c:	6a 00                	push   0x0
c0010c0e:	53                   	push   ebx
c0010c0f:	e8 9c f8 ff ff       	call   c00104b0 <VgaText::setCursor(int, int)>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010c1d:	eb 27                	jmp    c0010c46 <VgaText::putchar(char)+0xe6>
c0010c1f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010c22:	83 fa 0e             	cmp    edx,0xe
c0010c25:	7f 1f                	jg     c0010c46 <VgaText::putchar(char)+0xe6>
c0010c27:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c2a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010c2d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010c31:	eb 13                	jmp    c0010c46 <VgaText::putchar(char)+0xe6>
c0010c33:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c36:	0f be c0             	movsx  eax,al
c0010c39:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c3c:	50                   	push   eax
c0010c3d:	53                   	push   ebx
c0010c3e:	e8 71 fb ff ff       	call   c00107b4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c43:	83 c4 10             	add    esp,0x10
c0010c46:	83 c4 14             	add    esp,0x14
c0010c49:	5b                   	pop    ebx
c0010c4a:	5e                   	pop    esi
c0010c4b:	c3                   	ret    

c0010c4c <VgaText::puts(char const*)>:
c0010c4c:	53                   	push   ebx
c0010c4d:	83 ec 08             	sub    esp,0x8
c0010c50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c54:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c57:	84 c0                	test   al,al
c0010c59:	74 12                	je     c0010c6d <VgaText::puts(char const*)+0x21>
c0010c5b:	43                   	inc    ebx
c0010c5c:	51                   	push   ecx
c0010c5d:	51                   	push   ecx
c0010c5e:	50                   	push   eax
c0010c5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c63:	e8 f8 fe ff ff       	call   c0010b60 <VgaText::putchar(char)>
c0010c68:	83 c4 10             	add    esp,0x10
c0010c6b:	eb e7                	jmp    c0010c54 <VgaText::puts(char const*)+0x8>
c0010c6d:	83 c4 08             	add    esp,0x8
c0010c70:	5b                   	pop    ebx
c0010c71:	c3                   	ret    

c0010c72 <VgaText::putx(unsigned int)>:
c0010c72:	57                   	push   edi
c0010c73:	b9 11 00 00 00       	mov    ecx,0x11
c0010c78:	56                   	push   esi
c0010c79:	be 02 af 02 c0       	mov    esi,0xc002af02
c0010c7e:	53                   	push   ebx
c0010c7f:	83 ec 20             	sub    esp,0x20
c0010c82:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c86:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c8a:	fc                   	cld    
c0010c8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c8d:	be 08 00 00 00       	mov    esi,0x8
c0010c92:	50                   	push   eax
c0010c93:	50                   	push   eax
c0010c94:	89 d8                	mov    eax,ebx
c0010c96:	c1 e3 04             	shl    ebx,0x4
c0010c99:	c1 e8 1c             	shr    eax,0x1c
c0010c9c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ca1:	50                   	push   eax
c0010ca2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ca6:	e8 b5 fe ff ff       	call   c0010b60 <VgaText::putchar(char)>
c0010cab:	83 c4 10             	add    esp,0x10
c0010cae:	4e                   	dec    esi
c0010caf:	75 e1                	jne    c0010c92 <VgaText::putx(unsigned int)+0x20>
c0010cb1:	83 c4 20             	add    esp,0x20
c0010cb4:	5b                   	pop    ebx
c0010cb5:	5e                   	pop    esi
c0010cb6:	5f                   	pop    edi
c0010cb7:	c3                   	ret    

c0010cb8 <VgaText::VgaText(char const*)>:
c0010cb8:	57                   	push   edi
c0010cb9:	56                   	push   esi
c0010cba:	53                   	push   ebx
c0010cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cbf:	83 ec 08             	sub    esp,0x8
c0010cc2:	6a 00                	push   0x0
c0010cc4:	50                   	push   eax
c0010cc5:	e8 8a 05 00 00       	call   c0011254 <UnixFile::UnixFile(int)>
c0010cca:	83 c4 10             	add    esp,0x10
c0010ccd:	ba 68 af 02 c0       	mov    edx,0xc002af68
c0010cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd6:	89 10                	mov    DWORD PTR [eax],edx
c0010cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cdc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cfa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d02:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d18:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d23:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d2e:	8d 50 60             	lea    edx,[eax+0x60]
c0010d31:	bb 80 f1 02 c0       	mov    ebx,0xc002f180
c0010d36:	b8 08 00 00 00       	mov    eax,0x8
c0010d3b:	fc                   	cld    
c0010d3c:	89 d7                	mov    edi,edx
c0010d3e:	89 de                	mov    esi,ebx
c0010d40:	89 c1                	mov    ecx,eax
c0010d42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d48:	05 82 00 00 00       	add    eax,0x82
c0010d4d:	83 ec 08             	sub    esp,0x8
c0010d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d54:	50                   	push   eax
c0010d55:	e8 b2 fa fe ff       	call   c000080c <strcpy>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d61:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	6a 01                	push   0x1
c0010d6d:	e8 25 09 00 00       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0010d72:	83 c4 10             	add    esp,0x10
c0010d75:	89 c2                	mov    edx,eax
c0010d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d7b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d7e:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0010d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d8b:	89 c6                	mov    esi,eax
c0010d8d:	e8 da ed ff ff       	call   c000fb6c <Phys::allocatePage()>
c0010d92:	6a 05                	push   0x5
c0010d94:	56                   	push   esi
c0010d95:	50                   	push   eax
c0010d96:	53                   	push   ebx
c0010d97:	e8 32 11 00 00       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010da6:	83 ec 04             	sub    esp,0x4
c0010da9:	68 00 0f 00 00       	push   0xf00
c0010dae:	6a 00                	push   0x0
c0010db0:	50                   	push   eax
c0010db1:	e8 9a f9 fe ff       	call   c0000750 <memset>
c0010db6:	83 c4 10             	add    esp,0x10
c0010db9:	83 ec 04             	sub    esp,0x4
c0010dbc:	6a 00                	push   0x0
c0010dbe:	6a 07                	push   0x7
c0010dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc4:	e8 a3 f5 ff ff       	call   c001036c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	83 ec 08             	sub    esp,0x8
c0010dcf:	6a 02                	push   0x2
c0010dd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd5:	e8 c6 fa ff ff       	call   c00108a0 <VgaText::setCursorHeight(int)>
c0010dda:	83 c4 10             	add    esp,0x10
c0010ddd:	83 ec 04             	sub    esp,0x4
c0010de0:	6a 00                	push   0x0
c0010de2:	6a 00                	push   0x0
c0010de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de8:	e8 c3 f6 ff ff       	call   c00104b0 <VgaText::setCursor(int, int)>
c0010ded:	83 c4 10             	add    esp,0x10
c0010df0:	83 ec 08             	sub    esp,0x8
c0010df3:	6a 01                	push   0x1
c0010df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df9:	e8 9a f4 ff ff       	call   c0010298 <VgaText::showCursor(bool)>
c0010dfe:	83 c4 10             	add    esp,0x10
c0010e01:	83 ec 08             	sub    esp,0x8
c0010e04:	6a 01                	push   0x1
c0010e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0a:	e8 95 f4 ff ff       	call   c00102a4 <VgaText::disableBlink(bool)>
c0010e0f:	83 c4 10             	add    esp,0x10
c0010e12:	83 ec 0c             	sub    esp,0xc
c0010e15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e19:	e8 e8 fc ff ff       	call   c0010b06 <VgaText::clearScreen()>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e25:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2d:	05 02 01 00 00       	add    eax,0x102
c0010e32:	83 ec 04             	sub    esp,0x4
c0010e35:	68 96 00 00 00       	push   0x96
c0010e3a:	6a 00                	push   0x0
c0010e3c:	50                   	push   eax
c0010e3d:	e8 0e f9 fe ff       	call   c0000750 <memset>
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e49:	05 98 01 00 00       	add    eax,0x198
c0010e4e:	83 ec 04             	sub    esp,0x4
c0010e51:	68 2c 01 00 00       	push   0x12c
c0010e56:	6a 00                	push   0x0
c0010e58:	50                   	push   eax
c0010e59:	e8 f2 f8 fe ff       	call   c0000750 <memset>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	90                   	nop
c0010e62:	5b                   	pop    ebx
c0010e63:	5e                   	pop    esi
c0010e64:	5f                   	pop    edi
c0010e65:	c3                   	ret    

c0010e66 <VgaText::receiveKey(unsigned char)>:
c0010e66:	55                   	push   ebp
c0010e67:	57                   	push   edi
c0010e68:	56                   	push   esi
c0010e69:	53                   	push   ebx
c0010e6a:	83 ec 1c             	sub    esp,0x1c
c0010e6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e75:	84 db                	test   bl,bl
c0010e77:	0f 84 c9 00 00 00    	je     c0010f46 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e7d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010e83:	80 fb 08             	cmp    bl,0x8
c0010e86:	75 2c                	jne    c0010eb4 <VgaText::receiveKey(unsigned char)+0x4e>
c0010e88:	83 ec 0c             	sub    esp,0xc
c0010e8b:	57                   	push   edi
c0010e8c:	e8 db f8 fe ff       	call   c000076c <strlen>
c0010e91:	83 c4 10             	add    esp,0x10
c0010e94:	85 c0                	test   eax,eax
c0010e96:	74 41                	je     c0010ed9 <VgaText::receiveKey(unsigned char)+0x73>
c0010e98:	50                   	push   eax
c0010e99:	50                   	push   eax
c0010e9a:	6a 08                	push   0x8
c0010e9c:	56                   	push   esi
c0010e9d:	e8 be fc ff ff       	call   c0010b60 <VgaText::putchar(char)>
c0010ea2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ea5:	e8 c2 f8 fe ff       	call   c000076c <strlen>
c0010eaa:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010eb2:	eb 22                	jmp    c0010ed6 <VgaText::receiveKey(unsigned char)+0x70>
c0010eb4:	0f be c3             	movsx  eax,bl
c0010eb7:	52                   	push   edx
c0010eb8:	52                   	push   edx
c0010eb9:	50                   	push   eax
c0010eba:	56                   	push   esi
c0010ebb:	e8 a0 fc ff ff       	call   c0010b60 <VgaText::putchar(char)>
c0010ec0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ec4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ec9:	59                   	pop    ecx
c0010eca:	5d                   	pop    ebp
c0010ecb:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ecf:	50                   	push   eax
c0010ed0:	57                   	push   edi
c0010ed1:	e8 76 fa fe ff       	call   c000094c <strcat>
c0010ed6:	83 c4 10             	add    esp,0x10
c0010ed9:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010ee0:	75 05                	jne    c0010ee7 <VgaText::receiveKey(unsigned char)+0x81>
c0010ee2:	80 fb 0a             	cmp    bl,0xa
c0010ee5:	75 53                	jne    c0010f3a <VgaText::receiveKey(unsigned char)+0xd4>
c0010ee7:	83 ec 0c             	sub    esp,0xc
c0010eea:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010ef0:	53                   	push   ebx
c0010ef1:	e8 76 f8 fe ff       	call   c000076c <strlen>
c0010ef6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ef9:	89 c5                	mov    ebp,eax
c0010efb:	e8 6c f8 fe ff       	call   c000076c <strlen>
c0010f00:	83 c4 10             	add    esp,0x10
c0010f03:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f07:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f0c:	76 10                	jbe    c0010f1e <VgaText::receiveKey(unsigned char)+0xb8>
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	68 13 af 02 c0       	push   0xc002af13
c0010f16:	e8 b8 95 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0010f1b:	83 c4 10             	add    esp,0x10
c0010f1e:	50                   	push   eax
c0010f1f:	50                   	push   eax
c0010f20:	57                   	push   edi
c0010f21:	53                   	push   ebx
c0010f22:	e8 25 fa fe ff       	call   c000094c <strcat>
c0010f27:	83 c4 0c             	add    esp,0xc
c0010f2a:	68 96 00 00 00       	push   0x96
c0010f2f:	6a 00                	push   0x0
c0010f31:	57                   	push   edi
c0010f32:	e8 19 f8 fe ff       	call   c0000750 <memset>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	56                   	push   esi
c0010f3e:	e8 3d fa ff ff       	call   c0010980 <VgaText::doUpdate()>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	83 c4 1c             	add    esp,0x1c
c0010f49:	5b                   	pop    ebx
c0010f4a:	5e                   	pop    esi
c0010f4b:	5f                   	pop    edi
c0010f4c:	5d                   	pop    ebp
c0010f4d:	c3                   	ret    

c0010f4e <VgaText::write(unsigned long long, void*, int*)>:
c0010f4e:	55                   	push   ebp
c0010f4f:	57                   	push   edi
c0010f50:	56                   	push   esi
c0010f51:	53                   	push   ebx
c0010f52:	83 ec 0c             	sub    esp,0xc
c0010f55:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f59:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f5d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f61:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010f68:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f6b:	39 eb                	cmp    ebx,ebp
c0010f6d:	74 13                	je     c0010f82 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f6f:	43                   	inc    ebx
c0010f70:	50                   	push   eax
c0010f71:	50                   	push   eax
c0010f72:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f76:	50                   	push   eax
c0010f77:	56                   	push   esi
c0010f78:	e8 e3 fb ff ff       	call   c0010b60 <VgaText::putchar(char)>
c0010f7d:	83 c4 10             	add    esp,0x10
c0010f80:	eb e9                	jmp    c0010f6b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010f8c:	56                   	push   esi
c0010f8d:	e8 ee f9 ff ff       	call   c0010980 <VgaText::doUpdate()>
c0010f92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f96:	89 38                	mov    DWORD PTR [eax],edi
c0010f98:	83 c4 1c             	add    esp,0x1c
c0010f9b:	31 c0                	xor    eax,eax
c0010f9d:	5b                   	pop    ebx
c0010f9e:	5e                   	pop    esi
c0010f9f:	5f                   	pop    edi
c0010fa0:	5d                   	pop    ebp
c0010fa1:	c3                   	ret    

c0010fa2 <newTerminal(char*)>:
c0010fa2:	83 ec 28             	sub    esp,0x28
c0010fa5:	68 c4 02 00 00       	push   0x2c4
c0010faa:	e8 dd e8 ff ff       	call   c000f88c <malloc>
c0010faf:	5a                   	pop    edx
c0010fb0:	59                   	pop    ecx
c0010fb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fb5:	50                   	push   eax
c0010fb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fba:	e8 f9 fc ff ff       	call   c0010cb8 <VgaText::VgaText(char const*)>
c0010fbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc3:	83 c4 2c             	add    esp,0x2c
c0010fc6:	c3                   	ret    
c0010fc7:	90                   	nop

c0010fc8 <TSS::TSS()>:
c0010fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd3:	90                   	nop
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <TSS::setESP(unsigned long)>:
c0010fd6:	55                   	push   ebp
c0010fd7:	89 e5                	mov    ebp,esp
c0010fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fdf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fe2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fe5:	90                   	nop
c0010fe6:	5d                   	pop    ebp
c0010fe7:	c3                   	ret    

c0010fe8 <TSS::flush()>:
c0010fe8:	55                   	push   ebp
c0010fe9:	89 e5                	mov    ebp,esp
c0010feb:	83 ec 10             	sub    esp,0x10
c0010fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ff3:	83 c8 03             	or     eax,0x3
c0010ff6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010ffa:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010ffe:	66 89 d0             	mov    ax,dx
c0011001:	0f 00 d8             	ltr    ax
c0011004:	90                   	nop
c0011005:	c9                   	leave  
c0011006:	c3                   	ret    
c0011007:	90                   	nop

c0011008 <TSS::setup(unsigned long, unsigned long)>:
c0011008:	55                   	push   ebp
c0011009:	89 e5                	mov    ebp,esp
c001100b:	83 ec 18             	sub    esp,0x18
c001100e:	83 ec 0c             	sub    esp,0xc
c0011011:	6a 68                	push   0x68
c0011013:	e8 74 e8 ff ff       	call   c000f88c <malloc>
c0011018:	83 c4 10             	add    esp,0x10
c001101b:	89 c2                	mov    edx,eax
c001101d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011020:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011029:	83 ec 04             	sub    esp,0x4
c001102c:	6a 68                	push   0x68
c001102e:	6a 00                	push   0x0
c0011030:	50                   	push   eax
c0011031:	e8 1a f7 fe ff       	call   c0000750 <memset>
c0011036:	83 c4 10             	add    esp,0x10
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001105a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011063:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011087:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001108d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011090:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011093:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ab:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110ae:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d0:	0f 20 da             	mov    edx,cr3
c00110d3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110d9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e2:	83 ec 08             	sub    esp,0x8
c00110e5:	50                   	push   eax
c00110e6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110e9:	50                   	push   eax
c00110ea:	e8 79 df ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	83 ec 08             	sub    esp,0x8
c00110f5:	6a 68                	push   0x68
c00110f7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110fa:	50                   	push   eax
c00110fb:	e8 84 df ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011107:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001110a:	83 e0 0f             	and    eax,0xf
c001110d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011110:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011113:	83 c8 40             	or     eax,0x40
c0011116:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011119:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001111e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011124:	05 78 01 00 00       	add    eax,0x178
c0011129:	83 ec 04             	sub    esp,0x4
c001112c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001112f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011132:	50                   	push   eax
c0011133:	e8 80 df ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	89 c2                	mov    edx,eax
c001113d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011140:	89 10                	mov    DWORD PTR [eax],edx
c0011142:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0011147:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001114d:	05 78 01 00 00       	add    eax,0x178
c0011152:	83 ec 0c             	sub    esp,0xc
c0011155:	50                   	push   eax
c0011156:	e8 a1 df ff ff       	call   c000f0fc <GDT::flush()>
c001115b:	83 c4 10             	add    esp,0x10
c001115e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011161:	8b 00                	mov    eax,DWORD PTR [eax]
c0011163:	83 ec 08             	sub    esp,0x8
c0011166:	50                   	push   eax
c0011167:	68 7c af 02 c0       	push   0xc002af7c
c001116c:	e8 2c 19 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0011171:	83 c4 10             	add    esp,0x10
c0011174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011177:	8b 00                	mov    eax,DWORD PTR [eax]
c0011179:	c9                   	leave  
c001117a:	c3                   	ret    
c001117b:	90                   	nop

c001117c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001117c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011180:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011187:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001118c:	75 08                	jne    c0011196 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001118e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011194:	eb 38                	jmp    c00111ce <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011196:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001119b:	75 17                	jne    c00111b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001119d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00111ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111b1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111b4:	89 c1                	mov    ecx,eax
c00111b6:	83 e1 fd             	and    ecx,0xfffffffd
c00111b9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00111bf:	74 cd                	je     c001118e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111c1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111c6:	83 e0 ef             	and    eax,0xffffffef
c00111c9:	83 f8 08             	cmp    eax,0x8
c00111cc:	76 c0                	jbe    c001118e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111ce:	31 c0                	xor    eax,eax
c00111d0:	c3                   	ret    
c00111d1:	90                   	nop

c00111d2 <ReservedFilename::isAtty()>:
c00111d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111d9:	31 c0                	xor    eax,eax
c00111db:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111e1:	74 09                	je     c00111ec <ReservedFilename::isAtty()+0x1a>
c00111e3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111e9:	0f 94 c0             	sete   al
c00111ec:	c3                   	ret    
c00111ed:	90                   	nop

c00111ee <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111fd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011202:	75 08                	jne    c001120c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011204:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001120a:	eb 3d                	jmp    c0011249 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001120c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011211:	75 17                	jne    c001122a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011218:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001121b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011221:	8b 10                	mov    edx,DWORD PTR [eax]
c0011223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011227:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001122a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001122f:	75 04                	jne    c0011235 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011231:	89 0a                	mov    DWORD PTR [edx],ecx
c0011233:	eb 14                	jmp    c0011249 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011235:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001123a:	74 c8                	je     c0011204 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001123c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011241:	83 e0 ef             	and    eax,0xffffffef
c0011244:	83 f8 08             	cmp    eax,0x8
c0011247:	76 bb                	jbe    c0011204 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011249:	31 c0                	xor    eax,eax
c001124b:	c3                   	ret    

c001124c <UnixFile::getFileDescriptor()>:
c001124c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011253:	c3                   	ret    

c0011254 <UnixFile::UnixFile(int)>:
c0011254:	53                   	push   ebx
c0011255:	83 ec 28             	sub    esp,0x28
c0011258:	ba 68 b0 02 c0       	mov    edx,0xc002b068
c001125d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011261:	89 10                	mov    DWORD PTR [eax],edx
c0011263:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001126b:	0f 8f 8c 01 00 00    	jg     c00113fd <UnixFile::UnixFile(int)+0x1a9>
c0011271:	a1 80 e0 02 c0       	mov    eax,ds:0xc002e080
c0011276:	8d 50 01             	lea    edx,[eax+0x1]
c0011279:	89 15 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,edx
c001127f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011283:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001128d:	68 38 f2 02 c0       	push   0xc002f238
c0011292:	e8 25 7f 01 00       	call   c00291bc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	a0 34 f2 02 c0       	mov    al,ds:0xc002f234
c001129f:	83 f0 01             	xor    eax,0x1
c00112a2:	84 c0                	test   al,al
c00112a4:	0f 84 54 01 00 00    	je     c00113fe <UnixFile::UnixFile(int)+0x1aa>
c00112aa:	c6 05 34 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f234,0x1
c00112b1:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00112b9:	83 ec 0c             	sub    esp,0xc
c00112bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112c0:	e8 c7 e5 ff ff       	call   c000f88c <malloc>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	89 c3                	mov    ebx,eax
c00112ca:	83 ec 08             	sub    esp,0x8
c00112cd:	68 03 ff ff 0f       	push   0xfffff03
c00112d2:	53                   	push   ebx
c00112d3:	e8 2c 01 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	89 1d 2c f2 02 c0    	mov    DWORD PTR ds:0xc002f22c,ebx
c00112e1:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112e9:	83 ec 0c             	sub    esp,0xc
c00112ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f0:	e8 97 e5 ff ff       	call   c000f88c <malloc>
c00112f5:	83 c4 10             	add    esp,0x10
c00112f8:	89 c3                	mov    ebx,eax
c00112fa:	83 ec 08             	sub    esp,0x8
c00112fd:	68 01 ff ff 0f       	push   0xfffff01
c0011302:	53                   	push   ebx
c0011303:	e8 fc 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c0011308:	83 c4 10             	add    esp,0x10
c001130b:	89 1d 30 f2 02 c0    	mov    DWORD PTR ds:0xc002f230,ebx
c0011311:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011319:	83 ec 0c             	sub    esp,0xc
c001131c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011320:	e8 67 e5 ff ff       	call   c000f88c <malloc>
c0011325:	83 c4 10             	add    esp,0x10
c0011328:	89 c3                	mov    ebx,eax
c001132a:	83 ec 08             	sub    esp,0x8
c001132d:	68 00 ff ff 0f       	push   0xfffff00
c0011332:	53                   	push   ebx
c0011333:	e8 cc 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c0011338:	83 c4 10             	add    esp,0x10
c001133b:	89 1d 24 f2 02 c0    	mov    DWORD PTR ds:0xc002f224,ebx
c0011341:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011350:	e8 37 e5 ff ff       	call   c000f88c <malloc>
c0011355:	83 c4 10             	add    esp,0x10
c0011358:	89 c3                	mov    ebx,eax
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	68 02 ff ff 0f       	push   0xfffff02
c0011362:	53                   	push   ebx
c0011363:	e8 9c 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	89 1d 28 f2 02 c0    	mov    DWORD PTR ds:0xc002f228,ebx
c0011371:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011379:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001137e:	7f 7e                	jg     c00113fe <UnixFile::UnixFile(int)+0x1aa>
c0011380:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001138f:	e8 f8 e4 ff ff       	call   c000f88c <malloc>
c0011394:	83 c4 10             	add    esp,0x10
c0011397:	89 c3                	mov    ebx,eax
c0011399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001139d:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113a2:	83 ec 08             	sub    esp,0x8
c00113a5:	50                   	push   eax
c00113a6:	53                   	push   ebx
c00113a7:	e8 58 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b3:	89 1c 85 00 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e00],ebx
c00113ba:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113c9:	e8 be e4 ff ff       	call   c000f88c <malloc>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	89 c3                	mov    ebx,eax
c00113d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113d7:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113dc:	83 ec 08             	sub    esp,0x8
c00113df:	50                   	push   eax
c00113e0:	53                   	push   ebx
c00113e1:	e8 1e 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c00113e6:	83 c4 10             	add    esp,0x10
c00113e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113ed:	89 1c 85 c0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e40],ebx
c00113f4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113f8:	e9 7c ff ff ff       	jmp    c0011379 <UnixFile::UnixFile(int)+0x125>
c00113fd:	90                   	nop
c00113fe:	83 c4 28             	add    esp,0x28
c0011401:	5b                   	pop    ebx
c0011402:	c3                   	ret    
c0011403:	90                   	nop

c0011404 <ReservedFilename::ReservedFilename(int)>:
c0011404:	83 ec 0c             	sub    esp,0xc
c0011407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001140b:	83 ec 08             	sub    esp,0x8
c001140e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011412:	50                   	push   eax
c0011413:	e8 3c fe ff ff       	call   c0011254 <UnixFile::UnixFile(int)>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	ba 84 b0 02 c0       	mov    edx,0xc002b084
c0011420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011424:	89 10                	mov    DWORD PTR [eax],edx
c0011426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001142e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011431:	90                   	nop
c0011432:	83 c4 0c             	add    esp,0xc
c0011435:	c3                   	ret    

c0011436 <UnixFile::~UnixFile()>:
c0011436:	83 ec 1c             	sub    esp,0x1c
c0011439:	ba 68 b0 02 c0       	mov    edx,0xc002b068
c001143e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011442:	89 10                	mov    DWORD PTR [eax],edx
c0011444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011448:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011450:	7f 73                	jg     c00114c5 <UnixFile::~UnixFile()+0x8f>
c0011452:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	68 38 f2 02 c0       	push   0xc002f238
c0011462:	e8 29 7e 01 00       	call   c0029290 <LinkedList<UnixFile>::getFirstElement()>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001146e:	83 ec 0c             	sub    esp,0xc
c0011471:	68 38 f2 02 c0       	push   0xc002f238
c0011476:	e8 1d 7e 01 00       	call   c0029298 <LinkedList<UnixFile>::removeFirst()>
c001147b:	83 c4 10             	add    esp,0x10
c001147e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011482:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011486:	74 40                	je     c00114c8 <UnixFile::~UnixFile()+0x92>
c0011488:	83 ec 08             	sub    esp,0x8
c001148b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001148f:	68 38 f2 02 c0       	push   0xc002f238
c0011494:	e8 23 7d 01 00       	call   c00291bc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114a0:	8d 50 01             	lea    edx,[eax+0x1]
c00114a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114a7:	3d 88 13 00 00       	cmp    eax,0x1388
c00114ac:	0f 94 c0             	sete   al
c00114af:	84 c0                	test   al,al
c00114b1:	74 a7                	je     c001145a <UnixFile::~UnixFile()+0x24>
c00114b3:	83 ec 0c             	sub    esp,0xc
c00114b6:	68 40 b0 02 c0       	push   0xc002b040
c00114bb:	e8 13 90 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	eb 95                	jmp    c001145a <UnixFile::~UnixFile()+0x24>
c00114c5:	90                   	nop
c00114c6:	eb 01                	jmp    c00114c9 <UnixFile::~UnixFile()+0x93>
c00114c8:	90                   	nop
c00114c9:	90                   	nop
c00114ca:	83 c4 1c             	add    esp,0x1c
c00114cd:	c3                   	ret    

c00114ce <UnixFile::~UnixFile()>:
c00114ce:	83 ec 0c             	sub    esp,0xc
c00114d1:	83 ec 0c             	sub    esp,0xc
c00114d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d8:	e8 59 ff ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c00114dd:	83 c4 10             	add    esp,0x10
c00114e0:	83 ec 08             	sub    esp,0x8
c00114e3:	6a 0c                	push   0xc
c00114e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e9:	e8 cf 14 00 00       	call   c00129bd <operator delete(void*, unsigned long)>
c00114ee:	83 c4 10             	add    esp,0x10
c00114f1:	83 c4 0c             	add    esp,0xc
c00114f4:	c3                   	ret    
c00114f5:	90                   	nop

c00114f6 <ReservedFilename::~ReservedFilename()>:
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	ba 84 b0 02 c0       	mov    edx,0xc002b084
c00114fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011502:	89 10                	mov    DWORD PTR [eax],edx
c0011504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	50                   	push   eax
c001150c:	e8 25 ff ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c0011511:	83 c4 10             	add    esp,0x10
c0011514:	90                   	nop
c0011515:	83 c4 0c             	add    esp,0xc
c0011518:	c3                   	ret    
c0011519:	90                   	nop

c001151a <ReservedFilename::~ReservedFilename()>:
c001151a:	83 ec 0c             	sub    esp,0xc
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011524:	e8 cd ff ff ff       	call   c00114f6 <ReservedFilename::~ReservedFilename()>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	83 ec 08             	sub    esp,0x8
c001152f:	6a 0c                	push   0xc
c0011531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011535:	e8 83 14 00 00       	call   c00129bd <operator delete(void*, unsigned long)>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	83 c4 0c             	add    esp,0xc
c0011540:	c3                   	ret    

c0011541 <getFromFileDescriptor(int)>:
c0011541:	53                   	push   ebx
c0011542:	83 ec 08             	sub    esp,0x8
c0011545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011549:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001154f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011555:	7f 2c                	jg     c0011583 <getFromFileDescriptor(int)+0x42>
c0011557:	83 ec 0c             	sub    esp,0xc
c001155a:	68 38 f2 02 c0       	push   0xc002f238
c001155f:	e8 2c 7d 01 00       	call   c0029290 <LinkedList<UnixFile>::getFirstElement()>
c0011564:	83 c4 10             	add    esp,0x10
c0011567:	85 c0                	test   eax,eax
c0011569:	75 04                	jne    c001156f <getFromFileDescriptor(int)+0x2e>
c001156b:	31 c0                	xor    eax,eax
c001156d:	eb 6e                	jmp    c00115dd <getFromFileDescriptor(int)+0x9c>
c001156f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011572:	74 69                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c0011574:	52                   	push   edx
c0011575:	52                   	push   edx
c0011576:	50                   	push   eax
c0011577:	68 38 f2 02 c0       	push   0xc002f238
c001157c:	e8 b9 7d 01 00       	call   c002933a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011581:	eb e1                	jmp    c0011564 <getFromFileDescriptor(int)+0x23>
c0011583:	a1 2c f2 02 c0       	mov    eax,ds:0xc002f22c
c0011588:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001158e:	74 4d                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c0011590:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c0011595:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001159b:	74 40                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c001159d:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c00115a2:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115a8:	74 33                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c00115aa:	a1 24 f2 02 c0       	mov    eax,ds:0xc002f224
c00115af:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115b5:	74 26                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c00115b7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00115bd:	83 f8 08             	cmp    eax,0x8
c00115c0:	77 09                	ja     c00115cb <getFromFileDescriptor(int)+0x8a>
c00115c2:	8b 04 85 00 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e00]
c00115c9:	eb 12                	jmp    c00115dd <getFromFileDescriptor(int)+0x9c>
c00115cb:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115d1:	83 fb 08             	cmp    ebx,0x8
c00115d4:	77 95                	ja     c001156b <getFromFileDescriptor(int)+0x2a>
c00115d6:	8b 04 9d c0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e40]
c00115dd:	83 c4 08             	add    esp,0x8
c00115e0:	5b                   	pop    ebx
c00115e1:	c3                   	ret    

c00115e2 <__static_initialization_and_destruction_0(int, int)>:
c00115e2:	83 ec 0c             	sub    esp,0xc
c00115e5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115ea:	75 34                	jne    c0011620 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115ec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115f4:	75 2a                	jne    c0011620 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	68 38 f2 02 c0       	push   0xc002f238
c00115fe:	e8 61 7b 01 00       	call   c0029164 <LinkedList<UnixFile>::LinkedList()>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	83 ec 04             	sub    esp,0x4
c0011609:	68 fc df 02 c0       	push   0xc002dffc
c001160e:	68 38 f2 02 c0       	push   0xc002f238
c0011613:	68 62 91 02 c0       	push   0xc0029162
c0011618:	e8 1a 13 00 00       	call   c0012937 <__cxa_atexit>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	90                   	nop
c0011621:	83 c4 0c             	add    esp,0xc
c0011624:	c3                   	ret    

c0011625 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011625:	83 ec 0c             	sub    esp,0xc
c0011628:	83 ec 08             	sub    esp,0x8
c001162b:	68 ff ff 00 00       	push   0xffff
c0011630:	6a 01                	push   0x1
c0011632:	e8 ab ff ff ff       	call   c00115e2 <__static_initialization_and_destruction_0(int, int)>
c0011637:	83 c4 10             	add    esp,0x10
c001163a:	83 c4 0c             	add    esp,0xc
c001163d:	c3                   	ret    

c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001163e:	53                   	push   ebx
c001163f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011643:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011647:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001164d:	89 c8                	mov    eax,ecx
c001164f:	d1 e8                	shr    eax,1
c0011651:	03 05 88 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e088
c0011657:	83 e1 01             	and    ecx,0x1
c001165a:	8a 10                	mov    dl,BYTE PTR [eax]
c001165c:	75 09                	jne    c0011667 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001165e:	83 e2 f0             	and    edx,0xfffffff0
c0011661:	09 da                	or     edx,ebx
c0011663:	88 10                	mov    BYTE PTR [eax],dl
c0011665:	5b                   	pop    ebx
c0011666:	c3                   	ret    
c0011667:	c1 e3 04             	shl    ebx,0x4
c001166a:	83 e2 0f             	and    edx,0xf
c001166d:	09 da                	or     edx,ebx
c001166f:	88 10                	mov    BYTE PTR [eax],dl
c0011671:	5b                   	pop    ebx
c0011672:	c3                   	ret    

c0011673 <Virt::getPageState(unsigned long)>:
c0011673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011677:	8b 0d 88 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e088
c001167d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011683:	89 d0                	mov    eax,edx
c0011685:	d1 e8                	shr    eax,1
c0011687:	83 e2 01             	and    edx,0x1
c001168a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001168d:	75 04                	jne    c0011693 <Virt::getPageState(unsigned long)+0x20>
c001168f:	83 e0 0f             	and    eax,0xf
c0011692:	c3                   	ret    
c0011693:	c0 e8 04             	shr    al,0x4
c0011696:	c3                   	ret    

c0011697 <Virt::allocateKernelVirtualPages(int)>:
c0011697:	55                   	push   ebp
c0011698:	31 ed                	xor    ebp,ebp
c001169a:	57                   	push   edi
c001169b:	56                   	push   esi
c001169c:	53                   	push   ebx
c001169d:	31 db                	xor    ebx,ebx
c001169f:	83 ec 1c             	sub    esp,0x1c
c00116a2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116a6:	8b 3d 84 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e084
c00116ac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116b1:	57                   	push   edi
c00116b2:	e8 bc ff ff ff       	call   c0011673 <Virt::getPageState(unsigned long)>
c00116b7:	5a                   	pop    edx
c00116b8:	84 c0                	test   al,al
c00116ba:	75 3a                	jne    c00116f6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00116bc:	85 db                	test   ebx,ebx
c00116be:	75 02                	jne    c00116c2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00116c0:	89 fd                	mov    ebp,edi
c00116c2:	43                   	inc    ebx
c00116c3:	39 f3                	cmp    ebx,esi
c00116c5:	74 5a                	je     c0011721 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00116c7:	47                   	inc    edi
c00116c8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116ce:	76 31                	jbe    c0011701 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116d0:	c7 05 84 e0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e084,0xc8000
c00116da:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116df:	75 28                	jne    c0011709 <Virt::allocateKernelVirtualPages(int)+0x72>
c00116e1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116e6:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116eb:	57                   	push   edi
c00116ec:	e8 82 ff ff ff       	call   c0011673 <Virt::getPageState(unsigned long)>
c00116f1:	5a                   	pop    edx
c00116f2:	84 c0                	test   al,al
c00116f4:	74 c6                	je     c00116bc <Virt::allocateKernelVirtualPages(int)+0x25>
c00116f6:	31 db                	xor    ebx,ebx
c00116f8:	47                   	inc    edi
c00116f9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116ff:	77 cf                	ja     c00116d0 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011701:	89 3d 84 e0 02 c0    	mov    DWORD PTR ds:0xc002e084,edi
c0011707:	eb a8                	jmp    c00116b1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011709:	83 ec 0c             	sub    esp,0xc
c001170c:	68 98 b0 02 c0       	push   0xc002b098
c0011711:	e8 bd 8d 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0011716:	8b 3d 84 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e084
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	eb 90                	jmp    c00116b1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011721:	89 2d 84 e0 02 c0    	mov    DWORD PTR ds:0xc002e084,ebp
c0011727:	4b                   	dec    ebx
c0011728:	74 5f                	je     c0011789 <Virt::allocateKernelVirtualPages(int)+0xf2>
c001172a:	85 f6                	test   esi,esi
c001172c:	74 3d                	je     c001176b <Virt::allocateKernelVirtualPages(int)+0xd4>
c001172e:	89 e8                	mov    eax,ebp
c0011730:	31 db                	xor    ebx,ebx
c0011732:	8d 7e ff             	lea    edi,[esi-0x1]
c0011735:	eb 14                	jmp    c001174b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011737:	6a 01                	push   0x1
c0011739:	43                   	inc    ebx
c001173a:	50                   	push   eax
c001173b:	e8 fe fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011740:	58                   	pop    eax
c0011741:	39 f3                	cmp    ebx,esi
c0011743:	5a                   	pop    edx
c0011744:	74 25                	je     c001176b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011746:	a1 84 e0 02 c0       	mov    eax,ds:0xc002e084
c001174b:	8d 50 01             	lea    edx,[eax+0x1]
c001174e:	85 db                	test   ebx,ebx
c0011750:	89 15 84 e0 02 c0    	mov    DWORD PTR ds:0xc002e084,edx
c0011756:	74 20                	je     c0011778 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011758:	39 df                	cmp    edi,ebx
c001175a:	75 db                	jne    c0011737 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001175c:	6a 03                	push   0x3
c001175e:	43                   	inc    ebx
c001175f:	50                   	push   eax
c0011760:	e8 d9 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011765:	59                   	pop    ecx
c0011766:	39 f3                	cmp    ebx,esi
c0011768:	58                   	pop    eax
c0011769:	75 db                	jne    c0011746 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001176b:	83 c4 1c             	add    esp,0x1c
c001176e:	89 e8                	mov    eax,ebp
c0011770:	5b                   	pop    ebx
c0011771:	c1 e0 0c             	shl    eax,0xc
c0011774:	5e                   	pop    esi
c0011775:	5f                   	pop    edi
c0011776:	5d                   	pop    ebp
c0011777:	c3                   	ret    
c0011778:	6a 02                	push   0x2
c001177a:	bb 01 00 00 00       	mov    ebx,0x1
c001177f:	50                   	push   eax
c0011780:	e8 b9 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011785:	58                   	pop    eax
c0011786:	5a                   	pop    edx
c0011787:	eb bd                	jmp    c0011746 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011789:	6a 04                	push   0x4
c001178b:	8d 45 01             	lea    eax,[ebp+0x1]
c001178e:	55                   	push   ebp
c001178f:	a3 84 e0 02 c0       	mov    ds:0xc002e084,eax
c0011794:	e8 a5 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011799:	59                   	pop    ecx
c001179a:	89 e8                	mov    eax,ebp
c001179c:	5b                   	pop    ebx
c001179d:	c1 e0 0c             	shl    eax,0xc
c00117a0:	83 c4 1c             	add    esp,0x1c
c00117a3:	5b                   	pop    ebx
c00117a4:	5e                   	pop    esi
c00117a5:	5f                   	pop    edi
c00117a6:	5d                   	pop    ebp
c00117a7:	c3                   	ret    

c00117a8 <Virt::freeSwapfilePage(unsigned long)>:
c00117a8:	53                   	push   ebx
c00117a9:	8b 15 4c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f24c
c00117af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00117b3:	b8 01 00 00 00       	mov    eax,0x1
c00117b8:	89 cb                	mov    ebx,ecx
c00117ba:	d3 e0                	shl    eax,cl
c00117bc:	c1 eb 05             	shr    ebx,0x5
c00117bf:	f7 d0                	not    eax
c00117c1:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00117c4:	5b                   	pop    ebx
c00117c5:	c3                   	ret    

c00117c6 <Virt::swapIDToSector(unsigned long)>:
c00117c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ca:	0f af 05 8c e0 02 c0 	imul   eax,DWORD PTR ds:0xc002e08c
c00117d1:	03 05 94 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e094
c00117d7:	c3                   	ret    

c00117d8 <Virt::allocateSwapfilePage()>:
c00117d8:	55                   	push   ebp
c00117d9:	31 d2                	xor    edx,edx
c00117db:	57                   	push   edi
c00117dc:	56                   	push   esi
c00117dd:	53                   	push   ebx
c00117de:	83 ec 0c             	sub    esp,0xc
c00117e1:	8b 0d 8c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e08c
c00117e7:	a1 90 e0 02 c0       	mov    eax,ds:0xc002e090
c00117ec:	f7 f1                	div    ecx
c00117ee:	39 0d 90 e0 02 c0    	cmp    DWORD PTR ds:0xc002e090,ecx
c00117f4:	72 2d                	jb     c0011823 <Virt::allocateSwapfilePage()+0x4b>
c00117f6:	8b 35 4c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f24c
c00117fc:	8b 16                	mov    edx,DWORD PTR [esi]
c00117fe:	f6 c2 01             	test   dl,0x1
c0011801:	74 3c                	je     c001183f <Virt::allocateSwapfilePage()+0x67>
c0011803:	31 c9                	xor    ecx,ecx
c0011805:	bf 01 00 00 00       	mov    edi,0x1
c001180a:	eb 12                	jmp    c001181e <Virt::allocateSwapfilePage()+0x46>
c001180c:	89 fd                	mov    ebp,edi
c001180e:	89 ca                	mov    edx,ecx
c0011810:	d3 e5                	shl    ebp,cl
c0011812:	c1 ea 05             	shr    edx,0x5
c0011815:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011818:	8b 13                	mov    edx,DWORD PTR [ebx]
c001181a:	85 ea                	test   edx,ebp
c001181c:	74 2a                	je     c0011848 <Virt::allocateSwapfilePage()+0x70>
c001181e:	41                   	inc    ecx
c001181f:	39 c8                	cmp    eax,ecx
c0011821:	77 e9                	ja     c001180c <Virt::allocateSwapfilePage()+0x34>
c0011823:	83 ec 0c             	sub    esp,0xc
c0011826:	68 1f b2 02 c0       	push   0xc002b21f
c001182b:	e8 a3 8c 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0011830:	83 c4 10             	add    esp,0x10
c0011833:	31 c9                	xor    ecx,ecx
c0011835:	83 c4 0c             	add    esp,0xc
c0011838:	89 c8                	mov    eax,ecx
c001183a:	5b                   	pop    ebx
c001183b:	5e                   	pop    esi
c001183c:	5f                   	pop    edi
c001183d:	5d                   	pop    ebp
c001183e:	c3                   	ret    
c001183f:	89 f3                	mov    ebx,esi
c0011841:	bd 01 00 00 00       	mov    ebp,0x1
c0011846:	31 c9                	xor    ecx,ecx
c0011848:	09 ea                	or     edx,ebp
c001184a:	89 c8                	mov    eax,ecx
c001184c:	89 13                	mov    DWORD PTR [ebx],edx
c001184e:	83 c4 0c             	add    esp,0xc
c0011851:	5b                   	pop    ebx
c0011852:	5e                   	pop    esi
c0011853:	5f                   	pop    edi
c0011854:	5d                   	pop    ebp
c0011855:	c3                   	ret    

c0011856 <Virt::virtualMemorySetup()>:
c0011856:	53                   	push   ebx
c0011857:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001185c:	83 ec 08             	sub    esp,0x8
c001185f:	6a 0f                	push   0xf
c0011861:	53                   	push   ebx
c0011862:	43                   	inc    ebx
c0011863:	e8 d6 fd ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011868:	59                   	pop    ecx
c0011869:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001186f:	58                   	pop    eax
c0011870:	75 ed                	jne    c001185f <Virt::virtualMemorySetup()+0x9>
c0011872:	83 ec 08             	sub    esp,0x8
c0011875:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001187a:	68 00 00 00 c8       	push   0xc8000000
c001187f:	68 36 b2 02 c0       	push   0xc002b236
c0011884:	e8 14 12 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0011889:	58                   	pop    eax
c001188a:	5a                   	pop    edx
c001188b:	68 00 f0 ff ef       	push   0xeffff000
c0011890:	68 4a b2 02 c0       	push   0xc002b24a
c0011895:	e8 03 12 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	83 ec 08             	sub    esp,0x8
c00118a0:	6a 00                	push   0x0
c00118a2:	53                   	push   ebx
c00118a3:	43                   	inc    ebx
c00118a4:	e8 95 fd ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118b2:	75 e9                	jne    c001189d <Virt::virtualMemorySetup()+0x47>
c00118b4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00118b9:	83 ec 08             	sub    esp,0x8
c00118bc:	6a 0f                	push   0xf
c00118be:	53                   	push   ebx
c00118bf:	43                   	inc    ebx
c00118c0:	e8 79 fd ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00118ce:	75 e9                	jne    c00118b9 <Virt::virtualMemorySetup()+0x63>
c00118d0:	83 c4 08             	add    esp,0x8
c00118d3:	5b                   	pop    ebx
c00118d4:	c3                   	ret    

c00118d5 <Virt::setupPageSwapping(int)>:
c00118d5:	57                   	push   edi
c00118d6:	56                   	push   esi
c00118d7:	53                   	push   ebx
c00118d8:	83 ec 1c             	sub    esp,0x1c
c00118db:	68 5e b2 02 c0       	push   0xc002b25e
c00118e0:	e8 b8 11 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00118e5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00118ec:	e8 9b df ff ff       	call   c000f88c <malloc>
c00118f1:	83 c4 0c             	add    esp,0xc
c00118f4:	89 c6                	mov    esi,eax
c00118f6:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c00118fc:	68 72 b2 02 c0       	push   0xc002b272
c0011901:	50                   	push   eax
c0011902:	e8 f5 16 00 00       	call   c0012ffc <File::File(char const*, Process*)>
c0011907:	89 34 24             	mov    DWORD PTR [esp],esi
c001190a:	e8 c9 18 00 00       	call   c00131d8 <File::unlink()>
c001190f:	59                   	pop    ecx
c0011910:	5b                   	pop    ebx
c0011911:	6a 12                	push   0x12
c0011913:	56                   	push   esi
c0011914:	e8 47 17 00 00       	call   c0013060 <File::open(FileOpenMode)>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	85 c0                	test   eax,eax
c001191e:	0f 85 5b 01 00 00    	jne    c0011a7f <Virt::setupPageSwapping(int)+0x1aa>
c0011924:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011928:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011930:	c1 e3 08             	shl    ebx,0x8
c0011933:	83 ec 0c             	sub    esp,0xc
c0011936:	68 00 00 01 00       	push   0x10000
c001193b:	e8 4c df ff ff       	call   c000f88c <malloc>
c0011940:	83 c4 0c             	add    esp,0xc
c0011943:	89 c7                	mov    edi,eax
c0011945:	68 00 00 01 00       	push   0x10000
c001194a:	68 ee 00 00 00       	push   0xee
c001194f:	50                   	push   eax
c0011950:	e8 fb ed fe ff       	call   c0000750 <memset>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	85 db                	test   ebx,ebx
c001195a:	79 03                	jns    c001195f <Virt::setupPageSwapping(int)+0x8a>
c001195c:	83 c3 0f             	add    ebx,0xf
c001195f:	c1 fb 04             	sar    ebx,0x4
c0011962:	4b                   	dec    ebx
c0011963:	83 fb ff             	cmp    ebx,0xffffffff
c0011966:	74 4f                	je     c00119b7 <Virt::setupPageSwapping(int)+0xe2>
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	8b 06                	mov    eax,DWORD PTR [esi]
c001196d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011971:	52                   	push   edx
c0011972:	57                   	push   edi
c0011973:	6a 00                	push   0x0
c0011975:	68 00 00 01 00       	push   0x10000
c001197a:	56                   	push   esi
c001197b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001197e:	83 c4 20             	add    esp,0x20
c0011981:	85 c0                	test   eax,eax
c0011983:	0f 85 e0 00 00 00    	jne    c0011a69 <Virt::setupPageSwapping(int)+0x194>
c0011989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001198d:	3d 00 00 01 00       	cmp    eax,0x10000
c0011992:	74 ce                	je     c0011962 <Virt::setupPageSwapping(int)+0x8d>
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	4b                   	dec    ebx
c0011998:	50                   	push   eax
c0011999:	68 c5 b2 02 c0       	push   0xc002b2c5
c001199e:	e8 fa 10 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00119a3:	c7 04 24 ce b2 02 c0 	mov    DWORD PTR [esp],0xc002b2ce
c00119aa:	e8 24 8b 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00119af:	83 c4 10             	add    esp,0x10
c00119b2:	83 fb ff             	cmp    ebx,0xffffffff
c00119b5:	75 b1                	jne    c0011968 <Virt::setupPageSwapping(int)+0x93>
c00119b7:	83 ec 0c             	sub    esp,0xc
c00119ba:	56                   	push   esi
c00119bb:	e8 fe 16 00 00       	call   c00130be <File::close()>
c00119c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119c3:	e8 e4 de ff ff       	call   c000f8ac <rfree>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	85 f6                	test   esi,esi
c00119cd:	74 0c                	je     c00119db <Virt::setupPageSwapping(int)+0x106>
c00119cf:	83 ec 0c             	sub    esp,0xc
c00119d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00119d4:	56                   	push   esi
c00119d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	83 ec 08             	sub    esp,0x8
c00119de:	a1 e8 f6 02 c0       	mov    eax,ds:0xc002f6e8
c00119e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00119e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00119eb:	68 72 b2 02 c0       	push   0xc002b272
c00119f0:	50                   	push   eax
c00119f1:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00119f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00119f8:	c6 05 98 e0 02 c0 43 	mov    BYTE PTR ds:0xc002e098,0x43
c00119ff:	c1 e2 0b             	shl    edx,0xb
c0011a02:	a3 94 e0 02 c0       	mov    ds:0xc002e094,eax
c0011a07:	89 15 90 e0 02 c0    	mov    DWORD PTR ds:0xc002e090,edx
c0011a0d:	c7 05 8c e0 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e08c,0x8
c0011a17:	c1 ea 08             	shr    edx,0x8
c0011a1a:	89 14 24             	mov    DWORD PTR [esp],edx
c0011a1d:	e8 6a de ff ff       	call   c000f88c <malloc>
c0011a22:	83 c4 0c             	add    esp,0xc
c0011a25:	89 c1                	mov    ecx,eax
c0011a27:	a3 4c f2 02 c0       	mov    ds:0xc002f24c,eax
c0011a2c:	31 d2                	xor    edx,edx
c0011a2e:	a1 90 e0 02 c0       	mov    eax,ds:0xc002e090
c0011a33:	f7 35 8c e0 02 c0    	div    DWORD PTR ds:0xc002e08c
c0011a39:	c1 e8 05             	shr    eax,0x5
c0011a3c:	50                   	push   eax
c0011a3d:	6a 00                	push   0x0
c0011a3f:	51                   	push   ecx
c0011a40:	e8 0b ed fe ff       	call   c0000750 <memset>
c0011a45:	58                   	pop    eax
c0011a46:	a1 90 e0 02 c0       	mov    eax,ds:0xc002e090
c0011a4b:	5a                   	pop    edx
c0011a4c:	31 d2                	xor    edx,edx
c0011a4e:	f7 35 8c e0 02 c0    	div    DWORD PTR ds:0xc002e08c
c0011a54:	c1 e8 05             	shr    eax,0x5
c0011a57:	50                   	push   eax
c0011a58:	68 d4 b2 02 c0       	push   0xc002b2d4
c0011a5d:	e8 3b 10 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0011a62:	83 c4 20             	add    esp,0x20
c0011a65:	5b                   	pop    ebx
c0011a66:	5e                   	pop    esi
c0011a67:	5f                   	pop    edi
c0011a68:	c3                   	ret    
c0011a69:	83 ec 08             	sub    esp,0x8
c0011a6c:	50                   	push   eax
c0011a6d:	68 ad b2 02 c0       	push   0xc002b2ad
c0011a72:	e8 26 10 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0011a77:	83 c4 10             	add    esp,0x10
c0011a7a:	e9 0a ff ff ff       	jmp    c0011989 <Virt::setupPageSwapping(int)+0xb4>
c0011a7f:	83 ec 08             	sub    esp,0x8
c0011a82:	50                   	push   eax
c0011a83:	68 89 b2 02 c0       	push   0xc002b289
c0011a88:	e8 10 10 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0011a8d:	c7 04 24 92 b2 02 c0 	mov    DWORD PTR [esp],0xc002b292
c0011a94:	e8 3a 8a 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	e9 83 fe ff ff       	jmp    c0011924 <Virt::setupPageSwapping(int)+0x4f>
c0011aa1:	90                   	nop

c0011aa2 <VAS::VAS()>:
c0011aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ab1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011abc:	a3 50 f2 02 c0       	mov    ds:0xc002f250,eax
c0011ac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ac5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011acd:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ad4:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011adb:	90                   	nop
c0011adc:	c3                   	ret    
c0011add:	90                   	nop

c0011ade <VAS::VAS(VAS*)>:
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ae5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011af7:	83 ec 0c             	sub    esp,0xc
c0011afa:	68 b8 b0 02 c0       	push   0xc002b0b8
c0011aff:	e8 cf 89 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	90                   	nop
c0011b08:	83 c4 0c             	add    esp,0xc
c0011b0b:	c3                   	ret    

c0011b0c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011b0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b10:	89 c2                	mov    edx,eax
c0011b12:	c1 e8 0a             	shr    eax,0xa
c0011b15:	c1 ea 16             	shr    edx,0x16
c0011b18:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b1d:	19 c9                	sbb    ecx,ecx
c0011b1f:	c1 e2 0c             	shl    edx,0xc
c0011b22:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011b28:	25 fc 0f 00 00       	and    eax,0xffc
c0011b2d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011b34:	01 d0                	add    eax,edx
c0011b36:	c3                   	ret    
c0011b37:	90                   	nop

c0011b38 <VAS::getPageTableEntry(unsigned long)>:
c0011b38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b3c:	89 ca                	mov    edx,ecx
c0011b3e:	c1 e9 0a             	shr    ecx,0xa
c0011b41:	c1 ea 16             	shr    edx,0x16
c0011b44:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011b4a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011b50:	c1 e0 0c             	shl    eax,0xc
c0011b53:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011b56:	c3                   	ret    

c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011b57:	57                   	push   edi
c0011b58:	56                   	push   esi
c0011b59:	be 01 00 00 00       	mov    esi,0x1
c0011b5e:	53                   	push   ebx
c0011b5f:	83 ec 10             	sub    esp,0x10
c0011b62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b66:	c1 eb 0c             	shr    ebx,0xc
c0011b69:	eb 3f                	jmp    c0011baa <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011b6b:	83 ec 08             	sub    esp,0x8
c0011b6e:	57                   	push   edi
c0011b6f:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0011b75:	e8 be ff ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b83:	f6 c4 04             	test   ah,0x4
c0011b86:	75 5f                	jne    c0011be7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b88:	80 fa 04             	cmp    dl,0x4
c0011b8b:	74 78                	je     c0011c05 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b8d:	80 fa 02             	cmp    dl,0x2
c0011b90:	0f 84 88 00 00 00    	je     c0011c1e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b96:	80 fa 03             	cmp    dl,0x3
c0011b99:	0f 84 ad 00 00 00    	je     c0011c4c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b9f:	fe ca                	dec    dl
c0011ba1:	0f 84 92 00 00 00    	je     c0011c39 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ba7:	43                   	inc    ebx
c0011ba8:	31 f6                	xor    esi,esi
c0011baa:	53                   	push   ebx
c0011bab:	89 df                	mov    edi,ebx
c0011bad:	e8 c1 fa ff ff       	call   c0011673 <Virt::getPageState(unsigned long)>
c0011bb2:	c1 e7 0c             	shl    edi,0xc
c0011bb5:	59                   	pop    ecx
c0011bb6:	84 c0                	test   al,al
c0011bb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011bbc:	75 ad                	jne    c0011b6b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011bbe:	83 ec 0c             	sub    esp,0xc
c0011bc1:	68 ef b2 02 c0       	push   0xc002b2ef
c0011bc6:	e8 08 89 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0011bcb:	58                   	pop    eax
c0011bcc:	5a                   	pop    edx
c0011bcd:	57                   	push   edi
c0011bce:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0011bd4:	e8 5f ff ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c0011bd9:	83 c4 10             	add    esp,0x10
c0011bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bde:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011be2:	f6 c4 04             	test   ah,0x4
c0011be5:	74 c0                	je     c0011ba7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011be7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011beb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bf0:	83 ec 0c             	sub    esp,0xc
c0011bf3:	50                   	push   eax
c0011bf4:	e8 e9 de ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c00:	80 fa 04             	cmp    dl,0x4
c0011c03:	75 88                	jne    c0011b8d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011c05:	89 f0                	mov    eax,esi
c0011c07:	84 c0                	test   al,al
c0011c09:	75 47                	jne    c0011c52 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011c0b:	c7 44 24 20 dc b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0dc
c0011c13:	83 c4 10             	add    esp,0x10
c0011c16:	5b                   	pop    ebx
c0011c17:	5e                   	pop    esi
c0011c18:	5f                   	pop    edi
c0011c19:	e9 b5 88 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>
c0011c1e:	89 f0                	mov    eax,esi
c0011c20:	84 c0                	test   al,al
c0011c22:	75 15                	jne    c0011c39 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c24:	83 ec 0c             	sub    esp,0xc
c0011c27:	68 0b b3 02 c0       	push   0xc002b30b
c0011c2c:	e8 a2 88 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0011c31:	83 c4 10             	add    esp,0x10
c0011c34:	e9 6e ff ff ff       	jmp    c0011ba7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c39:	83 ec 08             	sub    esp,0x8
c0011c3c:	6a 00                	push   0x0
c0011c3e:	53                   	push   ebx
c0011c3f:	e8 fa f9 ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c44:	83 c4 10             	add    esp,0x10
c0011c47:	e9 5b ff ff ff       	jmp    c0011ba7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c4c:	89 f0                	mov    eax,esi
c0011c4e:	84 c0                	test   al,al
c0011c50:	75 15                	jne    c0011c67 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011c52:	83 ec 08             	sub    esp,0x8
c0011c55:	6a 00                	push   0x0
c0011c57:	53                   	push   ebx
c0011c58:	e8 e1 f9 ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	5b                   	pop    ebx
c0011c64:	5e                   	pop    esi
c0011c65:	5f                   	pop    edi
c0011c66:	c3                   	ret    
c0011c67:	c7 44 24 20 27 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b327
c0011c6f:	83 c4 10             	add    esp,0x10
c0011c72:	5b                   	pop    ebx
c0011c73:	5e                   	pop    esi
c0011c74:	5f                   	pop    edi
c0011c75:	e9 59 88 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>

c0011c7a <VAS::freeAllocatedPages(unsigned long)>:
c0011c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c82:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c86:	74 09                	je     c0011c91 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c8c:	e9 c6 fe ff ff       	jmp    c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c91:	c7 44 24 04 00 b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b100
c0011c99:	e9 ff 0d 00 00       	jmp    c0012a9d <Dbg::kprintf(char const*, ...)>

c0011c9e <VAS::virtualToPhysical(unsigned long)>:
c0011c9e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ca2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ca6:	e8 8d fe ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c0011cab:	5a                   	pop    edx
c0011cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cae:	59                   	pop    ecx
c0011caf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cb4:	c3                   	ret    
c0011cb5:	90                   	nop

c0011cb6 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011cb6:	55                   	push   ebp
c0011cb7:	57                   	push   edi
c0011cb8:	56                   	push   esi
c0011cb9:	53                   	push   ebx
c0011cba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011cbe:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011cc2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011cc6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011cca:	85 db                	test   ebx,ebx
c0011ccc:	7e 22                	jle    c0011cf0 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011cce:	c1 e3 0c             	shl    ebx,0xc
c0011cd1:	01 f3                	add    ebx,esi
c0011cd3:	56                   	push   esi
c0011cd4:	81 c6 00 10 00 00    	add    esi,0x1000
c0011cda:	55                   	push   ebp
c0011cdb:	e8 58 fe ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c0011ce0:	5a                   	pop    edx
c0011ce1:	59                   	pop    ecx
c0011ce2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ce4:	21 f9                	and    ecx,edi
c0011ce6:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011cea:	39 f3                	cmp    ebx,esi
c0011cec:	89 08                	mov    DWORD PTR [eax],ecx
c0011cee:	75 e3                	jne    c0011cd3 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011cf0:	5b                   	pop    ebx
c0011cf1:	5e                   	pop    esi
c0011cf2:	5f                   	pop    edi
c0011cf3:	5d                   	pop    ebp
c0011cf4:	c3                   	ret    
c0011cf5:	90                   	nop

c0011cf6 <VAS::setToWriteCombining(unsigned long, int)>:
c0011cf6:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0011cfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d01:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011d08:	75 01                	jne    c0011d0b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011d0a:	c3                   	ret    
c0011d0b:	68 80 00 00 00       	push   0x80
c0011d10:	6a ff                	push   0xffffffff
c0011d12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d1e:	e8 93 ff ff ff       	call   c0011cb6 <VAS::reflagRange(unsigned long, int, int, int)>
c0011d23:	83 c4 14             	add    esp,0x14
c0011d26:	c3                   	ret    
c0011d27:	90                   	nop

c0011d28 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011d28:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011d2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d31:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d38:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011d3b:	19 c0                	sbb    eax,eax
c0011d3d:	83 ca 03             	or     edx,0x3
c0011d40:	83 e0 fc             	and    eax,0xfffffffc
c0011d43:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011d4a:	0f 20 d8             	mov    eax,cr3
c0011d4d:	0f 22 d8             	mov    cr3,eax
c0011d50:	c3                   	ret    
c0011d51:	90                   	nop

c0011d52 <VAS::~VAS()>:
c0011d52:	83 ec 2c             	sub    esp,0x2c
c0011d55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d5d:	fa                   	cli    
c0011d5e:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0011d63:	40                   	inc    eax
c0011d64:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0011d69:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d73:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d7d:	6a 01                	push   0x1
c0011d7f:	50                   	push   eax
c0011d80:	e8 a3 ff ff ff       	call   c0011d28 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d85:	83 c4 0c             	add    esp,0xc
c0011d88:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d90:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d98:	0f 8f d4 00 00 00    	jg     c0011e72 <VAS::~VAS()+0x120>
c0011d9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011da2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011da5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011da9:	c1 e2 02             	shl    edx,0x2
c0011dac:	01 d0                	add    eax,edx
c0011dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db8:	83 e0 01             	and    eax,0x1
c0011dbb:	0f 84 a8 00 00 00    	je     c0011e69 <VAS::~VAS()+0x117>
c0011dc1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011dc9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011dd1:	7f 72                	jg     c0011e45 <VAS::~VAS()+0xf3>
c0011dd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011dd7:	c1 e0 0a             	shl    eax,0xa
c0011dda:	89 c2                	mov    edx,eax
c0011ddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011de0:	01 d0                	add    eax,edx
c0011de2:	c1 e0 0c             	shl    eax,0xc
c0011de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011de9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011dee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011df3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011df9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011dfd:	6a 01                	push   0x1
c0011dff:	50                   	push   eax
c0011e00:	e8 07 fd ff ff       	call   c0011b0c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e05:	83 c4 0c             	add    esp,0xc
c0011e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1a:	25 01 04 00 00       	and    eax,0x401
c0011e1f:	3d 01 04 00 00       	cmp    eax,0x401
c0011e24:	75 19                	jne    c0011e3f <VAS::~VAS()+0xed>
c0011e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e2f:	83 ec 0c             	sub    esp,0xc
c0011e32:	50                   	push   eax
c0011e33:	e8 aa dc ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c0011e38:	83 c4 10             	add    esp,0x10
c0011e3b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e3f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011e43:	eb 84                	jmp    c0011dc9 <VAS::~VAS()+0x77>
c0011e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e49:	25 00 04 00 00       	and    eax,0x400
c0011e4e:	74 19                	je     c0011e69 <VAS::~VAS()+0x117>
c0011e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e54:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e59:	83 ec 0c             	sub    esp,0xc
c0011e5c:	50                   	push   eax
c0011e5d:	e8 80 dc ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e69:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e6d:	e9 1e ff ff ff       	jmp    c0011d90 <VAS::~VAS()+0x3e>
c0011e72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e79:	83 ec 0c             	sub    esp,0xc
c0011e7c:	50                   	push   eax
c0011e7d:	e8 d5 fc ff ff       	call   c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e8c:	83 ec 0c             	sub    esp,0xc
c0011e8f:	50                   	push   eax
c0011e90:	e8 4d dc ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c0011e95:	83 c4 10             	add    esp,0x10
c0011e98:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ea0:	c1 e0 02             	shl    eax,0x2
c0011ea3:	83 ec 08             	sub    esp,0x8
c0011ea6:	50                   	push   eax
c0011ea7:	68 24 b1 02 c0       	push   0xc002b124
c0011eac:	e8 ec 0b 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0011eb9:	48                   	dec    eax
c0011eba:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0011ebf:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0011ec4:	85 c0                	test   eax,eax
c0011ec6:	75 01                	jne    c0011ec9 <VAS::~VAS()+0x177>
c0011ec8:	fb                   	sti    
c0011ec9:	90                   	nop
c0011eca:	83 c4 2c             	add    esp,0x2c
c0011ecd:	c3                   	ret    

c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011ece:	55                   	push   ebp
c0011ecf:	57                   	push   edi
c0011ed0:	56                   	push   esi
c0011ed1:	53                   	push   ebx
c0011ed2:	83 ec 1c             	sub    esp,0x1c
c0011ed5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011ed9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011edd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011ee3:	77 08                	ja     c0011eed <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011ee5:	0f 20 d8             	mov    eax,cr3
c0011ee8:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011eeb:	75 47                	jne    c0011f34 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011eed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ef1:	09 d8                	or     eax,ebx
c0011ef3:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ef8:	75 57                	jne    c0011f51 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011efa:	89 de                	mov    esi,ebx
c0011efc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011eff:	c1 ee 16             	shr    esi,0x16
c0011f02:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011f09:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011f0d:	74 54                	je     c0011f63 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011f0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f13:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011f19:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011f1d:	c1 e6 0c             	shl    esi,0xc
c0011f20:	c1 eb 0a             	shr    ebx,0xa
c0011f23:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011f29:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011f2c:	83 c4 1c             	add    esp,0x1c
c0011f2f:	5b                   	pop    ebx
c0011f30:	5e                   	pop    esi
c0011f31:	5f                   	pop    edi
c0011f32:	5d                   	pop    ebp
c0011f33:	c3                   	ret    
c0011f34:	83 ec 0c             	sub    esp,0xc
c0011f37:	68 44 b1 02 c0       	push   0xc002b144
c0011f3c:	e8 5c 0b 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f48:	09 d8                	or     eax,ebx
c0011f4a:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f4f:	74 a9                	je     c0011efa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011f51:	83 ec 0c             	sub    esp,0xc
c0011f54:	68 ac b1 02 c0       	push   0xc002b1ac
c0011f59:	e8 75 85 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0011f5e:	83 c4 10             	add    esp,0x10
c0011f61:	eb 97                	jmp    c0011efa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f67:	e8 00 dc ff ff       	call   c000fb6c <Phys::allocatePage()>
c0011f6c:	83 ec 0c             	sub    esp,0xc
c0011f6f:	89 c5                	mov    ebp,eax
c0011f71:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0011f77:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011f7b:	6a 01                	push   0x1
c0011f7d:	e8 15 f7 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0011f82:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f89:	6a 01                	push   0x1
c0011f8b:	50                   	push   eax
c0011f8c:	55                   	push   ebp
c0011f8d:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f97:	51                   	push   ecx
c0011f98:	e8 27 02 00 00       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f9d:	83 c4 1c             	add    esp,0x1c
c0011fa0:	68 00 10 00 00       	push   0x1000
c0011fa5:	6a 00                	push   0x0
c0011fa7:	50                   	push   eax
c0011fa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fac:	e8 9f e7 fe ff       	call   c0000750 <memset>
c0011fb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011fb5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011fb8:	e8 9a fb ff ff       	call   c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011fc1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011fc4:	83 c4 10             	add    esp,0x10
c0011fc7:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011fca:	e9 40 ff ff ff       	jmp    c0011f0f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011fcf:	90                   	nop

c0011fd0 <VAS::allocatePages(int, int)>:
c0011fd0:	55                   	push   ebp
c0011fd1:	57                   	push   edi
c0011fd2:	56                   	push   esi
c0011fd3:	53                   	push   ebx
c0011fd4:	83 ec 1c             	sub    esp,0x1c
c0011fd7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fdb:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0011fe0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fe6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011fec:	83 e0 01             	and    eax,0x1
c0011fef:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ff3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ff7:	0f 85 cc 00 00 00    	jne    c00120c9 <VAS::allocatePages(int, int)+0xf9>
c0011ffd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012000:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012004:	85 c0                	test   eax,eax
c0012006:	0f 84 a1 00 00 00    	je     c00120ad <VAS::allocatePages(int, int)+0xdd>
c001200c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012010:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012014:	c1 e6 0c             	shl    esi,0xc
c0012017:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001201b:	85 c0                	test   eax,eax
c001201d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012020:	7e 33                	jle    c0012055 <VAS::allocatePages(int, int)+0x85>
c0012022:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012026:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001202a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012030:	e8 37 db ff ff       	call   c000fb6c <Phys::allocatePage()>
c0012035:	55                   	push   ebp
c0012036:	53                   	push   ebx
c0012037:	50                   	push   eax
c0012038:	57                   	push   edi
c0012039:	e8 90 fe ff ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012046:	74 03                	je     c001204b <VAS::allocatePages(int, int)+0x7b>
c0012048:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001204b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012051:	39 de                	cmp    esi,ebx
c0012053:	75 db                	jne    c0012030 <VAS::allocatePages(int, int)+0x60>
c0012055:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001205a:	75 12                	jne    c001206e <VAS::allocatePages(int, int)+0x9e>
c001205c:	0f 20 d8             	mov    eax,cr3
c001205f:	0f 22 d8             	mov    cr3,eax
c0012062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012066:	83 c4 1c             	add    esp,0x1c
c0012069:	5b                   	pop    ebx
c001206a:	5e                   	pop    esi
c001206b:	5f                   	pop    edi
c001206c:	5d                   	pop    ebp
c001206d:	c3                   	ret    
c001206e:	c1 ee 0a             	shr    esi,0xa
c0012071:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012075:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001207b:	c1 eb 0a             	shr    ebx,0xa
c001207e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012084:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001208a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012090:	39 c3                	cmp    ebx,eax
c0012092:	77 ce                	ja     c0012062 <VAS::allocatePages(int, int)+0x92>
c0012094:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012097:	81 c3 00 10 00 00    	add    ebx,0x1000
c001209d:	39 d8                	cmp    eax,ebx
c001209f:	73 f3                	jae    c0012094 <VAS::allocatePages(int, int)+0xc4>
c00120a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120a5:	83 c4 1c             	add    esp,0x1c
c00120a8:	5b                   	pop    ebx
c00120a9:	5e                   	pop    esi
c00120aa:	5f                   	pop    edi
c00120ab:	5d                   	pop    ebp
c00120ac:	c3                   	ret    
c00120ad:	83 ec 0c             	sub    esp,0xc
c00120b0:	68 d0 b1 02 c0       	push   0xc002b1d0
c00120b5:	e8 19 84 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00120ba:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	e9 43 ff ff ff       	jmp    c001200c <VAS::allocatePages(int, int)+0x3c>
c00120c9:	83 ec 0c             	sub    esp,0xc
c00120cc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00120d0:	e8 c2 f5 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c00120d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120d9:	83 c4 10             	add    esp,0x10
c00120dc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00120e1:	0f 87 9b 00 00 00    	ja     c0012182 <VAS::allocatePages(int, int)+0x1b2>
c00120e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120eb:	85 d2                	test   edx,edx
c00120ed:	7e 3c                	jle    c001212b <VAS::allocatePages(int, int)+0x15b>
c00120ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00120f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120fb:	c1 e5 0c             	shl    ebp,0xc
c00120fe:	81 ce 00 04 00 00    	or     esi,0x400
c0012104:	01 dd                	add    ebp,ebx
c0012106:	e8 61 da ff ff       	call   c000fb6c <Phys::allocatePage()>
c001210b:	56                   	push   esi
c001210c:	53                   	push   ebx
c001210d:	50                   	push   eax
c001210e:	57                   	push   edi
c001210f:	e8 ba fd ff ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001211c:	74 03                	je     c0012121 <VAS::allocatePages(int, int)+0x151>
c001211e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012121:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012127:	39 dd                	cmp    ebp,ebx
c0012129:	75 db                	jne    c0012106 <VAS::allocatePages(int, int)+0x136>
c001212b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012130:	0f 84 26 ff ff ff    	je     c001205c <VAS::allocatePages(int, int)+0x8c>
c0012136:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001213a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001213e:	89 d3                	mov    ebx,edx
c0012140:	c1 e0 0c             	shl    eax,0xc
c0012143:	c1 eb 0a             	shr    ebx,0xa
c0012146:	01 d0                	add    eax,edx
c0012148:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001214e:	c1 e8 0a             	shr    eax,0xa
c0012151:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012157:	25 00 f0 ff ff       	and    eax,0xfffff000
c001215c:	2d 00 00 40 00       	sub    eax,0x400000
c0012161:	39 c3                	cmp    ebx,eax
c0012163:	0f 87 f9 fe ff ff    	ja     c0012062 <VAS::allocatePages(int, int)+0x92>
c0012169:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001216c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012172:	39 d8                	cmp    eax,ebx
c0012174:	73 f3                	jae    c0012169 <VAS::allocatePages(int, int)+0x199>
c0012176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001217a:	83 c4 1c             	add    esp,0x1c
c001217d:	5b                   	pop    ebx
c001217e:	5e                   	pop    esi
c001217f:	5f                   	pop    edi
c0012180:	5d                   	pop    ebp
c0012181:	c3                   	ret    
c0012182:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0012187:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001218d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012194:	0f 84 4d ff ff ff    	je     c00120e7 <VAS::allocatePages(int, int)+0x117>
c001219a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00121a2:	e9 40 ff ff ff       	jmp    c00120e7 <VAS::allocatePages(int, int)+0x117>
c00121a7:	90                   	nop

c00121a8 <VAS::setCPUSpecific(unsigned long)>:
c00121a8:	83 ec 0c             	sub    esp,0xc
c00121ab:	6a 05                	push   0x5
c00121ad:	68 00 00 40 c2       	push   0xc2400000
c00121b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121ba:	e8 0f fd ff ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c00121bf:	83 c4 1c             	add    esp,0x1c
c00121c2:	c3                   	ret    
c00121c3:	90                   	nop

c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00121c4:	55                   	push   ebp
c00121c5:	57                   	push   edi
c00121c6:	56                   	push   esi
c00121c7:	53                   	push   ebx
c00121c8:	83 ec 1c             	sub    esp,0x1c
c00121cb:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00121d0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121da:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121de:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00121e4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00121e8:	83 e0 01             	and    eax,0x1
c00121eb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00121ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121f3:	85 c0                	test   eax,eax
c00121f5:	7e 39                	jle    c0012230 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00121f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121fb:	89 f3                	mov    ebx,esi
c00121fd:	c1 e0 0c             	shl    eax,0xc
c0012200:	01 f0                	add    eax,esi
c0012202:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012206:	55                   	push   ebp
c0012207:	53                   	push   ebx
c0012208:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001220c:	29 f0                	sub    eax,esi
c001220e:	01 d8                	add    eax,ebx
c0012210:	50                   	push   eax
c0012211:	57                   	push   edi
c0012212:	e8 b7 fc ff ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c0012217:	83 c4 10             	add    esp,0x10
c001221a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001221f:	74 03                	je     c0012224 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012221:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012224:	81 c3 00 10 00 00    	add    ebx,0x1000
c001222a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001222e:	75 d6                	jne    c0012206 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012230:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012235:	75 10                	jne    c0012247 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012237:	0f 20 d8             	mov    eax,cr3
c001223a:	0f 22 d8             	mov    cr3,eax
c001223d:	83 c4 1c             	add    esp,0x1c
c0012240:	89 f0                	mov    eax,esi
c0012242:	5b                   	pop    ebx
c0012243:	5e                   	pop    esi
c0012244:	5f                   	pop    edi
c0012245:	5d                   	pop    ebp
c0012246:	c3                   	ret    
c0012247:	89 f3                	mov    ebx,esi
c0012249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001224d:	c1 eb 0a             	shr    ebx,0xa
c0012250:	c1 e0 0c             	shl    eax,0xc
c0012253:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012259:	01 f0                	add    eax,esi
c001225b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012261:	c1 e8 0a             	shr    eax,0xa
c0012264:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012269:	2d 00 00 40 00       	sub    eax,0x400000
c001226e:	39 c3                	cmp    ebx,eax
c0012270:	77 cb                	ja     c001223d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012272:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012275:	81 c3 00 10 00 00    	add    ebx,0x1000
c001227b:	39 d8                	cmp    eax,ebx
c001227d:	73 f3                	jae    c0012272 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001227f:	83 c4 1c             	add    esp,0x1c
c0012282:	89 f0                	mov    eax,esi
c0012284:	5b                   	pop    ebx
c0012285:	5e                   	pop    esi
c0012286:	5f                   	pop    edi
c0012287:	5d                   	pop    ebp
c0012288:	c3                   	ret    
c0012289:	90                   	nop

c001228a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001228a:	55                   	push   ebp
c001228b:	57                   	push   edi
c001228c:	56                   	push   esi
c001228d:	53                   	push   ebx
c001228e:	83 ec 1c             	sub    esp,0x1c
c0012291:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012295:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012299:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001229d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00122a1:	a9 ff 0f 00 00       	test   eax,0xfff
c00122a6:	75 4a                	jne    c00122f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00122a8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00122ac:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122af:	c1 eb 16             	shr    ebx,0x16
c00122b2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00122b9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00122bd:	74 4d                	je     c001230c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00122bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00122c3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00122c7:	c1 e8 0a             	shr    eax,0xa
c00122ca:	80 fa 01             	cmp    dl,0x1
c00122cd:	19 d2                	sbb    edx,edx
c00122cf:	c1 e3 0c             	shl    ebx,0xc
c00122d2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00122d6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00122dc:	25 fc 0f 00 00       	and    eax,0xffc
c00122e1:	01 d8                	add    eax,ebx
c00122e3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00122ea:	83 c4 1c             	add    esp,0x1c
c00122ed:	5b                   	pop    ebx
c00122ee:	5e                   	pop    esi
c00122ef:	5f                   	pop    edi
c00122f0:	5d                   	pop    ebp
c00122f1:	c3                   	ret    
c00122f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00122f6:	83 ec 0c             	sub    esp,0xc
c00122f9:	68 fc b1 02 c0       	push   0xc002b1fc
c00122fe:	e8 d0 81 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001230a:	eb 9c                	jmp    c00122a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001230c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012310:	e8 57 d8 ff ff       	call   c000fb6c <Phys::allocatePage()>
c0012315:	83 ec 0c             	sub    esp,0xc
c0012318:	89 c5                	mov    ebp,eax
c001231a:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0012320:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012324:	6a 01                	push   0x1
c0012326:	e8 6c f3 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c001232b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012332:	6a 01                	push   0x1
c0012334:	50                   	push   eax
c0012335:	55                   	push   ebp
c0012336:	81 cd 07 04 00 00    	or     ebp,0x407
c001233c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012340:	51                   	push   ecx
c0012341:	e8 7e fe ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012346:	83 c4 1c             	add    esp,0x1c
c0012349:	68 00 10 00 00       	push   0x1000
c001234e:	6a 00                	push   0x0
c0012350:	50                   	push   eax
c0012351:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012355:	e8 f6 e3 fe ff       	call   c0000750 <memset>
c001235a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001235e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012361:	e8 f1 f7 ff ff       	call   c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>
c0012366:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012369:	83 c4 10             	add    esp,0x10
c001236c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001236f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012373:	e9 47 ff ff ff       	jmp    c00122bf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012378 <VAS::VAS(bool)>:
c0012378:	53                   	push   ebx
c0012379:	83 ec 28             	sub    esp,0x28
c001237c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012380:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012388:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001238f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012393:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001239a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001239e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00123a2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00123a5:	e8 c2 d7 ff ff       	call   c000fb6c <Phys::allocatePage()>
c00123aa:	89 c2                	mov    edx,eax
c00123ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00123b3:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c00123b9:	83 ec 0c             	sub    esp,0xc
c00123bc:	6a 01                	push   0x1
c00123be:	e8 d4 f2 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	89 c2                	mov    edx,eax
c00123c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00123cf:	83 ec 0c             	sub    esp,0xc
c00123d2:	6a 03                	push   0x3
c00123d4:	6a 01                	push   0x1
c00123d6:	52                   	push   edx
c00123d7:	50                   	push   eax
c00123d8:	53                   	push   ebx
c00123d9:	e8 e6 fd ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123de:	83 c4 20             	add    esp,0x20
c00123e1:	89 c2                	mov    edx,eax
c00123e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00123ea:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00123f2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00123fa:	7f 1c                	jg     c0012418 <VAS::VAS(bool)+0xa0>
c00123fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012400:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012403:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012407:	c1 e2 02             	shl    edx,0x2
c001240a:	01 d0                	add    eax,edx
c001240c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012412:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012416:	eb da                	jmp    c00123f2 <VAS::VAS(bool)+0x7a>
c0012418:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012420:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012428:	7f 7a                	jg     c00124a4 <VAS::VAS(bool)+0x12c>
c001242a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001242e:	2d 00 02 00 00       	sub    eax,0x200
c0012433:	c1 e0 0c             	shl    eax,0xc
c0012436:	83 c8 03             	or     eax,0x3
c0012439:	89 c2                	mov    edx,eax
c001243b:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0012440:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012446:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001244c:	83 e0 10             	and    eax,0x10
c001244f:	84 c0                	test   al,al
c0012451:	74 07                	je     c001245a <VAS::VAS(bool)+0xe2>
c0012453:	b8 00 01 00 00       	mov    eax,0x100
c0012458:	eb 05                	jmp    c001245f <VAS::VAS(bool)+0xe7>
c001245a:	b8 00 00 00 00       	mov    eax,0x0
c001245f:	09 d0                	or     eax,edx
c0012461:	89 c1                	mov    ecx,eax
c0012463:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012467:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001246a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001246e:	c1 e2 02             	shl    edx,0x2
c0012471:	01 d0                	add    eax,edx
c0012473:	89 ca                	mov    edx,ecx
c0012475:	89 10                	mov    DWORD PTR [eax],edx
c0012477:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001247b:	2d 40 03 00 00       	sub    eax,0x340
c0012480:	83 f8 7f             	cmp    eax,0x7f
c0012483:	77 16                	ja     c001249b <VAS::VAS(bool)+0x123>
c0012485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012489:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001248c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012490:	c1 e2 02             	shl    edx,0x2
c0012493:	01 d0                	add    eax,edx
c0012495:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001249b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001249f:	e9 7c ff ff ff       	jmp    c0012420 <VAS::VAS(bool)+0xa8>
c00124a4:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00124a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124af:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00124b5:	83 e0 10             	and    eax,0x10
c00124b8:	84 c0                	test   al,al
c00124ba:	74 07                	je     c00124c3 <VAS::VAS(bool)+0x14b>
c00124bc:	b8 03 41 00 00       	mov    eax,0x4103
c00124c1:	eb 05                	jmp    c00124c8 <VAS::VAS(bool)+0x150>
c00124c3:	b8 03 40 00 00       	mov    eax,0x4003
c00124c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00124cc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00124cf:	81 c2 20 0c 00 00    	add    edx,0xc20
c00124d5:	89 02                	mov    DWORD PTR [edx],eax
c00124d7:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00124dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124e2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00124e8:	83 ec 08             	sub    esp,0x8
c00124eb:	50                   	push   eax
c00124ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124f0:	e8 b3 fc ff ff       	call   c00121a8 <VAS::setCPUSpecific(unsigned long)>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00124ff:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0012504:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001250a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012510:	83 e0 10             	and    eax,0x10
c0012513:	84 c0                	test   al,al
c0012515:	74 07                	je     c001251e <VAS::VAS(bool)+0x1a6>
c0012517:	b8 00 01 00 00       	mov    eax,0x100
c001251c:	eb 05                	jmp    c0012523 <VAS::VAS(bool)+0x1ab>
c001251e:	b8 00 00 00 00       	mov    eax,0x0
c0012523:	09 c2                	or     edx,eax
c0012525:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012529:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001252c:	05 fc 0f 00 00       	add    eax,0xffc
c0012531:	83 ca 03             	or     edx,0x3
c0012534:	89 10                	mov    DWORD PTR [eax],edx
c0012536:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001253b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012541:	83 ec 0c             	sub    esp,0xc
c0012544:	50                   	push   eax
c0012545:	e8 8c 1c 00 00       	call   c00141d6 <Device::getName()>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	83 ec 08             	sub    esp,0x8
c0012550:	68 41 b3 02 c0       	push   0xc002b341
c0012555:	50                   	push   eax
c0012556:	e8 3d e3 fe ff       	call   c0000898 <strcmp>
c001255b:	83 c4 10             	add    esp,0x10
c001255e:	85 c0                	test   eax,eax
c0012560:	0f 94 c0             	sete   al
c0012563:	84 c0                	test   al,al
c0012565:	0f 84 87 00 00 00    	je     c00125f2 <VAS::VAS(bool)+0x27a>
c001256b:	fa                   	cli    
c001256c:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0012571:	40                   	inc    eax
c0012572:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0012577:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001257c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012582:	05 7c 09 00 00       	add    eax,0x97c
c0012587:	83 ec 0c             	sub    esp,0xc
c001258a:	50                   	push   eax
c001258b:	e8 7e cd ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012590:	83 c4 10             	add    esp,0x10
c0012593:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012598:	89 c3                	mov    ebx,eax
c001259a:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001259f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125a5:	05 7c 09 00 00       	add    eax,0x97c
c00125aa:	83 ec 0c             	sub    esp,0xc
c00125ad:	50                   	push   eax
c00125ae:	e8 5b cd ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	83 ec 08             	sub    esp,0x8
c00125b9:	50                   	push   eax
c00125ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125be:	e8 75 f5 ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125cd:	6a 11                	push   0x11
c00125cf:	53                   	push   ebx
c00125d0:	50                   	push   eax
c00125d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125d5:	e8 f4 f8 ff ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c00125e2:	48                   	dec    eax
c00125e3:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c00125e8:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c00125ed:	85 c0                	test   eax,eax
c00125ef:	75 01                	jne    c00125f2 <VAS::VAS(bool)+0x27a>
c00125f1:	fb                   	sti    
c00125f2:	90                   	nop
c00125f3:	83 c4 28             	add    esp,0x28
c00125f6:	5b                   	pop    ebx
c00125f7:	c3                   	ret    

c00125f8 <VAS::evict(unsigned long)>:
c00125f8:	55                   	push   ebp
c00125f9:	57                   	push   edi
c00125fa:	56                   	push   esi
c00125fb:	53                   	push   ebx
c00125fc:	83 ec 1c             	sub    esp,0x1c
c00125ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012603:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001260b:	e8 c8 f1 ff ff       	call   c00117d8 <Virt::allocateSwapfilePage()>
c0012610:	89 c7                	mov    edi,eax
c0012612:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c0012617:	85 c0                	test   eax,eax
c0012619:	7e 3d                	jle    c0012658 <VAS::evict(unsigned long)+0x60>
c001261b:	89 ee                	mov    esi,ebp
c001261d:	31 db                	xor    ebx,ebx
c001261f:	83 ec 0c             	sub    esp,0xc
c0012622:	57                   	push   edi
c0012623:	e8 9e f1 ff ff       	call   c00117c6 <Virt::swapIDToSector(unsigned long)>
c0012628:	89 34 24             	mov    DWORD PTR [esp],esi
c001262b:	01 d8                	add    eax,ebx
c001262d:	6a 01                	push   0x1
c001262f:	31 d2                	xor    edx,edx
c0012631:	43                   	inc    ebx
c0012632:	52                   	push   edx
c0012633:	81 c6 00 02 00 00    	add    esi,0x200
c0012639:	50                   	push   eax
c001263a:	0f be 05 98 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e098
c0012641:	ff 34 85 dc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a24]
c0012648:	e8 39 3e 00 00       	call   c0016486 <LogicalDisk::write(unsigned long long, int, void*)>
c001264d:	83 c4 20             	add    esp,0x20
c0012650:	39 1d 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,ebx
c0012656:	7f c7                	jg     c001261f <VAS::evict(unsigned long)+0x27>
c0012658:	83 ec 08             	sub    esp,0x8
c001265b:	c1 e7 0b             	shl    edi,0xb
c001265e:	55                   	push   ebp
c001265f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012663:	e8 d0 f4 ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c0012668:	83 c4 0c             	add    esp,0xc
c001266b:	8b 10                	mov    edx,DWORD PTR [eax]
c001266d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012673:	09 d7                	or     edi,edx
c0012675:	89 38                	mov    DWORD PTR [eax],edi
c0012677:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001267c:	40                   	inc    eax
c001267d:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c0012682:	0f 20 da             	mov    edx,cr3
c0012685:	0f 22 da             	mov    cr3,edx
c0012688:	50                   	push   eax
c0012689:	55                   	push   ebp
c001268a:	68 4f b3 02 c0       	push   0xc002b34f
c001268f:	e8 09 04 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0012694:	a1 44 f2 02 c0       	mov    eax,ds:0xc002f244
c0012699:	c7 44 24 40 64 b3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b364
c00126a1:	8d 50 01             	lea    edx,[eax+0x1]
c00126a4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00126a8:	89 15 44 f2 02 c0    	mov    DWORD PTR ds:0xc002f244,edx
c00126ae:	83 c4 2c             	add    esp,0x2c
c00126b1:	5b                   	pop    ebx
c00126b2:	5e                   	pop    esi
c00126b3:	5f                   	pop    edi
c00126b4:	5d                   	pop    ebp
c00126b5:	e9 e3 03 00 00       	jmp    c0012a9d <Dbg::kprintf(char const*, ...)>

c00126ba <VAS::tryLoadBackOffDisk(unsigned long)>:
c00126ba:	55                   	push   ebp
c00126bb:	57                   	push   edi
c00126bc:	56                   	push   esi
c00126bd:	53                   	push   ebx
c00126be:	83 ec 0c             	sub    esp,0xc
c00126c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00126c5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00126cb:	0f 84 dc 00 00 00    	je     c00127ad <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00126d1:	56                   	push   esi
c00126d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126d6:	e8 5d f4 ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c00126db:	5b                   	pop    ebx
c00126dc:	85 c0                	test   eax,eax
c00126de:	5f                   	pop    edi
c00126df:	89 c3                	mov    ebx,eax
c00126e1:	0f 84 c6 00 00 00    	je     c00127ad <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00126e7:	8b 38                	mov    edi,DWORD PTR [eax]
c00126e9:	31 c0                	xor    eax,eax
c00126eb:	89 fa                	mov    edx,edi
c00126ed:	81 e2 01 04 00 00    	and    edx,0x401
c00126f3:	81 fa 00 04 00 00    	cmp    edx,0x400
c00126f9:	0f 85 b0 00 00 00    	jne    c00127af <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00126ff:	e8 68 d4 ff ff       	call   c000fb6c <Phys::allocatePage()>
c0012704:	c1 ef 0b             	shr    edi,0xb
c0012707:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012709:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001270f:	09 c2                	or     edx,eax
c0012711:	81 ca 01 08 00 00    	or     edx,0x801
c0012717:	89 13                	mov    DWORD PTR [ebx],edx
c0012719:	8b 0d 8c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e08c
c001271f:	85 c9                	test   ecx,ecx
c0012721:	7e 3d                	jle    c0012760 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012723:	89 f5                	mov    ebp,esi
c0012725:	31 db                	xor    ebx,ebx
c0012727:	83 ec 0c             	sub    esp,0xc
c001272a:	57                   	push   edi
c001272b:	e8 96 f0 ff ff       	call   c00117c6 <Virt::swapIDToSector(unsigned long)>
c0012730:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012733:	01 d8                	add    eax,ebx
c0012735:	6a 01                	push   0x1
c0012737:	31 d2                	xor    edx,edx
c0012739:	43                   	inc    ebx
c001273a:	52                   	push   edx
c001273b:	81 c5 00 02 00 00    	add    ebp,0x200
c0012741:	50                   	push   eax
c0012742:	0f be 05 98 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e098
c0012749:	ff 34 85 dc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a24]
c0012750:	e8 c5 3c 00 00       	call   c001641a <LogicalDisk::read(unsigned long long, int, void*)>
c0012755:	83 c4 20             	add    esp,0x20
c0012758:	39 1d 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,ebx
c001275e:	7f c7                	jg     c0012727 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012760:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0012765:	48                   	dec    eax
c0012766:	52                   	push   edx
c0012767:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c001276c:	50                   	push   eax
c001276d:	56                   	push   esi
c001276e:	68 75 b3 02 c0       	push   0xc002b375
c0012773:	e8 25 03 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0012778:	89 3c 24             	mov    DWORD PTR [esp],edi
c001277b:	e8 28 f0 ff ff       	call   c00117a8 <Virt::freeSwapfilePage(unsigned long)>
c0012780:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0012785:	83 c4 10             	add    esp,0x10
c0012788:	48                   	dec    eax
c0012789:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001278e:	85 c0                	test   eax,eax
c0012790:	75 01                	jne    c0012793 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012792:	fb                   	sti    
c0012793:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012797:	25 ff 0f 00 00       	and    eax,0xfff
c001279c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00127a1:	77 14                	ja     c00127b7 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00127a3:	0f 20 d8             	mov    eax,cr3
c00127a6:	0f 22 d8             	mov    cr3,eax
c00127a9:	b0 01                	mov    al,0x1
c00127ab:	eb 02                	jmp    c00127af <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00127ad:	31 c0                	xor    eax,eax
c00127af:	83 c4 0c             	add    esp,0xc
c00127b2:	5b                   	pop    ebx
c00127b3:	5e                   	pop    esi
c00127b4:	5f                   	pop    edi
c00127b5:	5d                   	pop    ebp
c00127b6:	c3                   	ret    
c00127b7:	83 ec 0c             	sub    esp,0xc
c00127ba:	68 8a b3 02 c0       	push   0xc002b38a
c00127bf:	e8 d9 02 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00127c4:	83 c4 10             	add    esp,0x10
c00127c7:	eb da                	jmp    c00127a3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c00127c9:	90                   	nop

c00127ca <VAS::scanForEviction()>:
c00127ca:	57                   	push   edi
c00127cb:	56                   	push   esi
c00127cc:	53                   	push   ebx
c00127cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127d1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00127d4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00127da:	75 0e                	jne    c00127ea <VAS::scanForEviction()+0x20>
c00127dc:	89 da                	mov    edx,ebx
c00127de:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00127e1:	c1 ea 16             	shr    edx,0x16
c00127e4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00127e8:	74 48                	je     c0012832 <VAS::scanForEviction()+0x68>
c00127ea:	53                   	push   ebx
c00127eb:	56                   	push   esi
c00127ec:	e8 47 f3 ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c00127f1:	5a                   	pop    edx
c00127f2:	8b 38                	mov    edi,DWORD PTR [eax]
c00127f4:	59                   	pop    ecx
c00127f5:	89 fa                	mov    edx,edi
c00127f7:	81 e2 00 0c 00 00    	and    edx,0xc00
c00127fd:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012803:	74 3d                	je     c0012842 <VAS::scanForEviction()+0x78>
c0012805:	81 c3 00 10 00 00    	add    ebx,0x1000
c001280b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012811:	76 2a                	jbe    c001283d <VAS::scanForEviction()+0x73>
c0012813:	31 db                	xor    ebx,ebx
c0012815:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001281c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012822:	75 c6                	jne    c00127ea <VAS::scanForEviction()+0x20>
c0012824:	89 da                	mov    edx,ebx
c0012826:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012829:	c1 ea 16             	shr    edx,0x16
c001282c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012830:	75 b8                	jne    c00127ea <VAS::scanForEviction()+0x20>
c0012832:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012838:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001283b:	eb 97                	jmp    c00127d4 <VAS::scanForEviction()+0xa>
c001283d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012840:	eb 92                	jmp    c00127d4 <VAS::scanForEviction()+0xa>
c0012842:	f7 c7 01 00 00 00    	test   edi,0x1
c0012848:	74 bb                	je     c0012805 <VAS::scanForEviction()+0x3b>
c001284a:	f7 c7 20 00 00 00    	test   edi,0x20
c0012850:	74 0a                	je     c001285c <VAS::scanForEviction()+0x92>
c0012852:	83 e7 df             	and    edi,0xffffffdf
c0012855:	89 38                	mov    DWORD PTR [eax],edi
c0012857:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001285a:	eb a9                	jmp    c0012805 <VAS::scanForEviction()+0x3b>
c001285c:	83 ec 08             	sub    esp,0x8
c001285f:	53                   	push   ebx
c0012860:	56                   	push   esi
c0012861:	e8 92 fd ff ff       	call   c00125f8 <VAS::evict(unsigned long)>
c0012866:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	89 f8                	mov    eax,edi
c0012872:	5b                   	pop    ebx
c0012873:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012878:	5e                   	pop    esi
c0012879:	5f                   	pop    edi
c001287a:	c3                   	ret    

c001287b <mapVASFirstTime>:
c001287b:	55                   	push   ebp
c001287c:	57                   	push   edi
c001287d:	56                   	push   esi
c001287e:	53                   	push   ebx
c001287f:	83 ec 0c             	sub    esp,0xc
c0012882:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012887:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001288a:	4a                   	dec    edx
c001288b:	0f 84 8e 00 00 00    	je     c001291f <mapVASFirstTime+0xa4>
c0012891:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012894:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012897:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001289c:	c1 e5 15             	shl    ebp,0x15
c001289f:	be 00 90 e7 01       	mov    esi,0x1e79000
c00128a4:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00128aa:	29 eb                	sub    ebx,ebp
c00128ac:	29 ee                	sub    esi,ebp
c00128ae:	e8 b9 d2 ff ff       	call   c000fb6c <Phys::allocatePage()>
c00128b3:	83 ec 0c             	sub    esp,0xc
c00128b6:	68 03 04 00 00       	push   0x403
c00128bb:	6a 01                	push   0x1
c00128bd:	53                   	push   ebx
c00128be:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00128c4:	50                   	push   eax
c00128c5:	57                   	push   edi
c00128c6:	e8 f9 f8 ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00128cb:	83 c4 20             	add    esp,0x20
c00128ce:	39 f3                	cmp    ebx,esi
c00128d0:	75 dc                	jne    c00128ae <mapVASFirstTime+0x33>
c00128d2:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00128d7:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00128dc:	29 ee                	sub    esi,ebp
c00128de:	29 e8                	sub    eax,ebp
c00128e0:	89 c5                	mov    ebp,eax
c00128e2:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00128e6:	19 db                	sbb    ebx,ebx
c00128e8:	e8 7f d2 ff ff       	call   c000fb6c <Phys::allocatePage()>
c00128ed:	83 e3 04             	and    ebx,0x4
c00128f0:	83 ec 0c             	sub    esp,0xc
c00128f3:	81 c3 03 04 00 00    	add    ebx,0x403
c00128f9:	53                   	push   ebx
c00128fa:	6a 01                	push   0x1
c00128fc:	56                   	push   esi
c00128fd:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012903:	50                   	push   eax
c0012904:	57                   	push   edi
c0012905:	e8 ba f8 ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001290a:	83 c4 20             	add    esp,0x20
c001290d:	39 f5                	cmp    ebp,esi
c001290f:	75 d1                	jne    c00128e2 <mapVASFirstTime+0x67>
c0012911:	0f 20 d8             	mov    eax,cr3
c0012914:	0f 22 d8             	mov    cr3,eax
c0012917:	83 c4 0c             	add    esp,0xc
c001291a:	5b                   	pop    ebx
c001291b:	5e                   	pop    esi
c001291c:	5f                   	pop    edi
c001291d:	5d                   	pop    ebp
c001291e:	c3                   	ret    
c001291f:	83 ec 0c             	sub    esp,0xc
c0012922:	68 9a b3 02 c0       	push   0xc002b39a
c0012927:	e8 71 01 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001292c:	83 c4 10             	add    esp,0x10
c001292f:	83 c4 0c             	add    esp,0xc
c0012932:	5b                   	pop    ebx
c0012933:	5e                   	pop    esi
c0012934:	5f                   	pop    edi
c0012935:	5d                   	pop    ebp
c0012936:	c3                   	ret    

c0012937 <__cxa_atexit>:
c0012937:	31 c0                	xor    eax,eax
c0012939:	c3                   	ret    

c001293a <__cxa_finalize>:
c001293a:	c3                   	ret    

c001293b <__stack_chk_fail>:
c001293b:	55                   	push   ebp
c001293c:	89 e5                	mov    ebp,esp
c001293e:	83 ec 14             	sub    esp,0x14
c0012941:	68 b3 b3 02 c0       	push   0xc002b3b3
c0012946:	e8 52 01 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001294b:	58                   	pop    eax
c001294c:	5a                   	pop    edx
c001294d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012950:	68 03 b4 02 c0       	push   0xc002b403
c0012955:	e8 43 01 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001295a:	59                   	pop    ecx
c001295b:	58                   	pop    eax
c001295c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001295f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012962:	68 03 b4 02 c0       	push   0xc002b403
c0012967:	e8 31 01 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001296c:	5a                   	pop    edx
c001296d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012970:	59                   	pop    ecx
c0012971:	8b 00                	mov    eax,DWORD PTR [eax]
c0012973:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012976:	68 03 b4 02 c0       	push   0xc002b403
c001297b:	e8 1d 01 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0012980:	5a                   	pop    edx
c0012981:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012984:	59                   	pop    ecx
c0012985:	8b 00                	mov    eax,DWORD PTR [eax]
c0012987:	8b 00                	mov    eax,DWORD PTR [eax]
c0012989:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001298c:	68 03 b4 02 c0       	push   0xc002b403
c0012991:	e8 07 01 00 00       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0012996:	c7 04 24 0b b4 02 c0 	mov    DWORD PTR [esp],0xc002b40b
c001299d:	e8 31 7b 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	c9                   	leave  
c00129a6:	c3                   	ret    

c00129a7 <__cxa_pure_virtual>:
c00129a7:	83 ec 18             	sub    esp,0x18
c00129aa:	68 23 b4 02 c0       	push   0xc002b423
c00129af:	e8 1f 7b 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00129b4:	83 c4 1c             	add    esp,0x1c
c00129b7:	c3                   	ret    

c00129b8 <operator new[](unsigned long)>:
c00129b8:	e9 cf ce ff ff       	jmp    c000f88c <malloc>

c00129bd <operator delete(void*, unsigned long)>:
c00129bd:	e9 ea ce ff ff       	jmp    c000f8ac <rfree>

c00129c2 <operator delete[](void*)>:
c00129c2:	e9 e5 ce ff ff       	jmp    c000f8ac <rfree>

c00129c7 <operator delete[](void*, unsigned long)>:
c00129c7:	e9 e0 ce ff ff       	jmp    c000f8ac <rfree>

c00129cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00129cc:	57                   	push   edi
c00129cd:	b9 3f 00 00 00       	mov    ecx,0x3f
c00129d2:	56                   	push   esi
c00129d3:	be 38 b4 02 c0       	mov    esi,0xc002b438
c00129d8:	53                   	push   ebx
c00129d9:	83 ec 40             	sub    esp,0x40
c00129dc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00129e0:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00129e4:	fc                   	cld    
c00129e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00129e7:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00129eb:	83 f9 3e             	cmp    ecx,0x3e
c00129ee:	7e 05                	jle    c00129f5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00129f0:	b9 3e 00 00 00       	mov    ecx,0x3e
c00129f5:	89 df                	mov    edi,ebx
c00129f7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00129fb:	eb 02                	jmp    c00129ff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00129fd:	89 c7                	mov    edi,eax
c00129ff:	31 d2                	xor    edx,edx
c0012a01:	46                   	inc    esi
c0012a02:	89 f8                	mov    eax,edi
c0012a04:	f7 f1                	div    ecx
c0012a06:	39 cf                	cmp    edi,ecx
c0012a08:	73 f3                	jae    c00129fd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a0a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a0d:	eb 02                	jmp    c0012a11 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a0f:	89 c3                	mov    ebx,eax
c0012a11:	31 d2                	xor    edx,edx
c0012a13:	4e                   	dec    esi
c0012a14:	89 d8                	mov    eax,ebx
c0012a16:	f7 f1                	div    ecx
c0012a18:	39 cb                	cmp    ebx,ecx
c0012a1a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012a1e:	88 16                	mov    BYTE PTR [esi],dl
c0012a20:	73 ed                	jae    c0012a0f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012a22:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012a26:	83 c4 40             	add    esp,0x40
c0012a29:	5b                   	pop    ebx
c0012a2a:	5e                   	pop    esi
c0012a2b:	5f                   	pop    edi
c0012a2c:	c3                   	ret    

c0012a2d <Dbg::logc(char)>:
c0012a2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a31:	ba fd 03 00 00       	mov    edx,0x3fd
c0012a36:	ec                   	in     al,dx
c0012a37:	a8 20                	test   al,0x20
c0012a39:	74 fb                	je     c0012a36 <Dbg::logc(char)+0x9>
c0012a3b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012a40:	88 c8                	mov    al,cl
c0012a42:	ee                   	out    dx,al
c0012a43:	c3                   	ret    

c0012a44 <Dbg::logs(char*)>:
c0012a44:	53                   	push   ebx
c0012a45:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012a49:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a4c:	84 c0                	test   al,al
c0012a4e:	74 0f                	je     c0012a5f <Dbg::logs(char*)+0x1b>
c0012a50:	50                   	push   eax
c0012a51:	43                   	inc    ebx
c0012a52:	e8 d6 ff ff ff       	call   c0012a2d <Dbg::logc(char)>
c0012a57:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a5a:	5a                   	pop    edx
c0012a5b:	84 c0                	test   al,al
c0012a5d:	75 f1                	jne    c0012a50 <Dbg::logs(char*)+0xc>
c0012a5f:	5b                   	pop    ebx
c0012a60:	c3                   	ret    

c0012a61 <Dbg::logWriteInt(unsigned int)>:
c0012a61:	83 ec 10             	sub    esp,0x10
c0012a64:	6a 0a                	push   0xa
c0012a66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012a6a:	50                   	push   eax
c0012a6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a6f:	e8 58 ff ff ff       	call   c00129cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012a74:	50                   	push   eax
c0012a75:	e8 ca ff ff ff       	call   c0012a44 <Dbg::logs(char*)>
c0012a7a:	83 c4 20             	add    esp,0x20
c0012a7d:	c3                   	ret    

c0012a7e <Dbg::logWriteIntBase(unsigned int, int)>:
c0012a7e:	83 ec 10             	sub    esp,0x10
c0012a81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a85:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012a89:	50                   	push   eax
c0012a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a8e:	e8 39 ff ff ff       	call   c00129cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012a93:	50                   	push   eax
c0012a94:	e8 ab ff ff ff       	call   c0012a44 <Dbg::logs(char*)>
c0012a99:	83 c4 20             	add    esp,0x20
c0012a9c:	c3                   	ret    

c0012a9d <Dbg::kprintf(char const*, ...)>:
c0012a9d:	55                   	push   ebp
c0012a9e:	57                   	push   edi
c0012a9f:	56                   	push   esi
c0012aa0:	53                   	push   ebx
c0012aa1:	83 ec 0c             	sub    esp,0xc
c0012aa4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012aa8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012aac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ab0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ab3:	84 c0                	test   al,al
c0012ab5:	74 4a                	je     c0012b01 <Dbg::kprintf(char const*, ...)+0x64>
c0012ab7:	31 db                	xor    ebx,ebx
c0012ab9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012abc:	3c 25                	cmp    al,0x25
c0012abe:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ac1:	0f 85 e4 00 00 00    	jne    c0012bab <Dbg::kprintf(char const*, ...)+0x10e>
c0012ac7:	83 c3 02             	add    ebx,0x2
c0012aca:	8a 07                	mov    al,BYTE PTR [edi]
c0012acc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012acf:	83 e8 25             	sub    eax,0x25
c0012ad2:	3c 53                	cmp    al,0x53
c0012ad4:	0f 87 ba 00 00 00    	ja     c0012b94 <Dbg::kprintf(char const*, ...)+0xf7>
c0012ada:	0f b6 c0             	movzx  eax,al
c0012add:	ff 24 85 78 b4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4b88]
c0012ae4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ae8:	89 c8                	mov    eax,ecx
c0012aea:	83 c1 04             	add    ecx,0x4
c0012aed:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012af1:	ff 30                	push   DWORD PTR [eax]
c0012af3:	e8 4c ff ff ff       	call   c0012a44 <Dbg::logs(char*)>
c0012af8:	58                   	pop    eax
c0012af9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012afd:	84 c0                	test   al,al
c0012aff:	75 b8                	jne    c0012ab9 <Dbg::kprintf(char const*, ...)+0x1c>
c0012b01:	83 c4 0c             	add    esp,0xc
c0012b04:	5b                   	pop    ebx
c0012b05:	5e                   	pop    esi
c0012b06:	5f                   	pop    edi
c0012b07:	5d                   	pop    ebp
c0012b08:	c3                   	ret    
c0012b09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b0d:	89 d0                	mov    eax,edx
c0012b0f:	83 c2 04             	add    edx,0x4
c0012b12:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b16:	ff 30                	push   DWORD PTR [eax]
c0012b18:	e8 44 ff ff ff       	call   c0012a61 <Dbg::logWriteInt(unsigned int)>
c0012b1d:	58                   	pop    eax
c0012b1e:	eb d9                	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b24:	89 d0                	mov    eax,edx
c0012b26:	83 c2 04             	add    edx,0x4
c0012b29:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012b2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b30:	50                   	push   eax
c0012b31:	e8 f7 fe ff ff       	call   c0012a2d <Dbg::logc(char)>
c0012b36:	58                   	pop    eax
c0012b37:	eb c0                	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b3d:	89 c8                	mov    eax,ecx
c0012b3f:	83 c1 04             	add    ecx,0x4
c0012b42:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b46:	ff 30                	push   DWORD PTR [eax]
c0012b48:	e8 14 ff ff ff       	call   c0012a61 <Dbg::logWriteInt(unsigned int)>
c0012b4d:	5f                   	pop    edi
c0012b4e:	eb a9                	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b54:	89 c8                	mov    eax,ecx
c0012b56:	83 c1 04             	add    ecx,0x4
c0012b59:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b5d:	6a 10                	push   0x10
c0012b5f:	ff 30                	push   DWORD PTR [eax]
c0012b61:	e8 18 ff ff ff       	call   c0012a7e <Dbg::logWriteIntBase(unsigned int, int)>
c0012b66:	59                   	pop    ecx
c0012b67:	5f                   	pop    edi
c0012b68:	eb 8f                	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b6e:	89 d0                	mov    eax,edx
c0012b70:	83 c2 08             	add    edx,0x8
c0012b73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b77:	6a 10                	push   0x10
c0012b79:	ff 30                	push   DWORD PTR [eax]
c0012b7b:	e8 fe fe ff ff       	call   c0012a7e <Dbg::logWriteIntBase(unsigned int, int)>
c0012b80:	58                   	pop    eax
c0012b81:	5a                   	pop    edx
c0012b82:	e9 72 ff ff ff       	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b87:	6a 25                	push   0x25
c0012b89:	e8 9f fe ff ff       	call   c0012a2d <Dbg::logc(char)>
c0012b8e:	58                   	pop    eax
c0012b8f:	e9 65 ff ff ff       	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b94:	6a 25                	push   0x25
c0012b96:	e8 92 fe ff ff       	call   c0012a2d <Dbg::logc(char)>
c0012b9b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012b9e:	50                   	push   eax
c0012b9f:	e8 89 fe ff ff       	call   c0012a2d <Dbg::logc(char)>
c0012ba4:	5a                   	pop    edx
c0012ba5:	59                   	pop    ecx
c0012ba6:	e9 4e ff ff ff       	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bab:	50                   	push   eax
c0012bac:	89 eb                	mov    ebx,ebp
c0012bae:	e8 7a fe ff ff       	call   c0012a2d <Dbg::logc(char)>
c0012bb3:	89 fd                	mov    ebp,edi
c0012bb5:	58                   	pop    eax
c0012bb6:	e9 3e ff ff ff       	jmp    c0012af9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bbb:	90                   	nop

c0012bbc <File::read(unsigned long long, void*, int*)>:
c0012bbc:	53                   	push   ebx
c0012bbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012bc5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012bcc:	3c 19                	cmp    al,0x19
c0012bce:	77 35                	ja     c0012c05 <File::read(unsigned long long, void*, int*)+0x49>
c0012bd0:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c0012bd7:	85 c0                	test   eax,eax
c0012bd9:	74 2a                	je     c0012c05 <File::read(unsigned long long, void*, int*)+0x49>
c0012bdb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012be1:	85 c0                	test   eax,eax
c0012be3:	74 20                	je     c0012c05 <File::read(unsigned long long, void*, int*)+0x49>
c0012be5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012be9:	74 21                	je     c0012c0c <File::read(unsigned long long, void*, int*)+0x50>
c0012beb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012bed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012bf1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012bf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bff:	5b                   	pop    ebx
c0012c00:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c03:	ff e0                	jmp    eax
c0012c05:	b8 0b 00 00 00       	mov    eax,0xb
c0012c0a:	eb 05                	jmp    c0012c11 <File::read(unsigned long long, void*, int*)+0x55>
c0012c0c:	b8 05 00 00 00       	mov    eax,0x5
c0012c11:	5b                   	pop    ebx
c0012c12:	c3                   	ret    
c0012c13:	90                   	nop

c0012c14 <File::write(unsigned long long, void*, int*)>:
c0012c14:	53                   	push   ebx
c0012c15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c19:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c1d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c24:	3c 19                	cmp    al,0x19
c0012c26:	77 35                	ja     c0012c5d <File::write(unsigned long long, void*, int*)+0x49>
c0012c28:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c0012c2f:	85 c0                	test   eax,eax
c0012c31:	74 2a                	je     c0012c5d <File::write(unsigned long long, void*, int*)+0x49>
c0012c33:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c39:	85 c0                	test   eax,eax
c0012c3b:	74 20                	je     c0012c5d <File::write(unsigned long long, void*, int*)+0x49>
c0012c3d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c41:	74 21                	je     c0012c64 <File::write(unsigned long long, void*, int*)+0x50>
c0012c43:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c49:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c57:	5b                   	pop    ebx
c0012c58:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012c5b:	ff e0                	jmp    eax
c0012c5d:	b8 0b 00 00 00       	mov    eax,0xb
c0012c62:	eb 05                	jmp    c0012c69 <File::write(unsigned long long, void*, int*)+0x55>
c0012c64:	b8 05 00 00 00       	mov    eax,0x5
c0012c69:	5b                   	pop    ebx
c0012c6a:	c3                   	ret    
c0012c6b:	90                   	nop

c0012c6c <Directory::read(unsigned long long, void*, int*)>:
c0012c6c:	53                   	push   ebx
c0012c6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c75:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c7c:	3c 19                	cmp    al,0x19
c0012c7e:	77 35                	ja     c0012cb5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012c80:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c0012c87:	85 c0                	test   eax,eax
c0012c89:	74 2a                	je     c0012cb5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012c8b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c91:	85 c0                	test   eax,eax
c0012c93:	74 20                	je     c0012cb5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012c95:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c99:	74 21                	je     c0012cbc <Directory::read(unsigned long long, void*, int*)+0x50>
c0012c9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ca1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012cab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012caf:	5b                   	pop    ebx
c0012cb0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012cb3:	ff e0                	jmp    eax
c0012cb5:	b8 0b 00 00 00       	mov    eax,0xb
c0012cba:	eb 05                	jmp    c0012cc1 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012cbc:	b8 05 00 00 00       	mov    eax,0x5
c0012cc1:	5b                   	pop    ebx
c0012cc2:	c3                   	ret    
c0012cc3:	90                   	nop

c0012cc4 <Directory::write(unsigned long long, void*, int*)>:
c0012cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cc8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ccf:	b8 0b 00 00 00       	mov    eax,0xb
c0012cd4:	80 fa 19             	cmp    dl,0x19
c0012cd7:	77 18                	ja     c0012cf1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012cd9:	8b 14 95 e0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0920]
c0012ce0:	85 d2                	test   edx,edx
c0012ce2:	74 0d                	je     c0012cf1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ce4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012ceb:	19 c0                	sbb    eax,eax
c0012ced:	83 e0 0a             	and    eax,0xa
c0012cf0:	40                   	inc    eax
c0012cf1:	c3                   	ret    

c0012cf2 <File::isAtty()>:
c0012cf2:	31 c0                	xor    eax,eax
c0012cf4:	c3                   	ret    
c0012cf5:	90                   	nop

c0012cf6 <Directory::isAtty()>:
c0012cf6:	31 c0                	xor    eax,eax
c0012cf8:	c3                   	ret    
c0012cf9:	90                   	nop

c0012cfa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012cfa:	b8 0a 00 00 00       	mov    eax,0xa
c0012cff:	c3                   	ret    

c0012d00 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d00:	b8 0a 00 00 00       	mov    eax,0xa
c0012d05:	c3                   	ret    

c0012d06 <Filesystem::getFileFirstSector(char const*)>:
c0012d06:	31 c0                	xor    eax,eax
c0012d08:	31 d2                	xor    edx,edx
c0012d0a:	c3                   	ret    
c0012d0b:	90                   	nop

c0012d0c <File::~File()>:
c0012d0c:	83 ec 0c             	sub    esp,0xc
c0012d0f:	ba 38 b6 02 c0       	mov    edx,0xc002b638
c0012d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d18:	89 10                	mov    DWORD PTR [eax],edx
c0012d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	50                   	push   eax
c0012d22:	e8 0f e7 ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	90                   	nop
c0012d2b:	83 c4 0c             	add    esp,0xc
c0012d2e:	c3                   	ret    
c0012d2f:	90                   	nop

c0012d30 <File::~File()>:
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	83 ec 0c             	sub    esp,0xc
c0012d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d3a:	e8 cd ff ff ff       	call   c0012d0c <File::~File()>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	83 ec 08             	sub    esp,0x8
c0012d45:	68 14 01 00 00       	push   0x114
c0012d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d4e:	e8 6a fc ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	83 c4 0c             	add    esp,0xc
c0012d59:	c3                   	ret    

c0012d5a <Directory::~Directory()>:
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	ba 54 b6 02 c0       	mov    edx,0xc002b654
c0012d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d66:	89 10                	mov    DWORD PTR [eax],edx
c0012d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d6c:	83 ec 0c             	sub    esp,0xc
c0012d6f:	50                   	push   eax
c0012d70:	e8 c1 e6 ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c0012d75:	83 c4 10             	add    esp,0x10
c0012d78:	90                   	nop
c0012d79:	83 c4 0c             	add    esp,0xc
c0012d7c:	c3                   	ret    
c0012d7d:	90                   	nop

c0012d7e <Directory::~Directory()>:
c0012d7e:	83 ec 0c             	sub    esp,0xc
c0012d81:	83 ec 0c             	sub    esp,0xc
c0012d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d88:	e8 cd ff ff ff       	call   c0012d5a <Directory::~Directory()>
c0012d8d:	83 c4 10             	add    esp,0x10
c0012d90:	83 ec 08             	sub    esp,0x8
c0012d93:	68 14 01 00 00       	push   0x114
c0012d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d9c:	e8 1c fc ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0012da1:	83 c4 10             	add    esp,0x10
c0012da4:	83 c4 0c             	add    esp,0xc
c0012da7:	c3                   	ret    

c0012da8 <Filesystem::Filesystem()>:
c0012da8:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c0012dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012db1:	89 10                	mov    DWORD PTR [eax],edx
c0012db3:	8b 15 54 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f254
c0012db9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dbd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dc4:	a3 54 f2 02 c0       	mov    ds:0xc002f254,eax
c0012dc9:	90                   	nop
c0012dca:	c3                   	ret    
c0012dcb:	90                   	nop

c0012dcc <Filesystem::~Filesystem()>:
c0012dcc:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c0012dd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dd5:	89 10                	mov    DWORD PTR [eax],edx
c0012dd7:	90                   	nop
c0012dd8:	c3                   	ret    
c0012dd9:	90                   	nop

c0012dda <Filesystem::~Filesystem()>:
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012de1:	e8 e6 ff ff ff       	call   c0012dcc <Filesystem::~Filesystem()>
c0012de6:	83 c4 04             	add    esp,0x4
c0012de9:	83 ec 08             	sub    esp,0x8
c0012dec:	6a 08                	push   0x8
c0012dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df2:	e8 c6 fb ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	83 c4 0c             	add    esp,0xc
c0012dfd:	c3                   	ret    

c0012dfe <Fs::getcwd(Process*, char*, int)>:
c0012dfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e02:	31 c0                	xor    eax,eax
c0012e04:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e07:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e0b:	7d 15                	jge    c0012e22 <Fs::getcwd(Process*, char*, int)+0x24>
c0012e0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e11:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012e18:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012e1b:	84 c9                	test   cl,cl
c0012e1d:	74 06                	je     c0012e25 <Fs::getcwd(Process*, char*, int)+0x27>
c0012e1f:	40                   	inc    eax
c0012e20:	eb e2                	jmp    c0012e04 <Fs::getcwd(Process*, char*, int)+0x6>
c0012e22:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012e25:	31 c0                	xor    eax,eax
c0012e27:	c3                   	ret    

c0012e28 <Fs::initVFS()>:
c0012e28:	83 ec 18             	sub    esp,0x18
c0012e2b:	6a 08                	push   0x8
c0012e2d:	e8 5a ca ff ff       	call   c000f88c <malloc>
c0012e32:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e35:	e8 08 e5 00 00       	call   c0021342 <FAT::FAT()>
c0012e3a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012e41:	e8 46 ca ff ff       	call   c000f88c <malloc>
c0012e46:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e49:	e8 30 f7 00 00       	call   c002257e <ISO9660::ISO9660()>
c0012e4e:	83 c4 1c             	add    esp,0x1c
c0012e51:	c3                   	ret    

c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012e52:	55                   	push   ebp
c0012e53:	57                   	push   edi
c0012e54:	56                   	push   esi
c0012e55:	53                   	push   ebx
c0012e56:	81 ec 10 04 00 00    	sub    esp,0x410
c0012e5c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012e63:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012e6a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012e71:	68 00 04 00 00       	push   0x400
c0012e76:	6a 00                	push   0x0
c0012e78:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012e7c:	56                   	push   esi
c0012e7d:	e8 ce d8 fe ff       	call   c0000750 <memset>
c0012e82:	83 c4 10             	add    esp,0x10
c0012e85:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012e89:	75 0b                	jne    c0012e96 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012e8b:	50                   	push   eax
c0012e8c:	50                   	push   eax
c0012e8d:	57                   	push   edi
c0012e8e:	56                   	push   esi
c0012e8f:	e8 78 d9 fe ff       	call   c000080c <strcpy>
c0012e94:	eb 41                	jmp    c0012ed7 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012e96:	8a 07                	mov    al,BYTE PTR [edi]
c0012e98:	3c 5c                	cmp    al,0x5c
c0012e9a:	74 04                	je     c0012ea0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012e9c:	3c 2f                	cmp    al,0x2f
c0012e9e:	75 18                	jne    c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ea0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ea3:	3c 60                	cmp    al,0x60
c0012ea5:	7e 03                	jle    c0012eaa <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ea7:	83 e8 20             	sub    eax,0x20
c0012eaa:	88 04 24             	mov    BYTE PTR [esp],al
c0012ead:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012eb4:	50                   	push   eax
c0012eb5:	50                   	push   eax
c0012eb6:	eb 18                	jmp    c0012ed0 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012eb8:	50                   	push   eax
c0012eb9:	50                   	push   eax
c0012eba:	55                   	push   ebp
c0012ebb:	56                   	push   esi
c0012ebc:	e8 4b d9 fe ff       	call   c000080c <strcpy>
c0012ec1:	5a                   	pop    edx
c0012ec2:	59                   	pop    ecx
c0012ec3:	68 ad cd 02 c0       	push   0xc002cdad
c0012ec8:	56                   	push   esi
c0012ec9:	e8 7e da fe ff       	call   c000094c <strcat>
c0012ece:	5d                   	pop    ebp
c0012ecf:	58                   	pop    eax
c0012ed0:	57                   	push   edi
c0012ed1:	56                   	push   esi
c0012ed2:	e8 75 da fe ff       	call   c000094c <strcat>
c0012ed7:	83 c4 10             	add    esp,0x10
c0012eda:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012edd:	3c 60                	cmp    al,0x60
c0012edf:	7e 03                	jle    c0012ee4 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012ee1:	83 e8 20             	sub    eax,0x20
c0012ee4:	88 04 24             	mov    BYTE PTR [esp],al
c0012ee7:	88 03                	mov    BYTE PTR [ebx],al
c0012ee9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ef0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ef6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012efa:	bf 03 00 00 00       	mov    edi,0x3
c0012eff:	b8 03 00 00 00       	mov    eax,0x3
c0012f04:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f07:	84 d2                	test   dl,dl
c0012f09:	0f 84 91 00 00 00    	je     c0012fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f0f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012f12:	80 fa 5c             	cmp    dl,0x5c
c0012f15:	74 05                	je     c0012f1c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012f17:	80 fa 2f             	cmp    dl,0x2f
c0012f1a:	75 12                	jne    c0012f2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f1c:	89 c5                	mov    ebp,eax
c0012f1e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f23:	74 09                	je     c0012f2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f25:	40                   	inc    eax
c0012f26:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012f2a:	89 cf                	mov    edi,ecx
c0012f2c:	eb d6                	jmp    c0012f04 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012f2e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012f33:	75 5b                	jne    c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012f35:	80 fa 2e             	cmp    dl,0x2e
c0012f38:	75 56                	jne    c0012f90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012f3a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012f3e:	74 19                	je     c0012f59 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012f40:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012f45:	74 53                	je     c0012f9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012f47:	89 f9                	mov    ecx,edi
c0012f49:	41                   	inc    ecx
c0012f4a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012f4d:	80 fa 2f             	cmp    dl,0x2f
c0012f50:	74 f7                	je     c0012f49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012f52:	80 fa 5c             	cmp    dl,0x5c
c0012f55:	74 f2                	je     c0012f49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012f57:	eb d1                	jmp    c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f59:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012f5e:	74 3a                	je     c0012f9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012f60:	83 f8 03             	cmp    eax,0x3
c0012f63:	74 c5                	je     c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f65:	41                   	inc    ecx
c0012f66:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012f69:	80 fa 2f             	cmp    dl,0x2f
c0012f6c:	74 f7                	je     c0012f65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012f6e:	80 fa 5c             	cmp    dl,0x5c
c0012f71:	74 f2                	je     c0012f65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012f73:	48                   	dec    eax
c0012f74:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012f78:	75 06                	jne    c0012f80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012f7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012f7e:	eb f3                	jmp    c0012f73 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012f80:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012f84:	74 07                	je     c0012f8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012f86:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012f8a:	48                   	dec    eax
c0012f8b:	eb f3                	jmp    c0012f80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012f8d:	40                   	inc    eax
c0012f8e:	eb 9a                	jmp    c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f90:	80 fa 2f             	cmp    dl,0x2f
c0012f93:	74 95                	je     c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f95:	80 fa 5c             	cmp    dl,0x5c
c0012f98:	74 90                	je     c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f9a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012f9d:	40                   	inc    eax
c0012f9e:	eb 8a                	jmp    c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fa0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	53                   	push   ebx
c0012fa8:	e8 bf d7 fe ff       	call   c000076c <strlen>
c0012fad:	83 c4 10             	add    esp,0x10
c0012fb0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012fb5:	75 26                	jne    c0012fdd <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012fb7:	83 ec 0c             	sub    esp,0xc
c0012fba:	53                   	push   ebx
c0012fbb:	e8 ac d7 fe ff       	call   c000076c <strlen>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012fc8:	74 26                	je     c0012ff0 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012fca:	83 ec 0c             	sub    esp,0xc
c0012fcd:	53                   	push   ebx
c0012fce:	e8 99 d7 fe ff       	call   c000076c <strlen>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012fdb:	eb c7                	jmp    c0012fa4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012fdd:	83 ec 0c             	sub    esp,0xc
c0012fe0:	53                   	push   ebx
c0012fe1:	e8 86 d7 fe ff       	call   c000076c <strlen>
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012fee:	74 c7                	je     c0012fb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012ff0:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012ff6:	5b                   	pop    ebx
c0012ff7:	5e                   	pop    esi
c0012ff8:	5f                   	pop    edi
c0012ff9:	5d                   	pop    ebp
c0012ffa:	c3                   	ret    
c0012ffb:	90                   	nop

c0012ffc <File::File(char const*, Process*)>:
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013003:	83 ec 08             	sub    esp,0x8
c0013006:	6a 00                	push   0x0
c0013008:	50                   	push   eax
c0013009:	e8 46 e2 ff ff       	call   c0011254 <UnixFile::UnixFile(int)>
c001300e:	83 c4 10             	add    esp,0x10
c0013011:	ba 38 b6 02 c0       	mov    edx,0xc002b638
c0013016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301a:	89 10                	mov    DWORD PTR [eax],edx
c001301c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013020:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001302a:	83 c0 0d             	add    eax,0xd
c001302d:	83 ec 04             	sub    esp,0x4
c0013030:	52                   	push   edx
c0013031:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013035:	50                   	push   eax
c0013036:	e8 17 fe ff ff       	call   c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013042:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013045:	8d 50 bf             	lea    edx,[eax-0x41]
c0013048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013056:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001305a:	90                   	nop
c001305b:	83 c4 0c             	add    esp,0xc
c001305e:	c3                   	ret    
c001305f:	90                   	nop

c0013060 <File::open(FileOpenMode)>:
c0013060:	53                   	push   ebx
c0013061:	b8 0b 00 00 00       	mov    eax,0xb
c0013066:	83 ec 08             	sub    esp,0x8
c0013069:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001306d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013074:	80 fa 19             	cmp    dl,0x19
c0013077:	77 40                	ja     c00130b9 <File::open(FileOpenMode)+0x59>
c0013079:	8b 14 95 e0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0920]
c0013080:	85 d2                	test   edx,edx
c0013082:	74 35                	je     c00130b9 <File::open(FileOpenMode)+0x59>
c0013084:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001308a:	85 d2                	test   edx,edx
c001308c:	74 2b                	je     c00130b9 <File::open(FileOpenMode)+0x59>
c001308e:	b8 06 00 00 00       	mov    eax,0x6
c0013093:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013097:	75 20                	jne    c00130b9 <File::open(FileOpenMode)+0x59>
c0013099:	8b 02                	mov    eax,DWORD PTR [edx]
c001309b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00130a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130a5:	51                   	push   ecx
c00130a6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00130a9:	51                   	push   ecx
c00130aa:	52                   	push   edx
c00130ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00130ae:	83 c4 10             	add    esp,0x10
c00130b1:	85 c0                	test   eax,eax
c00130b3:	75 04                	jne    c00130b9 <File::open(FileOpenMode)+0x59>
c00130b5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00130b9:	83 c4 08             	add    esp,0x8
c00130bc:	5b                   	pop    ebx
c00130bd:	c3                   	ret    

c00130be <File::close()>:
c00130be:	53                   	push   ebx
c00130bf:	b8 0b 00 00 00       	mov    eax,0xb
c00130c4:	83 ec 08             	sub    esp,0x8
c00130c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130cb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130d2:	80 fa 19             	cmp    dl,0x19
c00130d5:	77 41                	ja     c0013118 <File::close()+0x5a>
c00130d7:	8b 1c 95 e0 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0920]
c00130de:	85 db                	test   ebx,ebx
c00130e0:	74 36                	je     c0013118 <File::close()+0x5a>
c00130e2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00130e9:	74 2d                	je     c0013118 <File::close()+0x5a>
c00130eb:	b8 05 00 00 00       	mov    eax,0x5
c00130f0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130f4:	74 22                	je     c0013118 <File::close()+0x5a>
c00130f6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00130fa:	8b 04 95 e0 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0920]
c0013101:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013107:	53                   	push   ebx
c0013108:	53                   	push   ebx
c0013109:	8b 10                	mov    edx,DWORD PTR [eax]
c001310b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013111:	50                   	push   eax
c0013112:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	83 c4 08             	add    esp,0x8
c001311b:	5b                   	pop    ebx
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <File::seek(unsigned long long)>:
c001311e:	56                   	push   esi
c001311f:	53                   	push   ebx
c0013120:	b8 0b 00 00 00       	mov    eax,0xb
c0013125:	51                   	push   ecx
c0013126:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001312a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001312e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013135:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013139:	80 fa 19             	cmp    dl,0x19
c001313c:	77 31                	ja     c001316f <File::seek(unsigned long long)+0x51>
c001313e:	8b 14 95 e0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0920]
c0013145:	85 d2                	test   edx,edx
c0013147:	74 26                	je     c001316f <File::seek(unsigned long long)+0x51>
c0013149:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001314f:	85 d2                	test   edx,edx
c0013151:	74 1c                	je     c001316f <File::seek(unsigned long long)+0x51>
c0013153:	b8 05 00 00 00       	mov    eax,0x5
c0013158:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001315c:	74 11                	je     c001316f <File::seek(unsigned long long)+0x51>
c001315e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013160:	53                   	push   ebx
c0013161:	51                   	push   ecx
c0013162:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013168:	52                   	push   edx
c0013169:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	5a                   	pop    edx
c0013170:	5b                   	pop    ebx
c0013171:	5e                   	pop    esi
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <File::tell(unsigned long long*)>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	b8 0b 00 00 00       	mov    eax,0xb
c001317c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013180:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013187:	80 fa 19             	cmp    dl,0x19
c001318a:	77 34                	ja     c00131c0 <File::tell(unsigned long long*)+0x4c>
c001318c:	8b 14 95 e0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0920]
c0013193:	85 d2                	test   edx,edx
c0013195:	74 29                	je     c00131c0 <File::tell(unsigned long long*)+0x4c>
c0013197:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001319d:	85 d2                	test   edx,edx
c001319f:	74 1f                	je     c00131c0 <File::tell(unsigned long long*)+0x4c>
c00131a1:	b8 05 00 00 00       	mov    eax,0x5
c00131a6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131aa:	74 14                	je     c00131c0 <File::tell(unsigned long long*)+0x4c>
c00131ac:	50                   	push   eax
c00131ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00131af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131b3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131b9:	52                   	push   edx
c00131ba:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	83 c4 0c             	add    esp,0xc
c00131c3:	c3                   	ret    

c00131c4 <File::rewind()>:
c00131c4:	83 ec 10             	sub    esp,0x10
c00131c7:	6a 00                	push   0x0
c00131c9:	6a 00                	push   0x0
c00131cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131cf:	e8 4a ff ff ff       	call   c001311e <File::seek(unsigned long long)>
c00131d4:	83 c4 1c             	add    esp,0x1c
c00131d7:	c3                   	ret    

c00131d8 <File::unlink()>:
c00131d8:	83 ec 0c             	sub    esp,0xc
c00131db:	b8 0b 00 00 00       	mov    eax,0xb
c00131e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131eb:	80 f9 19             	cmp    cl,0x19
c00131ee:	77 2f                	ja     c001321f <File::unlink()+0x47>
c00131f0:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c00131f7:	85 c9                	test   ecx,ecx
c00131f9:	74 24                	je     c001321f <File::unlink()+0x47>
c00131fb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013201:	85 c9                	test   ecx,ecx
c0013203:	74 1a                	je     c001321f <File::unlink()+0x47>
c0013205:	b8 06 00 00 00       	mov    eax,0x6
c001320a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001320e:	75 0f                	jne    c001321f <File::unlink()+0x47>
c0013210:	83 c2 0d             	add    edx,0xd
c0013213:	50                   	push   eax
c0013214:	50                   	push   eax
c0013215:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013217:	52                   	push   edx
c0013218:	51                   	push   ecx
c0013219:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	83 c4 0c             	add    esp,0xc
c0013222:	c3                   	ret    
c0013223:	90                   	nop

c0013224 <File::rename(char const*)>:
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	b8 0b 00 00 00       	mov    eax,0xb
c001322c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013230:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013237:	80 f9 19             	cmp    cl,0x19
c001323a:	77 32                	ja     c001326e <File::rename(char const*)+0x4a>
c001323c:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c0013243:	85 c9                	test   ecx,ecx
c0013245:	74 27                	je     c001326e <File::rename(char const*)+0x4a>
c0013247:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001324d:	85 c9                	test   ecx,ecx
c001324f:	74 1d                	je     c001326e <File::rename(char const*)+0x4a>
c0013251:	b8 06 00 00 00       	mov    eax,0x6
c0013256:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001325a:	75 12                	jne    c001326e <File::rename(char const*)+0x4a>
c001325c:	83 c2 0d             	add    edx,0xd
c001325f:	50                   	push   eax
c0013260:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013262:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013266:	52                   	push   edx
c0013267:	51                   	push   ecx
c0013268:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001326b:	83 c4 10             	add    esp,0x10
c001326e:	83 c4 0c             	add    esp,0xc
c0013271:	c3                   	ret    

c0013272 <File::chfatattr(unsigned char, unsigned char)>:
c0013272:	57                   	push   edi
c0013273:	b8 0b 00 00 00       	mov    eax,0xb
c0013278:	56                   	push   esi
c0013279:	53                   	push   ebx
c001327a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001327e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013282:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013289:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001328d:	80 f9 19             	cmp    cl,0x19
c0013290:	77 37                	ja     c00132c9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013292:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c0013299:	85 c9                	test   ecx,ecx
c001329b:	74 2c                	je     c00132c9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001329d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132a3:	85 c9                	test   ecx,ecx
c00132a5:	74 22                	je     c00132c9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00132a7:	b8 06 00 00 00       	mov    eax,0x6
c00132ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132b0:	75 17                	jne    c00132c9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00132b2:	8b 39                	mov    edi,DWORD PTR [ecx]
c00132b4:	89 f0                	mov    eax,esi
c00132b6:	83 c2 0d             	add    edx,0xd
c00132b9:	0f b6 f0             	movzx  esi,al
c00132bc:	0f b6 db             	movzx  ebx,bl
c00132bf:	56                   	push   esi
c00132c0:	53                   	push   ebx
c00132c1:	52                   	push   edx
c00132c2:	51                   	push   ecx
c00132c3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	5b                   	pop    ebx
c00132ca:	5e                   	pop    esi
c00132cb:	5f                   	pop    edi
c00132cc:	c3                   	ret    
c00132cd:	90                   	nop

c00132ce <File::exists()>:
c00132ce:	83 ec 0c             	sub    esp,0xc
c00132d1:	31 c0                	xor    eax,eax
c00132d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132d7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132de:	80 f9 19             	cmp    cl,0x19
c00132e1:	77 24                	ja     c0013307 <File::exists()+0x39>
c00132e3:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c00132ea:	85 c9                	test   ecx,ecx
c00132ec:	74 19                	je     c0013307 <File::exists()+0x39>
c00132ee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132f4:	85 c9                	test   ecx,ecx
c00132f6:	74 0f                	je     c0013307 <File::exists()+0x39>
c00132f8:	83 c2 0d             	add    edx,0xd
c00132fb:	50                   	push   eax
c00132fc:	50                   	push   eax
c00132fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132ff:	52                   	push   edx
c0013300:	51                   	push   ecx
c0013301:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013304:	83 c4 10             	add    esp,0x10
c0013307:	83 c4 0c             	add    esp,0xc
c001330a:	c3                   	ret    
c001330b:	90                   	nop

c001330c <File::stat(unsigned long long*, bool*)>:
c001330c:	56                   	push   esi
c001330d:	53                   	push   ebx
c001330e:	50                   	push   eax
c001330f:	b8 0b 00 00 00       	mov    eax,0xb
c0013314:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013318:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001331c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013323:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013327:	80 f9 19             	cmp    cl,0x19
c001332a:	77 3d                	ja     c0013369 <File::stat(unsigned long long*, bool*)+0x5d>
c001332c:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c0013333:	85 c9                	test   ecx,ecx
c0013335:	74 32                	je     c0013369 <File::stat(unsigned long long*, bool*)+0x5d>
c0013337:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001333d:	85 c9                	test   ecx,ecx
c001333f:	74 28                	je     c0013369 <File::stat(unsigned long long*, bool*)+0x5d>
c0013341:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013343:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013347:	74 13                	je     c001335c <File::stat(unsigned long long*, bool*)+0x50>
c0013349:	83 ec 04             	sub    esp,0x4
c001334c:	56                   	push   esi
c001334d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013353:	51                   	push   ecx
c0013354:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013357:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001335a:	eb 0a                	jmp    c0013366 <File::stat(unsigned long long*, bool*)+0x5a>
c001335c:	53                   	push   ebx
c001335d:	83 c2 0d             	add    edx,0xd
c0013360:	56                   	push   esi
c0013361:	52                   	push   edx
c0013362:	51                   	push   ecx
c0013363:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013366:	83 c4 10             	add    esp,0x10
c0013369:	5a                   	pop    edx
c001336a:	5b                   	pop    ebx
c001336b:	5e                   	pop    esi
c001336c:	c3                   	ret    

c001336d <Fs::setcwd(Process*, char*)>:
c001336d:	55                   	push   ebp
c001336e:	57                   	push   edi
c001336f:	56                   	push   esi
c0013370:	53                   	push   ebx
c0013371:	81 ec 20 02 00 00    	sub    esp,0x220
c0013377:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001337e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013384:	57                   	push   edi
c0013385:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001338c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013390:	56                   	push   esi
c0013391:	e8 bc fa ff ff       	call   c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013396:	89 34 24             	mov    DWORD PTR [esp],esi
c0013399:	e8 ce d3 fe ff       	call   c000076c <strlen>
c001339e:	83 c4 10             	add    esp,0x10
c00133a1:	83 f8 02             	cmp    eax,0x2
c00133a4:	77 17                	ja     c00133bd <Fs::setcwd(Process*, char*)+0x50>
c00133a6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00133ab:	83 e8 41             	sub    eax,0x41
c00133ae:	83 f8 19             	cmp    eax,0x19
c00133b1:	76 24                	jbe    c00133d7 <Fs::setcwd(Process*, char*)+0x6a>
c00133b3:	b8 03 00 00 00       	mov    eax,0x3
c00133b8:	e9 e0 00 00 00       	jmp    c001349d <Fs::setcwd(Process*, char*)+0x130>
c00133bd:	83 ec 0c             	sub    esp,0xc
c00133c0:	56                   	push   esi
c00133c1:	e8 a6 d3 fe ff       	call   c000076c <strlen>
c00133c6:	83 c4 10             	add    esp,0x10
c00133c9:	83 f8 03             	cmp    eax,0x3
c00133cc:	75 34                	jne    c0013402 <Fs::setcwd(Process*, char*)+0x95>
c00133ce:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00133d3:	75 2d                	jne    c0013402 <Fs::setcwd(Process*, char*)+0x95>
c00133d5:	eb cf                	jmp    c00133a6 <Fs::setcwd(Process*, char*)+0x39>
c00133d7:	8b 14 85 e0 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0920]
c00133de:	b8 05 00 00 00       	mov    eax,0x5
c00133e3:	85 d2                	test   edx,edx
c00133e5:	0f 84 b2 00 00 00    	je     c001349d <Fs::setcwd(Process*, char*)+0x130>
c00133eb:	b8 06 00 00 00       	mov    eax,0x6
c00133f0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133f7:	0f 85 92 00 00 00    	jne    c001348f <Fs::setcwd(Process*, char*)+0x122>
c00133fd:	e9 9b 00 00 00       	jmp    c001349d <Fs::setcwd(Process*, char*)+0x130>
c0013402:	83 ec 0c             	sub    esp,0xc
c0013405:	68 14 01 00 00       	push   0x114
c001340a:	e8 7d c4 ff ff       	call   c000f88c <malloc>
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	89 c3                	mov    ebx,eax
c0013414:	55                   	push   ebp
c0013415:	56                   	push   esi
c0013416:	50                   	push   eax
c0013417:	e8 e0 fb ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001341c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013421:	83 c4 0c             	add    esp,0xc
c0013424:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013428:	50                   	push   eax
c0013429:	8d 44 24 10          	lea    eax,[esp+0x10]
c001342d:	50                   	push   eax
c001342e:	53                   	push   ebx
c001342f:	e8 d8 fe ff ff       	call   c001330c <File::stat(unsigned long long*, bool*)>
c0013434:	83 c4 10             	add    esp,0x10
c0013437:	83 f8 02             	cmp    eax,0x2
c001343a:	74 04                	je     c0013440 <Fs::setcwd(Process*, char*)+0xd3>
c001343c:	85 c0                	test   eax,eax
c001343e:	74 1c                	je     c001345c <Fs::setcwd(Process*, char*)+0xef>
c0013440:	b8 01 00 00 00       	mov    eax,0x1
c0013445:	85 db                	test   ebx,ebx
c0013447:	74 54                	je     c001349d <Fs::setcwd(Process*, char*)+0x130>
c0013449:	83 ec 0c             	sub    esp,0xc
c001344c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001344e:	53                   	push   ebx
c001344f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	b8 01 00 00 00       	mov    eax,0x1
c001345a:	eb 41                	jmp    c001349d <Fs::setcwd(Process*, char*)+0x130>
c001345c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013461:	75 1c                	jne    c001347f <Fs::setcwd(Process*, char*)+0x112>
c0013463:	b8 02 00 00 00       	mov    eax,0x2
c0013468:	85 db                	test   ebx,ebx
c001346a:	74 31                	je     c001349d <Fs::setcwd(Process*, char*)+0x130>
c001346c:	83 ec 0c             	sub    esp,0xc
c001346f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013471:	53                   	push   ebx
c0013472:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	b8 02 00 00 00       	mov    eax,0x2
c001347d:	eb 1e                	jmp    c001349d <Fs::setcwd(Process*, char*)+0x130>
c001347f:	85 db                	test   ebx,ebx
c0013481:	74 0c                	je     c001348f <Fs::setcwd(Process*, char*)+0x122>
c0013483:	83 ec 0c             	sub    esp,0xc
c0013486:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013488:	53                   	push   ebx
c0013489:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001348c:	83 c4 10             	add    esp,0x10
c001348f:	50                   	push   eax
c0013490:	50                   	push   eax
c0013491:	56                   	push   esi
c0013492:	57                   	push   edi
c0013493:	e8 74 d3 fe ff       	call   c000080c <strcpy>
c0013498:	83 c4 10             	add    esp,0x10
c001349b:	31 c0                	xor    eax,eax
c001349d:	81 c4 1c 02 00 00    	add    esp,0x21c
c00134a3:	5b                   	pop    ebx
c00134a4:	5e                   	pop    esi
c00134a5:	5f                   	pop    edi
c00134a6:	5d                   	pop    ebp
c00134a7:	c3                   	ret    

c00134a8 <Directory::Directory(char const*, Process*)>:
c00134a8:	83 ec 0c             	sub    esp,0xc
c00134ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134af:	83 ec 08             	sub    esp,0x8
c00134b2:	6a 00                	push   0x0
c00134b4:	50                   	push   eax
c00134b5:	e8 9a dd ff ff       	call   c0011254 <UnixFile::UnixFile(int)>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	ba 54 b6 02 c0       	mov    edx,0xc002b654
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	89 10                	mov    DWORD PTR [eax],edx
c00134c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134cc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d6:	83 c0 0d             	add    eax,0xd
c00134d9:	83 ec 04             	sub    esp,0x4
c00134dc:	52                   	push   edx
c00134dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134e1:	50                   	push   eax
c00134e2:	e8 6b f9 ff ff       	call   c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134f1:	8d 50 bf             	lea    edx,[eax-0x41]
c00134f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013502:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013506:	90                   	nop
c0013507:	83 c4 0c             	add    esp,0xc
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <Directory::open()>:
c001350c:	53                   	push   ebx
c001350d:	b8 0b 00 00 00       	mov    eax,0xb
c0013512:	83 ec 08             	sub    esp,0x8
c0013515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013519:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013520:	80 fa 19             	cmp    dl,0x19
c0013523:	77 3d                	ja     c0013562 <Directory::open()+0x56>
c0013525:	8b 14 95 e0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0920]
c001352c:	85 d2                	test   edx,edx
c001352e:	74 32                	je     c0013562 <Directory::open()+0x56>
c0013530:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013536:	85 d2                	test   edx,edx
c0013538:	74 28                	je     c0013562 <Directory::open()+0x56>
c001353a:	b8 06 00 00 00       	mov    eax,0x6
c001353f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013543:	75 1d                	jne    c0013562 <Directory::open()+0x56>
c0013545:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001354b:	50                   	push   eax
c001354c:	8b 02                	mov    eax,DWORD PTR [edx]
c001354e:	51                   	push   ecx
c001354f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013552:	51                   	push   ecx
c0013553:	52                   	push   edx
c0013554:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	85 c0                	test   eax,eax
c001355c:	75 04                	jne    c0013562 <Directory::open()+0x56>
c001355e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013562:	83 c4 08             	add    esp,0x8
c0013565:	5b                   	pop    ebx
c0013566:	c3                   	ret    
c0013567:	90                   	nop

c0013568 <Directory::close()>:
c0013568:	53                   	push   ebx
c0013569:	b8 0b 00 00 00       	mov    eax,0xb
c001356e:	83 ec 08             	sub    esp,0x8
c0013571:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013575:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001357c:	80 fa 19             	cmp    dl,0x19
c001357f:	77 41                	ja     c00135c2 <Directory::close()+0x5a>
c0013581:	8b 1c 95 e0 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0920]
c0013588:	85 db                	test   ebx,ebx
c001358a:	74 36                	je     c00135c2 <Directory::close()+0x5a>
c001358c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013593:	74 2d                	je     c00135c2 <Directory::close()+0x5a>
c0013595:	b8 05 00 00 00       	mov    eax,0x5
c001359a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001359e:	74 22                	je     c00135c2 <Directory::close()+0x5a>
c00135a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135a4:	8b 04 95 e0 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0920]
c00135ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135b1:	53                   	push   ebx
c00135b2:	53                   	push   ebx
c00135b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00135b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135bb:	50                   	push   eax
c00135bc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	83 c4 08             	add    esp,0x8
c00135c5:	5b                   	pop    ebx
c00135c6:	c3                   	ret    
c00135c7:	90                   	nop

c00135c8 <Directory::unlink()>:
c00135c8:	83 ec 0c             	sub    esp,0xc
c00135cb:	b8 0b 00 00 00       	mov    eax,0xb
c00135d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135db:	80 f9 19             	cmp    cl,0x19
c00135de:	77 2f                	ja     c001360f <Directory::unlink()+0x47>
c00135e0:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c00135e7:	85 c9                	test   ecx,ecx
c00135e9:	74 24                	je     c001360f <Directory::unlink()+0x47>
c00135eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f1:	85 c9                	test   ecx,ecx
c00135f3:	74 1a                	je     c001360f <Directory::unlink()+0x47>
c00135f5:	b8 06 00 00 00       	mov    eax,0x6
c00135fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135fe:	75 0f                	jne    c001360f <Directory::unlink()+0x47>
c0013600:	83 c2 0d             	add    edx,0xd
c0013603:	50                   	push   eax
c0013604:	50                   	push   eax
c0013605:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013607:	52                   	push   edx
c0013608:	51                   	push   ecx
c0013609:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001360c:	83 c4 10             	add    esp,0x10
c001360f:	83 c4 0c             	add    esp,0xc
c0013612:	c3                   	ret    
c0013613:	90                   	nop

c0013614 <Directory::rename(char const*)>:
c0013614:	83 ec 0c             	sub    esp,0xc
c0013617:	b8 0b 00 00 00       	mov    eax,0xb
c001361c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013620:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013627:	80 f9 19             	cmp    cl,0x19
c001362a:	77 32                	ja     c001365e <Directory::rename(char const*)+0x4a>
c001362c:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c0013633:	85 c9                	test   ecx,ecx
c0013635:	74 27                	je     c001365e <Directory::rename(char const*)+0x4a>
c0013637:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001363d:	85 c9                	test   ecx,ecx
c001363f:	74 1d                	je     c001365e <Directory::rename(char const*)+0x4a>
c0013641:	b8 06 00 00 00       	mov    eax,0x6
c0013646:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001364a:	75 12                	jne    c001365e <Directory::rename(char const*)+0x4a>
c001364c:	83 c2 0d             	add    edx,0xd
c001364f:	50                   	push   eax
c0013650:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013656:	52                   	push   edx
c0013657:	51                   	push   ecx
c0013658:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001365b:	83 c4 10             	add    esp,0x10
c001365e:	83 c4 0c             	add    esp,0xc
c0013661:	c3                   	ret    

c0013662 <Directory::exists()>:
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	31 c0                	xor    eax,eax
c0013667:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001366b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013672:	80 f9 19             	cmp    cl,0x19
c0013675:	77 24                	ja     c001369b <Directory::exists()+0x39>
c0013677:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c001367e:	85 c9                	test   ecx,ecx
c0013680:	74 19                	je     c001369b <Directory::exists()+0x39>
c0013682:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013688:	85 c9                	test   ecx,ecx
c001368a:	74 0f                	je     c001369b <Directory::exists()+0x39>
c001368c:	83 c2 0d             	add    edx,0xd
c001368f:	50                   	push   eax
c0013690:	50                   	push   eax
c0013691:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013693:	52                   	push   edx
c0013694:	51                   	push   ecx
c0013695:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013698:	83 c4 10             	add    esp,0x10
c001369b:	83 c4 0c             	add    esp,0xc
c001369e:	c3                   	ret    
c001369f:	90                   	nop

c00136a0 <Directory::read(dirent*)>:
c00136a0:	83 ec 1c             	sub    esp,0x1c
c00136a3:	b8 0b 00 00 00       	mov    eax,0xb
c00136a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00136ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136b3:	80 fa 19             	cmp    dl,0x19
c00136b6:	77 30                	ja     c00136e8 <Directory::read(dirent*)+0x48>
c00136b8:	8b 14 95 e0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0920]
c00136bf:	85 d2                	test   edx,edx
c00136c1:	74 25                	je     c00136e8 <Directory::read(dirent*)+0x48>
c00136c3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00136ca:	74 1c                	je     c00136e8 <Directory::read(dirent*)+0x48>
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136d1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00136d5:	52                   	push   edx
c00136d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00136da:	6a 00                	push   0x0
c00136dc:	68 10 01 00 00       	push   0x110
c00136e1:	51                   	push   ecx
c00136e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136e5:	83 c4 20             	add    esp,0x20
c00136e8:	83 c4 1c             	add    esp,0x1c
c00136eb:	c3                   	ret    

c00136ec <Directory::create()>:
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	b8 0b 00 00 00       	mov    eax,0xb
c00136f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136ff:	80 f9 19             	cmp    cl,0x19
c0013702:	77 2f                	ja     c0013733 <Directory::create()+0x47>
c0013704:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c001370b:	85 c9                	test   ecx,ecx
c001370d:	74 24                	je     c0013733 <Directory::create()+0x47>
c001370f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013715:	85 c9                	test   ecx,ecx
c0013717:	74 1a                	je     c0013733 <Directory::create()+0x47>
c0013719:	b8 06 00 00 00       	mov    eax,0x6
c001371e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013722:	75 0f                	jne    c0013733 <Directory::create()+0x47>
c0013724:	83 c2 0d             	add    edx,0xd
c0013727:	50                   	push   eax
c0013728:	50                   	push   eax
c0013729:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372b:	52                   	push   edx
c001372c:	51                   	push   ecx
c001372d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013730:	83 c4 10             	add    esp,0x10
c0013733:	83 c4 0c             	add    esp,0xc
c0013736:	c3                   	ret    
c0013737:	90                   	nop

c0013738 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013738:	b8 0a 00 00 00       	mov    eax,0xa
c001373d:	c3                   	ret    

c001373e <Bus::Bus(char const*)>:
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013745:	83 ec 08             	sub    esp,0x8
c0013748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001374c:	50                   	push   eax
c001374d:	e8 88 09 00 00       	call   c00140da <Device::Device(char const*)>
c0013752:	83 c4 10             	add    esp,0x10
c0013755:	ba 70 b6 02 c0       	mov    edx,0xc002b670
c001375a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375e:	89 10                	mov    DWORD PTR [eax],edx
c0013760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013764:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001376e:	90                   	nop
c001376f:	83 c4 0c             	add    esp,0xc
c0013772:	c3                   	ret    
c0013773:	90                   	nop

c0013774 <Bus::~Bus()>:
c0013774:	83 ec 0c             	sub    esp,0xc
c0013777:	ba 70 b6 02 c0       	mov    edx,0xc002b670
c001377c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013780:	89 10                	mov    DWORD PTR [eax],edx
c0013782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013786:	83 ec 0c             	sub    esp,0xc
c0013789:	50                   	push   eax
c001378a:	e8 15 06 00 00       	call   c0013da4 <Device::~Device()>
c001378f:	83 c4 10             	add    esp,0x10
c0013792:	90                   	nop
c0013793:	83 c4 0c             	add    esp,0xc
c0013796:	c3                   	ret    
c0013797:	90                   	nop

c0013798 <Bus::~Bus()>:
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	83 ec 0c             	sub    esp,0xc
c001379e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a2:	e8 cd ff ff ff       	call   c0013774 <Bus::~Bus()>
c00137a7:	83 c4 10             	add    esp,0x10
c00137aa:	83 ec 08             	sub    esp,0x8
c00137ad:	68 58 01 00 00       	push   0x158
c00137b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b6:	e8 02 f2 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00137bb:	83 c4 10             	add    esp,0x10
c00137be:	83 c4 0c             	add    esp,0xc
c00137c1:	c3                   	ret    

c00137c2 <Buzzer::Buzzer(char const*)>:
c00137c2:	83 ec 0c             	sub    esp,0xc
c00137c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c9:	83 ec 08             	sub    esp,0x8
c00137cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d0:	50                   	push   eax
c00137d1:	e8 04 09 00 00       	call   c00140da <Device::Device(char const*)>
c00137d6:	83 c4 10             	add    esp,0x10
c00137d9:	ba 9c b6 02 c0       	mov    edx,0xc002b69c
c00137de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e2:	89 10                	mov    DWORD PTR [eax],edx
c00137e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00137f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013800:	90                   	nop
c0013801:	83 c4 0c             	add    esp,0xc
c0013804:	c3                   	ret    
c0013805:	90                   	nop

c0013806 <Buzzer::~Buzzer()>:
c0013806:	83 ec 0c             	sub    esp,0xc
c0013809:	ba 9c b6 02 c0       	mov    edx,0xc002b69c
c001380e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013812:	89 10                	mov    DWORD PTR [eax],edx
c0013814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013818:	83 ec 0c             	sub    esp,0xc
c001381b:	50                   	push   eax
c001381c:	e8 83 05 00 00       	call   c0013da4 <Device::~Device()>
c0013821:	83 c4 10             	add    esp,0x10
c0013824:	90                   	nop
c0013825:	83 c4 0c             	add    esp,0xc
c0013828:	c3                   	ret    
c0013829:	90                   	nop

c001382a <Buzzer::~Buzzer()>:
c001382a:	83 ec 0c             	sub    esp,0xc
c001382d:	83 ec 0c             	sub    esp,0xc
c0013830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013834:	e8 cd ff ff ff       	call   c0013806 <Buzzer::~Buzzer()>
c0013839:	83 c4 10             	add    esp,0x10
c001383c:	83 ec 08             	sub    esp,0x8
c001383f:	68 5c 01 00 00       	push   0x15c
c0013844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013848:	e8 70 f1 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	83 c4 0c             	add    esp,0xc
c0013853:	c3                   	ret    

c0013854 <Buzzer::stop()>:
c0013854:	83 ec 14             	sub    esp,0x14
c0013857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001385b:	8b 10                	mov    edx,DWORD PTR [eax]
c001385d:	6a 00                	push   0x0
c001385f:	50                   	push   eax
c0013860:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013863:	83 c4 1c             	add    esp,0x1c
c0013866:	c3                   	ret    

c0013867 <beepThread(void*)>:
c0013867:	53                   	push   ebx
c0013868:	83 ec 08             	sub    esp,0x8
c001386b:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0013870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013874:	48                   	dec    eax
c0013875:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001387a:	75 01                	jne    c001387d <beepThread(void*)+0x16>
c001387c:	fb                   	sti    
c001387d:	50                   	push   eax
c001387e:	50                   	push   eax
c001387f:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013884:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001388a:	52                   	push   edx
c001388b:	50                   	push   eax
c001388c:	e8 f8 ac 00 00       	call   c001e589 <nanoSleep(unsigned long long)>
c0013891:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013894:	e8 bb ff ff ff       	call   c0013854 <Buzzer::stop()>
c0013899:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00138a1:	83 c4 18             	add    esp,0x18
c00138a4:	5b                   	pop    ebx
c00138a5:	e9 db ab 00 00       	jmp    c001e485 <blockTask(TaskState)>

c00138aa <Buzzer::beep(int, int, bool)>:
c00138aa:	57                   	push   edi
c00138ab:	56                   	push   esi
c00138ac:	53                   	push   ebx
c00138ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00138b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00138b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138b9:	52                   	push   edx
c00138ba:	52                   	push   edx
c00138bb:	8b 06                	mov    eax,DWORD PTR [esi]
c00138bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c1:	56                   	push   esi
c00138c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00138c5:	83 c4 10             	add    esp,0x10
c00138c8:	89 f8                	mov    eax,edi
c00138ca:	84 c0                	test   al,al
c00138cc:	74 1f                	je     c00138ed <Buzzer::beep(int, int, bool)+0x43>
c00138ce:	50                   	push   eax
c00138cf:	50                   	push   eax
c00138d0:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00138d6:	99                   	cdq    
c00138d7:	52                   	push   edx
c00138d8:	50                   	push   eax
c00138d9:	e8 ab ac 00 00       	call   c001e589 <nanoSleep(unsigned long long)>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138e5:	5b                   	pop    ebx
c00138e6:	5e                   	pop    esi
c00138e7:	5f                   	pop    edi
c00138e8:	e9 67 ff ff ff       	jmp    c0013854 <Buzzer::stop()>
c00138ed:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00138f3:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c00138f8:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013900:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013904:	c7 44 24 14 67 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013867
c001390c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013910:	5b                   	pop    ebx
c0013911:	5e                   	pop    esi
c0013912:	5f                   	pop    edi
c0013913:	e9 2a a7 00 00       	jmp    c001e042 <Process::createThread(void (*)(void*), void*, int)>

c0013918 <User::loadClockSettings(int)>:
c0013918:	53                   	push   ebx
c0013919:	83 ec 14             	sub    esp,0x14
c001391c:	68 14 01 00 00       	push   0x114
c0013921:	e8 66 bf ff ff       	call   c000f88c <malloc>
c0013926:	83 c4 0c             	add    esp,0xc
c0013929:	89 c3                	mov    ebx,eax
c001392b:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c0013931:	68 c4 b6 02 c0       	push   0xc002b6c4
c0013936:	50                   	push   eax
c0013937:	e8 c0 f6 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001393c:	58                   	pop    eax
c001393d:	5a                   	pop    edx
c001393e:	6a 01                	push   0x1
c0013940:	53                   	push   ebx
c0013941:	e8 1a f7 ff ff       	call   c0013060 <File::open(FileOpenMode)>
c0013946:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013949:	e8 70 f7 ff ff       	call   c00130be <File::close()>
c001394e:	83 c4 10             	add    esp,0x10
c0013951:	85 db                	test   ebx,ebx
c0013953:	74 0f                	je     c0013964 <User::loadClockSettings(int)+0x4c>
c0013955:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013957:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001395b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001395e:	83 c4 08             	add    esp,0x8
c0013961:	5b                   	pop    ebx
c0013962:	ff e0                	jmp    eax
c0013964:	83 c4 08             	add    esp,0x8
c0013967:	5b                   	pop    ebx
c0013968:	c3                   	ret    
c0013969:	90                   	nop

c001396a <Clock::Clock(char const*)>:
c001396a:	83 ec 0c             	sub    esp,0xc
c001396d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013971:	83 ec 08             	sub    esp,0x8
c0013974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013978:	50                   	push   eax
c0013979:	e8 5c 07 00 00       	call   c00140da <Device::Device(char const*)>
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	ba ec b6 02 c0       	mov    edx,0xc002b6ec
c0013986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398a:	89 10                	mov    DWORD PTR [eax],edx
c001398c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013990:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001399a:	90                   	nop
c001399b:	83 c4 0c             	add    esp,0xc
c001399e:	c3                   	ret    
c001399f:	90                   	nop

c00139a0 <Clock::~Clock()>:
c00139a0:	83 ec 0c             	sub    esp,0xc
c00139a3:	ba ec b6 02 c0       	mov    edx,0xc002b6ec
c00139a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ac:	89 10                	mov    DWORD PTR [eax],edx
c00139ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b2:	83 ec 0c             	sub    esp,0xc
c00139b5:	50                   	push   eax
c00139b6:	e8 e9 03 00 00       	call   c0013da4 <Device::~Device()>
c00139bb:	83 c4 10             	add    esp,0x10
c00139be:	90                   	nop
c00139bf:	83 c4 0c             	add    esp,0xc
c00139c2:	c3                   	ret    
c00139c3:	90                   	nop

c00139c4 <Clock::~Clock()>:
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	83 ec 0c             	sub    esp,0xc
c00139ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ce:	e8 cd ff ff ff       	call   c00139a0 <Clock::~Clock()>
c00139d3:	83 c4 10             	add    esp,0x10
c00139d6:	83 ec 08             	sub    esp,0x8
c00139d9:	68 58 01 00 00       	push   0x158
c00139de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e2:	e8 d6 ef ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00139e7:	83 c4 10             	add    esp,0x10
c00139ea:	83 c4 0c             	add    esp,0xc
c00139ed:	c3                   	ret    

c00139ee <Clock::timeInSecondsLocal()>:
c00139ee:	53                   	push   ebx
c00139ef:	83 ec 14             	sub    esp,0x14
c00139f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00139f8:	50                   	push   eax
c00139f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00139fc:	0f b6 0d 5c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f25c
c0013a03:	03 0d 60 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f260
c0013a09:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a0f:	89 cb                	mov    ebx,ecx
c0013a11:	c1 fb 1f             	sar    ebx,0x1f
c0013a14:	01 c8                	add    eax,ecx
c0013a16:	11 da                	adc    edx,ebx
c0013a18:	83 c4 10             	add    esp,0x10
c0013a1b:	31 c9                	xor    ecx,ecx
c0013a1d:	80 3d 5d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f25d,0x0
c0013a24:	74 05                	je     c0013a2b <Clock::timeInSecondsLocal()+0x3d>
c0013a26:	b9 08 07 00 00       	mov    ecx,0x708
c0013a2b:	31 db                	xor    ebx,ebx
c0013a2d:	01 c8                	add    eax,ecx
c0013a2f:	11 da                	adc    edx,ebx
c0013a31:	83 c4 08             	add    esp,0x8
c0013a34:	5b                   	pop    ebx
c0013a35:	c3                   	ret    

c0013a36 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013a36:	57                   	push   edi
c0013a37:	56                   	push   esi
c0013a38:	53                   	push   ebx
c0013a39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a41:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a47:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013a4a:	0f b6 05 5c f2 02 c0 	movzx  eax,BYTE PTR ds:0xc002f25c
c0013a51:	03 05 60 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f260
c0013a57:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013a5d:	99                   	cdq    
c0013a5e:	29 c6                	sub    esi,eax
c0013a60:	19 d7                	sbb    edi,edx
c0013a62:	89 f0                	mov    eax,esi
c0013a64:	89 fa                	mov    edx,edi
c0013a66:	31 f6                	xor    esi,esi
c0013a68:	80 3d 5d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f25d,0x0
c0013a6f:	74 05                	je     c0013a76 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013a71:	be 08 07 00 00       	mov    esi,0x708
c0013a76:	31 ff                	xor    edi,edi
c0013a78:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013a7c:	29 f0                	sub    eax,esi
c0013a7e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a82:	19 fa                	sbb    edx,edi
c0013a84:	89 d8                	mov    eax,ebx
c0013a86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a8a:	5b                   	pop    ebx
c0013a8b:	5e                   	pop    esi
c0013a8c:	5f                   	pop    edi
c0013a8d:	ff e0                	jmp    eax

c0013a8f <datetimeToSeconds(datetime_t)>:
c0013a8f:	55                   	push   ebp
c0013a90:	57                   	push   edi
c0013a91:	56                   	push   esi
c0013a92:	53                   	push   ebx
c0013a93:	83 ec 14             	sub    esp,0x14
c0013a96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013a9a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013a9e:	89 d3                	mov    ebx,edx
c0013aa0:	0f b6 c6             	movzx  eax,dh
c0013aa3:	c1 eb 10             	shr    ebx,0x10
c0013aa6:	48                   	dec    eax
c0013aa7:	66 81 eb 6c 07       	sub    bx,0x76c
c0013aac:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ab0:	0f b6 f5             	movzx  esi,ch
c0013ab3:	89 cf                	mov    edi,ecx
c0013ab5:	6b f6 3c             	imul   esi,esi,0x3c
c0013ab8:	c1 ef 10             	shr    edi,0x10
c0013abb:	0f b6 c9             	movzx  ecx,cl
c0013abe:	89 f8                	mov    eax,edi
c0013ac0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ac6:	0f b6 f8             	movzx  edi,al
c0013ac9:	0f b6 d2             	movzx  edx,dl
c0013acc:	01 fe                	add    esi,edi
c0013ace:	01 f1                	add    ecx,esi
c0013ad0:	0f b7 f3             	movzx  esi,bx
c0013ad3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ad7:	c1 f9 1f             	sar    ecx,0x1f
c0013ada:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013adf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ae3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ae8:	8b 0c 8d 20 b7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd48e0]
c0013aef:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013af3:	76 29                	jbe    c0013b1e <datetimeToSeconds(datetime_t)+0x8f>
c0013af5:	f6 c3 03             	test   bl,0x3
c0013af8:	75 24                	jne    c0013b1e <datetimeToSeconds(datetime_t)+0x8f>
c0013afa:	31 d2                	xor    edx,edx
c0013afc:	bf 64 00 00 00       	mov    edi,0x64
c0013b01:	89 d8                	mov    eax,ebx
c0013b03:	66 f7 f7             	div    di
c0013b06:	66 85 d2             	test   dx,dx
c0013b09:	75 12                	jne    c0013b1d <datetimeToSeconds(datetime_t)+0x8e>
c0013b0b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013b11:	bf 90 01 00 00       	mov    edi,0x190
c0013b16:	99                   	cdq    
c0013b17:	f7 ff                	idiv   edi
c0013b19:	85 d2                	test   edx,edx
c0013b1b:	75 01                	jne    c0013b1e <datetimeToSeconds(datetime_t)+0x8f>
c0013b1d:	41                   	inc    ecx
c0013b1e:	66 83 fb 46          	cmp    bx,0x46
c0013b22:	76 45                	jbe    c0013b69 <datetimeToSeconds(datetime_t)+0xda>
c0013b24:	bb 46 00 00 00       	mov    ebx,0x46
c0013b29:	bf 64 00 00 00       	mov    edi,0x64
c0013b2e:	bd 90 01 00 00       	mov    ebp,0x190
c0013b33:	b8 6d 01 00 00       	mov    eax,0x16d
c0013b38:	f6 c3 03             	test   bl,0x3
c0013b3b:	75 23                	jne    c0013b60 <datetimeToSeconds(datetime_t)+0xd1>
c0013b3d:	89 d8                	mov    eax,ebx
c0013b3f:	99                   	cdq    
c0013b40:	f7 ff                	idiv   edi
c0013b42:	b8 6e 01 00 00       	mov    eax,0x16e
c0013b47:	85 d2                	test   edx,edx
c0013b49:	75 15                	jne    c0013b60 <datetimeToSeconds(datetime_t)+0xd1>
c0013b4b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013b51:	99                   	cdq    
c0013b52:	f7 fd                	idiv   ebp
c0013b54:	83 fa 01             	cmp    edx,0x1
c0013b57:	19 c0                	sbb    eax,eax
c0013b59:	f7 d0                	not    eax
c0013b5b:	05 6e 01 00 00       	add    eax,0x16e
c0013b60:	01 c1                	add    ecx,eax
c0013b62:	43                   	inc    ebx
c0013b63:	39 f3                	cmp    ebx,esi
c0013b65:	7c cc                	jl     c0013b33 <datetimeToSeconds(datetime_t)+0xa4>
c0013b67:	eb 35                	jmp    c0013b9e <datetimeToSeconds(datetime_t)+0x10f>
c0013b69:	74 33                	je     c0013b9e <datetimeToSeconds(datetime_t)+0x10f>
c0013b6b:	b8 45 00 00 00       	mov    eax,0x45
c0013b70:	89 c2                	mov    edx,eax
c0013b72:	83 e2 03             	and    edx,0x3
c0013b75:	39 f0                	cmp    eax,esi
c0013b77:	7e 0f                	jle    c0013b88 <datetimeToSeconds(datetime_t)+0xf9>
c0013b79:	83 fa 01             	cmp    edx,0x1
c0013b7c:	19 d2                	sbb    edx,edx
c0013b7e:	48                   	dec    eax
c0013b7f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013b86:	eb e8                	jmp    c0013b70 <datetimeToSeconds(datetime_t)+0xe1>
c0013b88:	b8 6d 01 00 00       	mov    eax,0x16d
c0013b8d:	85 d2                	test   edx,edx
c0013b8f:	75 0b                	jne    c0013b9c <datetimeToSeconds(datetime_t)+0x10d>
c0013b91:	66 83 fb 01          	cmp    bx,0x1
c0013b95:	19 c0                	sbb    eax,eax
c0013b97:	05 6e 01 00 00       	add    eax,0x16e
c0013b9c:	29 c1                	sub    ecx,eax
c0013b9e:	b8 80 51 01 00       	mov    eax,0x15180
c0013ba3:	f7 e9                	imul   ecx
c0013ba5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ba9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013bad:	83 c4 14             	add    esp,0x14
c0013bb0:	5b                   	pop    ebx
c0013bb1:	5e                   	pop    esi
c0013bb2:	5f                   	pop    edi
c0013bb3:	5d                   	pop    ebp
c0013bb4:	c3                   	ret    
c0013bb5:	90                   	nop

c0013bb6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013bb6:	57                   	push   edi
c0013bb7:	56                   	push   esi
c0013bb8:	53                   	push   ebx
c0013bb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bbd:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bbf:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013bc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bca:	e8 c0 fe ff ff       	call   c0013a8f <datetimeToSeconds(datetime_t)>
c0013bcf:	59                   	pop    ecx
c0013bd0:	0f b6 0d 5c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f25c
c0013bd7:	5b                   	pop    ebx
c0013bd8:	03 0d 60 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f260
c0013bde:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013be4:	89 cb                	mov    ebx,ecx
c0013be6:	c1 fb 1f             	sar    ebx,0x1f
c0013be9:	29 c8                	sub    eax,ecx
c0013beb:	19 da                	sbb    edx,ebx
c0013bed:	31 c9                	xor    ecx,ecx
c0013bef:	80 3d 5d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f25d,0x0
c0013bf6:	74 05                	je     c0013bfd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013bf8:	b9 08 07 00 00       	mov    ecx,0x708
c0013bfd:	31 db                	xor    ebx,ebx
c0013bff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c03:	29 c8                	sub    eax,ecx
c0013c05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c09:	19 da                	sbb    edx,ebx
c0013c0b:	89 f8                	mov    eax,edi
c0013c0d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013c11:	5b                   	pop    ebx
c0013c12:	5e                   	pop    esi
c0013c13:	5f                   	pop    edi
c0013c14:	ff e0                	jmp    eax

c0013c16 <secondsToDatetime(unsigned long long)>:
c0013c16:	55                   	push   ebp
c0013c17:	57                   	push   edi
c0013c18:	56                   	push   esi
c0013c19:	53                   	push   ebx
c0013c1a:	83 ec 1c             	sub    esp,0x1c
c0013c1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c21:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013c25:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013c29:	6a 00                	push   0x0
c0013c2b:	68 80 51 01 00       	push   0x15180
c0013c30:	55                   	push   ebp
c0013c31:	57                   	push   edi
c0013c32:	e8 fd 37 01 00       	call   c0027434 <__udivdi3>
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013c44:	6a 00                	push   0x0
c0013c46:	68 80 51 01 00       	push   0x15180
c0013c4b:	55                   	push   ebp
c0013c4c:	57                   	push   edi
c0013c4d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013c52:	e8 dd 38 01 00       	call   c0027534 <__umoddi3>
c0013c57:	83 c4 10             	add    esp,0x10
c0013c5a:	99                   	cdq    
c0013c5b:	f7 ff                	idiv   edi
c0013c5d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013c62:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013c65:	89 d0                	mov    eax,edx
c0013c67:	99                   	cdq    
c0013c68:	f7 ff                	idiv   edi
c0013c6a:	85 db                	test   ebx,ebx
c0013c6c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013c6f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013c72:	79 11                	jns    c0013c85 <secondsToDatetime(unsigned long long)+0x6f>
c0013c74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013c78:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013c7e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013c83:	eb 07                	jmp    c0013c8c <secondsToDatetime(unsigned long long)+0x76>
c0013c85:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013c8a:	89 d8                	mov    eax,ebx
c0013c8c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013c91:	99                   	cdq    
c0013c92:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013c97:	f7 f9                	idiv   ecx
c0013c99:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013c9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ca2:	31 d2                	xor    edx,edx
c0013ca4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013cac:	01 c3                	add    ebx,eax
c0013cae:	89 d8                	mov    eax,ebx
c0013cb0:	f7 f1                	div    ecx
c0013cb2:	31 d2                	xor    edx,edx
c0013cb4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013cb7:	89 d8                	mov    eax,ebx
c0013cb9:	f7 f7                	div    edi
c0013cbb:	31 d2                	xor    edx,edx
c0013cbd:	29 c1                	sub    ecx,eax
c0013cbf:	89 d8                	mov    eax,ebx
c0013cc1:	f7 f5                	div    ebp
c0013cc3:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013cc8:	29 c1                	sub    ecx,eax
c0013cca:	31 d2                	xor    edx,edx
c0013ccc:	89 c8                	mov    eax,ecx
c0013cce:	f7 f5                	div    ebp
c0013cd0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013cd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cd9:	31 d2                	xor    edx,edx
c0013cdb:	89 c8                	mov    eax,ecx
c0013cdd:	f7 f5                	div    ebp
c0013cdf:	31 d2                	xor    edx,edx
c0013ce1:	01 c3                	add    ebx,eax
c0013ce3:	89 c8                	mov    eax,ecx
c0013ce5:	f7 f7                	div    edi
c0013ce7:	bf 99 00 00 00       	mov    edi,0x99
c0013cec:	29 c3                	sub    ebx,eax
c0013cee:	31 d2                	xor    edx,edx
c0013cf0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013cf8:	29 c3                	sub    ebx,eax
c0013cfa:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013cfd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d00:	bb 05 00 00 00       	mov    ebx,0x5
c0013d05:	83 c1 02             	add    ecx,0x2
c0013d08:	89 c8                	mov    eax,ecx
c0013d0a:	f7 f7                	div    edi
c0013d0c:	31 d2                	xor    edx,edx
c0013d0e:	89 c7                	mov    edi,eax
c0013d10:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013d16:	83 c0 02             	add    eax,0x2
c0013d19:	f7 f3                	div    ebx
c0013d1b:	89 eb                	mov    ebx,ebp
c0013d1d:	29 c3                	sub    ebx,eax
c0013d1f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013d25:	88 1e                	mov    BYTE PTR [esi],bl
c0013d27:	19 c0                	sbb    eax,eax
c0013d29:	31 d2                	xor    edx,edx
c0013d2b:	83 e0 0c             	and    eax,0xc
c0013d2e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013d32:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013d3a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013d3e:	83 f9 01             	cmp    ecx,0x1
c0013d41:	0f 96 c2             	setbe  dl
c0013d44:	41                   	inc    ecx
c0013d45:	01 d0                	add    eax,edx
c0013d47:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013d4a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013d4e:	83 c4 1c             	add    esp,0x1c
c0013d51:	89 f0                	mov    eax,esi
c0013d53:	5b                   	pop    ebx
c0013d54:	5e                   	pop    esi
c0013d55:	5f                   	pop    edi
c0013d56:	5d                   	pop    ebp
c0013d57:	c2 04 00             	ret    0x4

c0013d5a <Clock::timeInDatetimeLocal()>:
c0013d5a:	53                   	push   ebx
c0013d5b:	83 ec 14             	sub    esp,0x14
c0013d5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d66:	e8 83 fc ff ff       	call   c00139ee <Clock::timeInSecondsLocal()>
c0013d6b:	83 c4 0c             	add    esp,0xc
c0013d6e:	52                   	push   edx
c0013d6f:	50                   	push   eax
c0013d70:	53                   	push   ebx
c0013d71:	e8 a0 fe ff ff       	call   c0013c16 <secondsToDatetime(unsigned long long)>
c0013d76:	89 d8                	mov    eax,ebx
c0013d78:	83 c4 14             	add    esp,0x14
c0013d7b:	5b                   	pop    ebx
c0013d7c:	c2 04 00             	ret    0x4
c0013d7f:	90                   	nop

c0013d80 <Device::hibernate()>:
c0013d80:	c3                   	ret    
c0013d81:	90                   	nop

c0013d82 <Device::wake()>:
c0013d82:	c3                   	ret    
c0013d83:	90                   	nop

c0013d84 <Device::detect()>:
c0013d84:	c3                   	ret    
c0013d85:	90                   	nop

c0013d86 <Device::disableLegacy()>:
c0013d86:	c3                   	ret    
c0013d87:	90                   	nop

c0013d88 <Device::powerSaving(PowerSavingLevel)>:
c0013d88:	c3                   	ret    
c0013d89:	90                   	nop

c0013d8a <DriverlessDevice::close(int, int, void*)>:
c0013d8a:	31 c0                	xor    eax,eax
c0013d8c:	c3                   	ret    
c0013d8d:	90                   	nop

c0013d8e <DriverlessDevice::detect()>:
c0013d8e:	c3                   	ret    
c0013d8f:	90                   	nop

c0013d90 <DriverlessDevice::open(int, int, void*)>:
c0013d90:	83 ec 18             	sub    esp,0x18
c0013d93:	68 50 b7 02 c0       	push   0xc002b750
c0013d98:	e8 36 67 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0013d9d:	83 c8 ff             	or     eax,0xffffffff
c0013da0:	83 c4 1c             	add    esp,0x1c
c0013da3:	c3                   	ret    

c0013da4 <Device::~Device()>:
c0013da4:	ba b0 b7 02 c0       	mov    edx,0xc002b7b0
c0013da9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dad:	89 10                	mov    DWORD PTR [eax],edx
c0013daf:	90                   	nop
c0013db0:	c3                   	ret    
c0013db1:	90                   	nop

c0013db2 <Device::~Device()>:
c0013db2:	83 ec 0c             	sub    esp,0xc
c0013db5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013db9:	e8 e6 ff ff ff       	call   c0013da4 <Device::~Device()>
c0013dbe:	83 c4 04             	add    esp,0x4
c0013dc1:	83 ec 08             	sub    esp,0x8
c0013dc4:	68 58 01 00 00       	push   0x158
c0013dc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dcd:	e8 eb eb ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0013dd2:	83 c4 10             	add    esp,0x10
c0013dd5:	83 c4 0c             	add    esp,0xc
c0013dd8:	c3                   	ret    
c0013dd9:	90                   	nop

c0013dda <Device::findAndLoadDriver()>:
c0013dda:	c7 44 24 04 6e b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b76e
c0013de2:	e9 b6 ec ff ff       	jmp    c0012a9d <Dbg::kprintf(char const*, ...)>
c0013de7:	90                   	nop

c0013de8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013de8:	57                   	push   edi
c0013de9:	b9 09 00 00 00       	mov    ecx,0x9
c0013dee:	56                   	push   esi
c0013def:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013df3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013df7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e01:	81 c7 18 01 00 00    	add    edi,0x118
c0013e07:	fc                   	cld    
c0013e08:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e0a:	5e                   	pop    esi
c0013e0b:	5f                   	pop    edi
c0013e0c:	c3                   	ret    
c0013e0d:	90                   	nop

c0013e0e <Device::preOpenACPI(void*, char*, char*)>:
c0013e0e:	57                   	push   edi
c0013e0f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013e14:	56                   	push   esi
c0013e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e1d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013e27:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013e2d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013e33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e39:	b9 0e 00 00 00       	mov    ecx,0xe
c0013e3e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013e44:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e4a:	5e                   	pop    esi
c0013e4b:	5f                   	pop    edi
c0013e4c:	c3                   	ret    
c0013e4d:	90                   	nop

c0013e4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013e4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e52:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013e57:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013e5e:	75 0b                	jne    c0013e6b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e66:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013e69:	eb 1e                	jmp    c0013e89 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013e6b:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0013e70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e76:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013e7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e86:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013e89:	ff e0                	jmp    eax
c0013e8b:	90                   	nop

c0013e8c <Device::getParent()>:
c0013e8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e90:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013e96:	c3                   	ret    
c0013e97:	90                   	nop

c0013e98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e9c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ea1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ea8:	75 0b                	jne    c0013eb5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013eaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0013eac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013eb0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013eb3:	eb 1e                	jmp    c0013ed3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013eb5:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0013eba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ec0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ec6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ec8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ecc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ed0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013ed3:	ff e0                	jmp    eax
c0013ed5:	90                   	nop

c0013ed6 <Device::addChild(Device*)>:
c0013ed6:	53                   	push   ebx
c0013ed7:	83 ec 08             	sub    esp,0x8
c0013eda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ee2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013ee8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013eee:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013ef0:	85 d2                	test   edx,edx
c0013ef2:	74 04                	je     c0013ef8 <Device::addChild(Device*)+0x22>
c0013ef4:	89 d3                	mov    ebx,edx
c0013ef6:	eb f6                	jmp    c0013eee <Device::addChild(Device*)+0x18>
c0013ef8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013efb:	83 ec 0c             	sub    esp,0xc
c0013efe:	6a 08                	push   0x8
c0013f00:	e8 87 b9 ff ff       	call   c000f88c <malloc>
c0013f05:	89 03                	mov    DWORD PTR [ebx],eax
c0013f07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f14:	83 c4 18             	add    esp,0x18
c0013f17:	5b                   	pop    ebx
c0013f18:	c3                   	ret    
c0013f19:	90                   	nop

c0013f1a <Device::removeAllChildren()>:
c0013f1a:	56                   	push   esi
c0013f1b:	53                   	push   ebx
c0013f1c:	52                   	push   edx
c0013f1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f21:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013f27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f2a:	74 17                	je     c0013f43 <Device::removeAllChildren()+0x29>
c0013f2c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f2f:	85 c0                	test   eax,eax
c0013f31:	74 0c                	je     c0013f3f <Device::removeAllChildren()+0x25>
c0013f33:	83 ec 0c             	sub    esp,0xc
c0013f36:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f38:	50                   	push   eax
c0013f39:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f41:	eb e4                	jmp    c0013f27 <Device::removeAllChildren()+0xd>
c0013f43:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013f49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f4f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013f55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f5c:	58                   	pop    eax
c0013f5d:	5b                   	pop    ebx
c0013f5e:	5e                   	pop    esi
c0013f5f:	c3                   	ret    

c0013f60 <Device::hibernateAll()>:
c0013f60:	53                   	push   ebx
c0013f61:	83 ec 14             	sub    esp,0x14
c0013f64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f6a:	53                   	push   ebx
c0013f6b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013f6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f74:	83 c4 10             	add    esp,0x10
c0013f77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f7a:	74 0f                	je     c0013f8b <Device::hibernateAll()+0x2b>
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f82:	e8 d9 ff ff ff       	call   c0013f60 <Device::hibernateAll()>
c0013f87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f89:	eb e9                	jmp    c0013f74 <Device::hibernateAll()+0x14>
c0013f8b:	83 c4 08             	add    esp,0x8
c0013f8e:	5b                   	pop    ebx
c0013f8f:	c3                   	ret    

c0013f90 <Device::wakeAll()>:
c0013f90:	53                   	push   ebx
c0013f91:	83 ec 14             	sub    esp,0x14
c0013f94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f9a:	53                   	push   ebx
c0013f9b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013f9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fa4:	83 c4 10             	add    esp,0x10
c0013fa7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013faa:	74 0f                	je     c0013fbb <Device::wakeAll()+0x2b>
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fb2:	e8 d9 ff ff ff       	call   c0013f90 <Device::wakeAll()>
c0013fb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fb9:	eb e9                	jmp    c0013fa4 <Device::wakeAll()+0x14>
c0013fbb:	83 c4 08             	add    esp,0x8
c0013fbe:	5b                   	pop    ebx
c0013fbf:	c3                   	ret    

c0013fc0 <Device::detectAll()>:
c0013fc0:	53                   	push   ebx
c0013fc1:	83 ec 14             	sub    esp,0x14
c0013fc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fca:	53                   	push   ebx
c0013fcb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013fce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fda:	74 0f                	je     c0013feb <Device::detectAll()+0x2b>
c0013fdc:	83 ec 0c             	sub    esp,0xc
c0013fdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fe2:	e8 d9 ff ff ff       	call   c0013fc0 <Device::detectAll()>
c0013fe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fe9:	eb e9                	jmp    c0013fd4 <Device::detectAll()+0x14>
c0013feb:	83 c4 08             	add    esp,0x8
c0013fee:	5b                   	pop    ebx
c0013fef:	c3                   	ret    

c0013ff0 <Device::disableLegacyAll()>:
c0013ff0:	53                   	push   ebx
c0013ff1:	83 ec 14             	sub    esp,0x14
c0013ff4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ffa:	53                   	push   ebx
c0013ffb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013ffe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014004:	83 c4 10             	add    esp,0x10
c0014007:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001400a:	74 0f                	je     c001401b <Device::disableLegacyAll()+0x2b>
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014012:	e8 d9 ff ff ff       	call   c0013ff0 <Device::disableLegacyAll()>
c0014017:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014019:	eb e9                	jmp    c0014004 <Device::disableLegacyAll()+0x14>
c001401b:	83 c4 08             	add    esp,0x8
c001401e:	5b                   	pop    ebx
c001401f:	c3                   	ret    

c0014020 <Device::loadDriversForAll()>:
c0014020:	53                   	push   ebx
c0014021:	83 ec 08             	sub    esp,0x8
c0014024:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014028:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c001402f:	75 0c                	jne    c001403d <Device::loadDriversForAll()+0x1d>
c0014031:	83 ec 0c             	sub    esp,0xc
c0014034:	53                   	push   ebx
c0014035:	e8 a0 fd ff ff       	call   c0013dda <Device::findAndLoadDriver()>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014043:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014046:	74 12                	je     c001405a <Device::loadDriversForAll()+0x3a>
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001404e:	e8 cd ff ff ff       	call   c0014020 <Device::loadDriversForAll()>
c0014053:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	eb e9                	jmp    c0014043 <Device::loadDriversForAll()+0x23>
c001405a:	83 c4 08             	add    esp,0x8
c001405d:	5b                   	pop    ebx
c001405e:	c3                   	ret    
c001405f:	90                   	nop

c0014060 <Device::closeAll()>:
c0014060:	53                   	push   ebx
c0014061:	83 ec 08             	sub    esp,0x8
c0014064:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014068:	8b 03                	mov    eax,DWORD PTR [ebx]
c001406a:	6a 00                	push   0x0
c001406c:	6a 00                	push   0x0
c001406e:	6a 00                	push   0x0
c0014070:	53                   	push   ebx
c0014071:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014074:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001407a:	83 c4 10             	add    esp,0x10
c001407d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014080:	74 0f                	je     c0014091 <Device::closeAll()+0x31>
c0014082:	83 ec 0c             	sub    esp,0xc
c0014085:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014088:	e8 d3 ff ff ff       	call   c0014060 <Device::closeAll()>
c001408d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001408f:	eb e9                	jmp    c001407a <Device::closeAll()+0x1a>
c0014091:	83 c4 08             	add    esp,0x8
c0014094:	5b                   	pop    ebx
c0014095:	c3                   	ret    

c0014096 <Device::powerSavingAll(PowerSavingLevel)>:
c0014096:	56                   	push   esi
c0014097:	53                   	push   ebx
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001409f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00140a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140a5:	56                   	push   esi
c00140a6:	53                   	push   ebx
c00140a7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00140aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140b6:	74 0f                	je     c00140c7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00140b8:	52                   	push   edx
c00140b9:	52                   	push   edx
c00140ba:	56                   	push   esi
c00140bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140be:	e8 d3 ff ff ff       	call   c0014096 <Device::powerSavingAll(PowerSavingLevel)>
c00140c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140c5:	eb e9                	jmp    c00140b0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00140c7:	58                   	pop    eax
c00140c8:	5b                   	pop    ebx
c00140c9:	5e                   	pop    esi
c00140ca:	c3                   	ret    
c00140cb:	90                   	nop

c00140cc <Device::setName(char const*)>:
c00140cc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00140d4:	e9 33 c7 fe ff       	jmp    c000080c <strcpy>
c00140d9:	90                   	nop

c00140da <Device::Device(char const*)>:
c00140da:	83 ec 1c             	sub    esp,0x1c
c00140dd:	ba b0 b7 02 c0       	mov    edx,0xc002b7b0
c00140e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140e6:	89 10                	mov    DWORD PTR [eax],edx
c00140e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00140f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140fa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014108:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014116:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014120:	83 ec 08             	sub    esp,0x8
c0014123:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014127:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001412b:	e8 9c ff ff ff       	call   c00140cc <Device::setName(char const*)>
c0014130:	83 c4 10             	add    esp,0x10
c0014133:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001413b:	83 ec 0c             	sub    esp,0xc
c001413e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014142:	e8 45 b7 ff ff       	call   c000f88c <malloc>
c0014147:	83 c4 10             	add    esp,0x10
c001414a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014150:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014157:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001415b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014165:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001416b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014175:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001417b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014186:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001418d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014191:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001419c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141aa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00141b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00141c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00141d0:	90                   	nop
c00141d1:	83 c4 1c             	add    esp,0x1c
c00141d4:	c3                   	ret    
c00141d5:	90                   	nop

c00141d6 <Device::getName()>:
c00141d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141da:	05 d0 00 00 00       	add    eax,0xd0
c00141df:	c3                   	ret    

c00141e0 <DriverlessDevice::DriverlessDevice(char const*)>:
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e7:	83 ec 08             	sub    esp,0x8
c00141ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ee:	50                   	push   eax
c00141ef:	e8 e6 fe ff ff       	call   c00140da <Device::Device(char const*)>
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c00141fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014200:	89 10                	mov    DWORD PTR [eax],edx
c0014202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014206:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014210:	90                   	nop
c0014211:	83 c4 0c             	add    esp,0xc
c0014214:	c3                   	ret    
c0014215:	90                   	nop

c0014216 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014216:	57                   	push   edi
c0014217:	56                   	push   esi
c0014218:	53                   	push   ebx
c0014219:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001421d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014221:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014225:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001422b:	75 0c                	jne    c0014239 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001422d:	52                   	push   edx
c001422e:	52                   	push   edx
c001422f:	53                   	push   ebx
c0014230:	56                   	push   esi
c0014231:	e8 50 51 01 00       	call   c0029386 <LinkedList<Device>::addElement(Device*)>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001423f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014242:	74 12                	je     c0014256 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014244:	50                   	push   eax
c0014245:	57                   	push   edi
c0014246:	56                   	push   esi
c0014247:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001424a:	e8 c7 ff ff ff       	call   c0014216 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001424f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	eb e9                	jmp    c001423f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014256:	5b                   	pop    ebx
c0014257:	5e                   	pop    esi
c0014258:	5f                   	pop    edi
c0014259:	c3                   	ret    

c001425a <getDevicesOfType(DeviceType)>:
c001425a:	53                   	push   ebx
c001425b:	83 ec 14             	sub    esp,0x14
c001425e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014262:	53                   	push   ebx
c0014263:	e8 fa 51 01 00       	call   c0029462 <LinkedList<Device>::LinkedList()>
c0014268:	83 c4 0c             	add    esp,0xc
c001426b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001426f:	53                   	push   ebx
c0014270:	ff 35 e8 f0 02 c0    	push   DWORD PTR ds:0xc002f0e8
c0014276:	e8 9b ff ff ff       	call   c0014216 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001427b:	89 d8                	mov    eax,ebx
c001427d:	83 c4 18             	add    esp,0x18
c0014280:	5b                   	pop    ebx
c0014281:	c2 04 00             	ret    0x4

c0014284 <HardDiskController::HardDiskController(char const*)>:
c0014284:	83 ec 0c             	sub    esp,0xc
c0014287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001428b:	83 ec 08             	sub    esp,0x8
c001428e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014292:	50                   	push   eax
c0014293:	e8 42 fe ff ff       	call   c00140da <Device::Device(char const*)>
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c00142a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142a4:	89 10                	mov    DWORD PTR [eax],edx
c00142a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142aa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00142b4:	90                   	nop
c00142b5:	83 c4 0c             	add    esp,0xc
c00142b8:	c3                   	ret    
c00142b9:	90                   	nop

c00142ba <HardDiskController::~HardDiskController()>:
c00142ba:	83 ec 0c             	sub    esp,0xc
c00142bd:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c00142c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c6:	89 10                	mov    DWORD PTR [eax],edx
c00142c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	50                   	push   eax
c00142d0:	e8 cf fa ff ff       	call   c0013da4 <Device::~Device()>
c00142d5:	83 c4 10             	add    esp,0x10
c00142d8:	90                   	nop
c00142d9:	83 c4 0c             	add    esp,0xc
c00142dc:	c3                   	ret    
c00142dd:	90                   	nop

c00142de <HardDiskController::~HardDiskController()>:
c00142de:	83 ec 0c             	sub    esp,0xc
c00142e1:	83 ec 0c             	sub    esp,0xc
c00142e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142e8:	e8 cd ff ff ff       	call   c00142ba <HardDiskController::~HardDiskController()>
c00142ed:	83 c4 10             	add    esp,0x10
c00142f0:	83 ec 08             	sub    esp,0x8
c00142f3:	68 58 01 00 00       	push   0x158
c00142f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142fc:	e8 bc e6 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0014301:	83 c4 10             	add    esp,0x10
c0014304:	83 c4 0c             	add    esp,0xc
c0014307:	c3                   	ret    

c0014308 <PhysicalDisk::eject()>:
c0014308:	83 ec 18             	sub    esp,0x18
c001430b:	68 2c b8 02 c0       	push   0xc002b82c
c0014310:	e8 88 e7 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014315:	83 c8 ff             	or     eax,0xffffffff
c0014318:	83 c4 1c             	add    esp,0x1c
c001431b:	c3                   	ret    

c001431c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014323:	83 ec 08             	sub    esp,0x8
c0014326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001432a:	50                   	push   eax
c001432b:	e8 aa fd ff ff       	call   c00140da <Device::Device(char const*)>
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c0014338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001433c:	89 10                	mov    DWORD PTR [eax],edx
c001433e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014342:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001434d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014358:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014366:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001436a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014374:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001437e:	90                   	nop
c001437f:	83 c4 0c             	add    esp,0xc
c0014382:	c3                   	ret    
c0014383:	90                   	nop

c0014384 <PhysicalDisk::startCache()>:
c0014384:	56                   	push   esi
c0014385:	53                   	push   ebx
c0014386:	83 ec 10             	sub    esp,0x10
c0014389:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001438d:	6a 44                	push   0x44
c001438f:	e8 f8 b4 ff ff       	call   c000f88c <malloc>
c0014394:	89 c6                	mov    esi,eax
c0014396:	58                   	pop    eax
c0014397:	5a                   	pop    edx
c0014398:	53                   	push   ebx
c0014399:	56                   	push   esi
c001439a:	e8 a9 28 00 00       	call   c0016c48 <VCache::VCache(PhysicalDisk*)>
c001439f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00143a5:	83 c4 14             	add    esp,0x14
c00143a8:	5b                   	pop    ebx
c00143a9:	5e                   	pop    esi
c00143aa:	c3                   	ret    
c00143ab:	90                   	nop

c00143ac <PhysicalDisk::~PhysicalDisk()>:
c00143ac:	83 ec 0c             	sub    esp,0xc
c00143af:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c00143b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b8:	89 10                	mov    DWORD PTR [eax],edx
c00143ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143be:	83 ec 0c             	sub    esp,0xc
c00143c1:	50                   	push   eax
c00143c2:	e8 dd f9 ff ff       	call   c0013da4 <Device::~Device()>
c00143c7:	83 c4 10             	add    esp,0x10
c00143ca:	90                   	nop
c00143cb:	83 c4 0c             	add    esp,0xc
c00143ce:	c3                   	ret    
c00143cf:	90                   	nop

c00143d0 <PhysicalDisk::~PhysicalDisk()>:
c00143d0:	83 ec 0c             	sub    esp,0xc
c00143d3:	83 ec 0c             	sub    esp,0xc
c00143d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143da:	e8 cd ff ff ff       	call   c00143ac <PhysicalDisk::~PhysicalDisk()>
c00143df:	83 c4 10             	add    esp,0x10
c00143e2:	83 ec 08             	sub    esp,0x8
c00143e5:	68 6c 01 00 00       	push   0x16c
c00143ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143ee:	e8 ca e5 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00143f3:	83 c4 10             	add    esp,0x10
c00143f6:	83 c4 0c             	add    esp,0xc
c00143f9:	c3                   	ret    

c00143fa <FPU::FPU(char const*)>:
c00143fa:	83 ec 0c             	sub    esp,0xc
c00143fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014401:	83 ec 08             	sub    esp,0x8
c0014404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014408:	50                   	push   eax
c0014409:	e8 cc fc ff ff       	call   c00140da <Device::Device(char const*)>
c001440e:	83 c4 10             	add    esp,0x10
c0014411:	ba a0 b8 02 c0       	mov    edx,0xc002b8a0
c0014416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441a:	89 10                	mov    DWORD PTR [eax],edx
c001441c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014420:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001442a:	90                   	nop
c001442b:	83 c4 0c             	add    esp,0xc
c001442e:	c3                   	ret    
c001442f:	90                   	nop

c0014430 <FPU::~FPU()>:
c0014430:	83 ec 0c             	sub    esp,0xc
c0014433:	ba a0 b8 02 c0       	mov    edx,0xc002b8a0
c0014438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001443c:	89 10                	mov    DWORD PTR [eax],edx
c001443e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014442:	83 ec 0c             	sub    esp,0xc
c0014445:	50                   	push   eax
c0014446:	e8 59 f9 ff ff       	call   c0013da4 <Device::~Device()>
c001444b:	83 c4 10             	add    esp,0x10
c001444e:	90                   	nop
c001444f:	83 c4 0c             	add    esp,0xc
c0014452:	c3                   	ret    
c0014453:	90                   	nop

c0014454 <FPU::~FPU()>:
c0014454:	83 ec 0c             	sub    esp,0xc
c0014457:	83 ec 0c             	sub    esp,0xc
c001445a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001445e:	e8 cd ff ff ff       	call   c0014430 <FPU::~FPU()>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	83 ec 08             	sub    esp,0x8
c0014469:	68 58 01 00 00       	push   0x158
c001446e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014472:	e8 46 e5 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0014477:	83 c4 10             	add    esp,0x10
c001447a:	83 c4 0c             	add    esp,0xc
c001447d:	c3                   	ret    

c001447e <setupFPU()>:
c001447e:	53                   	push   ebx
c001447f:	83 ec 08             	sub    esp,0x8
c0014482:	8b 15 e8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e8
c0014488:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001448f:	74 19                	je     c00144aa <setupFPU()+0x2c>
c0014491:	83 ec 0c             	sub    esp,0xc
c0014494:	68 58 01 00 00       	push   0x158
c0014499:	e8 ee b3 ff ff       	call   c000f88c <malloc>
c001449e:	89 c3                	mov    ebx,eax
c00144a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00144a3:	e8 10 1b 01 00       	call   c0025fb8 <AVX::AVX()>
c00144a8:	eb 5b                	jmp    c0014505 <setupFPU()+0x87>
c00144aa:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00144b0:	84 c0                	test   al,al
c00144b2:	79 19                	jns    c00144cd <setupFPU()+0x4f>
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	68 58 01 00 00       	push   0x158
c00144bc:	e8 cb b3 ff ff       	call   c000f88c <malloc>
c00144c1:	89 c3                	mov    ebx,eax
c00144c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00144c6:	e8 13 1c 01 00       	call   c00260de <SSE::SSE()>
c00144cb:	eb 38                	jmp    c0014505 <setupFPU()+0x87>
c00144cd:	a8 20                	test   al,0x20
c00144cf:	74 19                	je     c00144ea <setupFPU()+0x6c>
c00144d1:	83 ec 0c             	sub    esp,0xc
c00144d4:	68 58 01 00 00       	push   0x158
c00144d9:	e8 ae b3 ff ff       	call   c000f88c <malloc>
c00144de:	89 c3                	mov    ebx,eax
c00144e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00144e3:	e8 60 1b 01 00       	call   c0026048 <MMX::MMX()>
c00144e8:	eb 1b                	jmp    c0014505 <setupFPU()+0x87>
c00144ea:	a8 10                	test   al,0x10
c00144ec:	74 1c                	je     c001450a <setupFPU()+0x8c>
c00144ee:	83 ec 0c             	sub    esp,0xc
c00144f1:	68 58 01 00 00       	push   0x158
c00144f6:	e8 91 b3 ff ff       	call   c000f88c <malloc>
c00144fb:	89 c3                	mov    ebx,eax
c00144fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0014500:	e8 67 1c 01 00       	call   c002616c <x87::x87()>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	eb 24                	jmp    c001452e <setupFPU()+0xb0>
c001450a:	83 e0 ef             	and    eax,0xffffffef
c001450d:	83 ec 0c             	sub    esp,0xc
c0014510:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014516:	68 8c b8 02 c0       	push   0xc002b88c
c001451b:	e8 7d e5 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014520:	0f 20 c0             	mov    eax,cr0
c0014523:	83 c8 04             	or     eax,0x4
c0014526:	0f 22 c0             	mov    cr0,eax
c0014529:	31 db                	xor    ebx,ebx
c001452b:	83 c4 10             	add    esp,0x10
c001452e:	89 d8                	mov    eax,ebx
c0014530:	83 c4 08             	add    esp,0x8
c0014533:	5b                   	pop    ebx
c0014534:	c3                   	ret    
c0014535:	90                   	nop

c0014536 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001453a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001453e:	c1 e0 04             	shl    eax,0x4
c0014541:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014545:	8d 50 10             	lea    edx,[eax+0x10]
c0014548:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001454e:	74 08                	je     c0014558 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014550:	83 c0 04             	add    eax,0x4
c0014553:	39 d0                	cmp    eax,edx
c0014555:	75 f1                	jne    c0014548 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014557:	c3                   	ret    
c0014558:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014562:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001456c:	eb e2                	jmp    c0014550 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001456e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001456e:	57                   	push   edi
c001456f:	31 c0                	xor    eax,eax
c0014571:	56                   	push   esi
c0014572:	53                   	push   ebx
c0014573:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014577:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001457b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001457f:	89 da                	mov    edx,ebx
c0014581:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014585:	c1 e2 04             	shl    edx,0x4
c0014588:	01 ca                	add    edx,ecx
c001458a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014592:	74 16                	je     c00145aa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014594:	40                   	inc    eax
c0014595:	83 f8 04             	cmp    eax,0x4
c0014598:	75 f0                	jne    c001458a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001459a:	c7 44 24 10 d0 b8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b8d0
c00145a2:	5b                   	pop    ebx
c00145a3:	5e                   	pop    esi
c00145a4:	5f                   	pop    edi
c00145a5:	e9 29 5f 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>
c00145aa:	8d 04 98             	lea    eax,[eax+ebx*4]
c00145ad:	8d 04 81             	lea    eax,[ecx+eax*4]
c00145b0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00145b6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00145bc:	5b                   	pop    ebx
c00145bd:	5e                   	pop    esi
c00145be:	5f                   	pop    edi
c00145bf:	c3                   	ret    

c00145c0 <doubleFault(regs*, void*)>:
c00145c0:	55                   	push   ebp
c00145c1:	89 e5                	mov    ebp,esp
c00145c3:	83 ec 08             	sub    esp,0x8
c00145c6:	83 ec 0c             	sub    esp,0xc
c00145c9:	68 0b b9 02 c0       	push   0xc002b90b
c00145ce:	e8 00 5f 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00145d3:	83 c4 10             	add    esp,0x10
c00145d6:	90                   	nop
c00145d7:	c9                   	leave  
c00145d8:	c3                   	ret    
c00145d9:	90                   	nop

c00145da <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00145da:	56                   	push   esi
c00145db:	53                   	push   ebx
c00145dc:	50                   	push   eax
c00145dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00145e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145e5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00145ea:	75 35                	jne    c0014621 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00145ec:	8d 43 20             	lea    eax,[ebx+0x20]
c00145ef:	31 d2                	xor    edx,edx
c00145f1:	89 c1                	mov    ecx,eax
c00145f3:	c1 e1 04             	shl    ecx,0x4
c00145f6:	01 f1                	add    ecx,esi
c00145f8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014600:	74 3e                	je     c0014640 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014602:	42                   	inc    edx
c0014603:	83 fa 04             	cmp    edx,0x4
c0014606:	75 f0                	jne    c00145f8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014608:	83 ec 0c             	sub    esp,0xc
c001460b:	68 50 b9 02 c0       	push   0xc002b950
c0014610:	e8 be 5e 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001461d:	5a                   	pop    edx
c001461e:	5b                   	pop    ebx
c001461f:	5e                   	pop    esi
c0014620:	c3                   	ret    
c0014621:	83 ec 0c             	sub    esp,0xc
c0014624:	56                   	push   esi
c0014625:	e8 ac fb ff ff       	call   c00141d6 <Device::getName()>
c001462a:	83 c4 10             	add    esp,0x10
c001462d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014630:	75 ba                	jne    c00145ec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014632:	83 fb 0f             	cmp    ebx,0xf
c0014635:	7f 29                	jg     c0014660 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014637:	0f b6 9b 40 e3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1cc0]
c001463e:	eb ac                	jmp    c00145ec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014640:	8d 04 82             	lea    eax,[edx+eax*4]
c0014643:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014647:	8d 04 86             	lea    eax,[esi+eax*4]
c001464a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014650:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014654:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001465a:	89 d8                	mov    eax,ebx
c001465c:	5a                   	pop    edx
c001465d:	5b                   	pop    ebx
c001465e:	5e                   	pop    esi
c001465f:	c3                   	ret    
c0014660:	83 ec 0c             	sub    esp,0xc
c0014663:	68 18 b9 02 c0       	push   0xc002b918
c0014668:	e8 66 5e 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	e9 77 ff ff ff       	jmp    c00145ec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014675:	90                   	nop

c0014676 <InterruptController::clearAllHandlers(int, bool)>:
c0014676:	56                   	push   esi
c0014677:	53                   	push   ebx
c0014678:	52                   	push   edx
c0014679:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001467d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014681:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014686:	75 61                	jne    c00146e9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014688:	8d 46 20             	lea    eax,[esi+0x20]
c001468b:	c1 e6 04             	shl    esi,0x4
c001468e:	c1 e0 04             	shl    eax,0x4
c0014691:	01 de                	add    esi,ebx
c0014693:	01 d8                	add    eax,ebx
c0014695:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001469f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00146a9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00146b3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00146bd:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00146c7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00146d1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00146db:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00146e5:	58                   	pop    eax
c00146e6:	5b                   	pop    ebx
c00146e7:	5e                   	pop    esi
c00146e8:	c3                   	ret    
c00146e9:	83 ec 0c             	sub    esp,0xc
c00146ec:	53                   	push   ebx
c00146ed:	e8 e4 fa ff ff       	call   c00141d6 <Device::getName()>
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146f8:	75 8e                	jne    c0014688 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00146fa:	83 fe 0f             	cmp    esi,0xf
c00146fd:	7f 09                	jg     c0014708 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00146ff:	0f b6 b6 40 e3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1cc0]
c0014706:	eb 80                	jmp    c0014688 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	68 8c b9 02 c0       	push   0xc002b98c
c0014710:	e8 be 5d 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0014715:	83 c4 10             	add    esp,0x10
c0014718:	e9 6b ff ff ff       	jmp    c0014688 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001471d:	90                   	nop

c001471e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001471e:	56                   	push   esi
c001471f:	53                   	push   ebx
c0014720:	52                   	push   edx
c0014721:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014725:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014729:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001472e:	75 3a                	jne    c001476a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014734:	8d 50 20             	lea    edx,[eax+0x20]
c0014737:	c1 e2 04             	shl    edx,0x4
c001473a:	8d 04 16             	lea    eax,[esi+edx*1]
c001473d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014741:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014747:	74 0b                	je     c0014754 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014749:	83 c0 04             	add    eax,0x4
c001474c:	39 d0                	cmp    eax,edx
c001474e:	75 f1                	jne    c0014741 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014750:	58                   	pop    eax
c0014751:	5b                   	pop    ebx
c0014752:	5e                   	pop    esi
c0014753:	c3                   	ret    
c0014754:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001475e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014768:	eb df                	jmp    c0014749 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001476a:	83 ec 0c             	sub    esp,0xc
c001476d:	56                   	push   esi
c001476e:	e8 63 fa ff ff       	call   c00141d6 <Device::getName()>
c0014773:	83 c4 10             	add    esp,0x10
c0014776:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014779:	75 b5                	jne    c0014730 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001477b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014780:	7f 11                	jg     c0014793 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014782:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014786:	0f b6 80 40 e3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1cc0]
c001478d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014791:	eb 9d                	jmp    c0014730 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 8c b9 02 c0       	push   0xc002b98c
c001479b:	e8 33 5d 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00147a0:	83 c4 10             	add    esp,0x10
c00147a3:	eb 8b                	jmp    c0014730 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00147a5 <nmiHandler(regs*, void*)>:
c00147a5:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00147aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147ae:	e9 23 a8 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c00147b3 <int_handler>:
c00147b3:	55                   	push   ebp
c00147b4:	57                   	push   edi
c00147b5:	56                   	push   esi
c00147b6:	53                   	push   ebx
c00147b7:	83 ec 0c             	sub    esp,0xc
c00147ba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147be:	80 3d 24 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c24,0x0
c00147c5:	74 0b                	je     c00147d2 <int_handler+0x1f>
c00147c7:	fa                   	cli    
c00147c8:	f4                   	hlt    
c00147c9:	80 3d 24 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c24,0x0
c00147d0:	75 f5                	jne    c00147c7 <int_handler+0x14>
c00147d2:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00147d7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00147da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00147e0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00147e6:	8d 43 e0             	lea    eax,[ebx-0x20]
c00147e9:	83 f8 17             	cmp    eax,0x17
c00147ec:	77 13                	ja     c0014801 <int_handler+0x4e>
c00147ee:	83 ec 08             	sub    esp,0x8
c00147f1:	8b 17                	mov    edx,DWORD PTR [edi]
c00147f3:	8d 43 e0             	lea    eax,[ebx-0x20]
c00147f6:	0f b6 c0             	movzx  eax,al
c00147f9:	50                   	push   eax
c00147fa:	57                   	push   edi
c00147fb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00147fe:	83 c4 10             	add    esp,0x10
c0014801:	83 c3 15             	add    ebx,0x15
c0014804:	c1 e3 04             	shl    ebx,0x4
c0014807:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001480b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014812:	31 db                	xor    ebx,ebx
c0014814:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014818:	85 c0                	test   eax,eax
c001481a:	74 13                	je     c001482f <int_handler+0x7c>
c001481c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001481f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014823:	74 1c                	je     c0014841 <int_handler+0x8e>
c0014825:	83 ec 08             	sub    esp,0x8
c0014828:	52                   	push   edx
c0014829:	56                   	push   esi
c001482a:	ff d0                	call   eax
c001482c:	83 c4 10             	add    esp,0x10
c001482f:	43                   	inc    ebx
c0014830:	83 fb 04             	cmp    ebx,0x4
c0014833:	75 df                	jne    c0014814 <int_handler+0x61>
c0014835:	83 c4 0c             	add    esp,0xc
c0014838:	31 c0                	xor    eax,eax
c001483a:	5b                   	pop    ebx
c001483b:	31 d2                	xor    edx,edx
c001483d:	5e                   	pop    esi
c001483e:	5f                   	pop    edi
c001483f:	5d                   	pop    ebp
c0014840:	c3                   	ret    
c0014841:	83 ec 08             	sub    esp,0x8
c0014844:	52                   	push   edx
c0014845:	56                   	push   esi
c0014846:	ff d0                	call   eax
c0014848:	83 c4 10             	add    esp,0x10
c001484b:	83 c4 0c             	add    esp,0xc
c001484e:	5b                   	pop    ebx
c001484f:	5e                   	pop    esi
c0014850:	5f                   	pop    edi
c0014851:	5d                   	pop    ebp
c0014852:	c3                   	ret    
c0014853:	90                   	nop

c0014854 <InterruptController::InterruptController(char const*)>:
c0014854:	83 ec 1c             	sub    esp,0x1c
c0014857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001485b:	83 ec 08             	sub    esp,0x8
c001485e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014862:	50                   	push   eax
c0014863:	e8 72 f8 ff ff       	call   c00140da <Device::Device(char const*)>
c0014868:	83 c4 10             	add    esp,0x10
c001486b:	ba 4c bc 02 c0       	mov    edx,0xc002bc4c
c0014870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014874:	89 10                	mov    DWORD PTR [eax],edx
c0014876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001487a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014884:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001488c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014894:	7f 5e                	jg     c00148f4 <InterruptController::InterruptController(char const*)+0xa0>
c0014896:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001489e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00148a3:	7f 49                	jg     c00148ee <InterruptController::InterruptController(char const*)+0x9a>
c00148a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148ad:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00148b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148b8:	01 ca                	add    edx,ecx
c00148ba:	83 c2 54             	add    edx,0x54
c00148bd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00148c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148cd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00148d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148d8:	01 ca                	add    edx,ecx
c00148da:	81 c2 54 04 00 00    	add    edx,0x454
c00148e0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00148e8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00148ec:	eb b0                	jmp    c001489e <InterruptController::InterruptController(char const*)+0x4a>
c00148ee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00148f2:	eb 98                	jmp    c001488c <InterruptController::InterruptController(char const*)+0x38>
c00148f4:	90                   	nop
c00148f5:	83 c4 1c             	add    esp,0x1c
c00148f8:	c3                   	ret    
c00148f9:	90                   	nop

c00148fa <InterruptController::~InterruptController()>:
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	ba 4c bc 02 c0       	mov    edx,0xc002bc4c
c0014902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014906:	89 10                	mov    DWORD PTR [eax],edx
c0014908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001490c:	83 ec 0c             	sub    esp,0xc
c001490f:	50                   	push   eax
c0014910:	e8 8f f4 ff ff       	call   c0013da4 <Device::~Device()>
c0014915:	83 c4 10             	add    esp,0x10
c0014918:	90                   	nop
c0014919:	83 c4 0c             	add    esp,0xc
c001491c:	c3                   	ret    
c001491d:	90                   	nop

c001491e <InterruptController::~InterruptController()>:
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	83 ec 0c             	sub    esp,0xc
c0014924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014928:	e8 cd ff ff ff       	call   c00148fa <InterruptController::~InterruptController()>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	83 ec 08             	sub    esp,0x8
c0014933:	68 58 21 00 00       	push   0x2158
c0014938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001493c:	e8 7c e0 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	83 c4 0c             	add    esp,0xc
c0014947:	c3                   	ret    

c0014948 <displayDebugInfo(regs*)>:
c0014948:	55                   	push   ebp
c0014949:	57                   	push   edi
c001494a:	56                   	push   esi
c001494b:	53                   	push   ebx
c001494c:	83 ec 24             	sub    esp,0x24
c001494f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014953:	0f 20 c2             	mov    edx,cr0
c0014956:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001495a:	0f 20 d7             	mov    edi,cr2
c001495d:	0f 20 de             	mov    esi,cr3
c0014960:	0f 20 e5             	mov    ebp,cr4
c0014963:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014966:	68 c6 b9 02 c0       	push   0xc002b9c6
c001496b:	e8 2d e1 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014970:	59                   	pop    ecx
c0014971:	58                   	pop    eax
c0014972:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014975:	68 d1 b9 02 c0       	push   0xc002b9d1
c001497a:	e8 1e e1 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001497f:	58                   	pop    eax
c0014980:	5a                   	pop    edx
c0014981:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014984:	68 dc b9 02 c0       	push   0xc002b9dc
c0014989:	e8 0f e1 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001498e:	59                   	pop    ecx
c001498f:	58                   	pop    eax
c0014990:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014993:	68 e7 b9 02 c0       	push   0xc002b9e7
c0014998:	e8 00 e1 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001499d:	58                   	pop    eax
c001499e:	5a                   	pop    edx
c001499f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00149a2:	68 f2 b9 02 c0       	push   0xc002b9f2
c00149a7:	e8 f1 e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00149ac:	59                   	pop    ecx
c00149ad:	58                   	pop    eax
c00149ae:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00149b1:	68 fd b9 02 c0       	push   0xc002b9fd
c00149b6:	e8 e2 e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00149bb:	58                   	pop    eax
c00149bc:	5a                   	pop    edx
c00149bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00149c0:	68 08 ba 02 c0       	push   0xc002ba08
c00149c5:	e8 d3 e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00149ca:	59                   	pop    ecx
c00149cb:	58                   	pop    eax
c00149cc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00149cf:	68 13 ba 02 c0       	push   0xc002ba13
c00149d4:	e8 c4 e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00149d9:	58                   	pop    eax
c00149da:	5a                   	pop    edx
c00149db:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00149de:	68 1e ba 02 c0       	push   0xc002ba1e
c00149e3:	e8 b5 e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00149e8:	59                   	pop    ecx
c00149e9:	58                   	pop    eax
c00149ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149ed:	68 2d ba 02 c0       	push   0xc002ba2d
c00149f2:	e8 a6 e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00149f7:	58                   	pop    eax
c00149f8:	5a                   	pop    edx
c00149f9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00149fc:	68 38 ba 02 c0       	push   0xc002ba38
c0014a01:	e8 97 e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014a06:	59                   	pop    ecx
c0014a07:	58                   	pop    eax
c0014a08:	57                   	push   edi
c0014a09:	68 43 ba 02 c0       	push   0xc002ba43
c0014a0e:	e8 8a e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014a13:	58                   	pop    eax
c0014a14:	5a                   	pop    edx
c0014a15:	56                   	push   esi
c0014a16:	68 4e ba 02 c0       	push   0xc002ba4e
c0014a1b:	e8 7d e0 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014a20:	59                   	pop    ecx
c0014a21:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014a26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2c:	e8 8f be ff ff       	call   c00108c0 <setActiveTerminal(VgaText*)>
c0014a31:	58                   	pop    eax
c0014a32:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a35:	5a                   	pop    edx
c0014a36:	c1 e0 05             	shl    eax,0x5
c0014a39:	05 a0 e0 02 c0       	add    eax,0xc002e0a0
c0014a3e:	50                   	push   eax
c0014a3f:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014a44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4a:	e8 fd c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014a4f:	59                   	pop    ecx
c0014a50:	58                   	pop    eax
c0014a51:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014a56:	68 59 ba 02 c0       	push   0xc002ba59
c0014a5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a61:	e8 e6 c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014a66:	58                   	pop    eax
c0014a67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a6c:	5a                   	pop    edx
c0014a6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a70:	83 c0 0c             	add    eax,0xc
c0014a73:	50                   	push   eax
c0014a74:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014a79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7f:	e8 c8 c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014a84:	59                   	pop    ecx
c0014a85:	58                   	pop    eax
c0014a86:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014a8b:	68 62 ba 02 c0       	push   0xc002ba62
c0014a90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a96:	e8 b1 c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014a9b:	58                   	pop    eax
c0014a9c:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014aa1:	5a                   	pop    edx
c0014aa2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014aa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aab:	e8 c2 c1 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014ab0:	59                   	pop    ecx
c0014ab1:	58                   	pop    eax
c0014ab2:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014ab7:	68 6a ba 02 c0       	push   0xc002ba6a
c0014abc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac2:	e8 85 c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014ac7:	58                   	pop    eax
c0014ac8:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014acd:	5a                   	pop    edx
c0014ace:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ad1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad7:	e8 96 c1 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014adc:	59                   	pop    ecx
c0014add:	58                   	pop    eax
c0014ade:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014ae3:	68 72 ba 02 c0       	push   0xc002ba72
c0014ae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aee:	e8 59 c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014af3:	58                   	pop    eax
c0014af4:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014af9:	5a                   	pop    edx
c0014afa:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014afd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b03:	e8 6a c1 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014b08:	59                   	pop    ecx
c0014b09:	58                   	pop    eax
c0014b0a:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014b0f:	68 7a ba 02 c0       	push   0xc002ba7a
c0014b14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1a:	e8 2d c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014b1f:	58                   	pop    eax
c0014b20:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014b25:	5a                   	pop    edx
c0014b26:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014b29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2f:	e8 3e c1 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014b34:	59                   	pop    ecx
c0014b35:	58                   	pop    eax
c0014b36:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014b3b:	68 82 ba 02 c0       	push   0xc002ba82
c0014b40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b46:	e8 01 c1 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014b4b:	58                   	pop    eax
c0014b4c:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014b51:	5a                   	pop    edx
c0014b52:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014b55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5b:	e8 12 c1 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014b60:	59                   	pop    ecx
c0014b61:	58                   	pop    eax
c0014b62:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014b67:	68 8a ba 02 c0       	push   0xc002ba8a
c0014b6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b72:	e8 d5 c0 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014b77:	58                   	pop    eax
c0014b78:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014b7d:	5a                   	pop    edx
c0014b7e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014b81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b87:	e8 e6 c0 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014b8c:	59                   	pop    ecx
c0014b8d:	58                   	pop    eax
c0014b8e:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014b93:	68 92 ba 02 c0       	push   0xc002ba92
c0014b98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9e:	e8 a9 c0 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014ba3:	58                   	pop    eax
c0014ba4:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014ba9:	5a                   	pop    edx
c0014baa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014bae:	52                   	push   edx
c0014baf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb5:	e8 b8 c0 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014bba:	59                   	pop    ecx
c0014bbb:	58                   	pop    eax
c0014bbc:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014bc1:	68 9b ba 02 c0       	push   0xc002ba9b
c0014bc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bcc:	e8 7b c0 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014bd1:	58                   	pop    eax
c0014bd2:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014bd7:	5a                   	pop    edx
c0014bd8:	57                   	push   edi
c0014bd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bdf:	e8 8e c0 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014be4:	59                   	pop    ecx
c0014be5:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014bea:	5f                   	pop    edi
c0014beb:	68 a3 ba 02 c0       	push   0xc002baa3
c0014bf0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf6:	e8 51 c0 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014bfb:	58                   	pop    eax
c0014bfc:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c01:	5a                   	pop    edx
c0014c02:	56                   	push   esi
c0014c03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c09:	e8 64 c0 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014c0e:	59                   	pop    ecx
c0014c0f:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c14:	5e                   	pop    esi
c0014c15:	68 ab ba 02 c0       	push   0xc002baab
c0014c1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c20:	e8 27 c0 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014c25:	5f                   	pop    edi
c0014c26:	58                   	pop    eax
c0014c27:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c2c:	55                   	push   ebp
c0014c2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c33:	e8 3a c0 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014c38:	58                   	pop    eax
c0014c39:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c3e:	5a                   	pop    edx
c0014c3f:	68 b3 ba 02 c0       	push   0xc002bab3
c0014c44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c4a:	e8 fd bf ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014c4f:	0f 21 c0             	mov    eax,db0
c0014c52:	59                   	pop    ecx
c0014c53:	5e                   	pop    esi
c0014c54:	50                   	push   eax
c0014c55:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c60:	e8 0d c0 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014c65:	5f                   	pop    edi
c0014c66:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c6b:	5d                   	pop    ebp
c0014c6c:	68 bc ba 02 c0       	push   0xc002babc
c0014c71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c77:	e8 d0 bf ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014c7c:	0f 21 c8             	mov    eax,db1
c0014c7f:	5a                   	pop    edx
c0014c80:	59                   	pop    ecx
c0014c81:	50                   	push   eax
c0014c82:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c8d:	e8 e0 bf ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014c92:	5e                   	pop    esi
c0014c93:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014c98:	5f                   	pop    edi
c0014c99:	68 c4 ba 02 c0       	push   0xc002bac4
c0014c9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca4:	e8 a3 bf ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014ca9:	0f 21 d0             	mov    eax,db2
c0014cac:	5d                   	pop    ebp
c0014cad:	5a                   	pop    edx
c0014cae:	50                   	push   eax
c0014caf:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014cb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cba:	e8 b3 bf ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014cbf:	59                   	pop    ecx
c0014cc0:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014cc5:	5e                   	pop    esi
c0014cc6:	68 cc ba 02 c0       	push   0xc002bacc
c0014ccb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd1:	e8 76 bf ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014cd6:	0f 21 d8             	mov    eax,db3
c0014cd9:	5f                   	pop    edi
c0014cda:	5d                   	pop    ebp
c0014cdb:	50                   	push   eax
c0014cdc:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014ce1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce7:	e8 86 bf ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014cec:	58                   	pop    eax
c0014ced:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014cf2:	5a                   	pop    edx
c0014cf3:	68 d4 ba 02 c0       	push   0xc002bad4
c0014cf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cfe:	e8 49 bf ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014d03:	0f 21 f0             	mov    eax,db6
c0014d06:	59                   	pop    ecx
c0014d07:	5e                   	pop    esi
c0014d08:	50                   	push   eax
c0014d09:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014d0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d14:	e8 59 bf ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014d19:	5f                   	pop    edi
c0014d1a:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014d1f:	5d                   	pop    ebp
c0014d20:	68 dc ba 02 c0       	push   0xc002badc
c0014d25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2b:	e8 1c bf ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014d30:	0f 21 f8             	mov    eax,db7
c0014d33:	5a                   	pop    edx
c0014d34:	59                   	pop    ecx
c0014d35:	50                   	push   eax
c0014d36:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014d3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d41:	e8 2c bf ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014d46:	5e                   	pop    esi
c0014d47:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d4a:	e8 07 8b 00 00       	call   c001d856 <Thr::getDriverNameFromAddress(unsigned long)>
c0014d4f:	83 c4 10             	add    esp,0x10
c0014d52:	85 c0                	test   eax,eax
c0014d54:	74 7d                	je     c0014dd3 <displayDebugInfo(regs*)+0x48b>
c0014d56:	89 c6                	mov    esi,eax
c0014d58:	50                   	push   eax
c0014d59:	50                   	push   eax
c0014d5a:	56                   	push   esi
c0014d5b:	68 e4 ba 02 c0       	push   0xc002bae4
c0014d60:	e8 38 dd ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014d65:	5a                   	pop    edx
c0014d66:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014d6b:	59                   	pop    ecx
c0014d6c:	68 f2 ba 02 c0       	push   0xc002baf2
c0014d71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d77:	e8 d0 be ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014d7c:	5f                   	pop    edi
c0014d7d:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014d82:	5d                   	pop    ebp
c0014d83:	56                   	push   esi
c0014d84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d8a:	e8 bd be ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014d8f:	58                   	pop    eax
c0014d90:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014d95:	5a                   	pop    edx
c0014d96:	68 fe ba 02 c0       	push   0xc002bafe
c0014d9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da1:	e8 a6 be ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c0014da6:	59                   	pop    ecx
c0014da7:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0014dac:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014db2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014db5:	e8 d3 8a 00 00       	call   c001d88d <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014dba:	5b                   	pop    ebx
c0014dbb:	5d                   	pop    ebp
c0014dbc:	50                   	push   eax
c0014dbd:	57                   	push   edi
c0014dbe:	e8 af be ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c0014dc3:	58                   	pop    eax
c0014dc4:	5a                   	pop    edx
c0014dc5:	56                   	push   esi
c0014dc6:	68 0a bb 02 c0       	push   0xc002bb0a
c0014dcb:	e8 cd dc ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014dd0:	83 c4 10             	add    esp,0x10
c0014dd3:	fa                   	cli    
c0014dd4:	f4                   	hlt    
c0014dd5:	eb fe                	jmp    c0014dd5 <displayDebugInfo(regs*)+0x48d>

c0014dd7 <x87EmulHandler(regs*, void*)>:
c0014dd7:	83 ec 0c             	sub    esp,0xc
c0014dda:	0f 20 c2             	mov    edx,cr0
c0014ddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014de2:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014de6:	75 4b                	jne    c0014e33 <x87EmulHandler(regs*, void*)+0x5c>
c0014de8:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0014ded:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014df3:	85 c0                	test   eax,eax
c0014df5:	74 05                	je     c0014dfc <x87EmulHandler(regs*, void*)+0x25>
c0014df7:	83 e2 08             	and    edx,0x8
c0014dfa:	75 17                	jne    c0014e13 <x87EmulHandler(regs*, void*)+0x3c>
c0014dfc:	83 ec 0c             	sub    esp,0xc
c0014dff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e03:	e8 45 af 00 00       	call   c001fd4d <Vm::x87Handler(regs*)>
c0014e08:	83 c4 10             	add    esp,0x10
c0014e0b:	84 c0                	test   al,al
c0014e0d:	74 24                	je     c0014e33 <x87EmulHandler(regs*, void*)+0x5c>
c0014e0f:	83 c4 0c             	add    esp,0xc
c0014e12:	c3                   	ret    
c0014e13:	83 ec 0c             	sub    esp,0xc
c0014e16:	68 30 bb 02 c0       	push   0xc002bb30
c0014e1b:	e8 7d dc ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014e20:	0f 06                	clts   
c0014e22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	a3 68 f2 02 c0       	mov    ds:0xc002f268,eax
c0014e2f:	83 c4 0c             	add    esp,0xc
c0014e32:	c3                   	ret    
c0014e33:	83 ec 0c             	sub    esp,0xc
c0014e36:	68 1a bb 02 c0       	push   0xc002bb1a
c0014e3b:	e8 5d dc ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014e40:	5a                   	pop    edx
c0014e41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e45:	e8 fe fa ff ff       	call   c0014948 <displayDebugInfo(regs*)>

c0014e4a <gpFault(regs*, void*)>:
c0014e4a:	53                   	push   ebx
c0014e4b:	83 ec 14             	sub    esp,0x14
c0014e4e:	c7 05 64 f2 02 c0 26 f2 01 c0 	mov    DWORD PTR ds:0xc002f264,0xc001f226
c0014e58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e5c:	53                   	push   ebx
c0014e5d:	e8 c4 a3 00 00       	call   c001f226 <Vm::faultHandler(regs*)>
c0014e62:	83 c4 10             	add    esp,0x10
c0014e65:	84 c0                	test   al,al
c0014e67:	74 05                	je     c0014e6e <gpFault(regs*, void*)+0x24>
c0014e69:	83 c4 08             	add    esp,0x8
c0014e6c:	5b                   	pop    ebx
c0014e6d:	c3                   	ret    
c0014e6e:	83 ec 0c             	sub    esp,0xc
c0014e71:	68 3d bb 02 c0       	push   0xc002bb3d
c0014e76:	e8 22 dc ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e7e:	e8 c5 fa ff ff       	call   c0014948 <displayDebugInfo(regs*)>

c0014e83 <pgFault(regs*, void*)>:
c0014e83:	83 ec 18             	sub    esp,0x18
c0014e86:	68 58 bb 02 c0       	push   0xc002bb58
c0014e8b:	e8 0d dc ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014e90:	58                   	pop    eax
c0014e91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e95:	e8 ae fa ff ff       	call   c0014948 <displayDebugInfo(regs*)>

c0014e9a <otherISRHandler(regs*, void*)>:
c0014e9a:	53                   	push   ebx
c0014e9b:	83 ec 0c             	sub    esp,0xc
c0014e9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ea2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ea5:	50                   	push   eax
c0014ea6:	50                   	push   eax
c0014ea7:	68 65 bb 02 c0       	push   0xc002bb65
c0014eac:	e8 ec db ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014eb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eb4:	e8 8f fa ff ff       	call   c0014948 <displayDebugInfo(regs*)>

c0014eb9 <opcodeFault(regs*, void*)>:
c0014eb9:	55                   	push   ebp
c0014eba:	89 e5                	mov    ebp,esp
c0014ebc:	56                   	push   esi
c0014ebd:	53                   	push   ebx
c0014ebe:	83 ec 40             	sub    esp,0x40
c0014ec1:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0014ec6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ecc:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ed2:	84 c0                	test   al,al
c0014ed4:	74 24                	je     c0014efa <opcodeFault(regs*, void*)+0x41>
c0014ed6:	83 ec 0c             	sub    esp,0xc
c0014ed9:	68 84 bb 02 c0       	push   0xc002bb84
c0014ede:	e8 ba db ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eec:	8d 50 19             	lea    edx,[eax+0x19]
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef5:	e9 d5 05 00 00       	jmp    c00154cf <opcodeFault(regs*, void*)+0x616>
c0014efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f03:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f07:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f11:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f17:	8a 00                	mov    al,BYTE PTR [eax]
c0014f19:	3c f0                	cmp    al,0xf0
c0014f1b:	75 17                	jne    c0014f34 <opcodeFault(regs*, void*)+0x7b>
c0014f1d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f26:	8d 50 01             	lea    edx,[eax+0x1]
c0014f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f2f:	e9 da 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f37:	8a 00                	mov    al,BYTE PTR [eax]
c0014f39:	3c f2                	cmp    al,0xf2
c0014f3b:	74 09                	je     c0014f46 <opcodeFault(regs*, void*)+0x8d>
c0014f3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f40:	8a 00                	mov    al,BYTE PTR [eax]
c0014f42:	3c f3                	cmp    al,0xf3
c0014f44:	75 1b                	jne    c0014f61 <opcodeFault(regs*, void*)+0xa8>
c0014f46:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f4a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f53:	8d 50 01             	lea    edx,[eax+0x1]
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f5c:	e9 ad 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f64:	8a 00                	mov    al,BYTE PTR [eax]
c0014f66:	3c 66                	cmp    al,0x66
c0014f68:	75 1f                	jne    c0014f89 <opcodeFault(regs*, void*)+0xd0>
c0014f6a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f6e:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f84:	e9 85 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8e:	3c 67                	cmp    al,0x67
c0014f90:	75 18                	jne    c0014faa <opcodeFault(regs*, void*)+0xf1>
c0014f92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa8:	eb 64                	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014faa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fad:	8a 00                	mov    al,BYTE PTR [eax]
c0014faf:	3c 2e                	cmp    al,0x2e
c0014fb1:	74 09                	je     c0014fbc <opcodeFault(regs*, void*)+0x103>
c0014fb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb8:	3c 3e                	cmp    al,0x3e
c0014fba:	75 18                	jne    c0014fd4 <opcodeFault(regs*, void*)+0x11b>
c0014fbc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fc0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc9:	8d 50 01             	lea    edx,[eax+0x1]
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fd2:	eb 3a                	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014fd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd9:	3c 36                	cmp    al,0x36
c0014fdb:	74 1b                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe2:	3c 26                	cmp    al,0x26
c0014fe4:	74 12                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fe6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe9:	8a 00                	mov    al,BYTE PTR [eax]
c0014feb:	3c 64                	cmp    al,0x64
c0014fed:	74 09                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff4:	3c 65                	cmp    al,0x65
c0014ff6:	75 16                	jne    c001500e <opcodeFault(regs*, void*)+0x155>
c0014ff8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ffc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015002:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015005:	8d 50 01             	lea    edx,[eax+0x1]
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001500e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015011:	8a 00                	mov    al,BYTE PTR [eax]
c0015013:	3c 0f                	cmp    al,0xf
c0015015:	0f 85 ad 00 00 00    	jne    c00150c8 <opcodeFault(regs*, void*)+0x20f>
c001501b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001501e:	40                   	inc    eax
c001501f:	8a 00                	mov    al,BYTE PTR [eax]
c0015021:	3c c2                	cmp    al,0xc2
c0015023:	74 0e                	je     c0015033 <opcodeFault(regs*, void*)+0x17a>
c0015025:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015028:	40                   	inc    eax
c0015029:	8a 00                	mov    al,BYTE PTR [eax]
c001502b:	3c c3                	cmp    al,0xc3
c001502d:	0f 85 95 00 00 00    	jne    c00150c8 <opcodeFault(regs*, void*)+0x20f>
c0015033:	83 ec 0c             	sub    esp,0xc
c0015036:	68 a7 bb 02 c0       	push   0xc002bba7
c001503b:	e8 5d da ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0015040:	83 c4 10             	add    esp,0x10
c0015043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015046:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015049:	8d 50 01             	lea    edx,[eax+0x1]
c001504c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015052:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015055:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015058:	8a 00                	mov    al,BYTE PTR [eax]
c001505a:	8d 50 fe             	lea    edx,[eax-0x2]
c001505d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015060:	88 10                	mov    BYTE PTR [eax],dl
c0015062:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015065:	50                   	push   eax
c0015066:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015069:	50                   	push   eax
c001506a:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001506d:	50                   	push   eax
c001506e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015071:	e8 2a 4b 00 00       	call   c0019ba0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015076:	83 c4 10             	add    esp,0x10
c0015079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001507f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015082:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015085:	01 d0                	add    eax,edx
c0015087:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001508a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015090:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015093:	48                   	dec    eax
c0015094:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001509d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	83 ec 04             	sub    esp,0x4
c00150a6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00150a9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150ac:	50                   	push   eax
c00150ad:	e8 02 b1 fe ff       	call   c00001b4 <voodooXADD>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00150b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00150bb:	01 c2                	add    edx,eax
c00150bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150c3:	e9 07 04 00 00       	jmp    c00154cf <opcodeFault(regs*, void*)+0x616>
c00150c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150cb:	8a 00                	mov    al,BYTE PTR [eax]
c00150cd:	3c 0f                	cmp    al,0xf
c00150cf:	0f 85 8b 01 00 00    	jne    c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d8:	40                   	inc    eax
c00150d9:	8a 00                	mov    al,BYTE PTR [eax]
c00150db:	3c c7                	cmp    al,0xc7
c00150dd:	0f 86 7d 01 00 00    	jbe    c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e6:	40                   	inc    eax
c00150e7:	8a 00                	mov    al,BYTE PTR [eax]
c00150e9:	3c cf                	cmp    al,0xcf
c00150eb:	0f 87 6f 01 00 00    	ja     c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f4:	40                   	inc    eax
c00150f5:	8a 00                	mov    al,BYTE PTR [eax]
c00150f7:	83 c0 38             	add    eax,0x38
c00150fa:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00150fd:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015101:	75 0b                	jne    c001510e <opcodeFault(regs*, void*)+0x255>
c0015103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015106:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015109:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001510c:	eb 75                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001510e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015112:	75 0b                	jne    c001511f <opcodeFault(regs*, void*)+0x266>
c0015114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015117:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001511a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001511d:	eb 64                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001511f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015123:	75 0b                	jne    c0015130 <opcodeFault(regs*, void*)+0x277>
c0015125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015128:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001512b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001512e:	eb 53                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015130:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015134:	75 0b                	jne    c0015141 <opcodeFault(regs*, void*)+0x288>
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001513c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001513f:	eb 42                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015141:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015145:	75 0b                	jne    c0015152 <opcodeFault(regs*, void*)+0x299>
c0015147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001514d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015150:	eb 31                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015152:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015156:	75 0b                	jne    c0015163 <opcodeFault(regs*, void*)+0x2aa>
c0015158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001515e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015161:	eb 20                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015163:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015167:	75 0b                	jne    c0015174 <opcodeFault(regs*, void*)+0x2bb>
c0015169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001516f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015172:	eb 0f                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015174:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015178:	75 09                	jne    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001517a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015180:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015183:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015187:	74 10                	je     c0015199 <opcodeFault(regs*, void*)+0x2e0>
c0015189:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015190:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015197:	eb 2d                	jmp    c00151c6 <opcodeFault(regs*, void*)+0x30d>
c0015199:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001519c:	c1 e0 18             	shl    eax,0x18
c001519f:	89 c2                	mov    edx,eax
c00151a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151a4:	c1 e0 08             	shl    eax,0x8
c00151a7:	25 00 00 ff 00       	and    eax,0xff0000
c00151ac:	09 c2                	or     edx,eax
c00151ae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151b1:	c1 e8 08             	shr    eax,0x8
c00151b4:	25 00 ff 00 00       	and    eax,0xff00
c00151b9:	09 c2                	or     edx,eax
c00151bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151be:	c1 e8 18             	shr    eax,0x18
c00151c1:	09 d0                	or     eax,edx
c00151c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151c6:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00151ca:	75 0b                	jne    c00151d7 <opcodeFault(regs*, void*)+0x31e>
c00151cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151d2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151d5:	eb 75                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151d7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151db:	75 0b                	jne    c00151e8 <opcodeFault(regs*, void*)+0x32f>
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151e3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00151e6:	eb 64                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151e8:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151ec:	75 0b                	jne    c00151f9 <opcodeFault(regs*, void*)+0x340>
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151f4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151f7:	eb 53                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151f9:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151fd:	75 0b                	jne    c001520a <opcodeFault(regs*, void*)+0x351>
c00151ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015202:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015205:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015208:	eb 42                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001520a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001520e:	75 0b                	jne    c001521b <opcodeFault(regs*, void*)+0x362>
c0015210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015213:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015216:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015219:	eb 31                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001521b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001521f:	75 0b                	jne    c001522c <opcodeFault(regs*, void*)+0x373>
c0015221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015224:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015227:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001522a:	eb 20                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001522c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015230:	75 0b                	jne    c001523d <opcodeFault(regs*, void*)+0x384>
c0015232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015235:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015238:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001523b:	eb 0f                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001523d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015241:	75 09                	jne    c001524c <opcodeFault(regs*, void*)+0x393>
c0015243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015246:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015249:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001524c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015252:	8d 50 02             	lea    edx,[eax+0x2]
c0015255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015258:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001525b:	e9 6f 02 00 00       	jmp    c00154cf <opcodeFault(regs*, void*)+0x616>
c0015260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015263:	8a 00                	mov    al,BYTE PTR [eax]
c0015265:	3c 0f                	cmp    al,0xf
c0015267:	0f 85 8d 01 00 00    	jne    c00153fa <opcodeFault(regs*, void*)+0x541>
c001526d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015270:	40                   	inc    eax
c0015271:	8a 00                	mov    al,BYTE PTR [eax]
c0015273:	3c c7                	cmp    al,0xc7
c0015275:	0f 85 7f 01 00 00    	jne    c00153fa <opcodeFault(regs*, void*)+0x541>
c001527b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001527e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015281:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015284:	8d 50 01             	lea    edx,[eax+0x1]
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001528d:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015290:	50                   	push   eax
c0015291:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015294:	50                   	push   eax
c0015295:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015298:	50                   	push   eax
c0015299:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001529c:	e8 ff 48 00 00       	call   c0019ba0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00152a7:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00152aa:	83 f0 01             	xor    eax,0x1
c00152ad:	84 c0                	test   al,al
c00152af:	0f 84 45 01 00 00    	je     c00153fa <opcodeFault(regs*, void*)+0x541>
c00152b5:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00152b8:	3c 01                	cmp    al,0x1
c00152ba:	0f 85 3a 01 00 00    	jne    c00153fa <opcodeFault(regs*, void*)+0x541>
c00152c0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00152c3:	83 f0 01             	xor    eax,0x1
c00152c6:	84 c0                	test   al,al
c00152c8:	0f 84 2c 01 00 00    	je     c00153fa <opcodeFault(regs*, void*)+0x541>
c00152ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00152d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152d7:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00152de:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152e1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152e4:	89 c2                	mov    edx,eax
c00152e6:	b8 00 00 00 00       	mov    eax,0x0
c00152eb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152ee:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00152f7:	ba 00 00 00 00       	mov    edx,0x0
c00152fc:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00152ff:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015305:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015308:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001530b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015312:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015315:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015318:	89 c2                	mov    edx,eax
c001531a:	b8 00 00 00 00       	mov    eax,0x0
c001531f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015322:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001532b:	ba 00 00 00 00       	mov    edx,0x0
c0015330:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015333:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015336:	fa                   	cli    
c0015337:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001533c:	40                   	inc    eax
c001533d:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0015342:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015345:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015348:	8b 00                	mov    eax,DWORD PTR [eax]
c001534a:	89 c1                	mov    ecx,eax
c001534c:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001534f:	89 cb                	mov    ebx,ecx
c0015351:	89 d0                	mov    eax,edx
c0015353:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015356:	89 c6                	mov    esi,eax
c0015358:	89 f0                	mov    eax,esi
c001535a:	09 d8                	or     eax,ebx
c001535c:	85 c0                	test   eax,eax
c001535e:	75 21                	jne    c0015381 <opcodeFault(regs*, void*)+0x4c8>
c0015360:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015363:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015366:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015369:	89 01                	mov    DWORD PTR [ecx],eax
c001536b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001536e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015371:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015374:	83 c8 40             	or     eax,0x40
c0015377:	89 c2                	mov    edx,eax
c0015379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001537f:	eb 3e                	jmp    c00153bf <opcodeFault(regs*, void*)+0x506>
c0015381:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015384:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015387:	8b 00                	mov    eax,DWORD PTR [eax]
c0015389:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001538c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001538f:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015395:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015398:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001539b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001539e:	89 d0                	mov    eax,edx
c00153a0:	31 d2                	xor    edx,edx
c00153a2:	89 c3                	mov    ebx,eax
c00153a4:	89 d6                	mov    esi,edx
c00153a6:	89 da                	mov    edx,ebx
c00153a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ab:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00153ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153b4:	83 e0 bf             	and    eax,0xffffffbf
c00153b7:	89 c2                	mov    edx,eax
c00153b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153bf:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c00153c4:	48                   	dec    eax
c00153c5:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c00153ca:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c00153cf:	85 c0                	test   eax,eax
c00153d1:	75 01                	jne    c00153d4 <opcodeFault(regs*, void*)+0x51b>
c00153d3:	fb                   	sti    
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153da:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00153dd:	01 c2                	add    edx,eax
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e5:	83 ec 0c             	sub    esp,0xc
c00153e8:	68 b6 bb 02 c0       	push   0xc002bbb6
c00153ed:	e8 ab d6 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	e9 d5 00 00 00       	jmp    c00154cf <opcodeFault(regs*, void*)+0x616>
c00153fa:	83 ec 0c             	sub    esp,0xc
c00153fd:	68 c9 bb 02 c0       	push   0xc002bbc9
c0015402:	e8 96 d6 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015413:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015416:	c1 e0 04             	shl    eax,0x4
c0015419:	01 d0                	add    eax,edx
c001541b:	83 c0 03             	add    eax,0x3
c001541e:	8a 00                	mov    al,BYTE PTR [eax]
c0015420:	0f b6 d8             	movzx  ebx,al
c0015423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015426:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001542f:	c1 e0 04             	shl    eax,0x4
c0015432:	01 d0                	add    eax,edx
c0015434:	83 c0 02             	add    eax,0x2
c0015437:	8a 00                	mov    al,BYTE PTR [eax]
c0015439:	0f b6 c8             	movzx  ecx,al
c001543c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015448:	c1 e0 04             	shl    eax,0x4
c001544b:	01 d0                	add    eax,edx
c001544d:	40                   	inc    eax
c001544e:	8a 00                	mov    al,BYTE PTR [eax]
c0015450:	0f b6 d0             	movzx  edx,al
c0015453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015456:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001545f:	c1 e0 04             	shl    eax,0x4
c0015462:	01 f0                	add    eax,esi
c0015464:	8a 00                	mov    al,BYTE PTR [eax]
c0015466:	0f b6 c0             	movzx  eax,al
c0015469:	83 ec 0c             	sub    esp,0xc
c001546c:	53                   	push   ebx
c001546d:	51                   	push   ecx
c001546e:	52                   	push   edx
c001546f:	50                   	push   eax
c0015470:	68 dc bb 02 c0       	push   0xc002bbdc
c0015475:	e8 23 d6 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001547a:	83 c4 20             	add    esp,0x20
c001547d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015480:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015483:	83 c0 03             	add    eax,0x3
c0015486:	8a 00                	mov    al,BYTE PTR [eax]
c0015488:	0f b6 d8             	movzx  ebx,al
c001548b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015491:	83 c0 02             	add    eax,0x2
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	0f b6 c8             	movzx  ecx,al
c0015499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001549f:	40                   	inc    eax
c00154a0:	8a 00                	mov    al,BYTE PTR [eax]
c00154a2:	0f b6 d0             	movzx  edx,al
c00154a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ab:	8a 00                	mov    al,BYTE PTR [eax]
c00154ad:	0f b6 c0             	movzx  eax,al
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	53                   	push   ebx
c00154b4:	51                   	push   ecx
c00154b5:	52                   	push   edx
c00154b6:	50                   	push   eax
c00154b7:	68 04 bc 02 c0       	push   0xc002bc04
c00154bc:	e8 dc d5 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00154c1:	83 c4 20             	add    esp,0x20
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ca:	e8 79 f4 ff ff       	call   c0014948 <displayDebugInfo(regs*)>
c00154cf:	8d 65 f8             	lea    esp,[ebp-0x8]
c00154d2:	5b                   	pop    ebx
c00154d3:	5e                   	pop    esi
c00154d4:	5d                   	pop    ebp
c00154d5:	c3                   	ret    

c00154d6 <displayProgramFault(char const*)>:
c00154d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154de:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154e4:	85 c0                	test   eax,eax
c00154e6:	74 15                	je     c00154fd <displayProgramFault(char const*)+0x27>
c00154e8:	83 ec 0c             	sub    esp,0xc
c00154eb:	6a 04                	push   0x4
c00154ed:	6a 0f                	push   0xf
c00154ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154f3:	50                   	push   eax
c00154f4:	e8 95 b4 ff ff       	call   c001098e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154f9:	83 c4 1c             	add    esp,0x1c
c00154fc:	c3                   	ret    
c00154fd:	c3                   	ret    

c00154fe <setupInterruptController()>:
c00154fe:	55                   	push   ebp
c00154ff:	89 e5                	mov    ebp,esp
c0015501:	53                   	push   ebx
c0015502:	83 ec 24             	sub    esp,0x24
c0015505:	b8 00 00 00 00       	mov    eax,0x0
c001550a:	85 c0                	test   eax,eax
c001550c:	0f 95 c0             	setne  al
c001550f:	84 c0                	test   al,al
c0015511:	74 5b                	je     c001556e <setupInterruptController()+0x70>
c0015513:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001551a:	83 ec 0c             	sub    esp,0xc
c001551d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015520:	e8 67 a3 ff ff       	call   c000f88c <malloc>
c0015525:	83 c4 10             	add    esp,0x10
c0015528:	89 c3                	mov    ebx,eax
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	53                   	push   ebx
c001552e:	e8 77 0e 01 00       	call   c00263aa <APIC::APIC()>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015539:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001553c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001553f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015541:	83 c0 08             	add    eax,0x8
c0015544:	8b 00                	mov    eax,DWORD PTR [eax]
c0015546:	6a 00                	push   0x0
c0015548:	6a 00                	push   0x0
c001554a:	6a 00                	push   0x0
c001554c:	52                   	push   edx
c001554d:	ff d0                	call   eax
c001554f:	83 c4 10             	add    esp,0x10
c0015552:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0015557:	83 ec 08             	sub    esp,0x8
c001555a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001555d:	50                   	push   eax
c001555e:	e8 73 e9 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015569:	e9 89 03 00 00       	jmp    c00158f7 <setupInterruptController()+0x3f9>
c001556e:	a0 60 1a 03 c0       	mov    al,ds:0xc0031a60
c0015573:	84 c0                	test   al,al
c0015575:	75 24                	jne    c001559b <setupInterruptController()+0x9d>
c0015577:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001557c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015582:	83 e2 fe             	and    edx,0xfffffffe
c0015585:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	68 29 bc 02 c0       	push   0xc002bc29
c0015593:	e8 05 d5 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0015598:	83 c4 10             	add    esp,0x10
c001559b:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00155a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00155a6:	83 e0 01             	and    eax,0x1
c00155a9:	84 c0                	test   al,al
c00155ab:	0f 95 c0             	setne  al
c00155ae:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00155b1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155be:	e8 c9 a2 ff ff       	call   c000f88c <malloc>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	89 c3                	mov    ebx,eax
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	53                   	push   ebx
c00155cc:	e8 31 13 01 00       	call   c0026902 <PIC::PIC()>
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00155d7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155df:	83 c0 08             	add    eax,0x8
c00155e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e4:	6a 00                	push   0x0
c00155e6:	6a 00                	push   0x0
c00155e8:	6a 00                	push   0x0
c00155ea:	52                   	push   edx
c00155eb:	ff d0                	call   eax
c00155ed:	83 c4 10             	add    esp,0x10
c00155f0:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00155f4:	74 73                	je     c0015669 <setupInterruptController()+0x16b>
c00155f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fe:	83 c0 0c             	add    eax,0xc
c0015601:	8b 00                	mov    eax,DWORD PTR [eax]
c0015603:	6a 00                	push   0x0
c0015605:	6a 00                	push   0x0
c0015607:	6a 00                	push   0x0
c0015609:	52                   	push   edx
c001560a:	ff d0                	call   eax
c001560c:	83 c4 10             	add    esp,0x10
c001560f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015613:	74 15                	je     c001562a <setupInterruptController()+0x12c>
c0015615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015618:	8b 00                	mov    eax,DWORD PTR [eax]
c001561a:	83 c0 04             	add    eax,0x4
c001561d:	8b 00                	mov    eax,DWORD PTR [eax]
c001561f:	83 ec 0c             	sub    esp,0xc
c0015622:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015625:	ff d0                	call   eax
c0015627:	83 c4 10             	add    esp,0x10
c001562a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015631:	83 ec 0c             	sub    esp,0xc
c0015634:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015637:	e8 50 a2 ff ff       	call   c000f88c <malloc>
c001563c:	83 c4 10             	add    esp,0x10
c001563f:	89 c3                	mov    ebx,eax
c0015641:	83 ec 0c             	sub    esp,0xc
c0015644:	53                   	push   ebx
c0015645:	e8 60 0d 01 00       	call   c00263aa <APIC::APIC()>
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015650:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015653:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015656:	8b 00                	mov    eax,DWORD PTR [eax]
c0015658:	83 c0 08             	add    eax,0x8
c001565b:	8b 00                	mov    eax,DWORD PTR [eax]
c001565d:	6a 00                	push   0x0
c001565f:	6a 00                	push   0x0
c0015661:	6a 00                	push   0x0
c0015663:	52                   	push   edx
c0015664:	ff d0                	call   eax
c0015666:	83 c4 10             	add    esp,0x10
c0015669:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001566e:	83 ec 08             	sub    esp,0x8
c0015671:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015674:	50                   	push   eax
c0015675:	e8 5c e8 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	c7 05 68 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f268,0x0
c0015687:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568a:	8b 00                	mov    eax,DWORD PTR [eax]
c001568c:	83 c0 24             	add    eax,0x24
c001568f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015691:	6a 00                	push   0x0
c0015693:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015698:	6a 00                	push   0x0
c001569a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569d:	ff d0                	call   eax
c001569f:	83 c4 10             	add    esp,0x10
c00156a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a7:	83 c0 24             	add    eax,0x24
c00156aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ac:	6a 00                	push   0x0
c00156ae:	68 9a 4e 01 c0       	push   0xc0014e9a
c00156b3:	6a 01                	push   0x1
c00156b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b8:	ff d0                	call   eax
c00156ba:	83 c4 10             	add    esp,0x10
c00156bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c2:	83 c0 24             	add    eax,0x24
c00156c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c7:	6a 00                	push   0x0
c00156c9:	68 a5 47 01 c0       	push   0xc00147a5
c00156ce:	6a 02                	push   0x2
c00156d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d3:	ff d0                	call   eax
c00156d5:	83 c4 10             	add    esp,0x10
c00156d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156db:	8b 00                	mov    eax,DWORD PTR [eax]
c00156dd:	83 c0 24             	add    eax,0x24
c00156e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e2:	6a 00                	push   0x0
c00156e4:	68 9a 4e 01 c0       	push   0xc0014e9a
c00156e9:	6a 03                	push   0x3
c00156eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ee:	ff d0                	call   eax
c00156f0:	83 c4 10             	add    esp,0x10
c00156f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f8:	83 c0 24             	add    eax,0x24
c00156fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fd:	6a 00                	push   0x0
c00156ff:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015704:	6a 04                	push   0x4
c0015706:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015709:	ff d0                	call   eax
c001570b:	83 c4 10             	add    esp,0x10
c001570e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015711:	8b 00                	mov    eax,DWORD PTR [eax]
c0015713:	83 c0 24             	add    eax,0x24
c0015716:	8b 00                	mov    eax,DWORD PTR [eax]
c0015718:	6a 00                	push   0x0
c001571a:	68 9a 4e 01 c0       	push   0xc0014e9a
c001571f:	6a 05                	push   0x5
c0015721:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015724:	ff d0                	call   eax
c0015726:	83 c4 10             	add    esp,0x10
c0015729:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572c:	8b 00                	mov    eax,DWORD PTR [eax]
c001572e:	83 c0 24             	add    eax,0x24
c0015731:	8b 00                	mov    eax,DWORD PTR [eax]
c0015733:	6a 00                	push   0x0
c0015735:	68 b9 4e 01 c0       	push   0xc0014eb9
c001573a:	6a 06                	push   0x6
c001573c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001573f:	ff d0                	call   eax
c0015741:	83 c4 10             	add    esp,0x10
c0015744:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015747:	8b 00                	mov    eax,DWORD PTR [eax]
c0015749:	83 c0 24             	add    eax,0x24
c001574c:	8b 00                	mov    eax,DWORD PTR [eax]
c001574e:	6a 00                	push   0x0
c0015750:	68 d7 4d 01 c0       	push   0xc0014dd7
c0015755:	6a 07                	push   0x7
c0015757:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001575a:	ff d0                	call   eax
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015762:	8b 00                	mov    eax,DWORD PTR [eax]
c0015764:	83 c0 24             	add    eax,0x24
c0015767:	8b 00                	mov    eax,DWORD PTR [eax]
c0015769:	6a 00                	push   0x0
c001576b:	68 c0 45 01 c0       	push   0xc00145c0
c0015770:	6a 08                	push   0x8
c0015772:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015775:	ff d0                	call   eax
c0015777:	83 c4 10             	add    esp,0x10
c001577a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001577d:	8b 00                	mov    eax,DWORD PTR [eax]
c001577f:	83 c0 24             	add    eax,0x24
c0015782:	8b 00                	mov    eax,DWORD PTR [eax]
c0015784:	6a 00                	push   0x0
c0015786:	68 9a 4e 01 c0       	push   0xc0014e9a
c001578b:	6a 09                	push   0x9
c001578d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015790:	ff d0                	call   eax
c0015792:	83 c4 10             	add    esp,0x10
c0015795:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015798:	8b 00                	mov    eax,DWORD PTR [eax]
c001579a:	83 c0 24             	add    eax,0x24
c001579d:	8b 00                	mov    eax,DWORD PTR [eax]
c001579f:	6a 00                	push   0x0
c00157a1:	68 9a 4e 01 c0       	push   0xc0014e9a
c00157a6:	6a 0a                	push   0xa
c00157a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ab:	ff d0                	call   eax
c00157ad:	83 c4 10             	add    esp,0x10
c00157b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b5:	83 c0 24             	add    eax,0x24
c00157b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ba:	6a 00                	push   0x0
c00157bc:	68 9a 4e 01 c0       	push   0xc0014e9a
c00157c1:	6a 0b                	push   0xb
c00157c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157c6:	ff d0                	call   eax
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d0:	83 c0 24             	add    eax,0x24
c00157d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d5:	6a 00                	push   0x0
c00157d7:	68 9a 4e 01 c0       	push   0xc0014e9a
c00157dc:	6a 0c                	push   0xc
c00157de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e1:	ff d0                	call   eax
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00157eb:	83 c0 24             	add    eax,0x24
c00157ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f0:	6a 00                	push   0x0
c00157f2:	68 4a 4e 01 c0       	push   0xc0014e4a
c00157f7:	6a 0d                	push   0xd
c00157f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157fc:	ff d0                	call   eax
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015804:	8b 00                	mov    eax,DWORD PTR [eax]
c0015806:	83 c0 24             	add    eax,0x24
c0015809:	8b 00                	mov    eax,DWORD PTR [eax]
c001580b:	6a 00                	push   0x0
c001580d:	68 83 4e 01 c0       	push   0xc0014e83
c0015812:	6a 0e                	push   0xe
c0015814:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015817:	ff d0                	call   eax
c0015819:	83 c4 10             	add    esp,0x10
c001581c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001581f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015821:	83 c0 24             	add    eax,0x24
c0015824:	8b 00                	mov    eax,DWORD PTR [eax]
c0015826:	6a 00                	push   0x0
c0015828:	68 9a 4e 01 c0       	push   0xc0014e9a
c001582d:	6a 0f                	push   0xf
c001582f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015832:	ff d0                	call   eax
c0015834:	83 c4 10             	add    esp,0x10
c0015837:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001583a:	8b 00                	mov    eax,DWORD PTR [eax]
c001583c:	83 c0 24             	add    eax,0x24
c001583f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015841:	6a 00                	push   0x0
c0015843:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015848:	6a 10                	push   0x10
c001584a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001584d:	ff d0                	call   eax
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015855:	8b 00                	mov    eax,DWORD PTR [eax]
c0015857:	83 c0 24             	add    eax,0x24
c001585a:	8b 00                	mov    eax,DWORD PTR [eax]
c001585c:	6a 00                	push   0x0
c001585e:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015863:	6a 11                	push   0x11
c0015865:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015868:	ff d0                	call   eax
c001586a:	83 c4 10             	add    esp,0x10
c001586d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015870:	8b 00                	mov    eax,DWORD PTR [eax]
c0015872:	83 c0 24             	add    eax,0x24
c0015875:	8b 00                	mov    eax,DWORD PTR [eax]
c0015877:	6a 00                	push   0x0
c0015879:	68 9a 4e 01 c0       	push   0xc0014e9a
c001587e:	6a 12                	push   0x12
c0015880:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015883:	ff d0                	call   eax
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001588b:	8b 00                	mov    eax,DWORD PTR [eax]
c001588d:	83 c0 24             	add    eax,0x24
c0015890:	8b 00                	mov    eax,DWORD PTR [eax]
c0015892:	6a 00                	push   0x0
c0015894:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015899:	6a 13                	push   0x13
c001589b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001589e:	ff d0                	call   eax
c00158a0:	83 c4 10             	add    esp,0x10
c00158a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a8:	83 c0 24             	add    eax,0x24
c00158ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ad:	6a 00                	push   0x0
c00158af:	68 9a 4e 01 c0       	push   0xc0014e9a
c00158b4:	6a 14                	push   0x14
c00158b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158b9:	ff d0                	call   eax
c00158bb:	83 c4 10             	add    esp,0x10
c00158be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c3:	83 c0 24             	add    eax,0x24
c00158c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c8:	6a 00                	push   0x0
c00158ca:	68 9a 4e 01 c0       	push   0xc0014e9a
c00158cf:	6a 1e                	push   0x1e
c00158d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158d4:	ff d0                	call   eax
c00158d6:	83 c4 10             	add    esp,0x10
c00158d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00158de:	83 c0 24             	add    eax,0x24
c00158e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e3:	6a 00                	push   0x0
c00158e5:	68 cc c8 01 c0       	push   0xc001c8cc
c00158ea:	6a 60                	push   0x60
c00158ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158ef:	ff d0                	call   eax
c00158f1:	83 c4 10             	add    esp,0x10
c00158f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158fa:	c9                   	leave  
c00158fb:	c3                   	ret    

c00158fc <InterruptController::convertLegacyIRQNumber(int)>:
c00158fc:	55                   	push   ebp
c00158fd:	89 e5                	mov    ebp,esp
c00158ff:	83 ec 08             	sub    esp,0x8
c0015902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015905:	83 ec 0c             	sub    esp,0xc
c0015908:	50                   	push   eax
c0015909:	e8 c8 e8 ff ff       	call   c00141d6 <Device::getName()>
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	8a 00                	mov    al,BYTE PTR [eax]
c0015913:	3c 41                	cmp    al,0x41
c0015915:	0f 94 c0             	sete   al
c0015918:	84 c0                	test   al,al
c001591a:	74 28                	je     c0015944 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001591c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015920:	7f 12                	jg     c0015934 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015922:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015925:	05 40 e3 02 c0       	add    eax,0xc002e340
c001592a:	8a 00                	mov    al,BYTE PTR [eax]
c001592c:	0f b6 c0             	movzx  eax,al
c001592f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015932:	eb 10                	jmp    c0015944 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	68 18 b9 02 c0       	push   0xc002b918
c001593c:	e8 92 4b 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0015941:	83 c4 10             	add    esp,0x10
c0015944:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015947:	c9                   	leave  
c0015948:	c3                   	ret    
c0015949:	90                   	nop

c001594a <startGUI(void*)>:
c001594a:	55                   	push   ebp
c001594b:	89 e5                	mov    ebp,esp
c001594d:	53                   	push   ebx
c001594e:	83 ec 04             	sub    esp,0x4
c0015951:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015956:	48                   	dec    eax
c0015957:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001595c:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015961:	85 c0                	test   eax,eax
c0015963:	75 01                	jne    c0015966 <startGUI(void*)+0x1c>
c0015965:	fb                   	sti    
c0015966:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c001596c:	83 ec 08             	sub    esp,0x8
c001596f:	6a 01                	push   0x1
c0015971:	68 8c bc 02 c0       	push   0xc002bc8c
c0015976:	e8 2c 7f 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	83 ec 08             	sub    esp,0x8
c0015981:	53                   	push   ebx
c0015982:	50                   	push   eax
c0015983:	e8 4a 81 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c0015988:	83 c4 10             	add    esp,0x10
c001598b:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c0015991:	83 ec 08             	sub    esp,0x8
c0015994:	6a 01                	push   0x1
c0015996:	68 a6 bc 02 c0       	push   0xc002bca6
c001599b:	e8 07 7f 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	83 ec 08             	sub    esp,0x8
c00159a6:	53                   	push   ebx
c00159a7:	50                   	push   eax
c00159a8:	e8 25 81 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c00159ad:	83 c4 10             	add    esp,0x10
c00159b0:	90                   	nop
c00159b1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159b4:	c9                   	leave  
c00159b5:	c3                   	ret    

c00159b6 <startGUIVESA(void*)>:
c00159b6:	55                   	push   ebp
c00159b7:	89 e5                	mov    ebp,esp
c00159b9:	53                   	push   ebx
c00159ba:	83 ec 04             	sub    esp,0x4
c00159bd:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c00159c2:	48                   	dec    eax
c00159c3:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c00159c8:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c00159cd:	85 c0                	test   eax,eax
c00159cf:	75 01                	jne    c00159d2 <startGUIVESA(void*)+0x1c>
c00159d1:	fb                   	sti    
c00159d2:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c00159d8:	83 ec 08             	sub    esp,0x8
c00159db:	6a 01                	push   0x1
c00159dd:	68 c0 bc 02 c0       	push   0xc002bcc0
c00159e2:	e8 c0 7e 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c00159e7:	83 c4 10             	add    esp,0x10
c00159ea:	83 ec 08             	sub    esp,0x8
c00159ed:	53                   	push   ebx
c00159ee:	50                   	push   eax
c00159ef:	e8 de 80 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c00159f4:	83 c4 10             	add    esp,0x10
c00159f7:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c00159fd:	83 ec 08             	sub    esp,0x8
c0015a00:	6a 01                	push   0x1
c0015a02:	68 a6 bc 02 c0       	push   0xc002bca6
c0015a07:	e8 9b 7e 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	83 ec 08             	sub    esp,0x8
c0015a12:	53                   	push   ebx
c0015a13:	50                   	push   eax
c0015a14:	e8 b9 80 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	90                   	nop
c0015a1d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015a20:	c9                   	leave  
c0015a21:	c3                   	ret    

c0015a22 <sendKeyToTerminal(unsigned char)>:
c0015a22:	55                   	push   ebp
c0015a23:	89 e5                	mov    ebp,esp
c0015a25:	83 ec 28             	sub    esp,0x28
c0015a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015a2e:	a1 a4 f1 02 c0       	mov    eax,ds:0xc002f1a4
c0015a33:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015a37:	83 ec 08             	sub    esp,0x8
c0015a3a:	52                   	push   edx
c0015a3b:	50                   	push   eax
c0015a3c:	e8 25 b4 ff ff       	call   c0010e66 <VgaText::receiveKey(unsigned char)>
c0015a41:	83 c4 10             	add    esp,0x10
c0015a44:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015a48:	0f 85 8f 00 00 00    	jne    c0015add <sendKeyToTerminal(unsigned char)+0xbb>
c0015a4e:	fa                   	cli    
c0015a4f:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015a54:	40                   	inc    eax
c0015a55:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0015a5a:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c0015a5f:	40                   	inc    eax
c0015a60:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c0015a65:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c0015a6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a6d:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c0015a77:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a7b:	74 1f                	je     c0015a9c <sendKeyToTerminal(unsigned char)+0x7a>
c0015a7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015a83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a89:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a92:	e8 b3 8c 00 00       	call   c001e74a <unblockTask(ThreadControlBlock*)>
c0015a97:	83 c4 10             	add    esp,0x10
c0015a9a:	eb db                	jmp    c0015a77 <sendKeyToTerminal(unsigned char)+0x55>
c0015a9c:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c0015aa1:	48                   	dec    eax
c0015aa2:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c0015aa7:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c0015aac:	85 c0                	test   eax,eax
c0015aae:	75 18                	jne    c0015ac8 <sendKeyToTerminal(unsigned char)+0xa6>
c0015ab0:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c0015ab5:	85 c0                	test   eax,eax
c0015ab7:	74 0f                	je     c0015ac8 <sendKeyToTerminal(unsigned char)+0xa6>
c0015ab9:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c0015ac3:	e8 be 87 00 00       	call   c001e286 <schedule()>
c0015ac8:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015acd:	48                   	dec    eax
c0015ace:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0015ad3:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015ad8:	85 c0                	test   eax,eax
c0015ada:	75 01                	jne    c0015add <sendKeyToTerminal(unsigned char)+0xbb>
c0015adc:	fb                   	sti    
c0015add:	90                   	nop
c0015ade:	c9                   	leave  
c0015adf:	c3                   	ret    

c0015ae0 <sendKeyboardToken(KeyboardToken)>:
c0015ae0:	55                   	push   ebp
c0015ae1:	89 e5                	mov    ebp,esp
c0015ae3:	83 ec 18             	sub    esp,0x18
c0015ae6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aec:	0f b7 c0             	movzx  eax,ax
c0015aef:	83 f2 01             	xor    edx,0x1
c0015af2:	88 90 a0 f2 02 c0    	mov    BYTE PTR [eax-0x3ffd0d60],dl
c0015af8:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015afd:	85 c0                	test   eax,eax
c0015aff:	74 24                	je     c0015b25 <sendKeyboardToken(KeyboardToken)+0x45>
c0015b01:	8b 0d 88 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f288
c0015b07:	83 ec 04             	sub    esp,0x4
c0015b0a:	68 a0 f2 02 c0       	push   0xc002f2a0
c0015b0f:	83 ec 08             	sub    esp,0x8
c0015b12:	89 e2                	mov    edx,esp
c0015b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b17:	89 02                	mov    DWORD PTR [edx],eax
c0015b19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b1c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015b20:	ff d1                	call   ecx
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b28:	66 3d 03 02          	cmp    ax,0x203
c0015b2c:	75 07                	jne    c0015b35 <sendKeyboardToken(KeyboardToken)+0x55>
c0015b2e:	a0 a0 f3 02 c0       	mov    al,ds:0xc002f3a0
c0015b33:	84 c0                	test   al,al
c0015b35:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015b39:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015b3c:	a0 a8 f6 02 c0       	mov    al,ds:0xc002f6a8
c0015b41:	38 c2                	cmp    dl,al
c0015b43:	74 1c                	je     c0015b61 <sendKeyboardToken(KeyboardToken)+0x81>
c0015b45:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015b48:	a2 a8 f6 02 c0       	mov    ds:0xc002f6a8,al
c0015b4d:	a0 a8 f6 02 c0       	mov    al,ds:0xc002f6a8
c0015b52:	0f b6 c0             	movzx  eax,al
c0015b55:	83 ec 0c             	sub    esp,0xc
c0015b58:	50                   	push   eax
c0015b59:	e8 9e a6 ff ff       	call   c00101fc <setTerminalScrollLock(bool)>
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015b64:	84 c0                	test   al,al
c0015b66:	0f 84 ae 00 00 00    	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x13a>
c0015b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6f:	66 3d 10 03          	cmp    ax,0x310
c0015b73:	75 06                	jne    c0015b7b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015b75:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7e:	66 3d 11 03          	cmp    ax,0x311
c0015b82:	75 06                	jne    c0015b8a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015b84:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8d:	66 3d 12 03          	cmp    ax,0x312
c0015b91:	75 06                	jne    c0015b99 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015b93:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9c:	66 3d 13 03          	cmp    ax,0x313
c0015ba0:	75 06                	jne    c0015ba8 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ba2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bab:	66 3d 14 03          	cmp    ax,0x314
c0015baf:	75 06                	jne    c0015bb7 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015bb1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bba:	66 3d 15 03          	cmp    ax,0x315
c0015bbe:	75 06                	jne    c0015bc6 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015bc0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc9:	66 3d 16 03          	cmp    ax,0x316
c0015bcd:	75 06                	jne    c0015bd5 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015bcf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd8:	66 3d 17 03          	cmp    ax,0x317
c0015bdc:	75 06                	jne    c0015be4 <sendKeyboardToken(KeyboardToken)+0x104>
c0015bde:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be7:	66 3d 18 03          	cmp    ax,0x318
c0015beb:	75 06                	jne    c0015bf3 <sendKeyboardToken(KeyboardToken)+0x113>
c0015bed:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf6:	66 3d 19 03          	cmp    ax,0x319
c0015bfa:	75 06                	jne    c0015c02 <sendKeyboardToken(KeyboardToken)+0x122>
c0015bfc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c05:	66 3d 1a 03          	cmp    ax,0x31a
c0015c09:	0f 85 c9 00 00 00    	jne    c0015cd8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c0f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015c15:	e9 be 00 00 00       	jmp    c0015cd8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1d:	66 3d 10 03          	cmp    ax,0x310
c0015c21:	75 0a                	jne    c0015c2d <sendKeyboardToken(KeyboardToken)+0x14d>
c0015c23:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015c29:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c30:	66 3d 11 03          	cmp    ax,0x311
c0015c34:	75 0a                	jne    c0015c40 <sendKeyboardToken(KeyboardToken)+0x160>
c0015c36:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015c3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c43:	66 3d 12 03          	cmp    ax,0x312
c0015c47:	75 0a                	jne    c0015c53 <sendKeyboardToken(KeyboardToken)+0x173>
c0015c49:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015c4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c56:	66 3d 13 03          	cmp    ax,0x313
c0015c5a:	75 0a                	jne    c0015c66 <sendKeyboardToken(KeyboardToken)+0x186>
c0015c5c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015c62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c69:	66 3d 14 03          	cmp    ax,0x314
c0015c6d:	75 0a                	jne    c0015c79 <sendKeyboardToken(KeyboardToken)+0x199>
c0015c6f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015c75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7c:	66 3d 15 03          	cmp    ax,0x315
c0015c80:	75 0a                	jne    c0015c8c <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015c82:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c88:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8f:	66 3d 16 03          	cmp    ax,0x316
c0015c93:	75 0a                	jne    c0015c9f <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015c95:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015c9b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca2:	66 3d 17 03          	cmp    ax,0x317
c0015ca6:	75 0a                	jne    c0015cb2 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ca8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015cae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb5:	66 3d 18 03          	cmp    ax,0x318
c0015cb9:	75 0a                	jne    c0015cc5 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015cbb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015cc1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc8:	66 3d 19 03          	cmp    ax,0x319
c0015ccc:	75 0a                	jne    c0015cd8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015cce:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015cd4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdb:	66 3d 00 02          	cmp    ax,0x200
c0015cdf:	75 2c                	jne    c0015d0d <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ce1:	a0 a0 f6 02 c0       	mov    al,ds:0xc002f6a0
c0015ce6:	83 f0 01             	xor    eax,0x1
c0015ce9:	84 c0                	test   al,al
c0015ceb:	74 20                	je     c0015d0d <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ced:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0015cf2:	6a 01                	push   0x1
c0015cf4:	6a 00                	push   0x0
c0015cf6:	68 4a 59 01 c0       	push   0xc001594a
c0015cfb:	50                   	push   eax
c0015cfc:	e8 41 83 00 00       	call   c001e042 <Process::createThread(void (*)(void*), void*, int)>
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	c6 05 a0 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f6a0,0x1
c0015d0b:	eb 33                	jmp    c0015d40 <sendKeyboardToken(KeyboardToken)+0x260>
c0015d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d10:	66 3d 01 02          	cmp    ax,0x201
c0015d14:	75 2a                	jne    c0015d40 <sendKeyboardToken(KeyboardToken)+0x260>
c0015d16:	a0 a0 f6 02 c0       	mov    al,ds:0xc002f6a0
c0015d1b:	83 f0 01             	xor    eax,0x1
c0015d1e:	84 c0                	test   al,al
c0015d20:	74 1e                	je     c0015d40 <sendKeyboardToken(KeyboardToken)+0x260>
c0015d22:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0015d27:	6a 01                	push   0x1
c0015d29:	6a 00                	push   0x0
c0015d2b:	68 b6 59 01 c0       	push   0xc00159b6
c0015d30:	50                   	push   eax
c0015d31:	e8 0c 83 00 00       	call   c001e042 <Process::createThread(void (*)(void*), void*, int)>
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	c6 05 a0 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f6a0,0x1
c0015d40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d43:	66 3d 1d 03          	cmp    ax,0x31d
c0015d47:	75 06                	jne    c0015d4f <sendKeyboardToken(KeyboardToken)+0x26f>
c0015d49:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d52:	66 3d 1c 03          	cmp    ax,0x31c
c0015d56:	75 06                	jne    c0015d5e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015d58:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d61:	66 3d 1b 03          	cmp    ax,0x31b
c0015d65:	75 06                	jne    c0015d6d <sendKeyboardToken(KeyboardToken)+0x28d>
c0015d67:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d70:	66 3d 1e 03          	cmp    ax,0x31e
c0015d74:	75 06                	jne    c0015d7c <sendKeyboardToken(KeyboardToken)+0x29c>
c0015d76:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d7f:	66 3d 1f 03          	cmp    ax,0x31f
c0015d83:	75 06                	jne    c0015d8b <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015d85:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8e:	66 3d 1a 03          	cmp    ax,0x31a
c0015d92:	75 06                	jne    c0015d9a <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015d94:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015d9a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015d9e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015da1:	83 f0 01             	xor    eax,0x1
c0015da4:	84 c0                	test   al,al
c0015da6:	74 77                	je     c0015e1f <sendKeyboardToken(KeyboardToken)+0x33f>
c0015da8:	a0 a1 f3 02 c0       	mov    al,ds:0xc002f3a1
c0015dad:	84 c0                	test   al,al
c0015daf:	74 41                	je     c0015df2 <sendKeyboardToken(KeyboardToken)+0x312>
c0015db1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015db5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015db9:	74 2b                	je     c0015de6 <sendKeyboardToken(KeyboardToken)+0x306>
c0015dbb:	8b 15 a4 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f6a4
c0015dc1:	89 d0                	mov    eax,edx
c0015dc3:	c1 e0 02             	shl    eax,0x2
c0015dc6:	01 d0                	add    eax,edx
c0015dc8:	01 c0                	add    eax,eax
c0015dca:	a3 a4 f6 02 c0       	mov    ds:0xc002f6a4,eax
c0015dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd2:	0f b7 c0             	movzx  eax,ax
c0015dd5:	8d 50 d0             	lea    edx,[eax-0x30]
c0015dd8:	a1 a4 f6 02 c0       	mov    eax,ds:0xc002f6a4
c0015ddd:	01 d0                	add    eax,edx
c0015ddf:	a3 a4 f6 02 c0       	mov    ds:0xc002f6a4,eax
c0015de4:	eb 6d                	jmp    c0015e53 <sendKeyboardToken(KeyboardToken)+0x373>
c0015de6:	c7 05 a4 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f6a4,0x0
c0015df0:	eb 61                	jmp    c0015e53 <sendKeyboardToken(KeyboardToken)+0x373>
c0015df2:	a1 a4 f6 02 c0       	mov    eax,ds:0xc002f6a4
c0015df7:	85 c0                	test   eax,eax
c0015df9:	74 18                	je     c0015e13 <sendKeyboardToken(KeyboardToken)+0x333>
c0015dfb:	a1 a4 f6 02 c0       	mov    eax,ds:0xc002f6a4
c0015e00:	0f b6 c0             	movzx  eax,al
c0015e03:	83 ec 0c             	sub    esp,0xc
c0015e06:	50                   	push   eax
c0015e07:	e8 16 fc ff ff       	call   c0015a22 <sendKeyToTerminal(unsigned char)>
c0015e0c:	83 c4 10             	add    esp,0x10
c0015e0f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015e13:	c7 05 a4 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f6a4,0x0
c0015e1d:	eb 34                	jmp    c0015e53 <sendKeyboardToken(KeyboardToken)+0x373>
c0015e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e22:	66 3d 01 01          	cmp    ax,0x101
c0015e26:	75 2b                	jne    c0015e53 <sendKeyboardToken(KeyboardToken)+0x373>
c0015e28:	a1 a4 f6 02 c0       	mov    eax,ds:0xc002f6a4
c0015e2d:	85 c0                	test   eax,eax
c0015e2f:	74 18                	je     c0015e49 <sendKeyboardToken(KeyboardToken)+0x369>
c0015e31:	a1 a4 f6 02 c0       	mov    eax,ds:0xc002f6a4
c0015e36:	0f b6 c0             	movzx  eax,al
c0015e39:	83 ec 0c             	sub    esp,0xc
c0015e3c:	50                   	push   eax
c0015e3d:	e8 e0 fb ff ff       	call   c0015a22 <sendKeyToTerminal(unsigned char)>
c0015e42:	83 c4 10             	add    esp,0x10
c0015e45:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015e49:	c7 05 a4 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f6a4,0x0
c0015e53:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e56:	83 f0 01             	xor    eax,0x1
c0015e59:	84 c0                	test   al,al
c0015e5b:	74 4c                	je     c0015ea9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e5d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e60:	83 f0 01             	xor    eax,0x1
c0015e63:	84 c0                	test   al,al
c0015e65:	74 42                	je     c0015ea9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e67:	a0 a0 f3 02 c0       	mov    al,ds:0xc002f3a0
c0015e6c:	83 f0 01             	xor    eax,0x1
c0015e6f:	84 c0                	test   al,al
c0015e71:	74 36                	je     c0015ea9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e76:	66 83 f8 1f          	cmp    ax,0x1f
c0015e7a:	76 09                	jbe    c0015e85 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7f:	66 83 f8 7e          	cmp    ax,0x7e
c0015e83:	76 12                	jbe    c0015e97 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e88:	66 83 f8 0a          	cmp    ax,0xa
c0015e8c:	74 09                	je     c0015e97 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e91:	66 83 f8 08          	cmp    ax,0x8
c0015e95:	75 12                	jne    c0015ea9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9a:	0f b6 c0             	movzx  eax,al
c0015e9d:	83 ec 0c             	sub    esp,0xc
c0015ea0:	50                   	push   eax
c0015ea1:	e8 7c fb ff ff       	call   c0015a22 <sendKeyToTerminal(unsigned char)>
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015eac:	83 f0 01             	xor    eax,0x1
c0015eaf:	84 c0                	test   al,al
c0015eb1:	74 4f                	je     c0015f02 <sendKeyboardToken(KeyboardToken)+0x422>
c0015eb3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015eb6:	83 f0 01             	xor    eax,0x1
c0015eb9:	84 c0                	test   al,al
c0015ebb:	74 45                	je     c0015f02 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ebd:	a0 a0 f3 02 c0       	mov    al,ds:0xc002f3a0
c0015ec2:	84 c0                	test   al,al
c0015ec4:	74 3c                	je     c0015f02 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec9:	66 83 f8 3f          	cmp    ax,0x3f
c0015ecd:	76 33                	jbe    c0015f02 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed2:	66 83 f8 7f          	cmp    ax,0x7f
c0015ed6:	77 2a                	ja     c0015f02 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edb:	88 c2                	mov    dl,al
c0015edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee0:	66 83 f8 5f          	cmp    ax,0x5f
c0015ee4:	76 04                	jbe    c0015eea <sendKeyboardToken(KeyboardToken)+0x40a>
c0015ee6:	b0 20                	mov    al,0x20
c0015ee8:	eb 02                	jmp    c0015eec <sendKeyboardToken(KeyboardToken)+0x40c>
c0015eea:	b0 00                	mov    al,0x0
c0015eec:	29 c2                	sub    edx,eax
c0015eee:	88 d0                	mov    al,dl
c0015ef0:	83 e8 40             	sub    eax,0x40
c0015ef3:	0f b6 c0             	movzx  eax,al
c0015ef6:	83 ec 0c             	sub    esp,0xc
c0015ef9:	50                   	push   eax
c0015efa:	e8 23 fb ff ff       	call   c0015a22 <sendKeyToTerminal(unsigned char)>
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f05:	66 3d 00 03          	cmp    ax,0x300
c0015f09:	75 0f                	jne    c0015f1a <sendKeyboardToken(KeyboardToken)+0x43a>
c0015f0b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015f0e:	83 f0 01             	xor    eax,0x1
c0015f11:	84 c0                	test   al,al
c0015f13:	74 05                	je     c0015f1a <sendKeyboardToken(KeyboardToken)+0x43a>
c0015f15:	e8 4c aa ff ff       	call   c0010966 <doTerminalCycle()>
c0015f1a:	90                   	nop
c0015f1b:	c9                   	leave  
c0015f1c:	c3                   	ret    

c0015f1d <clearInternalKeybuffer(VgaText*)>:
c0015f1d:	55                   	push   ebp
c0015f1e:	89 e5                	mov    ebp,esp
c0015f20:	83 ec 08             	sub    esp,0x8
c0015f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f26:	05 98 01 00 00       	add    eax,0x198
c0015f2b:	83 ec 0c             	sub    esp,0xc
c0015f2e:	50                   	push   eax
c0015f2f:	e8 38 a8 fe ff       	call   c000076c <strlen>
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f3a:	81 c2 98 01 00 00    	add    edx,0x198
c0015f40:	83 ec 04             	sub    esp,0x4
c0015f43:	50                   	push   eax
c0015f44:	6a 00                	push   0x0
c0015f46:	52                   	push   edx
c0015f47:	e8 04 a8 fe ff       	call   c0000750 <memset>
c0015f4c:	83 c4 10             	add    esp,0x10
c0015f4f:	90                   	nop
c0015f50:	c9                   	leave  
c0015f51:	c3                   	ret    

c0015f52 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015f52:	55                   	push   ebp
c0015f53:	89 e5                	mov    ebp,esp
c0015f55:	83 ec 18             	sub    esp,0x18
c0015f58:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015f5d:	85 c0                	test   eax,eax
c0015f5f:	74 2a                	je     c0015f8b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015f61:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015f67:	8b 0d 88 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f288
c0015f6d:	83 ec 04             	sub    esp,0x4
c0015f70:	68 a0 f2 02 c0       	push   0xc002f2a0
c0015f75:	83 ec 08             	sub    esp,0x8
c0015f78:	89 e2                	mov    edx,esp
c0015f7a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015f7d:	89 02                	mov    DWORD PTR [edx],eax
c0015f7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f82:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f86:	ff d1                	call   ecx
c0015f88:	83 c4 10             	add    esp,0x10
c0015f8b:	83 ec 0c             	sub    esp,0xc
c0015f8e:	68 db bc 02 c0       	push   0xc002bcdb
c0015f93:	e8 05 cb ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0015f98:	83 c4 10             	add    esp,0x10
c0015f9b:	fb                   	sti    
c0015f9c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015fa3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015fa7:	0f 84 a1 00 00 00    	je     c001604e <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb0:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015fb6:	84 c0                	test   al,al
c0015fb8:	75 28                	jne    c0015fe2 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015fba:	fa                   	cli    
c0015fbb:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015fc0:	40                   	inc    eax
c0015fc1:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0015fc6:	e8 bb 82 00 00       	call   c001e286 <schedule()>
c0015fcb:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015fd0:	48                   	dec    eax
c0015fd1:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0015fd6:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0015fdb:	85 c0                	test   eax,eax
c0015fdd:	75 ce                	jne    c0015fad <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015fdf:	fb                   	sti    
c0015fe0:	eb cb                	jmp    c0015fad <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015fe2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015fe5:	8d 50 01             	lea    edx,[eax+0x1]
c0015fe8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015feb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fee:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015ff4:	88 10                	mov    BYTE PTR [eax],dl
c0015ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff9:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015fff:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016005:	05 98 01 00 00       	add    eax,0x198
c001600a:	83 ec 0c             	sub    esp,0xc
c001600d:	50                   	push   eax
c001600e:	e8 59 a7 fe ff       	call   c000076c <strlen>
c0016013:	83 c4 10             	add    esp,0x10
c0016016:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016019:	81 c2 98 01 00 00    	add    edx,0x198
c001601f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016022:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016025:	81 c2 98 01 00 00    	add    edx,0x198
c001602b:	83 ec 04             	sub    esp,0x4
c001602e:	50                   	push   eax
c001602f:	51                   	push   ecx
c0016030:	52                   	push   edx
c0016031:	e8 52 a6 fe ff       	call   c0000688 <memmove>
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001603c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001603f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016043:	0f 85 5a ff ff ff    	jne    c0015fa3 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016049:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001604c:	eb 03                	jmp    c0016051 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c001604e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016051:	c9                   	leave  
c0016052:	c3                   	ret    
c0016053:	90                   	nop

c0016054 <Keyboard::Keyboard(char const*)>:
c0016054:	83 ec 0c             	sub    esp,0xc
c0016057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605b:	83 ec 08             	sub    esp,0x8
c001605e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016062:	50                   	push   eax
c0016063:	e8 72 e0 ff ff       	call   c00140da <Device::Device(char const*)>
c0016068:	83 c4 10             	add    esp,0x10
c001606b:	ba fc bc 02 c0       	mov    edx,0xc002bcfc
c0016070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016074:	89 10                	mov    DWORD PTR [eax],edx
c0016076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016084:	c6 05 84 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f284,0x1
c001608b:	90                   	nop
c001608c:	83 c4 0c             	add    esp,0xc
c001608f:	c3                   	ret    

c0016090 <Keyboard::~Keyboard()>:
c0016090:	83 ec 0c             	sub    esp,0xc
c0016093:	ba fc bc 02 c0       	mov    edx,0xc002bcfc
c0016098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609c:	89 10                	mov    DWORD PTR [eax],edx
c001609e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a2:	83 ec 0c             	sub    esp,0xc
c00160a5:	50                   	push   eax
c00160a6:	e8 f9 dc ff ff       	call   c0013da4 <Device::~Device()>
c00160ab:	83 c4 10             	add    esp,0x10
c00160ae:	90                   	nop
c00160af:	83 c4 0c             	add    esp,0xc
c00160b2:	c3                   	ret    
c00160b3:	90                   	nop

c00160b4 <Keyboard::~Keyboard()>:
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	83 ec 0c             	sub    esp,0xc
c00160ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160be:	e8 cd ff ff ff       	call   c0016090 <Keyboard::~Keyboard()>
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	83 ec 08             	sub    esp,0x8
c00160c9:	68 5c 01 00 00       	push   0x15c
c00160ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160d2:	e8 e6 c8 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00160d7:	83 c4 10             	add    esp,0x10
c00160da:	83 c4 0c             	add    esp,0xc
c00160dd:	c3                   	ret    

c00160de <LogicalDisk::close(int, int, void*)>:
c00160de:	83 c8 ff             	or     eax,0xffffffff
c00160e1:	c3                   	ret    

c00160e2 <LogicalDisk::~LogicalDisk()>:
c00160e2:	83 ec 0c             	sub    esp,0xc
c00160e5:	ba ac bd 02 c0       	mov    edx,0xc002bdac
c00160ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ee:	89 10                	mov    DWORD PTR [eax],edx
c00160f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	50                   	push   eax
c00160f8:	e8 a7 dc ff ff       	call   c0013da4 <Device::~Device()>
c00160fd:	83 c4 10             	add    esp,0x10
c0016100:	90                   	nop
c0016101:	83 c4 0c             	add    esp,0xc
c0016104:	c3                   	ret    
c0016105:	90                   	nop

c0016106 <LogicalDisk::~LogicalDisk()>:
c0016106:	83 ec 0c             	sub    esp,0xc
c0016109:	83 ec 0c             	sub    esp,0xc
c001610c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016110:	e8 cd ff ff ff       	call   c00160e2 <LogicalDisk::~LogicalDisk()>
c0016115:	83 c4 10             	add    esp,0x10
c0016118:	83 ec 08             	sub    esp,0x8
c001611b:	68 74 01 00 00       	push   0x174
c0016120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016124:	e8 94 c8 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0016129:	83 c4 10             	add    esp,0x10
c001612c:	83 c4 0c             	add    esp,0xc
c001612f:	c3                   	ret    

c0016130 <LogicalDisk::open(int, int, void*)>:
c0016130:	83 ec 18             	sub    esp,0x18
c0016133:	68 28 bd 02 c0       	push   0xc002bd28
c0016138:	e8 96 43 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001613d:	83 c8 ff             	or     eax,0xffffffff
c0016140:	83 c4 1c             	add    esp,0x1c
c0016143:	c3                   	ret    

c0016144 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016144:	53                   	push   ebx
c0016145:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016149:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001614d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016151:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016157:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001615d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016163:	77 10                	ja     c0016175 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016165:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001616b:	89 d3                	mov    ebx,edx
c001616d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016173:	72 05                	jb     c001617a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016175:	83 c8 ff             	or     eax,0xffffffff
c0016178:	89 c2                	mov    edx,eax
c001617a:	5b                   	pop    ebx
c001617b:	c3                   	ret    

c001617c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001617c:	56                   	push   esi
c001617d:	83 c8 ff             	or     eax,0xffffffff
c0016180:	53                   	push   ebx
c0016181:	89 c2                	mov    edx,eax
c0016183:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016187:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001618b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001618f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016195:	77 27                	ja     c00161be <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016197:	89 d8                	mov    eax,ebx
c0016199:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001619f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00161a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161aa:	89 c2                	mov    edx,eax
c00161ac:	73 10                	jae    c00161be <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00161ae:	89 c8                	mov    eax,ecx
c00161b0:	89 da                	mov    edx,ebx
c00161b2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00161b8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00161be:	5b                   	pop    ebx
c00161bf:	5e                   	pop    esi
c00161c0:	c3                   	ret    
c00161c1:	90                   	nop

c00161c2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00161c2:	83 ec 1c             	sub    esp,0x1c
c00161c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00161c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00161cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00161d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00161dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00161e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e8:	83 ec 08             	sub    esp,0x8
c00161eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161ef:	50                   	push   eax
c00161f0:	e8 e5 de ff ff       	call   c00140da <Device::Device(char const*)>
c00161f5:	83 c4 10             	add    esp,0x10
c00161f8:	ba ac bd 02 c0       	mov    edx,0xc002bdac
c00161fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016201:	89 10                	mov    DWORD PTR [eax],edx
c0016203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016207:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001620e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016212:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001621d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016227:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001622b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001622f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016233:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016239:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001623f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016243:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016246:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001624a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016250:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001625a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001625e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016268:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016272:	90                   	nop
c0016273:	83 c4 1c             	add    esp,0x1c
c0016276:	c3                   	ret    
c0016277:	90                   	nop

c0016278 <LogicalDisk::assignDriveLetter()>:
c0016278:	55                   	push   ebp
c0016279:	57                   	push   edi
c001627a:	56                   	push   esi
c001627b:	53                   	push   ebx
c001627c:	83 ec 14             	sub    esp,0x14
c001627f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016283:	8b 3d c0 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f6c0
c0016289:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001628f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016293:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016299:	8b 3d c4 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f6c4
c001629f:	3c 01                	cmp    al,0x1
c00162a1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00162a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00162a9:	19 c0                	sbb    eax,eax
c00162ab:	83 e0 02             	and    eax,0x2
c00162ae:	83 c0 41             	add    eax,0x41
c00162b1:	0f be e8             	movsx  ebp,al
c00162b4:	3c 43                	cmp    al,0x43
c00162b6:	75 10                	jne    c00162c8 <LogicalDisk::assignDriveLetter()+0x50>
c00162b8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00162bf:	75 5d                	jne    c001631e <LogicalDisk::assignDriveLetter()+0xa6>
c00162c1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00162c6:	75 56                	jne    c001631e <LogicalDisk::assignDriveLetter()+0xa6>
c00162c8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00162cb:	ba 01 00 00 00       	mov    edx,0x1
c00162d0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00162d4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00162d8:	d3 e2                	shl    edx,cl
c00162da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162de:	89 d7                	mov    edi,edx
c00162e0:	89 d6                	mov    esi,edx
c00162e2:	c1 ff 1f             	sar    edi,0x1f
c00162e5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00162e9:	21 f9                	and    ecx,edi
c00162eb:	09 d1                	or     ecx,edx
c00162ed:	75 2f                	jne    c001631e <LogicalDisk::assignDriveLetter()+0xa6>
c00162ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00162f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00162f7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00162fd:	09 f2                	or     edx,esi
c00162ff:	89 15 c0 f6 02 c0    	mov    DWORD PTR ds:0xc002f6c0,edx
c0016305:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016309:	09 fa                	or     edx,edi
c001630b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001630f:	89 15 c4 f6 02 c0    	mov    DWORD PTR ds:0xc002f6c4,edx
c0016315:	89 1c bd e0 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0920],ebx
c001631c:	eb 08                	jmp    c0016326 <LogicalDisk::assignDriveLetter()+0xae>
c001631e:	45                   	inc    ebp
c001631f:	40                   	inc    eax
c0016320:	3c 5b                	cmp    al,0x5b
c0016322:	75 90                	jne    c00162b4 <LogicalDisk::assignDriveLetter()+0x3c>
c0016324:	31 c0                	xor    eax,eax
c0016326:	83 c4 14             	add    esp,0x14
c0016329:	5b                   	pop    ebx
c001632a:	5e                   	pop    esi
c001632b:	5f                   	pop    edi
c001632c:	5d                   	pop    ebp
c001632d:	c3                   	ret    

c001632e <LogicalDisk::mount()>:
c001632e:	56                   	push   esi
c001632f:	53                   	push   ebx
c0016330:	50                   	push   eax
c0016331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016335:	8b 1d 54 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f254
c001633b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016345:	85 db                	test   ebx,ebx
c0016347:	74 50                	je     c0016399 <LogicalDisk::mount()+0x6b>
c0016349:	50                   	push   eax
c001634a:	50                   	push   eax
c001634b:	ff 35 08 26 03 c0    	push   DWORD PTR ds:0xc0032608
c0016351:	68 4c bd 02 c0       	push   0xc002bd4c
c0016356:	e8 42 c7 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001635b:	83 c4 0c             	add    esp,0xc
c001635e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016365:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016367:	83 e8 41             	sub    eax,0x41
c001636a:	50                   	push   eax
c001636b:	56                   	push   esi
c001636c:	53                   	push   ebx
c001636d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	84 c0                	test   al,al
c0016375:	74 08                	je     c001637f <LogicalDisk::mount()+0x51>
c0016377:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001637d:	eb 1c                	jmp    c001639b <LogicalDisk::mount()+0x6d>
c001637f:	51                   	push   ecx
c0016380:	51                   	push   ecx
c0016381:	ff 35 08 26 03 c0    	push   DWORD PTR ds:0xc0032608
c0016387:	68 67 bd 02 c0       	push   0xc002bd67
c001638c:	e8 0c c7 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0016391:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016394:	83 c4 10             	add    esp,0x10
c0016397:	eb ac                	jmp    c0016345 <LogicalDisk::mount()+0x17>
c0016399:	31 c0                	xor    eax,eax
c001639b:	5a                   	pop    edx
c001639c:	5b                   	pop    ebx
c001639d:	5e                   	pop    esi
c001639e:	c3                   	ret    
c001639f:	90                   	nop

c00163a0 <LogicalDisk::unmount()>:
c00163a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163a4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00163ae:	c3                   	ret    
c00163af:	90                   	nop

c00163b0 <LogicalDisk::eject()>:
c00163b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00163ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00163bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163c0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00163c3:	90                   	nop

c00163c4 <LogicalDisk::unassignDriveLetter()>:
c00163c4:	57                   	push   edi
c00163c5:	56                   	push   esi
c00163c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ca:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00163d1:	84 c9                	test   cl,cl
c00163d3:	75 0f                	jne    c00163e4 <LogicalDisk::unassignDriveLetter()+0x20>
c00163d5:	c7 44 24 0c 82 bd 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bd82
c00163dd:	5e                   	pop    esi
c00163de:	5f                   	pop    edi
c00163df:	e9 ef 40 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>
c00163e4:	83 e9 41             	sub    ecx,0x41
c00163e7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00163ee:	b8 01 00 00 00       	mov    eax,0x1
c00163f3:	c7 04 8d e0 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0920],0x0
c00163fe:	d3 e0                	shl    eax,cl
c0016400:	89 c7                	mov    edi,eax
c0016402:	f7 d0                	not    eax
c0016404:	c1 ff 1f             	sar    edi,0x1f
c0016407:	21 05 c0 f6 02 c0    	and    DWORD PTR ds:0xc002f6c0,eax
c001640d:	89 fe                	mov    esi,edi
c001640f:	f7 d6                	not    esi
c0016411:	21 35 c4 f6 02 c0    	and    DWORD PTR ds:0xc002f6c4,esi
c0016417:	5e                   	pop    esi
c0016418:	5f                   	pop    edi
c0016419:	c3                   	ret    

c001641a <LogicalDisk::read(unsigned long long, int, void*)>:
c001641a:	57                   	push   edi
c001641b:	56                   	push   esi
c001641c:	53                   	push   ebx
c001641d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016421:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016425:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001642d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016433:	77 41                	ja     c0016476 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016435:	99                   	cdq    
c0016436:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001643c:	01 c8                	add    eax,ecx
c001643e:	11 da                	adc    edx,ebx
c0016440:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016446:	19 d7                	sbb    edi,edx
c0016448:	72 33                	jb     c001647d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001644a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016450:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016456:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001645a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001645e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016464:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001646a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001646e:	5b                   	pop    ebx
c001646f:	5e                   	pop    esi
c0016470:	5f                   	pop    edi
c0016471:	e9 ec 0a 00 00       	jmp    c0016f62 <VCache::read(unsigned long long, int, void*)>
c0016476:	b8 05 00 00 00       	mov    eax,0x5
c001647b:	eb 05                	jmp    c0016482 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001647d:	b8 07 00 00 00       	mov    eax,0x7
c0016482:	5b                   	pop    ebx
c0016483:	5e                   	pop    esi
c0016484:	5f                   	pop    edi
c0016485:	c3                   	ret    

c0016486 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016486:	57                   	push   edi
c0016487:	56                   	push   esi
c0016488:	53                   	push   ebx
c0016489:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001648d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016491:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016495:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016499:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001649f:	77 41                	ja     c00164e2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00164a1:	99                   	cdq    
c00164a2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00164a8:	01 c8                	add    eax,ecx
c00164aa:	11 da                	adc    edx,ebx
c00164ac:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00164b2:	19 d7                	sbb    edi,edx
c00164b4:	72 33                	jb     c00164e9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00164b6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00164bc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00164c2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00164c6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00164ca:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00164d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164da:	5b                   	pop    ebx
c00164db:	5e                   	pop    esi
c00164dc:	5f                   	pop    edi
c00164dd:	e9 96 09 00 00       	jmp    c0016e78 <VCache::write(unsigned long long, int, void*)>
c00164e2:	b8 05 00 00 00       	mov    eax,0x5
c00164e7:	eb 05                	jmp    c00164ee <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00164e9:	b8 07 00 00 00       	mov    eax,0x7
c00164ee:	5b                   	pop    ebx
c00164ef:	5e                   	pop    esi
c00164f0:	5f                   	pop    edi
c00164f1:	c3                   	ret    

c00164f2 <Mouse::Mouse(char const*)>:
c00164f2:	83 ec 0c             	sub    esp,0xc
c00164f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f9:	83 ec 08             	sub    esp,0x8
c00164fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016500:	50                   	push   eax
c0016501:	e8 d4 db ff ff       	call   c00140da <Device::Device(char const*)>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	ba d8 bd 02 c0       	mov    edx,0xc002bdd8
c001650e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016512:	89 10                	mov    DWORD PTR [eax],edx
c0016514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016518:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016522:	90                   	nop
c0016523:	83 c4 0c             	add    esp,0xc
c0016526:	c3                   	ret    
c0016527:	90                   	nop

c0016528 <Mouse::~Mouse()>:
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	ba d8 bd 02 c0       	mov    edx,0xc002bdd8
c0016530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016534:	89 10                	mov    DWORD PTR [eax],edx
c0016536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001653a:	83 ec 0c             	sub    esp,0xc
c001653d:	50                   	push   eax
c001653e:	e8 61 d8 ff ff       	call   c0013da4 <Device::~Device()>
c0016543:	83 c4 10             	add    esp,0x10
c0016546:	90                   	nop
c0016547:	83 c4 0c             	add    esp,0xc
c001654a:	c3                   	ret    
c001654b:	90                   	nop

c001654c <Mouse::~Mouse()>:
c001654c:	83 ec 0c             	sub    esp,0xc
c001654f:	83 ec 0c             	sub    esp,0xc
c0016552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016556:	e8 cd ff ff ff       	call   c0016528 <Mouse::~Mouse()>
c001655b:	83 c4 10             	add    esp,0x10
c001655e:	83 ec 08             	sub    esp,0x8
c0016561:	68 58 01 00 00       	push   0x158
c0016566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001656a:	e8 4e c4 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c001656f:	83 c4 10             	add    esp,0x10
c0016572:	83 c4 0c             	add    esp,0xc
c0016575:	c3                   	ret    

c0016576 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016576:	55                   	push   ebp
c0016577:	57                   	push   edi
c0016578:	56                   	push   esi
c0016579:	53                   	push   ebx
c001657a:	81 ec 20 01 00 00    	sub    esp,0x120
c0016580:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016587:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001658e:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016595:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001659c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00165a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00165a8:	56                   	push   esi
c00165a9:	68 fc bd 02 c0       	push   0xc002bdfc
c00165ae:	e8 ea c4 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00165b3:	58                   	pop    eax
c00165b4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00165bb:	e8 16 dc ff ff       	call   c00141d6 <Device::getName()>
c00165c0:	5a                   	pop    edx
c00165c1:	59                   	pop    ecx
c00165c2:	50                   	push   eax
c00165c3:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00165c7:	53                   	push   ebx
c00165c8:	e8 3f a2 fe ff       	call   c000080c <strcpy>
c00165cd:	5d                   	pop    ebp
c00165ce:	58                   	pop    eax
c00165cf:	68 2d be 02 c0       	push   0xc002be2d
c00165d4:	53                   	push   ebx
c00165d5:	e8 72 a3 fe ff       	call   c000094c <strcat>
c00165da:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00165e1:	e8 a6 92 ff ff       	call   c000f88c <malloc>
c00165e6:	83 c4 0c             	add    esp,0xc
c00165e9:	89 c5                	mov    ebp,eax
c00165eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165f3:	57                   	push   edi
c00165f4:	56                   	push   esi
c00165f5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00165fc:	53                   	push   ebx
c00165fd:	50                   	push   eax
c00165fe:	e8 bf fb ff ff       	call   c00161c2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016603:	83 c4 14             	add    esp,0x14
c0016606:	55                   	push   ebp
c0016607:	e8 6c fc ff ff       	call   c0016278 <LogicalDisk::assignDriveLetter()>
c001660c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001660f:	0f be d8             	movsx  ebx,al
c0016612:	e8 17 fd ff ff       	call   c001632e <LogicalDisk::mount()>
c0016617:	58                   	pop    eax
c0016618:	5a                   	pop    edx
c0016619:	55                   	push   ebp
c001661a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016621:	e8 b0 d8 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c0016626:	59                   	pop    ecx
c0016627:	5e                   	pop    esi
c0016628:	53                   	push   ebx
c0016629:	68 38 be 02 c0       	push   0xc002be38
c001662e:	e8 6a c4 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0016633:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016639:	5b                   	pop    ebx
c001663a:	5e                   	pop    esi
c001663b:	5f                   	pop    edi
c001663c:	5d                   	pop    ebp
c001663d:	c3                   	ret    

c001663e <createPartitionsForDisk(PhysicalDisk*)>:
c001663e:	55                   	push   ebp
c001663f:	57                   	push   edi
c0016640:	56                   	push   esi
c0016641:	53                   	push   ebx
c0016642:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016648:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001664f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016655:	3d 00 02 00 00       	cmp    eax,0x200
c001665a:	74 27                	je     c0016683 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001665c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016662:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016668:	83 ec 10             	sub    esp,0x10
c001666b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001666f:	99                   	cdq    
c0016670:	c1 e6 0a             	shl    esi,0xa
c0016673:	52                   	push   edx
c0016674:	89 fd                	mov    ebp,edi
c0016676:	50                   	push   eax
c0016677:	55                   	push   ebp
c0016678:	56                   	push   esi
c0016679:	e8 b6 0d 01 00       	call   c0027434 <__udivdi3>
c001667e:	e9 b1 00 00 00       	jmp    c0016734 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016683:	83 ec 0c             	sub    esp,0xc
c0016686:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016688:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001668c:	56                   	push   esi
c001668d:	6a 01                	push   0x1
c001668f:	6a 00                	push   0x0
c0016691:	6a 00                	push   0x0
c0016693:	53                   	push   ebx
c0016694:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016697:	83 c4 20             	add    esp,0x20
c001669a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00166a2:	75 0a                	jne    c00166ae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00166a4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00166ac:	74 2c                	je     c00166da <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00166ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166c0:	83 ec 10             	sub    esp,0x10
c00166c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166c7:	89 f7                	mov    edi,esi
c00166c9:	c1 e0 0a             	shl    eax,0xa
c00166cc:	c1 ff 1f             	sar    edi,0x1f
c00166cf:	57                   	push   edi
c00166d0:	56                   	push   esi
c00166d1:	52                   	push   edx
c00166d2:	50                   	push   eax
c00166d3:	e8 5c 0d 01 00       	call   c0027434 <__udivdi3>
c00166d8:	eb 5a                	jmp    c0016734 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00166da:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00166e1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00166e8:	83 e1 7f             	and    ecx,0x7f
c00166eb:	83 e0 7f             	and    eax,0x7f
c00166ee:	01 c1                	add    ecx,eax
c00166f0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00166f7:	83 e0 7f             	and    eax,0x7f
c00166fa:	01 c1                	add    ecx,eax
c00166fc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016703:	83 e0 7f             	and    eax,0x7f
c0016706:	00 c1                	add    cl,al
c0016708:	74 41                	je     c001674b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001670a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016710:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016716:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001671c:	83 ec 10             	sub    esp,0x10
c001671f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016723:	89 f7                	mov    edi,esi
c0016725:	c1 e0 0a             	shl    eax,0xa
c0016728:	c1 ff 1f             	sar    edi,0x1f
c001672b:	57                   	push   edi
c001672c:	56                   	push   esi
c001672d:	52                   	push   edx
c001672e:	50                   	push   eax
c001672f:	e8 00 0d 01 00       	call   c0027434 <__udivdi3>
c0016734:	83 c4 14             	add    esp,0x14
c0016737:	52                   	push   edx
c0016738:	50                   	push   eax
c0016739:	6a 00                	push   0x0
c001673b:	6a 00                	push   0x0
c001673d:	53                   	push   ebx
c001673e:	e8 33 fe ff ff       	call   c0016576 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016743:	83 c4 20             	add    esp,0x20
c0016746:	e9 79 01 00 00       	jmp    c00168c4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001674b:	89 f0                	mov    eax,esi
c001674d:	31 f6                	xor    esi,esi
c001674f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016756:	75 02                	jne    c001675a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016758:	89 f1                	mov    ecx,esi
c001675a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016761:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016768:	c1 e2 08             	shl    edx,0x8
c001676b:	c1 e7 10             	shl    edi,0x10
c001676e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016776:	09 fa                	or     edx,edi
c0016778:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016780:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016787:	83 c0 10             	add    eax,0x10
c001678a:	09 fa                	or     edx,edi
c001678c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016793:	c1 e7 18             	shl    edi,0x18
c0016796:	09 fa                	or     edx,edi
c0016798:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001679f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00167a3:	c1 e7 10             	shl    edi,0x10
c00167a6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00167ad:	c1 e2 08             	shl    edx,0x8
c00167b0:	09 fa                	or     edx,edi
c00167b2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00167b9:	09 fa                	or     edx,edi
c00167bb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00167c2:	c1 e7 18             	shl    edi,0x18
c00167c5:	09 fa                	or     edx,edi
c00167c7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00167cb:	46                   	inc    esi
c00167cc:	83 fe 04             	cmp    esi,0x4
c00167cf:	0f 85 7a ff ff ff    	jne    c001674f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00167d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d9:	83 f0 01             	xor    eax,0x1
c00167dc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00167e0:	75 57                	jne    c0016839 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00167e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167e6:	83 f0 01             	xor    eax,0x1
c00167e9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00167ed:	75 4a                	jne    c0016839 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00167ef:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00167f3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00167fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016803:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016809:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001680f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016815:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016819:	89 f7                	mov    edi,esi
c001681b:	c1 e0 0a             	shl    eax,0xa
c001681e:	c1 ff 1f             	sar    edi,0x1f
c0016821:	57                   	push   edi
c0016822:	56                   	push   esi
c0016823:	52                   	push   edx
c0016824:	50                   	push   eax
c0016825:	e8 0a 0c 01 00       	call   c0027434 <__udivdi3>
c001682a:	83 c4 10             	add    esp,0x10
c001682d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016831:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016835:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016839:	84 c9                	test   cl,cl
c001683b:	74 53                	je     c0016890 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001683d:	0f b6 c9             	movzx  ecx,cl
c0016840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016844:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016848:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001684c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016850:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016854:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016858:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001685c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016860:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016864:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001686c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016870:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016874:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016878:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001687c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016880:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016884:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016888:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001688c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016890:	31 ed                	xor    ebp,ebp
c0016892:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016896:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001689a:	89 f8                	mov    eax,edi
c001689c:	09 f0                	or     eax,esi
c001689e:	74 1e                	je     c00168be <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00168a0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00168a4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00168a8:	89 d1                	mov    ecx,edx
c00168aa:	09 c1                	or     ecx,eax
c00168ac:	74 10                	je     c00168be <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00168ae:	83 ec 0c             	sub    esp,0xc
c00168b1:	57                   	push   edi
c00168b2:	56                   	push   esi
c00168b3:	52                   	push   edx
c00168b4:	50                   	push   eax
c00168b5:	53                   	push   ebx
c00168b6:	e8 bb fc ff ff       	call   c0016576 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00168bb:	83 c4 20             	add    esp,0x20
c00168be:	45                   	inc    ebp
c00168bf:	83 fd 04             	cmp    ebp,0x4
c00168c2:	75 ce                	jne    c0016892 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00168c4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00168ca:	5b                   	pop    ebx
c00168cb:	5e                   	pop    esi
c00168cc:	5f                   	pop    edi
c00168cd:	5d                   	pop    ebp
c00168ce:	c3                   	ret    
c00168cf:	90                   	nop

c00168d0 <Serial::Serial(char const*)>:
c00168d0:	83 ec 0c             	sub    esp,0xc
c00168d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d7:	83 ec 08             	sub    esp,0x8
c00168da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168de:	50                   	push   eax
c00168df:	e8 f6 d7 ff ff       	call   c00140da <Device::Device(char const*)>
c00168e4:	83 c4 10             	add    esp,0x10
c00168e7:	ba 64 be 02 c0       	mov    edx,0xc002be64
c00168ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f0:	89 10                	mov    DWORD PTR [eax],edx
c00168f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016900:	90                   	nop
c0016901:	83 c4 0c             	add    esp,0xc
c0016904:	c3                   	ret    
c0016905:	90                   	nop

c0016906 <Serial::~Serial()>:
c0016906:	83 ec 0c             	sub    esp,0xc
c0016909:	ba 64 be 02 c0       	mov    edx,0xc002be64
c001690e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016912:	89 10                	mov    DWORD PTR [eax],edx
c0016914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	50                   	push   eax
c001691c:	e8 83 d4 ff ff       	call   c0013da4 <Device::~Device()>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	90                   	nop
c0016925:	83 c4 0c             	add    esp,0xc
c0016928:	c3                   	ret    
c0016929:	90                   	nop

c001692a <Serial::~Serial()>:
c001692a:	83 ec 0c             	sub    esp,0xc
c001692d:	83 ec 0c             	sub    esp,0xc
c0016930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016934:	e8 cd ff ff ff       	call   c0016906 <Serial::~Serial()>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	83 ec 08             	sub    esp,0x8
c001693f:	68 58 01 00 00       	push   0x158
c0016944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016948:	e8 70 c0 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	83 c4 0c             	add    esp,0xc
c0016953:	c3                   	ret    

c0016954 <Timer::Timer(char const*)>:
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695b:	83 ec 08             	sub    esp,0x8
c001695e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016962:	50                   	push   eax
c0016963:	e8 72 d7 ff ff       	call   c00140da <Device::Device(char const*)>
c0016968:	83 c4 10             	add    esp,0x10
c001696b:	ba a8 be 02 c0       	mov    edx,0xc002bea8
c0016970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016974:	89 10                	mov    DWORD PTR [eax],edx
c0016976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001697a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016984:	90                   	nop
c0016985:	83 c4 0c             	add    esp,0xc
c0016988:	c3                   	ret    
c0016989:	90                   	nop

c001698a <Timer::~Timer()>:
c001698a:	83 ec 0c             	sub    esp,0xc
c001698d:	ba a8 be 02 c0       	mov    edx,0xc002bea8
c0016992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016996:	89 10                	mov    DWORD PTR [eax],edx
c0016998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	50                   	push   eax
c00169a0:	e8 ff d3 ff ff       	call   c0013da4 <Device::~Device()>
c00169a5:	83 c4 10             	add    esp,0x10
c00169a8:	90                   	nop
c00169a9:	83 c4 0c             	add    esp,0xc
c00169ac:	c3                   	ret    
c00169ad:	90                   	nop

c00169ae <Timer::~Timer()>:
c00169ae:	83 ec 0c             	sub    esp,0xc
c00169b1:	83 ec 0c             	sub    esp,0xc
c00169b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b8:	e8 cd ff ff ff       	call   c001698a <Timer::~Timer()>
c00169bd:	83 c4 10             	add    esp,0x10
c00169c0:	83 ec 08             	sub    esp,0x8
c00169c3:	68 5c 01 00 00       	push   0x15c
c00169c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169cc:	e8 ec bf ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	83 c4 0c             	add    esp,0xc
c00169d7:	c3                   	ret    

c00169d8 <Timer::read()>:
c00169d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00169e2:	c3                   	ret    

c00169e3 <timerHandler(unsigned long long)>:
c00169e3:	55                   	push   ebp
c00169e4:	57                   	push   edi
c00169e5:	56                   	push   esi
c00169e6:	53                   	push   ebx
c00169e7:	83 ec 0c             	sub    esp,0xc
c00169ea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00169ee:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00169f2:	01 35 50 f7 02 c0    	add    DWORD PTR ds:0xc002f750,esi
c00169f8:	11 3d 54 f7 02 c0    	adc    DWORD PTR ds:0xc002f754,edi
c00169fe:	80 3d ed f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0ed,0x0
c0016a05:	0f 84 42 01 00 00    	je     c0016b4d <timerHandler(unsigned long long)+0x16a>
c0016a0b:	fa                   	cli    
c0016a0c:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c0016a12:	83 ec 0c             	sub    esp,0xc
c0016a15:	ff 05 04 26 03 c0    	inc    DWORD PTR ds:0xc0032604
c0016a1b:	68 18 26 03 c0       	push   0xc0032618
c0016a20:	e8 95 2a 01 00       	call   c00294ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	84 c0                	test   al,al
c0016a2a:	0f 85 a2 00 00 00    	jne    c0016ad2 <timerHandler(unsigned long long)+0xef>
c0016a30:	83 ec 0c             	sub    esp,0xc
c0016a33:	68 18 26 03 c0       	push   0xc0032618
c0016a38:	e8 99 2a 01 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a3d:	83 c4 10             	add    esp,0x10
c0016a40:	89 c3                	mov    ebx,eax
c0016a42:	83 ec 0c             	sub    esp,0xc
c0016a45:	68 18 26 03 c0       	push   0xc0032618
c0016a4a:	e8 87 2a 01 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a4f:	c7 04 24 18 26 03 c0 	mov    DWORD PTR [esp],0xc0032618
c0016a56:	89 c5                	mov    ebp,eax
c0016a58:	e8 81 2a 01 00       	call   c00294de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a5d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016a60:	83 c4 10             	add    esp,0x10
c0016a63:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016a66:	39 15 50 f7 02 c0    	cmp    DWORD PTR ds:0xc002f750,edx
c0016a6c:	a1 54 f7 02 c0       	mov    eax,ds:0xc002f754
c0016a71:	19 c8                	sbb    eax,ecx
c0016a73:	72 21                	jb     c0016a96 <timerHandler(unsigned long long)+0xb3>
c0016a75:	83 ec 0c             	sub    esp,0xc
c0016a78:	55                   	push   ebp
c0016a79:	e8 cc 7c 00 00       	call   c001e74a <unblockTask(ThreadControlBlock*)>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	39 eb                	cmp    ebx,ebp
c0016a83:	75 21                	jne    c0016aa6 <timerHandler(unsigned long long)+0xc3>
c0016a85:	83 ec 0c             	sub    esp,0xc
c0016a88:	68 18 26 03 c0       	push   0xc0032618
c0016a8d:	e8 44 2a 01 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a92:	89 c3                	mov    ebx,eax
c0016a94:	eb 0d                	jmp    c0016aa3 <timerHandler(unsigned long long)+0xc0>
c0016a96:	50                   	push   eax
c0016a97:	50                   	push   eax
c0016a98:	55                   	push   ebp
c0016a99:	68 18 26 03 c0       	push   0xc0032618
c0016a9e:	e8 e9 2a 01 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	83 ec 0c             	sub    esp,0xc
c0016aa9:	68 18 26 03 c0       	push   0xc0032618
c0016aae:	e8 07 2a 01 00       	call   c00294ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	84 c0                	test   al,al
c0016ab8:	75 18                	jne    c0016ad2 <timerHandler(unsigned long long)+0xef>
c0016aba:	83 ec 0c             	sub    esp,0xc
c0016abd:	68 18 26 03 c0       	push   0xc0032618
c0016ac2:	e8 0f 2a 01 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	39 d8                	cmp    eax,ebx
c0016acc:	0f 85 70 ff ff ff    	jne    c0016a42 <timerHandler(unsigned long long)+0x5f>
c0016ad2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ad7:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016adb:	74 3d                	je     c0016b1a <timerHandler(unsigned long long)+0x137>
c0016add:	80 3d ec f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0ec,0x0
c0016ae4:	74 34                	je     c0016b1a <timerHandler(unsigned long long)+0x137>
c0016ae6:	fa                   	cli    
c0016ae7:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c0016aed:	31 d2                	xor    edx,edx
c0016aef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af4:	89 f9                	mov    ecx,edi
c0016af6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016af9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016afe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016b01:	39 c6                	cmp    esi,eax
c0016b03:	19 d1                	sbb    ecx,edx
c0016b05:	72 05                	jb     c0016b0c <timerHandler(unsigned long long)+0x129>
c0016b07:	e8 7a 77 00 00       	call   c001e286 <schedule()>
c0016b0c:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0016b11:	48                   	dec    eax
c0016b12:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0016b17:	75 01                	jne    c0016b1a <timerHandler(unsigned long long)+0x137>
c0016b19:	fb                   	sti    
c0016b1a:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c0016b1f:	48                   	dec    eax
c0016b20:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c0016b25:	75 18                	jne    c0016b3f <timerHandler(unsigned long long)+0x15c>
c0016b27:	83 3d 00 26 03 c0 00 	cmp    DWORD PTR ds:0xc0032600,0x0
c0016b2e:	74 0f                	je     c0016b3f <timerHandler(unsigned long long)+0x15c>
c0016b30:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c0016b3a:	e8 47 77 00 00       	call   c001e286 <schedule()>
c0016b3f:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0016b44:	48                   	dec    eax
c0016b45:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c0016b4a:	75 01                	jne    c0016b4d <timerHandler(unsigned long long)+0x16a>
c0016b4c:	fb                   	sti    
c0016b4d:	83 c4 0c             	add    esp,0xc
c0016b50:	5b                   	pop    ebx
c0016b51:	5e                   	pop    esi
c0016b52:	5f                   	pop    edi
c0016b53:	5d                   	pop    ebp
c0016b54:	c3                   	ret    

c0016b55 <setupTimer(int)>:
c0016b55:	57                   	push   edi
c0016b56:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0016b5b:	56                   	push   esi
c0016b5c:	53                   	push   ebx
c0016b5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b67:	83 ec 0c             	sub    esp,0xc
c0016b6a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016b70:	e8 61 d6 ff ff       	call   c00141d6 <Device::getName()>
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016b7b:	0f 85 8d 00 00 00    	jne    c0016c0e <setupTimer(int)+0xb9>
c0016b81:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0016b86:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016b8d:	74 7f                	je     c0016c0e <setupTimer(int)+0xb9>
c0016b8f:	83 ec 0c             	sub    esp,0xc
c0016b92:	68 5c 01 00 00       	push   0x15c
c0016b97:	e8 f0 8c ff ff       	call   c000f88c <malloc>
c0016b9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b9f:	89 c3                	mov    ebx,eax
c0016ba1:	e8 66 04 01 00       	call   c002700c <PIT::PIT()>
c0016ba6:	59                   	pop    ecx
c0016ba7:	5f                   	pop    edi
c0016ba8:	53                   	push   ebx
c0016ba9:	ff 35 e8 f0 02 c0    	push   DWORD PTR ds:0xc002f0e8
c0016baf:	e8 22 d3 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c0016bb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bb6:	6a 00                	push   0x0
c0016bb8:	6a 00                	push   0x0
c0016bba:	56                   	push   esi
c0016bbb:	53                   	push   ebx
c0016bbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bbf:	83 c4 14             	add    esp,0x14
c0016bc2:	68 60 01 00 00       	push   0x160
c0016bc7:	e8 c0 8c ff ff       	call   c000f88c <malloc>
c0016bcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bcf:	89 c7                	mov    edi,eax
c0016bd1:	e8 e6 02 01 00       	call   c0026ebc <APICTimer::APICTimer()>
c0016bd6:	6a 00                	push   0x0
c0016bd8:	6a 00                	push   0x0
c0016bda:	56                   	push   esi
c0016bdb:	57                   	push   edi
c0016bdc:	e8 dd 01 01 00       	call   c0026dbe <APICTimer::open(int, int, void*)>
c0016be1:	83 c4 20             	add    esp,0x20
c0016be4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016be6:	6a 00                	push   0x0
c0016be8:	6a 00                	push   0x0
c0016bea:	6a 00                	push   0x0
c0016bec:	53                   	push   ebx
c0016bed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bf0:	58                   	pop    eax
c0016bf1:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0016bf6:	5a                   	pop    edx
c0016bf7:	57                   	push   edi
c0016bf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bfe:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016c04:	e8 cd d2 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	eb 33                	jmp    c0016c41 <setupTimer(int)+0xec>
c0016c0e:	83 ec 0c             	sub    esp,0xc
c0016c11:	68 5c 01 00 00       	push   0x15c
c0016c16:	e8 71 8c ff ff       	call   c000f88c <malloc>
c0016c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c1e:	89 c3                	mov    ebx,eax
c0016c20:	e8 e7 03 01 00       	call   c002700c <PIT::PIT()>
c0016c25:	58                   	pop    eax
c0016c26:	5a                   	pop    edx
c0016c27:	53                   	push   ebx
c0016c28:	ff 35 e8 f0 02 c0    	push   DWORD PTR ds:0xc002f0e8
c0016c2e:	e8 a3 d2 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c0016c33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c35:	6a 00                	push   0x0
c0016c37:	6a 00                	push   0x0
c0016c39:	56                   	push   esi
c0016c3a:	53                   	push   ebx
c0016c3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c3e:	83 c4 20             	add    esp,0x20
c0016c41:	89 d8                	mov    eax,ebx
c0016c43:	5b                   	pop    ebx
c0016c44:	5e                   	pop    esi
c0016c45:	5f                   	pop    edi
c0016c46:	c3                   	ret    
c0016c47:	90                   	nop

c0016c48 <VCache::VCache(PhysicalDisk*)>:
c0016c48:	53                   	push   ebx
c0016c49:	83 ec 18             	sub    esp,0x18
c0016c4c:	ba d8 be 02 c0       	mov    edx,0xc002bed8
c0016c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c55:	89 10                	mov    DWORD PTR [eax],edx
c0016c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016c62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c66:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c71:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016c78:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c83:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016c8a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c95:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016caf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cc2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cca:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016cce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cd2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016cd9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016ce1:	83 ec 0c             	sub    esp,0xc
c0016ce4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ce8:	e8 9f 8b ff ff       	call   c000f88c <malloc>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	89 c3                	mov    ebx,eax
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	53                   	push   ebx
c0016cf6:	e8 35 73 00 00       	call   c001e030 <Mutex::Mutex()>
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d02:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016d0d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016d10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d14:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016d1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d1f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016d25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d29:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016d2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d30:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016d36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016d40:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016d43:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016d46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d4a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016d4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d52:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d58:	05 00 01 00 00       	add    eax,0x100
c0016d5d:	c1 e0 04             	shl    eax,0x4
c0016d60:	83 ec 0c             	sub    esp,0xc
c0016d63:	50                   	push   eax
c0016d64:	e8 23 8b ff ff       	call   c000f88c <malloc>
c0016d69:	83 c4 10             	add    esp,0x10
c0016d6c:	89 c2                	mov    edx,eax
c0016d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d72:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d79:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d84:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016d88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d92:	c1 e0 07             	shl    eax,0x7
c0016d95:	83 ec 0c             	sub    esp,0xc
c0016d98:	50                   	push   eax
c0016d99:	e8 ee 8a ff ff       	call   c000f88c <malloc>
c0016d9e:	83 c4 10             	add    esp,0x10
c0016da1:	89 c2                	mov    edx,eax
c0016da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016da7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016daa:	90                   	nop
c0016dab:	83 c4 18             	add    esp,0x18
c0016dae:	5b                   	pop    ebx
c0016daf:	c3                   	ret    

c0016db0 <VCache::invalidateReadBuffer()>:
c0016db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016db4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016dba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016dbe:	c3                   	ret    
c0016dbf:	90                   	nop

c0016dc0 <VCache::writeWriteBuffer()>:
c0016dc0:	53                   	push   ebx
c0016dc1:	83 ec 14             	sub    esp,0x14
c0016dc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016dc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dcb:	8b 10                	mov    edx,DWORD PTR [eax]
c0016dcd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016dd0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016dd3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016dd6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016dd9:	50                   	push   eax
c0016dda:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016ddd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016de4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016deb:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016def:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016df6:	83 c4 28             	add    esp,0x28
c0016df9:	5b                   	pop    ebx
c0016dfa:	c3                   	ret    
c0016dfb:	90                   	nop

c0016dfc <VCache::~VCache()>:
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	ba d8 be 02 c0       	mov    edx,0xc002bed8
c0016e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e08:	89 10                	mov    DWORD PTR [eax],edx
c0016e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e0e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016e11:	84 c0                	test   al,al
c0016e13:	74 0f                	je     c0016e24 <VCache::~VCache()+0x28>
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1c:	e8 9f ff ff ff       	call   c0016dc0 <VCache::writeWriteBuffer()>
c0016e21:	83 c4 10             	add    esp,0x10
c0016e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016e2b:	83 ec 0c             	sub    esp,0xc
c0016e2e:	50                   	push   eax
c0016e2f:	e8 68 8a ff ff       	call   c000f89c <free>
c0016e34:	83 c4 10             	add    esp,0x10
c0016e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	50                   	push   eax
c0016e42:	e8 55 8a ff ff       	call   c000f89c <free>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	90                   	nop
c0016e4b:	83 c4 0c             	add    esp,0xc
c0016e4e:	c3                   	ret    
c0016e4f:	90                   	nop

c0016e50 <VCache::~VCache()>:
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	83 ec 0c             	sub    esp,0xc
c0016e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e5a:	e8 9d ff ff ff       	call   c0016dfc <VCache::~VCache()>
c0016e5f:	83 c4 10             	add    esp,0x10
c0016e62:	83 ec 08             	sub    esp,0x8
c0016e65:	6a 44                	push   0x44
c0016e67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e6b:	e8 4d bb ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0016e70:	83 c4 10             	add    esp,0x10
c0016e73:	83 c4 0c             	add    esp,0xc
c0016e76:	c3                   	ret    
c0016e77:	90                   	nop

c0016e78 <VCache::write(unsigned long long, int, void*)>:
c0016e78:	55                   	push   ebp
c0016e79:	57                   	push   edi
c0016e7a:	56                   	push   esi
c0016e7b:	53                   	push   ebx
c0016e7c:	83 ec 18             	sub    esp,0x18
c0016e7f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016e83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e87:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016e8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e8e:	e8 2b 77 00 00       	call   c001e5be <Semaphore::acquire()>
c0016e93:	83 c4 10             	add    esp,0x10
c0016e96:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e9a:	74 0c                	je     c0016ea8 <VCache::write(unsigned long long, int, void*)+0x30>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	53                   	push   ebx
c0016ea0:	e8 0b ff ff ff       	call   c0016db0 <VCache::invalidateReadBuffer()>
c0016ea5:	83 c4 10             	add    esp,0x10
c0016ea8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016eac:	74 5c                	je     c0016f0a <VCache::write(unsigned long long, int, void*)+0x92>
c0016eae:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016eb1:	89 e8                	mov    eax,ebp
c0016eb3:	99                   	cdq    
c0016eb4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016eb7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016eba:	89 c1                	mov    ecx,eax
c0016ebc:	89 d0                	mov    eax,edx
c0016ebe:	31 f1                	xor    ecx,esi
c0016ec0:	31 f8                	xor    eax,edi
c0016ec2:	09 c1                	or     ecx,eax
c0016ec4:	75 38                	jne    c0016efe <VCache::write(unsigned long long, int, void*)+0x86>
c0016ec6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016ecb:	75 31                	jne    c0016efe <VCache::write(unsigned long long, int, void*)+0x86>
c0016ecd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ed0:	89 ef                	mov    edi,ebp
c0016ed2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ed8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016edc:	0f af f9             	imul   edi,ecx
c0016edf:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016ee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ee4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ee7:	40                   	inc    eax
c0016ee8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016eeb:	83 c0 80             	add    eax,0xffffff80
c0016eee:	75 5c                	jne    c0016f4c <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	53                   	push   ebx
c0016ef4:	e8 c7 fe ff ff       	call   c0016dc0 <VCache::writeWriteBuffer()>
c0016ef9:	83 c4 10             	add    esp,0x10
c0016efc:	eb 4e                	jmp    c0016f4c <VCache::write(unsigned long long, int, void*)+0xd4>
c0016efe:	83 ec 0c             	sub    esp,0xc
c0016f01:	53                   	push   ebx
c0016f02:	e8 b9 fe ff ff       	call   c0016dc0 <VCache::writeWriteBuffer()>
c0016f07:	83 c4 10             	add    esp,0x10
c0016f0a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f0d:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016f12:	7f 22                	jg     c0016f36 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016f14:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016f17:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016f1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016f1e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016f22:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016f25:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016f28:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f2e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f34:	eb 16                	jmp    c0016f4c <VCache::write(unsigned long long, int, void*)+0xd4>
c0016f36:	83 ec 0c             	sub    esp,0xc
c0016f39:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f43:	57                   	push   edi
c0016f44:	56                   	push   esi
c0016f45:	50                   	push   eax
c0016f46:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f49:	83 c4 20             	add    esp,0x20
c0016f4c:	83 ec 0c             	sub    esp,0xc
c0016f4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f52:	e8 a1 7d 00 00       	call   c001ecf8 <Semaphore::release()>
c0016f57:	83 c4 1c             	add    esp,0x1c
c0016f5a:	31 c0                	xor    eax,eax
c0016f5c:	5b                   	pop    ebx
c0016f5d:	5e                   	pop    esi
c0016f5e:	5f                   	pop    edi
c0016f5f:	5d                   	pop    ebp
c0016f60:	c3                   	ret    
c0016f61:	90                   	nop

c0016f62 <VCache::read(unsigned long long, int, void*)>:
c0016f62:	55                   	push   ebp
c0016f63:	57                   	push   edi
c0016f64:	56                   	push   esi
c0016f65:	53                   	push   ebx
c0016f66:	83 ec 28             	sub    esp,0x28
c0016f69:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f6d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f71:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f75:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016f79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f7c:	e8 3d 76 00 00       	call   c001e5be <Semaphore::acquire()>
c0016f81:	83 c4 10             	add    esp,0x10
c0016f84:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016f88:	74 0c                	je     c0016f96 <VCache::read(unsigned long long, int, void*)+0x34>
c0016f8a:	83 ec 0c             	sub    esp,0xc
c0016f8d:	53                   	push   ebx
c0016f8e:	e8 2d fe ff ff       	call   c0016dc0 <VCache::writeWriteBuffer()>
c0016f93:	83 c4 10             	add    esp,0x10
c0016f96:	83 fd 01             	cmp    ebp,0x1
c0016f99:	0f 85 80 00 00 00    	jne    c001701f <VCache::read(unsigned long long, int, void*)+0xbd>
c0016f9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fa6:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016fad:	75 70                	jne    c001701f <VCache::read(unsigned long long, int, void*)+0xbd>
c0016faf:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016fb2:	89 e9                	mov    ecx,ebp
c0016fb4:	f7 d9                	neg    ecx
c0016fb6:	89 c8                	mov    eax,ecx
c0016fb8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016fbc:	c1 f8 1f             	sar    eax,0x1f
c0016fbf:	21 f1                	and    ecx,esi
c0016fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc5:	89 c8                	mov    eax,ecx
c0016fc7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fcb:	21 f9                	and    ecx,edi
c0016fcd:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016fd1:	89 ca                	mov    edx,ecx
c0016fd3:	74 0a                	je     c0016fdf <VCache::read(unsigned long long, int, void*)+0x7d>
c0016fd5:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016fd8:	75 05                	jne    c0016fdf <VCache::read(unsigned long long, int, void*)+0x7d>
c0016fda:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016fdd:	74 23                	je     c0017002 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016fdf:	83 ec 0c             	sub    esp,0xc
c0016fe2:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016fe6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016fea:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016fed:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016ff0:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ff2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ff5:	55                   	push   ebp
c0016ff6:	52                   	push   edx
c0016ff7:	50                   	push   eax
c0016ff8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ffc:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016fff:	83 c4 20             	add    esp,0x20
c0017002:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017005:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017009:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001700f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017012:	48                   	dec    eax
c0017013:	21 c6                	and    esi,eax
c0017015:	0f af f1             	imul   esi,ecx
c0017018:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001701b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001701d:	eb 1d                	jmp    c001703c <VCache::read(unsigned long long, int, void*)+0xda>
c001701f:	83 ec 0c             	sub    esp,0xc
c0017022:	53                   	push   ebx
c0017023:	e8 88 fd ff ff       	call   c0016db0 <VCache::invalidateReadBuffer()>
c0017028:	5a                   	pop    edx
c0017029:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001702c:	8b 10                	mov    edx,DWORD PTR [eax]
c001702e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017032:	55                   	push   ebp
c0017033:	57                   	push   edi
c0017034:	56                   	push   esi
c0017035:	50                   	push   eax
c0017036:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017039:	83 c4 20             	add    esp,0x20
c001703c:	83 ec 0c             	sub    esp,0xc
c001703f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017042:	e8 b1 7c 00 00       	call   c001ecf8 <Semaphore::release()>
c0017047:	83 c4 2c             	add    esp,0x2c
c001704a:	31 c0                	xor    eax,eax
c001704c:	5b                   	pop    ebx
c001704d:	5e                   	pop    esi
c001704e:	5f                   	pop    edi
c001704f:	5d                   	pop    ebp
c0017050:	c3                   	ret    
c0017051:	90                   	nop

c0017052 <Video::putrect(int, int, int, int, unsigned int)>:
c0017052:	55                   	push   ebp
c0017053:	57                   	push   edi
c0017054:	56                   	push   esi
c0017055:	53                   	push   ebx
c0017056:	83 ec 1c             	sub    esp,0x1c
c0017059:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001705d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017061:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017065:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017069:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001706d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017071:	01 df                	add    edi,ebx
c0017073:	39 fb                	cmp    ebx,edi
c0017075:	7d 1f                	jge    c0017096 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017077:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001707b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001707f:	7d 12                	jge    c0017093 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017081:	8b 16                	mov    edx,DWORD PTR [esi]
c0017083:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017087:	53                   	push   ebx
c0017088:	55                   	push   ebp
c0017089:	45                   	inc    ebp
c001708a:	56                   	push   esi
c001708b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	eb e8                	jmp    c001707b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017093:	43                   	inc    ebx
c0017094:	eb dd                	jmp    c0017073 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017096:	83 c4 1c             	add    esp,0x1c
c0017099:	5b                   	pop    ebx
c001709a:	5e                   	pop    esi
c001709b:	5f                   	pop    edi
c001709c:	5d                   	pop    ebp
c001709d:	c3                   	ret    

c001709e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001709e:	55                   	push   ebp
c001709f:	57                   	push   edi
c00170a0:	31 ff                	xor    edi,edi
c00170a2:	56                   	push   esi
c00170a3:	53                   	push   ebx
c00170a4:	83 ec 1c             	sub    esp,0x1c
c00170a7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00170ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00170af:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00170b6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00170bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170bf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00170c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170c7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00170ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00170ce:	01 f9                	add    ecx,edi
c00170d0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00170d4:	7d 2f                	jge    c0017105 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00170d6:	31 f6                	xor    esi,esi
c00170d8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00170dc:	01 f2                	add    edx,esi
c00170de:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00170e2:	7d 1a                	jge    c00170fe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00170e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00170e7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00170ea:	46                   	inc    esi
c00170eb:	51                   	push   ecx
c00170ec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00170f0:	52                   	push   edx
c00170f1:	55                   	push   ebp
c00170f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170fc:	eb da                	jmp    c00170d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00170fe:	47                   	inc    edi
c00170ff:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017103:	eb c5                	jmp    c00170ca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017105:	83 c4 1c             	add    esp,0x1c
c0017108:	5b                   	pop    ebx
c0017109:	5e                   	pop    esi
c001710a:	5f                   	pop    edi
c001710b:	5d                   	pop    ebp
c001710c:	c3                   	ret    
c001710d:	90                   	nop

c001710e <Video::blit(unsigned int*, int, int, int, int)>:
c001710e:	55                   	push   ebp
c001710f:	57                   	push   edi
c0017110:	56                   	push   esi
c0017111:	53                   	push   ebx
c0017112:	83 ec 1c             	sub    esp,0x1c
c0017115:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017119:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001711d:	85 c0                	test   eax,eax
c001711f:	79 02                	jns    c0017123 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017121:	31 c0                	xor    eax,eax
c0017123:	c1 e0 02             	shl    eax,0x2
c0017126:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001712a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001712e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017132:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017136:	39 d8                	cmp    eax,ebx
c0017138:	7e 49                	jle    c0017183 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001713a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017140:	7c 41                	jl     c0017183 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017142:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017146:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001714a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001714e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017152:	39 f9                	cmp    ecx,edi
c0017154:	7e 22                	jle    c0017178 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017156:	83 c5 04             	add    ebp,0x4
c0017159:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001715f:	7c 14                	jl     c0017175 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017161:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017163:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017166:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001716a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001716e:	56                   	push   esi
c001716f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017172:	83 c4 10             	add    esp,0x10
c0017175:	47                   	inc    edi
c0017176:	eb d2                	jmp    c001714a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001717c:	43                   	inc    ebx
c001717d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017181:	eb ab                	jmp    c001712e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017183:	83 c4 1c             	add    esp,0x1c
c0017186:	5b                   	pop    ebx
c0017187:	5e                   	pop    esi
c0017188:	5f                   	pop    edi
c0017189:	5d                   	pop    ebp
c001718a:	c3                   	ret    
c001718b:	90                   	nop

c001718c <Video::clearScreen(unsigned int)>:
c001718c:	57                   	push   edi
c001718d:	56                   	push   esi
c001718e:	53                   	push   ebx
c001718f:	31 db                	xor    ebx,ebx
c0017191:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017195:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001719b:	7e 1f                	jle    c00171bc <Video::clearScreen(unsigned int)+0x30>
c001719d:	31 ff                	xor    edi,edi
c001719f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00171a5:	7e 12                	jle    c00171b9 <Video::clearScreen(unsigned int)+0x2d>
c00171a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00171a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171ad:	53                   	push   ebx
c00171ae:	57                   	push   edi
c00171af:	47                   	inc    edi
c00171b0:	56                   	push   esi
c00171b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	eb e6                	jmp    c001719f <Video::clearScreen(unsigned int)+0x13>
c00171b9:	43                   	inc    ebx
c00171ba:	eb d9                	jmp    c0017195 <Video::clearScreen(unsigned int)+0x9>
c00171bc:	5b                   	pop    ebx
c00171bd:	5e                   	pop    esi
c00171be:	5f                   	pop    edi
c00171bf:	c3                   	ret    

c00171c0 <Video::putpixel(int, int, unsigned int)>:
c00171c0:	c7 44 24 04 e0 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bee0
c00171c8:	e9 06 33 00 00       	jmp    c001a4d3 <Krnl::panic(char const*)>
c00171cd:	90                   	nop

c00171ce <Video::Video(char const*)>:
c00171ce:	83 ec 0c             	sub    esp,0xc
c00171d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d5:	83 ec 08             	sub    esp,0x8
c00171d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171dc:	50                   	push   eax
c00171dd:	e8 f8 ce ff ff       	call   c00140da <Device::Device(char const*)>
c00171e2:	83 c4 10             	add    esp,0x10
c00171e5:	ba 64 bf 02 c0       	mov    edx,0xc002bf64
c00171ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ee:	89 10                	mov    DWORD PTR [eax],edx
c00171f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00171fe:	90                   	nop
c00171ff:	83 c4 0c             	add    esp,0xc
c0017202:	c3                   	ret    
c0017203:	90                   	nop

c0017204 <Video::~Video()>:
c0017204:	83 ec 0c             	sub    esp,0xc
c0017207:	ba 64 bf 02 c0       	mov    edx,0xc002bf64
c001720c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017210:	89 10                	mov    DWORD PTR [eax],edx
c0017212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017216:	83 ec 0c             	sub    esp,0xc
c0017219:	50                   	push   eax
c001721a:	e8 85 cb ff ff       	call   c0013da4 <Device::~Device()>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	90                   	nop
c0017223:	83 c4 0c             	add    esp,0xc
c0017226:	c3                   	ret    
c0017227:	90                   	nop

c0017228 <Video::~Video()>:
c0017228:	83 ec 0c             	sub    esp,0xc
c001722b:	83 ec 0c             	sub    esp,0xc
c001722e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017232:	e8 cd ff ff ff       	call   c0017204 <Video::~Video()>
c0017237:	83 c4 10             	add    esp,0x10
c001723a:	83 ec 08             	sub    esp,0x8
c001723d:	68 64 01 00 00       	push   0x164
c0017242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017246:	e8 72 b7 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c001724b:	83 c4 10             	add    esp,0x10
c001724e:	83 c4 0c             	add    esp,0xc
c0017251:	c3                   	ret    

c0017252 <Video::isMonochrome()>:
c0017252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017256:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001725c:	c3                   	ret    
c001725d:	90                   	nop

c001725e <Video::getWidth()>:
c001725e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017262:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017268:	c3                   	ret    
c0017269:	90                   	nop

c001726a <Video::getHeight()>:
c001726a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001726e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017274:	c3                   	ret    
c0017275:	90                   	nop

c0017276 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017276:	55                   	push   ebp
c0017277:	57                   	push   edi
c0017278:	56                   	push   esi
c0017279:	53                   	push   ebx
c001727a:	83 ec 2c             	sub    esp,0x2c
c001727d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017281:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017285:	83 f8 01             	cmp    eax,0x1
c0017288:	19 c9                	sbb    ecx,ecx
c001728a:	31 db                	xor    ebx,ebx
c001728c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017290:	89 cd                	mov    ebp,ecx
c0017292:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001729a:	f7 d5                	not    ebp
c001729c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00172a2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00172a6:	01 d8                	add    eax,ebx
c00172a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172ac:	56                   	push   esi
c00172ad:	e8 b8 ff ff ff       	call   c001726a <Video::getHeight()>
c00172b2:	59                   	pop    ecx
c00172b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00172b7:	7e 70                	jle    c0017329 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00172b9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00172bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00172c1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00172c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00172cc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00172d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172d7:	89 f8                	mov    eax,edi
c00172d9:	83 c0 20             	add    eax,0x20
c00172dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172e0:	56                   	push   esi
c00172e1:	e8 78 ff ff ff       	call   c001725e <Video::getWidth()>
c00172e6:	5a                   	pop    edx
c00172e7:	39 c7                	cmp    edi,eax
c00172e9:	7d 34                	jge    c001731f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00172eb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00172f0:	74 05                	je     c00172f7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00172f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00172f4:	55                   	push   ebp
c00172f5:	eb 0d                	jmp    c0017304 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00172f7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00172fc:	74 12                	je     c0017310 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00172fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0017300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017308:	57                   	push   edi
c0017309:	56                   	push   esi
c001730a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001730d:	83 c4 10             	add    esp,0x10
c0017310:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017314:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017318:	47                   	inc    edi
c0017319:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001731d:	75 c1                	jne    c00172e0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001731f:	43                   	inc    ebx
c0017320:	83 fb 20             	cmp    ebx,0x20
c0017323:	0f 85 79 ff ff ff    	jne    c00172a2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017329:	83 c4 2c             	add    esp,0x2c
c001732c:	5b                   	pop    ebx
c001732d:	5e                   	pop    esi
c001732e:	5f                   	pop    edi
c001732f:	5d                   	pop    ebp
c0017330:	c3                   	ret    
c0017331:	90                   	nop

c0017332 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017332:	55                   	push   ebp
c0017333:	57                   	push   edi
c0017334:	56                   	push   esi
c0017335:	53                   	push   ebx
c0017336:	83 ec 28             	sub    esp,0x28
c0017339:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001733d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017341:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017345:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017349:	c1 e7 08             	shl    edi,0x8
c001734c:	01 c7                	add    edi,eax
c001734e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017352:	c1 e0 08             	shl    eax,0x8
c0017355:	01 d0                	add    eax,edx
c0017357:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001735b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001735f:	0f af c7             	imul   eax,edi
c0017362:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017369:	50                   	push   eax
c001736a:	e8 1d 85 ff ff       	call   c000f88c <malloc>
c001736f:	83 c4 10             	add    esp,0x10
c0017372:	89 c5                	mov    ebp,eax
c0017374:	85 c0                	test   eax,eax
c0017376:	75 15                	jne    c001738d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017378:	83 ec 0c             	sub    esp,0xc
c001737b:	68 01 bf 02 c0       	push   0xc002bf01
c0017380:	e8 18 b7 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0017385:	83 c4 10             	add    esp,0x10
c0017388:	e9 1c 01 00 00       	jmp    c00174a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001738d:	be 12 00 00 00       	mov    esi,0x12
c0017392:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017396:	74 11                	je     c00173a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017398:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001739c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00173a0:	c1 fe 03             	sar    esi,0x3
c00173a3:	0f af f0             	imul   esi,eax
c00173a6:	83 c6 12             	add    esi,0x12
c00173a9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00173ad:	74 04                	je     c00173b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00173af:	85 ff                	test   edi,edi
c00173b1:	75 12                	jne    c00173c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00173b3:	83 ec 0c             	sub    esp,0xc
c00173b6:	68 18 bf 02 c0       	push   0xc002bf18
c00173bb:	e8 dd b6 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00173c0:	e9 ce 00 00 00       	jmp    c0017493 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00173c5:	52                   	push   edx
c00173c6:	52                   	push   edx
c00173c7:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00173cb:	50                   	push   eax
c00173cc:	68 2d bf 02 c0       	push   0xc002bf2d
c00173d1:	e8 c7 b6 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00173d6:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	80 fa 02             	cmp    dl,0x2
c00173e0:	0f 85 98 00 00 00    	jne    c001747e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00173e6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00173eb:	75 10                	jne    c00173fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00173ed:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00173f1:	75 0a                	jne    c00173fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00173f3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00173f6:	83 e8 18             	sub    eax,0x18
c00173f9:	a8 f7                	test   al,0xf7
c00173fb:	74 0a                	je     c0017407 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00173fd:	83 ec 0c             	sub    esp,0xc
c0017400:	68 3a bf 02 c0       	push   0xc002bf3a
c0017405:	eb 7f                	jmp    c0017486 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017407:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001740f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017417:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001741b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017423:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017427:	75 0c                	jne    c0017435 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017429:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001742e:	c1 e0 18             	shl    eax,0x18
c0017431:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017435:	41                   	inc    ecx
c0017436:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001743b:	c1 e2 10             	shl    edx,0x10
c001743e:	89 d0                	mov    eax,edx
c0017440:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017445:	c1 e2 08             	shl    edx,0x8
c0017448:	09 c2                	or     edx,eax
c001744a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001744e:	09 c2                	or     edx,eax
c0017450:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017454:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017458:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001745c:	c1 f8 03             	sar    eax,0x3
c001745f:	01 c6                	add    esi,eax
c0017461:	89 c8                	mov    eax,ecx
c0017463:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017467:	39 c7                	cmp    edi,eax
c0017469:	7f b0                	jg     c001741b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001746b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001746f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017473:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017476:	7e 22                	jle    c001749a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017478:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001747c:	eb 99                	jmp    c0017417 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001747e:	50                   	push   eax
c001747f:	50                   	push   eax
c0017480:	52                   	push   edx
c0017481:	68 48 bf 02 c0       	push   0xc002bf48
c0017486:	e8 12 b6 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001748b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001748e:	e8 09 84 ff ff       	call   c000f89c <free>
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	31 ed                	xor    ebp,ebp
c0017498:	eb 0f                	jmp    c00174a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001749a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001749e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00174a1:	89 38                	mov    DWORD PTR [eax],edi
c00174a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174a7:	89 08                	mov    DWORD PTR [eax],ecx
c00174a9:	83 c4 1c             	add    esp,0x1c
c00174ac:	89 e8                	mov    eax,ebp
c00174ae:	5b                   	pop    ebx
c00174af:	5e                   	pop    esi
c00174b0:	5f                   	pop    edi
c00174b1:	5d                   	pop    ebp
c00174b2:	c3                   	ret    
c00174b3:	90                   	nop

c00174b4 <Video::putTGA(int, int, unsigned char*, int)>:
c00174b4:	55                   	push   ebp
c00174b5:	57                   	push   edi
c00174b6:	56                   	push   esi
c00174b7:	53                   	push   ebx
c00174b8:	83 ec 28             	sub    esp,0x28
c00174bb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00174bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174c3:	50                   	push   eax
c00174c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174c8:	50                   	push   eax
c00174c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00174cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00174d1:	56                   	push   esi
c00174d2:	e8 5b fe ff ff       	call   c0017332 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00174d7:	83 c4 20             	add    esp,0x20
c00174da:	85 c0                	test   eax,eax
c00174dc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00174e0:	74 35                	je     c0017517 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00174e2:	89 c7                	mov    edi,eax
c00174e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174e8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00174ec:	39 d8                	cmp    eax,ebx
c00174ee:	7e 27                	jle    c0017517 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00174f0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00174fc:	39 e8                	cmp    eax,ebp
c00174fe:	7e 14                	jle    c0017514 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017500:	8b 06                	mov    eax,DWORD PTR [esi]
c0017502:	83 c7 04             	add    edi,0x4
c0017505:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017508:	53                   	push   ebx
c0017509:	55                   	push   ebp
c001750a:	45                   	inc    ebp
c001750b:	56                   	push   esi
c001750c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001750f:	83 c4 10             	add    esp,0x10
c0017512:	eb e0                	jmp    c00174f4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017514:	43                   	inc    ebx
c0017515:	eb cd                	jmp    c00174e4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017517:	83 c4 1c             	add    esp,0x1c
c001751a:	5b                   	pop    ebx
c001751b:	5e                   	pop    esi
c001751c:	5f                   	pop    edi
c001751d:	5d                   	pop    ebp
c001751e:	c3                   	ret    
c001751f:	90                   	nop

c0017520 <ACPI::close(int, int, void*)>:
c0017520:	83 ec 1c             	sub    esp,0x1c
c0017523:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001752b:	74 0a                	je     c0017537 <ACPI::close(int, int, void*)+0x17>
c001752d:	b8 00 00 00 00       	mov    eax,0x0
c0017532:	e9 9a 00 00 00       	jmp    c00175d1 <ACPI::close(int, int, void*)+0xb1>
c0017537:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001753c:	75 37                	jne    c0017575 <ACPI::close(int, int, void*)+0x55>
c001753e:	83 ec 0c             	sub    esp,0xc
c0017541:	68 a4 bf 02 c0       	push   0xc002bfa4
c0017546:	e8 52 b5 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001754b:	83 c4 10             	add    esp,0x10
c001754e:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c0017553:	85 c0                	test   eax,eax
c0017555:	74 07                	je     c001755e <ACPI::close(int, int, void*)+0x3e>
c0017557:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c001755c:	ff d0                	call   eax
c001755e:	83 ec 0c             	sub    esp,0xc
c0017561:	68 bc c0 02 c0       	push   0xc002c0bc
c0017566:	e8 68 2f 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017573:	eb 5c                	jmp    c00175d1 <ACPI::close(int, int, void*)+0xb1>
c0017575:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001757a:	75 50                	jne    c00175cc <ACPI::close(int, int, void*)+0xac>
c001757c:	a1 84 17 03 c0       	mov    eax,ds:0xc0031784
c0017581:	85 c0                	test   eax,eax
c0017583:	74 07                	je     c001758c <ACPI::close(int, int, void*)+0x6c>
c0017585:	a1 84 17 03 c0       	mov    eax,ds:0xc0031784
c001758a:	ff d0                	call   eax
c001758c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017591:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017596:	83 e0 02             	and    eax,0x2
c0017599:	74 1c                	je     c00175b7 <ACPI::close(int, int, void*)+0x97>
c001759b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00175a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175a6:	89 c2                	mov    edx,eax
c00175a8:	ec                   	in     al,dx
c00175a9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00175ad:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00175b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00175b5:	eb da                	jmp    c0017591 <ACPI::close(int, int, void*)+0x71>
c00175b7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00175be:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00175c3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00175c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00175cb:	ee                   	out    dx,al
c00175cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00175d1:	83 c4 1c             	add    esp,0x1c
c00175d4:	c3                   	ret    

c00175d5 <findRSDP()>:
c00175d5:	83 ec 1c             	sub    esp,0x1c
c00175d8:	83 ec 0c             	sub    esp,0xc
c00175db:	68 b1 bf 02 c0       	push   0xc002bfb1
c00175e0:	e8 b8 b4 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00175e5:	83 c4 10             	add    esp,0x10
c00175e8:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00175ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175f3:	83 e0 04             	and    eax,0x4
c00175f6:	84 c0                	test   al,al
c00175f8:	75 07                	jne    c0017601 <findRSDP()+0x2c>
c00175fa:	b8 00 00 00 00       	mov    eax,0x0
c00175ff:	eb 6a                	jmp    c001766b <findRSDP()+0x96>
c0017601:	a1 34 f1 02 c0       	mov    eax,ds:0xc002f134
c0017606:	3d ff 07 00 00       	cmp    eax,0x7ff
c001760b:	7f 1b                	jg     c0017628 <findRSDP()+0x53>
c001760d:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0017612:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017618:	83 e2 fb             	and    edx,0xfffffffb
c001761b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017621:	b8 00 00 00 00       	mov    eax,0x0
c0017626:	eb 43                	jmp    c001766b <findRSDP()+0x96>
c0017628:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017630:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017638:	77 2c                	ja     c0017666 <findRSDP()+0x91>
c001763a:	83 ec 04             	sub    esp,0x4
c001763d:	6a 08                	push   0x8
c001763f:	68 bf bf 02 c0       	push   0xc002bfbf
c0017644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017648:	e8 ff 8f fe ff       	call   c000064c <memcmp>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	85 c0                	test   eax,eax
c0017652:	0f 94 c0             	sete   al
c0017655:	84 c0                	test   al,al
c0017657:	74 06                	je     c001765f <findRSDP()+0x8a>
c0017659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001765d:	eb 0c                	jmp    c001766b <findRSDP()+0x96>
c001765f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017664:	eb ca                	jmp    c0017630 <findRSDP()+0x5b>
c0017666:	b8 00 00 00 00       	mov    eax,0x0
c001766b:	83 c4 1c             	add    esp,0x1c
c001766e:	c3                   	ret    

c001766f <loadACPITables(unsigned char*)>:
c001766f:	57                   	push   edi
c0017670:	56                   	push   esi
c0017671:	53                   	push   ebx
c0017672:	83 ec 60             	sub    esp,0x60
c0017675:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001767a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017680:	83 e0 04             	and    eax,0x4
c0017683:	84 c0                	test   al,al
c0017685:	0f 84 33 02 00 00    	je     c00178be <loadACPITables(unsigned char*)+0x24f>
c001768b:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017690:	84 c0                	test   al,al
c0017692:	74 75                	je     c0017709 <loadACPITables(unsigned char*)+0x9a>
c0017694:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017698:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001769c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00176a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176a3:	83 e8 24             	sub    eax,0x24
c00176a6:	c1 e8 03             	shr    eax,0x3
c00176a9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00176ad:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00176b5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00176b9:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00176bd:	0f 8d b2 00 00 00    	jge    c0017775 <loadACPITables(unsigned char*)+0x106>
c00176c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00176c7:	83 c0 24             	add    eax,0x24
c00176ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00176ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00176d6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00176da:	c1 e0 03             	shl    eax,0x3
c00176dd:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00176e1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00176e5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00176e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00176ea:	89 c1                	mov    ecx,eax
c00176ec:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c00176f1:	8d 50 01             	lea    edx,[eax+0x1]
c00176f4:	89 15 8c 17 03 c0    	mov    DWORD PTR ds:0xc003178c,edx
c00176fa:	89 ca                	mov    edx,ecx
c00176fc:	89 14 c5 a4 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce85c],edx
c0017703:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017707:	eb ac                	jmp    c00176b5 <loadACPITables(unsigned char*)+0x46>
c0017709:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001770d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017711:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017718:	83 e8 24             	sub    eax,0x24
c001771b:	c1 e8 02             	shr    eax,0x2
c001771e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017722:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001772a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001772e:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017732:	7d 41                	jge    c0017775 <loadACPITables(unsigned char*)+0x106>
c0017734:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017738:	83 c0 24             	add    eax,0x24
c001773b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001773f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017743:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017747:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001774b:	c1 e0 02             	shl    eax,0x2
c001774e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017752:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017756:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017758:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c001775d:	8d 50 01             	lea    edx,[eax+0x1]
c0017760:	89 15 8c 17 03 c0    	mov    DWORD PTR ds:0xc003178c,edx
c0017766:	89 ca                	mov    edx,ecx
c0017768:	89 14 c5 a4 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce85c],edx
c001776f:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017773:	eb b5                	jmp    c001772a <loadACPITables(unsigned char*)+0xbb>
c0017775:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001777d:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c0017782:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017786:	0f 8d 33 01 00 00    	jge    c00178bf <loadACPITables(unsigned char*)+0x250>
c001778c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017790:	8b 04 c5 a4 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce85c]
c0017797:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001779b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001779f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177a7:	25 ff 0f 00 00       	and    eax,0xfff
c00177ac:	89 c6                	mov    esi,eax
c00177ae:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c00177b4:	83 ec 0c             	sub    esp,0xc
c00177b7:	6a 01                	push   0x1
c00177b9:	e8 d9 9e ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c00177be:	83 c4 10             	add    esp,0x10
c00177c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177c5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177cb:	83 ec 0c             	sub    esp,0xc
c00177ce:	6a 01                	push   0x1
c00177d0:	6a 01                	push   0x1
c00177d2:	50                   	push   eax
c00177d3:	52                   	push   edx
c00177d4:	53                   	push   ebx
c00177d5:	e8 ea a9 ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177da:	83 c4 20             	add    esp,0x20
c00177dd:	09 f0                	or     eax,esi
c00177df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177e3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00177e7:	c1 e0 03             	shl    eax,0x3
c00177ea:	05 a0 17 03 c0       	add    eax,0xc00317a0
c00177ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177fb:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017807:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001780b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001780f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017813:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017817:	89 c6                	mov    esi,eax
c0017819:	89 d7                	mov    edi,edx
c001781b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001781d:	89 c8                	mov    eax,ecx
c001781f:	89 fa                	mov    edx,edi
c0017821:	89 f3                	mov    ebx,esi
c0017823:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017827:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001782b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001782f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017833:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017836:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001783a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001783e:	05 00 10 00 00       	add    eax,0x1000
c0017843:	c1 e8 0c             	shr    eax,0xc
c0017846:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001784a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001784e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017856:	25 ff 0f 00 00       	and    eax,0xfff
c001785b:	89 c6                	mov    esi,eax
c001785d:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0017863:	83 ec 0c             	sub    esp,0xc
c0017866:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001786a:	e8 28 9e ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017876:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001787c:	83 ec 0c             	sub    esp,0xc
c001787f:	6a 01                	push   0x1
c0017881:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017885:	50                   	push   eax
c0017886:	52                   	push   edx
c0017887:	53                   	push   ebx
c0017888:	e8 37 a9 ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001788d:	83 c4 20             	add    esp,0x20
c0017890:	09 f0                	or     eax,esi
c0017892:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001789a:	83 ec 0c             	sub    esp,0xc
c001789d:	50                   	push   eax
c001789e:	e8 b4 a2 ff ff       	call   c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00178aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00178ae:	89 14 c5 a4 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce85c],edx
c00178b5:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00178b9:	e9 bf fe ff ff       	jmp    c001777d <loadACPITables(unsigned char*)+0x10e>
c00178be:	90                   	nop
c00178bf:	83 c4 60             	add    esp,0x60
c00178c2:	5b                   	pop    ebx
c00178c3:	5e                   	pop    esi
c00178c4:	5f                   	pop    edi
c00178c5:	c3                   	ret    

c00178c6 <findRSDT(unsigned char*)>:
c00178c6:	57                   	push   edi
c00178c7:	56                   	push   esi
c00178c8:	53                   	push   ebx
c00178c9:	83 ec 50             	sub    esp,0x50
c00178cc:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00178d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178d7:	83 e0 04             	and    eax,0x4
c00178da:	84 c0                	test   al,al
c00178dc:	75 0a                	jne    c00178e8 <findRSDT(unsigned char*)+0x22>
c00178de:	b8 00 00 00 00       	mov    eax,0x0
c00178e3:	e9 21 01 00 00       	jmp    c0017a09 <findRSDT(unsigned char*)+0x143>
c00178e8:	89 e0                	mov    eax,esp
c00178ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178ee:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00178f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00178f6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00178fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017902:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017906:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001790a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001790e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017912:	89 c6                	mov    esi,eax
c0017914:	89 d7                	mov    edi,edx
c0017916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017918:	89 c8                	mov    eax,ecx
c001791a:	89 fa                	mov    edx,edi
c001791c:	89 f3                	mov    ebx,esi
c001791e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017922:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017926:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001792a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001792e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017932:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001793a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001793e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017942:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001794a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001794e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017952:	25 ff 0f 00 00       	and    eax,0xfff
c0017957:	89 c6                	mov    esi,eax
c0017959:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c001795f:	83 ec 0c             	sub    esp,0xc
c0017962:	6a 02                	push   0x2
c0017964:	e8 2e 9d ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017970:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017976:	83 ec 0c             	sub    esp,0xc
c0017979:	6a 01                	push   0x1
c001797b:	6a 02                	push   0x2
c001797d:	50                   	push   eax
c001797e:	52                   	push   edx
c001797f:	53                   	push   ebx
c0017980:	e8 3f a8 ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017985:	83 c4 20             	add    esp,0x20
c0017988:	09 f0                	or     eax,esi
c001798a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001798e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017992:	25 ff 0f 00 00       	and    eax,0xfff
c0017997:	89 c6                	mov    esi,eax
c0017999:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c001799f:	83 ec 0c             	sub    esp,0xc
c00179a2:	6a 02                	push   0x2
c00179a4:	e8 ee 9c ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179b6:	83 ec 0c             	sub    esp,0xc
c00179b9:	6a 01                	push   0x1
c00179bb:	6a 02                	push   0x2
c00179bd:	50                   	push   eax
c00179be:	52                   	push   edx
c00179bf:	53                   	push   ebx
c00179c0:	e8 ff a7 ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179c5:	83 c4 20             	add    esp,0x20
c00179c8:	09 f0                	or     eax,esi
c00179ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00179ce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00179d3:	75 11                	jne    c00179e6 <findRSDT(unsigned char*)+0x120>
c00179d5:	c6 05 a0 19 03 c0 00 	mov    BYTE PTR ds:0xc00319a0,0x0
c00179dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179e4:	eb 1f                	jmp    c0017a05 <findRSDT(unsigned char*)+0x13f>
c00179e6:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00179eb:	75 11                	jne    c00179fe <findRSDT(unsigned char*)+0x138>
c00179ed:	c6 05 a0 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a0,0x1
c00179f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00179f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179fc:	eb 07                	jmp    c0017a05 <findRSDT(unsigned char*)+0x13f>
c00179fe:	b8 00 00 00 00       	mov    eax,0x0
c0017a03:	eb 04                	jmp    c0017a09 <findRSDT(unsigned char*)+0x143>
c0017a05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a09:	83 c4 50             	add    esp,0x50
c0017a0c:	5b                   	pop    ebx
c0017a0d:	5e                   	pop    esi
c0017a0e:	5f                   	pop    edi
c0017a0f:	c3                   	ret    

c0017a10 <findDataTable(unsigned char*, char*)>:
c0017a10:	83 ec 1c             	sub    esp,0x1c
c0017a13:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0017a18:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a1e:	83 e0 04             	and    eax,0x4
c0017a21:	84 c0                	test   al,al
c0017a23:	75 07                	jne    c0017a2c <findDataTable(unsigned char*, char*)+0x1c>
c0017a25:	b8 00 00 00 00       	mov    eax,0x0
c0017a2a:	eb 7c                	jmp    c0017aa8 <findDataTable(unsigned char*, char*)+0x98>
c0017a2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a34:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c0017a39:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017a3d:	7d 3a                	jge    c0017a79 <findDataTable(unsigned char*, char*)+0x69>
c0017a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a43:	c1 e0 03             	shl    eax,0x3
c0017a46:	05 a0 17 03 c0       	add    eax,0xc00317a0
c0017a4b:	83 ec 04             	sub    esp,0x4
c0017a4e:	6a 04                	push   0x4
c0017a50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a54:	50                   	push   eax
c0017a55:	e8 f2 8b fe ff       	call   c000064c <memcmp>
c0017a5a:	83 c4 10             	add    esp,0x10
c0017a5d:	85 c0                	test   eax,eax
c0017a5f:	0f 94 c0             	sete   al
c0017a62:	84 c0                	test   al,al
c0017a64:	74 0d                	je     c0017a73 <findDataTable(unsigned char*, char*)+0x63>
c0017a66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a6a:	8b 04 c5 a4 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce85c]
c0017a71:	eb 35                	jmp    c0017aa8 <findDataTable(unsigned char*, char*)+0x98>
c0017a73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a77:	eb bb                	jmp    c0017a34 <findDataTable(unsigned char*, char*)+0x24>
c0017a79:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017a7e:	84 c0                	test   al,al
c0017a80:	74 07                	je     c0017a89 <findDataTable(unsigned char*, char*)+0x79>
c0017a82:	b8 58 00 00 00       	mov    eax,0x58
c0017a87:	eb 05                	jmp    c0017a8e <findDataTable(unsigned char*, char*)+0x7e>
c0017a89:	b8 52 00 00 00       	mov    eax,0x52
c0017a8e:	83 ec 04             	sub    esp,0x4
c0017a91:	50                   	push   eax
c0017a92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a96:	68 e0 c0 02 c0       	push   0xc002c0e0
c0017a9b:	e8 fd af ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0017aa0:	83 c4 10             	add    esp,0x10
c0017aa3:	b8 00 00 00 00       	mov    eax,0x0
c0017aa8:	83 c4 1c             	add    esp,0x1c
c0017aab:	c3                   	ret    

c0017aac <scanMADT()>:
c0017aac:	53                   	push   ebx
c0017aad:	83 ec 38             	sub    esp,0x38
c0017ab0:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0017ab5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017abb:	83 e0 04             	and    eax,0x4
c0017abe:	84 c0                	test   al,al
c0017ac0:	0f 84 63 04 00 00    	je     c0017f29 <scanMADT()+0x47d>
c0017ac6:	e8 0a fb ff ff       	call   c00175d5 <findRSDP()>
c0017acb:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c0017ad0:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c0017ad5:	85 c0                	test   eax,eax
c0017ad7:	75 19                	jne    c0017af2 <scanMADT()+0x46>
c0017ad9:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0017ade:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ae4:	83 e2 fb             	and    edx,0xfffffffb
c0017ae7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017aed:	e9 3b 04 00 00       	jmp    c0017f2d <scanMADT()+0x481>
c0017af2:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c0017af7:	83 ec 0c             	sub    esp,0xc
c0017afa:	50                   	push   eax
c0017afb:	e8 c6 fd ff ff       	call   c00178c6 <findRSDT(unsigned char*)>
c0017b00:	83 c4 10             	add    esp,0x10
c0017b03:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c0017b08:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0017b0d:	85 c0                	test   eax,eax
c0017b0f:	75 19                	jne    c0017b2a <scanMADT()+0x7e>
c0017b11:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0017b16:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b1c:	83 e2 fb             	and    edx,0xfffffffb
c0017b1f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b25:	e9 03 04 00 00       	jmp    c0017f2d <scanMADT()+0x481>
c0017b2a:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0017b2f:	83 ec 0c             	sub    esp,0xc
c0017b32:	50                   	push   eax
c0017b33:	e8 37 fb ff ff       	call   c001766f <loadACPITables(unsigned char*)>
c0017b38:	83 c4 10             	add    esp,0x10
c0017b3b:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0017b40:	83 ec 08             	sub    esp,0x8
c0017b43:	68 c8 bf 02 c0       	push   0xc002bfc8
c0017b48:	50                   	push   eax
c0017b49:	e8 c2 fe ff ff       	call   c0017a10 <findDataTable(unsigned char*, char*)>
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b55:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017b5a:	75 19                	jne    c0017b75 <scanMADT()+0xc9>
c0017b5c:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0017b61:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b67:	83 e2 fe             	and    edx,0xfffffffe
c0017b6a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b70:	e9 b8 03 00 00       	jmp    c0017f2d <scanMADT()+0x481>
c0017b75:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017b7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b84:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017b88:	0f 87 9f 03 00 00    	ja     c0017f2d <scanMADT()+0x481>
c0017b8e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017b96:	0f 87 91 03 00 00    	ja     c0017f2d <scanMADT()+0x481>
c0017b9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ba4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba8:	8d 50 01             	lea    edx,[eax+0x1]
c0017bab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017baf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bb7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017bbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbf:	8d 50 01             	lea    edx,[eax+0x1]
c0017bc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bce:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017bd2:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017bd7:	0f 86 4f 03 00 00    	jbe    c0017f2c <scanMADT()+0x480>
c0017bdd:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017be2:	75 57                	jne    c0017c3b <scanMADT()+0x18f>
c0017be4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be8:	8d 50 01             	lea    edx,[eax+0x1]
c0017beb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bef:	8a 15 a0 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031ba0
c0017bf5:	0f b6 d2             	movzx  edx,dl
c0017bf8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017bfc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c00:	88 82 e0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce420],al
c0017c06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c0a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c11:	8a 15 a0 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031ba0
c0017c17:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c1a:	88 0d a0 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba0,cl
c0017c20:	0f b6 d2             	movzx  edx,dl
c0017c23:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c27:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c2b:	88 82 c0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce440],al
c0017c31:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c36:	e9 da 02 00 00       	jmp    c0017f15 <scanMADT()+0x469>
c0017c3b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017c40:	0f 85 14 01 00 00    	jne    c0017d5a <scanMADT()+0x2ae>
c0017c46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c51:	8a 15 60 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a60
c0017c57:	0f b6 d2             	movzx  edx,dl
c0017c5a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c5e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c62:	88 82 80 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce580],al
c0017c68:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017c6c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c74:	01 d0                	add    eax,edx
c0017c76:	83 c0 2c             	add    eax,0x2c
c0017c79:	8a 00                	mov    al,BYTE PTR [eax]
c0017c7b:	0f b6 d0             	movzx  edx,al
c0017c7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c82:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c89:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c8d:	0f b6 c0             	movzx  eax,al
c0017c90:	c1 e0 08             	shl    eax,0x8
c0017c93:	89 d1                	mov    ecx,edx
c0017c95:	09 c1                	or     ecx,eax
c0017c97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9b:	8d 50 02             	lea    edx,[eax+0x2]
c0017c9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ca6:	0f b6 c0             	movzx  eax,al
c0017ca9:	c1 e0 10             	shl    eax,0x10
c0017cac:	09 c1                	or     ecx,eax
c0017cae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb2:	8d 50 03             	lea    edx,[eax+0x3]
c0017cb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cbd:	0f b6 c0             	movzx  eax,al
c0017cc0:	c1 e0 18             	shl    eax,0x18
c0017cc3:	09 c1                	or     ecx,eax
c0017cc5:	89 ca                	mov    edx,ecx
c0017cc7:	a0 60 1a 03 c0       	mov    al,ds:0xc0031a60
c0017ccc:	0f b6 c0             	movzx  eax,al
c0017ccf:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c0017cd6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ce3:	01 d0                	add    eax,edx
c0017ce5:	83 c0 2c             	add    eax,0x2c
c0017ce8:	8a 00                	mov    al,BYTE PTR [eax]
c0017cea:	0f b6 d0             	movzx  edx,al
c0017ced:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cf4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cf8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cfc:	0f b6 c0             	movzx  eax,al
c0017cff:	c1 e0 08             	shl    eax,0x8
c0017d02:	89 d1                	mov    ecx,edx
c0017d04:	09 c1                	or     ecx,eax
c0017d06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d0a:	8d 50 02             	lea    edx,[eax+0x2]
c0017d0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d11:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d15:	0f b6 c0             	movzx  eax,al
c0017d18:	c1 e0 10             	shl    eax,0x10
c0017d1b:	09 c1                	or     ecx,eax
c0017d1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d21:	8d 50 03             	lea    edx,[eax+0x3]
c0017d24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d28:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d2c:	0f b6 c0             	movzx  eax,al
c0017d2f:	c1 e0 18             	shl    eax,0x18
c0017d32:	09 c1                	or     ecx,eax
c0017d34:	89 ca                	mov    edx,ecx
c0017d36:	a0 60 1a 03 c0       	mov    al,ds:0xc0031a60
c0017d3b:	0f b6 c0             	movzx  eax,al
c0017d3e:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c0017d45:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d4a:	a0 60 1a 03 c0       	mov    al,ds:0xc0031a60
c0017d4f:	40                   	inc    eax
c0017d50:	a2 60 1a 03 c0       	mov    ds:0xc0031a60,al
c0017d55:	e9 bb 01 00 00       	jmp    c0017f15 <scanMADT()+0x469>
c0017d5a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017d5f:	0f 85 e9 00 00 00    	jne    c0017e4e <scanMADT()+0x3a2>
c0017d65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d69:	8d 50 01             	lea    edx,[eax+0x1]
c0017d6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d74:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d78:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017d7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d80:	8d 50 01             	lea    edx,[eax+0x1]
c0017d83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d8b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d8f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017d93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d9b:	01 d0                	add    eax,edx
c0017d9d:	83 c0 2c             	add    eax,0x2c
c0017da0:	8a 00                	mov    al,BYTE PTR [eax]
c0017da2:	0f b6 d0             	movzx  edx,al
c0017da5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017dac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017db4:	0f b6 c0             	movzx  eax,al
c0017db7:	c1 e0 08             	shl    eax,0x8
c0017dba:	89 d1                	mov    ecx,edx
c0017dbc:	09 c1                	or     ecx,eax
c0017dbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc2:	8d 50 02             	lea    edx,[eax+0x2]
c0017dc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dc9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dcd:	0f b6 c0             	movzx  eax,al
c0017dd0:	c1 e0 10             	shl    eax,0x10
c0017dd3:	09 c1                	or     ecx,eax
c0017dd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd9:	8d 50 03             	lea    edx,[eax+0x3]
c0017ddc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017de0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017de4:	0f b6 c0             	movzx  eax,al
c0017de7:	c1 e0 18             	shl    eax,0x18
c0017dea:	09 c8                	or     eax,ecx
c0017dec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017df0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017df5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dfd:	01 d0                	add    eax,edx
c0017dff:	83 c0 2c             	add    eax,0x2c
c0017e02:	8a 00                	mov    al,BYTE PTR [eax]
c0017e04:	0f b6 c0             	movzx  eax,al
c0017e07:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e0b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e12:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017e16:	0f b6 d2             	movzx  edx,dl
c0017e19:	c1 e2 08             	shl    edx,0x8
c0017e1c:	09 d0                	or     eax,edx
c0017e1e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017e23:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017e28:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017e2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e31:	88 90 40 e3 02 c0    	mov    BYTE PTR [eax-0x3ffd1cc0],dl
c0017e37:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017e3c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017e41:	66 89 84 12 40 1a 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce5c0],ax
c0017e49:	e9 c7 00 00 00       	jmp    c0017f15 <scanMADT()+0x469>
c0017e4e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017e53:	0f 85 b0 00 00 00    	jne    c0017f09 <scanMADT()+0x45d>
c0017e59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e5d:	8d 50 01             	lea    edx,[eax+0x1]
c0017e60:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e68:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e6c:	0f b6 c0             	movzx  eax,al
c0017e6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7b:	01 d0                	add    eax,edx
c0017e7d:	83 c0 2c             	add    eax,0x2c
c0017e80:	8a 00                	mov    al,BYTE PTR [eax]
c0017e82:	0f b6 d0             	movzx  edx,al
c0017e85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e89:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e90:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e94:	0f b6 c0             	movzx  eax,al
c0017e97:	c1 e0 08             	shl    eax,0x8
c0017e9a:	09 d0                	or     eax,edx
c0017e9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ea0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ea5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea9:	8d 50 01             	lea    edx,[eax+0x1]
c0017eac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eb8:	0f b6 c0             	movzx  eax,al
c0017ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ec3:	c1 e0 08             	shl    eax,0x8
c0017ec6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017eca:	89 c1                	mov    ecx,eax
c0017ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ed0:	c1 e0 18             	shl    eax,0x18
c0017ed3:	89 c3                	mov    ebx,eax
c0017ed5:	a1 b0 19 03 c0       	mov    eax,ds:0xc00319b0
c0017eda:	8d 50 01             	lea    edx,[eax+0x1]
c0017edd:	89 15 b0 19 03 c0    	mov    DWORD PTR ds:0xc00319b0,edx
c0017ee3:	09 d9                	or     ecx,ebx
c0017ee5:	89 ca                	mov    edx,ecx
c0017ee7:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c0017eee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ef2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017efa:	68 10 c1 02 c0       	push   0xc002c110
c0017eff:	e8 99 ab ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0017f04:	83 c4 10             	add    esp,0x10
c0017f07:	eb 0c                	jmp    c0017f15 <scanMADT()+0x469>
c0017f09:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017f0e:	75 05                	jne    c0017f15 <scanMADT()+0x469>
c0017f10:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017f15:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017f1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f1e:	01 d0                	add    eax,edx
c0017f20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f24:	e9 54 fc ff ff       	jmp    c0017b7d <scanMADT()+0xd1>
c0017f29:	90                   	nop
c0017f2a:	eb 01                	jmp    c0017f2d <scanMADT()+0x481>
c0017f2c:	90                   	nop
c0017f2d:	83 c4 38             	add    esp,0x38
c0017f30:	5b                   	pop    ebx
c0017f31:	c3                   	ret    

c0017f32 <ACPI::ACPI()>:
c0017f32:	83 ec 0c             	sub    esp,0xc
c0017f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f39:	83 ec 08             	sub    esp,0x8
c0017f3c:	68 cd bf 02 c0       	push   0xc002bfcd
c0017f41:	50                   	push   eax
c0017f42:	e8 93 c1 ff ff       	call   c00140da <Device::Device(char const*)>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	ba ac c1 02 c0       	mov    edx,0xc002c1ac
c0017f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f53:	89 10                	mov    DWORD PTR [eax],edx
c0017f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f59:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f64:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f72:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017f7c:	e8 2b fb ff ff       	call   c0017aac <scanMADT()>
c0017f81:	90                   	nop
c0017f82:	83 c4 0c             	add    esp,0xc
c0017f85:	c3                   	ret    

c0017f86 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017f86:	83 ec 2c             	sub    esp,0x2c
c0017f89:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017f8d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017f91:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017f95:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017f99:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017f9e:	88 d0                	mov    al,dl
c0017fa0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017fa4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017fa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017fb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fb5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fbb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017fbf:	0f 8d 97 00 00 00    	jge    c001805c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017fc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fcd:	83 c2 2a             	add    edx,0x2a
c0017fd0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017fd4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017fd9:	75 78                	jne    c0018053 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017fdb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fe3:	83 c2 2a             	add    edx,0x2a
c0017fe6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017fea:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017fee:	75 63                	jne    c0018053 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ff0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ff5:	74 3a                	je     c0018031 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ff7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ffb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fff:	83 c2 2a             	add    edx,0x2a
c0018002:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018006:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001800a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001800d:	39 c2                	cmp    edx,eax
c001800f:	74 10                	je     c0018021 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018011:	83 ec 0c             	sub    esp,0xc
c0018014:	68 4c c1 02 c0       	push   0xc002c14c
c0018019:	e8 b5 24 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001801e:	83 c4 10             	add    esp,0x10
c0018021:	83 ec 0c             	sub    esp,0xc
c0018024:	68 d2 bf 02 c0       	push   0xc002bfd2
c0018029:	e8 a5 24 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001802e:	83 c4 10             	add    esp,0x10
c0018031:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018035:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001803d:	83 c2 2a             	add    edx,0x2a
c0018040:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018044:	8b 02                	mov    eax,DWORD PTR [edx]
c0018046:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018049:	89 01                	mov    DWORD PTR [ecx],eax
c001804b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001804e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018053:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018057:	e9 55 ff ff ff       	jmp    c0017fb1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001805c:	90                   	nop
c001805d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018061:	83 c4 2c             	add    esp,0x2c
c0018064:	c2 04 00             	ret    0x4
c0018067:	90                   	nop

c0018068 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018068:	83 ec 1c             	sub    esp,0x1c
c001806b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018073:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018077:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001807c:	88 c8                	mov    al,cl
c001807e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018082:	88 d0                	mov    al,dl
c0018084:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001808c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018096:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018099:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001809d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00180a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180af:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00180b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00180bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180bf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180c5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00180c9:	8d 48 01             	lea    ecx,[eax+0x1]
c00180cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180d0:	83 c2 2a             	add    edx,0x2a
c00180d3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00180d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180db:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00180e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180ec:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00180f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180f4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180fa:	8d 50 01             	lea    edx,[eax+0x1]
c00180fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018101:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018111:	3d 00 02 00 00       	cmp    eax,0x200
c0018116:	75 10                	jne    c0018128 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018118:	83 ec 0c             	sub    esp,0xc
c001811b:	68 e1 bf 02 c0       	push   0xc002bfe1
c0018120:	e8 ae 23 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	90                   	nop
c0018129:	83 c4 1c             	add    esp,0x1c
c001812c:	c3                   	ret    
c001812d:	90                   	nop

c001812e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001812e:	b8 00 00 00 00       	mov    eax,0x0
c0018133:	c3                   	ret    

c0018134 <ACPI::detectPCI()>:
c0018134:	53                   	push   ebx
c0018135:	83 ec 28             	sub    esp,0x28
c0018138:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001813d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0018142:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0018147:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001814d:	83 e0 04             	and    eax,0x4
c0018150:	84 c0                	test   al,al
c0018152:	74 2b                	je     c001817f <ACPI::detectPCI()+0x4b>
c0018154:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0018159:	83 ec 08             	sub    esp,0x8
c001815c:	68 fe bf 02 c0       	push   0xc002bffe
c0018161:	50                   	push   eax
c0018162:	e8 a9 f8 ff ff       	call   c0017a10 <findDataTable(unsigned char*, char*)>
c0018167:	83 c4 10             	add    esp,0x10
c001816a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001816e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0018173:	74 0a                	je     c001817f <ACPI::detectPCI()+0x4b>
c0018175:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001817a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001817f:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0018187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001818b:	8a 00                	mov    al,BYTE PTR [eax]
c001818d:	3c 01                	cmp    al,0x1
c001818f:	75 0c                	jne    c001819d <ACPI::detectPCI()+0x69>
c0018191:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018196:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001819b:	eb 26                	jmp    c00181c3 <ACPI::detectPCI()+0x8f>
c001819d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181a1:	8a 00                	mov    al,BYTE PTR [eax]
c00181a3:	3c 02                	cmp    al,0x2
c00181a5:	75 1c                	jne    c00181c3 <ACPI::detectPCI()+0x8f>
c00181a7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181ac:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181b1:	74 10                	je     c00181c3 <ACPI::detectPCI()+0x8f>
c00181b3:	83 ec 0c             	sub    esp,0xc
c00181b6:	68 7c c1 02 c0       	push   0xc002c17c
c00181bb:	e8 13 23 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00181c7:	83 f0 01             	xor    eax,0x1
c00181ca:	84 c0                	test   al,al
c00181cc:	74 3f                	je     c001820d <ACPI::detectPCI()+0xd9>
c00181ce:	e8 7d 7f fe ff       	call   c0000150 <manualPCIProbe>
c00181d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181d7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00181dc:	75 0c                	jne    c00181ea <ACPI::detectPCI()+0xb6>
c00181de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181e3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181e8:	eb 23                	jmp    c001820d <ACPI::detectPCI()+0xd9>
c00181ea:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00181ef:	75 1c                	jne    c001820d <ACPI::detectPCI()+0xd9>
c00181f1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181f6:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181fb:	74 10                	je     c001820d <ACPI::detectPCI()+0xd9>
c00181fd:	83 ec 0c             	sub    esp,0xc
c0018200:	68 7c c1 02 c0       	push   0xc002c17c
c0018205:	e8 c9 22 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001820a:	83 c4 10             	add    esp,0x10
c001820d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018212:	74 0d                	je     c0018221 <ACPI::detectPCI()+0xed>
c0018214:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0018218:	83 f0 01             	xor    eax,0x1
c001821b:	0f b6 c0             	movzx  eax,al
c001821e:	40                   	inc    eax
c001821f:	eb 05                	jmp    c0018226 <ACPI::detectPCI()+0xf2>
c0018221:	b8 00 00 00 00       	mov    eax,0x0
c0018226:	83 ec 08             	sub    esp,0x8
c0018229:	50                   	push   eax
c001822a:	68 03 c0 02 c0       	push   0xc002c003
c001822f:	e8 69 a8 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001823c:	74 69                	je     c00182a7 <ACPI::detectPCI()+0x173>
c001823e:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c0018246:	83 ec 0c             	sub    esp,0xc
c0018249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001824d:	e8 3a 76 ff ff       	call   c000f88c <malloc>
c0018252:	83 c4 10             	add    esp,0x10
c0018255:	89 c3                	mov    ebx,eax
c0018257:	83 ec 0c             	sub    esp,0xc
c001825a:	53                   	push   ebx
c001825b:	e8 0e ac 00 00       	call   c0022e6e <PCI::PCI()>
c0018260:	83 c4 10             	add    esp,0x10
c0018263:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018267:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001826b:	83 ec 08             	sub    esp,0x8
c001826e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018272:	50                   	push   eax
c0018273:	e8 5e bc ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001827f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018281:	83 c0 08             	add    eax,0x8
c0018284:	8b 00                	mov    eax,DWORD PTR [eax]
c0018286:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001828b:	74 07                	je     c0018294 <ACPI::detectPCI()+0x160>
c001828d:	ba 01 00 00 00       	mov    edx,0x1
c0018292:	eb 05                	jmp    c0018299 <ACPI::detectPCI()+0x165>
c0018294:	ba 02 00 00 00       	mov    edx,0x2
c0018299:	6a 00                	push   0x0
c001829b:	6a 00                	push   0x0
c001829d:	52                   	push   edx
c001829e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182a2:	ff d0                	call   eax
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	90                   	nop
c00182a8:	83 c4 28             	add    esp,0x28
c00182ab:	5b                   	pop    ebx
c00182ac:	c3                   	ret    
c00182ad:	90                   	nop

c00182ae <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00182ae:	83 ec 1c             	sub    esp,0x1c
c00182b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182b5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00182b8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00182bc:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00182c1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182c6:	83 ec 08             	sub    esp,0x8
c00182c9:	52                   	push   edx
c00182ca:	50                   	push   eax
c00182cb:	e8 d2 6b ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c00182d0:	83 c4 10             	add    esp,0x10
c00182d3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00182d7:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00182dc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182e1:	83 ec 04             	sub    esp,0x4
c00182e4:	6a 01                	push   0x1
c00182e6:	52                   	push   edx
c00182e7:	50                   	push   eax
c00182e8:	e8 cb 6c ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00182ed:	83 c4 10             	add    esp,0x10
c00182f0:	90                   	nop
c00182f1:	83 c4 1c             	add    esp,0x1c
c00182f4:	c3                   	ret    
c00182f5:	90                   	nop

c00182f6 <ACPI::sleep()>:
c00182f6:	83 ec 0c             	sub    esp,0xc
c00182f9:	a1 80 17 03 c0       	mov    eax,ds:0xc0031780
c00182fe:	85 c0                	test   eax,eax
c0018300:	74 07                	je     c0018309 <ACPI::sleep()+0x13>
c0018302:	a1 80 17 03 c0       	mov    eax,ds:0xc0031780
c0018307:	ff d0                	call   eax
c0018309:	90                   	nop
c001830a:	83 c4 0c             	add    esp,0xc
c001830d:	c3                   	ret    

c001830e <ACPI::open(int, int, void*)>:
c001830e:	57                   	push   edi
c001830f:	56                   	push   esi
c0018310:	53                   	push   ebx
c0018311:	81 ec 60 01 00 00    	sub    esp,0x160
c0018317:	83 ec 0c             	sub    esp,0xc
c001831a:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018321:	e8 0e fe ff ff       	call   c0018134 <ACPI::detectPCI()>
c0018326:	83 c4 10             	add    esp,0x10
c0018329:	83 ec 0c             	sub    esp,0xc
c001832c:	68 0c c0 02 c0       	push   0xc002c00c
c0018331:	e8 fa 4a 00 00       	call   c001ce30 <Thr::loadKernelSymbolTable(char const*)>
c0018336:	83 c4 10             	add    esp,0x10
c0018339:	83 ec 04             	sub    esp,0x4
c001833c:	6a 0c                	push   0xc
c001833e:	68 2a c0 02 c0       	push   0xc002c02a
c0018343:	68 3b c0 02 c0       	push   0xc002c03b
c0018348:	e8 3c 2f 00 00       	call   c001b289 <Reg::readIntWithDefault(char*, char*, int)>
c001834d:	83 c4 10             	add    esp,0x10
c0018350:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018357:	83 ec 0c             	sub    esp,0xc
c001835a:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018361:	e8 6f 95 ff ff       	call   c00118d5 <Virt::setupPageSwapping(int)>
c0018366:	83 c4 10             	add    esp,0x10
c0018369:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c001836f:	83 ec 08             	sub    esp,0x8
c0018372:	6a 01                	push   0x1
c0018374:	68 42 c0 02 c0       	push   0xc002c042
c0018379:	e8 29 55 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	83 ec 08             	sub    esp,0x8
c0018384:	53                   	push   ebx
c0018385:	50                   	push   eax
c0018386:	e8 47 57 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c001838b:	83 c4 10             	add    esp,0x10
c001838e:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018395:	83 ec 08             	sub    esp,0x8
c0018398:	6a 12                	push   0x12
c001839a:	50                   	push   eax
c001839b:	e8 ba be ff ff       	call   c001425a <getDevicesOfType(DeviceType)>
c00183a0:	83 c4 0c             	add    esp,0xc
c00183a3:	83 ec 0c             	sub    esp,0xc
c00183a6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00183ad:	50                   	push   eax
c00183ae:	e8 fd 12 01 00       	call   c00296b0 <LinkedList<Device>::isEmpty()>
c00183b3:	83 c4 10             	add    esp,0x10
c00183b6:	83 f0 01             	xor    eax,0x1
c00183b9:	84 c0                	test   al,al
c00183bb:	0f 84 43 01 00 00    	je     c0018504 <ACPI::open(int, int, void*)+0x1f6>
c00183c1:	83 ec 0c             	sub    esp,0xc
c00183c4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00183cb:	50                   	push   eax
c00183cc:	e8 fb 12 01 00       	call   c00296cc <LinkedList<Device>::getFirstElement()>
c00183d1:	83 c4 10             	add    esp,0x10
c00183d4:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00183e5:	50                   	push   eax
c00183e6:	e8 e9 12 01 00       	call   c00296d4 <LinkedList<Device>::removeFirst()>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00183f5:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00183fc:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018403:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018407:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001840d:	ba 09 00 00 00       	mov    edx,0x9
c0018412:	fc                   	cld    
c0018413:	89 c7                	mov    edi,eax
c0018415:	89 de                	mov    esi,ebx
c0018417:	89 d1                	mov    ecx,edx
c0018419:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001841b:	83 ec 08             	sub    esp,0x8
c001841e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018422:	50                   	push   eax
c0018423:	83 ec 24             	sub    esp,0x24
c0018426:	89 e0                	mov    eax,esp
c0018428:	89 c3                	mov    ebx,eax
c001842a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001842e:	ba 09 00 00 00       	mov    edx,0x9
c0018433:	89 df                	mov    edi,ebx
c0018435:	89 c6                	mov    esi,eax
c0018437:	89 d1                	mov    ecx,edx
c0018439:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001843b:	e8 2e af 00 00       	call   c002336e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018440:	83 c4 30             	add    esp,0x30
c0018443:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001844a:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018452:	0f 84 4b ff ff ff    	je     c00183a3 <ACPI::open(int, int, void*)+0x95>
c0018458:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018463:	83 ec 0c             	sub    esp,0xc
c0018466:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001846d:	e8 1a 74 ff ff       	call   c000f88c <malloc>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	89 c3                	mov    ebx,eax
c0018477:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001847c:	83 ec 04             	sub    esp,0x4
c001847f:	50                   	push   eax
c0018480:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018487:	53                   	push   ebx
c0018488:	e8 6f ab ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001848d:	83 c4 10             	add    esp,0x10
c0018490:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018497:	83 ec 0c             	sub    esp,0xc
c001849a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00184a1:	e8 28 ae ff ff       	call   c00132ce <File::exists()>
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	84 c0                	test   al,al
c00184ab:	74 27                	je     c00184d4 <ACPI::open(int, int, void*)+0x1c6>
c00184ad:	83 ec 08             	sub    esp,0x8
c00184b0:	6a 01                	push   0x1
c00184b2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00184b9:	e8 e9 53 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c00184be:	83 c4 10             	add    esp,0x10
c00184c1:	83 ec 08             	sub    esp,0x8
c00184c4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00184cb:	50                   	push   eax
c00184cc:	e8 01 56 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00184dc:	0f 84 c1 fe ff ff    	je     c00183a3 <ACPI::open(int, int, void*)+0x95>
c00184e2:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00184e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00184eb:	83 c0 08             	add    eax,0x8
c00184ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00184f0:	83 ec 0c             	sub    esp,0xc
c00184f3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00184fa:	ff d0                	call   eax
c00184fc:	83 c4 10             	add    esp,0x10
c00184ff:	e9 9f fe ff ff       	jmp    c00183a3 <ACPI::open(int, int, void*)+0x95>
c0018504:	83 ec 0c             	sub    esp,0xc
c0018507:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001850e:	50                   	push   eax
c001850f:	e8 9a 11 01 00       	call   c00296ae <LinkedList<Device>::~LinkedList()>
c0018514:	83 c4 10             	add    esp,0x10
c0018517:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c001851d:	83 ec 08             	sub    esp,0x8
c0018520:	6a 01                	push   0x1
c0018522:	68 5d c0 02 c0       	push   0xc002c05d
c0018527:	e8 7b 53 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	83 ec 08             	sub    esp,0x8
c0018532:	53                   	push   ebx
c0018533:	50                   	push   eax
c0018534:	e8 99 55 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c0018542:	83 ec 08             	sub    esp,0x8
c0018545:	6a 01                	push   0x1
c0018547:	68 7a c0 02 c0       	push   0xc002c07a
c001854c:	e8 56 53 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c0018551:	83 c4 10             	add    esp,0x10
c0018554:	83 ec 08             	sub    esp,0x8
c0018557:	53                   	push   ebx
c0018558:	50                   	push   eax
c0018559:	e8 74 55 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c001855e:	83 c4 10             	add    esp,0x10
c0018561:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0018566:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001856c:	83 e0 04             	and    eax,0x4
c001856f:	84 c0                	test   al,al
c0018571:	0f 84 fd 00 00 00    	je     c0018674 <ACPI::open(int, int, void*)+0x366>
c0018577:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018582:	83 ec 0c             	sub    esp,0xc
c0018585:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001858c:	e8 fb 72 ff ff       	call   c000f88c <malloc>
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	89 c3                	mov    ebx,eax
c0018596:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001859b:	83 ec 04             	sub    esp,0x4
c001859e:	50                   	push   eax
c001859f:	68 97 c0 02 c0       	push   0xc002c097
c00185a4:	53                   	push   ebx
c00185a5:	e8 52 aa ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c00185aa:	83 c4 10             	add    esp,0x10
c00185ad:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00185b4:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00185bc:	74 1a                	je     c00185d8 <ACPI::open(int, int, void*)+0x2ca>
c00185be:	83 ec 0c             	sub    esp,0xc
c00185c1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00185c8:	e8 01 ad ff ff       	call   c00132ce <File::exists()>
c00185cd:	83 c4 10             	add    esp,0x10
c00185d0:	84 c0                	test   al,al
c00185d2:	74 04                	je     c00185d8 <ACPI::open(int, int, void*)+0x2ca>
c00185d4:	b0 01                	mov    al,0x1
c00185d6:	eb 02                	jmp    c00185da <ACPI::open(int, int, void*)+0x2cc>
c00185d8:	b0 00                	mov    al,0x0
c00185da:	84 c0                	test   al,al
c00185dc:	74 25                	je     c0018603 <ACPI::open(int, int, void*)+0x2f5>
c00185de:	83 ec 08             	sub    esp,0x8
c00185e1:	6a 01                	push   0x1
c00185e3:	68 97 c0 02 c0       	push   0xc002c097
c00185e8:	e8 ba 52 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c00185ed:	83 c4 10             	add    esp,0x10
c00185f0:	83 ec 08             	sub    esp,0x8
c00185f3:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00185fa:	50                   	push   eax
c00185fb:	e8 d2 54 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001860b:	74 27                	je     c0018634 <ACPI::open(int, int, void*)+0x326>
c001860d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018615:	74 1d                	je     c0018634 <ACPI::open(int, int, void*)+0x326>
c0018617:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001861e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018620:	83 c0 08             	add    eax,0x8
c0018623:	8b 00                	mov    eax,DWORD PTR [eax]
c0018625:	83 ec 0c             	sub    esp,0xc
c0018628:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001862f:	ff d0                	call   eax
c0018631:	83 c4 10             	add    esp,0x10
c0018634:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0018639:	83 ec 08             	sub    esp,0x8
c001863c:	68 b4 c0 02 c0       	push   0xc002c0b4
c0018641:	50                   	push   eax
c0018642:	e8 c9 f3 ff ff       	call   c0017a10 <findDataTable(unsigned char*, char*)>
c0018647:	83 c4 10             	add    esp,0x10
c001864a:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018651:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018659:	74 19                	je     c0018674 <ACPI::open(int, int, void*)+0x366>
c001865b:	83 ec 08             	sub    esp,0x8
c001865e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018665:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001866c:	e8 3d fc ff ff       	call   c00182ae <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018671:	83 c4 10             	add    esp,0x10
c0018674:	b8 00 00 00 00       	mov    eax,0x0
c0018679:	81 c4 60 01 00 00    	add    esp,0x160
c001867f:	5b                   	pop    ebx
c0018680:	5e                   	pop    esi
c0018681:	5f                   	pop    edi
c0018682:	c3                   	ret    
c0018683:	90                   	nop

c0018684 <CPU::close(int, int, void*)>:
c0018684:	31 c0                	xor    eax,eax
c0018686:	c3                   	ret    
c0018687:	90                   	nop

c0018688 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018688:	55                   	push   ebp
c0018689:	57                   	push   edi
c001868a:	56                   	push   esi
c001868b:	53                   	push   ebx
c001868c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018690:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018694:	89 ce                	mov    esi,ecx
c0018696:	89 d5                	mov    ebp,edx
c0018698:	80 f9 04             	cmp    cl,0x4
c001869b:	75 28                	jne    c00186c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001869d:	8d 42 f9             	lea    eax,[edx-0x7]
c00186a0:	3c 03                	cmp    al,0x3
c00186a2:	0f 86 63 01 00 00    	jbe    c001880b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00186a8:	80 fa 03             	cmp    dl,0x3
c00186ab:	0f 84 5a 01 00 00    	je     c001880b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00186b1:	8d 7a f2             	lea    edi,[edx-0xe]
c00186b4:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c00186b9:	89 fb                	mov    ebx,edi
c00186bb:	80 fb 01             	cmp    bl,0x1
c00186be:	77 4e                	ja     c001870e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00186c0:	e9 52 01 00 00       	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186c5:	80 f9 05             	cmp    cl,0x5
c00186c8:	75 4d                	jne    c0018717 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00186ca:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c00186cf:	80 fa 03             	cmp    dl,0x3
c00186d2:	0f 86 3f 01 00 00    	jbe    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d8:	8d 7a fa             	lea    edi,[edx-0x6]
c00186db:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c00186e0:	89 fb                	mov    ebx,edi
c00186e2:	80 fb 01             	cmp    bl,0x1
c00186e5:	0f 86 2c 01 00 00    	jbe    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186eb:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c00186f0:	80 fa 08             	cmp    dl,0x8
c00186f3:	0f 84 1e 01 00 00    	je     c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186f9:	89 d7                	mov    edi,edx
c00186fb:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018700:	83 e7 fb             	and    edi,0xfffffffb
c0018703:	89 fb                	mov    ebx,edi
c0018705:	80 fb 09             	cmp    bl,0x9
c0018708:	0f 84 09 01 00 00    	je     c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001870e:	31 c0                	xor    eax,eax
c0018710:	89 eb                	mov    ebx,ebp
c0018712:	0f b6 fb             	movzx  edi,bl
c0018715:	eb 30                	jmp    c0018747 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018717:	31 c0                	xor    eax,eax
c0018719:	80 f9 06             	cmp    cl,0x6
c001871c:	75 f2                	jne    c0018710 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001871e:	80 fa 0a             	cmp    dl,0xa
c0018721:	77 ed                	ja     c0018710 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018723:	bf de 05 00 00       	mov    edi,0x5de
c0018728:	0f a3 d7             	bt     edi,edx
c001872b:	73 e3                	jae    c0018710 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001872d:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018732:	e9 e0 00 00 00       	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018737:	39 c7                	cmp    edi,eax
c0018739:	0f 84 d3 00 00 00    	je     c0018812 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001873f:	40                   	inc    eax
c0018740:	3d d0 00 00 00       	cmp    eax,0xd0
c0018745:	74 09                	je     c0018750 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018747:	89 f3                	mov    ebx,esi
c0018749:	80 fb 0f             	cmp    bl,0xf
c001874c:	75 f1                	jne    c001873f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001874e:	eb e7                	jmp    c0018737 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018750:	80 f9 10             	cmp    cl,0x10
c0018753:	75 14                	jne    c0018769 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018755:	8d 42 fc             	lea    eax,[edx-0x4]
c0018758:	83 e0 fb             	and    eax,0xfffffffb
c001875b:	3c 02                	cmp    al,0x2
c001875d:	76 34                	jbe    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001875f:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c0018764:	80 fa 02             	cmp    dl,0x2
c0018767:	eb 24                	jmp    c001878d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018769:	80 f9 11             	cmp    cl,0x11
c001876c:	75 13                	jne    c0018781 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001876e:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c0018773:	80 fa 03             	cmp    dl,0x3
c0018776:	0f 85 9b 00 00 00    	jne    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001877c:	e9 91 00 00 00       	jmp    c0018812 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018781:	80 f9 12             	cmp    cl,0x12
c0018784:	75 14                	jne    c001879a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018786:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c001878b:	fe ca                	dec    dl
c001878d:	0f 85 84 00 00 00    	jne    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018793:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018798:	eb 7d                	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001879a:	80 f9 14             	cmp    cl,0x14
c001879d:	75 12                	jne    c00187b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001879f:	4a                   	dec    edx
c00187a0:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c00187a5:	80 fa 01             	cmp    dl,0x1
c00187a8:	77 6d                	ja     c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187aa:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c00187af:	eb 66                	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b1:	80 f9 15             	cmp    cl,0x15
c00187b4:	75 31                	jne    c00187e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00187b6:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c00187bb:	80 fa 01             	cmp    dl,0x1
c00187be:	74 57                	je     c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c0:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c00187c5:	80 fa 13             	cmp    dl,0x13
c00187c8:	76 0c                	jbe    c00187d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00187ca:	80 fa 30             	cmp    dl,0x30
c00187cd:	75 48                	jne    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187cf:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c00187d4:	eb 41                	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d6:	b9 04 00 09 00       	mov    ecx,0x90004
c00187db:	0f a3 d1             	bt     ecx,edx
c00187de:	73 37                	jae    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e0:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c00187e5:	eb 30                	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e7:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c00187ec:	80 f9 16             	cmp    cl,0x16
c00187ef:	75 26                	jne    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f1:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c00187f6:	84 d2                	test   dl,dl
c00187f8:	74 1d                	je     c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187fa:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c00187ff:	80 fa 30             	cmp    dl,0x30
c0018802:	75 13                	jne    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018804:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018809:	eb 0c                	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880b:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018810:	eb 05                	jmp    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018812:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018817:	5b                   	pop    ebx
c0018818:	5e                   	pop    esi
c0018819:	5f                   	pop    edi
c001881a:	5d                   	pop    ebp
c001881b:	c3                   	ret    

c001881c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001881c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018820:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018824:	80 f9 04             	cmp    cl,0x4
c0018827:	75 6b                	jne    c0018894 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018829:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c001882e:	80 fa 01             	cmp    dl,0x1
c0018831:	0f 86 92 02 00 00    	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018837:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c001883c:	80 fa 02             	cmp    dl,0x2
c001883f:	0f 84 84 02 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018845:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c001884a:	80 fa 03             	cmp    dl,0x3
c001884d:	0f 84 76 02 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018853:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018858:	80 fa 04             	cmp    dl,0x4
c001885b:	0f 84 68 02 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018861:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018866:	80 fa 05             	cmp    dl,0x5
c0018869:	0f 84 5a 02 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886f:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018874:	80 fa 07             	cmp    dl,0x7
c0018877:	0f 84 4c 02 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887d:	83 ea 08             	sub    edx,0x8
c0018880:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c0018885:	80 fa 01             	cmp    dl,0x1
c0018888:	0f 87 3b 02 00 00    	ja     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888e:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018893:	c3                   	ret    
c0018894:	80 f9 05             	cmp    cl,0x5
c0018897:	75 45                	jne    c00188de <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018899:	8d 4a ff             	lea    ecx,[edx-0x1]
c001889c:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c00188a1:	80 f9 02             	cmp    cl,0x2
c00188a4:	0f 86 1f 02 00 00    	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188aa:	80 fa 04             	cmp    dl,0x4
c00188ad:	0f 84 f3 01 00 00    	je     c0018aa6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00188b3:	80 fa 07             	cmp    dl,0x7
c00188b6:	0f 84 0d 02 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188bc:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c00188c1:	80 fa 08             	cmp    dl,0x8
c00188c4:	0f 84 ff 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ca:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c00188cf:	80 fa 09             	cmp    dl,0x9
c00188d2:	0f 85 f1 01 00 00    	jne    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d8:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c00188dd:	c3                   	ret    
c00188de:	80 f9 06             	cmp    cl,0x6
c00188e1:	0f 85 85 01 00 00    	jne    c0018a6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00188e7:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c00188ec:	80 fa 01             	cmp    dl,0x1
c00188ef:	0f 84 d4 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f5:	8d 42 fb             	lea    eax,[edx-0x5]
c00188f8:	3c 01                	cmp    al,0x1
c00188fa:	0f 86 ac 01 00 00    	jbe    c0018aac <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018900:	80 fa 03             	cmp    dl,0x3
c0018903:	0f 84 a3 01 00 00    	je     c0018aac <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018909:	8d 4a f9             	lea    ecx,[edx-0x7]
c001890c:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018911:	80 f9 01             	cmp    cl,0x1
c0018914:	0f 86 af 01 00 00    	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891a:	80 fa 09             	cmp    dl,0x9
c001891d:	0f 84 8f 01 00 00    	je     c0018ab2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018923:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018926:	80 f9 01             	cmp    cl,0x1
c0018929:	0f 86 9a 01 00 00    	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892f:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018934:	80 fa 0d             	cmp    dl,0xd
c0018937:	0f 84 8c 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893d:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018942:	80 fa 0e             	cmp    dl,0xe
c0018945:	0f 84 7e 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894b:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018950:	80 fa 0f             	cmp    dl,0xf
c0018953:	0f 84 70 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018959:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c001895e:	80 fa 15             	cmp    dl,0x15
c0018961:	0f 84 62 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018967:	8d 4a ea             	lea    ecx,[edx-0x16]
c001896a:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c001896f:	80 f9 01             	cmp    cl,0x1
c0018972:	0f 86 51 01 00 00    	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018978:	80 fa 1a             	cmp    dl,0x1a
c001897b:	0f 84 37 01 00 00    	je     c0018ab8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018981:	80 fa 1c             	cmp    dl,0x1c
c0018984:	0f 84 34 01 00 00    	je     c0018abe <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001898a:	80 fa 1d             	cmp    dl,0x1d
c001898d:	0f 84 36 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018993:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018998:	80 fa 25             	cmp    dl,0x25
c001899b:	0f 84 28 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a1:	8d 4a da             	lea    ecx,[edx-0x26]
c00189a4:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c00189a9:	80 f9 01             	cmp    cl,0x1
c00189ac:	0f 86 17 01 00 00    	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b2:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c00189b7:	80 fa 2a             	cmp    dl,0x2a
c00189ba:	0f 84 09 01 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c0:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c00189c5:	80 fa 2c             	cmp    dl,0x2c
c00189c8:	0f 84 fb 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ce:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c00189d3:	80 fa 2d             	cmp    dl,0x2d
c00189d6:	0f 84 ed 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189dc:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c00189e1:	80 fa 2e             	cmp    dl,0x2e
c00189e4:	0f 84 df 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ea:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c00189ef:	80 fa 2f             	cmp    dl,0x2f
c00189f2:	0f 84 d1 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f8:	8d 4a cb             	lea    ecx,[edx-0x35]
c00189fb:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018a00:	80 f9 01             	cmp    cl,0x1
c0018a03:	0f 86 c0 00 00 00    	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a09:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018a0e:	80 fa 37             	cmp    dl,0x37
c0018a11:	0f 84 b2 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a17:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018a1c:	80 fa 3a             	cmp    dl,0x3a
c0018a1f:	0f 84 a4 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018a2a:	80 fa 3c             	cmp    dl,0x3c
c0018a2d:	0f 84 96 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a33:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018a38:	80 fa 3d             	cmp    dl,0x3d
c0018a3b:	0f 84 88 00 00 00    	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a41:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018a46:	80 fa 3e             	cmp    dl,0x3e
c0018a49:	74 7e                	je     c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4b:	8d 42 bb             	lea    eax,[edx-0x45]
c0018a4e:	3c 01                	cmp    al,0x1
c0018a50:	76 72                	jbe    c0018ac4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a52:	80 fa 3f             	cmp    dl,0x3f
c0018a55:	74 6d                	je     c0018ac4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a57:	80 fa 4a             	cmp    dl,0x4a
c0018a5a:	74 0a                	je     c0018a66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018a5c:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c0018a61:	80 fa 4d             	cmp    dl,0x4d
c0018a64:	75 63                	jne    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a66:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018a6b:	c3                   	ret    
c0018a6c:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c0018a71:	80 f9 0b             	cmp    cl,0xb
c0018a74:	75 0a                	jne    c0018a80 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a76:	fe ca                	dec    dl
c0018a78:	75 4f                	jne    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7a:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018a7f:	c3                   	ret    
c0018a80:	80 f9 0f             	cmp    cl,0xf
c0018a83:	75 44                	jne    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a85:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018a8a:	80 fa 02             	cmp    dl,0x2
c0018a8d:	76 3a                	jbe    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a92:	3c 01                	cmp    al,0x1
c0018a94:	76 0a                	jbe    c0018aa0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a96:	b8 c2 c4 02 c0       	mov    eax,0xc002c4c2
c0018a9b:	80 fa 06             	cmp    dl,0x6
c0018a9e:	75 29                	jne    c0018ac9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa0:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018aa5:	c3                   	ret    
c0018aa6:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018aab:	c3                   	ret    
c0018aac:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018ab1:	c3                   	ret    
c0018ab2:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018ab7:	c3                   	ret    
c0018ab8:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018abd:	c3                   	ret    
c0018abe:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018ac3:	c3                   	ret    
c0018ac4:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018ac9:	c3                   	ret    

c0018aca <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018aca:	60                   	pusha  
c0018acb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ad7:	9c                   	pushf  
c0018ad8:	fa                   	cli    
c0018ad9:	0f 09                	wbinvd 
c0018adb:	0f 30                	wrmsr  
c0018add:	9d                   	popf   
c0018ade:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ae2:	89 02                	mov    DWORD PTR [edx],eax
c0018ae4:	61                   	popa   
c0018ae5:	c3                   	ret    

c0018ae6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018ae6:	60                   	pusha  
c0018ae7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018aeb:	9c                   	pushf  
c0018aec:	fa                   	cli    
c0018aed:	0f 09                	wbinvd 
c0018aef:	31 c0                	xor    eax,eax
c0018af1:	31 d2                	xor    edx,edx
c0018af3:	0f 32                	rdmsr  
c0018af5:	9d                   	popf   
c0018af6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018afa:	89 02                	mov    DWORD PTR [edx],eax
c0018afc:	61                   	popa   
c0018afd:	c3                   	ret    

c0018afe <CPU::AMD_K6_writeback(int, int, int)>:
c0018afe:	56                   	push   esi
c0018aff:	53                   	push   ebx
c0018b00:	83 ec 10             	sub    esp,0x10
c0018b03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b07:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018b0c:	75 5d                	jne    c0018b6b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b0e:	83 f8 08             	cmp    eax,0x8
c0018b11:	75 09                	jne    c0018b1c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018b13:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018b18:	7e 13                	jle    c0018b2d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b1a:	eb 30                	jmp    c0018b4c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b1c:	83 f8 06             	cmp    eax,0x6
c0018b1f:	7c 4a                	jl     c0018b6b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b21:	83 f8 07             	cmp    eax,0x7
c0018b24:	7e 07                	jle    c0018b2d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b26:	83 f8 09             	cmp    eax,0x9
c0018b29:	74 21                	je     c0018b4c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b2b:	eb 3e                	jmp    c0018b6b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b2d:	89 e6                	mov    esi,esp
c0018b2f:	8b 1d 28 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f128
c0018b35:	56                   	push   esi
c0018b36:	c1 eb 15             	shr    ebx,0x15
c0018b39:	68 82 00 00 c0       	push   0xc0000082
c0018b3e:	83 e3 7e             	and    ebx,0x7e
c0018b41:	e8 a0 ff ff ff       	call   c0018ae6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b46:	56                   	push   esi
c0018b47:	6a 00                	push   0x0
c0018b49:	53                   	push   ebx
c0018b4a:	eb 12                	jmp    c0018b5e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018b4c:	89 e3                	mov    ebx,esp
c0018b4e:	53                   	push   ebx
c0018b4f:	68 82 00 00 c0       	push   0xc0000082
c0018b54:	e8 8d ff ff ff       	call   c0018ae6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b59:	53                   	push   ebx
c0018b5a:	6a 00                	push   0x0
c0018b5c:	6a 00                	push   0x0
c0018b5e:	68 82 00 00 c0       	push   0xc0000082
c0018b63:	e8 62 ff ff ff       	call   c0018aca <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b68:	83 c4 18             	add    esp,0x18
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	5b                   	pop    ebx
c0018b6f:	5e                   	pop    esi
c0018b70:	c3                   	ret    
c0018b71:	90                   	nop

c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b72:	55                   	push   ebp
c0018b73:	57                   	push   edi
c0018b74:	56                   	push   esi
c0018b75:	53                   	push   ebx
c0018b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b7a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b7e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b82:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b86:	39 05 00 e6 02 c0    	cmp    DWORD PTR ds:0xc002e600,eax
c0018b8c:	75 23                	jne    c0018bb1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b8e:	a1 0c 1c 03 c0       	mov    eax,ds:0xc0031c0c
c0018b93:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b97:	89 06                	mov    DWORD PTR [esi],eax
c0018b99:	a1 08 1c 03 c0       	mov    eax,ds:0xc0031c08
c0018b9e:	89 07                	mov    DWORD PTR [edi],eax
c0018ba0:	a1 04 1c 03 c0       	mov    eax,ds:0xc0031c04
c0018ba5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ba8:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0018bad:	89 02                	mov    DWORD PTR [edx],eax
c0018baf:	eb 3f                	jmp    c0018bf0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018bb1:	31 c9                	xor    ecx,ecx
c0018bb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bb7:	0f a2                	cpuid  
c0018bb9:	89 06                	mov    DWORD PTR [esi],eax
c0018bbb:	89 1f                	mov    DWORD PTR [edi],ebx
c0018bbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018bc1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018bc4:	89 10                	mov    DWORD PTR [eax],edx
c0018bc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bca:	a3 00 e6 02 c0       	mov    ds:0xc002e600,eax
c0018bcf:	8b 06                	mov    eax,DWORD PTR [esi]
c0018bd1:	a3 0c 1c 03 c0       	mov    ds:0xc0031c0c,eax
c0018bd6:	8b 07                	mov    eax,DWORD PTR [edi]
c0018bd8:	a3 08 1c 03 c0       	mov    ds:0xc0031c08,eax
c0018bdd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018be0:	a3 04 1c 03 c0       	mov    ds:0xc0031c04,eax
c0018be5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018beb:	a3 00 1c 03 c0       	mov    ds:0xc0031c00,eax
c0018bf0:	5b                   	pop    ebx
c0018bf1:	5e                   	pop    esi
c0018bf2:	5f                   	pop    edi
c0018bf3:	5d                   	pop    ebp
c0018bf4:	c3                   	ret    
c0018bf5:	90                   	nop

c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>:
c0018bf6:	83 ec 10             	sub    esp,0x10
c0018bf9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bfd:	50                   	push   eax
c0018bfe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c02:	50                   	push   eax
c0018c03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c07:	50                   	push   eax
c0018c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c0c:	50                   	push   eax
c0018c0d:	6a 01                	push   0x1
c0018c0f:	e8 5e ff ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c18:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018c1c:	0f 95 c0             	setne  al
c0018c1f:	83 c4 24             	add    esp,0x24
c0018c22:	c3                   	ret    
c0018c23:	90                   	nop

c0018c24 <CPU::cpuidCheckECX(unsigned int)>:
c0018c24:	83 ec 10             	sub    esp,0x10
c0018c27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c2b:	50                   	push   eax
c0018c2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c30:	50                   	push   eax
c0018c31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c35:	50                   	push   eax
c0018c36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c3a:	50                   	push   eax
c0018c3b:	6a 01                	push   0x1
c0018c3d:	e8 30 ff ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c46:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c4a:	0f 95 c0             	setne  al
c0018c4d:	83 c4 24             	add    esp,0x24
c0018c50:	c3                   	ret    
c0018c51:	90                   	nop

c0018c52 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018c52:	83 ec 10             	sub    esp,0x10
c0018c55:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c59:	50                   	push   eax
c0018c5a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c5e:	50                   	push   eax
c0018c5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c63:	50                   	push   eax
c0018c64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c68:	50                   	push   eax
c0018c69:	6a 07                	push   0x7
c0018c6b:	e8 02 ff ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c74:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c78:	0f 95 c0             	setne  al
c0018c7b:	83 c4 24             	add    esp,0x24
c0018c7e:	c3                   	ret    
c0018c7f:	90                   	nop

c0018c80 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c80:	83 ec 10             	sub    esp,0x10
c0018c83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c87:	50                   	push   eax
c0018c88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c8c:	50                   	push   eax
c0018c8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c91:	50                   	push   eax
c0018c92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c96:	50                   	push   eax
c0018c97:	6a 07                	push   0x7
c0018c99:	e8 d4 fe ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ca2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ca6:	0f 95 c0             	setne  al
c0018ca9:	83 c4 24             	add    esp,0x24
c0018cac:	c3                   	ret    
c0018cad:	90                   	nop

c0018cae <CPU::CPU()>:
c0018cae:	83 ec 0c             	sub    esp,0xc
c0018cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb5:	83 ec 08             	sub    esp,0x8
c0018cb8:	68 c2 c4 02 c0       	push   0xc002c4c2
c0018cbd:	50                   	push   eax
c0018cbe:	e8 17 b4 ff ff       	call   c00140da <Device::Device(char const*)>
c0018cc3:	83 c4 10             	add    esp,0x10
c0018cc6:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c0018ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ccf:	89 10                	mov    DWORD PTR [eax],edx
c0018cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ce3:	05 78 01 00 00       	add    eax,0x178
c0018ce8:	83 ec 0c             	sub    esp,0xc
c0018ceb:	50                   	push   eax
c0018cec:	e8 b1 63 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018cf1:	83 c4 10             	add    esp,0x10
c0018cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cf8:	05 7c 09 00 00       	add    eax,0x97c
c0018cfd:	83 ec 0c             	sub    esp,0xc
c0018d00:	50                   	push   eax
c0018d01:	e8 06 66 ff ff       	call   c000f30c <IDT::IDT()>
c0018d06:	83 c4 10             	add    esp,0x10
c0018d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d0d:	05 7c 11 00 00       	add    eax,0x117c
c0018d12:	83 ec 0c             	sub    esp,0xc
c0018d15:	50                   	push   eax
c0018d16:	e8 ad 82 ff ff       	call   c0010fc8 <TSS::TSS()>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d22:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d2d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018d37:	90                   	nop
c0018d38:	83 c4 0c             	add    esp,0xc
c0018d3b:	c3                   	ret    

c0018d3c <CPU::displayFeatures()>:
c0018d3c:	53                   	push   ebx
c0018d3d:	83 ec 10             	sub    esp,0x10
c0018d40:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d44:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018d4a:	68 d0 c1 02 c0       	push   0xc002c1d0
c0018d4f:	e8 49 9d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018d54:	59                   	pop    ecx
c0018d55:	58                   	pop    eax
c0018d56:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018d5c:	50                   	push   eax
c0018d5d:	68 e1 c1 02 c0       	push   0xc002c1e1
c0018d62:	e8 36 9d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018d67:	58                   	pop    eax
c0018d68:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d6e:	5a                   	pop    edx
c0018d6f:	c1 e8 0e             	shr    eax,0xe
c0018d72:	0f b6 c0             	movzx  eax,al
c0018d75:	50                   	push   eax
c0018d76:	68 f2 c1 02 c0       	push   0xc002c1f2
c0018d7b:	e8 1d 9d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018d80:	59                   	pop    ecx
c0018d81:	58                   	pop    eax
c0018d82:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d88:	66 c1 e8 06          	shr    ax,0x6
c0018d8c:	0f b6 c0             	movzx  eax,al
c0018d8f:	50                   	push   eax
c0018d90:	68 03 c2 02 c0       	push   0xc002c203
c0018d95:	e8 03 9d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018d9a:	c7 04 24 b0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b0
c0018da1:	e8 f7 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018da6:	83 c4 10             	add    esp,0x10
c0018da9:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018dae:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018db5:	74 05                	je     c0018dbc <CPU::displayFeatures()+0x80>
c0018db7:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018dbc:	52                   	push   edx
c0018dbd:	52                   	push   edx
c0018dbe:	50                   	push   eax
c0018dbf:	68 14 c2 02 c0       	push   0xc002c214
c0018dc4:	e8 d4 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018dc9:	83 c4 10             	add    esp,0x10
c0018dcc:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018dd1:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018dd8:	78 05                	js     c0018ddf <CPU::displayFeatures()+0xa3>
c0018dda:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018ddf:	51                   	push   ecx
c0018de0:	51                   	push   ecx
c0018de1:	50                   	push   eax
c0018de2:	68 2b c2 02 c0       	push   0xc002c22b
c0018de7:	e8 b1 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018dec:	83 c4 10             	add    esp,0x10
c0018def:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018df4:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018dfb:	75 05                	jne    c0018e02 <CPU::displayFeatures()+0xc6>
c0018dfd:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018e02:	52                   	push   edx
c0018e03:	52                   	push   edx
c0018e04:	50                   	push   eax
c0018e05:	68 42 c2 02 c0       	push   0xc002c242
c0018e0a:	e8 8e 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018e0f:	83 c4 10             	add    esp,0x10
c0018e12:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018e17:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018e1e:	75 05                	jne    c0018e25 <CPU::displayFeatures()+0xe9>
c0018e20:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018e25:	51                   	push   ecx
c0018e26:	51                   	push   ecx
c0018e27:	50                   	push   eax
c0018e28:	68 59 c2 02 c0       	push   0xc002c259
c0018e2d:	e8 6b 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018e32:	83 c4 10             	add    esp,0x10
c0018e35:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018e3a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018e41:	75 05                	jne    c0018e48 <CPU::displayFeatures()+0x10c>
c0018e43:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018e48:	52                   	push   edx
c0018e49:	52                   	push   edx
c0018e4a:	50                   	push   eax
c0018e4b:	68 70 c2 02 c0       	push   0xc002c270
c0018e50:	e8 48 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018e55:	83 c4 10             	add    esp,0x10
c0018e58:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018e5d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e64:	75 05                	jne    c0018e6b <CPU::displayFeatures()+0x12f>
c0018e66:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018e6b:	51                   	push   ecx
c0018e6c:	51                   	push   ecx
c0018e6d:	50                   	push   eax
c0018e6e:	68 87 c2 02 c0       	push   0xc002c287
c0018e73:	e8 25 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018e78:	83 c4 10             	add    esp,0x10
c0018e7b:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018e80:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e87:	75 05                	jne    c0018e8e <CPU::displayFeatures()+0x152>
c0018e89:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018e8e:	52                   	push   edx
c0018e8f:	52                   	push   edx
c0018e90:	50                   	push   eax
c0018e91:	68 9e c2 02 c0       	push   0xc002c29e
c0018e96:	e8 02 9c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018e9b:	83 c4 10             	add    esp,0x10
c0018e9e:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018ea3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018eaa:	75 05                	jne    c0018eb1 <CPU::displayFeatures()+0x175>
c0018eac:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018eb1:	51                   	push   ecx
c0018eb2:	51                   	push   ecx
c0018eb3:	50                   	push   eax
c0018eb4:	68 b5 c2 02 c0       	push   0xc002c2b5
c0018eb9:	e8 df 9b ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018ebe:	83 c4 10             	add    esp,0x10
c0018ec1:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018ec6:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ecd:	75 05                	jne    c0018ed4 <CPU::displayFeatures()+0x198>
c0018ecf:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018ed4:	52                   	push   edx
c0018ed5:	52                   	push   edx
c0018ed6:	50                   	push   eax
c0018ed7:	68 cc c2 02 c0       	push   0xc002c2cc
c0018edc:	e8 bc 9b ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018ee1:	83 c4 10             	add    esp,0x10
c0018ee4:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018ee9:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018ef0:	75 05                	jne    c0018ef7 <CPU::displayFeatures()+0x1bb>
c0018ef2:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018ef7:	51                   	push   ecx
c0018ef8:	51                   	push   ecx
c0018ef9:	50                   	push   eax
c0018efa:	68 e3 c2 02 c0       	push   0xc002c2e3
c0018eff:	e8 99 9b ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018f04:	83 c4 10             	add    esp,0x10
c0018f07:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018f0c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018f13:	75 05                	jne    c0018f1a <CPU::displayFeatures()+0x1de>
c0018f15:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018f1a:	52                   	push   edx
c0018f1b:	52                   	push   edx
c0018f1c:	50                   	push   eax
c0018f1d:	68 fa c2 02 c0       	push   0xc002c2fa
c0018f22:	e8 76 9b ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018f27:	83 c4 10             	add    esp,0x10
c0018f2a:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018f2f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018f36:	75 05                	jne    c0018f3d <CPU::displayFeatures()+0x201>
c0018f38:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018f3d:	51                   	push   ecx
c0018f3e:	51                   	push   ecx
c0018f3f:	50                   	push   eax
c0018f40:	68 11 c3 02 c0       	push   0xc002c311
c0018f45:	e8 53 9b ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018f4a:	83 c4 10             	add    esp,0x10
c0018f4d:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018f52:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018f59:	75 05                	jne    c0018f60 <CPU::displayFeatures()+0x224>
c0018f5b:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018f60:	52                   	push   edx
c0018f61:	52                   	push   edx
c0018f62:	50                   	push   eax
c0018f63:	68 28 c3 02 c0       	push   0xc002c328
c0018f68:	e8 30 9b ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018f6d:	83 c4 10             	add    esp,0x10
c0018f70:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018f75:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018f7c:	78 05                	js     c0018f83 <CPU::displayFeatures()+0x247>
c0018f7e:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018f83:	51                   	push   ecx
c0018f84:	51                   	push   ecx
c0018f85:	50                   	push   eax
c0018f86:	68 3f c3 02 c0       	push   0xc002c33f
c0018f8b:	e8 0d 9b ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018f90:	83 c4 10             	add    esp,0x10
c0018f93:	b8 92 ab 02 c0       	mov    eax,0xc002ab92
c0018f98:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f9f:	75 05                	jne    c0018fa6 <CPU::displayFeatures()+0x26a>
c0018fa1:	b8 96 ab 02 c0       	mov    eax,0xc002ab96
c0018fa6:	52                   	push   edx
c0018fa7:	52                   	push   edx
c0018fa8:	50                   	push   eax
c0018fa9:	68 56 c3 02 c0       	push   0xc002c356
c0018fae:	e8 ea 9a ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0018fb3:	83 c4 18             	add    esp,0x18
c0018fb6:	5b                   	pop    ebx
c0018fb7:	c3                   	ret    

c0018fb8 <CPU::detectFeatures()>:
c0018fb8:	55                   	push   ebp
c0018fb9:	57                   	push   edi
c0018fba:	56                   	push   esi
c0018fbb:	53                   	push   ebx
c0018fbc:	83 ec 50             	sub    esp,0x50
c0018fbf:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018fc3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018fcd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018fd4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018fda:	6a 0d                	push   0xd
c0018fdc:	6a 00                	push   0x0
c0018fde:	55                   	push   ebp
c0018fdf:	e8 6c 77 fe ff       	call   c0000750 <memset>
c0018fe4:	83 c4 10             	add    esp,0x10
c0018fe7:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0018fec:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ff3:	0f 84 22 09 00 00    	je     c001991b <CPU::detectFeatures()+0x963>
c0018ff9:	83 ec 0c             	sub    esp,0xc
c0018ffc:	89 ef                	mov    edi,ebp
c0018ffe:	6a 10                	push   0x10
c0019000:	e8 f1 fb ff ff       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c0019005:	83 e0 01             	and    eax,0x1
c0019008:	8d 14 00             	lea    edx,[eax+eax*1]
c001900b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019011:	83 e0 fd             	and    eax,0xfffffffd
c0019014:	09 d0                	or     eax,edx
c0019016:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001901c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019023:	e8 ce fb ff ff       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c0019028:	83 e0 01             	and    eax,0x1
c001902b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019032:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019038:	83 e0 fb             	and    eax,0xfffffffb
c001903b:	09 d0                	or     eax,edx
c001903d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019043:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001904a:	e8 a7 fb ff ff       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c001904f:	83 e0 01             	and    eax,0x1
c0019052:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019059:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001905f:	83 e0 f7             	and    eax,0xfffffff7
c0019062:	09 d0                	or     eax,edx
c0019064:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001906a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019071:	e8 80 fb ff ff       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c0019076:	83 e0 01             	and    eax,0x1
c0019079:	c1 e0 04             	shl    eax,0x4
c001907c:	88 c2                	mov    dl,al
c001907e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019084:	83 e0 ef             	and    eax,0xffffffef
c0019087:	09 d0                	or     eax,edx
c0019089:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001908f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019096:	e8 5b fb ff ff       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c001909b:	83 e0 01             	and    eax,0x1
c001909e:	c1 e0 05             	shl    eax,0x5
c00190a1:	88 c2                	mov    dl,al
c00190a3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190a9:	83 e0 df             	and    eax,0xffffffdf
c00190ac:	09 d0                	or     eax,edx
c00190ae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190b4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00190bb:	e8 36 fb ff ff       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c00190c0:	83 e0 01             	and    eax,0x1
c00190c3:	8d 14 00             	lea    edx,[eax+eax*1]
c00190c6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190cc:	83 e0 fd             	and    eax,0xfffffffd
c00190cf:	09 d0                	or     eax,edx
c00190d1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190d7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00190de:	e8 13 fb ff ff       	call   c0018bf6 <CPU::cpuidCheckEDX(unsigned int)>
c00190e3:	83 e0 01             	and    eax,0x1
c00190e6:	c1 e0 06             	shl    eax,0x6
c00190e9:	88 c2                	mov    dl,al
c00190eb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190f1:	83 e0 bf             	and    eax,0xffffffbf
c00190f4:	09 d0                	or     eax,edx
c00190f6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190fc:	58                   	pop    eax
c00190fd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019101:	50                   	push   eax
c0019102:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019106:	50                   	push   eax
c0019107:	8d 74 24 28          	lea    esi,[esp+0x28]
c001910b:	56                   	push   esi
c001910c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019110:	50                   	push   eax
c0019111:	6a 00                	push   0x0
c0019113:	e8 5a fa ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019118:	b8 04 00 00 00       	mov    eax,0x4
c001911d:	89 c1                	mov    ecx,eax
c001911f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019121:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0019127:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001912b:	89 c1                	mov    ecx,eax
c001912d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001912f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0019135:	8d 74 24 38          	lea    esi,[esp+0x38]
c0019139:	89 c1                	mov    ecx,eax
c001913b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001913d:	83 c4 18             	add    esp,0x18
c0019140:	68 6d c3 02 c0       	push   0xc002c36d
c0019145:	55                   	push   ebp
c0019146:	e8 4d 77 fe ff       	call   c0000898 <strcmp>
c001914b:	83 c4 10             	add    esp,0x10
c001914e:	85 c0                	test   eax,eax
c0019150:	75 0f                	jne    c0019161 <CPU::detectFeatures()+0x1a9>
c0019152:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001915c:	e9 22 02 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c0019161:	50                   	push   eax
c0019162:	50                   	push   eax
c0019163:	68 7a c3 02 c0       	push   0xc002c37a
c0019168:	55                   	push   ebp
c0019169:	e8 2a 77 fe ff       	call   c0000898 <strcmp>
c001916e:	83 c4 10             	add    esp,0x10
c0019171:	85 c0                	test   eax,eax
c0019173:	74 dd                	je     c0019152 <CPU::detectFeatures()+0x19a>
c0019175:	50                   	push   eax
c0019176:	50                   	push   eax
c0019177:	68 87 c3 02 c0       	push   0xc002c387
c001917c:	55                   	push   ebp
c001917d:	e8 16 77 fe ff       	call   c0000898 <strcmp>
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	85 c0                	test   eax,eax
c0019187:	74 2a                	je     c00191b3 <CPU::detectFeatures()+0x1fb>
c0019189:	50                   	push   eax
c001918a:	50                   	push   eax
c001918b:	68 94 c3 02 c0       	push   0xc002c394
c0019190:	55                   	push   ebp
c0019191:	e8 02 77 fe ff       	call   c0000898 <strcmp>
c0019196:	83 c4 10             	add    esp,0x10
c0019199:	85 c0                	test   eax,eax
c001919b:	74 16                	je     c00191b3 <CPU::detectFeatures()+0x1fb>
c001919d:	50                   	push   eax
c001919e:	50                   	push   eax
c001919f:	68 a1 c3 02 c0       	push   0xc002c3a1
c00191a4:	55                   	push   ebp
c00191a5:	e8 ee 76 fe ff       	call   c0000898 <strcmp>
c00191aa:	83 c4 10             	add    esp,0x10
c00191ad:	85 c0                	test   eax,eax
c00191af:	74 48                	je     c00191f9 <CPU::detectFeatures()+0x241>
c00191b1:	eb 0f                	jmp    c00191c2 <CPU::detectFeatures()+0x20a>
c00191b3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00191bd:	e9 c1 01 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c00191c2:	50                   	push   eax
c00191c3:	50                   	push   eax
c00191c4:	68 ae c3 02 c0       	push   0xc002c3ae
c00191c9:	55                   	push   ebp
c00191ca:	e8 c9 76 fe ff       	call   c0000898 <strcmp>
c00191cf:	83 c4 10             	add    esp,0x10
c00191d2:	85 c0                	test   eax,eax
c00191d4:	74 23                	je     c00191f9 <CPU::detectFeatures()+0x241>
c00191d6:	57                   	push   edi
c00191d7:	57                   	push   edi
c00191d8:	68 bb c3 02 c0       	push   0xc002c3bb
c00191dd:	55                   	push   ebp
c00191de:	e8 b5 76 fe ff       	call   c0000898 <strcmp>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	85 c0                	test   eax,eax
c00191e8:	75 1e                	jne    c0019208 <CPU::detectFeatures()+0x250>
c00191ea:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191f4:	e9 8a 01 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c00191f9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019203:	e9 7b 01 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c0019208:	56                   	push   esi
c0019209:	56                   	push   esi
c001920a:	68 c8 c3 02 c0       	push   0xc002c3c8
c001920f:	55                   	push   ebp
c0019210:	e8 83 76 fe ff       	call   c0000898 <strcmp>
c0019215:	83 c4 10             	add    esp,0x10
c0019218:	85 c0                	test   eax,eax
c001921a:	75 0f                	jne    c001922b <CPU::detectFeatures()+0x273>
c001921c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019226:	e9 58 01 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c001922b:	51                   	push   ecx
c001922c:	51                   	push   ecx
c001922d:	68 87 c3 02 c0       	push   0xc002c387
c0019232:	55                   	push   ebp
c0019233:	e8 60 76 fe ff       	call   c0000898 <strcmp>
c0019238:	83 c4 10             	add    esp,0x10
c001923b:	85 c0                	test   eax,eax
c001923d:	75 0f                	jne    c001924e <CPU::detectFeatures()+0x296>
c001923f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019249:	e9 35 01 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c001924e:	52                   	push   edx
c001924f:	52                   	push   edx
c0019250:	68 d5 c3 02 c0       	push   0xc002c3d5
c0019255:	55                   	push   ebp
c0019256:	e8 3d 76 fe ff       	call   c0000898 <strcmp>
c001925b:	83 c4 10             	add    esp,0x10
c001925e:	85 c0                	test   eax,eax
c0019260:	75 0f                	jne    c0019271 <CPU::detectFeatures()+0x2b9>
c0019262:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001926c:	e9 12 01 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c0019271:	50                   	push   eax
c0019272:	50                   	push   eax
c0019273:	68 e2 c3 02 c0       	push   0xc002c3e2
c0019278:	55                   	push   ebp
c0019279:	e8 1a 76 fe ff       	call   c0000898 <strcmp>
c001927e:	83 c4 10             	add    esp,0x10
c0019281:	85 c0                	test   eax,eax
c0019283:	75 0f                	jne    c0019294 <CPU::detectFeatures()+0x2dc>
c0019285:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001928f:	e9 ef 00 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c0019294:	50                   	push   eax
c0019295:	50                   	push   eax
c0019296:	68 ef c3 02 c0       	push   0xc002c3ef
c001929b:	55                   	push   ebp
c001929c:	e8 f7 75 fe ff       	call   c0000898 <strcmp>
c00192a1:	83 c4 10             	add    esp,0x10
c00192a4:	85 c0                	test   eax,eax
c00192a6:	75 0f                	jne    c00192b7 <CPU::detectFeatures()+0x2ff>
c00192a8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00192b2:	e9 cc 00 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c00192b7:	50                   	push   eax
c00192b8:	50                   	push   eax
c00192b9:	68 fc c3 02 c0       	push   0xc002c3fc
c00192be:	55                   	push   ebp
c00192bf:	e8 d4 75 fe ff       	call   c0000898 <strcmp>
c00192c4:	83 c4 10             	add    esp,0x10
c00192c7:	85 c0                	test   eax,eax
c00192c9:	75 0f                	jne    c00192da <CPU::detectFeatures()+0x322>
c00192cb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00192d5:	e9 a9 00 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c00192da:	50                   	push   eax
c00192db:	50                   	push   eax
c00192dc:	68 09 c4 02 c0       	push   0xc002c409
c00192e1:	55                   	push   ebp
c00192e2:	e8 b1 75 fe ff       	call   c0000898 <strcmp>
c00192e7:	83 c4 10             	add    esp,0x10
c00192ea:	85 c0                	test   eax,eax
c00192ec:	75 0f                	jne    c00192fd <CPU::detectFeatures()+0x345>
c00192ee:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00192f8:	e9 86 00 00 00       	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c00192fd:	50                   	push   eax
c00192fe:	50                   	push   eax
c00192ff:	68 16 c4 02 c0       	push   0xc002c416
c0019304:	55                   	push   ebp
c0019305:	e8 8e 75 fe ff       	call   c0000898 <strcmp>
c001930a:	83 c4 10             	add    esp,0x10
c001930d:	85 c0                	test   eax,eax
c001930f:	75 0c                	jne    c001931d <CPU::detectFeatures()+0x365>
c0019311:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001931b:	eb 66                	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c001931d:	50                   	push   eax
c001931e:	50                   	push   eax
c001931f:	68 23 c4 02 c0       	push   0xc002c423
c0019324:	55                   	push   ebp
c0019325:	e8 6e 75 fe ff       	call   c0000898 <strcmp>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	85 c0                	test   eax,eax
c001932f:	75 0c                	jne    c001933d <CPU::detectFeatures()+0x385>
c0019331:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001933b:	eb 46                	jmp    c0019383 <CPU::detectFeatures()+0x3cb>
c001933d:	57                   	push   edi
c001933e:	57                   	push   edi
c001933f:	68 30 c4 02 c0       	push   0xc002c430
c0019344:	55                   	push   ebp
c0019345:	e8 4e 75 fe ff       	call   c0000898 <strcmp>
c001934a:	83 c4 10             	add    esp,0x10
c001934d:	85 c0                	test   eax,eax
c001934f:	74 e0                	je     c0019331 <CPU::detectFeatures()+0x379>
c0019351:	56                   	push   esi
c0019352:	56                   	push   esi
c0019353:	68 3d c4 02 c0       	push   0xc002c43d
c0019358:	55                   	push   ebp
c0019359:	e8 3a 75 fe ff       	call   c0000898 <strcmp>
c001935e:	83 c4 10             	add    esp,0x10
c0019361:	85 c0                	test   eax,eax
c0019363:	74 cc                	je     c0019331 <CPU::detectFeatures()+0x379>
c0019365:	51                   	push   ecx
c0019366:	51                   	push   ecx
c0019367:	68 4a c4 02 c0       	push   0xc002c44a
c001936c:	55                   	push   ebp
c001936d:	e8 26 75 fe ff       	call   c0000898 <strcmp>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	85 c0                	test   eax,eax
c0019377:	74 b8                	je     c0019331 <CPU::detectFeatures()+0x379>
c0019379:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019383:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019388:	0f 86 be 00 00 00    	jbe    c001944c <CPU::detectFeatures()+0x494>
c001938e:	83 ec 0c             	sub    esp,0xc
c0019391:	68 80 00 00 00       	push   0x80
c0019396:	e8 b7 f8 ff ff       	call   c0018c52 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001939b:	83 e0 01             	and    eax,0x1
c001939e:	c1 e0 06             	shl    eax,0x6
c00193a1:	88 c2                	mov    dl,al
c00193a3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193a9:	83 e0 bf             	and    eax,0xffffffbf
c00193ac:	09 d0                	or     eax,edx
c00193ae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193b4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00193bb:	e8 92 f8 ff ff       	call   c0018c52 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193c0:	83 e0 01             	and    eax,0x1
c00193c3:	c1 e0 04             	shl    eax,0x4
c00193c6:	88 c2                	mov    dl,al
c00193c8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193ce:	83 e0 ef             	and    eax,0xffffffef
c00193d1:	09 d0                	or     eax,edx
c00193d3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193d9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00193e0:	e8 6d f8 ff ff       	call   c0018c52 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193e5:	c1 e0 07             	shl    eax,0x7
c00193e8:	88 c2                	mov    dl,al
c00193ea:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193f0:	83 e0 7f             	and    eax,0x7f
c00193f3:	09 d0                	or     eax,edx
c00193f5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193fb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019402:	e8 79 f8 ff ff       	call   c0018c80 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019407:	83 e0 01             	and    eax,0x1
c001940a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019411:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019417:	83 e0 f7             	and    eax,0xfffffff7
c001941a:	09 d0                	or     eax,edx
c001941c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019422:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019429:	e8 52 f8 ff ff       	call   c0018c80 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001942e:	83 c4 10             	add    esp,0x10
c0019431:	83 e0 01             	and    eax,0x1
c0019434:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001943b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019441:	83 e0 fb             	and    eax,0xfffffffb
c0019444:	09 d0                	or     eax,edx
c0019446:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001944c:	83 ec 0c             	sub    esp,0xc
c001944f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019453:	50                   	push   eax
c0019454:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019458:	50                   	push   eax
c0019459:	8d 74 24 28          	lea    esi,[esp+0x28]
c001945d:	56                   	push   esi
c001945e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019462:	50                   	push   eax
c0019463:	6a 01                	push   0x1
c0019465:	e8 08 f7 ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001946a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001946e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019474:	88 ca                	mov    dl,cl
c0019476:	83 e0 f0             	and    eax,0xfffffff0
c0019479:	83 e2 0f             	and    edx,0xf
c001947c:	09 d0                	or     eax,edx
c001947e:	88 ca                	mov    dl,cl
c0019480:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019486:	c0 ea 04             	shr    dl,0x4
c0019489:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001948d:	0f b6 c2             	movzx  eax,dl
c0019490:	83 c4 20             	add    esp,0x20
c0019493:	c1 e0 06             	shl    eax,0x6
c0019496:	89 c7                	mov    edi,eax
c0019498:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001949e:	66 25 3f c0          	and    ax,0xc03f
c00194a2:	09 f8                	or     eax,edi
c00194a4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194ab:	89 c8                	mov    eax,ecx
c00194ad:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00194b4:	c1 e8 08             	shr    eax,0x8
c00194b7:	83 e5 3f             	and    ebp,0x3f
c00194ba:	83 e0 0f             	and    eax,0xf
c00194bd:	89 c7                	mov    edi,eax
c00194bf:	c1 e7 06             	shl    edi,0x6
c00194c2:	09 ef                	or     edi,ebp
c00194c4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00194cb:	89 fa                	mov    edx,edi
c00194cd:	83 e5 c0             	and    ebp,0xffffffc0
c00194d0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00194d6:	88 c2                	mov    dl,al
c00194d8:	c0 ea 02             	shr    dl,0x2
c00194db:	89 d7                	mov    edi,edx
c00194dd:	09 ef                	or     edi,ebp
c00194df:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00194e5:	89 fa                	mov    edx,edi
c00194e7:	83 e5 cf             	and    ebp,0xffffffcf
c00194ea:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00194f0:	89 cf                	mov    edi,ecx
c00194f2:	c1 ef 0c             	shr    edi,0xc
c00194f5:	83 e7 03             	and    edi,0x3
c00194f8:	c1 e7 04             	shl    edi,0x4
c00194fb:	09 ef                	or     edi,ebp
c00194fd:	3c 06                	cmp    al,0x6
c00194ff:	89 fa                	mov    edx,edi
c0019501:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019507:	74 04                	je     c001950d <CPU::detectFeatures()+0x555>
c0019509:	3c 0f                	cmp    al,0xf
c001950b:	75 5c                	jne    c0019569 <CPU::detectFeatures()+0x5b1>
c001950d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019511:	89 cf                	mov    edi,ecx
c0019513:	c1 ef 10             	shr    edi,0x10
c0019516:	c1 e7 04             	shl    edi,0x4
c0019519:	09 fa                	or     edx,edi
c001951b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019521:	0f b6 d2             	movzx  edx,dl
c0019524:	66 81 e7 3f c0       	and    di,0xc03f
c0019529:	c1 e2 06             	shl    edx,0x6
c001952c:	09 fa                	or     edx,edi
c001952e:	3c 0f                	cmp    al,0xf
c0019530:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019537:	75 30                	jne    c0019569 <CPU::detectFeatures()+0x5b1>
c0019539:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001953f:	c1 e9 14             	shr    ecx,0x14
c0019542:	83 e0 3f             	and    eax,0x3f
c0019545:	83 c1 0f             	add    ecx,0xf
c0019548:	88 ca                	mov    dl,cl
c001954a:	c0 e9 02             	shr    cl,0x2
c001954d:	c1 e2 06             	shl    edx,0x6
c0019550:	09 d0                	or     eax,edx
c0019552:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019558:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001955e:	83 e0 c0             	and    eax,0xffffffc0
c0019561:	09 c1                	or     ecx,eax
c0019563:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019569:	83 ec 0c             	sub    esp,0xc
c001956c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019573:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019577:	50                   	push   eax
c0019578:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001957c:	55                   	push   ebp
c001957d:	56                   	push   esi
c001957e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019582:	57                   	push   edi
c0019583:	68 00 00 00 80       	push   0x80000000
c0019588:	e8 e5 f5 ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001958d:	83 c4 20             	add    esp,0x20
c0019590:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019598:	76 22                	jbe    c00195bc <CPU::detectFeatures()+0x604>
c001959a:	83 ec 0c             	sub    esp,0xc
c001959d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195a1:	50                   	push   eax
c00195a2:	55                   	push   ebp
c00195a3:	56                   	push   esi
c00195a4:	57                   	push   edi
c00195a5:	68 01 00 00 80       	push   0x80000001
c00195aa:	e8 c3 f5 ff ff       	call   c0018b72 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195af:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00195b9:	83 c4 20             	add    esp,0x20
c00195bc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00195c2:	83 f8 01             	cmp    eax,0x1
c00195c5:	75 6f                	jne    c0019636 <CPU::detectFeatures()+0x67e>
c00195c7:	51                   	push   ecx
c00195c8:	51                   	push   ecx
c00195c9:	68 56 c4 02 c0       	push   0xc002c456
c00195ce:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195d2:	56                   	push   esi
c00195d3:	e8 34 72 fe ff       	call   c000080c <strcpy>
c00195d8:	5f                   	pop    edi
c00195d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195df:	5d                   	pop    ebp
c00195e0:	66 c1 e8 06          	shr    ax,0x6
c00195e4:	0f b6 c0             	movzx  eax,al
c00195e7:	50                   	push   eax
c00195e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ee:	c1 e8 0e             	shr    eax,0xe
c00195f1:	0f b6 c0             	movzx  eax,al
c00195f4:	50                   	push   eax
c00195f5:	e8 22 f2 ff ff       	call   c001881c <CPU::lookupIntelName(unsigned char, unsigned char)>
c00195fa:	5a                   	pop    edx
c00195fb:	59                   	pop    ecx
c00195fc:	50                   	push   eax
c00195fd:	56                   	push   esi
c00195fe:	e8 49 73 fe ff       	call   c000094c <strcat>
c0019603:	5f                   	pop    edi
c0019604:	5d                   	pop    ebp
c0019605:	56                   	push   esi
c0019606:	53                   	push   ebx
c0019607:	e8 c0 aa ff ff       	call   c00140cc <Device::setName(char const*)>
c001960c:	58                   	pop    eax
c001960d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019613:	5a                   	pop    edx
c0019614:	68 5d c4 02 c0       	push   0xc002c45d
c0019619:	50                   	push   eax
c001961a:	e8 79 72 fe ff       	call   c0000898 <strcmp>
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	85 c0                	test   eax,eax
c0019624:	0f 85 71 03 00 00    	jne    c001999b <CPU::detectFeatures()+0x9e3>
c001962a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019631:	e9 65 03 00 00       	jmp    c001999b <CPU::detectFeatures()+0x9e3>
c0019636:	83 f8 02             	cmp    eax,0x2
c0019639:	0f 85 b5 00 00 00    	jne    c00196f4 <CPU::detectFeatures()+0x73c>
c001963f:	57                   	push   edi
c0019640:	57                   	push   edi
c0019641:	68 6f c4 02 c0       	push   0xc002c46f
c0019646:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001964a:	56                   	push   esi
c001964b:	e8 bc 71 fe ff       	call   c000080c <strcpy>
c0019650:	5d                   	pop    ebp
c0019651:	58                   	pop    eax
c0019652:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019658:	66 c1 e8 06          	shr    ax,0x6
c001965c:	0f b6 c0             	movzx  eax,al
c001965f:	50                   	push   eax
c0019660:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019666:	c1 e8 0e             	shr    eax,0xe
c0019669:	0f b6 c0             	movzx  eax,al
c001966c:	50                   	push   eax
c001966d:	e8 16 f0 ff ff       	call   c0018688 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019672:	5a                   	pop    edx
c0019673:	59                   	pop    ecx
c0019674:	50                   	push   eax
c0019675:	56                   	push   esi
c0019676:	e8 d1 72 fe ff       	call   c000094c <strcat>
c001967b:	5f                   	pop    edi
c001967c:	5d                   	pop    ebp
c001967d:	56                   	push   esi
c001967e:	53                   	push   ebx
c001967f:	e8 48 aa ff ff       	call   c00140cc <Device::setName(char const*)>
c0019684:	58                   	pop    eax
c0019685:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001968b:	5a                   	pop    edx
c001968c:	68 74 c4 02 c0       	push   0xc002c474
c0019691:	50                   	push   eax
c0019692:	e8 01 72 fe ff       	call   c0000898 <strcmp>
c0019697:	83 c4 10             	add    esp,0x10
c001969a:	85 c0                	test   eax,eax
c001969c:	75 20                	jne    c00196be <CPU::detectFeatures()+0x706>
c001969e:	8b 15 e8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e8
c00196a4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00196aa:	a8 01                	test   al,0x1
c00196ac:	74 10                	je     c00196be <CPU::detectFeatures()+0x706>
c00196ae:	83 e0 fe             	and    eax,0xfffffffe
c00196b1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00196b7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00196be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196c4:	c1 e8 0e             	shr    eax,0xe
c00196c7:	3c 05                	cmp    al,0x5
c00196c9:	0f 85 cc 02 00 00    	jne    c001999b <CPU::detectFeatures()+0x9e3>
c00196cf:	56                   	push   esi
c00196d0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00196d6:	83 e0 0f             	and    eax,0xf
c00196d9:	50                   	push   eax
c00196da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196e0:	66 c1 e8 06          	shr    ax,0x6
c00196e4:	0f b6 c0             	movzx  eax,al
c00196e7:	50                   	push   eax
c00196e8:	6a 05                	push   0x5
c00196ea:	e8 0f f4 ff ff       	call   c0018afe <CPU::AMD_K6_writeback(int, int, int)>
c00196ef:	e9 1f 02 00 00       	jmp    c0019913 <CPU::detectFeatures()+0x95b>
c00196f4:	8d 50 fd             	lea    edx,[eax-0x3]
c00196f7:	83 fa 01             	cmp    edx,0x1
c00196fa:	76 09                	jbe    c0019705 <CPU::detectFeatures()+0x74d>
c00196fc:	83 f8 06             	cmp    eax,0x6
c00196ff:	0f 85 91 01 00 00    	jne    c0019896 <CPU::detectFeatures()+0x8de>
c0019705:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001970b:	c1 ea 0e             	shr    edx,0xe
c001970e:	80 fa 05             	cmp    dl,0x5
c0019711:	75 7b                	jne    c001978e <CPU::detectFeatures()+0x7d6>
c0019713:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019719:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001971e:	66 81 fa 00 01       	cmp    dx,0x100
c0019723:	75 0c                	jne    c0019731 <CPU::detectFeatures()+0x779>
c0019725:	51                   	push   ecx
c0019726:	51                   	push   ecx
c0019727:	68 7b c4 02 c0       	push   0xc002c47b
c001972c:	e9 dc 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c0019731:	66 81 fa 00 02       	cmp    dx,0x200
c0019736:	75 0c                	jne    c0019744 <CPU::detectFeatures()+0x78c>
c0019738:	52                   	push   edx
c0019739:	52                   	push   edx
c001973a:	68 8e c4 02 c0       	push   0xc002c48e
c001973f:	e9 c9 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c0019744:	66 81 fa 40 02       	cmp    dx,0x240
c0019749:	75 0c                	jne    c0019757 <CPU::detectFeatures()+0x79f>
c001974b:	50                   	push   eax
c001974c:	50                   	push   eax
c001974d:	68 a0 c4 02 c0       	push   0xc002c4a0
c0019752:	e9 b6 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c0019757:	83 f8 06             	cmp    eax,0x6
c001975a:	75 0c                	jne    c0019768 <CPU::detectFeatures()+0x7b0>
c001975c:	50                   	push   eax
c001975d:	50                   	push   eax
c001975e:	68 b2 c4 02 c0       	push   0xc002c4b2
c0019763:	e9 a5 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c0019768:	83 f8 04             	cmp    eax,0x4
c001976b:	75 0c                	jne    c0019779 <CPU::detectFeatures()+0x7c1>
c001976d:	50                   	push   eax
c001976e:	50                   	push   eax
c001976f:	68 be c4 02 c0       	push   0xc002c4be
c0019774:	e9 94 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c0019779:	83 f8 03             	cmp    eax,0x3
c001977c:	0f 85 19 02 00 00    	jne    c001999b <CPU::detectFeatures()+0x9e3>
c0019782:	50                   	push   eax
c0019783:	50                   	push   eax
c0019784:	68 c6 c4 02 c0       	push   0xc002c4c6
c0019789:	e9 7f 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c001978e:	80 fa 06             	cmp    dl,0x6
c0019791:	0f 85 db 00 00 00    	jne    c0019872 <CPU::detectFeatures()+0x8ba>
c0019797:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001979d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197a2:	66 81 fa 80 01       	cmp    dx,0x180
c00197a7:	75 0c                	jne    c00197b5 <CPU::detectFeatures()+0x7fd>
c00197a9:	50                   	push   eax
c00197aa:	50                   	push   eax
c00197ab:	68 d1 c4 02 c0       	push   0xc002c4d1
c00197b0:	e9 58 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c00197b5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00197bb:	66 f7 c1 80 ff       	test   cx,0xff80
c00197c0:	75 0c                	jne    c00197ce <CPU::detectFeatures()+0x816>
c00197c2:	50                   	push   eax
c00197c3:	50                   	push   eax
c00197c4:	68 e1 c4 02 c0       	push   0xc002c4e1
c00197c9:	e9 3f 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c00197ce:	66 81 fa 40 02       	cmp    dx,0x240
c00197d3:	75 0c                	jne    c00197e1 <CPU::detectFeatures()+0x829>
c00197d5:	55                   	push   ebp
c00197d6:	55                   	push   ebp
c00197d7:	68 e8 c4 02 c0       	push   0xc002c4e8
c00197dc:	e9 2c 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c00197e1:	66 81 fa 80 02       	cmp    dx,0x280
c00197e6:	75 0c                	jne    c00197f4 <CPU::detectFeatures()+0x83c>
c00197e8:	57                   	push   edi
c00197e9:	57                   	push   edi
c00197ea:	68 f1 c4 02 c0       	push   0xc002c4f1
c00197ef:	e9 19 01 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c00197f4:	66 81 fa 40 03       	cmp    dx,0x340
c00197f9:	74 ed                	je     c00197e8 <CPU::detectFeatures()+0x830>
c00197fb:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019800:	75 0c                	jne    c001980e <CPU::detectFeatures()+0x856>
c0019802:	56                   	push   esi
c0019803:	56                   	push   esi
c0019804:	68 f8 c4 02 c0       	push   0xc002c4f8
c0019809:	e9 ff 00 00 00       	jmp    c001990d <CPU::detectFeatures()+0x955>
c001980e:	83 f8 06             	cmp    eax,0x6
c0019811:	0f 84 45 ff ff ff    	je     c001975c <CPU::detectFeatures()+0x7a4>
c0019817:	83 f8 04             	cmp    eax,0x4
c001981a:	0f 84 4d ff ff ff    	je     c001976d <CPU::detectFeatures()+0x7b5>
c0019820:	83 f8 03             	cmp    eax,0x3
c0019823:	0f 85 72 01 00 00    	jne    c001999b <CPU::detectFeatures()+0x9e3>
c0019829:	51                   	push   ecx
c001982a:	51                   	push   ecx
c001982b:	68 01 c5 02 c0       	push   0xc002c501
c0019830:	53                   	push   ebx
c0019831:	e8 96 a8 ff ff       	call   c00140cc <Device::setName(char const*)>
c0019836:	b1 c1                	mov    cl,0xc1
c0019838:	88 c8                	mov    al,cl
c001983a:	e6 22                	out    0x22,al
c001983c:	e4 23                	in     al,0x23
c001983e:	88 c2                	mov    dl,al
c0019840:	88 c8                	mov    al,cl
c0019842:	e6 22                	out    0x22,al
c0019844:	88 d0                	mov    al,dl
c0019846:	83 c8 10             	or     eax,0x10
c0019849:	e6 23                	out    0x23,al
c001984b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019852:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019855:	89 d0                	mov    eax,edx
c0019857:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001985d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019861:	40                   	inc    eax
c0019862:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019868:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001986d:	e9 a1 00 00 00       	jmp    c0019913 <CPU::detectFeatures()+0x95b>
c0019872:	83 f8 06             	cmp    eax,0x6
c0019875:	0f 84 e1 fe ff ff    	je     c001975c <CPU::detectFeatures()+0x7a4>
c001987b:	83 f8 04             	cmp    eax,0x4
c001987e:	0f 84 e9 fe ff ff    	je     c001976d <CPU::detectFeatures()+0x7b5>
c0019884:	83 f8 03             	cmp    eax,0x3
c0019887:	0f 85 0e 01 00 00    	jne    c001999b <CPU::detectFeatures()+0x9e3>
c001988d:	52                   	push   edx
c001988e:	52                   	push   edx
c001988f:	68 0c c5 02 c0       	push   0xc002c50c
c0019894:	eb 77                	jmp    c001990d <CPU::detectFeatures()+0x955>
c0019896:	83 f8 07             	cmp    eax,0x7
c0019899:	75 09                	jne    c00198a4 <CPU::detectFeatures()+0x8ec>
c001989b:	50                   	push   eax
c001989c:	50                   	push   eax
c001989d:	68 16 c5 02 c0       	push   0xc002c516
c00198a2:	eb 69                	jmp    c001990d <CPU::detectFeatures()+0x955>
c00198a4:	83 f8 0a             	cmp    eax,0xa
c00198a7:	75 09                	jne    c00198b2 <CPU::detectFeatures()+0x8fa>
c00198a9:	50                   	push   eax
c00198aa:	50                   	push   eax
c00198ab:	68 21 c5 02 c0       	push   0xc002c521
c00198b0:	eb 5b                	jmp    c001990d <CPU::detectFeatures()+0x955>
c00198b2:	83 f8 0b             	cmp    eax,0xb
c00198b5:	75 09                	jne    c00198c0 <CPU::detectFeatures()+0x908>
c00198b7:	50                   	push   eax
c00198b8:	50                   	push   eax
c00198b9:	68 29 c5 02 c0       	push   0xc002c529
c00198be:	eb 4d                	jmp    c001990d <CPU::detectFeatures()+0x955>
c00198c0:	83 f8 08             	cmp    eax,0x8
c00198c3:	75 09                	jne    c00198ce <CPU::detectFeatures()+0x916>
c00198c5:	50                   	push   eax
c00198c6:	50                   	push   eax
c00198c7:	68 32 c5 02 c0       	push   0xc002c532
c00198cc:	eb 3f                	jmp    c001990d <CPU::detectFeatures()+0x955>
c00198ce:	83 f8 09             	cmp    eax,0x9
c00198d1:	75 09                	jne    c00198dc <CPU::detectFeatures()+0x924>
c00198d3:	50                   	push   eax
c00198d4:	50                   	push   eax
c00198d5:	68 3a c5 02 c0       	push   0xc002c53a
c00198da:	eb 31                	jmp    c001990d <CPU::detectFeatures()+0x955>
c00198dc:	83 f8 05             	cmp    eax,0x5
c00198df:	75 09                	jne    c00198ea <CPU::detectFeatures()+0x932>
c00198e1:	50                   	push   eax
c00198e2:	50                   	push   eax
c00198e3:	68 42 c5 02 c0       	push   0xc002c542
c00198e8:	eb 23                	jmp    c001990d <CPU::detectFeatures()+0x955>
c00198ea:	83 f8 0c             	cmp    eax,0xc
c00198ed:	75 09                	jne    c00198f8 <CPU::detectFeatures()+0x940>
c00198ef:	55                   	push   ebp
c00198f0:	55                   	push   ebp
c00198f1:	68 50 c5 02 c0       	push   0xc002c550
c00198f6:	eb 15                	jmp    c001990d <CPU::detectFeatures()+0x955>
c00198f8:	83 f8 0d             	cmp    eax,0xd
c00198fb:	75 09                	jne    c0019906 <CPU::detectFeatures()+0x94e>
c00198fd:	57                   	push   edi
c00198fe:	57                   	push   edi
c00198ff:	68 5b c5 02 c0       	push   0xc002c55b
c0019904:	eb 07                	jmp    c001990d <CPU::detectFeatures()+0x955>
c0019906:	56                   	push   esi
c0019907:	56                   	push   esi
c0019908:	68 6f c5 02 c0       	push   0xc002c56f
c001990d:	53                   	push   ebx
c001990e:	e8 b9 a7 ff ff       	call   c00140cc <Device::setName(char const*)>
c0019913:	83 c4 10             	add    esp,0x10
c0019916:	e9 80 00 00 00       	jmp    c001999b <CPU::detectFeatures()+0x9e3>
c001991b:	51                   	push   ecx
c001991c:	51                   	push   ecx
c001991d:	68 bb c3 02 c0       	push   0xc002c3bb
c0019922:	55                   	push   ebp
c0019923:	e8 e4 6e fe ff       	call   c000080c <strcpy>
c0019928:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019932:	e8 77 69 fe ff       	call   c00002ae <is486>
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	85 c0                	test   eax,eax
c001993c:	74 2b                	je     c0019969 <CPU::detectFeatures()+0x9b1>
c001993e:	52                   	push   edx
c001993f:	52                   	push   edx
c0019940:	68 7b c5 02 c0       	push   0xc002c57b
c0019945:	53                   	push   ebx
c0019946:	e8 81 a7 ff ff       	call   c00140cc <Device::setName(char const*)>
c001994b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019952:	0f 20 c0             	mov    eax,cr0
c0019955:	83 e0 14             	and    eax,0x14
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	83 f8 04             	cmp    eax,0x4
c001995e:	75 1f                	jne    c001997f <CPU::detectFeatures()+0x9c7>
c0019960:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019967:	eb 32                	jmp    c001999b <CPU::detectFeatures()+0x9e3>
c0019969:	50                   	push   eax
c001996a:	50                   	push   eax
c001996b:	68 86 c5 02 c0       	push   0xc002c586
c0019970:	53                   	push   ebx
c0019971:	e8 56 a7 ff ff       	call   c00140cc <Device::setName(char const*)>
c0019976:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001997d:	eb d3                	jmp    c0019952 <CPU::detectFeatures()+0x99a>
c001997f:	e8 05 69 fe ff       	call   c0000289 <hasLegacyFPU>
c0019984:	83 e0 01             	and    eax,0x1
c0019987:	8d 14 00             	lea    edx,[eax+eax*1]
c001998a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019990:	83 e0 fd             	and    eax,0xfffffffd
c0019993:	09 d0                	or     eax,edx
c0019995:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001999b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00199a2:	83 c4 4c             	add    esp,0x4c
c00199a5:	5b                   	pop    ebx
c00199a6:	5e                   	pop    esi
c00199a7:	5f                   	pop    edi
c00199a8:	5d                   	pop    ebp
c00199a9:	c3                   	ret    

c00199aa <CPU::setupSMEP()>:
c00199aa:	0f 20 e0             	mov    eax,cr4
c00199ad:	0d 00 00 10 00       	or     eax,0x100000
c00199b2:	0f 22 e0             	mov    cr4,eax
c00199b5:	c3                   	ret    

c00199b6 <CPU::setupUMIP()>:
c00199b6:	0f 20 e0             	mov    eax,cr4
c00199b9:	80 cc 08             	or     ah,0x8
c00199bc:	0f 22 e0             	mov    cr4,eax
c00199bf:	c3                   	ret    

c00199c0 <CPU::setupTSC()>:
c00199c0:	0f 20 e0             	mov    eax,cr4
c00199c3:	83 c8 04             	or     eax,0x4
c00199c6:	0f 22 e0             	mov    cr4,eax
c00199c9:	c3                   	ret    

c00199ca <CPU::setupLargePages()>:
c00199ca:	0f 20 e0             	mov    eax,cr4
c00199cd:	83 c8 10             	or     eax,0x10
c00199d0:	0f 22 e0             	mov    cr4,eax
c00199d3:	c3                   	ret    

c00199d4 <CPU::setupPAT()>:
c00199d4:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00199d9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00199e0:	74 2c                	je     c0019a0e <CPU::setupPAT()+0x3a>
c00199e2:	53                   	push   ebx
c00199e3:	83 ec 10             	sub    esp,0x10
c00199e6:	68 77 02 00 00       	push   0x277
c00199eb:	50                   	push   eax
c00199ec:	e8 41 54 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00199f1:	83 e2 f8             	and    edx,0xfffffff8
c00199f4:	83 ca 01             	or     edx,0x1
c00199f7:	52                   	push   edx
c00199f8:	50                   	push   eax
c00199f9:	68 77 02 00 00       	push   0x277
c00199fe:	ff 35 e8 f0 02 c0    	push   DWORD PTR ds:0xc002f0e8
c0019a04:	e8 55 54 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019a09:	83 c4 28             	add    esp,0x28
c0019a0c:	5b                   	pop    ebx
c0019a0d:	c3                   	ret    
c0019a0e:	c3                   	ret    
c0019a0f:	90                   	nop

c0019a10 <CPU::setupMTRR()>:
c0019a10:	c3                   	ret    
c0019a11:	90                   	nop

c0019a12 <CPU::setupGlobalPages()>:
c0019a12:	0f 20 e0             	mov    eax,cr4
c0019a15:	0c 80                	or     al,0x80
c0019a17:	0f 22 e0             	mov    cr4,eax
c0019a1a:	c3                   	ret    
c0019a1b:	90                   	nop

c0019a1c <CPU::allowUsermodeDataAccess()>:
c0019a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a20:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a27:	74 03                	je     c0019a2c <CPU::allowUsermodeDataAccess()+0x10>
c0019a29:	0f 01 cb             	stac   
c0019a2c:	c3                   	ret    
c0019a2d:	90                   	nop

c0019a2e <CPU::prohibitUsermodeDataAccess()>:
c0019a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a32:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a39:	74 03                	je     c0019a3e <CPU::prohibitUsermodeDataAccess()+0x10>
c0019a3b:	0f 01 ca             	clac   
c0019a3e:	c3                   	ret    
c0019a3f:	90                   	nop

c0019a40 <CPU::setupSMAP()>:
c0019a40:	0f 20 e0             	mov    eax,cr4
c0019a43:	0d 00 00 20 00       	or     eax,0x200000
c0019a48:	0f 22 e0             	mov    cr4,eax
c0019a4b:	eb e1                	jmp    c0019a2e <CPU::prohibitUsermodeDataAccess()>
c0019a4d:	90                   	nop

c0019a4e <CPU::setupFeatures()>:
c0019a4e:	83 ec 0c             	sub    esp,0xc
c0019a51:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a55:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019a5c:	74 07                	je     c0019a65 <CPU::setupFeatures()+0x17>
c0019a5e:	52                   	push   edx
c0019a5f:	e8 46 ff ff ff       	call   c00199aa <CPU::setupSMEP()>
c0019a64:	58                   	pop    eax
c0019a65:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a6c:	74 07                	je     c0019a75 <CPU::setupFeatures()+0x27>
c0019a6e:	52                   	push   edx
c0019a6f:	e8 cc ff ff ff       	call   c0019a40 <CPU::setupSMAP()>
c0019a74:	58                   	pop    eax
c0019a75:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019a7c:	74 07                	je     c0019a85 <CPU::setupFeatures()+0x37>
c0019a7e:	52                   	push   edx
c0019a7f:	e8 32 ff ff ff       	call   c00199b6 <CPU::setupUMIP()>
c0019a84:	58                   	pop    eax
c0019a85:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a8c:	74 07                	je     c0019a95 <CPU::setupFeatures()+0x47>
c0019a8e:	52                   	push   edx
c0019a8f:	e8 2c ff ff ff       	call   c00199c0 <CPU::setupTSC()>
c0019a94:	58                   	pop    eax
c0019a95:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a9c:	74 07                	je     c0019aa5 <CPU::setupFeatures()+0x57>
c0019a9e:	52                   	push   edx
c0019a9f:	e8 26 ff ff ff       	call   c00199ca <CPU::setupLargePages()>
c0019aa4:	59                   	pop    ecx
c0019aa5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019aac:	74 07                	je     c0019ab5 <CPU::setupFeatures()+0x67>
c0019aae:	52                   	push   edx
c0019aaf:	e8 5e ff ff ff       	call   c0019a12 <CPU::setupGlobalPages()>
c0019ab4:	58                   	pop    eax
c0019ab5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019abc:	74 0c                	je     c0019aca <CPU::setupFeatures()+0x7c>
c0019abe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019ac2:	83 c4 0c             	add    esp,0xc
c0019ac5:	e9 0a ff ff ff       	jmp    c00199d4 <CPU::setupPAT()>
c0019aca:	83 c4 0c             	add    esp,0xc
c0019acd:	c3                   	ret    

c0019ace <CPU::open(int, int, void*)>:
c0019ace:	57                   	push   edi
c0019acf:	56                   	push   esi
c0019ad0:	53                   	push   ebx
c0019ad1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ad5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ad9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019adf:	83 ec 0c             	sub    esp,0xc
c0019ae2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019ae8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019aee:	50                   	push   eax
c0019aef:	e8 2a 56 ff ff       	call   c000f11e <GDT::setup()>
c0019af4:	83 c4 0c             	add    esp,0xc
c0019af7:	6a 00                	push   0x0
c0019af9:	68 ef be ad de       	push   0xdeadbeef
c0019afe:	57                   	push   edi
c0019aff:	e8 04 75 ff ff       	call   c0011008 <TSS::setup(unsigned long, unsigned long)>
c0019b04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b07:	e8 dc 74 ff ff       	call   c0010fe8 <TSS::flush()>
c0019b0c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019b12:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b15:	e8 68 58 ff ff       	call   c000f382 <IDT::setup()>
c0019b1a:	b8 00 04 00 00       	mov    eax,0x400
c0019b1f:	0f 23 f8             	mov    db7,eax
c0019b22:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019b2c:	e8 3b 60 ff ff       	call   c000fb6c <Phys::allocatePage()>
c0019b31:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019b37:	89 30                	mov    DWORD PTR [eax],esi
c0019b39:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019b3f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019b42:	58                   	pop    eax
c0019b43:	5a                   	pop    edx
c0019b44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b4e:	e8 55 86 ff ff       	call   c00121a8 <VAS::setCPUSpecific(unsigned long)>
c0019b53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b56:	e8 5d f4 ff ff       	call   c0018fb8 <CPU::detectFeatures()>
c0019b5b:	e8 9e b9 ff ff       	call   c00154fe <setupInterruptController()>
c0019b60:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b66:	a1 00 f1 02 c0       	mov    eax,ds:0xc002f100
c0019b6b:	83 e0 10             	and    eax,0x10
c0019b6e:	83 f8 01             	cmp    eax,0x1
c0019b71:	19 c0                	sbb    eax,eax
c0019b73:	83 e0 46             	and    eax,0x46
c0019b76:	83 c0 1e             	add    eax,0x1e
c0019b79:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b7c:	e8 d4 cf ff ff       	call   c0016b55 <setupTimer(int)>
c0019b81:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b8a:	e8 bf fe ff ff       	call   c0019a4e <CPU::setupFeatures()>
c0019b8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b92:	e8 a5 f1 ff ff       	call   c0018d3c <CPU::displayFeatures()>
c0019b97:	83 c4 10             	add    esp,0x10
c0019b9a:	31 c0                	xor    eax,eax
c0019b9c:	5b                   	pop    ebx
c0019b9d:	5e                   	pop    esi
c0019b9e:	5f                   	pop    edi
c0019b9f:	c3                   	ret    

c0019ba0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ba0:	57                   	push   edi
c0019ba1:	56                   	push   esi
c0019ba2:	53                   	push   ebx
c0019ba3:	51                   	push   ecx
c0019ba4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ba8:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019bab:	0f 02 c0             	lar    eax,ax
c0019bae:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019bb1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bb5:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019bb8:	88 ca                	mov    dl,cl
c0019bba:	c0 ea 06             	shr    dl,0x6
c0019bbd:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019bc1:	89 ca                	mov    edx,ecx
c0019bc3:	66 c1 ea 03          	shr    dx,0x3
c0019bc7:	83 e2 07             	and    edx,0x7
c0019bca:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019bcf:	88 17                	mov    BYTE PTR [edi],dl
c0019bd1:	0f 84 a6 01 00 00    	je     c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019bd7:	83 e1 07             	and    ecx,0x7
c0019bda:	80 f9 04             	cmp    cl,0x4
c0019bdd:	0f 84 98 00 00 00    	je     c0019c7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019be3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019be8:	0f 95 c0             	setne  al
c0019beb:	80 f9 05             	cmp    cl,0x5
c0019bee:	0f 95 c2             	setne  dl
c0019bf1:	08 c2                	or     dl,al
c0019bf3:	74 79                	je     c0019c6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019bf5:	84 c9                	test   cl,cl
c0019bf7:	75 05                	jne    c0019bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019bf9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019bfc:	eb 3c                	jmp    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bfe:	80 f9 01             	cmp    cl,0x1
c0019c01:	75 05                	jne    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019c03:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c06:	eb 32                	jmp    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c08:	80 f9 02             	cmp    cl,0x2
c0019c0b:	75 05                	jne    c0019c12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019c0d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c10:	eb 28                	jmp    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c12:	31 c0                	xor    eax,eax
c0019c14:	80 f9 03             	cmp    cl,0x3
c0019c17:	75 05                	jne    c0019c1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019c19:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c1c:	eb 1c                	jmp    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c1e:	80 f9 05             	cmp    cl,0x5
c0019c21:	75 05                	jne    c0019c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019c23:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c26:	eb 12                	jmp    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c28:	80 f9 06             	cmp    cl,0x6
c0019c2b:	75 05                	jne    c0019c32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019c2d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c30:	eb 08                	jmp    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c32:	80 f9 07             	cmp    cl,0x7
c0019c35:	75 03                	jne    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c37:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c3a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c3f:	75 10                	jne    c0019c51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019c41:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019c45:	b9 03 00 00 00       	mov    ecx,0x3
c0019c4a:	01 d0                	add    eax,edx
c0019c4c:	e9 37 01 00 00       	jmp    c0019d88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c51:	b9 02 00 00 00       	mov    ecx,0x2
c0019c56:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019c5b:	0f 85 27 01 00 00    	jne    c0019d88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c61:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019c64:	b9 06 00 00 00       	mov    ecx,0x6
c0019c69:	e9 1a 01 00 00       	jmp    c0019d88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c6e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c71:	b9 06 00 00 00       	mov    ecx,0x6
c0019c76:	e9 0f 01 00 00       	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c7b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019c7e:	88 ca                	mov    dl,cl
c0019c80:	c0 ea 06             	shr    dl,0x6
c0019c83:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c87:	89 ca                	mov    edx,ecx
c0019c89:	66 c1 ea 03          	shr    dx,0x3
c0019c8d:	83 e2 07             	and    edx,0x7
c0019c90:	80 e1 07             	and    cl,0x7
c0019c93:	75 05                	jne    c0019c9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c95:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019c98:	eb 4c                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c9a:	80 f9 01             	cmp    cl,0x1
c0019c9d:	75 05                	jne    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c9f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019ca2:	eb 42                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ca4:	80 f9 02             	cmp    cl,0x2
c0019ca7:	75 05                	jne    c0019cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019ca9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019cac:	eb 38                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cae:	80 f9 03             	cmp    cl,0x3
c0019cb1:	75 05                	jne    c0019cb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019cb3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019cb6:	eb 2e                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cb8:	80 f9 04             	cmp    cl,0x4
c0019cbb:	75 12                	jne    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019cbd:	f6 c4 60             	test   ah,0x60
c0019cc0:	75 08                	jne    c0019cca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019cc2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019cc5:	8d 78 14             	lea    edi,[eax+0x14]
c0019cc8:	eb 1c                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cca:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ccd:	eb 17                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ccf:	80 f9 05             	cmp    cl,0x5
c0019cd2:	75 05                	jne    c0019cd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019cd4:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019cd7:	eb 0d                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cd9:	80 f9 06             	cmp    cl,0x6
c0019cdc:	75 05                	jne    c0019ce3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019cde:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ce1:	eb 03                	jmp    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ce3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ce6:	84 d2                	test   dl,dl
c0019ce8:	75 05                	jne    c0019cef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019cea:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ced:	eb 3c                	jmp    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cef:	80 fa 01             	cmp    dl,0x1
c0019cf2:	75 05                	jne    c0019cf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019cf4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cf7:	eb 32                	jmp    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cf9:	80 fa 02             	cmp    dl,0x2
c0019cfc:	75 05                	jne    c0019d03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019cfe:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d01:	eb 28                	jmp    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d03:	80 fa 03             	cmp    dl,0x3
c0019d06:	75 05                	jne    c0019d0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019d08:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d0b:	eb 1e                	jmp    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d0d:	31 c0                	xor    eax,eax
c0019d0f:	80 fa 04             	cmp    dl,0x4
c0019d12:	74 17                	je     c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d14:	80 fa 05             	cmp    dl,0x5
c0019d17:	75 05                	jne    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019d19:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d1c:	eb 0d                	jmp    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d1e:	80 fa 06             	cmp    dl,0x6
c0019d21:	75 05                	jne    c0019d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019d23:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d26:	eb 03                	jmp    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d28:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d2b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d30:	0f 94 c2             	sete   dl
c0019d33:	80 f9 05             	cmp    cl,0x5
c0019d36:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019d3a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019d3f:	d3 e0                	shl    eax,cl
c0019d41:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019d45:	74 0a                	je     c0019d51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019d47:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d4a:	b9 07 00 00 00       	mov    ecx,0x7
c0019d4f:	eb 37                	jmp    c0019d88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d51:	01 f8                	add    eax,edi
c0019d53:	b9 03 00 00 00       	mov    ecx,0x3
c0019d58:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d5d:	74 2b                	je     c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d5f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d64:	75 0d                	jne    c0019d73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d66:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d6a:	01 c8                	add    eax,ecx
c0019d6c:	b9 04 00 00 00       	mov    ecx,0x4
c0019d71:	eb 17                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d73:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d76:	b9 07 00 00 00       	mov    ecx,0x7
c0019d7b:	eb 0d                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d7d:	b9 02 00 00 00       	mov    ecx,0x2
c0019d82:	b2 01                	mov    dl,0x1
c0019d84:	31 c0                	xor    eax,eax
c0019d86:	eb 02                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d88:	31 d2                	xor    edx,edx
c0019d8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d8e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d90:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d94:	88 11                	mov    BYTE PTR [ecx],dl
c0019d96:	5a                   	pop    edx
c0019d97:	5b                   	pop    ebx
c0019d98:	5e                   	pop    esi
c0019d99:	5f                   	pop    edi
c0019d9a:	c3                   	ret    

c0019d9b <Krnl::smpEntry()>:
c0019d9b:	eb fe                	jmp    c0019d9b <Krnl::smpEntry()>

c0019d9d <Krnl::startCPU(int)>:
c0019d9d:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0019da2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019da9:	0f 84 36 01 00 00    	je     c0019ee5 <Krnl::startCPU(int)+0x148>
c0019daf:	53                   	push   ebx
c0019db0:	83 ec 10             	sub    esp,0x10
c0019db3:	fa                   	cli    
c0019db4:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c0019dba:	6a 1b                	push   0x1b
c0019dbc:	ff 35 e8 f0 02 c0    	push   DWORD PTR ds:0xc002f0e8
c0019dc2:	e8 6b 50 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019dc7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019dcc:	89 c3                	mov    ebx,eax
c0019dce:	58                   	pop    eax
c0019dcf:	5a                   	pop    edx
c0019dd0:	53                   	push   ebx
c0019dd1:	68 c0 c5 02 c0       	push   0xc002c5c0
c0019dd6:	e8 c2 8c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0019ddb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019de9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019df3:	c1 e0 18             	shl    eax,0x18
c0019df6:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019dfc:	83 c4 10             	add    esp,0x10
c0019dff:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019e05:	09 c2                	or     edx,eax
c0019e07:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019e0d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019e13:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e19:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e1f:	80 cd c5             	or     ch,0xc5
c0019e22:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e28:	f3 90                	pause  
c0019e2a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e2c:	0f ba e1 0c          	bt     ecx,0xc
c0019e30:	72 f6                	jb     c0019e28 <Krnl::startCPU(int)+0x8b>
c0019e32:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e38:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e3e:	09 c1                	or     ecx,eax
c0019e40:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e46:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e4c:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e52:	80 cd 85             	or     ch,0x85
c0019e55:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e5b:	f3 90                	pause  
c0019e5d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e5f:	0f ba e1 0c          	bt     ecx,0xc
c0019e63:	72 f6                	jb     c0019e5b <Krnl::startCPU(int)+0xbe>
c0019e65:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e6f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e75:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e7b:	09 c1                	or     ecx,eax
c0019e7d:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e83:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e89:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e8f:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e95:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e9b:	f3 90                	pause  
c0019e9d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e9f:	0f ba e1 0c          	bt     ecx,0xc
c0019ea3:	72 f6                	jb     c0019e9b <Krnl::startCPU(int)+0xfe>
c0019ea5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019eaf:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019eb5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ebb:	09 c8                	or     eax,ecx
c0019ebd:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019ec3:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019ec9:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ece:	0d 02 06 00 00       	or     eax,0x602
c0019ed3:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019ed9:	f3 90                	pause  
c0019edb:	8b 02                	mov    eax,DWORD PTR [edx]
c0019edd:	0f ba e0 0c          	bt     eax,0xc
c0019ee1:	72 f6                	jb     c0019ed9 <Krnl::startCPU(int)+0x13c>
c0019ee3:	eb fe                	jmp    c0019ee3 <Krnl::startCPU(int)+0x146>
c0019ee5:	c3                   	ret    

c0019ee6 <Krnl::startCPUs()>:
c0019ee6:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0019eeb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019ef1:	88 c2                	mov    dl,al
c0019ef3:	83 e2 0a             	and    edx,0xa
c0019ef6:	80 fa 0a             	cmp    dl,0xa
c0019ef9:	75 09                	jne    c0019f04 <Krnl::startCPUs()+0x1e>
c0019efb:	a8 01                	test   al,0x1
c0019efd:	74 05                	je     c0019f04 <Krnl::startCPUs()+0x1e>
c0019eff:	e9 97 62 fe ff       	jmp    c000019b <prepareTramp>
c0019f04:	c3                   	ret    
c0019f05:	90                   	nop

c0019f06 <EnvVarContainer::getEnv(char const*)>:
c0019f06:	57                   	push   edi
c0019f07:	56                   	push   esi
c0019f08:	53                   	push   ebx
c0019f09:	31 db                	xor    ebx,ebx
c0019f0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f0f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019f11:	7e 2b                	jle    c0019f3e <EnvVarContainer::getEnv(char const*)+0x38>
c0019f13:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019f1a:	50                   	push   eax
c0019f1b:	50                   	push   eax
c0019f1c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f1f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019f22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f26:	e8 6d 69 fe ff       	call   c0000898 <strcmp>
c0019f2b:	83 c4 10             	add    esp,0x10
c0019f2e:	85 c0                	test   eax,eax
c0019f30:	75 09                	jne    c0019f3b <EnvVarContainer::getEnv(char const*)+0x35>
c0019f32:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f35:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019f39:	eb 05                	jmp    c0019f40 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019f3b:	43                   	inc    ebx
c0019f3c:	eb d1                	jmp    c0019f0f <EnvVarContainer::getEnv(char const*)+0x9>
c0019f3e:	31 c0                	xor    eax,eax
c0019f40:	5b                   	pop    ebx
c0019f41:	5e                   	pop    esi
c0019f42:	5f                   	pop    edi
c0019f43:	c3                   	ret    

c0019f44 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019f44:	55                   	push   ebp
c0019f45:	57                   	push   edi
c0019f46:	56                   	push   esi
c0019f47:	53                   	push   ebx
c0019f48:	83 ec 28             	sub    esp,0x28
c0019f4b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019f4f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019f53:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019f57:	56                   	push   esi
c0019f58:	e8 0f 68 fe ff       	call   c000076c <strlen>
c0019f5d:	40                   	inc    eax
c0019f5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f61:	e8 26 59 ff ff       	call   c000f88c <malloc>
c0019f66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f6d:	e8 fa 67 fe ff       	call   c000076c <strlen>
c0019f72:	40                   	inc    eax
c0019f73:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f76:	e8 11 59 ff ff       	call   c000f88c <malloc>
c0019f7b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f82:	e8 e5 67 fe ff       	call   c000076c <strlen>
c0019f87:	83 c4 0c             	add    esp,0xc
c0019f8a:	40                   	inc    eax
c0019f8b:	50                   	push   eax
c0019f8c:	6a 00                	push   0x0
c0019f8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f92:	e8 b9 67 fe ff       	call   c0000750 <memset>
c0019f97:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f9a:	e8 cd 67 fe ff       	call   c000076c <strlen>
c0019f9f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019fa3:	8d 48 01             	lea    ecx,[eax+0x1]
c0019fa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fab:	89 de                	mov    esi,ebx
c0019fad:	e8 ba 67 fe ff       	call   c000076c <strlen>
c0019fb2:	83 c4 0c             	add    esp,0xc
c0019fb5:	40                   	inc    eax
c0019fb6:	50                   	push   eax
c0019fb7:	6a 00                	push   0x0
c0019fb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fbd:	e8 8e 67 fe ff       	call   c0000750 <memset>
c0019fc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fc5:	e8 a2 67 fe ff       	call   c000076c <strlen>
c0019fca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fce:	8d 48 01             	lea    ecx,[eax+0x1]
c0019fd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fd6:	40                   	inc    eax
c0019fd7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019fda:	c1 e0 03             	shl    eax,0x3
c0019fdd:	5a                   	pop    edx
c0019fde:	59                   	pop    ecx
c0019fdf:	50                   	push   eax
c0019fe0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fe3:	e8 90 58 ff ff       	call   c000f878 <realloc>
c0019fe8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019fec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019ff2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ff6:	b9 08 00 00 00       	mov    ecx,0x8
c0019ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ffd:	83 c4 2c             	add    esp,0x2c
c001a000:	5b                   	pop    ebx
c001a001:	5e                   	pop    esi
c001a002:	5f                   	pop    edi
c001a003:	5d                   	pop    ebp
c001a004:	c3                   	ret    
c001a005:	90                   	nop

c001a006 <EnvVarContainer::deleteEnv(char const*)>:
c001a006:	c3                   	ret    
c001a007:	90                   	nop

c001a008 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a008:	55                   	push   ebp
c001a009:	57                   	push   edi
c001a00a:	56                   	push   esi
c001a00b:	53                   	push   ebx
c001a00c:	81 ec 38 01 00 00    	sub    esp,0x138
c001a012:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a019:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a020:	68 14 01 00 00       	push   0x114
c001a025:	e8 62 58 ff ff       	call   c000f88c <malloc>
c001a02a:	83 c4 0c             	add    esp,0xc
c001a02d:	89 c5                	mov    ebp,eax
c001a02f:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a032:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a039:	50                   	push   eax
c001a03a:	e8 bd 8f ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001a03f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a042:	e8 87 92 ff ff       	call   c00132ce <File::exists()>
c001a047:	83 c4 10             	add    esp,0x10
c001a04a:	84 c0                	test   al,al
c001a04c:	75 32                	jne    c001a080 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a04e:	51                   	push   ecx
c001a04f:	51                   	push   ecx
c001a050:	6a 12                	push   0x12
c001a052:	55                   	push   ebp
c001a053:	e8 08 90 ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001a058:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a05b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a05e:	89 34 24             	mov    DWORD PTR [esp],esi
c001a061:	e8 06 67 fe ff       	call   c000076c <strlen>
c001a066:	5a                   	pop    edx
c001a067:	31 d2                	xor    edx,edx
c001a069:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a06d:	51                   	push   ecx
c001a06e:	56                   	push   esi
c001a06f:	52                   	push   edx
c001a070:	50                   	push   eax
c001a071:	55                   	push   ebp
c001a072:	ff d7                	call   edi
c001a074:	83 c4 14             	add    esp,0x14
c001a077:	55                   	push   ebp
c001a078:	e8 41 90 ff ff       	call   c00130be <File::close()>
c001a07d:	83 c4 10             	add    esp,0x10
c001a080:	31 f6                	xor    esi,esi
c001a082:	50                   	push   eax
c001a083:	68 00 01 00 00       	push   0x100
c001a088:	6a 00                	push   0x0
c001a08a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a08e:	50                   	push   eax
c001a08f:	e8 bc 66 fe ff       	call   c0000750 <memset>
c001a094:	58                   	pop    eax
c001a095:	5a                   	pop    edx
c001a096:	6a 01                	push   0x1
c001a098:	55                   	push   ebp
c001a099:	e8 c2 8f ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001a09e:	83 c4 10             	add    esp,0x10
c001a0a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0a9:	83 ec 0c             	sub    esp,0xc
c001a0ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a0af:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a0b3:	51                   	push   ecx
c001a0b4:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a0b8:	52                   	push   edx
c001a0b9:	6a 00                	push   0x0
c001a0bb:	6a 01                	push   0x1
c001a0bd:	55                   	push   ebp
c001a0be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a0c1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a0c5:	83 c4 20             	add    esp,0x20
c001a0c8:	3c 0d                	cmp    al,0xd
c001a0ca:	0f 84 16 01 00 00    	je     c001a1e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a0d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a0d5:	0f 84 fc 00 00 00    	je     c001a1d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0db:	3c 0a                	cmp    al,0xa
c001a0dd:	74 13                	je     c001a0f2 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a0df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0e4:	74 0c                	je     c001a0f2 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a0e6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a0ec:	0f 8e e5 00 00 00    	jle    c001a1d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0f6:	83 ec 0c             	sub    esp,0xc
c001a0f9:	8d 78 01             	lea    edi,[eax+0x1]
c001a0fc:	57                   	push   edi
c001a0fd:	e8 8a 57 ff ff       	call   c000f88c <malloc>
c001a102:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a106:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a10a:	8d 56 04             	lea    edx,[esi+0x4]
c001a10d:	89 14 24             	mov    DWORD PTR [esp],edx
c001a110:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a114:	e8 73 57 ff ff       	call   c000f88c <malloc>
c001a119:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a11d:	83 c4 0c             	add    esp,0xc
c001a120:	57                   	push   edi
c001a121:	6a 00                	push   0x0
c001a123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a127:	e8 24 66 fe ff       	call   c0000750 <memset>
c001a12c:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a130:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a134:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a138:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a13a:	83 c4 0c             	add    esp,0xc
c001a13d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a141:	52                   	push   edx
c001a142:	6a 00                	push   0x0
c001a144:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a148:	e8 03 66 fe ff       	call   c0000750 <memset>
c001a14d:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a151:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a155:	89 34 24             	mov    DWORD PTR [esp],esi
c001a158:	e8 0f 66 fe ff       	call   c000076c <strlen>
c001a15d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a161:	89 c1                	mov    ecx,eax
c001a163:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a165:	5e                   	pop    esi
c001a166:	5f                   	pop    edi
c001a167:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a16b:	68 d1 c5 02 c0       	push   0xc002c5d1
c001a170:	e8 28 89 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001a175:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a177:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a17a:	40                   	inc    eax
c001a17b:	83 c4 10             	add    esp,0x10
c001a17e:	89 03                	mov    DWORD PTR [ebx],eax
c001a180:	85 d2                	test   edx,edx
c001a182:	75 0c                	jne    c001a190 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a184:	83 ec 0c             	sub    esp,0xc
c001a187:	6a 08                	push   0x8
c001a189:	e8 fe 56 ff ff       	call   c000f88c <malloc>
c001a18e:	eb 0c                	jmp    c001a19c <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a190:	c1 e0 03             	shl    eax,0x3
c001a193:	51                   	push   ecx
c001a194:	51                   	push   ecx
c001a195:	50                   	push   eax
c001a196:	52                   	push   edx
c001a197:	e8 dc 56 ff ff       	call   c000f878 <realloc>
c001a19c:	83 c4 10             	add    esp,0x10
c001a19f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a1a7:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a1ab:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a1af:	b9 08 00 00 00       	mov    ecx,0x8
c001a1b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1b6:	31 f6                	xor    esi,esi
c001a1b8:	52                   	push   edx
c001a1b9:	68 00 01 00 00       	push   0x100
c001a1be:	6a 00                	push   0x0
c001a1c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1c4:	50                   	push   eax
c001a1c5:	e8 86 65 fe ff       	call   c0000750 <memset>
c001a1ca:	83 c4 10             	add    esp,0x10
c001a1cd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a1d5:	eb 0f                	jmp    c001a1e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a1d7:	3c 3d                	cmp    al,0x3d
c001a1d9:	74 07                	je     c001a1e2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a1db:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a1df:	46                   	inc    esi
c001a1e0:	eb 04                	jmp    c001a1e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a1e2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a1e6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1eb:	0f 85 b8 fe ff ff    	jne    c001a0a9 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a1f1:	50                   	push   eax
c001a1f2:	50                   	push   eax
c001a1f3:	ff 33                	push   DWORD PTR [ebx]
c001a1f5:	68 df c5 02 c0       	push   0xc002c5df
c001a1fa:	e8 9e 88 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001a1ff:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a205:	5b                   	pop    ebx
c001a206:	5e                   	pop    esi
c001a207:	5f                   	pop    edi
c001a208:	5d                   	pop    ebp
c001a209:	c3                   	ret    

c001a20a <EnvVarContainer::__loadSystem()>:
c001a20a:	83 ec 10             	sub    esp,0x10
c001a20d:	68 20 e6 02 c0       	push   0xc002e620
c001a212:	68 0a c6 02 c0       	push   0xc002c60a
c001a217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a21b:	e8 e8 fd ff ff       	call   c001a008 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a220:	83 c4 1c             	add    esp,0x1c
c001a223:	c3                   	ret    

c001a224 <EnvVarContainer::__loadUser()>:
c001a224:	c3                   	ret    
c001a225:	90                   	nop

c001a226 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a22a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a234:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a238:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a23b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a23f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a246:	90                   	nop
c001a247:	c3                   	ret    

c001a248 <EnvVarContainer::~EnvVarContainer()>:
c001a248:	83 ec 0c             	sub    esp,0xc
c001a24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a24f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a252:	85 c0                	test   eax,eax
c001a254:	74 1d                	je     c001a273 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a25a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a25c:	85 c0                	test   eax,eax
c001a25e:	74 13                	je     c001a273 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a264:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a267:	83 ec 0c             	sub    esp,0xc
c001a26a:	50                   	push   eax
c001a26b:	e8 2c 56 ff ff       	call   c000f89c <free>
c001a270:	83 c4 10             	add    esp,0x10
c001a273:	90                   	nop
c001a274:	83 c4 0c             	add    esp,0xc
c001a277:	c3                   	ret    

c001a278 <Krnl::getEnv(Process*, char const*)>:
c001a278:	53                   	push   ebx
c001a279:	83 ec 08             	sub    esp,0x8
c001a27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a280:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a284:	39 05 30 26 03 c0    	cmp    DWORD PTR ds:0xc0032630,eax
c001a28a:	74 04                	je     c001a290 <Krnl::getEnv(Process*, char const*)+0x18>
c001a28c:	85 c0                	test   eax,eax
c001a28e:	75 0b                	jne    c001a29b <Krnl::getEnv(Process*, char const*)+0x23>
c001a290:	a1 14 1c 03 c0       	mov    eax,ds:0xc0031c14
c001a295:	85 c0                	test   eax,eax
c001a297:	75 19                	jne    c001a2b2 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a299:	eb 27                	jmp    c001a2c2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a29b:	52                   	push   edx
c001a29c:	52                   	push   edx
c001a29d:	53                   	push   ebx
c001a29e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a2a4:	e8 5d fc ff ff       	call   c0019f06 <EnvVarContainer::getEnv(char const*)>
c001a2a9:	83 c4 10             	add    esp,0x10
c001a2ac:	85 c0                	test   eax,eax
c001a2ae:	75 28                	jne    c001a2d8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a2b0:	eb de                	jmp    c001a290 <Krnl::getEnv(Process*, char const*)+0x18>
c001a2b2:	52                   	push   edx
c001a2b3:	52                   	push   edx
c001a2b4:	53                   	push   ebx
c001a2b5:	50                   	push   eax
c001a2b6:	e8 4b fc ff ff       	call   c0019f06 <EnvVarContainer::getEnv(char const*)>
c001a2bb:	83 c4 10             	add    esp,0x10
c001a2be:	85 c0                	test   eax,eax
c001a2c0:	75 16                	jne    c001a2d8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a2c2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a2c6:	a1 18 1c 03 c0       	mov    eax,ds:0xc0031c18
c001a2cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a2cf:	83 c4 08             	add    esp,0x8
c001a2d2:	5b                   	pop    ebx
c001a2d3:	e9 2e fc ff ff       	jmp    c0019f06 <EnvVarContainer::getEnv(char const*)>
c001a2d8:	83 c4 08             	add    esp,0x8
c001a2db:	5b                   	pop    ebx
c001a2dc:	c3                   	ret    

c001a2dd <Krnl::setEnvSystem(char const*, char const*)>:
c001a2dd:	83 ec 10             	sub    esp,0x10
c001a2e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2e8:	ff 35 18 1c 03 c0    	push   DWORD PTR ds:0xc0031c18
c001a2ee:	e8 51 fc ff ff       	call   c0019f44 <EnvVarContainer::setEnv(char const*, char const*)>
c001a2f3:	83 c4 1c             	add    esp,0x1c
c001a2f6:	c3                   	ret    

c001a2f7 <Krnl::setEnvUser(char const*, char const*)>:
c001a2f7:	a1 14 1c 03 c0       	mov    eax,ds:0xc0031c14
c001a2fc:	85 c0                	test   eax,eax
c001a2fe:	74 15                	je     c001a315 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a300:	83 ec 10             	sub    esp,0x10
c001a303:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a307:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a30b:	50                   	push   eax
c001a30c:	e8 33 fc ff ff       	call   c0019f44 <EnvVarContainer::setEnv(char const*, char const*)>
c001a311:	83 c4 1c             	add    esp,0x1c
c001a314:	c3                   	ret    
c001a315:	c3                   	ret    

c001a316 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a31a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a320:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a324:	e9 1b fc ff ff       	jmp    c0019f44 <EnvVarContainer::setEnv(char const*, char const*)>

c001a329 <Krnl::deleteEnvSystem(char const*)>:
c001a329:	c3                   	ret    

c001a32a <Krnl::deleteEnvUser(char const*)>:
c001a32a:	c3                   	ret    

c001a32b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a32b:	c3                   	ret    

c001a32c <Krnl::newProcessEnv(Process*)>:
c001a32c:	83 ec 28             	sub    esp,0x28
c001a32f:	6a 0c                	push   0xc
c001a331:	e8 56 55 ff ff       	call   c000f88c <malloc>
c001a336:	5a                   	pop    edx
c001a337:	59                   	pop    ecx
c001a338:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a33c:	50                   	push   eax
c001a33d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a341:	e8 e0 fe ff ff       	call   c001a226 <EnvVarContainer::EnvVarContainer(Process*)>
c001a346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a34a:	83 c4 2c             	add    esp,0x2c
c001a34d:	c3                   	ret    

c001a34e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a34e:	57                   	push   edi
c001a34f:	56                   	push   esi
c001a350:	53                   	push   ebx
c001a351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a355:	83 ec 0c             	sub    esp,0xc
c001a358:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a35e:	6a 0c                	push   0xc
c001a360:	e8 27 55 ff ff       	call   c000f88c <malloc>
c001a365:	89 c3                	mov    ebx,eax
c001a367:	58                   	pop    eax
c001a368:	5a                   	pop    edx
c001a369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a36d:	53                   	push   ebx
c001a36e:	e8 b3 fe ff ff       	call   c001a226 <EnvVarContainer::EnvVarContainer(Process*)>
c001a373:	8b 07                	mov    eax,DWORD PTR [edi]
c001a375:	89 03                	mov    DWORD PTR [ebx],eax
c001a377:	c1 e0 03             	shl    eax,0x3
c001a37a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a37d:	e8 0a 55 ff ff       	call   c000f88c <malloc>
c001a382:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a385:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a387:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a38a:	c1 e1 03             	shl    ecx,0x3
c001a38d:	89 c7                	mov    edi,eax
c001a38f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a391:	83 c4 10             	add    esp,0x10
c001a394:	89 d8                	mov    eax,ebx
c001a396:	5b                   	pop    ebx
c001a397:	5e                   	pop    esi
c001a398:	5f                   	pop    edi
c001a399:	c3                   	ret    

c001a39a <Krnl::loadSystemEnv()>:
c001a39a:	53                   	push   ebx
c001a39b:	83 ec 14             	sub    esp,0x14
c001a39e:	6a 0c                	push   0xc
c001a3a0:	e8 e7 54 ff ff       	call   c000f88c <malloc>
c001a3a5:	89 c3                	mov    ebx,eax
c001a3a7:	58                   	pop    eax
c001a3a8:	5a                   	pop    edx
c001a3a9:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c001a3af:	53                   	push   ebx
c001a3b0:	e8 71 fe ff ff       	call   c001a226 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3b8:	89 1d 18 1c 03 c0    	mov    DWORD PTR ds:0xc0031c18,ebx
c001a3be:	e8 47 fe ff ff       	call   c001a20a <EnvVarContainer::__loadSystem()>
c001a3c3:	83 c4 18             	add    esp,0x18
c001a3c6:	5b                   	pop    ebx
c001a3c7:	c3                   	ret    

c001a3c8 <Krnl::loadUserEnv()>:
c001a3c8:	53                   	push   ebx
c001a3c9:	83 ec 14             	sub    esp,0x14
c001a3cc:	6a 0c                	push   0xc
c001a3ce:	e8 b9 54 ff ff       	call   c000f88c <malloc>
c001a3d3:	89 c3                	mov    ebx,eax
c001a3d5:	58                   	pop    eax
c001a3d6:	5a                   	pop    edx
c001a3d7:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c001a3dd:	53                   	push   ebx
c001a3de:	e8 43 fe ff ff       	call   c001a226 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3e3:	89 1d 14 1c 03 c0    	mov    DWORD PTR ds:0xc0031c14,ebx
c001a3e9:	83 c4 18             	add    esp,0x18
c001a3ec:	5b                   	pop    ebx
c001a3ed:	c3                   	ret    

c001a3ee <Krnl::flushEnv()>:
c001a3ee:	c3                   	ret    

c001a3ef <Krnl::getProcessTotalEnvCount(Process*)>:
c001a3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f3:	8b 15 14 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c14
c001a3f9:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a3ff:	a1 18 1c 03 c0       	mov    eax,ds:0xc0031c18
c001a404:	8b 00                	mov    eax,DWORD PTR [eax]
c001a406:	03 01                	add    eax,DWORD PTR [ecx]
c001a408:	85 d2                	test   edx,edx
c001a40a:	74 02                	je     c001a40e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a40c:	03 02                	add    eax,DWORD PTR [edx]
c001a40e:	c3                   	ret    

c001a40f <Krnl::getProcessEnvPair(Process*, int)>:
c001a40f:	57                   	push   edi
c001a410:	8b 0d 14 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c14
c001a416:	56                   	push   esi
c001a417:	85 c9                	test   ecx,ecx
c001a419:	53                   	push   ebx
c001a41a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a41e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a422:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a428:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a42c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a42e:	75 47                	jne    c001a477 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a430:	39 c3                	cmp    ebx,eax
c001a432:	7c 47                	jl     c001a47b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a434:	8b 15 18 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c18
c001a43a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a43c:	01 c1                	add    ecx,eax
c001a43e:	39 d9                	cmp    ecx,ebx
c001a440:	7e 6c                	jle    c001a4ae <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a442:	51                   	push   ecx
c001a443:	89 d9                	mov    ecx,ebx
c001a445:	29 c1                	sub    ecx,eax
c001a447:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a44a:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a44e:	53                   	push   ebx
c001a44f:	68 2c c6 02 c0       	push   0xc002c62c
c001a454:	e8 44 86 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001a459:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a45f:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a461:	a1 18 1c 03 c0       	mov    eax,ds:0xc0031c18
c001a466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a469:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a46d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a470:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a473:	89 06                	mov    DWORD PTR [esi],eax
c001a475:	eb 51                	jmp    c001a4c8 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a477:	39 c3                	cmp    ebx,eax
c001a479:	7d 05                	jge    c001a480 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a47b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a47e:	eb 20                	jmp    c001a4a0 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a480:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a482:	8d 14 07             	lea    edx,[edi+eax*1]
c001a485:	39 da                	cmp    edx,ebx
c001a487:	7e 04                	jle    c001a48d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a489:	29 c3                	sub    ebx,eax
c001a48b:	eb 10                	jmp    c001a49d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a48d:	8b 0d 18 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c18
c001a493:	03 11                	add    edx,DWORD PTR [ecx]
c001a495:	39 da                	cmp    edx,ebx
c001a497:	7e 15                	jle    c001a4ae <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a499:	29 c3                	sub    ebx,eax
c001a49b:	29 fb                	sub    ebx,edi
c001a49d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a4a0:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a4a4:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a4a7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4aa:	89 06                	mov    DWORD PTR [esi],eax
c001a4ac:	eb 1d                	jmp    c001a4cb <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a4ae:	83 ec 0c             	sub    esp,0xc
c001a4b1:	68 40 c6 02 c0       	push   0xc002c640
c001a4b6:	e8 18 00 00 00       	call   c001a4d3 <Krnl::panic(char const*)>
c001a4bb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a4c1:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	89 f0                	mov    eax,esi
c001a4cd:	5b                   	pop    ebx
c001a4ce:	5e                   	pop    esi
c001a4cf:	5f                   	pop    edi
c001a4d0:	c2 04 00             	ret    0x4

c001a4d3 <Krnl::panic(char const*)>:
c001a4d3:	55                   	push   ebp
c001a4d4:	89 e5                	mov    ebp,esp
c001a4d6:	53                   	push   ebx
c001a4d7:	83 ec 0c             	sub    esp,0xc
c001a4da:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a4dd:	fa                   	cli    
c001a4de:	c6 05 24 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c24,0x1
c001a4e5:	53                   	push   ebx
c001a4e6:	c6 05 20 e0 02 c0 00 	mov    BYTE PTR ds:0xc002e020,0x0
c001a4ed:	68 5a c6 02 c0       	push   0xc002c65a
c001a4f2:	e8 a6 85 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001a4f7:	58                   	pop    eax
c001a4f8:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a4fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a503:	e8 b8 63 ff ff       	call   c00108c0 <setActiveTerminal(VgaText*)>
c001a508:	83 c4 0c             	add    esp,0xc
c001a50b:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a510:	6a 01                	push   0x1
c001a512:	6a 0f                	push   0xf
c001a514:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a51a:	e8 4d 5e ff ff       	call   c001036c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a51f:	58                   	pop    eax
c001a520:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a525:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52b:	e8 d6 65 ff ff       	call   c0010b06 <VgaText::clearScreen()>
c001a530:	58                   	pop    eax
c001a531:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a536:	5a                   	pop    edx
c001a537:	68 73 c6 02 c0       	push   0xc002c673
c001a53c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a542:	e8 05 67 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a547:	59                   	pop    ecx
c001a548:	58                   	pop    eax
c001a549:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a54e:	68 18 c7 02 c0       	push   0xc002c718
c001a553:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a559:	e8 ee 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a55e:	58                   	pop    eax
c001a55f:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a564:	5a                   	pop    edx
c001a565:	68 8f c6 02 c0       	push   0xc002c68f
c001a56a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a570:	e8 d7 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a575:	59                   	pop    ecx
c001a576:	58                   	pop    eax
c001a577:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a57c:	53                   	push   ebx
c001a57d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a583:	e8 c4 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a588:	58                   	pop    eax
c001a589:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a58e:	5a                   	pop    edx
c001a58f:	68 af c6 02 c0       	push   0xc002c6af
c001a594:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a59a:	e8 ad 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a59f:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c001a5a4:	83 c4 10             	add    esp,0x10
c001a5a7:	85 c0                	test   eax,eax
c001a5a9:	74 02                	je     c001a5ad <Krnl::panic(char const*)+0xda>
c001a5ab:	ff d0                	call   eax
c001a5ad:	83 ec 0c             	sub    esp,0xc
c001a5b0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5b3:	e8 9e 32 00 00       	call   c001d856 <Thr::getDriverNameFromAddress(unsigned long)>
c001a5b8:	83 c4 10             	add    esp,0x10
c001a5bb:	89 c3                	mov    ebx,eax
c001a5bd:	85 c0                	test   eax,eax
c001a5bf:	0f 84 50 02 00 00    	je     c001a815 <Krnl::panic(char const*)+0x342>
c001a5c5:	83 ec 08             	sub    esp,0x8
c001a5c8:	8b 15 30 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032630
c001a5ce:	68 54 c7 02 c0       	push   0xc002c754
c001a5d3:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a5d9:	e8 6e 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a5de:	58                   	pop    eax
c001a5df:	5a                   	pop    edx
c001a5e0:	8b 15 30 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032630
c001a5e6:	68 8f c6 02 c0       	push   0xc002c68f
c001a5eb:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a5f1:	e8 56 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a5f6:	59                   	pop    ecx
c001a5f7:	58                   	pop    eax
c001a5f8:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a5fd:	53                   	push   ebx
c001a5fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a604:	e8 43 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a609:	83 c4 10             	add    esp,0x10
c001a60c:	83 ec 08             	sub    esp,0x8
c001a60f:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a614:	68 ae c6 02 c0       	push   0xc002c6ae
c001a619:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a61f:	e8 28 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a624:	58                   	pop    eax
c001a625:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a62a:	5a                   	pop    edx
c001a62b:	68 ac c7 02 c0       	push   0xc002c7ac
c001a630:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a636:	e8 11 66 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a63b:	59                   	pop    ecx
c001a63c:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a641:	5b                   	pop    ebx
c001a642:	68 ec c7 02 c0       	push   0xc002c7ec
c001a647:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a64d:	e8 fa 65 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a652:	58                   	pop    eax
c001a653:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a658:	5a                   	pop    edx
c001a659:	68 9a c6 02 c0       	push   0xc002c69a
c001a65e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a664:	e8 e3 65 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a669:	59                   	pop    ecx
c001a66a:	5b                   	pop    ebx
c001a66b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a66e:	68 b2 c6 02 c0       	push   0xc002c6b2
c001a673:	e8 25 84 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001a678:	58                   	pop    eax
c001a679:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a67c:	5a                   	pop    edx
c001a67d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a680:	68 bb c6 02 c0       	push   0xc002c6bb
c001a685:	e8 13 84 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001a68a:	59                   	pop    ecx
c001a68b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a68e:	5b                   	pop    ebx
c001a68f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a691:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a694:	68 c4 c6 02 c0       	push   0xc002c6c4
c001a699:	e8 ff 83 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001a69e:	58                   	pop    eax
c001a69f:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a6a4:	5a                   	pop    edx
c001a6a5:	68 30 c8 02 c0       	push   0xc002c830
c001a6aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b0:	e8 97 65 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a6b5:	59                   	pop    ecx
c001a6b6:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a6bb:	5b                   	pop    ebx
c001a6bc:	68 cd c6 02 c0       	push   0xc002c6cd
c001a6c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c7:	e8 80 65 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a6cc:	0f 20 c0             	mov    eax,cr0
c001a6cf:	5a                   	pop    edx
c001a6d0:	59                   	pop    ecx
c001a6d1:	50                   	push   eax
c001a6d2:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a6d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6dd:	e8 90 65 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c001a6e2:	5b                   	pop    ebx
c001a6e3:	58                   	pop    eax
c001a6e4:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a6e9:	68 d7 c6 02 c0       	push   0xc002c6d7
c001a6ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f4:	e8 53 65 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a6f9:	0f 20 d0             	mov    eax,cr2
c001a6fc:	5a                   	pop    edx
c001a6fd:	59                   	pop    ecx
c001a6fe:	50                   	push   eax
c001a6ff:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a704:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70a:	e8 63 65 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c001a70f:	5b                   	pop    ebx
c001a710:	58                   	pop    eax
c001a711:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a716:	68 e1 c6 02 c0       	push   0xc002c6e1
c001a71b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a721:	e8 26 65 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a726:	0f 20 d8             	mov    eax,cr3
c001a729:	5a                   	pop    edx
c001a72a:	59                   	pop    ecx
c001a72b:	50                   	push   eax
c001a72c:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a731:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a737:	e8 36 65 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c001a73c:	5b                   	pop    ebx
c001a73d:	58                   	pop    eax
c001a73e:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a743:	68 f4 c6 02 c0       	push   0xc002c6f4
c001a748:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74e:	e8 f9 64 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a753:	0f 20 e0             	mov    eax,cr4
c001a756:	5a                   	pop    edx
c001a757:	59                   	pop    ecx
c001a758:	50                   	push   eax
c001a759:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a75e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a764:	e8 09 65 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c001a769:	5b                   	pop    ebx
c001a76a:	58                   	pop    eax
c001a76b:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a770:	68 fe c6 02 c0       	push   0xc002c6fe
c001a775:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a77b:	e8 cc 64 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a780:	5a                   	pop    edx
c001a781:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a786:	59                   	pop    ecx
c001a787:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a78d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a790:	50                   	push   eax
c001a791:	e8 dc 64 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c001a796:	5b                   	pop    ebx
c001a797:	58                   	pop    eax
c001a798:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a79d:	68 cb d5 02 c0       	push   0xc002d5cb
c001a7a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a8:	e8 9f 64 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a7ad:	5a                   	pop    edx
c001a7ae:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a7b3:	59                   	pop    ecx
c001a7b4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a7bd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a7c0:	50                   	push   eax
c001a7c1:	e8 ac 64 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c001a7c6:	5b                   	pop    ebx
c001a7c7:	58                   	pop    eax
c001a7c8:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a7cd:	68 cb d5 02 c0       	push   0xc002d5cb
c001a7d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d8:	e8 6f 64 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a7dd:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a7e2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a7e5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7eb:	8b 12                	mov    edx,DWORD PTR [edx]
c001a7ed:	59                   	pop    ecx
c001a7ee:	5b                   	pop    ebx
c001a7ef:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a7f2:	50                   	push   eax
c001a7f3:	e8 7a 64 ff ff       	call   c0010c72 <VgaText::putx(unsigned int)>
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	b2 fe                	mov    dl,0xfe
c001a7fd:	e4 60                	in     al,0x60
c001a7ff:	3c 1c                	cmp    al,0x1c
c001a801:	74 04                	je     c001a807 <Krnl::panic(char const*)+0x334>
c001a803:	3c 5a                	cmp    al,0x5a
c001a805:	75 f6                	jne    c001a7fd <Krnl::panic(char const*)+0x32a>
c001a807:	e4 64                	in     al,0x64
c001a809:	a8 02                	test   al,0x2
c001a80b:	75 fa                	jne    c001a807 <Krnl::panic(char const*)+0x334>
c001a80d:	88 d0                	mov    al,dl
c001a80f:	e6 64                	out    0x64,al
c001a811:	fa                   	cli    
c001a812:	f4                   	hlt    
c001a813:	eb e8                	jmp    c001a7fd <Krnl::panic(char const*)+0x32a>
c001a815:	50                   	push   eax
c001a816:	50                   	push   eax
c001a817:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a81c:	68 80 c7 02 c0       	push   0xc002c780
c001a821:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a827:	e8 20 64 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a82c:	58                   	pop    eax
c001a82d:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a832:	5a                   	pop    edx
c001a833:	68 8f c6 02 c0       	push   0xc002c68f
c001a838:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a83e:	e8 09 64 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a843:	59                   	pop    ecx
c001a844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a849:	5b                   	pop    ebx
c001a84a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a84d:	83 c0 0c             	add    eax,0xc
c001a850:	50                   	push   eax
c001a851:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001a856:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85c:	e8 eb 63 ff ff       	call   c0010c4c <VgaText::puts(char const*)>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	e9 a3 fd ff ff       	jmp    c001a60c <Krnl::panic(char const*)+0x139>

c001a869 <Net::switchEndian16(unsigned short)>:
c001a869:	83 ec 04             	sub    esp,0x4
c001a86c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a870:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a874:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a878:	c1 f8 08             	sar    eax,0x8
c001a87b:	89 c2                	mov    edx,eax
c001a87d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a881:	c1 e0 08             	shl    eax,0x8
c001a884:	09 d0                	or     eax,edx
c001a886:	83 c4 04             	add    esp,0x4
c001a889:	c3                   	ret    

c001a88a <Net::switchEndian32(unsigned int)>:
c001a88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a88e:	c1 e8 18             	shr    eax,0x18
c001a891:	89 c2                	mov    edx,eax
c001a893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a897:	c1 e0 08             	shl    eax,0x8
c001a89a:	25 00 00 ff 00       	and    eax,0xff0000
c001a89f:	09 c2                	or     edx,eax
c001a8a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a5:	c1 e8 08             	shr    eax,0x8
c001a8a8:	25 00 ff 00 00       	and    eax,0xff00
c001a8ad:	09 c2                	or     edx,eax
c001a8af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b3:	c1 e0 18             	shl    eax,0x18
c001a8b6:	09 d0                	or     eax,edx
c001a8b8:	c3                   	ret    

c001a8b9 <Net::crc32Calc(unsigned char*, int)>:
c001a8b9:	83 ec 10             	sub    esp,0x10
c001a8bc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8c1:	75 07                	jne    c001a8ca <Net::crc32Calc(unsigned char*, int)+0x11>
c001a8c3:	b8 00 00 00 00       	mov    eax,0x0
c001a8c8:	eb 7c                	jmp    c001a946 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a8ca:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a8cf:	7f 07                	jg     c001a8d8 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a8d1:	b8 00 00 00 00       	mov    eax,0x0
c001a8d6:	eb 6e                	jmp    c001a946 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a8d8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a8e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8ec:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a8f0:	7d 4e                	jge    c001a940 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a8f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8fa:	01 d0                	add    eax,edx
c001a8fc:	8a 00                	mov    al,BYTE PTR [eax]
c001a8fe:	0f b6 c0             	movzx  eax,al
c001a901:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a905:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a90d:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a912:	7f 26                	jg     c001a93a <Net::crc32Calc(unsigned char*, int)+0x81>
c001a914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a918:	83 e0 01             	and    eax,0x1
c001a91b:	74 0d                	je     c001a92a <Net::crc32Calc(unsigned char*, int)+0x71>
c001a91d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a921:	d1 e8                	shr    eax,1
c001a923:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a928:	eb 06                	jmp    c001a930 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a92e:	d1 e8                	shr    eax,1
c001a930:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a934:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a938:	eb d3                	jmp    c001a90d <Net::crc32Calc(unsigned char*, int)+0x54>
c001a93a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a93e:	eb a8                	jmp    c001a8e8 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a944:	f7 d0                	not    eax
c001a946:	83 c4 10             	add    esp,0x10
c001a949:	c3                   	ret    

c001a94a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a94a:	57                   	push   edi
c001a94b:	56                   	push   esi
c001a94c:	53                   	push   ebx
c001a94d:	83 ec 60             	sub    esp,0x60
c001a950:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a957:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a95b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a963:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a968:	7f 1a                	jg     c001a984 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a96a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a971:	8d 50 01             	lea    edx,[eax+0x1]
c001a974:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a97b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a97e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a982:	eb df                	jmp    c001a963 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a984:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a98b:	8d 50 01             	lea    edx,[eax+0x1]
c001a98e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a995:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a998:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a9a3:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a9a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9ab:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a9b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a9c7:	89 c6                	mov    esi,eax
c001a9c9:	89 d7                	mov    edi,edx
c001a9cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9cd:	89 c8                	mov    eax,ecx
c001a9cf:	89 fa                	mov    edx,edi
c001a9d1:	89 f3                	mov    ebx,esi
c001a9d3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a9d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a9db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9de:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a9e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a9f1:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a9f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9f9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aa01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa0d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa11:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa15:	89 c6                	mov    esi,eax
c001aa17:	89 d7                	mov    edi,edx
c001aa19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa1b:	89 c8                	mov    eax,ecx
c001aa1d:	89 fa                	mov    edx,edi
c001aa1f:	89 f3                	mov    ebx,esi
c001aa21:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa25:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa2d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001aa35:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa3c:	0f b7 c0             	movzx  eax,ax
c001aa3f:	c1 f8 08             	sar    eax,0x8
c001aa42:	89 c1                	mov    ecx,eax
c001aa44:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa4b:	8d 50 01             	lea    edx,[eax+0x1]
c001aa4e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa55:	88 ca                	mov    dl,cl
c001aa57:	88 10                	mov    BYTE PTR [eax],dl
c001aa59:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aa60:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa67:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa6a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001aa71:	88 10                	mov    BYTE PTR [eax],dl
c001aa73:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aa77:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001aa7b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001aa82:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001aa86:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001aa8a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aa8e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa92:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa9a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aaa2:	89 c6                	mov    esi,eax
c001aaa4:	89 d7                	mov    edi,edx
c001aaa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aaa8:	89 c8                	mov    eax,ecx
c001aaaa:	89 fa                	mov    edx,edi
c001aaac:	89 f3                	mov    ebx,esi
c001aaae:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aab2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aab6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aaba:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aabe:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001aac5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aacc:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001aad0:	50                   	push   eax
c001aad1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aad5:	e8 df fd ff ff       	call   c001a8b9 <Net::crc32Calc(unsigned char*, int)>
c001aada:	83 c4 08             	add    esp,0x8
c001aadd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aae1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aae5:	c1 e8 18             	shr    eax,0x18
c001aae8:	89 c1                	mov    ecx,eax
c001aaea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aaf1:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aafb:	88 ca                	mov    dl,cl
c001aafd:	88 10                	mov    BYTE PTR [eax],dl
c001aaff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab03:	c1 e8 10             	shr    eax,0x10
c001ab06:	89 c1                	mov    ecx,eax
c001ab08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab0f:	8d 50 01             	lea    edx,[eax+0x1]
c001ab12:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ab19:	88 ca                	mov    dl,cl
c001ab1b:	88 10                	mov    BYTE PTR [eax],dl
c001ab1d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab21:	c1 e8 08             	shr    eax,0x8
c001ab24:	89 c1                	mov    ecx,eax
c001ab26:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab2d:	8d 50 01             	lea    edx,[eax+0x1]
c001ab30:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ab37:	88 ca                	mov    dl,cl
c001ab39:	88 10                	mov    BYTE PTR [eax],dl
c001ab3b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab42:	8d 50 01             	lea    edx,[eax+0x1]
c001ab45:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ab4c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ab50:	88 10                	mov    BYTE PTR [eax],dl
c001ab52:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ab56:	83 c4 60             	add    esp,0x60
c001ab59:	5b                   	pop    ebx
c001ab5a:	5e                   	pop    esi
c001ab5b:	5f                   	pop    edi
c001ab5c:	c3                   	ret    

c001ab5d <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab5d:	57                   	push   edi
c001ab5e:	56                   	push   esi
c001ab5f:	53                   	push   ebx
c001ab60:	83 ec 70             	sub    esp,0x70
c001ab63:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab6a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001ab6e:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001ab76:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab7d:	83 c0 0e             	add    eax,0xe
c001ab80:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ab84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab8b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ab8f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001ab97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ab9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aba3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aba7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001abab:	89 c6                	mov    esi,eax
c001abad:	89 d7                	mov    edi,edx
c001abaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abb1:	89 c8                	mov    eax,ecx
c001abb3:	89 fa                	mov    edx,edi
c001abb5:	89 f3                	mov    ebx,esi
c001abb7:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001abbb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001abbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abc3:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001abcb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001abd2:	83 c0 08             	add    eax,0x8
c001abd5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001abd9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abe0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001abe4:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001abec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001abf0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001abf4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001abf8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001abfc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ac00:	89 c6                	mov    esi,eax
c001ac02:	89 d7                	mov    edi,edx
c001ac04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac06:	89 c8                	mov    eax,ecx
c001ac08:	89 fa                	mov    edx,edi
c001ac0a:	89 f3                	mov    ebx,esi
c001ac0c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ac10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ac14:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac18:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ac20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac27:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac31:	8a 00                	mov    al,BYTE PTR [eax]
c001ac33:	0f b6 c0             	movzx  eax,al
c001ac36:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ac3b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac42:	8d 50 01             	lea    edx,[eax+0x1]
c001ac45:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac4c:	8a 00                	mov    al,BYTE PTR [eax]
c001ac4e:	0f b6 c0             	movzx  eax,al
c001ac51:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ac56:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ac5b:	c1 e0 08             	shl    eax,0x8
c001ac5e:	89 c2                	mov    edx,eax
c001ac60:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ac64:	09 d0                	or     eax,edx
c001ac66:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ac6d:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac71:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ac79:	75 46                	jne    c001acc1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ac7b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac82:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac85:	66 3d dc 05          	cmp    ax,0x5dc
c001ac89:	77 16                	ja     c001aca1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ac8b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac92:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac95:	0f b7 c0             	movzx  eax,ax
c001ac98:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ac9f:	eb 20                	jmp    c001acc1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aca1:	83 ec 0c             	sub    esp,0xc
c001aca4:	68 58 c8 02 c0       	push   0xc002c858
c001aca9:	e8 ef 7d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001acae:	83 c4 10             	add    esp,0x10
c001acb1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001acb8:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acbc:	e9 17 01 00 00       	jmp    c001add8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001acc1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acc8:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001accf:	8b 12                	mov    edx,DWORD PTR [edx]
c001acd1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001acd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001acdc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ace0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ace4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ace8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001acf4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acf8:	89 c6                	mov    esi,eax
c001acfa:	89 d7                	mov    edi,edx
c001acfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acfe:	89 c8                	mov    eax,ecx
c001ad00:	89 fa                	mov    edx,edi
c001ad02:	89 f3                	mov    ebx,esi
c001ad04:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ad08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ad0c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad0f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad16:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ad1d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad24:	8d 50 01             	lea    edx,[eax+0x1]
c001ad27:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ad2e:	8a 00                	mov    al,BYTE PTR [eax]
c001ad30:	0f b6 c0             	movzx  eax,al
c001ad33:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ad37:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad3e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad41:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ad48:	8a 00                	mov    al,BYTE PTR [eax]
c001ad4a:	0f b6 c0             	movzx  eax,al
c001ad4d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ad51:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad58:	8d 50 01             	lea    edx,[eax+0x1]
c001ad5b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ad62:	8a 00                	mov    al,BYTE PTR [eax]
c001ad64:	0f b6 c0             	movzx  eax,al
c001ad67:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ad6b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad72:	8d 50 01             	lea    edx,[eax+0x1]
c001ad75:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ad7c:	8a 00                	mov    al,BYTE PTR [eax]
c001ad7e:	0f b6 c0             	movzx  eax,al
c001ad81:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ad85:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad89:	c1 e0 18             	shl    eax,0x18
c001ad8c:	89 c2                	mov    edx,eax
c001ad8e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ad92:	c1 e0 10             	shl    eax,0x10
c001ad95:	09 c2                	or     edx,eax
c001ad97:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ad9b:	c1 e0 08             	shl    eax,0x8
c001ad9e:	09 d0                	or     eax,edx
c001ada0:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ada4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ada8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001adaf:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001adb3:	83 e8 04             	sub    eax,0x4
c001adb6:	83 ec 08             	sub    esp,0x8
c001adb9:	50                   	push   eax
c001adba:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001adbe:	e8 f6 fa ff ff       	call   c001a8b9 <Net::crc32Calc(unsigned char*, int)>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001adca:	0f 94 c2             	sete   dl
c001adcd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001add4:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001add7:	90                   	nop
c001add8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001addf:	83 c4 70             	add    esp,0x70
c001ade2:	5b                   	pop    ebx
c001ade3:	5e                   	pop    esi
c001ade4:	5f                   	pop    edi
c001ade5:	c2 04 00             	ret    0x4

c001ade8 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ade8:	55                   	push   ebp
c001ade9:	57                   	push   edi
c001adea:	56                   	push   esi
c001adeb:	53                   	push   ebx
c001adec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adf2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adf9:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adfb:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adfe:	80 fb 40             	cmp    bl,0x40
c001ae01:	75 1b                	jne    c001ae1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ae03:	8a 16                	mov    dl,BYTE PTR [esi]
c001ae05:	84 d2                	test   dl,dl
c001ae07:	0f 84 f1 00 00 00    	je     c001aefe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae0d:	8d 46 01             	lea    eax,[esi+0x1]
c001ae10:	80 fa 3a             	cmp    dl,0x3a
c001ae13:	74 04                	je     c001ae19 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae15:	89 c6                	mov    esi,eax
c001ae17:	eb ea                	jmp    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae19:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae1c:	89 c6                	mov    esi,eax
c001ae1e:	50                   	push   eax
c001ae1f:	6a 40                	push   0x40
c001ae21:	6a 00                	push   0x0
c001ae23:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae27:	50                   	push   eax
c001ae28:	e8 23 59 fe ff       	call   c0000750 <memset>
c001ae2d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae34:	31 c0                	xor    eax,eax
c001ae36:	83 c4 10             	add    esp,0x10
c001ae39:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae3b:	84 c9                	test   cl,cl
c001ae3d:	0f 84 bb 00 00 00    	je     c001aefe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae43:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae48:	0f 8f b0 00 00 00    	jg     c001aefe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae4e:	80 f9 0a             	cmp    cl,0xa
c001ae51:	0f 85 98 00 00 00    	jne    c001aeef <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae57:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae5c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae60:	a8 df                	test   al,0xdf
c001ae62:	0f 94 c1             	sete   cl
c001ae65:	3c 23                	cmp    al,0x23
c001ae67:	0f 94 c2             	sete   dl
c001ae6a:	08 d1                	or     cl,dl
c001ae6c:	75 4a                	jne    c001aeb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae6e:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae71:	80 fa 01             	cmp    dl,0x1
c001ae74:	76 42                	jbe    c001aeb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae76:	3c 5b                	cmp    al,0x5b
c001ae78:	75 42                	jne    c001aebc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae7a:	80 fb 40             	cmp    bl,0x40
c001ae7d:	75 39                	jne    c001aeb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae7f:	83 ec 0c             	sub    esp,0xc
c001ae82:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae86:	52                   	push   edx
c001ae87:	e8 e0 58 fe ff       	call   c000076c <strlen>
c001ae8c:	83 c4 10             	add    esp,0x10
c001ae8f:	83 f8 3f             	cmp    eax,0x3f
c001ae92:	77 6a                	ja     c001aefe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae94:	50                   	push   eax
c001ae95:	50                   	push   eax
c001ae96:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae9a:	52                   	push   edx
c001ae9b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae9f:	52                   	push   edx
c001aea0:	e8 67 59 fe ff       	call   c000080c <strcpy>
c001aea5:	58                   	pop    eax
c001aea6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aeaa:	52                   	push   edx
c001aeab:	e8 bc 58 fe ff       	call   c000076c <strlen>
c001aeb0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aeb5:	83 c4 10             	add    esp,0x10
c001aeb8:	31 d2                	xor    edx,edx
c001aeba:	eb 3a                	jmp    c001aef6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aebc:	80 fb 40             	cmp    bl,0x40
c001aebf:	74 06                	je     c001aec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aec1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aec5:	eb 20                	jmp    c001aee7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aec7:	50                   	push   eax
c001aec8:	50                   	push   eax
c001aec9:	55                   	push   ebp
c001aeca:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aece:	50                   	push   eax
c001aecf:	e8 c4 59 fe ff       	call   c0000898 <strcmp>
c001aed4:	83 c4 10             	add    esp,0x10
c001aed7:	85 c0                	test   eax,eax
c001aed9:	75 dd                	jne    c001aeb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aedb:	eb e4                	jmp    c001aec1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aedd:	8d 50 01             	lea    edx,[eax+0x1]
c001aee0:	80 f9 3d             	cmp    cl,0x3d
c001aee3:	74 1d                	je     c001af02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aee5:	89 d0                	mov    eax,edx
c001aee7:	8a 08                	mov    cl,BYTE PTR [eax]
c001aee9:	84 c9                	test   cl,cl
c001aeeb:	75 f0                	jne    c001aedd <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aeed:	eb 0f                	jmp    c001aefe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aeef:	8d 50 01             	lea    edx,[eax+0x1]
c001aef2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aef6:	47                   	inc    edi
c001aef7:	89 d0                	mov    eax,edx
c001aef9:	e9 3b ff ff ff       	jmp    c001ae39 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aefe:	31 c0                	xor    eax,eax
c001af00:	eb 33                	jmp    c001af35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001af02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af09:	50                   	push   eax
c001af0a:	50                   	push   eax
c001af0b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af0f:	50                   	push   eax
c001af10:	56                   	push   esi
c001af11:	e8 82 59 fe ff       	call   c0000898 <strcmp>
c001af16:	83 c4 10             	add    esp,0x10
c001af19:	85 c0                	test   eax,eax
c001af1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af1f:	75 97                	jne    c001aeb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af21:	51                   	push   ecx
c001af22:	51                   	push   ecx
c001af23:	52                   	push   edx
c001af24:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af2b:	e8 dc 58 fe ff       	call   c000080c <strcpy>
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	b0 01                	mov    al,0x1
c001af35:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af3b:	5b                   	pop    ebx
c001af3c:	5e                   	pop    esi
c001af3d:	5f                   	pop    edi
c001af3e:	5d                   	pop    ebp
c001af3f:	c3                   	ret    

c001af40 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af40:	57                   	push   edi
c001af41:	56                   	push   esi
c001af42:	53                   	push   ebx
c001af43:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af49:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af50:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af57:	53                   	push   ebx
c001af58:	e8 0f 58 fe ff       	call   c000076c <strlen>
c001af5d:	89 34 24             	mov    DWORD PTR [esp],esi
c001af60:	89 c7                	mov    edi,eax
c001af62:	e8 05 58 fe ff       	call   c000076c <strlen>
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af6e:	3d ff 00 00 00       	cmp    eax,0xff
c001af73:	0f 87 d3 00 00 00    	ja     c001b04c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af79:	57                   	push   edi
c001af7a:	57                   	push   edi
c001af7b:	56                   	push   esi
c001af7c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af80:	56                   	push   esi
c001af81:	e8 86 58 fe ff       	call   c000080c <strcpy>
c001af86:	58                   	pop    eax
c001af87:	5a                   	pop    edx
c001af88:	68 ad cd 02 c0       	push   0xc002cdad
c001af8d:	56                   	push   esi
c001af8e:	e8 b9 59 fe ff       	call   c000094c <strcat>
c001af93:	59                   	pop    ecx
c001af94:	5f                   	pop    edi
c001af95:	53                   	push   ebx
c001af96:	56                   	push   esi
c001af97:	e8 b0 59 fe ff       	call   c000094c <strcat>
c001af9c:	58                   	pop    eax
c001af9d:	5a                   	pop    edx
c001af9e:	68 a4 c8 02 c0       	push   0xc002c8a4
c001afa3:	56                   	push   esi
c001afa4:	e8 a3 59 fe ff       	call   c000094c <strcat>
c001afa9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001afb0:	e8 d7 48 ff ff       	call   c000f88c <malloc>
c001afb5:	83 c4 0c             	add    esp,0xc
c001afb8:	89 c3                	mov    ebx,eax
c001afba:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c001afc0:	56                   	push   esi
c001afc1:	50                   	push   eax
c001afc2:	e8 35 80 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001afc7:	83 c4 10             	add    esp,0x10
c001afca:	85 db                	test   ebx,ebx
c001afcc:	74 7e                	je     c001b04c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afce:	51                   	push   ecx
c001afcf:	51                   	push   ecx
c001afd0:	6a 01                	push   0x1
c001afd2:	53                   	push   ebx
c001afd3:	e8 88 80 ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001afd8:	83 c4 10             	add    esp,0x10
c001afdb:	85 c0                	test   eax,eax
c001afdd:	74 08                	je     c001afe7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afdf:	83 ec 0c             	sub    esp,0xc
c001afe2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afe4:	53                   	push   ebx
c001afe5:	eb 5f                	jmp    c001b046 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afe7:	52                   	push   edx
c001afe8:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afec:	50                   	push   eax
c001afed:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aff1:	50                   	push   eax
c001aff2:	53                   	push   ebx
c001aff3:	e8 14 83 ff ff       	call   c001330c <File::stat(unsigned long long*, bool*)>
c001aff8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	89 c1                	mov    ecx,eax
c001b001:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b005:	74 31                	je     c001b038 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	50                   	push   eax
c001b00b:	e8 7c 48 ff ff       	call   c000f88c <malloc>
c001b010:	89 c6                	mov    esi,eax
c001b012:	58                   	pop    eax
c001b013:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b015:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b019:	52                   	push   edx
c001b01a:	56                   	push   esi
c001b01b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b01f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b023:	53                   	push   ebx
c001b024:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b027:	83 c4 20             	add    esp,0x20
c001b02a:	85 c0                	test   eax,eax
c001b02c:	75 0a                	jne    c001b038 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b02e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b032:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b036:	74 18                	je     c001b050 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b038:	83 ec 0c             	sub    esp,0xc
c001b03b:	53                   	push   ebx
c001b03c:	e8 7d 80 ff ff       	call   c00130be <File::close()>
c001b041:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b043:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b046:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b049:	83 c4 10             	add    esp,0x10
c001b04c:	31 c0                	xor    eax,eax
c001b04e:	eb 3b                	jmp    c001b08b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b050:	83 ec 0c             	sub    esp,0xc
c001b053:	53                   	push   ebx
c001b054:	e8 65 80 ff ff       	call   c00130be <File::close()>
c001b059:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b05b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b05e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b061:	83 c4 0c             	add    esp,0xc
c001b064:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b06b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b072:	56                   	push   esi
c001b073:	e8 70 fd ff ff       	call   c001ade8 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b078:	89 34 24             	mov    DWORD PTR [esp],esi
c001b07b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b07f:	e8 18 48 ff ff       	call   c000f89c <free>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b08b:	81 c4 20 01 00 00    	add    esp,0x120
c001b091:	5b                   	pop    ebx
c001b092:	5e                   	pop    esi
c001b093:	5f                   	pop    edi
c001b094:	c3                   	ret    

c001b095 <Reg::getLine(char*, char*, char*)>:
c001b095:	57                   	push   edi
c001b096:	56                   	push   esi
c001b097:	53                   	push   ebx
c001b098:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b09c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0a0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0a4:	57                   	push   edi
c001b0a5:	56                   	push   esi
c001b0a6:	53                   	push   ebx
c001b0a7:	68 a9 c8 02 c0       	push   0xc002c8a9
c001b0ac:	e8 8f fe ff ff       	call   c001af40 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0b1:	83 c4 10             	add    esp,0x10
c001b0b4:	84 c0                	test   al,al
c001b0b6:	75 10                	jne    c001b0c8 <Reg::getLine(char*, char*, char*)+0x33>
c001b0b8:	57                   	push   edi
c001b0b9:	56                   	push   esi
c001b0ba:	53                   	push   ebx
c001b0bb:	68 ce c8 02 c0       	push   0xc002c8ce
c001b0c0:	e8 7b fe ff ff       	call   c001af40 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0c5:	83 c4 10             	add    esp,0x10
c001b0c8:	5b                   	pop    ebx
c001b0c9:	5e                   	pop    esi
c001b0ca:	5f                   	pop    edi
c001b0cb:	c3                   	ret    

c001b0cc <Reg::readInt(char*, char*, int*)>:
c001b0cc:	55                   	push   ebp
c001b0cd:	57                   	push   edi
c001b0ce:	56                   	push   esi
c001b0cf:	53                   	push   ebx
c001b0d0:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0d6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0da:	57                   	push   edi
c001b0db:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0e2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0e9:	e8 a7 ff ff ff       	call   c001b095 <Reg::getLine(char*, char*, char*)>
c001b0ee:	83 c4 10             	add    esp,0x10
c001b0f1:	84 c0                	test   al,al
c001b0f3:	0f 84 b3 00 00 00    	je     c001b1ac <Reg::readInt(char*, char*, int*)+0xe0>
c001b0f9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0fd:	80 fa 2b             	cmp    dl,0x2b
c001b100:	74 0c                	je     c001b10e <Reg::readInt(char*, char*, int*)+0x42>
c001b102:	80 fa 2d             	cmp    dl,0x2d
c001b105:	75 0e                	jne    c001b115 <Reg::readInt(char*, char*, int*)+0x49>
c001b107:	ba 01 00 00 00       	mov    edx,0x1
c001b10c:	eb 0b                	jmp    c001b119 <Reg::readInt(char*, char*, int*)+0x4d>
c001b10e:	ba 01 00 00 00       	mov    edx,0x1
c001b113:	eb 02                	jmp    c001b117 <Reg::readInt(char*, char*, int*)+0x4b>
c001b115:	31 d2                	xor    edx,edx
c001b117:	31 c0                	xor    eax,eax
c001b119:	be 0a 00 00 00       	mov    esi,0xa
c001b11e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b123:	75 20                	jne    c001b145 <Reg::readInt(char*, char*, int*)+0x79>
c001b125:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b129:	80 f9 78             	cmp    cl,0x78
c001b12c:	75 0a                	jne    c001b138 <Reg::readInt(char*, char*, int*)+0x6c>
c001b12e:	83 c2 02             	add    edx,0x2
c001b131:	be 10 00 00 00       	mov    esi,0x10
c001b136:	eb 0d                	jmp    c001b145 <Reg::readInt(char*, char*, int*)+0x79>
c001b138:	80 f9 62             	cmp    cl,0x62
c001b13b:	75 08                	jne    c001b145 <Reg::readInt(char*, char*, int*)+0x79>
c001b13d:	83 c2 02             	add    edx,0x2
c001b140:	be 02 00 00 00       	mov    esi,0x2
c001b145:	01 d7                	add    edi,edx
c001b147:	31 d2                	xor    edx,edx
c001b149:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b14b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b14f:	80 fb 0d             	cmp    bl,0xd
c001b152:	0f 94 c3             	sete   bl
c001b155:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b15a:	0f 94 c1             	sete   cl
c001b15d:	08 cb                	or     bl,cl
c001b15f:	75 3a                	jne    c001b19b <Reg::readInt(char*, char*, int*)+0xcf>
c001b161:	0f af d6             	imul   edx,esi
c001b164:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b169:	83 fe 10             	cmp    esi,0x10
c001b16c:	75 26                	jne    c001b194 <Reg::readInt(char*, char*, int*)+0xc8>
c001b16e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b172:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b175:	89 e9                	mov    ecx,ebp
c001b177:	80 f9 05             	cmp    cl,0x5
c001b17a:	77 06                	ja     c001b182 <Reg::readInt(char*, char*, int*)+0xb6>
c001b17c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b180:	eb 16                	jmp    c001b198 <Reg::readInt(char*, char*, int*)+0xcc>
c001b182:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b186:	83 e9 61             	sub    ecx,0x61
c001b189:	80 f9 05             	cmp    cl,0x5
c001b18c:	77 06                	ja     c001b194 <Reg::readInt(char*, char*, int*)+0xc8>
c001b18e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b192:	eb 04                	jmp    c001b198 <Reg::readInt(char*, char*, int*)+0xcc>
c001b194:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b198:	47                   	inc    edi
c001b199:	eb ae                	jmp    c001b149 <Reg::readInt(char*, char*, int*)+0x7d>
c001b19b:	84 c0                	test   al,al
c001b19d:	74 02                	je     c001b1a1 <Reg::readInt(char*, char*, int*)+0xd5>
c001b19f:	f7 da                	neg    edx
c001b1a1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1a8:	89 10                	mov    DWORD PTR [eax],edx
c001b1aa:	88 d8                	mov    al,bl
c001b1ac:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1b2:	5b                   	pop    ebx
c001b1b3:	5e                   	pop    esi
c001b1b4:	5f                   	pop    edi
c001b1b5:	5d                   	pop    ebp
c001b1b6:	c3                   	ret    

c001b1b7 <Reg::readString(char*, char*, char*, int)>:
c001b1b7:	57                   	push   edi
c001b1b8:	56                   	push   esi
c001b1b9:	53                   	push   ebx
c001b1ba:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1c0:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1c7:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1cb:	57                   	push   edi
c001b1cc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1d3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1da:	e8 b6 fe ff ff       	call   c001b095 <Reg::getLine(char*, char*, char*)>
c001b1df:	83 c4 10             	add    esp,0x10
c001b1e2:	89 c6                	mov    esi,eax
c001b1e4:	84 c0                	test   al,al
c001b1e6:	74 44                	je     c001b22c <Reg::readString(char*, char*, char*, int)+0x75>
c001b1e8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1ef:	31 c0                	xor    eax,eax
c001b1f1:	4a                   	dec    edx
c001b1f2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1f5:	84 c9                	test   cl,cl
c001b1f7:	74 0f                	je     c001b208 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1f9:	39 c2                	cmp    edx,eax
c001b1fb:	7e 0b                	jle    c001b208 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1fd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b200:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b205:	40                   	inc    eax
c001b206:	eb ea                	jmp    c001b1f2 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b208:	83 ec 0c             	sub    esp,0xc
c001b20b:	53                   	push   ebx
c001b20c:	e8 5b 55 fe ff       	call   c000076c <strlen>
c001b211:	83 c4 10             	add    esp,0x10
c001b214:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b219:	75 11                	jne    c001b22c <Reg::readString(char*, char*, char*, int)+0x75>
c001b21b:	83 ec 0c             	sub    esp,0xc
c001b21e:	53                   	push   ebx
c001b21f:	e8 48 55 fe ff       	call   c000076c <strlen>
c001b224:	83 c4 10             	add    esp,0x10
c001b227:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b22c:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b232:	89 f0                	mov    eax,esi
c001b234:	5b                   	pop    ebx
c001b235:	5e                   	pop    esi
c001b236:	5f                   	pop    edi
c001b237:	c3                   	ret    

c001b238 <Reg::readBool(char*, char*, bool*)>:
c001b238:	83 ec 20             	sub    esp,0x20
c001b23b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b23f:	50                   	push   eax
c001b240:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b244:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b248:	e8 7f fe ff ff       	call   c001b0cc <Reg::readInt(char*, char*, int*)>
c001b24d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b252:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b256:	0f 95 02             	setne  BYTE PTR [edx]
c001b259:	83 c4 2c             	add    esp,0x2c
c001b25c:	c3                   	ret    

c001b25d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b25d:	53                   	push   ebx
c001b25e:	83 ec 1c             	sub    esp,0x1c
c001b261:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b265:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b269:	50                   	push   eax
c001b26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b272:	e8 c1 ff ff ff       	call   c001b238 <Reg::readBool(char*, char*, bool*)>
c001b277:	83 c4 10             	add    esp,0x10
c001b27a:	84 c0                	test   al,al
c001b27c:	74 04                	je     c001b282 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b27e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b282:	88 d8                	mov    al,bl
c001b284:	83 c4 18             	add    esp,0x18
c001b287:	5b                   	pop    ebx
c001b288:	c3                   	ret    

c001b289 <Reg::readIntWithDefault(char*, char*, int)>:
c001b289:	53                   	push   ebx
c001b28a:	83 ec 1c             	sub    esp,0x1c
c001b28d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b291:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b295:	50                   	push   eax
c001b296:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b29e:	e8 29 fe ff ff       	call   c001b0cc <Reg::readInt(char*, char*, int*)>
c001b2a3:	83 c4 10             	add    esp,0x10
c001b2a6:	84 c0                	test   al,al
c001b2a8:	74 04                	je     c001b2ae <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2aa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2ae:	89 d8                	mov    eax,ebx
c001b2b0:	83 c4 18             	add    esp,0x18
c001b2b3:	5b                   	pop    ebx
c001b2b4:	c3                   	ret    

c001b2b5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2b5:	57                   	push   edi
c001b2b6:	56                   	push   esi
c001b2b7:	56                   	push   esi
c001b2b8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b2bc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2c0:	56                   	push   esi
c001b2c1:	57                   	push   edi
c001b2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2ca:	e8 e8 fe ff ff       	call   c001b1b7 <Reg::readString(char*, char*, char*, int)>
c001b2cf:	83 c4 10             	add    esp,0x10
c001b2d2:	84 c0                	test   al,al
c001b2d4:	75 1a                	jne    c001b2f0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b2d6:	51                   	push   ecx
c001b2d7:	56                   	push   esi
c001b2d8:	6a 00                	push   0x0
c001b2da:	57                   	push   edi
c001b2db:	e8 70 54 fe ff       	call   c0000750 <memset>
c001b2e0:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b2e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2e9:	83 c4 10             	add    esp,0x10
c001b2ec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2f0:	89 f8                	mov    eax,edi
c001b2f2:	5a                   	pop    edx
c001b2f3:	5e                   	pop    esi
c001b2f4:	5f                   	pop    edi
c001b2f5:	c3                   	ret    

c001b2f6 <Sys::eject(regs*)>:
c001b2f6:	83 ec 0c             	sub    esp,0xc
c001b2f9:	83 ca ff             	or     edx,0xffffffff
c001b2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b300:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b303:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b308:	83 e9 41             	sub    ecx,0x41
c001b30b:	83 f9 19             	cmp    ecx,0x19
c001b30e:	77 18                	ja     c001b328 <Sys::eject(regs*)+0x32>
c001b310:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c001b317:	85 c9                	test   ecx,ecx
c001b319:	74 0d                	je     c001b328 <Sys::eject(regs*)+0x32>
c001b31b:	83 ec 0c             	sub    esp,0xc
c001b31e:	51                   	push   ecx
c001b31f:	e8 8c b0 ff ff       	call   c00163b0 <LogicalDisk::eject()>
c001b324:	83 c4 10             	add    esp,0x10
c001b327:	99                   	cdq    
c001b328:	83 c4 0c             	add    esp,0xc
c001b32b:	c3                   	ret    

c001b32c <Sys::exit(regs*)>:
c001b32c:	83 ec 18             	sub    esp,0x18
c001b32f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b333:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b336:	e8 7e 38 00 00       	call   c001ebb9 <terminateTask(int)>
c001b33b:	83 c8 ff             	or     eax,0xffffffff
c001b33e:	83 c4 1c             	add    esp,0x1c
c001b341:	89 c2                	mov    edx,eax
c001b343:	c3                   	ret    

c001b344 <Sys::getCwd(regs*)>:
c001b344:	83 ec 10             	sub    esp,0x10
c001b347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b34b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b34e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b351:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b356:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b359:	e8 a0 7a ff ff       	call   c0012dfe <Fs::getcwd(Process*, char*, int)>
c001b35e:	83 c4 1c             	add    esp,0x1c
c001b361:	99                   	cdq    
c001b362:	c3                   	ret    

c001b363 <Sys::getPID(regs*)>:
c001b363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b368:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b36b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b36d:	99                   	cdq    
c001b36e:	c3                   	ret    

c001b36f <Sys::getRAMData(regs*)>:
c001b36f:	8b 0d 34 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f134
c001b375:	6b 05 30 f1 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f130,0x64
c001b37c:	99                   	cdq    
c001b37d:	f7 f9                	idiv   ecx
c001b37f:	c1 e0 18             	shl    eax,0x18
c001b382:	09 c8                	or     eax,ecx
c001b384:	99                   	cdq    
c001b385:	c3                   	ret    

c001b386 <Sys::getVGAPtr(regs*)>:
c001b386:	55                   	push   ebp
c001b387:	57                   	push   edi
c001b388:	56                   	push   esi
c001b389:	53                   	push   ebx
c001b38a:	83 ec 18             	sub    esp,0x18
c001b38d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b391:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b394:	e8 02 33 00 00       	call   c001e69b <Thr::processFromPID(int)>
c001b399:	83 c4 10             	add    esp,0x10
c001b39c:	89 c1                	mov    ecx,eax
c001b39e:	b8 01 00 00 00       	mov    eax,0x1
c001b3a3:	85 c9                	test   ecx,ecx
c001b3a5:	74 59                	je     c001b400 <Sys::getVGAPtr(regs*)+0x7a>
c001b3a7:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b3ad:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b3b1:	74 0c                	je     c001b3bf <Sys::getVGAPtr(regs*)+0x39>
c001b3b3:	83 ec 0c             	sub    esp,0xc
c001b3b6:	53                   	push   ebx
c001b3b7:	e8 04 55 ff ff       	call   c00108c0 <setActiveTerminal(VgaText*)>
c001b3bc:	83 c4 10             	add    esp,0x10
c001b3bf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b3c2:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b3c5:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b3ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b3cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b3cf:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b3d2:	81 c3 82 00 00 00    	add    ebx,0x82
c001b3d8:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b3de:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b3e1:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b3e4:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b3ea:	50                   	push   eax
c001b3eb:	50                   	push   eax
c001b3ec:	53                   	push   ebx
c001b3ed:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b3f0:	05 a8 0f 00 00       	add    eax,0xfa8
c001b3f5:	50                   	push   eax
c001b3f6:	e8 11 54 fe ff       	call   c000080c <strcpy>
c001b3fb:	83 c4 10             	add    esp,0x10
c001b3fe:	31 c0                	xor    eax,eax
c001b400:	83 c4 0c             	add    esp,0xc
c001b403:	31 d2                	xor    edx,edx
c001b405:	5b                   	pop    ebx
c001b406:	5e                   	pop    esi
c001b407:	5f                   	pop    edi
c001b408:	5d                   	pop    ebp
c001b409:	c3                   	ret    

c001b40a <Sys::loadDLL(regs*)>:
c001b40a:	56                   	push   esi
c001b40b:	53                   	push   ebx
c001b40c:	31 d2                	xor    edx,edx
c001b40e:	51                   	push   ecx
c001b40f:	b8 01 00 00 00       	mov    eax,0x1
c001b414:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b418:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b41c:	0f 84 8c 00 00 00    	je     c001b4ae <Sys::loadDLL(regs*)+0xa4>
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	68 14 01 00 00       	push   0x114
c001b42a:	e8 5d 44 ff ff       	call   c000f88c <malloc>
c001b42f:	83 c4 0c             	add    esp,0xc
c001b432:	89 c3                	mov    ebx,eax
c001b434:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b439:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b43c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b43f:	53                   	push   ebx
c001b440:	e8 b7 7b ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001b445:	83 c4 10             	add    esp,0x10
c001b448:	31 d2                	xor    edx,edx
c001b44a:	b8 02 00 00 00       	mov    eax,0x2
c001b44f:	85 db                	test   ebx,ebx
c001b451:	74 5b                	je     c001b4ae <Sys::loadDLL(regs*)+0xa4>
c001b453:	83 ec 0c             	sub    esp,0xc
c001b456:	53                   	push   ebx
c001b457:	e8 72 7e ff ff       	call   c00132ce <File::exists()>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	84 c0                	test   al,al
c001b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b463:	75 11                	jne    c001b476 <Sys::loadDLL(regs*)+0x6c>
c001b465:	83 ec 0c             	sub    esp,0xc
c001b468:	53                   	push   ebx
c001b469:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b46c:	83 c4 10             	add    esp,0x10
c001b46f:	b8 03 00 00 00       	mov    eax,0x3
c001b474:	eb 36                	jmp    c001b4ac <Sys::loadDLL(regs*)+0xa2>
c001b476:	83 ec 0c             	sub    esp,0xc
c001b479:	53                   	push   ebx
c001b47a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b47d:	58                   	pop    eax
c001b47e:	5a                   	pop    edx
c001b47f:	6a 00                	push   0x0
c001b481:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b484:	e8 1e 24 00 00       	call   c001d8a7 <Thr::loadDLL(char const*, bool)>
c001b489:	83 c4 10             	add    esp,0x10
c001b48c:	89 c1                	mov    ecx,eax
c001b48e:	31 d2                	xor    edx,edx
c001b490:	b8 04 00 00 00       	mov    eax,0x4
c001b495:	85 c9                	test   ecx,ecx
c001b497:	74 15                	je     c001b4ae <Sys::loadDLL(regs*)+0xa4>
c001b499:	53                   	push   ebx
c001b49a:	53                   	push   ebx
c001b49b:	ff 35 e8 f0 02 c0    	push   DWORD PTR ds:0xc002f0e8
c001b4a1:	51                   	push   ecx
c001b4a2:	e8 2b 26 00 00       	call   c001dad2 <Thr::executeDLL(unsigned long, void*)>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	31 c0                	xor    eax,eax
c001b4ac:	31 d2                	xor    edx,edx
c001b4ae:	59                   	pop    ecx
c001b4af:	5b                   	pop    ebx
c001b4b0:	5e                   	pop    esi
c001b4b1:	c3                   	ret    

c001b4b2 <Sys::read(regs*)>:
c001b4b2:	57                   	push   edi
c001b4b3:	56                   	push   esi
c001b4b4:	53                   	push   ebx
c001b4b5:	83 ec 10             	sub    esp,0x10
c001b4b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4bf:	83 f8 02             	cmp    eax,0x2
c001b4c2:	77 10                	ja     c001b4d4 <Sys::read(regs*)+0x22>
c001b4c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4cc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b4d2:	eb 0e                	jmp    c001b4e2 <Sys::read(regs*)+0x30>
c001b4d4:	83 ec 0c             	sub    esp,0xc
c001b4d7:	50                   	push   eax
c001b4d8:	e8 64 60 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001b4dd:	83 c4 10             	add    esp,0x10
c001b4e0:	89 c1                	mov    ecx,eax
c001b4e2:	83 c8 ff             	or     eax,0xffffffff
c001b4e5:	85 c9                	test   ecx,ecx
c001b4e7:	89 c2                	mov    edx,eax
c001b4e9:	74 28                	je     c001b513 <Sys::read(regs*)+0x61>
c001b4eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4f3:	31 ff                	xor    edi,edi
c001b4f5:	83 ec 0c             	sub    esp,0xc
c001b4f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4fa:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4fe:	52                   	push   edx
c001b4ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b502:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b505:	57                   	push   edi
c001b506:	56                   	push   esi
c001b507:	51                   	push   ecx
c001b508:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b50b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b50f:	83 c4 20             	add    esp,0x20
c001b512:	99                   	cdq    
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	5b                   	pop    ebx
c001b517:	5e                   	pop    esi
c001b518:	5f                   	pop    edi
c001b519:	c3                   	ret    

c001b51a <Sys::sbrk(regs*)>:
c001b51a:	56                   	push   esi
c001b51b:	53                   	push   ebx
c001b51c:	50                   	push   eax
c001b51d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b522:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b526:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b529:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b52c:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b532:	85 db                	test   ebx,ebx
c001b534:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b537:	74 02                	je     c001b53b <Sys::sbrk(regs*)+0x21>
c001b539:	79 06                	jns    c001b541 <Sys::sbrk(regs*)+0x27>
c001b53b:	89 f0                	mov    eax,esi
c001b53d:	31 d2                	xor    edx,edx
c001b53f:	eb 2a                	jmp    c001b56b <Sys::sbrk(regs*)+0x51>
c001b541:	83 c8 ff             	or     eax,0xffffffff
c001b544:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b54a:	89 c2                	mov    edx,eax
c001b54c:	77 1d                	ja     c001b56b <Sys::sbrk(regs*)+0x51>
c001b54e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b554:	50                   	push   eax
c001b555:	c1 ea 0c             	shr    edx,0xc
c001b558:	68 07 0c 00 00       	push   0xc07
c001b55d:	52                   	push   edx
c001b55e:	51                   	push   ecx
c001b55f:	e8 6c 6a ff ff       	call   c0011fd0 <VAS::allocatePages(int, int)>
c001b564:	89 f0                	mov    eax,esi
c001b566:	31 d2                	xor    edx,edx
c001b568:	83 c4 10             	add    esp,0x10
c001b56b:	59                   	pop    ecx
c001b56c:	5b                   	pop    ebx
c001b56d:	5e                   	pop    esi
c001b56e:	c3                   	ret    

c001b56f <Sys::setCwd(regs*)>:
c001b56f:	83 ec 14             	sub    esp,0x14
c001b572:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b576:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b57e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b581:	e8 e7 7d ff ff       	call   c001336d <Fs::setcwd(Process*, char*)>
c001b586:	83 c4 1c             	add    esp,0x1c
c001b589:	99                   	cdq    
c001b58a:	c3                   	ret    

c001b58b <Sys::setTime(regs*)>:
c001b58b:	55                   	push   ebp
c001b58c:	31 d2                	xor    edx,edx
c001b58e:	57                   	push   edi
c001b58f:	bf 18 00 00 00       	mov    edi,0x18
c001b594:	56                   	push   esi
c001b595:	53                   	push   ebx
c001b596:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b59b:	83 ec 30             	sub    esp,0x30
c001b59e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b5a2:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b5a5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b5a8:	f7 f3                	div    ebx
c001b5aa:	89 d6                	mov    esi,edx
c001b5ac:	31 d2                	xor    edx,edx
c001b5ae:	f7 f3                	div    ebx
c001b5b0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b5b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b5b7:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b5bc:	31 d2                	xor    edx,edx
c001b5be:	f7 f3                	div    ebx
c001b5c0:	31 d2                	xor    edx,edx
c001b5c2:	bb 0c 00 00 00       	mov    ebx,0xc
c001b5c7:	f7 f7                	div    edi
c001b5c9:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b5cc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5d0:	0f b7 cd             	movzx  ecx,bp
c001b5d3:	56                   	push   esi
c001b5d4:	89 c7                	mov    edi,eax
c001b5d6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b5da:	c1 e6 10             	shl    esi,0x10
c001b5dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5e1:	83 e7 1f             	and    edi,0x1f
c001b5e4:	51                   	push   ecx
c001b5e5:	47                   	inc    edi
c001b5e6:	c1 e8 05             	shr    eax,0x5
c001b5e9:	31 d2                	xor    edx,edx
c001b5eb:	f7 f3                	div    ebx
c001b5ed:	31 db                	xor    ebx,ebx
c001b5ef:	52                   	push   edx
c001b5f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b5f4:	57                   	push   edi
c001b5f5:	68 e9 c8 02 c0       	push   0xc002c8e9
c001b5fa:	e8 9e 74 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001b5ff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b603:	89 f8                	mov    eax,edi
c001b605:	31 c9                	xor    ecx,ecx
c001b607:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b60b:	88 c1                	mov    cl,al
c001b60d:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b613:	88 d5                	mov    ch,dl
c001b615:	c1 e0 10             	shl    eax,0x10
c001b618:	0f b7 d1             	movzx  edx,cx
c001b61b:	09 c2                	or     edx,eax
c001b61d:	89 d8                	mov    eax,ebx
c001b61f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b624:	09 f0                	or     eax,esi
c001b626:	89 c3                	mov    ebx,eax
c001b628:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b62c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b630:	83 c4 18             	add    esp,0x18
c001b633:	53                   	push   ebx
c001b634:	52                   	push   edx
c001b635:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b639:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b63d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b641:	e8 49 84 ff ff       	call   c0013a8f <datetimeToSeconds(datetime_t)>
c001b646:	83 c4 0c             	add    esp,0xc
c001b649:	52                   	push   edx
c001b64a:	50                   	push   eax
c001b64b:	56                   	push   esi
c001b64c:	e8 c5 85 ff ff       	call   c0013c16 <secondsToDatetime(unsigned long long)>
c001b651:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b655:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b659:	51                   	push   ecx
c001b65a:	89 d6                	mov    esi,edx
c001b65c:	51                   	push   ecx
c001b65d:	c1 ee 10             	shr    esi,0x10
c001b660:	89 f3                	mov    ebx,esi
c001b662:	0f b6 f3             	movzx  esi,bl
c001b665:	56                   	push   esi
c001b666:	0f b6 f6             	movzx  esi,dh
c001b669:	0f b6 d2             	movzx  edx,dl
c001b66c:	56                   	push   esi
c001b66d:	52                   	push   edx
c001b66e:	89 c2                	mov    edx,eax
c001b670:	c1 ea 10             	shr    edx,0x10
c001b673:	52                   	push   edx
c001b674:	0f b6 d4             	movzx  edx,ah
c001b677:	0f b6 c0             	movzx  eax,al
c001b67a:	52                   	push   edx
c001b67b:	50                   	push   eax
c001b67c:	68 05 c9 02 c0       	push   0xc002c905
c001b681:	e8 17 74 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001b686:	83 c4 2c             	add    esp,0x2c
c001b689:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001b68e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b692:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b696:	53                   	push   ebx
c001b697:	51                   	push   ecx
c001b698:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b69e:	e8 13 85 ff ff       	call   c0013bb6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b6a3:	83 f0 01             	xor    eax,0x1
c001b6a6:	31 d2                	xor    edx,edx
c001b6a8:	0f b6 c0             	movzx  eax,al
c001b6ab:	83 c4 3c             	add    esp,0x3c
c001b6ae:	5b                   	pop    ebx
c001b6af:	5e                   	pop    esi
c001b6b0:	5f                   	pop    edi
c001b6b1:	5d                   	pop    ebp
c001b6b2:	c3                   	ret    

c001b6b3 <Sys::timezone(regs*)>:
c001b6b3:	53                   	push   ebx
c001b6b4:	83 ec 08             	sub    esp,0x8
c001b6b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6bb:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b6bf:	75 17                	jne    c001b6d8 <Sys::timezone(regs*)+0x25>
c001b6c1:	83 ec 0c             	sub    esp,0xc
c001b6c4:	68 21 c9 02 c0       	push   0xc002c921
c001b6c9:	e8 cf 73 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001b6ce:	83 c8 ff             	or     eax,0xffffffff
c001b6d1:	83 c4 10             	add    esp,0x10
c001b6d4:	89 c2                	mov    edx,eax
c001b6d6:	eb 20                	jmp    c001b6f8 <Sys::timezone(regs*)+0x45>
c001b6d8:	83 ec 0c             	sub    esp,0xc
c001b6db:	68 59 c9 02 c0       	push   0xc002c959
c001b6e0:	e8 b8 73 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001b6e5:	58                   	pop    eax
c001b6e6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b6e9:	e8 2a 82 ff ff       	call   c0013918 <User::loadClockSettings(int)>
c001b6ee:	83 c4 10             	add    esp,0x10
c001b6f1:	b8 01 00 00 00       	mov    eax,0x1
c001b6f6:	31 d2                	xor    edx,edx
c001b6f8:	83 c4 08             	add    esp,0x8
c001b6fb:	5b                   	pop    ebx
c001b6fc:	c3                   	ret    

c001b6fd <Sys::write(regs*)>:
c001b6fd:	57                   	push   edi
c001b6fe:	56                   	push   esi
c001b6ff:	53                   	push   ebx
c001b700:	83 ec 10             	sub    esp,0x10
c001b703:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b707:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b70a:	83 f8 02             	cmp    eax,0x2
c001b70d:	77 10                	ja     c001b71f <Sys::write(regs*)+0x22>
c001b70f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b714:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b717:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b71d:	eb 0e                	jmp    c001b72d <Sys::write(regs*)+0x30>
c001b71f:	83 ec 0c             	sub    esp,0xc
c001b722:	50                   	push   eax
c001b723:	e8 19 5e ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001b728:	83 c4 10             	add    esp,0x10
c001b72b:	89 c1                	mov    ecx,eax
c001b72d:	83 c8 ff             	or     eax,0xffffffff
c001b730:	85 c9                	test   ecx,ecx
c001b732:	89 c2                	mov    edx,eax
c001b734:	74 28                	je     c001b75e <Sys::write(regs*)+0x61>
c001b736:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b73e:	31 ff                	xor    edi,edi
c001b740:	83 ec 0c             	sub    esp,0xc
c001b743:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b745:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b749:	52                   	push   edx
c001b74a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b74d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b750:	57                   	push   edi
c001b751:	56                   	push   esi
c001b752:	51                   	push   ecx
c001b753:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b75a:	83 c4 20             	add    esp,0x20
c001b75d:	99                   	cdq    
c001b75e:	83 c4 10             	add    esp,0x10
c001b761:	5b                   	pop    ebx
c001b762:	5e                   	pop    esi
c001b763:	5f                   	pop    edi
c001b764:	c3                   	ret    

c001b765 <Sys::wsbe(regs*)>:
c001b765:	57                   	push   edi
c001b766:	b9 0b 00 00 00       	mov    ecx,0xb
c001b76b:	56                   	push   esi
c001b76c:	be 98 c9 02 c0       	mov    esi,0xc002c998
c001b771:	53                   	push   ebx
c001b772:	83 ec 30             	sub    esp,0x30
c001b775:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b779:	fc                   	cld    
c001b77a:	83 ec 0c             	sub    esp,0xc
c001b77d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b77f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b783:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b788:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b78b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b791:	8b 06                	mov    eax,DWORD PTR [esi]
c001b793:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b796:	57                   	push   edi
c001b797:	e8 d0 4f fe ff       	call   c000076c <strlen>
c001b79c:	5a                   	pop    edx
c001b79d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b7a1:	52                   	push   edx
c001b7a2:	31 d2                	xor    edx,edx
c001b7a4:	57                   	push   edi
c001b7a5:	52                   	push   edx
c001b7a6:	50                   	push   eax
c001b7a7:	56                   	push   esi
c001b7a8:	ff d3                	call   ebx
c001b7aa:	83 c4 14             	add    esp,0x14
c001b7ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b7b1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b7b4:	e8 00 34 00 00       	call   c001ebb9 <terminateTask(int)>
c001b7b9:	83 c4 40             	add    esp,0x40
c001b7bc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b7c1:	5b                   	pop    ebx
c001b7c2:	31 d2                	xor    edx,edx
c001b7c4:	5e                   	pop    esi
c001b7c5:	5f                   	pop    edi
c001b7c6:	c3                   	ret    

c001b7c7 <Sys::yield(regs*)>:
c001b7c7:	57                   	push   edi
c001b7c8:	56                   	push   esi
c001b7c9:	53                   	push   ebx
c001b7ca:	fa                   	cli    
c001b7cb:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001b7d1:	e8 b0 2a 00 00       	call   c001e286 <schedule()>
c001b7d6:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001b7db:	48                   	dec    eax
c001b7dc:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001b7e1:	75 01                	jne    c001b7e4 <Sys::yield(regs*)+0x1d>
c001b7e3:	fb                   	sti    
c001b7e4:	8b 35 50 f7 02 c0    	mov    esi,DWORD PTR ds:0xc002f750
c001b7ea:	8b 3d 54 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f754
c001b7f0:	89 f0                	mov    eax,esi
c001b7f2:	89 fb                	mov    ebx,edi
c001b7f4:	89 f1                	mov    ecx,esi
c001b7f6:	c1 e0 07             	shl    eax,0x7
c001b7f9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b7fd:	25 80 30 0f 00       	and    eax,0xf3080
c001b802:	c1 eb 17             	shr    ebx,0x17
c001b805:	31 c8                	xor    eax,ecx
c001b807:	89 da                	mov    edx,ebx
c001b809:	5b                   	pop    ebx
c001b80a:	5e                   	pop    esi
c001b80b:	5f                   	pop    edi
c001b80c:	c3                   	ret    

c001b80d <sysCallSeekDir(regs*)>:
c001b80d:	31 c0                	xor    eax,eax
c001b80f:	31 d2                	xor    edx,edx
c001b811:	c3                   	ret    

c001b812 <sysCallTellDir(regs*)>:
c001b812:	31 c0                	xor    eax,eax
c001b814:	31 d2                	xor    edx,edx
c001b816:	c3                   	ret    

c001b817 <sysCallVerify(regs*)>:
c001b817:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b81b:	31 d2                	xor    edx,edx
c001b81d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b820:	c3                   	ret    

c001b821 <sysFormatDisk(regs*)>:
c001b821:	56                   	push   esi
c001b822:	53                   	push   ebx
c001b823:	53                   	push   ebx
c001b824:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b828:	8b 1d 54 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f254
c001b82e:	eb 25                	jmp    c001b855 <sysFormatDisk(regs*)+0x34>
c001b830:	83 ec 0c             	sub    esp,0xc
c001b833:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b836:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b838:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b83b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b83e:	50                   	push   eax
c001b83f:	ff 34 85 e0 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0920]
c001b846:	53                   	push   ebx
c001b847:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b84a:	83 c4 20             	add    esp,0x20
c001b84d:	83 f8 08             	cmp    eax,0x8
c001b850:	75 12                	jne    c001b864 <sysFormatDisk(regs*)+0x43>
c001b852:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b855:	85 db                	test   ebx,ebx
c001b857:	75 d7                	jne    c001b830 <sysFormatDisk(regs*)+0xf>
c001b859:	59                   	pop    ecx
c001b85a:	b8 03 00 00 00       	mov    eax,0x3
c001b85f:	31 d2                	xor    edx,edx
c001b861:	5b                   	pop    ebx
c001b862:	5e                   	pop    esi
c001b863:	c3                   	ret    
c001b864:	85 c0                	test   eax,eax
c001b866:	74 1b                	je     c001b883 <sysFormatDisk(regs*)+0x62>
c001b868:	83 f8 09             	cmp    eax,0x9
c001b86b:	74 0b                	je     c001b878 <sysFormatDisk(regs*)+0x57>
c001b86d:	59                   	pop    ecx
c001b86e:	b8 02 00 00 00       	mov    eax,0x2
c001b873:	31 d2                	xor    edx,edx
c001b875:	5b                   	pop    ebx
c001b876:	5e                   	pop    esi
c001b877:	c3                   	ret    
c001b878:	59                   	pop    ecx
c001b879:	b8 01 00 00 00       	mov    eax,0x1
c001b87e:	31 d2                	xor    edx,edx
c001b880:	5b                   	pop    ebx
c001b881:	5e                   	pop    esi
c001b882:	c3                   	ret    
c001b883:	59                   	pop    ecx
c001b884:	31 c0                	xor    eax,eax
c001b886:	31 d2                	xor    edx,edx
c001b888:	5b                   	pop    ebx
c001b889:	5e                   	pop    esi
c001b88a:	c3                   	ret    

c001b88b <sysSetDiskVolumeLabel(regs*)>:
c001b88b:	56                   	push   esi
c001b88c:	53                   	push   ebx
c001b88d:	53                   	push   ebx
c001b88e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b892:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b895:	83 f8 19             	cmp    eax,0x19
c001b898:	77 29                	ja     c001b8c3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b89a:	8b 0c 85 e0 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0920]
c001b8a1:	85 c9                	test   ecx,ecx
c001b8a3:	74 1e                	je     c001b8c3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b8a5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b8a8:	85 d2                	test   edx,edx
c001b8aa:	74 17                	je     c001b8c3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b8ac:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b8b2:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b8b4:	52                   	push   edx
c001b8b5:	50                   	push   eax
c001b8b6:	51                   	push   ecx
c001b8b7:	53                   	push   ebx
c001b8b8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b8bb:	83 c4 10             	add    esp,0x10
c001b8be:	99                   	cdq    
c001b8bf:	59                   	pop    ecx
c001b8c0:	5b                   	pop    ebx
c001b8c1:	5e                   	pop    esi
c001b8c2:	c3                   	ret    
c001b8c3:	59                   	pop    ecx
c001b8c4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8ce:	5b                   	pop    ebx
c001b8cf:	5e                   	pop    esi
c001b8d0:	c3                   	ret    

c001b8d1 <sysGetDiskVolumeLabel(regs*)>:
c001b8d1:	57                   	push   edi
c001b8d2:	56                   	push   esi
c001b8d3:	53                   	push   ebx
c001b8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b8db:	83 fa 19             	cmp    edx,0x19
c001b8de:	77 34                	ja     c001b914 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8e0:	8b 0c 95 e0 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0920]
c001b8e7:	85 c9                	test   ecx,ecx
c001b8e9:	74 29                	je     c001b914 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8eb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8ee:	85 db                	test   ebx,ebx
c001b8f0:	74 22                	je     c001b914 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b8f5:	85 c0                	test   eax,eax
c001b8f7:	74 1b                	je     c001b914 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8f9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b8ff:	83 ec 0c             	sub    esp,0xc
c001b902:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b904:	50                   	push   eax
c001b905:	53                   	push   ebx
c001b906:	52                   	push   edx
c001b907:	51                   	push   ecx
c001b908:	56                   	push   esi
c001b909:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b90c:	83 c4 20             	add    esp,0x20
c001b90f:	99                   	cdq    
c001b910:	5b                   	pop    ebx
c001b911:	5e                   	pop    esi
c001b912:	5f                   	pop    edi
c001b913:	c3                   	ret    
c001b914:	5b                   	pop    ebx
c001b915:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b91a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b91f:	5e                   	pop    esi
c001b920:	5f                   	pop    edi
c001b921:	c3                   	ret    

c001b922 <sysShutdown(regs*)>:
c001b922:	83 ec 0c             	sub    esp,0xc
c001b925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b929:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b92c:	85 c0                	test   eax,eax
c001b92e:	74 18                	je     c001b948 <sysShutdown(regs*)+0x26>
c001b930:	83 f8 01             	cmp    eax,0x1
c001b933:	74 38                	je     c001b96d <sysShutdown(regs*)+0x4b>
c001b935:	83 f8 02             	cmp    eax,0x2
c001b938:	74 24                	je     c001b95e <sysShutdown(regs*)+0x3c>
c001b93a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b93f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b944:	83 c4 0c             	add    esp,0xc
c001b947:	c3                   	ret    
c001b948:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001b94d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b94f:	6a 00                	push   0x0
c001b951:	6a 00                	push   0x0
c001b953:	6a 00                	push   0x0
c001b955:	50                   	push   eax
c001b956:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b959:	83 c4 10             	add    esp,0x10
c001b95c:	eb dc                	jmp    c001b93a <sysShutdown(regs*)+0x18>
c001b95e:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001b963:	8b 10                	mov    edx,DWORD PTR [eax]
c001b965:	6a 00                	push   0x0
c001b967:	6a 00                	push   0x0
c001b969:	6a 01                	push   0x1
c001b96b:	eb e8                	jmp    c001b955 <sysShutdown(regs*)+0x33>
c001b96d:	a1 80 17 03 c0       	mov    eax,ds:0xc0031780
c001b972:	85 c0                	test   eax,eax
c001b974:	74 02                	je     c001b978 <sysShutdown(regs*)+0x56>
c001b976:	ff d0                	call   eax
c001b978:	31 c0                	xor    eax,eax
c001b97a:	31 d2                	xor    edx,edx
c001b97c:	83 c4 0c             	add    esp,0xc
c001b97f:	c3                   	ret    

c001b980 <sysCallRealpath(regs*)>:
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b987:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b98a:	85 d2                	test   edx,edx
c001b98c:	74 07                	je     c001b995 <sysCallRealpath(regs*)+0x15>
c001b98e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b991:	85 c0                	test   eax,eax
c001b993:	75 0b                	jne    c001b9a0 <sysCallRealpath(regs*)+0x20>
c001b995:	b8 01 00 00 00       	mov    eax,0x1
c001b99a:	31 d2                	xor    edx,edx
c001b99c:	83 c4 0c             	add    esp,0xc
c001b99f:	c3                   	ret    
c001b9a0:	51                   	push   ecx
c001b9a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b9a7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b9aa:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b9b0:	51                   	push   ecx
c001b9b1:	52                   	push   edx
c001b9b2:	50                   	push   eax
c001b9b3:	e8 9a 74 ff ff       	call   c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	31 c0                	xor    eax,eax
c001b9bd:	31 d2                	xor    edx,edx
c001b9bf:	83 c4 0c             	add    esp,0xc
c001b9c2:	c3                   	ret    

c001b9c3 <sysCallGetArgc(regs*)>:
c001b9c3:	83 ec 14             	sub    esp,0x14
c001b9c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9ce:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b9d4:	68 c4 c9 02 c0       	push   0xc002c9c4
c001b9d9:	e8 bf 70 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001b9de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9e6:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b9ec:	83 c4 1c             	add    esp,0x1c
c001b9ef:	99                   	cdq    
c001b9f0:	c3                   	ret    

c001b9f1 <sysCallReadDir(regs*)>:
c001b9f1:	53                   	push   ebx
c001b9f2:	83 ec 18             	sub    esp,0x18
c001b9f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9fc:	83 f8 02             	cmp    eax,0x2
c001b9ff:	76 53                	jbe    c001ba54 <sysCallReadDir(regs*)+0x63>
c001ba01:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ba04:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ba0a:	77 4f                	ja     c001ba5b <sysCallReadDir(regs*)+0x6a>
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	50                   	push   eax
c001ba10:	e8 2c 5b ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001ba15:	83 c4 10             	add    esp,0x10
c001ba18:	85 c0                	test   eax,eax
c001ba1a:	74 50                	je     c001ba6c <sysCallReadDir(regs*)+0x7b>
c001ba1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba29:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ba2d:	51                   	push   ecx
c001ba2e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba31:	6a 00                	push   0x0
c001ba33:	68 10 01 00 00       	push   0x110
c001ba38:	50                   	push   eax
c001ba39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ba3c:	83 c4 20             	add    esp,0x20
c001ba3f:	85 c0                	test   eax,eax
c001ba41:	74 38                	je     c001ba7b <sysCallReadDir(regs*)+0x8a>
c001ba43:	83 f8 07             	cmp    eax,0x7
c001ba46:	74 0c                	je     c001ba54 <sysCallReadDir(regs*)+0x63>
c001ba48:	b8 02 00 00 00       	mov    eax,0x2
c001ba4d:	31 d2                	xor    edx,edx
c001ba4f:	83 c4 18             	add    esp,0x18
c001ba52:	5b                   	pop    ebx
c001ba53:	c3                   	ret    
c001ba54:	b8 01 00 00 00       	mov    eax,0x1
c001ba59:	eb f2                	jmp    c001ba4d <sysCallReadDir(regs*)+0x5c>
c001ba5b:	83 ec 08             	sub    esp,0x8
c001ba5e:	52                   	push   edx
c001ba5f:	68 e8 ca 02 c0       	push   0xc002cae8
c001ba64:	e8 34 70 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ba69:	83 c4 10             	add    esp,0x10
c001ba6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba71:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba76:	83 c4 18             	add    esp,0x18
c001ba79:	5b                   	pop    ebx
c001ba7a:	c3                   	ret    
c001ba7b:	31 c0                	xor    eax,eax
c001ba7d:	eb ce                	jmp    c001ba4d <sysCallReadDir(regs*)+0x5c>

c001ba7f <sysCallIsATTY(regs*)>:
c001ba7f:	83 ec 0c             	sub    esp,0xc
c001ba82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba89:	83 f8 02             	cmp    eax,0x2
c001ba8c:	76 07                	jbe    c001ba95 <sysCallIsATTY(regs*)+0x16>
c001ba8e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba93:	75 26                	jne    c001babb <sysCallIsATTY(regs*)+0x3c>
c001ba95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba9d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001baa3:	85 c0                	test   eax,eax
c001baa5:	74 24                	je     c001bacb <sysCallIsATTY(regs*)+0x4c>
c001baa7:	83 ec 0c             	sub    esp,0xc
c001baaa:	8b 10                	mov    edx,DWORD PTR [eax]
c001baac:	50                   	push   eax
c001baad:	ff 12                	call   DWORD PTR [edx]
c001baaf:	31 d2                	xor    edx,edx
c001bab1:	0f b6 c0             	movzx  eax,al
c001bab4:	83 c4 10             	add    esp,0x10
c001bab7:	83 c4 0c             	add    esp,0xc
c001baba:	c3                   	ret    
c001babb:	83 ec 0c             	sub    esp,0xc
c001babe:	50                   	push   eax
c001babf:	e8 7d 5a ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001bac4:	83 c4 10             	add    esp,0x10
c001bac7:	85 c0                	test   eax,eax
c001bac9:	75 dc                	jne    c001baa7 <sysCallIsATTY(regs*)+0x28>
c001bacb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad5:	83 c4 0c             	add    esp,0xc
c001bad8:	c3                   	ret    

c001bad9 <sysCallSeek(regs*)>:
c001bad9:	53                   	push   ebx
c001bada:	83 ec 08             	sub    esp,0x8
c001badd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bae1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bae4:	83 f8 02             	cmp    eax,0x2
c001bae7:	76 4a                	jbe    c001bb33 <sysCallSeek(regs*)+0x5a>
c001bae9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baee:	77 32                	ja     c001bb22 <sysCallSeek(regs*)+0x49>
c001baf0:	83 ec 0c             	sub    esp,0xc
c001baf3:	50                   	push   eax
c001baf4:	e8 48 5a ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001baf9:	83 c4 0c             	add    esp,0xc
c001bafc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001baff:	31 db                	xor    ebx,ebx
c001bb01:	53                   	push   ebx
c001bb02:	51                   	push   ecx
c001bb03:	50                   	push   eax
c001bb04:	e8 15 76 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001bb09:	83 c4 10             	add    esp,0x10
c001bb0c:	85 c0                	test   eax,eax
c001bb0e:	0f 95 c0             	setne  al
c001bb11:	31 d2                	xor    edx,edx
c001bb13:	0f b6 c0             	movzx  eax,al
c001bb16:	f7 d8                	neg    eax
c001bb18:	83 d2 00             	adc    edx,0x0
c001bb1b:	83 c4 08             	add    esp,0x8
c001bb1e:	f7 da                	neg    edx
c001bb20:	5b                   	pop    ebx
c001bb21:	c3                   	ret    
c001bb22:	83 ec 08             	sub    esp,0x8
c001bb25:	50                   	push   eax
c001bb26:	68 cf c9 02 c0       	push   0xc002c9cf
c001bb2b:	e8 6d 6f ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001bb30:	83 c4 10             	add    esp,0x10
c001bb33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb38:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb3d:	83 c4 08             	add    esp,0x8
c001bb40:	5b                   	pop    ebx
c001bb41:	c3                   	ret    

c001bb42 <sysCallTell(regs*)>:
c001bb42:	53                   	push   ebx
c001bb43:	83 ec 08             	sub    esp,0x8
c001bb46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb4d:	83 f8 02             	cmp    eax,0x2
c001bb50:	76 5e                	jbe    c001bbb0 <sysCallTell(regs*)+0x6e>
c001bb52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb57:	77 2d                	ja     c001bb86 <sysCallTell(regs*)+0x44>
c001bb59:	83 ec 0c             	sub    esp,0xc
c001bb5c:	50                   	push   eax
c001bb5d:	e8 df 59 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001bb62:	5a                   	pop    edx
c001bb63:	59                   	pop    ecx
c001bb64:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb67:	50                   	push   eax
c001bb68:	e8 07 76 ff ff       	call   c0013174 <File::tell(unsigned long long*)>
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	85 c0                	test   eax,eax
c001bb72:	0f 95 c0             	setne  al
c001bb75:	31 d2                	xor    edx,edx
c001bb77:	0f b6 c0             	movzx  eax,al
c001bb7a:	f7 d8                	neg    eax
c001bb7c:	83 d2 00             	adc    edx,0x0
c001bb7f:	83 c4 08             	add    esp,0x8
c001bb82:	f7 da                	neg    edx
c001bb84:	5b                   	pop    ebx
c001bb85:	c3                   	ret    
c001bb86:	83 ec 08             	sub    esp,0x8
c001bb89:	50                   	push   eax
c001bb8a:	68 e9 c9 02 c0       	push   0xc002c9e9
c001bb8f:	e8 09 6f ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001bb94:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bba0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bba7:	31 d2                	xor    edx,edx
c001bba9:	31 c0                	xor    eax,eax
c001bbab:	83 c4 08             	add    esp,0x8
c001bbae:	5b                   	pop    ebx
c001bbaf:	c3                   	ret    
c001bbb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbb5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbba:	83 c4 08             	add    esp,0x8
c001bbbd:	5b                   	pop    ebx
c001bbbe:	c3                   	ret    

c001bbbf <sysCallSize(regs*)>:
c001bbbf:	53                   	push   ebx
c001bbc0:	83 ec 18             	sub    esp,0x18
c001bbc3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbc7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbca:	83 f8 02             	cmp    eax,0x2
c001bbcd:	76 64                	jbe    c001bc33 <sysCallSize(regs*)+0x74>
c001bbcf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbd4:	77 33                	ja     c001bc09 <sysCallSize(regs*)+0x4a>
c001bbd6:	83 ec 0c             	sub    esp,0xc
c001bbd9:	50                   	push   eax
c001bbda:	e8 62 59 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001bbdf:	83 c4 0c             	add    esp,0xc
c001bbe2:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bbe6:	52                   	push   edx
c001bbe7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bbea:	50                   	push   eax
c001bbeb:	e8 1c 77 ff ff       	call   c001330c <File::stat(unsigned long long*, bool*)>
c001bbf0:	83 c4 10             	add    esp,0x10
c001bbf3:	85 c0                	test   eax,eax
c001bbf5:	0f 95 c0             	setne  al
c001bbf8:	31 d2                	xor    edx,edx
c001bbfa:	0f b6 c0             	movzx  eax,al
c001bbfd:	f7 d8                	neg    eax
c001bbff:	83 d2 00             	adc    edx,0x0
c001bc02:	83 c4 18             	add    esp,0x18
c001bc05:	f7 da                	neg    edx
c001bc07:	5b                   	pop    ebx
c001bc08:	c3                   	ret    
c001bc09:	83 ec 08             	sub    esp,0x8
c001bc0c:	50                   	push   eax
c001bc0d:	68 03 ca 02 c0       	push   0xc002ca03
c001bc12:	e8 86 6e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001bc17:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc2a:	31 d2                	xor    edx,edx
c001bc2c:	31 c0                	xor    eax,eax
c001bc2e:	83 c4 18             	add    esp,0x18
c001bc31:	5b                   	pop    ebx
c001bc32:	c3                   	ret    
c001bc33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc38:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc3d:	83 c4 18             	add    esp,0x18
c001bc40:	5b                   	pop    ebx
c001bc41:	c3                   	ret    

c001bc42 <sysCallSizeFromFilename(regs*)>:
c001bc42:	57                   	push   edi
c001bc43:	56                   	push   esi
c001bc44:	53                   	push   ebx
c001bc45:	83 ec 20             	sub    esp,0x20
c001bc48:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc4c:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bc4f:	83 fb 02             	cmp    ebx,0x2
c001bc52:	0f 86 99 00 00 00    	jbe    c001bcf1 <sysCallSizeFromFilename(regs*)+0xaf>
c001bc58:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bc5e:	77 65                	ja     c001bcc5 <sysCallSizeFromFilename(regs*)+0x83>
c001bc60:	83 ec 0c             	sub    esp,0xc
c001bc63:	68 14 01 00 00       	push   0x114
c001bc68:	e8 1f 3c ff ff       	call   c000f88c <malloc>
c001bc6d:	83 c4 0c             	add    esp,0xc
c001bc70:	89 c6                	mov    esi,eax
c001bc72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc77:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc7a:	53                   	push   ebx
c001bc7b:	56                   	push   esi
c001bc7c:	e8 7b 73 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001bc81:	83 c4 0c             	add    esp,0xc
c001bc84:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc88:	50                   	push   eax
c001bc89:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc8c:	56                   	push   esi
c001bc8d:	e8 7a 76 ff ff       	call   c001330c <File::stat(unsigned long long*, bool*)>
c001bc92:	83 c4 10             	add    esp,0x10
c001bc95:	85 f6                	test   esi,esi
c001bc97:	74 14                	je     c001bcad <sysCallSizeFromFilename(regs*)+0x6b>
c001bc99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc9d:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc9f:	83 ec 0c             	sub    esp,0xc
c001bca2:	56                   	push   esi
c001bca3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcad:	85 c0                	test   eax,eax
c001bcaf:	0f 95 c0             	setne  al
c001bcb2:	31 d2                	xor    edx,edx
c001bcb4:	0f b6 c0             	movzx  eax,al
c001bcb7:	f7 d8                	neg    eax
c001bcb9:	83 d2 00             	adc    edx,0x0
c001bcbc:	83 c4 20             	add    esp,0x20
c001bcbf:	f7 da                	neg    edx
c001bcc1:	5b                   	pop    ebx
c001bcc2:	5e                   	pop    esi
c001bcc3:	5f                   	pop    edi
c001bcc4:	c3                   	ret    
c001bcc5:	83 ec 08             	sub    esp,0x8
c001bcc8:	53                   	push   ebx
c001bcc9:	68 03 ca 02 c0       	push   0xc002ca03
c001bcce:	e8 ca 6d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001bcd3:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bcd6:	83 c4 10             	add    esp,0x10
c001bcd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bcdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bce6:	31 d2                	xor    edx,edx
c001bce8:	83 c4 20             	add    esp,0x20
c001bceb:	31 c0                	xor    eax,eax
c001bced:	5b                   	pop    ebx
c001bcee:	5e                   	pop    esi
c001bcef:	5f                   	pop    edi
c001bcf0:	c3                   	ret    
c001bcf1:	83 c4 20             	add    esp,0x20
c001bcf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcf9:	5b                   	pop    ebx
c001bcfa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcff:	5e                   	pop    esi
c001bd00:	5f                   	pop    edi
c001bd01:	c3                   	ret    

c001bd02 <sysCallClose(regs*)>:
c001bd02:	53                   	push   ebx
c001bd03:	83 ec 08             	sub    esp,0x8
c001bd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd0a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd0d:	83 f8 02             	cmp    eax,0x2
c001bd10:	76 50                	jbe    c001bd62 <sysCallClose(regs*)+0x60>
c001bd12:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bd17:	74 58                	je     c001bd71 <sysCallClose(regs*)+0x6f>
c001bd19:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd1e:	74 60                	je     c001bd80 <sysCallClose(regs*)+0x7e>
c001bd20:	77 2f                	ja     c001bd51 <sysCallClose(regs*)+0x4f>
c001bd22:	83 ec 0c             	sub    esp,0xc
c001bd25:	50                   	push   eax
c001bd26:	e8 16 58 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001bd2b:	89 c3                	mov    ebx,eax
c001bd2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd30:	e8 89 73 ff ff       	call   c00130be <File::close()>
c001bd35:	83 c4 10             	add    esp,0x10
c001bd38:	85 db                	test   ebx,ebx
c001bd3a:	74 0c                	je     c001bd48 <sysCallClose(regs*)+0x46>
c001bd3c:	83 ec 0c             	sub    esp,0xc
c001bd3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd41:	53                   	push   ebx
c001bd42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd45:	83 c4 10             	add    esp,0x10
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	31 d2                	xor    edx,edx
c001bd4c:	83 c4 08             	add    esp,0x8
c001bd4f:	5b                   	pop    ebx
c001bd50:	c3                   	ret    
c001bd51:	83 ec 08             	sub    esp,0x8
c001bd54:	50                   	push   eax
c001bd55:	68 0c cb 02 c0       	push   0xc002cb0c
c001bd5a:	e8 3e 6d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001bd5f:	83 c4 10             	add    esp,0x10
c001bd62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd67:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd6c:	83 c4 08             	add    esp,0x8
c001bd6f:	5b                   	pop    ebx
c001bd70:	c3                   	ret    
c001bd71:	83 ec 0c             	sub    esp,0xc
c001bd74:	68 1e ca 02 c0       	push   0xc002ca1e
c001bd79:	e8 1f 6d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001bd7e:	eb c5                	jmp    c001bd45 <sysCallClose(regs*)+0x43>
c001bd80:	83 ec 0c             	sub    esp,0xc
c001bd83:	68 2c ca 02 c0       	push   0xc002ca2c
c001bd88:	eb ef                	jmp    c001bd79 <sysCallClose(regs*)+0x77>

c001bd8a <sysCallOpenDir(regs*)>:
c001bd8a:	56                   	push   esi
c001bd8b:	53                   	push   ebx
c001bd8c:	53                   	push   ebx
c001bd8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd91:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd94:	85 f6                	test   esi,esi
c001bd96:	74 59                	je     c001bdf1 <sysCallOpenDir(regs*)+0x67>
c001bd98:	83 ec 0c             	sub    esp,0xc
c001bd9b:	68 14 01 00 00       	push   0x114
c001bda0:	e8 e7 3a ff ff       	call   c000f88c <malloc>
c001bda5:	83 c4 0c             	add    esp,0xc
c001bda8:	89 c6                	mov    esi,eax
c001bdaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdaf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdb2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdb5:	56                   	push   esi
c001bdb6:	e8 ed 76 ff ff       	call   c00134a8 <Directory::Directory(char const*, Process*)>
c001bdbb:	83 c4 10             	add    esp,0x10
c001bdbe:	85 f6                	test   esi,esi
c001bdc0:	74 2f                	je     c001bdf1 <sysCallOpenDir(regs*)+0x67>
c001bdc2:	83 ec 0c             	sub    esp,0xc
c001bdc5:	56                   	push   esi
c001bdc6:	e8 41 77 ff ff       	call   c001350c <Directory::open()>
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	85 c0                	test   eax,eax
c001bdd0:	75 1f                	jne    c001bdf1 <sysCallOpenDir(regs*)+0x67>
c001bdd2:	83 ec 0c             	sub    esp,0xc
c001bdd5:	56                   	push   esi
c001bdd6:	e8 71 54 ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001bddb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	89 02                	mov    DWORD PTR [edx],eax
c001bde3:	c1 f8 1f             	sar    eax,0x1f
c001bde6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bde9:	31 c0                	xor    eax,eax
c001bdeb:	59                   	pop    ecx
c001bdec:	31 d2                	xor    edx,edx
c001bdee:	5b                   	pop    ebx
c001bdef:	5e                   	pop    esi
c001bdf0:	c3                   	ret    
c001bdf1:	59                   	pop    ecx
c001bdf2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdf7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdfc:	5b                   	pop    ebx
c001bdfd:	5e                   	pop    esi
c001bdfe:	c3                   	ret    

c001bdff <sysCallCloseDir(regs*)>:
c001bdff:	53                   	push   ebx
c001be00:	83 ec 08             	sub    esp,0x8
c001be03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be07:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be0a:	83 f8 02             	cmp    eax,0x2
c001be0d:	76 47                	jbe    c001be56 <sysCallCloseDir(regs*)+0x57>
c001be0f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001be14:	77 2f                	ja     c001be45 <sysCallCloseDir(regs*)+0x46>
c001be16:	83 ec 0c             	sub    esp,0xc
c001be19:	50                   	push   eax
c001be1a:	e8 22 57 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001be1f:	89 c3                	mov    ebx,eax
c001be21:	89 04 24             	mov    DWORD PTR [esp],eax
c001be24:	e8 3f 77 ff ff       	call   c0013568 <Directory::close()>
c001be29:	83 c4 10             	add    esp,0x10
c001be2c:	85 db                	test   ebx,ebx
c001be2e:	74 0c                	je     c001be3c <sysCallCloseDir(regs*)+0x3d>
c001be30:	83 ec 0c             	sub    esp,0xc
c001be33:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be35:	53                   	push   ebx
c001be36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be39:	83 c4 10             	add    esp,0x10
c001be3c:	31 c0                	xor    eax,eax
c001be3e:	31 d2                	xor    edx,edx
c001be40:	83 c4 08             	add    esp,0x8
c001be43:	5b                   	pop    ebx
c001be44:	c3                   	ret    
c001be45:	83 ec 08             	sub    esp,0x8
c001be48:	50                   	push   eax
c001be49:	68 34 cb 02 c0       	push   0xc002cb34
c001be4e:	e8 4a 6c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001be53:	83 c4 10             	add    esp,0x10
c001be56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be60:	83 c4 08             	add    esp,0x8
c001be63:	5b                   	pop    ebx
c001be64:	c3                   	ret    

c001be65 <sysCallMakeDir(regs*)>:
c001be65:	56                   	push   esi
c001be66:	53                   	push   ebx
c001be67:	83 ec 10             	sub    esp,0x10
c001be6a:	68 14 01 00 00       	push   0x114
c001be6f:	e8 18 3a ff ff       	call   c000f88c <malloc>
c001be74:	83 c4 0c             	add    esp,0xc
c001be77:	89 c3                	mov    ebx,eax
c001be79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be7e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be85:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be88:	53                   	push   ebx
c001be89:	e8 1a 76 ff ff       	call   c00134a8 <Directory::Directory(char const*, Process*)>
c001be8e:	83 c4 10             	add    esp,0x10
c001be91:	85 db                	test   ebx,ebx
c001be93:	74 32                	je     c001bec7 <sysCallMakeDir(regs*)+0x62>
c001be95:	83 ec 0c             	sub    esp,0xc
c001be98:	53                   	push   ebx
c001be99:	e8 4e 78 ff ff       	call   c00136ec <Directory::create()>
c001be9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bea1:	89 c6                	mov    esi,eax
c001bea3:	e8 c0 76 ff ff       	call   c0013568 <Directory::close()>
c001bea8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001beaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bead:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001beb0:	83 c4 10             	add    esp,0x10
c001beb3:	31 c0                	xor    eax,eax
c001beb5:	59                   	pop    ecx
c001beb6:	85 f6                	test   esi,esi
c001beb8:	5b                   	pop    ebx
c001beb9:	0f 95 c0             	setne  al
c001bebc:	5e                   	pop    esi
c001bebd:	31 d2                	xor    edx,edx
c001bebf:	f7 d8                	neg    eax
c001bec1:	83 d2 00             	adc    edx,0x0
c001bec4:	f7 da                	neg    edx
c001bec6:	c3                   	ret    
c001bec7:	59                   	pop    ecx
c001bec8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001becd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bed2:	5b                   	pop    ebx
c001bed3:	5e                   	pop    esi
c001bed4:	c3                   	ret    

c001bed5 <sysCallWait(regs*)>:
c001bed5:	83 ec 10             	sub    esp,0x10
c001bed8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bedc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bedf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bee2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bee5:	e8 c8 25 00 00       	call   c001e4b2 <waitTask(int, int*, int)>
c001beea:	83 c4 1c             	add    esp,0x1c
c001beed:	99                   	cdq    
c001beee:	c3                   	ret    

c001beef <sysCallNotImpl(regs*)>:
c001beef:	83 ec 18             	sub    esp,0x18
c001bef2:	68 3a ca 02 c0       	push   0xc002ca3a
c001bef7:	e8 d7 e5 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001befc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf01:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf06:	83 c4 1c             	add    esp,0x1c
c001bf09:	c3                   	ret    

c001bf0a <sysPanic(regs*)>:
c001bf0a:	83 ec 18             	sub    esp,0x18
c001bf0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf11:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bf14:	e8 ba e5 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001bf19:	c7 04 24 54 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca54
c001bf20:	e8 ae e5 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001bf25:	b8 01 00 00 00       	mov    eax,0x1
c001bf2a:	31 d2                	xor    edx,edx
c001bf2c:	83 c4 1c             	add    esp,0x1c
c001bf2f:	c3                   	ret    

c001bf30 <sysCallRmdir(regs*)>:
c001bf30:	56                   	push   esi
c001bf31:	53                   	push   ebx
c001bf32:	83 ec 20             	sub    esp,0x20
c001bf35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf39:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf3c:	68 14 01 00 00       	push   0x114
c001bf41:	e8 46 39 ff ff       	call   c000f88c <malloc>
c001bf46:	83 c4 0c             	add    esp,0xc
c001bf49:	89 c3                	mov    ebx,eax
c001bf4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf50:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf53:	56                   	push   esi
c001bf54:	53                   	push   ebx
c001bf55:	e8 a2 70 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001bf5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf5d:	e8 76 72 ff ff       	call   c00131d8 <File::unlink()>
c001bf62:	83 c4 10             	add    esp,0x10
c001bf65:	85 db                	test   ebx,ebx
c001bf67:	74 14                	je     c001bf7d <sysCallRmdir(regs*)+0x4d>
c001bf69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf6f:	83 ec 0c             	sub    esp,0xc
c001bf72:	53                   	push   ebx
c001bf73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf7d:	85 c0                	test   eax,eax
c001bf7f:	0f 95 c0             	setne  al
c001bf82:	31 d2                	xor    edx,edx
c001bf84:	0f b6 c0             	movzx  eax,al
c001bf87:	f7 d8                	neg    eax
c001bf89:	83 d2 00             	adc    edx,0x0
c001bf8c:	83 c4 14             	add    esp,0x14
c001bf8f:	f7 da                	neg    edx
c001bf91:	5b                   	pop    ebx
c001bf92:	5e                   	pop    esi
c001bf93:	c3                   	ret    

c001bf94 <sysCallUnlink(regs*)>:
c001bf94:	56                   	push   esi
c001bf95:	53                   	push   ebx
c001bf96:	83 ec 20             	sub    esp,0x20
c001bf99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf9d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bfa0:	68 14 01 00 00       	push   0x114
c001bfa5:	e8 e2 38 ff ff       	call   c000f88c <malloc>
c001bfaa:	83 c4 0c             	add    esp,0xc
c001bfad:	89 c3                	mov    ebx,eax
c001bfaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfb7:	56                   	push   esi
c001bfb8:	53                   	push   ebx
c001bfb9:	e8 3e 70 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001bfbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfc1:	e8 12 72 ff ff       	call   c00131d8 <File::unlink()>
c001bfc6:	83 c4 10             	add    esp,0x10
c001bfc9:	85 db                	test   ebx,ebx
c001bfcb:	74 14                	je     c001bfe1 <sysCallUnlink(regs*)+0x4d>
c001bfcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfd1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfd3:	83 ec 0c             	sub    esp,0xc
c001bfd6:	53                   	push   ebx
c001bfd7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bfda:	83 c4 10             	add    esp,0x10
c001bfdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfe1:	85 c0                	test   eax,eax
c001bfe3:	0f 95 c0             	setne  al
c001bfe6:	31 d2                	xor    edx,edx
c001bfe8:	0f b6 c0             	movzx  eax,al
c001bfeb:	f7 d8                	neg    eax
c001bfed:	83 d2 00             	adc    edx,0x0
c001bff0:	83 c4 14             	add    esp,0x14
c001bff3:	f7 da                	neg    edx
c001bff5:	5b                   	pop    ebx
c001bff6:	5e                   	pop    esi
c001bff7:	c3                   	ret    

c001bff8 <sysCallGetArgv(regs*)>:
c001bff8:	83 ec 0c             	sub    esp,0xc
c001bffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bfff:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c002:	85 c0                	test   eax,eax
c001c004:	78 2b                	js     c001c031 <sysCallGetArgv(regs*)+0x39>
c001c006:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c00c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c00f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c015:	7d 1a                	jge    c001c031 <sysCallGetArgv(regs*)+0x39>
c001c017:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c01e:	85 c0                	test   eax,eax
c001c020:	74 17                	je     c001c039 <sysCallGetArgv(regs*)+0x41>
c001c022:	83 ec 08             	sub    esp,0x8
c001c025:	50                   	push   eax
c001c026:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c029:	e8 de 47 fe ff       	call   c000080c <strcpy>
c001c02e:	83 c4 10             	add    esp,0x10
c001c031:	31 c0                	xor    eax,eax
c001c033:	31 d2                	xor    edx,edx
c001c035:	83 c4 0c             	add    esp,0xc
c001c038:	c3                   	ret    
c001c039:	b8 01 00 00 00       	mov    eax,0x1
c001c03e:	31 d2                	xor    edx,edx
c001c040:	83 c4 0c             	add    esp,0xc
c001c043:	c3                   	ret    

c001c044 <sysCallTTYName(regs*)>:
c001c044:	56                   	push   esi
c001c045:	53                   	push   ebx
c001c046:	53                   	push   ebx
c001c047:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c04b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c04e:	85 c0                	test   eax,eax
c001c050:	74 5f                	je     c001c0b1 <sysCallTTYName(regs*)+0x6d>
c001c052:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c055:	83 f8 02             	cmp    eax,0x2
c001c058:	77 3e                	ja     c001c098 <sysCallTTYName(regs*)+0x54>
c001c05a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c05f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c062:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c068:	85 db                	test   ebx,ebx
c001c06a:	74 45                	je     c001c0b1 <sysCallTTYName(regs*)+0x6d>
c001c06c:	83 ec 0c             	sub    esp,0xc
c001c06f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c071:	53                   	push   ebx
c001c072:	ff 10                	call   DWORD PTR [eax]
c001c074:	83 c4 10             	add    esp,0x10
c001c077:	84 c0                	test   al,al
c001c079:	74 41                	je     c001c0bc <sysCallTTYName(regs*)+0x78>
c001c07b:	83 ec 08             	sub    esp,0x8
c001c07e:	81 c3 82 00 00 00    	add    ebx,0x82
c001c084:	53                   	push   ebx
c001c085:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c088:	e8 7f 47 fe ff       	call   c000080c <strcpy>
c001c08d:	83 c4 10             	add    esp,0x10
c001c090:	31 c0                	xor    eax,eax
c001c092:	59                   	pop    ecx
c001c093:	31 d2                	xor    edx,edx
c001c095:	5b                   	pop    ebx
c001c096:	5e                   	pop    esi
c001c097:	c3                   	ret    
c001c098:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c09d:	74 bb                	je     c001c05a <sysCallTTYName(regs*)+0x16>
c001c09f:	83 ec 0c             	sub    esp,0xc
c001c0a2:	50                   	push   eax
c001c0a3:	e8 99 54 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001c0a8:	83 c4 10             	add    esp,0x10
c001c0ab:	89 c3                	mov    ebx,eax
c001c0ad:	85 db                	test   ebx,ebx
c001c0af:	75 bb                	jne    c001c06c <sysCallTTYName(regs*)+0x28>
c001c0b1:	59                   	pop    ecx
c001c0b2:	b8 01 00 00 00       	mov    eax,0x1
c001c0b7:	31 d2                	xor    edx,edx
c001c0b9:	5b                   	pop    ebx
c001c0ba:	5e                   	pop    esi
c001c0bb:	c3                   	ret    
c001c0bc:	59                   	pop    ecx
c001c0bd:	b8 02 00 00 00       	mov    eax,0x2
c001c0c2:	31 d2                	xor    edx,edx
c001c0c4:	5b                   	pop    ebx
c001c0c5:	5e                   	pop    esi
c001c0c6:	c3                   	ret    

c001c0c7 <sysCallUSleep(regs*)>:
c001c0c7:	83 ec 14             	sub    esp,0x14
c001c0ca:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c0cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0d3:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c0da:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c0dd:	01 ca                	add    edx,ecx
c001c0df:	52                   	push   edx
c001c0e0:	50                   	push   eax
c001c0e1:	e8 a3 24 00 00       	call   c001e589 <nanoSleep(unsigned long long)>
c001c0e6:	31 c0                	xor    eax,eax
c001c0e8:	31 d2                	xor    edx,edx
c001c0ea:	83 c4 1c             	add    esp,0x1c
c001c0ed:	c3                   	ret    

c001c0ee <sysCallSpawn(regs*)>:
c001c0ee:	56                   	push   esi
c001c0ef:	53                   	push   ebx
c001c0f0:	50                   	push   eax
c001c0f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0f5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c0f8:	85 c0                	test   eax,eax
c001c0fa:	75 08                	jne    c001c104 <sysCallSpawn(regs*)+0x16>
c001c0fc:	59                   	pop    ecx
c001c0fd:	31 c0                	xor    eax,eax
c001c0ff:	31 d2                	xor    edx,edx
c001c101:	5b                   	pop    ebx
c001c102:	5e                   	pop    esi
c001c103:	c3                   	ret    
c001c104:	83 ec 08             	sub    esp,0x8
c001c107:	50                   	push   eax
c001c108:	68 63 ca 02 c0       	push   0xc002ca63
c001c10d:	e8 8b 69 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c112:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c119:	e8 6e 37 ff ff       	call   c000f88c <malloc>
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	89 c6                	mov    esi,eax
c001c123:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c126:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c129:	85 c0                	test   eax,eax
c001c12b:	75 32                	jne    c001c15f <sysCallSpawn(regs*)+0x71>
c001c12d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c132:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c135:	52                   	push   edx
c001c136:	50                   	push   eax
c001c137:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c13a:	56                   	push   esi
c001c13b:	e8 26 1b 00 00       	call   c001dc66 <Process::Process(char const*, Process*, char**)>
c001c140:	83 c4 10             	add    esp,0x10
c001c143:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c14a:	75 b0                	jne    c001c0fc <sysCallSpawn(regs*)+0xe>
c001c14c:	83 ec 0c             	sub    esp,0xc
c001c14f:	56                   	push   esi
c001c150:	e8 f3 1f 00 00       	call   c001e148 <Process::createUserThread()>
c001c155:	8b 06                	mov    eax,DWORD PTR [esi]
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	99                   	cdq    
c001c15b:	59                   	pop    ecx
c001c15c:	5b                   	pop    ebx
c001c15d:	5e                   	pop    esi
c001c15e:	c3                   	ret    
c001c15f:	31 c0                	xor    eax,eax
c001c161:	eb d2                	jmp    c001c135 <sysCallSpawn(regs*)+0x47>

c001c163 <sysCallGetEnv(regs*)>:
c001c163:	55                   	push   ebp
c001c164:	57                   	push   edi
c001c165:	56                   	push   esi
c001c166:	53                   	push   ebx
c001c167:	83 ec 28             	sub    esp,0x28
c001c16a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c16e:	68 71 ca 02 c0       	push   0xc002ca71
c001c173:	e8 25 69 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c178:	5f                   	pop    edi
c001c179:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c17c:	5d                   	pop    ebp
c001c17d:	53                   	push   ebx
c001c17e:	68 9e cd 02 c0       	push   0xc002cd9e
c001c183:	e8 15 69 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c188:	58                   	pop    eax
c001c189:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c18c:	5a                   	pop    edx
c001c18d:	57                   	push   edi
c001c18e:	68 7a ca 02 c0       	push   0xc002ca7a
c001c193:	e8 05 69 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c198:	59                   	pop    ecx
c001c199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c19e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1a1:	e8 49 e2 ff ff       	call   c001a3ef <Krnl::getProcessTotalEnvCount(Process*)>
c001c1a6:	5a                   	pop    edx
c001c1a7:	89 c5                	mov    ebp,eax
c001c1a9:	59                   	pop    ecx
c001c1aa:	50                   	push   eax
c001c1ab:	68 84 ca 02 c0       	push   0xc002ca84
c001c1b0:	e8 e8 68 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c1b5:	83 c4 10             	add    esp,0x10
c001c1b8:	39 ef                	cmp    edi,ebp
c001c1ba:	7c 15                	jl     c001c1d1 <sysCallGetEnv(regs*)+0x6e>
c001c1bc:	85 db                	test   ebx,ebx
c001c1be:	75 0c                	jne    c001c1cc <sysCallGetEnv(regs*)+0x69>
c001c1c0:	83 c4 1c             	add    esp,0x1c
c001c1c3:	31 c0                	xor    eax,eax
c001c1c5:	5b                   	pop    ebx
c001c1c6:	31 d2                	xor    edx,edx
c001c1c8:	5e                   	pop    esi
c001c1c9:	5f                   	pop    edi
c001c1ca:	5d                   	pop    ebp
c001c1cb:	c3                   	ret    
c001c1cc:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1cf:	eb ef                	jmp    c001c1c0 <sysCallGetEnv(regs*)+0x5d>
c001c1d1:	83 ec 0c             	sub    esp,0xc
c001c1d4:	68 90 ca 02 c0       	push   0xc002ca90
c001c1d9:	e8 bf 68 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c1de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1e2:	83 c4 0c             	add    esp,0xc
c001c1e5:	57                   	push   edi
c001c1e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c1ec:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c1ef:	50                   	push   eax
c001c1f0:	e8 1a e2 ff ff       	call   c001a40f <Krnl::getProcessEnvPair(Process*, int)>
c001c1f5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c1f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1fd:	68 4f ce 02 c0       	push   0xc002ce4f
c001c202:	e8 96 68 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c20d:	85 f6                	test   esi,esi
c001c20f:	75 47                	jne    c001c258 <sysCallGetEnv(regs*)+0xf5>
c001c211:	83 ec 0c             	sub    esp,0xc
c001c214:	55                   	push   ebp
c001c215:	e8 52 45 fe ff       	call   c000076c <strlen>
c001c21a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c21d:	89 c3                	mov    ebx,eax
c001c21f:	e8 48 45 fe ff       	call   c000076c <strlen>
c001c224:	5a                   	pop    edx
c001c225:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c229:	59                   	pop    ecx
c001c22a:	50                   	push   eax
c001c22b:	68 93 ca 02 c0       	push   0xc002ca93
c001c230:	e8 68 68 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c235:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c238:	e8 2f 45 fe ff       	call   c000076c <strlen>
c001c23d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c240:	89 c3                	mov    ebx,eax
c001c242:	e8 25 45 fe ff       	call   c000076c <strlen>
c001c247:	83 c4 10             	add    esp,0x10
c001c24a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c24e:	83 c4 1c             	add    esp,0x1c
c001c251:	31 d2                	xor    edx,edx
c001c253:	5b                   	pop    ebx
c001c254:	5e                   	pop    esi
c001c255:	5f                   	pop    edi
c001c256:	5d                   	pop    ebp
c001c257:	c3                   	ret    
c001c258:	83 ec 0c             	sub    esp,0xc
c001c25b:	68 69 ce 02 c0       	push   0xc002ce69
c001c260:	e8 38 68 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c265:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c268:	58                   	pop    eax
c001c269:	5a                   	pop    edx
c001c26a:	55                   	push   ebp
c001c26b:	53                   	push   ebx
c001c26c:	e8 9b 45 fe ff       	call   c000080c <strcpy>
c001c271:	59                   	pop    ecx
c001c272:	5e                   	pop    esi
c001c273:	68 9d ca 02 c0       	push   0xc002ca9d
c001c278:	53                   	push   ebx
c001c279:	e8 ce 46 fe ff       	call   c000094c <strcat>
c001c27e:	5d                   	pop    ebp
c001c27f:	58                   	pop    eax
c001c280:	57                   	push   edi
c001c281:	53                   	push   ebx
c001c282:	e8 c5 46 fe ff       	call   c000094c <strcat>
c001c287:	c7 04 24 83 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce83
c001c28e:	e8 0a 68 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c293:	83 c4 10             	add    esp,0x10
c001c296:	e9 25 ff ff ff       	jmp    c001c1c0 <sysCallGetEnv(regs*)+0x5d>

c001c29b <sysAppSettings(regs*)>:
c001c29b:	57                   	push   edi
c001c29c:	56                   	push   esi
c001c29d:	56                   	push   esi
c001c29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c2a5:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c2ab:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c2b0:	66 3d c0 09          	cmp    ax,0x9c0
c001c2b4:	75 2e                	jne    c001c2e4 <sysAppSettings(regs*)+0x49>
c001c2b6:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c2bc:	83 e0 1f             	and    eax,0x1f
c001c2bf:	3c 01                	cmp    al,0x1
c001c2c1:	74 2c                	je     c001c2ef <sysAppSettings(regs*)+0x54>
c001c2c3:	3c 07                	cmp    al,0x7
c001c2c5:	0f 84 b3 00 00 00    	je     c001c37e <sysAppSettings(regs*)+0xe3>
c001c2cb:	84 c0                	test   al,al
c001c2cd:	0f 84 d2 00 00 00    	je     c001c3a5 <sysAppSettings(regs*)+0x10a>
c001c2d3:	3c 08                	cmp    al,0x8
c001c2d5:	74 63                	je     c001c33a <sysAppSettings(regs*)+0x9f>
c001c2d7:	59                   	pop    ecx
c001c2d8:	0f b6 c0             	movzx  eax,al
c001c2db:	5e                   	pop    esi
c001c2dc:	05 e8 03 00 00       	add    eax,0x3e8
c001c2e1:	5f                   	pop    edi
c001c2e2:	99                   	cdq    
c001c2e3:	c3                   	ret    
c001c2e4:	b8 01 00 00 00       	mov    eax,0x1
c001c2e9:	59                   	pop    ecx
c001c2ea:	31 d2                	xor    edx,edx
c001c2ec:	5e                   	pop    esi
c001c2ed:	5f                   	pop    edi
c001c2ee:	c3                   	ret    
c001c2ef:	50                   	push   eax
c001c2f0:	68 00 01 00 00       	push   0x100
c001c2f5:	6a 00                	push   0x0
c001c2f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2ff:	83 c0 0c             	add    eax,0xc
c001c302:	50                   	push   eax
c001c303:	e8 48 44 fe ff       	call   c0000750 <memset>
c001c308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c30d:	b9 ff 00 00 00       	mov    ecx,0xff
c001c312:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c315:	83 c7 0c             	add    edi,0xc
c001c318:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c31a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c31f:	5a                   	pop    edx
c001c320:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c323:	59                   	pop    ecx
c001c324:	8d 50 0c             	lea    edx,[eax+0xc]
c001c327:	52                   	push   edx
c001c328:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c32e:	e8 39 44 ff ff       	call   c001076c <VgaText::setTitle(char*)>
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	31 c0                	xor    eax,eax
c001c338:	eb af                	jmp    c001c2e9 <sysAppSettings(regs*)+0x4e>
c001c33a:	83 ec 08             	sub    esp,0x8
c001c33d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c343:	83 e0 0f             	and    eax,0xf
c001c346:	50                   	push   eax
c001c347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c34c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c34f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c355:	e8 04 44 ff ff       	call   c001075e <VgaText::setTitleColour(VgaColour)>
c001c35a:	5f                   	pop    edi
c001c35b:	58                   	pop    eax
c001c35c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c362:	c1 e8 04             	shr    eax,0x4
c001c365:	83 e0 0f             	and    eax,0xf
c001c368:	50                   	push   eax
c001c369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c36e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c371:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c377:	e8 d4 43 ff ff       	call   c0010750 <VgaText::setTitleTextColour(VgaColour)>
c001c37c:	eb b5                	jmp    c001c333 <sysAppSettings(regs*)+0x98>
c001c37e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c383:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c386:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c38c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c392:	c0 e8 06             	shr    al,0x6
c001c395:	83 e0 01             	and    eax,0x1
c001c398:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c39e:	31 c0                	xor    eax,eax
c001c3a0:	e9 44 ff ff ff       	jmp    c001c2e9 <sysAppSettings(regs*)+0x4e>
c001c3a5:	b8 02 00 00 00       	mov    eax,0x2
c001c3aa:	e9 3a ff ff ff       	jmp    c001c2e9 <sysAppSettings(regs*)+0x4e>

c001c3af <sysSetFatAttrib(regs*)>:
c001c3af:	57                   	push   edi
c001c3b0:	56                   	push   esi
c001c3b1:	53                   	push   ebx
c001c3b2:	83 ec 1c             	sub    esp,0x1c
c001c3b5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c3b9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c3bc:	68 14 01 00 00       	push   0x114
c001c3c1:	e8 c6 34 ff ff       	call   c000f88c <malloc>
c001c3c6:	83 c4 0c             	add    esp,0xc
c001c3c9:	89 c3                	mov    ebx,eax
c001c3cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3d3:	57                   	push   edi
c001c3d4:	53                   	push   ebx
c001c3d5:	e8 22 6c ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001c3da:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c3dd:	83 c4 0c             	add    esp,0xc
c001c3e0:	0f b6 d4             	movzx  edx,ah
c001c3e3:	0f b6 c0             	movzx  eax,al
c001c3e6:	52                   	push   edx
c001c3e7:	50                   	push   eax
c001c3e8:	53                   	push   ebx
c001c3e9:	e8 84 6e ff ff       	call   c0013272 <File::chfatattr(unsigned char, unsigned char)>
c001c3ee:	83 c4 10             	add    esp,0x10
c001c3f1:	85 db                	test   ebx,ebx
c001c3f3:	74 14                	je     c001c409 <sysSetFatAttrib(regs*)+0x5a>
c001c3f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3f9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3fb:	83 ec 0c             	sub    esp,0xc
c001c3fe:	53                   	push   ebx
c001c3ff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c402:	83 c4 10             	add    esp,0x10
c001c405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c409:	85 c0                	test   eax,eax
c001c40b:	0f 95 c0             	setne  al
c001c40e:	31 d2                	xor    edx,edx
c001c410:	0f b6 c0             	movzx  eax,al
c001c413:	f7 d8                	neg    eax
c001c415:	83 d2 00             	adc    edx,0x0
c001c418:	83 c4 10             	add    esp,0x10
c001c41b:	f7 da                	neg    edx
c001c41d:	5b                   	pop    ebx
c001c41e:	5e                   	pop    esi
c001c41f:	5f                   	pop    edi
c001c420:	c3                   	ret    

c001c421 <sysPipe(regs*)>:
c001c421:	57                   	push   edi
c001c422:	56                   	push   esi
c001c423:	53                   	push   ebx
c001c424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c42e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c431:	6a 20                	push   0x20
c001c433:	e8 54 34 ff ff       	call   c000f88c <malloc>
c001c438:	89 c3                	mov    ebx,eax
c001c43a:	58                   	pop    eax
c001c43b:	5a                   	pop    edx
c001c43c:	68 00 50 00 00       	push   0x5000
c001c441:	53                   	push   ebx
c001c442:	e8 db 3c ff ff       	call   c0010122 <Pipe::Pipe(int)>
c001c447:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c44a:	e8 fd 4d ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001c44f:	89 07                	mov    DWORD PTR [edi],eax
c001c451:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c454:	e8 f3 4d ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	89 06                	mov    DWORD PTR [esi],eax
c001c45e:	31 d2                	xor    edx,edx
c001c460:	5b                   	pop    ebx
c001c461:	31 c0                	xor    eax,eax
c001c463:	5e                   	pop    esi
c001c464:	5f                   	pop    edi
c001c465:	c3                   	ret    

c001c466 <sysGetUnixTime(regs*)>:
c001c466:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001c46b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c471:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c475:	e9 74 75 ff ff       	jmp    c00139ee <Clock::timeInSecondsLocal()>

c001c47a <string_ends_with(char const*, char const*)>:
c001c47a:	57                   	push   edi
c001c47b:	56                   	push   esi
c001c47c:	53                   	push   ebx
c001c47d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c481:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c485:	83 ec 0c             	sub    esp,0xc
c001c488:	53                   	push   ebx
c001c489:	e8 de 42 fe ff       	call   c000076c <strlen>
c001c48e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c491:	89 c6                	mov    esi,eax
c001c493:	e8 d4 42 fe ff       	call   c000076c <strlen>
c001c498:	83 c4 10             	add    esp,0x10
c001c49b:	39 c6                	cmp    esi,eax
c001c49d:	7d 06                	jge    c001c4a5 <string_ends_with(char const*, char const*)+0x2b>
c001c49f:	5b                   	pop    ebx
c001c4a0:	31 c0                	xor    eax,eax
c001c4a2:	5e                   	pop    esi
c001c4a3:	5f                   	pop    edi
c001c4a4:	c3                   	ret    
c001c4a5:	83 ec 08             	sub    esp,0x8
c001c4a8:	29 c6                	sub    esi,eax
c001c4aa:	57                   	push   edi
c001c4ab:	01 f3                	add    ebx,esi
c001c4ad:	53                   	push   ebx
c001c4ae:	e8 e5 43 fe ff       	call   c0000898 <strcmp>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	85 c0                	test   eax,eax
c001c4b8:	5b                   	pop    ebx
c001c4b9:	0f 94 c0             	sete   al
c001c4bc:	5e                   	pop    esi
c001c4bd:	0f b6 c0             	movzx  eax,al
c001c4c0:	5f                   	pop    edi
c001c4c1:	c3                   	ret    

c001c4c2 <sysCallOpen(regs*)>:
c001c4c2:	56                   	push   esi
c001c4c3:	53                   	push   ebx
c001c4c4:	81 ec 04 01 00 00    	sub    esp,0x104
c001c4ca:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c4d1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c4d4:	85 c9                	test   ecx,ecx
c001c4d6:	0f 84 b3 00 00 00    	je     c001c58f <sysCallOpen(regs*)+0xcd>
c001c4dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c4df:	85 c0                	test   eax,eax
c001c4e1:	0f 84 a8 00 00 00    	je     c001c58f <sysCallOpen(regs*)+0xcd>
c001c4e7:	52                   	push   edx
c001c4e8:	68 9f ca 02 c0       	push   0xc002ca9f
c001c4ed:	50                   	push   eax
c001c4ee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c4f2:	56                   	push   esi
c001c4f3:	e8 5a 69 ff ff       	call   c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c4f8:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4fb:	e8 6c 42 fe ff       	call   c000076c <strlen>
c001c500:	83 c4 10             	add    esp,0x10
c001c503:	48                   	dec    eax
c001c504:	74 1d                	je     c001c523 <sysCallOpen(regs*)+0x61>
c001c506:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c509:	eb 0f                	jmp    c001c51a <sysCallOpen(regs*)+0x58>
c001c50b:	80 fa 3a             	cmp    dl,0x3a
c001c50e:	74 0f                	je     c001c51f <sysCallOpen(regs*)+0x5d>
c001c510:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c514:	48                   	dec    eax
c001c515:	74 0c                	je     c001c523 <sysCallOpen(regs*)+0x61>
c001c517:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c51a:	80 fa 2e             	cmp    dl,0x2e
c001c51d:	75 ec                	jne    c001c50b <sysCallOpen(regs*)+0x49>
c001c51f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c523:	83 ec 08             	sub    esp,0x8
c001c526:	68 a3 ca 02 c0       	push   0xc002caa3
c001c52b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c52e:	e8 47 ff ff ff       	call   c001c47a <string_ends_with(char const*, char const*)>
c001c533:	83 c4 10             	add    esp,0x10
c001c536:	85 c0                	test   eax,eax
c001c538:	75 17                	jne    c001c551 <sysCallOpen(regs*)+0x8f>
c001c53a:	83 ec 08             	sub    esp,0x8
c001c53d:	68 c4 ca 02 c0       	push   0xc002cac4
c001c542:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c545:	e8 30 ff ff ff       	call   c001c47a <string_ends_with(char const*, char const*)>
c001c54a:	83 c4 10             	add    esp,0x10
c001c54d:	85 c0                	test   eax,eax
c001c54f:	74 51                	je     c001c5a2 <sysCallOpen(regs*)+0xe0>
c001c551:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c554:	83 ec 08             	sub    esp,0x8
c001c557:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c55d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c564:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c567:	ff 30                	push   DWORD PTR [eax]
c001c569:	68 a8 ca 02 c0       	push   0xc002caa8
c001c56e:	e8 2a 65 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c573:	c7 04 24 b7 ca 02 c0 	mov    DWORD PTR [esp],0xc002cab7
c001c57a:	e8 1e 65 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c57f:	83 c4 10             	add    esp,0x10
c001c582:	81 c4 04 01 00 00    	add    esp,0x104
c001c588:	31 c0                	xor    eax,eax
c001c58a:	31 d2                	xor    edx,edx
c001c58c:	5b                   	pop    ebx
c001c58d:	5e                   	pop    esi
c001c58e:	c3                   	ret    
c001c58f:	81 c4 04 01 00 00    	add    esp,0x104
c001c595:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c59a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c59f:	5b                   	pop    ebx
c001c5a0:	5e                   	pop    esi
c001c5a1:	c3                   	ret    
c001c5a2:	83 ec 08             	sub    esp,0x8
c001c5a5:	68 a4 ca 02 c0       	push   0xc002caa4
c001c5aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5ad:	e8 e6 42 fe ff       	call   c0000898 <strcmp>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	85 c0                	test   eax,eax
c001c5b7:	74 98                	je     c001c551 <sysCallOpen(regs*)+0x8f>
c001c5b9:	83 ec 08             	sub    esp,0x8
c001c5bc:	68 a3 ca 02 c0       	push   0xc002caa3
c001c5c1:	56                   	push   esi
c001c5c2:	e8 b3 fe ff ff       	call   c001c47a <string_ends_with(char const*, char const*)>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	85 c0                	test   eax,eax
c001c5cc:	75 83                	jne    c001c551 <sysCallOpen(regs*)+0x8f>
c001c5ce:	83 ec 08             	sub    esp,0x8
c001c5d1:	68 c9 ca 02 c0       	push   0xc002cac9
c001c5d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5d9:	e8 9c fe ff ff       	call   c001c47a <string_ends_with(char const*, char const*)>
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	85 c0                	test   eax,eax
c001c5e3:	0f 85 d9 00 00 00    	jne    c001c6c2 <sysCallOpen(regs*)+0x200>
c001c5e9:	83 ec 08             	sub    esp,0x8
c001c5ec:	68 ce ca 02 c0       	push   0xc002cace
c001c5f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5f4:	e8 81 fe ff ff       	call   c001c47a <string_ends_with(char const*, char const*)>
c001c5f9:	83 c4 10             	add    esp,0x10
c001c5fc:	85 c0                	test   eax,eax
c001c5fe:	0f 85 be 00 00 00    	jne    c001c6c2 <sysCallOpen(regs*)+0x200>
c001c604:	83 ec 08             	sub    esp,0x8
c001c607:	68 ca ca 02 c0       	push   0xc002caca
c001c60c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c60f:	e8 84 42 fe ff       	call   c0000898 <strcmp>
c001c614:	83 c4 10             	add    esp,0x10
c001c617:	85 c0                	test   eax,eax
c001c619:	0f 84 a3 00 00 00    	je     c001c6c2 <sysCallOpen(regs*)+0x200>
c001c61f:	83 ec 08             	sub    esp,0x8
c001c622:	68 c9 ca 02 c0       	push   0xc002cac9
c001c627:	56                   	push   esi
c001c628:	e8 4d fe ff ff       	call   c001c47a <string_ends_with(char const*, char const*)>
c001c62d:	83 c4 10             	add    esp,0x10
c001c630:	85 c0                	test   eax,eax
c001c632:	0f 85 8a 00 00 00    	jne    c001c6c2 <sysCallOpen(regs*)+0x200>
c001c638:	83 ec 0c             	sub    esp,0xc
c001c63b:	68 14 01 00 00       	push   0x114
c001c640:	e8 47 32 ff ff       	call   c000f88c <malloc>
c001c645:	83 c4 0c             	add    esp,0xc
c001c648:	89 c6                	mov    esi,eax
c001c64a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c64f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c652:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c655:	56                   	push   esi
c001c656:	e8 a1 69 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001c65b:	83 c4 10             	add    esp,0x10
c001c65e:	85 f6                	test   esi,esi
c001c660:	0f 84 29 ff ff ff    	je     c001c58f <sysCallOpen(regs*)+0xcd>
c001c666:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c669:	0f b6 c2             	movzx  eax,dl
c001c66c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c66f:	89 d0                	mov    eax,edx
c001c671:	83 e0 01             	and    eax,0x1
c001c674:	f6 c2 02             	test   dl,0x2
c001c677:	74 03                	je     c001c67c <sysCallOpen(regs*)+0x1ba>
c001c679:	83 c8 02             	or     eax,0x2
c001c67c:	f6 c2 04             	test   dl,0x4
c001c67f:	74 03                	je     c001c684 <sysCallOpen(regs*)+0x1c2>
c001c681:	83 c8 04             	or     eax,0x4
c001c684:	f6 c2 08             	test   dl,0x8
c001c687:	74 03                	je     c001c68c <sysCallOpen(regs*)+0x1ca>
c001c689:	83 c8 0a             	or     eax,0xa
c001c68c:	83 e2 10             	and    edx,0x10
c001c68f:	74 03                	je     c001c694 <sysCallOpen(regs*)+0x1d2>
c001c691:	83 c8 12             	or     eax,0x12
c001c694:	83 ec 08             	sub    esp,0x8
c001c697:	50                   	push   eax
c001c698:	56                   	push   esi
c001c699:	e8 c2 69 ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001c69e:	83 c4 10             	add    esp,0x10
c001c6a1:	85 c0                	test   eax,eax
c001c6a3:	0f 85 e6 fe ff ff    	jne    c001c58f <sysCallOpen(regs*)+0xcd>
c001c6a9:	83 ec 0c             	sub    esp,0xc
c001c6ac:	56                   	push   esi
c001c6ad:	e8 9a 4b ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001c6b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c6b5:	89 02                	mov    DWORD PTR [edx],eax
c001c6b7:	c1 f8 1f             	sar    eax,0x1f
c001c6ba:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c6bd:	e9 bd fe ff ff       	jmp    c001c57f <sysCallOpen(regs*)+0xbd>
c001c6c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c6c5:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c6cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6d2:	e9 ab fe ff ff       	jmp    c001c582 <sysCallOpen(regs*)+0xc0>

c001c6d7 <Sys::loadSyscalls()>:
c001c6d7:	c7 05 40 1c 03 c0 c7 b7 01 c0 	mov    DWORD PTR ds:0xc0031c40,0xc001b7c7
c001c6e1:	c7 05 44 1c 03 c0 2c b3 01 c0 	mov    DWORD PTR ds:0xc0031c44,0xc001b32c
c001c6eb:	c7 05 48 1c 03 c0 1a b5 01 c0 	mov    DWORD PTR ds:0xc0031c48,0xc001b51a
c001c6f5:	c7 05 4c 1c 03 c0 fd b6 01 c0 	mov    DWORD PTR ds:0xc0031c4c,0xc001b6fd
c001c6ff:	c7 05 50 1c 03 c0 b2 b4 01 c0 	mov    DWORD PTR ds:0xc0031c50,0xc001b4b2
c001c709:	c7 05 54 1c 03 c0 63 b3 01 c0 	mov    DWORD PTR ds:0xc0031c54,0xc001b363
c001c713:	c7 05 58 1c 03 c0 44 b3 01 c0 	mov    DWORD PTR ds:0xc0031c58,0xc001b344
c001c71d:	c7 05 5c 1c 03 c0 6f b5 01 c0 	mov    DWORD PTR ds:0xc0031c5c,0xc001b56f
c001c727:	c7 05 64 1c 03 c0 02 bd 01 c0 	mov    DWORD PTR ds:0xc0031c64,0xc001bd02
c001c731:	c7 05 60 1c 03 c0 c2 c4 01 c0 	mov    DWORD PTR ds:0xc0031c60,0xc001c4c2
c001c73b:	c7 05 68 1c 03 c0 8a bd 01 c0 	mov    DWORD PTR ds:0xc0031c68,0xc001bd8a
c001c745:	c7 05 6c 1c 03 c0 f1 b9 01 c0 	mov    DWORD PTR ds:0xc0031c6c,0xc001b9f1
c001c74f:	c7 05 70 1c 03 c0 0d b8 01 c0 	mov    DWORD PTR ds:0xc0031c70,0xc001b80d
c001c759:	c7 05 74 1c 03 c0 12 b8 01 c0 	mov    DWORD PTR ds:0xc0031c74,0xc001b812
c001c763:	c7 05 78 1c 03 c0 65 be 01 c0 	mov    DWORD PTR ds:0xc0031c78,0xc001be65
c001c76d:	c7 05 7c 1c 03 c0 ff bd 01 c0 	mov    DWORD PTR ds:0xc0031c7c,0xc001bdff
c001c777:	c7 05 80 1c 03 c0 d9 ba 01 c0 	mov    DWORD PTR ds:0xc0031c80,0xc001bad9
c001c781:	c7 05 84 1c 03 c0 42 bb 01 c0 	mov    DWORD PTR ds:0xc0031c84,0xc001bb42
c001c78b:	c7 05 88 1c 03 c0 bf bb 01 c0 	mov    DWORD PTR ds:0xc0031c88,0xc001bbbf
c001c795:	c7 05 8c 1c 03 c0 17 b8 01 c0 	mov    DWORD PTR ds:0xc0031c8c,0xc001b817
c001c79f:	c7 05 90 1c 03 c0 d5 be 01 c0 	mov    DWORD PTR ds:0xc0031c90,0xc001bed5
c001c7a9:	c7 05 94 1c 03 c0 ef be 01 c0 	mov    DWORD PTR ds:0xc0031c94,0xc001beef
c001c7b3:	c7 05 98 1c 03 c0 ef be 01 c0 	mov    DWORD PTR ds:0xc0031c98,0xc001beef
c001c7bd:	c7 05 9c 1c 03 c0 30 bf 01 c0 	mov    DWORD PTR ds:0xc0031c9c,0xc001bf30
c001c7c7:	c7 05 a0 1c 03 c0 94 bf 01 c0 	mov    DWORD PTR ds:0xc0031ca0,0xc001bf94
c001c7d1:	c7 05 a4 1c 03 c0 c3 b9 01 c0 	mov    DWORD PTR ds:0xc0031ca4,0xc001b9c3
c001c7db:	c7 05 a8 1c 03 c0 f8 bf 01 c0 	mov    DWORD PTR ds:0xc0031ca8,0xc001bff8
c001c7e5:	c7 05 ac 1c 03 c0 80 b9 01 c0 	mov    DWORD PTR ds:0xc0031cac,0xc001b980
c001c7ef:	c7 05 b0 1c 03 c0 44 c0 01 c0 	mov    DWORD PTR ds:0xc0031cb0,0xc001c044
c001c7f9:	c7 05 b4 1c 03 c0 7f ba 01 c0 	mov    DWORD PTR ds:0xc0031cb4,0xc001ba7f
c001c803:	c7 05 b8 1c 03 c0 c7 c0 01 c0 	mov    DWORD PTR ds:0xc0031cb8,0xc001c0c7
c001c80d:	c7 05 bc 1c 03 c0 42 bc 01 c0 	mov    DWORD PTR ds:0xc0031cbc,0xc001bc42
c001c817:	c7 05 c0 1c 03 c0 ee c0 01 c0 	mov    DWORD PTR ds:0xc0031cc0,0xc001c0ee
c001c821:	c7 05 c4 1c 03 c0 63 c1 01 c0 	mov    DWORD PTR ds:0xc0031cc4,0xc001c163
c001c82b:	c7 05 c8 1c 03 c0 9b c2 01 c0 	mov    DWORD PTR ds:0xc0031cc8,0xc001c29b
c001c835:	c7 05 cc 1c 03 c0 21 b8 01 c0 	mov    DWORD PTR ds:0xc0031ccc,0xc001b821
c001c83f:	c7 05 d0 1c 03 c0 8b b8 01 c0 	mov    DWORD PTR ds:0xc0031cd0,0xc001b88b
c001c849:	c7 05 d4 1c 03 c0 d1 b8 01 c0 	mov    DWORD PTR ds:0xc0031cd4,0xc001b8d1
c001c853:	c7 05 d8 1c 03 c0 af c3 01 c0 	mov    DWORD PTR ds:0xc0031cd8,0xc001c3af
c001c85d:	c7 05 dc 1c 03 c0 0a bf 01 c0 	mov    DWORD PTR ds:0xc0031cdc,0xc001bf0a
c001c867:	c7 05 e0 1c 03 c0 22 b9 01 c0 	mov    DWORD PTR ds:0xc0031ce0,0xc001b922
c001c871:	c7 05 e4 1c 03 c0 21 c4 01 c0 	mov    DWORD PTR ds:0xc0031ce4,0xc001c421
c001c87b:	c7 05 e8 1c 03 c0 66 c4 01 c0 	mov    DWORD PTR ds:0xc0031ce8,0xc001c466
c001c885:	c7 05 ec 1c 03 c0 0a b4 01 c0 	mov    DWORD PTR ds:0xc0031cec,0xc001b40a
c001c88f:	c7 05 f0 1c 03 c0 8b b5 01 c0 	mov    DWORD PTR ds:0xc0031cf0,0xc001b58b
c001c899:	c7 05 f4 1c 03 c0 b3 b6 01 c0 	mov    DWORD PTR ds:0xc0031cf4,0xc001b6b3
c001c8a3:	c7 05 f8 1c 03 c0 f6 b2 01 c0 	mov    DWORD PTR ds:0xc0031cf8,0xc001b2f6
c001c8ad:	c7 05 fc 1c 03 c0 65 b7 01 c0 	mov    DWORD PTR ds:0xc0031cfc,0xc001b765
c001c8b7:	c7 05 00 1d 03 c0 6f b3 01 c0 	mov    DWORD PTR ds:0xc0031d00,0xc001b36f
c001c8c1:	c7 05 04 1d 03 c0 86 b3 01 c0 	mov    DWORD PTR ds:0xc0031d04,0xc001b386
c001c8cb:	c3                   	ret    

c001c8cc <Sys::systemCall(regs*, void*)>:
c001c8cc:	53                   	push   ebx
c001c8cd:	83 ec 08             	sub    esp,0x8
c001c8d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8d4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c8d7:	83 f8 7f             	cmp    eax,0x7f
c001c8da:	77 16                	ja     c001c8f2 <Sys::systemCall(regs*, void*)+0x26>
c001c8dc:	8b 14 85 40 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce3c0]
c001c8e3:	85 d2                	test   edx,edx
c001c8e5:	74 0b                	je     c001c8f2 <Sys::systemCall(regs*, void*)+0x26>
c001c8e7:	83 ec 0c             	sub    esp,0xc
c001c8ea:	53                   	push   ebx
c001c8eb:	ff d2                	call   edx
c001c8ed:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c8f0:	eb 0d                	jmp    c001c8ff <Sys::systemCall(regs*, void*)+0x33>
c001c8f2:	52                   	push   edx
c001c8f3:	52                   	push   edx
c001c8f4:	50                   	push   eax
c001c8f5:	68 d3 ca 02 c0       	push   0xc002cad3
c001c8fa:	e8 9e 61 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c907:	31 d2                	xor    edx,edx
c001c909:	83 c4 08             	add    esp,0x8
c001c90c:	5b                   	pop    ebx
c001c90d:	c3                   	ret    

c001c90e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c90e:	55                   	push   ebp
c001c90f:	57                   	push   edi
c001c910:	56                   	push   esi
c001c911:	53                   	push   ebx
c001c912:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c918:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c91f:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c926:	85 c0                	test   eax,eax
c001c928:	0f 95 c1             	setne  cl
c001c92b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c933:	0f 94 c2             	sete   dl
c001c936:	84 d1                	test   cl,dl
c001c938:	74 23                	je     c001c95d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c93a:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c940:	74 1b                	je     c001c95d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c942:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c948:	89 da                	mov    edx,ebx
c001c94a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c950:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c956:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c95d:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c964:	05 ff 0f 00 00       	add    eax,0xfff
c001c969:	83 ec 0c             	sub    esp,0xc
c001c96c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c970:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c976:	c1 e8 0c             	shr    eax,0xc
c001c979:	89 fe                	mov    esi,edi
c001c97b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c97f:	c1 ee 0c             	shr    esi,0xc
c001c982:	6a 01                	push   0x1
c001c984:	e8 0e 4d ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c001c989:	89 c5                	mov    ebp,eax
c001c98b:	58                   	pop    eax
c001c98c:	5a                   	pop    edx
c001c98d:	56                   	push   esi
c001c98e:	68 57 cb 02 c0       	push   0xc002cb57
c001c993:	e8 05 61 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c998:	59                   	pop    ecx
c001c999:	58                   	pop    eax
c001c99a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c99e:	68 69 cb 02 c0       	push   0xc002cb69
c001c9a3:	e8 f5 60 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001c9a8:	83 c4 10             	add    esp,0x10
c001c9ab:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c9b1:	0f 86 31 01 00 00    	jbe    c001cae8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c9b7:	c1 e6 0c             	shl    esi,0xc
c001c9ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9bd:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c9c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9c4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c9cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c9ce:	01 df                	add    edi,ebx
c001c9d0:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c9d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c9d7:	0f 84 08 01 00 00    	je     c001cae5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c9dd:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c9e3:	76 05                	jbe    c001c9ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c9e5:	bf 00 10 00 00       	mov    edi,0x1000
c001c9ea:	83 ec 0c             	sub    esp,0xc
c001c9ed:	31 d2                	xor    edx,edx
c001c9ef:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c9f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9fc:	50                   	push   eax
c001c9fd:	8d 74 24 30          	lea    esi,[esp+0x30]
c001ca01:	56                   	push   esi
c001ca02:	52                   	push   edx
c001ca03:	57                   	push   edi
c001ca04:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ca0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca0e:	83 c4 20             	add    esp,0x20
c001ca11:	85 c0                	test   eax,eax
c001ca13:	74 0a                	je     c001ca1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001ca15:	53                   	push   ebx
c001ca16:	53                   	push   ebx
c001ca17:	50                   	push   eax
c001ca18:	68 7b cb 02 c0       	push   0xc002cb7b
c001ca1d:	eb 0f                	jmp    c001ca2e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001ca1f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001ca23:	74 20                	je     c001ca45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001ca25:	51                   	push   ecx
c001ca26:	51                   	push   ecx
c001ca27:	6a 00                	push   0x0
c001ca29:	68 a6 cb 02 c0       	push   0xc002cba6
c001ca2e:	e8 6a 60 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ca33:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ca36:	e8 1c 51 ff ff       	call   c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca3b:	83 c4 10             	add    esp,0x10
c001ca3e:	31 c0                	xor    eax,eax
c001ca40:	e9 68 01 00 00       	jmp    c001cbad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001ca45:	fa                   	cli    
c001ca46:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001ca4c:	e8 1b 31 ff ff       	call   c000fb6c <Phys::allocatePage()>
c001ca51:	6a 07                	push   0x7
c001ca53:	89 c7                	mov    edi,eax
c001ca55:	55                   	push   ebp
c001ca56:	50                   	push   eax
c001ca57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca5f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca65:	e8 64 54 ff ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca6a:	83 c4 0c             	add    esp,0xc
c001ca6d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca74:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca7a:	6a 00                	push   0x0
c001ca7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca81:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca84:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca8a:	e8 99 52 ff ff       	call   c0011d28 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca8f:	58                   	pop    eax
c001ca90:	5a                   	pop    edx
c001ca91:	68 07 0c 00 00       	push   0xc07
c001ca96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ca9a:	57                   	push   edi
c001ca9b:	89 ef                	mov    edi,ebp
c001ca9d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001caa4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caaa:	6a 00                	push   0x0
c001caac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cab1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cab4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caba:	e8 cb 57 ff ff       	call   c001228a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cabf:	b9 00 10 00 00       	mov    ecx,0x1000
c001cac4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cac6:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001cacb:	83 c4 20             	add    esp,0x20
c001cace:	48                   	dec    eax
c001cacf:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001cad4:	85 c0                	test   eax,eax
c001cad6:	75 01                	jne    c001cad9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cad8:	fb                   	sti    
c001cad9:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cae0:	e9 df fe ff ff       	jmp    c001c9c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cae5:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cae8:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001caf0:	0f 86 a9 00 00 00    	jbe    c001cb9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001caf6:	fa                   	cli    
c001caf7:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001cafd:	51                   	push   ecx
c001cafe:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cb05:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb0b:	6a 00                	push   0x0
c001cb0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb15:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb1b:	e8 08 52 ff ff       	call   c0011d28 <VAS::mapOtherVASIn(bool, VAS*)>
c001cb20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cb24:	c1 e6 0c             	shl    esi,0xc
c001cb27:	01 de                	add    esi,ebx
c001cb29:	83 c4 10             	add    esp,0x10
c001cb2c:	39 de                	cmp    esi,ebx
c001cb2e:	74 61                	je     c001cb91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cb30:	e8 37 30 ff ff       	call   c000fb6c <Phys::allocatePage()>
c001cb35:	6a 07                	push   0x7
c001cb37:	89 c7                	mov    edi,eax
c001cb39:	55                   	push   ebp
c001cb3a:	50                   	push   eax
c001cb3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb43:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb49:	e8 80 53 ff ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb4e:	58                   	pop    eax
c001cb4f:	5a                   	pop    edx
c001cb50:	68 07 0c 00 00       	push   0xc07
c001cb55:	53                   	push   ebx
c001cb56:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb5c:	57                   	push   edi
c001cb5d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cb64:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb6a:	6a 00                	push   0x0
c001cb6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb74:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb7a:	e8 0b 57 ff ff       	call   c001228a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cb7f:	83 c4 1c             	add    esp,0x1c
c001cb82:	68 00 10 00 00       	push   0x1000
c001cb87:	6a 00                	push   0x0
c001cb89:	55                   	push   ebp
c001cb8a:	e8 c1 3b fe ff       	call   c0000750 <memset>
c001cb8f:	eb 98                	jmp    c001cb29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cb91:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001cb96:	48                   	dec    eax
c001cb97:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001cb9c:	75 01                	jne    c001cb9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cb9e:	fb                   	sti    
c001cb9f:	83 ec 0c             	sub    esp,0xc
c001cba2:	55                   	push   ebp
c001cba3:	e8 af 4f ff ff       	call   c0011b57 <Virt::freeKernelVirtualPages(unsigned long)>
c001cba8:	83 c4 10             	add    esp,0x10
c001cbab:	b0 01                	mov    al,0x1
c001cbad:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cbb3:	5b                   	pop    ebx
c001cbb4:	5e                   	pop    esi
c001cbb5:	5f                   	pop    edi
c001cbb6:	5d                   	pop    ebp
c001cbb7:	c3                   	ret    

c001cbb8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cbb8:	55                   	push   ebp
c001cbb9:	57                   	push   edi
c001cbba:	56                   	push   esi
c001cbbb:	53                   	push   ebx
c001cbbc:	83 ec 48             	sub    esp,0x48
c001cbbf:	68 14 01 00 00       	push   0x114
c001cbc4:	e8 c3 2c ff ff       	call   c000f88c <malloc>
c001cbc9:	83 c4 0c             	add    esp,0xc
c001cbcc:	89 c6                	mov    esi,eax
c001cbce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cbd2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cbd6:	50                   	push   eax
c001cbd7:	e8 20 64 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001cbdc:	58                   	pop    eax
c001cbdd:	5a                   	pop    edx
c001cbde:	6a 01                	push   0x1
c001cbe0:	56                   	push   esi
c001cbe1:	e8 7a 64 ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001cbe6:	83 c4 10             	add    esp,0x10
c001cbe9:	85 c0                	test   eax,eax
c001cbeb:	0f 85 47 01 00 00    	jne    c001cd38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbf1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cbf9:	83 ec 0c             	sub    esp,0xc
c001cbfc:	6a 34                	push   0x34
c001cbfe:	e8 89 2c ff ff       	call   c000f88c <malloc>
c001cc03:	89 c3                	mov    ebx,eax
c001cc05:	58                   	pop    eax
c001cc06:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc08:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cc0c:	57                   	push   edi
c001cc0d:	53                   	push   ebx
c001cc0e:	6a 00                	push   0x0
c001cc10:	6a 34                	push   0x34
c001cc12:	56                   	push   esi
c001cc13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc16:	83 c4 20             	add    esp,0x20
c001cc19:	85 c0                	test   eax,eax
c001cc1b:	0f 85 17 01 00 00    	jne    c001cd38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc21:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cc27:	0f 85 0b 01 00 00    	jne    c001cd38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cc30:	85 c0                	test   eax,eax
c001cc32:	0f 84 00 01 00 00    	je     c001cd38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc38:	31 d2                	xor    edx,edx
c001cc3a:	55                   	push   ebp
c001cc3b:	52                   	push   edx
c001cc3c:	50                   	push   eax
c001cc3d:	56                   	push   esi
c001cc3e:	e8 db 64 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	85 c0                	test   eax,eax
c001cc48:	0f 85 ea 00 00 00    	jne    c001cd38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc4e:	83 ec 0c             	sub    esp,0xc
c001cc51:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cc54:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc5c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc60:	0f af c2             	imul   eax,edx
c001cc63:	50                   	push   eax
c001cc64:	e8 23 2c ff ff       	call   c000f88c <malloc>
c001cc69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc76:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cc7a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc7e:	0f af c2             	imul   eax,edx
c001cc81:	99                   	cdq    
c001cc82:	52                   	push   edx
c001cc83:	50                   	push   eax
c001cc84:	56                   	push   esi
c001cc85:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cc8b:	83 c4 20             	add    esp,0x20
c001cc8e:	85 c0                	test   eax,eax
c001cc90:	0f 84 a2 00 00 00    	je     c001cd38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc96:	31 d2                	xor    edx,edx
c001cc98:	51                   	push   ecx
c001cc99:	52                   	push   edx
c001cc9a:	50                   	push   eax
c001cc9b:	56                   	push   esi
c001cc9c:	e8 7d 64 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001cca1:	83 c4 10             	add    esp,0x10
c001cca4:	85 c0                	test   eax,eax
c001cca6:	0f 85 8c 00 00 00    	jne    c001cd38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ccb3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ccb7:	31 ed                	xor    ebp,ebp
c001ccb9:	0f af c2             	imul   eax,edx
c001ccbc:	50                   	push   eax
c001ccbd:	e8 ca 2b ff ff       	call   c000f88c <malloc>
c001ccc2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ccc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cccb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cccf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ccd3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ccd7:	0f af c2             	imul   eax,edx
c001ccda:	99                   	cdq    
c001ccdb:	52                   	push   edx
c001ccdc:	50                   	push   eax
c001ccdd:	56                   	push   esi
c001ccde:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cce1:	83 c4 20             	add    esp,0x20
c001cce4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ccec:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ccf0:	0f 86 80 00 00 00    	jbe    c001cd76 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ccf6:	0f b7 fd             	movzx  edi,bp
c001ccf9:	c1 e7 05             	shl    edi,0x5
c001ccfc:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cd00:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cd03:	75 6b                	jne    c001cd70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cd05:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cd08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd0c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cd0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd13:	52                   	push   edx
c001cd14:	31 d2                	xor    edx,edx
c001cd16:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cd19:	52                   	push   edx
c001cd1a:	50                   	push   eax
c001cd1b:	56                   	push   esi
c001cd1c:	e8 fd 63 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001cd21:	83 c4 10             	add    esp,0x10
c001cd24:	85 c0                	test   eax,eax
c001cd26:	74 17                	je     c001cd3f <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	68 d2 cb 02 c0       	push   0xc002cbd2
c001cd30:	e8 68 5d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001cd35:	83 c4 10             	add    esp,0x10
c001cd38:	31 c0                	xor    eax,eax
c001cd3a:	e9 87 00 00 00       	jmp    c001cdc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cd3f:	83 ec 0c             	sub    esp,0xc
c001cd42:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cd45:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cd48:	50                   	push   eax
c001cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd51:	56                   	push   esi
c001cd52:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cd56:	e8 b3 fb ff ff       	call   c001c90e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cd5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd5f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cd63:	83 c4 20             	add    esp,0x20
c001cd66:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cd6a:	73 04                	jae    c001cd70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd70:	45                   	inc    ebp
c001cd71:	e9 76 ff ff ff       	jmp    c001ccec <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cd76:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cd7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd82:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cd91:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cd96:	05 00 10 00 00       	add    eax,0x1000
c001cd9b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda2:	e8 f5 2a ff ff       	call   c000f89c <free>
c001cda7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdaa:	e8 ed 2a ff ff       	call   c000f89c <free>
c001cdaf:	58                   	pop    eax
c001cdb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdb4:	e8 e3 2a ff ff       	call   c000f89c <free>
c001cdb9:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdbc:	e8 fd 62 ff ff       	call   c00130be <File::close()>
c001cdc1:	83 c4 10             	add    esp,0x10
c001cdc4:	b0 01                	mov    al,0x1
c001cdc6:	83 c4 3c             	add    esp,0x3c
c001cdc9:	5b                   	pop    ebx
c001cdca:	5e                   	pop    esi
c001cdcb:	5f                   	pop    edi
c001cdcc:	5d                   	pop    ebp
c001cdcd:	c3                   	ret    

c001cdce <Thr::runtimeReferenceHelper()>:
c001cdce:	83 ec 18             	sub    esp,0x18
c001cdd1:	68 da cb 02 c0       	push   0xc002cbda
c001cdd6:	e8 c2 5c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001cddb:	fa                   	cli    
c001cddc:	83 c4 10             	add    esp,0x10
c001cddf:	eb fe                	jmp    c001cddf <Thr::runtimeReferenceHelper()+0x11>

c001cde1 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cde1:	57                   	push   edi
c001cde2:	56                   	push   esi
c001cde3:	53                   	push   ebx
c001cde4:	31 db                	xor    ebx,ebx
c001cde6:	39 1d e0 25 03 c0    	cmp    DWORD PTR ds:0xc00325e0,ebx
c001cdec:	7e 3c                	jle    c001ce2a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cdee:	8b 34 9d 60 25 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdaa0]
c001cdf5:	31 ff                	xor    edi,edi
c001cdf7:	39 3c 9d 60 24 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdba0],edi
c001cdfe:	7e 27                	jle    c001ce27 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ce00:	50                   	push   eax
c001ce01:	50                   	push   eax
c001ce02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce06:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce08:	03 04 9d e0 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdb20]
c001ce0f:	50                   	push   eax
c001ce10:	e8 83 3a fe ff       	call   c0000898 <strcmp>
c001ce15:	83 c4 10             	add    esp,0x10
c001ce18:	85 c0                	test   eax,eax
c001ce1a:	75 05                	jne    c001ce21 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ce1c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ce1f:	eb 0b                	jmp    c001ce2c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ce21:	83 c6 10             	add    esi,0x10
c001ce24:	47                   	inc    edi
c001ce25:	eb d0                	jmp    c001cdf7 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ce27:	43                   	inc    ebx
c001ce28:	eb bc                	jmp    c001cde6 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ce2a:	31 c0                	xor    eax,eax
c001ce2c:	5b                   	pop    ebx
c001ce2d:	5e                   	pop    esi
c001ce2e:	5f                   	pop    edi
c001ce2f:	c3                   	ret    

c001ce30 <Thr::loadKernelSymbolTable(char const*)>:
c001ce30:	55                   	push   ebp
c001ce31:	57                   	push   edi
c001ce32:	56                   	push   esi
c001ce33:	53                   	push   ebx
c001ce34:	83 ec 68             	sub    esp,0x68
c001ce37:	8b 35 30 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032630
c001ce3d:	68 14 01 00 00       	push   0x114
c001ce42:	e8 45 2a ff ff       	call   c000f88c <malloc>
c001ce47:	83 c4 0c             	add    esp,0xc
c001ce4a:	89 c3                	mov    ebx,eax
c001ce4c:	56                   	push   esi
c001ce4d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ce51:	50                   	push   eax
c001ce52:	e8 a5 61 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001ce57:	5e                   	pop    esi
c001ce58:	5f                   	pop    edi
c001ce59:	6a 01                	push   0x1
c001ce5b:	53                   	push   ebx
c001ce5c:	e8 ff 61 ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001ce61:	83 c4 10             	add    esp,0x10
c001ce64:	85 c0                	test   eax,eax
c001ce66:	74 0a                	je     c001ce72 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ce68:	83 ec 0c             	sub    esp,0xc
c001ce6b:	68 fc cb 02 c0       	push   0xc002cbfc
c001ce70:	eb 34                	jmp    c001cea6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ce72:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ce7a:	83 ec 0c             	sub    esp,0xc
c001ce7d:	6a 34                	push   0x34
c001ce7f:	e8 08 2a ff ff       	call   c000f88c <malloc>
c001ce84:	59                   	pop    ecx
c001ce85:	89 c7                	mov    edi,eax
c001ce87:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ce8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce8d:	56                   	push   esi
c001ce8e:	57                   	push   edi
c001ce8f:	6a 00                	push   0x0
c001ce91:	6a 34                	push   0x34
c001ce93:	53                   	push   ebx
c001ce94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce97:	83 c4 20             	add    esp,0x20
c001ce9a:	85 c0                	test   eax,eax
c001ce9c:	74 17                	je     c001ceb5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce9e:	83 ec 0c             	sub    esp,0xc
c001cea1:	68 13 cc 02 c0       	push   0xc002cc13
c001cea6:	e8 28 d6 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	31 c0                	xor    eax,eax
c001ceb0:	e9 31 02 00 00       	jmp    c001d0e6 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ceb5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cebb:	75 e1                	jne    c001ce9e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cebd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cec0:	85 c0                	test   eax,eax
c001cec2:	74 da                	je     c001ce9e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cec4:	52                   	push   edx
c001cec5:	31 d2                	xor    edx,edx
c001cec7:	52                   	push   edx
c001cec8:	50                   	push   eax
c001cec9:	53                   	push   ebx
c001ceca:	e8 4f 62 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001cecf:	83 c4 10             	add    esp,0x10
c001ced2:	85 c0                	test   eax,eax
c001ced4:	75 c8                	jne    c001ce9e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ced6:	83 ec 0c             	sub    esp,0xc
c001ced9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cedd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cee1:	31 ed                	xor    ebp,ebp
c001cee3:	0f af c2             	imul   eax,edx
c001cee6:	50                   	push   eax
c001cee7:	e8 a0 29 ff ff       	call   c000f88c <malloc>
c001ceec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ceee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cef2:	89 34 24             	mov    DWORD PTR [esp],esi
c001cef5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cef9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cefd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf01:	0f af c2             	imul   eax,edx
c001cf04:	99                   	cdq    
c001cf05:	52                   	push   edx
c001cf06:	50                   	push   eax
c001cf07:	53                   	push   ebx
c001cf08:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf0b:	83 c4 20             	add    esp,0x20
c001cf0e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cf16:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cf1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cf26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cf2e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cf32:	0f 86 aa 00 00 00    	jbe    c001cfe2 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cf38:	0f b7 f5             	movzx  esi,bp
c001cf3b:	6b f6 28             	imul   esi,esi,0x28
c001cf3e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cf42:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cf45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf49:	50                   	push   eax
c001cf4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf4e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cf52:	8b 16                	mov    edx,DWORD PTR [esi]
c001cf54:	6b c0 28             	imul   eax,eax,0x28
c001cf57:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cf5b:	89 d0                	mov    eax,edx
c001cf5d:	31 d2                	xor    edx,edx
c001cf5f:	52                   	push   edx
c001cf60:	50                   	push   eax
c001cf61:	53                   	push   ebx
c001cf62:	e8 b7 61 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001cf67:	83 c4 0c             	add    esp,0xc
c001cf6a:	6a 20                	push   0x20
c001cf6c:	6a 00                	push   0x0
c001cf6e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf72:	52                   	push   edx
c001cf73:	e8 d8 37 fe ff       	call   c0000750 <memset>
c001cf78:	58                   	pop    eax
c001cf79:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf7b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cf7f:	51                   	push   ecx
c001cf80:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cf84:	52                   	push   edx
c001cf85:	6a 00                	push   0x0
c001cf87:	6a 1f                	push   0x1f
c001cf89:	53                   	push   ebx
c001cf8a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf8d:	83 c4 18             	add    esp,0x18
c001cf90:	68 2a cc 02 c0       	push   0xc002cc2a
c001cf95:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf99:	52                   	push   edx
c001cf9a:	e8 f9 38 fe ff       	call   c0000898 <strcmp>
c001cf9f:	83 c4 10             	add    esp,0x10
c001cfa2:	85 c0                	test   eax,eax
c001cfa4:	75 0f                	jne    c001cfb5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cfa6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cfa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cfad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfb5:	50                   	push   eax
c001cfb6:	50                   	push   eax
c001cfb7:	68 32 cc 02 c0       	push   0xc002cc32
c001cfbc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cfc0:	50                   	push   eax
c001cfc1:	e8 d2 38 fe ff       	call   c0000898 <strcmp>
c001cfc6:	83 c4 10             	add    esp,0x10
c001cfc9:	85 c0                	test   eax,eax
c001cfcb:	75 0f                	jne    c001cfdc <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cfcd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cfd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cfd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfdc:	45                   	inc    ebp
c001cfdd:	e9 4c ff ff ff       	jmp    c001cf2e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cfe2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cfe7:	75 10                	jne    c001cff9 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cfe9:	83 ec 0c             	sub    esp,0xc
c001cfec:	68 3a cc 02 c0       	push   0xc002cc3a
c001cff1:	e8 dd d4 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001cff6:	83 c4 10             	add    esp,0x10
c001cff9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cffe:	75 10                	jne    c001d010 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d000:	83 ec 0c             	sub    esp,0xc
c001d003:	68 3a cc 02 c0       	push   0xc002cc3a
c001d008:	e8 c6 d4 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	31 d2                	xor    edx,edx
c001d012:	50                   	push   eax
c001d013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d017:	52                   	push   edx
c001d018:	50                   	push   eax
c001d019:	53                   	push   ebx
c001d01a:	e8 ff 60 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d01f:	5a                   	pop    edx
c001d020:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d024:	e8 63 28 ff ff       	call   c000f88c <malloc>
c001d029:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d02d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d031:	31 c9                	xor    ecx,ecx
c001d033:	5e                   	pop    esi
c001d034:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d036:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d03a:	55                   	push   ebp
c001d03b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d03f:	51                   	push   ecx
c001d040:	52                   	push   edx
c001d041:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d045:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d049:	53                   	push   ebx
c001d04a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d04d:	83 c4 14             	add    esp,0x14
c001d050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d054:	e8 33 28 ff ff       	call   c000f88c <malloc>
c001d059:	89 c6                	mov    esi,eax
c001d05b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d05d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d060:	56                   	push   esi
c001d061:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d065:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d069:	51                   	push   ecx
c001d06a:	52                   	push   edx
c001d06b:	53                   	push   ebx
c001d06c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d06f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d073:	8b 15 e0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325e0
c001d079:	83 c4 1c             	add    esp,0x1c
c001d07c:	c1 e8 04             	shr    eax,0x4
c001d07f:	89 04 95 60 24 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdba0],eax
c001d086:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d08a:	31 d2                	xor    edx,edx
c001d08c:	52                   	push   edx
c001d08d:	50                   	push   eax
c001d08e:	53                   	push   ebx
c001d08f:	e8 8a 60 ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d094:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d096:	31 d2                	xor    edx,edx
c001d098:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d09b:	56                   	push   esi
c001d09c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d0a0:	52                   	push   edx
c001d0a1:	50                   	push   eax
c001d0a2:	53                   	push   ebx
c001d0a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0a6:	83 c4 14             	add    esp,0x14
c001d0a9:	53                   	push   ebx
c001d0aa:	e8 0f 60 ff ff       	call   c00130be <File::close()>
c001d0af:	5d                   	pop    ebp
c001d0b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0b4:	e8 e3 27 ff ff       	call   c000f89c <free>
c001d0b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0bc:	e8 db 27 ff ff       	call   c000f89c <free>
c001d0c1:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001d0c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d0ca:	8d 50 01             	lea    edx,[eax+0x1]
c001d0cd:	89 0c 85 60 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdaa0],ecx
c001d0d4:	89 34 85 e0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb20],esi
c001d0db:	89 15 e0 25 03 c0    	mov    DWORD PTR ds:0xc00325e0,edx
c001d0e1:	83 c4 10             	add    esp,0x10
c001d0e4:	b0 01                	mov    al,0x1
c001d0e6:	83 c4 5c             	add    esp,0x5c
c001d0e9:	5b                   	pop    ebx
c001d0ea:	5e                   	pop    esi
c001d0eb:	5f                   	pop    edi
c001d0ec:	5d                   	pop    ebp
c001d0ed:	c3                   	ret    

c001d0ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d0ee:	55                   	push   ebp
c001d0ef:	57                   	push   edi
c001d0f0:	56                   	push   esi
c001d0f1:	53                   	push   ebx
c001d0f2:	81 ec 68 03 00 00    	sub    esp,0x368
c001d0f8:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d0ff:	8b 1d 30 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032630
c001d105:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d109:	68 14 01 00 00       	push   0x114
c001d10e:	e8 79 27 ff ff       	call   c000f88c <malloc>
c001d113:	83 c4 0c             	add    esp,0xc
c001d116:	89 c5                	mov    ebp,eax
c001d118:	53                   	push   ebx
c001d119:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d120:	50                   	push   eax
c001d121:	e8 d6 5e ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001d126:	5e                   	pop    esi
c001d127:	5f                   	pop    edi
c001d128:	6a 01                	push   0x1
c001d12a:	55                   	push   ebp
c001d12b:	e8 30 5f ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001d130:	83 c4 10             	add    esp,0x10
c001d133:	85 c0                	test   eax,eax
c001d135:	0f 85 a7 06 00 00    	jne    c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d13b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d143:	83 ec 0c             	sub    esp,0xc
c001d146:	6a 34                	push   0x34
c001d148:	e8 3f 27 ff ff       	call   c000f88c <malloc>
c001d14d:	5b                   	pop    ebx
c001d14e:	89 c7                	mov    edi,eax
c001d150:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d154:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d157:	53                   	push   ebx
c001d158:	57                   	push   edi
c001d159:	6a 00                	push   0x0
c001d15b:	6a 34                	push   0x34
c001d15d:	55                   	push   ebp
c001d15e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d161:	83 c4 20             	add    esp,0x20
c001d164:	85 c0                	test   eax,eax
c001d166:	0f 85 76 06 00 00    	jne    c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d16c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d172:	0f 85 6a 06 00 00    	jne    c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d178:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d17b:	85 c0                	test   eax,eax
c001d17d:	0f 84 5f 06 00 00    	je     c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d183:	31 d2                	xor    edx,edx
c001d185:	51                   	push   ecx
c001d186:	52                   	push   edx
c001d187:	50                   	push   eax
c001d188:	55                   	push   ebp
c001d189:	e8 90 5f ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d18e:	83 c4 10             	add    esp,0x10
c001d191:	85 c0                	test   eax,eax
c001d193:	0f 85 49 06 00 00    	jne    c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d199:	83 ec 0c             	sub    esp,0xc
c001d19c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d19f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d1a3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d1a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1ab:	0f af c2             	imul   eax,edx
c001d1ae:	50                   	push   eax
c001d1af:	e8 d8 26 ff ff       	call   c000f88c <malloc>
c001d1b4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1c2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d1c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1ca:	0f af c2             	imul   eax,edx
c001d1cd:	99                   	cdq    
c001d1ce:	52                   	push   edx
c001d1cf:	50                   	push   eax
c001d1d0:	55                   	push   ebp
c001d1d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1d4:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d1d7:	83 c4 20             	add    esp,0x20
c001d1da:	85 c0                	test   eax,eax
c001d1dc:	0f 84 00 06 00 00    	je     c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d1e2:	52                   	push   edx
c001d1e3:	31 d2                	xor    edx,edx
c001d1e5:	52                   	push   edx
c001d1e6:	50                   	push   eax
c001d1e7:	55                   	push   ebp
c001d1e8:	e8 31 5f ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d1ed:	83 c4 10             	add    esp,0x10
c001d1f0:	85 c0                	test   eax,eax
c001d1f2:	0f 85 ea 05 00 00    	jne    c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d1f8:	83 ec 0c             	sub    esp,0xc
c001d1fb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1ff:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d203:	31 f6                	xor    esi,esi
c001d205:	0f af c2             	imul   eax,edx
c001d208:	50                   	push   eax
c001d209:	e8 7e 26 ff ff       	call   c000f88c <malloc>
c001d20e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d211:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d215:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d218:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d21c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d220:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d224:	0f af c2             	imul   eax,edx
c001d227:	99                   	cdq    
c001d228:	52                   	push   edx
c001d229:	50                   	push   eax
c001d22a:	55                   	push   ebp
c001d22b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d22e:	83 c4 20             	add    esp,0x20
c001d231:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d235:	0f 86 8a 00 00 00    	jbe    c001d2c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d23b:	0f b7 de             	movzx  ebx,si
c001d23e:	c1 e3 05             	shl    ebx,0x5
c001d241:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d245:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d248:	75 75                	jne    c001d2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d24a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d24d:	31 d2                	xor    edx,edx
c001d24f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d253:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d256:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d25a:	50                   	push   eax
c001d25b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d25e:	52                   	push   edx
c001d25f:	50                   	push   eax
c001d260:	55                   	push   ebp
c001d261:	e8 b8 5e ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d266:	83 c4 10             	add    esp,0x10
c001d269:	85 c0                	test   eax,eax
c001d26b:	0f 85 71 05 00 00    	jne    c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d271:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d278:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d27b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d27f:	31 d2                	xor    edx,edx
c001d281:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d285:	83 ec 0c             	sub    esp,0xc
c001d288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d28c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d293:	50                   	push   eax
c001d294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29c:	52                   	push   edx
c001d29d:	50                   	push   eax
c001d29e:	55                   	push   ebp
c001d29f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2a2:	83 c4 1c             	add    esp,0x1c
c001d2a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d2a8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d2ab:	50                   	push   eax
c001d2ac:	6a 00                	push   0x0
c001d2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d2b6:	50                   	push   eax
c001d2b7:	e8 94 34 fe ff       	call   c0000750 <memset>
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	46                   	inc    esi
c001d2c0:	e9 6c ff ff ff       	jmp    c001d231 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d2c5:	53                   	push   ebx
c001d2c6:	31 db                	xor    ebx,ebx
c001d2c8:	68 00 01 00 00       	push   0x100
c001d2cd:	6a 00                	push   0x0
c001d2cf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d2d3:	50                   	push   eax
c001d2d4:	e8 77 34 fe ff       	call   c0000750 <memset>
c001d2d9:	83 c4 0c             	add    esp,0xc
c001d2dc:	68 00 01 00 00       	push   0x100
c001d2e1:	6a 00                	push   0x0
c001d2e3:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d2ea:	50                   	push   eax
c001d2eb:	e8 60 34 fe ff       	call   c0000750 <memset>
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d2fb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d303:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d30b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d313:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d31b:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d31f:	0f 86 30 01 00 00    	jbe    c001d455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d325:	0f b7 f3             	movzx  esi,bx
c001d328:	6b f6 28             	imul   esi,esi,0x28
c001d32b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d32f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d332:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d336:	52                   	push   edx
c001d337:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d33b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d33f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d341:	6b d2 28             	imul   edx,edx,0x28
c001d344:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d348:	31 d2                	xor    edx,edx
c001d34a:	52                   	push   edx
c001d34b:	50                   	push   eax
c001d34c:	55                   	push   ebp
c001d34d:	e8 cc 5d ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d352:	83 c4 0c             	add    esp,0xc
c001d355:	6a 20                	push   0x20
c001d357:	6a 00                	push   0x0
c001d359:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d360:	51                   	push   ecx
c001d361:	e8 ea 33 fe ff       	call   c0000750 <memset>
c001d366:	59                   	pop    ecx
c001d367:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d36a:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d36e:	52                   	push   edx
c001d36f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d376:	51                   	push   ecx
c001d377:	6a 00                	push   0x0
c001d379:	6a 1f                	push   0x1f
c001d37b:	55                   	push   ebp
c001d37c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d37f:	83 c4 1c             	add    esp,0x1c
c001d382:	6a 09                	push   0x9
c001d384:	68 54 cc 02 c0       	push   0xc002cc54
c001d389:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d390:	51                   	push   ecx
c001d391:	e8 b6 32 fe ff       	call   c000064c <memcmp>
c001d396:	83 c4 10             	add    esp,0x10
c001d399:	85 c0                	test   eax,eax
c001d39b:	75 21                	jne    c001d3be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d39d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3a5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d3a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d3ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3b0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d3b7:	89 d0                	mov    eax,edx
c001d3b9:	40                   	inc    eax
c001d3ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3be:	50                   	push   eax
c001d3bf:	6a 09                	push   0x9
c001d3c1:	68 5e cc 02 c0       	push   0xc002cc5e
c001d3c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3cd:	50                   	push   eax
c001d3ce:	e8 79 32 fe ff       	call   c000064c <memcmp>
c001d3d3:	83 c4 10             	add    esp,0x10
c001d3d6:	85 c0                	test   eax,eax
c001d3d8:	75 21                	jne    c001d3fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d3da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3e2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d3e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d3ea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3ed:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d3f4:	89 d0                	mov    eax,edx
c001d3f6:	40                   	inc    eax
c001d3f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3fb:	50                   	push   eax
c001d3fc:	50                   	push   eax
c001d3fd:	68 2a cc 02 c0       	push   0xc002cc2a
c001d402:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d409:	50                   	push   eax
c001d40a:	e8 89 34 fe ff       	call   c0000898 <strcmp>
c001d40f:	83 c4 10             	add    esp,0x10
c001d412:	85 c0                	test   eax,eax
c001d414:	75 0f                	jne    c001d425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d416:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d419:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d41d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d421:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d425:	50                   	push   eax
c001d426:	50                   	push   eax
c001d427:	68 32 cc 02 c0       	push   0xc002cc32
c001d42c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d433:	50                   	push   eax
c001d434:	e8 5f 34 fe ff       	call   c0000898 <strcmp>
c001d439:	83 c4 10             	add    esp,0x10
c001d43c:	85 c0                	test   eax,eax
c001d43e:	75 0f                	jne    c001d44f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d440:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d443:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d44b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d44f:	43                   	inc    ebx
c001d450:	e9 c6 fe ff ff       	jmp    c001d31b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d455:	31 d2                	xor    edx,edx
c001d457:	50                   	push   eax
c001d458:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d45c:	52                   	push   edx
c001d45d:	50                   	push   eax
c001d45e:	55                   	push   ebp
c001d45f:	e8 ba 5c ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d464:	58                   	pop    eax
c001d465:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d469:	e8 1e 24 ff ff       	call   c000f88c <malloc>
c001d46e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d471:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d475:	31 d2                	xor    edx,edx
c001d477:	58                   	pop    eax
c001d478:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d47c:	53                   	push   ebx
c001d47d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d485:	52                   	push   edx
c001d486:	50                   	push   eax
c001d487:	55                   	push   ebp
c001d488:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d48b:	83 c4 14             	add    esp,0x14
c001d48e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d492:	e8 f5 23 ff ff       	call   c000f88c <malloc>
c001d497:	31 d2                	xor    edx,edx
c001d499:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d49d:	83 c4 0c             	add    esp,0xc
c001d4a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4a4:	52                   	push   edx
c001d4a5:	50                   	push   eax
c001d4a6:	55                   	push   ebp
c001d4a7:	e8 72 5c ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d4ac:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d4af:	31 d2                	xor    edx,edx
c001d4b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d4b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d4bc:	52                   	push   edx
c001d4bd:	50                   	push   eax
c001d4be:	55                   	push   ebp
c001d4bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4c2:	83 c4 20             	add    esp,0x20
c001d4c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d4cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d4d1:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d4d5:	0f 84 0b 03 00 00    	je     c001d7e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d4db:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d4e2:	31 d2                	xor    edx,edx
c001d4e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4e8:	c1 e8 03             	shr    eax,0x3
c001d4eb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d4ef:	51                   	push   ecx
c001d4f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4f4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d4f8:	52                   	push   edx
c001d4f9:	50                   	push   eax
c001d4fa:	55                   	push   ebp
c001d4fb:	e8 1e 5c ff ff       	call   c001311e <File::seek(unsigned long long)>
c001d500:	5b                   	pop    ebx
c001d501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d505:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d50c:	e8 7b 23 ff ff       	call   c000f88c <malloc>
c001d511:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d514:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d518:	31 d2                	xor    edx,edx
c001d51a:	5e                   	pop    esi
c001d51b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d51f:	50                   	push   eax
c001d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d528:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d52f:	52                   	push   edx
c001d530:	50                   	push   eax
c001d531:	55                   	push   ebp
c001d532:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d535:	83 c4 20             	add    esp,0x20
c001d538:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d540:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d544:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d548:	0f 8d 7c 02 00 00    	jge    c001d7ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d54e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d552:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d556:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d55b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d55e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d562:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d566:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d56a:	89 d8                	mov    eax,ebx
c001d56c:	c1 e8 08             	shr    eax,0x8
c001d56f:	89 c6                	mov    esi,eax
c001d571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d575:	c1 e6 04             	shl    esi,0x4
c001d578:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d57c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d57f:	85 d2                	test   edx,edx
c001d581:	0f 85 bf 00 00 00    	jne    c001d646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d587:	83 ec 0c             	sub    esp,0xc
c001d58a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d58e:	03 06                	add    eax,DWORD PTR [esi]
c001d590:	50                   	push   eax
c001d591:	e8 4b f8 ff ff       	call   c001cde1 <Thr::getAddressOfKernelSymbol(char const*)>
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	89 c2                	mov    edx,eax
c001d59b:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d5a0:	85 c0                	test   eax,eax
c001d5a2:	0f 85 9e 00 00 00    	jne    c001d646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5af:	03 06                	add    eax,DWORD PTR [esi]
c001d5b1:	50                   	push   eax
c001d5b2:	e8 88 0f ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	89 c2                	mov    edx,eax
c001d5bc:	85 c0                	test   eax,eax
c001d5be:	0f 85 82 00 00 00    	jne    c001d646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d5c4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d5c8:	50                   	push   eax
c001d5c9:	50                   	push   eax
c001d5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ce:	03 06                	add    eax,DWORD PTR [esi]
c001d5d0:	50                   	push   eax
c001d5d1:	68 68 cc 02 c0       	push   0xc002cc68
c001d5d6:	e8 c2 54 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001d5db:	58                   	pop    eax
c001d5dc:	5a                   	pop    edx
c001d5dd:	68 82 cc 02 c0       	push   0xc002cc82
c001d5e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5e9:	50                   	push   eax
c001d5ea:	e8 1d 32 fe ff       	call   c000080c <strcpy>
c001d5ef:	59                   	pop    ecx
c001d5f0:	58                   	pop    eax
c001d5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5f5:	03 06                	add    eax,DWORD PTR [esi]
c001d5f7:	50                   	push   eax
c001d5f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5ff:	50                   	push   eax
c001d600:	e8 47 33 fe ff       	call   c000094c <strcat>
c001d605:	58                   	pop    eax
c001d606:	5a                   	pop    edx
c001d607:	68 18 cd 02 c0       	push   0xc002cd18
c001d60c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d613:	50                   	push   eax
c001d614:	e8 33 33 fe ff       	call   c000094c <strcat>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d621:	0f 84 5d 01 00 00    	je     c001d784 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d627:	83 ec 0c             	sub    esp,0xc
c001d62a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d631:	50                   	push   eax
c001d632:	e8 9c ce ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001d637:	83 c4 10             	add    esp,0x10
c001d63a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d63e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d642:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d646:	80 fb 01             	cmp    bl,0x1
c001d649:	0f 85 88 00 00 00    	jne    c001d6d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d64f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d656:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d65a:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d65e:	01 ce                	add    esi,ecx
c001d660:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d666:	0f 94 c0             	sete   al
c001d669:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d66f:	0f 94 c3             	sete   bl
c001d672:	09 c3                	or     ebx,eax
c001d674:	8b 06                	mov    eax,DWORD PTR [esi]
c001d676:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d67b:	74 41                	je     c001d6be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d67d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d680:	84 db                	test   bl,bl
c001d682:	75 15                	jne    c001d699 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d684:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d688:	66 83 f8 0c          	cmp    ax,0xc
c001d68c:	76 05                	jbe    c001d693 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d68e:	b8 0c 00 00 00       	mov    eax,0xc
c001d693:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d697:	76 37                	jbe    c001d6d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d699:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d69d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6a2:	0f 84 dc 00 00 00    	je     c001d784 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d6a8:	83 ec 0c             	sub    esp,0xc
c001d6ab:	68 99 cc 02 c0       	push   0xc002cc99
c001d6b0:	e8 1e ce ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d6bc:	eb 12                	jmp    c001d6d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d6be:	01 c1                	add    ecx,eax
c001d6c0:	84 db                	test   bl,bl
c001d6c2:	75 0c                	jne    c001d6d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d6c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d6c8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d6cc:	77 02                	ja     c001d6d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d6ce:	01 d1                	add    ecx,edx
c001d6d0:	89 0e                	mov    DWORD PTR [esi],ecx
c001d6d2:	e9 ea 00 00 00       	jmp    c001d7c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d6d7:	80 fb 02             	cmp    bl,0x2
c001d6da:	75 7c                	jne    c001d758 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d6dc:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d6e3:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d6e7:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d6eb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d6f1:	74 20                	je     c001d713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d6f3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d6f9:	74 18                	je     c001d713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d6fb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d6ff:	b9 0a 00 00 00       	mov    ecx,0xa
c001d704:	66 83 f8 0e          	cmp    ax,0xe
c001d708:	77 03                	ja     c001d70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d70a:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d70d:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d711:	76 1f                	jbe    c001d732 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d713:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d717:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d71c:	74 66                	je     c001d784 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d71e:	83 ec 0c             	sub    esp,0xc
c001d721:	68 b5 cc 02 c0       	push   0xc002ccb5
c001d726:	e8 a8 cd ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001d72b:	83 c4 10             	add    esp,0x10
c001d72e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d732:	8b 06                	mov    eax,DWORD PTR [esi]
c001d734:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d739:	74 13                	je     c001d74e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d73b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d73f:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d746:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d74a:	01 c8                	add    eax,ecx
c001d74c:	eb 04                	jmp    c001d752 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d74e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d752:	01 c2                	add    edx,eax
c001d754:	89 16                	mov    DWORD PTR [esi],edx
c001d756:	eb 69                	jmp    c001d7c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d758:	0f b6 db             	movzx  ebx,bl
c001d75b:	50                   	push   eax
c001d75c:	50                   	push   eax
c001d75d:	53                   	push   ebx
c001d75e:	68 d1 cc 02 c0       	push   0xc002ccd1
c001d763:	e8 35 53 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001d768:	83 c4 10             	add    esp,0x10
c001d76b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d770:	74 12                	je     c001d784 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d772:	83 ec 0c             	sub    esp,0xc
c001d775:	68 dc cc 02 c0       	push   0xc002ccdc
c001d77a:	e8 54 cd ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001d77f:	83 c4 10             	add    esp,0x10
c001d782:	eb 3d                	jmp    c001d7c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d784:	83 ec 0c             	sub    esp,0xc
c001d787:	55                   	push   ebp
c001d788:	e8 31 59 ff ff       	call   c00130be <File::close()>
c001d78d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d790:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d793:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d796:	59                   	pop    ecx
c001d797:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d79b:	e8 fc 20 ff ff       	call   c000f89c <free>
c001d7a0:	5b                   	pop    ebx
c001d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7a5:	e8 f2 20 ff ff       	call   c000f89c <free>
c001d7aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7ad:	e8 ea 20 ff ff       	call   c000f89c <free>
c001d7b2:	5e                   	pop    esi
c001d7b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7b7:	e8 e0 20 ff ff       	call   c000f89c <free>
c001d7bc:	83 c4 10             	add    esp,0x10
c001d7bf:	eb 21                	jmp    c001d7e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d7c1:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d7c5:	e9 76 fd ff ff       	jmp    c001d540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d7ca:	83 ec 0c             	sub    esp,0xc
c001d7cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7d1:	e8 c6 20 ff ff       	call   c000f89c <free>
c001d7d6:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d7da:	83 c4 10             	add    esp,0x10
c001d7dd:	e9 eb fc ff ff       	jmp    c001d4cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d7e2:	31 c0                	xor    eax,eax
c001d7e4:	eb 33                	jmp    c001d819 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d7e6:	83 ec 0c             	sub    esp,0xc
c001d7e9:	55                   	push   ebp
c001d7ea:	e8 cf 58 ff ff       	call   c00130be <File::close()>
c001d7ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d7f2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d7f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7f8:	58                   	pop    eax
c001d7f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7fd:	e8 9a 20 ff ff       	call   c000f89c <free>
c001d802:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d805:	e8 92 20 ff ff       	call   c000f89c <free>
c001d80a:	5a                   	pop    edx
c001d80b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d80f:	e8 88 20 ff ff       	call   c000f89c <free>
c001d814:	83 c4 10             	add    esp,0x10
c001d817:	b0 01                	mov    al,0x1
c001d819:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d81f:	5b                   	pop    ebx
c001d820:	5e                   	pop    esi
c001d821:	5f                   	pop    edi
c001d822:	5d                   	pop    ebp
c001d823:	c3                   	ret    

c001d824 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d824:	56                   	push   esi
c001d825:	31 d2                	xor    edx,edx
c001d827:	53                   	push   ebx
c001d828:	8b 1d 40 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e40
c001d82e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d832:	39 d3                	cmp    ebx,edx
c001d834:	7e 1b                	jle    c001d851 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d836:	8b 04 95 60 20 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdfa0]
c001d83d:	39 c8                	cmp    eax,ecx
c001d83f:	77 0d                	ja     c001d84e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d841:	8b 34 95 60 1e 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce1a0]
c001d848:	01 c6                	add    esi,eax
c001d84a:	39 ce                	cmp    esi,ecx
c001d84c:	77 05                	ja     c001d853 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d84e:	42                   	inc    edx
c001d84f:	eb e1                	jmp    c001d832 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d851:	31 c0                	xor    eax,eax
c001d853:	5b                   	pop    ebx
c001d854:	5e                   	pop    esi
c001d855:	c3                   	ret    

c001d856 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d856:	53                   	push   ebx
c001d857:	31 c0                	xor    eax,eax
c001d859:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d85d:	8b 1d 40 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e40
c001d863:	39 c3                	cmp    ebx,eax
c001d865:	7e 22                	jle    c001d889 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d867:	8b 14 85 60 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdfa0]
c001d86e:	39 ca                	cmp    edx,ecx
c001d870:	77 14                	ja     c001d886 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d872:	03 14 85 60 1e 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce1a0]
c001d879:	39 ca                	cmp    edx,ecx
c001d87b:	76 09                	jbe    c001d886 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d87d:	8b 04 85 60 22 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdda0]
c001d884:	eb 05                	jmp    c001d88b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d886:	40                   	inc    eax
c001d887:	eb da                	jmp    c001d863 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d889:	31 c0                	xor    eax,eax
c001d88b:	5b                   	pop    ebx
c001d88c:	c3                   	ret    

c001d88d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d88d:	53                   	push   ebx
c001d88e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d892:	53                   	push   ebx
c001d893:	e8 8c ff ff ff       	call   c001d824 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d898:	5a                   	pop    edx
c001d899:	31 d2                	xor    edx,edx
c001d89b:	85 c0                	test   eax,eax
c001d89d:	74 04                	je     c001d8a3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d89f:	89 da                	mov    edx,ebx
c001d8a1:	29 c2                	sub    edx,eax
c001d8a3:	89 d0                	mov    eax,edx
c001d8a5:	5b                   	pop    ebx
c001d8a6:	c3                   	ret    

c001d8a7 <Thr::loadDLL(char const*, bool)>:
c001d8a7:	55                   	push   ebp
c001d8a8:	57                   	push   edi
c001d8a9:	56                   	push   esi
c001d8aa:	53                   	push   ebx
c001d8ab:	81 ec 34 01 00 00    	sub    esp,0x134
c001d8b1:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d8b8:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d8bf:	56                   	push   esi
c001d8c0:	68 f4 cc 02 c0       	push   0xc002ccf4
c001d8c5:	e8 d3 51 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001d8ca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d8d1:	e8 b6 1f ff ff       	call   c000f88c <malloc>
c001d8d6:	83 c4 0c             	add    esp,0xc
c001d8d9:	89 c3                	mov    ebx,eax
c001d8db:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c001d8e1:	56                   	push   esi
c001d8e2:	50                   	push   eax
c001d8e3:	e8 14 57 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001d8e8:	83 c4 10             	add    esp,0x10
c001d8eb:	85 db                	test   ebx,ebx
c001d8ed:	75 3c                	jne    c001d92b <Thr::loadDLL(char const*, bool)+0x84>
c001d8ef:	89 f8                	mov    eax,edi
c001d8f1:	84 c0                	test   al,al
c001d8f3:	0f 84 cc 01 00 00    	je     c001dac5 <Thr::loadDLL(char const*, bool)+0x21e>
c001d8f9:	55                   	push   ebp
c001d8fa:	55                   	push   ebp
c001d8fb:	68 05 cd 02 c0       	push   0xc002cd05
c001d900:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d904:	55                   	push   ebp
c001d905:	e8 02 2f fe ff       	call   c000080c <strcpy>
c001d90a:	58                   	pop    eax
c001d90b:	5a                   	pop    edx
c001d90c:	56                   	push   esi
c001d90d:	55                   	push   ebp
c001d90e:	e8 39 30 fe ff       	call   c000094c <strcat>
c001d913:	59                   	pop    ecx
c001d914:	58                   	pop    eax
c001d915:	68 18 cd 02 c0       	push   0xc002cd18
c001d91a:	55                   	push   ebp
c001d91b:	e8 2c 30 fe ff       	call   c000094c <strcat>
c001d920:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d923:	e8 ab cb ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001d928:	83 c4 10             	add    esp,0x10
c001d92b:	51                   	push   ecx
c001d92c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d930:	50                   	push   eax
c001d931:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d935:	50                   	push   eax
c001d936:	53                   	push   ebx
c001d937:	e8 d0 59 ff ff       	call   c001330c <File::stat(unsigned long long*, bool*)>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	85 db                	test   ebx,ebx
c001d941:	74 0c                	je     c001d94f <Thr::loadDLL(char const*, bool)+0xa8>
c001d943:	83 ec 0c             	sub    esp,0xc
c001d946:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d948:	53                   	push   ebx
c001d949:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d94c:	83 c4 10             	add    esp,0x10
c001d94f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d954:	75 0a                	jne    c001d960 <Thr::loadDLL(char const*, bool)+0xb9>
c001d956:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d95a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d95e:	75 3c                	jne    c001d99c <Thr::loadDLL(char const*, bool)+0xf5>
c001d960:	89 f8                	mov    eax,edi
c001d962:	84 c0                	test   al,al
c001d964:	0f 84 43 01 00 00    	je     c001daad <Thr::loadDLL(char const*, bool)+0x206>
c001d96a:	51                   	push   ecx
c001d96b:	51                   	push   ecx
c001d96c:	68 05 cd 02 c0       	push   0xc002cd05
c001d971:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d975:	53                   	push   ebx
c001d976:	e8 91 2e fe ff       	call   c000080c <strcpy>
c001d97b:	5d                   	pop    ebp
c001d97c:	58                   	pop    eax
c001d97d:	56                   	push   esi
c001d97e:	53                   	push   ebx
c001d97f:	e8 c8 2f fe ff       	call   c000094c <strcat>
c001d984:	58                   	pop    eax
c001d985:	5a                   	pop    edx
c001d986:	68 18 cd 02 c0       	push   0xc002cd18
c001d98b:	53                   	push   ebx
c001d98c:	e8 bb 2f fe ff       	call   c000094c <strcat>
c001d991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d994:	e8 3a cb ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001d999:	83 c4 10             	add    esp,0x10
c001d99c:	52                   	push   edx
c001d99d:	6a 03                	push   0x3
c001d99f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d9a7:	05 ff 0f 00 00       	add    eax,0xfff
c001d9ac:	83 d2 00             	adc    edx,0x0
c001d9af:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9b3:	50                   	push   eax
c001d9b4:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001d9ba:	e8 11 46 ff ff       	call   c0011fd0 <VAS::allocatePages(int, int)>
c001d9bf:	59                   	pop    ecx
c001d9c0:	89 c3                	mov    ebx,eax
c001d9c2:	5d                   	pop    ebp
c001d9c3:	50                   	push   eax
c001d9c4:	68 1a cd 02 c0       	push   0xc002cd1a
c001d9c9:	e8 cf 50 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001d9ce:	89 34 24             	mov    DWORD PTR [esp],esi
c001d9d1:	e8 96 2d fe ff       	call   c000076c <strlen>
c001d9d6:	8b 2d 40 1e 03 c0    	mov    ebp,DWORD PTR ds:0xc0031e40
c001d9dc:	40                   	inc    eax
c001d9dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9e0:	e8 a7 1e ff ff       	call   c000f88c <malloc>
c001d9e5:	89 04 ad 60 22 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdda0],eax
c001d9ec:	58                   	pop    eax
c001d9ed:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c001d9f2:	5a                   	pop    edx
c001d9f3:	56                   	push   esi
c001d9f4:	ff 34 85 60 22 03 c0 	push   DWORD PTR [eax*4-0x3ffcdda0]
c001d9fb:	e8 0c 2e fe ff       	call   c000080c <strcpy>
c001da00:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c001da05:	8d 50 01             	lea    edx,[eax+0x1]
c001da08:	89 1c 85 60 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfa0],ebx
c001da0f:	89 15 40 1e 03 c0    	mov    DWORD PTR ds:0xc0031e40,edx
c001da15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da19:	83 c4 0c             	add    esp,0xc
c001da1c:	89 14 85 60 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1a0],edx
c001da23:	6a 01                	push   0x1
c001da25:	53                   	push   ebx
c001da26:	56                   	push   esi
c001da27:	e8 c2 f6 ff ff       	call   c001d0ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001da2c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001da30:	83 c4 10             	add    esp,0x10
c001da33:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001da38:	0f 85 83 00 00 00    	jne    c001dac1 <Thr::loadDLL(char const*, bool)+0x21a>
c001da3e:	89 f8                	mov    eax,edi
c001da40:	84 c0                	test   al,al
c001da42:	74 6d                	je     c001dab1 <Thr::loadDLL(char const*, bool)+0x20a>
c001da44:	83 ec 0c             	sub    esp,0xc
c001da47:	68 27 cd 02 c0       	push   0xc002cd27
c001da4c:	e8 82 ca ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001da51:	83 c4 10             	add    esp,0x10
c001da54:	eb 5b                	jmp    c001dab1 <Thr::loadDLL(char const*, bool)+0x20a>
c001da56:	89 ee                	mov    esi,ebp
c001da58:	50                   	push   eax
c001da59:	c1 e6 0c             	shl    esi,0xc
c001da5c:	50                   	push   eax
c001da5d:	01 de                	add    esi,ebx
c001da5f:	56                   	push   esi
c001da60:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001da66:	e8 cd 40 ff ff       	call   c0011b38 <VAS::getPageTableEntry(unsigned long)>
c001da6b:	83 c4 10             	add    esp,0x10
c001da6e:	f6 00 60             	test   BYTE PTR [eax],0x60
c001da71:	75 0c                	jne    c001da7f <Thr::loadDLL(char const*, bool)+0x1d8>
c001da73:	83 ec 0c             	sub    esp,0xc
c001da76:	56                   	push   esi
c001da77:	e8 66 20 ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c001da7c:	83 c4 10             	add    esp,0x10
c001da7f:	45                   	inc    ebp
c001da80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da88:	05 ff 0f 00 00       	add    eax,0xfff
c001da8d:	bf 00 00 00 00       	mov    edi,0x0
c001da92:	83 d2 00             	adc    edx,0x0
c001da95:	0f ac d0 0c          	shrd   eax,edx,0xc
c001da99:	c1 ea 0c             	shr    edx,0xc
c001da9c:	39 c5                	cmp    ebp,eax
c001da9e:	89 d1                	mov    ecx,edx
c001daa0:	89 f8                	mov    eax,edi
c001daa2:	19 c8                	sbb    eax,ecx
c001daa4:	72 b0                	jb     c001da56 <Thr::loadDLL(char const*, bool)+0x1af>
c001daa6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001daab:	75 18                	jne    c001dac5 <Thr::loadDLL(char const*, bool)+0x21e>
c001daad:	31 db                	xor    ebx,ebx
c001daaf:	eb 14                	jmp    c001dac5 <Thr::loadDLL(char const*, bool)+0x21e>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	68 46 cd 02 c0       	push   0xc002cd46
c001dab9:	e8 15 ca ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	31 ed                	xor    ebp,ebp
c001dac3:	eb bb                	jmp    c001da80 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dac5:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dacb:	89 d8                	mov    eax,ebx
c001dacd:	5b                   	pop    ebx
c001dace:	5e                   	pop    esi
c001dacf:	5f                   	pop    edi
c001dad0:	5d                   	pop    ebp
c001dad1:	c3                   	ret    

c001dad2 <Thr::executeDLL(unsigned long, void*)>:
c001dad2:	56                   	push   esi
c001dad3:	53                   	push   ebx
c001dad4:	52                   	push   edx
c001dad5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dad9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dadd:	85 db                	test   ebx,ebx
c001dadf:	75 10                	jne    c001daf1 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dae1:	83 ec 0c             	sub    esp,0xc
c001dae4:	68 62 cd 02 c0       	push   0xc002cd62
c001dae9:	e8 e5 c9 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	50                   	push   eax
c001daf2:	50                   	push   eax
c001daf3:	53                   	push   ebx
c001daf4:	68 8c cd 02 c0       	push   0xc002cd8c
c001daf9:	e8 9f 4f ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001dafe:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001db02:	89 d8                	mov    eax,ebx
c001db04:	83 c4 14             	add    esp,0x14
c001db07:	5b                   	pop    ebx
c001db08:	5e                   	pop    esi
c001db09:	ff e0                	jmp    eax
c001db0b:	90                   	nop

c001db0c <userModeEntryPoint(void*)>:
c001db0c:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001db11:	48                   	dec    eax
c001db12:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001db17:	75 01                	jne    c001db1a <userModeEntryPoint(void*)+0xe>
c001db19:	fb                   	sti    
c001db1a:	fb                   	sti    
c001db1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001db23:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001db29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db2d:	e9 f8 27 fe ff       	jmp    c000032a <goToUsermode>

c001db32 <changeTSS>:
c001db32:	83 ec 14             	sub    esp,0x14
c001db35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db3a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001db3d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001db42:	c1 e2 15             	shl    edx,0x15
c001db45:	29 d0                	sub    eax,edx
c001db47:	50                   	push   eax
c001db48:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001db4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001db53:	05 7c 11 00 00       	add    eax,0x117c
c001db58:	50                   	push   eax
c001db59:	e8 78 34 ff ff       	call   c0010fd6 <TSS::setESP(unsigned long)>
c001db5e:	83 c4 1c             	add    esp,0x1c
c001db61:	c3                   	ret    

c001db62 <switchToThread(ThreadControlBlock*)>:
c001db62:	57                   	push   edi
c001db63:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001db68:	56                   	push   esi
c001db69:	85 c0                	test   eax,eax
c001db6b:	53                   	push   ebx
c001db6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db70:	0f 85 88 00 00 00    	jne    c001dbfe <switchToThread(ThreadControlBlock*)+0x9c>
c001db76:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001db79:	3c ff                	cmp    al,0xff
c001db7b:	74 7d                	je     c001dbfa <switchToThread(ThreadControlBlock*)+0x98>
c001db7d:	0f b6 d0             	movzx  edx,al
c001db80:	b8 84 03 00 00       	mov    eax,0x384
c001db85:	29 d0                	sub    eax,edx
c001db87:	c1 e0 10             	shl    eax,0x10
c001db8a:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001db8d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001db90:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c001db95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001db9b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dba2:	74 4a                	je     c001dbee <switchToThread(ThreadControlBlock*)+0x8c>
c001dba4:	0f 31                	rdtsc  
c001dba6:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001dbab:	89 c6                	mov    esi,eax
c001dbad:	89 d7                	mov    edi,edx
c001dbaf:	2b 35 38 26 03 c0    	sub    esi,DWORD PTR ds:0xc0032638
c001dbb5:	89 15 4c 26 03 c0    	mov    DWORD PTR ds:0xc003264c,edx
c001dbbb:	1b 3d 3c 26 03 c0    	sbb    edi,DWORD PTR ds:0xc003263c
c001dbc1:	89 35 40 26 03 c0    	mov    DWORD PTR ds:0xc0032640,esi
c001dbc7:	a3 38 26 03 c0       	mov    ds:0xc0032638,eax
c001dbcc:	89 3d 44 26 03 c0    	mov    DWORD PTR ds:0xc0032644,edi
c001dbd2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dbd8:	89 15 3c 26 03 c0    	mov    DWORD PTR ds:0xc003263c,edx
c001dbde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dbe1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dbe4:	01 c6                	add    esi,eax
c001dbe6:	11 d7                	adc    edi,edx
c001dbe8:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001dbeb:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001dbee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dbf2:	5b                   	pop    ebx
c001dbf3:	5e                   	pop    esi
c001dbf4:	5f                   	pop    edi
c001dbf5:	e9 68 27 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dbfa:	31 c0                	xor    eax,eax
c001dbfc:	eb 8f                	jmp    c001db8d <switchToThread(ThreadControlBlock*)+0x2b>
c001dbfe:	5b                   	pop    ebx
c001dbff:	c7 05 00 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x1
c001dc09:	5e                   	pop    esi
c001dc0a:	5f                   	pop    edi
c001dc0b:	c3                   	ret    

c001dc0c <Process::addArgs(char**)>:
c001dc0c:	57                   	push   edi
c001dc0d:	56                   	push   esi
c001dc0e:	53                   	push   ebx
c001dc0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc13:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dc17:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dc21:	85 ff                	test   edi,edi
c001dc23:	74 3d                	je     c001dc62 <Process::addArgs(char**)+0x56>
c001dc25:	8b 07                	mov    eax,DWORD PTR [edi]
c001dc27:	85 c0                	test   eax,eax
c001dc29:	74 37                	je     c001dc62 <Process::addArgs(char**)+0x56>
c001dc2b:	31 db                	xor    ebx,ebx
c001dc2d:	83 ec 0c             	sub    esp,0xc
c001dc30:	50                   	push   eax
c001dc31:	e8 36 2b fe ff       	call   c000076c <strlen>
c001dc36:	40                   	inc    eax
c001dc37:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc3a:	e8 4d 1c ff ff       	call   c000f88c <malloc>
c001dc3f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dc46:	5a                   	pop    edx
c001dc47:	59                   	pop    ecx
c001dc48:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dc4b:	43                   	inc    ebx
c001dc4c:	50                   	push   eax
c001dc4d:	e8 ba 2b fe ff       	call   c000080c <strcpy>
c001dc52:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dc58:	83 c4 10             	add    esp,0x10
c001dc5b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dc5e:	85 c0                	test   eax,eax
c001dc60:	75 cb                	jne    c001dc2d <Process::addArgs(char**)+0x21>
c001dc62:	5b                   	pop    ebx
c001dc63:	5e                   	pop    esi
c001dc64:	5f                   	pop    edi
c001dc65:	c3                   	ret    

c001dc66 <Process::Process(char const*, Process*, char**)>:
c001dc66:	56                   	push   esi
c001dc67:	53                   	push   ebx
c001dc68:	83 ec 14             	sub    esp,0x14
c001dc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc6f:	05 0c 02 00 00       	add    eax,0x20c
c001dc74:	bb 07 00 00 00       	mov    ebx,0x7
c001dc79:	89 c6                	mov    esi,eax
c001dc7b:	85 db                	test   ebx,ebx
c001dc7d:	78 12                	js     c001dc91 <Process::Process(char const*, Process*, char**)+0x2b>
c001dc7f:	83 ec 0c             	sub    esp,0xc
c001dc82:	56                   	push   esi
c001dc83:	e8 4a bb 00 00       	call   c00297d2 <ThreadControlBlock::ThreadControlBlock()>
c001dc88:	83 c4 10             	add    esp,0x10
c001dc8b:	83 c6 63             	add    esi,0x63
c001dc8e:	4b                   	dec    ebx
c001dc8f:	eb ea                	jmp    c001dc7b <Process::Process(char const*, Process*, char**)+0x15>
c001dc91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc95:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc9c:	83 ec 0c             	sub    esp,0xc
c001dc9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dca3:	e8 84 c6 ff ff       	call   c001a32c <Krnl::newProcessEnv(Process*)>
c001dca8:	83 c4 10             	add    esp,0x10
c001dcab:	89 c2                	mov    edx,eax
c001dcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcb1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcbb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcc4:	a1 70 e6 02 c0       	mov    eax,ds:0xc002e670
c001dcc9:	8d 50 01             	lea    edx,[eax+0x1]
c001dccc:	89 15 70 e6 02 c0    	mov    DWORD PTR ds:0xc002e670,edx
c001dcd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dcd6:	89 02                	mov    DWORD PTR [edx],eax
c001dcd8:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dce0:	83 ec 0c             	sub    esp,0xc
c001dce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dce7:	e8 a0 1b ff ff       	call   c000f88c <malloc>
c001dcec:	83 c4 10             	add    esp,0x10
c001dcef:	89 c3                	mov    ebx,eax
c001dcf1:	83 ec 08             	sub    esp,0x8
c001dcf4:	6a 00                	push   0x0
c001dcf6:	53                   	push   ebx
c001dcf7:	e8 7c 46 ff ff       	call   c0012378 <VAS::VAS(bool)>
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd03:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd0d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dd1f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd29:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd2f:	85 c0                	test   eax,eax
c001dd31:	74 42                	je     c001dd75 <Process::Process(char const*, Process*, char**)+0x10f>
c001dd33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd37:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd3d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd47:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd51:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd57:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd61:	05 0c 01 00 00       	add    eax,0x10c
c001dd66:	83 ec 08             	sub    esp,0x8
c001dd69:	52                   	push   edx
c001dd6a:	50                   	push   eax
c001dd6b:	e8 9c 2a fe ff       	call   c000080c <strcpy>
c001dd70:	83 c4 10             	add    esp,0x10
c001dd73:	eb 63                	jmp    c001ddd8 <Process::Process(char const*, Process*, char**)+0x172>
c001dd75:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dd7d:	83 ec 0c             	sub    esp,0xc
c001dd80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dd84:	e8 03 1b ff ff       	call   c000f88c <malloc>
c001dd89:	83 c4 10             	add    esp,0x10
c001dd8c:	89 c3                	mov    ebx,eax
c001dd8e:	83 ec 08             	sub    esp,0x8
c001dd91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd95:	53                   	push   ebx
c001dd96:	e8 1d 2f ff ff       	call   c0010cb8 <VgaText::VgaText(char const*)>
c001dd9b:	83 c4 10             	add    esp,0x10
c001dd9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dda2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dda8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddb2:	83 ec 0c             	sub    esp,0xc
c001ddb5:	50                   	push   eax
c001ddb6:	e8 42 24 ff ff       	call   c00101fd <addToTerminalCycle(VgaText*)>
c001ddbb:	83 c4 10             	add    esp,0x10
c001ddbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddc2:	05 0c 01 00 00       	add    eax,0x10c
c001ddc7:	83 ec 08             	sub    esp,0x8
c001ddca:	68 ab cd 02 c0       	push   0xc002cdab
c001ddcf:	50                   	push   eax
c001ddd0:	e8 37 2a fe ff       	call   c000080c <strcpy>
c001ddd5:	83 c4 10             	add    esp,0x10
c001ddd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dddc:	83 c0 0c             	add    eax,0xc
c001dddf:	83 ec 08             	sub    esp,0x8
c001dde2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dde6:	50                   	push   eax
c001dde7:	e8 20 2a fe ff       	call   c000080c <strcpy>
c001ddec:	83 c4 10             	add    esp,0x10
c001ddef:	83 ec 08             	sub    esp,0x8
c001ddf2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ddfa:	e8 0d fe ff ff       	call   c001dc0c <Process::addArgs(char**)>
c001ddff:	83 c4 10             	add    esp,0x10
c001de02:	83 ec 08             	sub    esp,0x8
c001de05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de0d:	e8 a6 ed ff ff       	call   c001cbb8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001de12:	83 c4 10             	add    esp,0x10
c001de15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001de19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001de1d:	83 f0 01             	xor    eax,0x1
c001de20:	88 c2                	mov    dl,al
c001de22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de26:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001de2c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001de31:	83 ec 08             	sub    esp,0x8
c001de34:	50                   	push   eax
c001de35:	68 d8 ce 02 c0       	push   0xc002ced8
c001de3a:	e8 5e 4c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001de3f:	83 c4 10             	add    esp,0x10
c001de42:	90                   	nop
c001de43:	83 c4 14             	add    esp,0x14
c001de46:	5b                   	pop    ebx
c001de47:	5e                   	pop    esi
c001de48:	c3                   	ret    
c001de49:	90                   	nop

c001de4a <Process::Process(bool, char const*, Process*, char**)>:
c001de4a:	56                   	push   esi
c001de4b:	53                   	push   ebx
c001de4c:	83 ec 24             	sub    esp,0x24
c001de4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001de53:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de5b:	05 0c 02 00 00       	add    eax,0x20c
c001de60:	bb 07 00 00 00       	mov    ebx,0x7
c001de65:	89 c6                	mov    esi,eax
c001de67:	85 db                	test   ebx,ebx
c001de69:	78 12                	js     c001de7d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001de6b:	83 ec 0c             	sub    esp,0xc
c001de6e:	56                   	push   esi
c001de6f:	e8 5e b9 00 00       	call   c00297d2 <ThreadControlBlock::ThreadControlBlock()>
c001de74:	83 c4 10             	add    esp,0x10
c001de77:	83 c6 63             	add    esi,0x63
c001de7a:	4b                   	dec    ebx
c001de7b:	eb ea                	jmp    c001de67 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001de7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de81:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001de88:	83 ec 0c             	sub    esp,0xc
c001de8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de8f:	e8 98 c4 ff ff       	call   c001a32c <Krnl::newProcessEnv(Process*)>
c001de94:	83 c4 10             	add    esp,0x10
c001de97:	89 c2                	mov    edx,eax
c001de99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de9d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dea7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001deb0:	a1 70 e6 02 c0       	mov    eax,ds:0xc002e670
c001deb5:	8d 50 01             	lea    edx,[eax+0x1]
c001deb8:	89 15 70 e6 02 c0    	mov    DWORD PTR ds:0xc002e670,edx
c001debe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dec2:	89 02                	mov    DWORD PTR [edx],eax
c001dec4:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001decc:	83 ec 0c             	sub    esp,0xc
c001decf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ded3:	e8 b4 19 ff ff       	call   c000f88c <malloc>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	89 c3                	mov    ebx,eax
c001dedd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dee2:	83 ec 08             	sub    esp,0x8
c001dee5:	50                   	push   eax
c001dee6:	53                   	push   ebx
c001dee7:	e8 8c 44 ff ff       	call   c0012378 <VAS::VAS(bool)>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001def3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001def9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001defd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df0b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df0f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df19:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df1f:	85 c0                	test   eax,eax
c001df21:	74 42                	je     c001df65 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001df23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df27:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df2d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df37:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df47:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df51:	05 0c 01 00 00       	add    eax,0x10c
c001df56:	83 ec 08             	sub    esp,0x8
c001df59:	52                   	push   edx
c001df5a:	50                   	push   eax
c001df5b:	e8 ac 28 fe ff       	call   c000080c <strcpy>
c001df60:	83 c4 10             	add    esp,0x10
c001df63:	eb 63                	jmp    c001dfc8 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001df65:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001df6d:	83 ec 0c             	sub    esp,0xc
c001df70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001df74:	e8 13 19 ff ff       	call   c000f88c <malloc>
c001df79:	83 c4 10             	add    esp,0x10
c001df7c:	89 c3                	mov    ebx,eax
c001df7e:	83 ec 08             	sub    esp,0x8
c001df81:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001df85:	53                   	push   ebx
c001df86:	e8 2d 2d ff ff       	call   c0010cb8 <VgaText::VgaText(char const*)>
c001df8b:	83 c4 10             	add    esp,0x10
c001df8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df92:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001df98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df9c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	50                   	push   eax
c001dfa6:	e8 52 22 ff ff       	call   c00101fd <addToTerminalCycle(VgaText*)>
c001dfab:	83 c4 10             	add    esp,0x10
c001dfae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfb2:	05 0c 01 00 00       	add    eax,0x10c
c001dfb7:	83 ec 08             	sub    esp,0x8
c001dfba:	68 ab cd 02 c0       	push   0xc002cdab
c001dfbf:	50                   	push   eax
c001dfc0:	e8 47 28 fe ff       	call   c000080c <strcpy>
c001dfc5:	83 c4 10             	add    esp,0x10
c001dfc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfcc:	83 c0 0c             	add    eax,0xc
c001dfcf:	83 ec 08             	sub    esp,0x8
c001dfd2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dfd6:	50                   	push   eax
c001dfd7:	e8 30 28 fe ff       	call   c000080c <strcpy>
c001dfdc:	83 c4 10             	add    esp,0x10
c001dfdf:	83 ec 08             	sub    esp,0x8
c001dfe2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfe6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfea:	e8 1d fc ff ff       	call   c001dc0c <Process::addArgs(char**)>
c001dfef:	83 c4 10             	add    esp,0x10
c001dff2:	90                   	nop
c001dff3:	83 c4 24             	add    esp,0x24
c001dff6:	5b                   	pop    ebx
c001dff7:	5e                   	pop    esi
c001dff8:	c3                   	ret    

c001dff9 <taskStartupFunction>:
c001dff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dffe:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e001:	c3                   	ret    

c001e002 <Semaphore::Semaphore(int)>:
c001e002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e00a:	89 10                	mov    DWORD PTR [eax],edx
c001e00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e010:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e01b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e026:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e02d:	90                   	nop
c001e02e:	c3                   	ret    
c001e02f:	90                   	nop

c001e030 <Mutex::Mutex()>:
c001e030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e034:	6a 01                	push   0x1
c001e036:	50                   	push   eax
c001e037:	e8 c6 ff ff ff       	call   c001e002 <Semaphore::Semaphore(int)>
c001e03c:	83 c4 08             	add    esp,0x8
c001e03f:	90                   	nop
c001e040:	c3                   	ret    
c001e041:	90                   	nop

c001e042 <Process::createThread(void (*)(void*), void*, int)>:
c001e042:	55                   	push   ebp
c001e043:	31 c9                	xor    ecx,ecx
c001e045:	57                   	push   edi
c001e046:	56                   	push   esi
c001e047:	53                   	push   ebx
c001e048:	83 ec 1c             	sub    esp,0x1c
c001e04b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e04f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e056:	89 f2                	mov    edx,esi
c001e058:	0f b7 c2             	movzx  eax,dx
c001e05b:	83 e2 01             	and    edx,0x1
c001e05e:	74 16                	je     c001e076 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e060:	d1 f8                	sar    eax,1
c001e062:	41                   	inc    ecx
c001e063:	89 c2                	mov    edx,eax
c001e065:	83 f9 10             	cmp    ecx,0x10
c001e068:	75 ee                	jne    c001e058 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e06a:	83 c4 1c             	add    esp,0x1c
c001e06d:	31 db                	xor    ebx,ebx
c001e06f:	89 d8                	mov    eax,ebx
c001e071:	5b                   	pop    ebx
c001e072:	5e                   	pop    esi
c001e073:	5f                   	pop    edi
c001e074:	5d                   	pop    ebp
c001e075:	c3                   	ret    
c001e076:	b8 01 00 00 00       	mov    eax,0x1
c001e07b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e07e:	d3 e0                	shl    eax,cl
c001e080:	09 c6                	or     esi,eax
c001e082:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e085:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e08c:	89 c6                	mov    esi,eax
c001e08e:	c1 e6 05             	shl    esi,0x5
c001e091:	01 f0                	add    eax,esi
c001e093:	01 d8                	add    eax,ebx
c001e095:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e09c:	75 0a                	jne    c001e0a8 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e09e:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e0a8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0ae:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e0b2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e0b5:	01 ca                	add    edx,ecx
c001e0b7:	83 ec 08             	sub    esp,0x8
c001e0ba:	89 d0                	mov    eax,edx
c001e0bc:	c1 e0 05             	shl    eax,0x5
c001e0bf:	01 d0                	add    eax,edx
c001e0c1:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e0c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e0c9:	01 d8                	add    eax,ebx
c001e0cb:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e0d1:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e0d7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e0dd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e0e3:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e0e9:	89 cd                	mov    ebp,ecx
c001e0eb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e0ef:	f7 dd                	neg    ebp
c001e0f1:	c1 e5 15             	shl    ebp,0x15
c001e0f4:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e0fa:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e100:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e10a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e110:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e11a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e124:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e128:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e12f:	53                   	push   ebx
c001e130:	68 24 26 03 c0       	push   0xc0032624
c001e135:	e8 52 b4 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e13a:	89 d8                	mov    eax,ebx
c001e13c:	83 c4 10             	add    esp,0x10
c001e13f:	83 c4 1c             	add    esp,0x1c
c001e142:	5b                   	pop    ebx
c001e143:	5e                   	pop    esi
c001e144:	5f                   	pop    edi
c001e145:	5d                   	pop    ebp
c001e146:	c3                   	ret    
c001e147:	90                   	nop

c001e148 <Process::createUserThread()>:
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	68 80 00 00 00       	push   0x80
c001e150:	6a 00                	push   0x0
c001e152:	68 0c db 01 c0       	push   0xc001db0c
c001e157:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e15b:	e8 e2 fe ff ff       	call   c001e042 <Process::createThread(void (*)(void*), void*, int)>
c001e160:	83 c4 1c             	add    esp,0x1c
c001e163:	c3                   	ret    

c001e164 <setupMultitasking(void (*)())>:
c001e164:	56                   	push   esi
c001e165:	53                   	push   ebx
c001e166:	51                   	push   ecx
c001e167:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e16b:	eb 10                	jmp    c001e17d <setupMultitasking(void (*)())+0x19>
c001e16d:	83 ec 0c             	sub    esp,0xc
c001e170:	68 24 26 03 c0       	push   0xc0032624
c001e175:	e8 64 b3 00 00       	call   c00294de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e17a:	83 c4 10             	add    esp,0x10
c001e17d:	83 ec 0c             	sub    esp,0xc
c001e180:	68 24 26 03 c0       	push   0xc0032624
c001e185:	e8 30 b3 00 00       	call   c00294ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	84 c0                	test   al,al
c001e18f:	74 dc                	je     c001e16d <setupMultitasking(void (*)())+0x9>
c001e191:	83 ec 0c             	sub    esp,0xc
c001e194:	68 3f 07 00 00       	push   0x73f
c001e199:	e8 ee 16 ff ff       	call   c000f88c <malloc>
c001e19e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e1a5:	89 c3                	mov    ebx,eax
c001e1a7:	6a 00                	push   0x0
c001e1a9:	68 af cd 02 c0       	push   0xc002cdaf
c001e1ae:	6a 01                	push   0x1
c001e1b0:	50                   	push   eax
c001e1b1:	e8 94 fc ff ff       	call   c001de4a <Process::Process(bool, char const*, Process*, char**)>
c001e1b6:	83 c4 18             	add    esp,0x18
c001e1b9:	89 1d 30 26 03 c0    	mov    DWORD PTR ds:0xc0032630,ebx
c001e1bf:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e1c5:	68 00 cf 02 c0       	push   0xc002cf00
c001e1ca:	e8 ce 48 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e1cf:	58                   	pop    eax
c001e1d0:	5a                   	pop    edx
c001e1d1:	6a 63                	push   0x63
c001e1d3:	68 34 cf 02 c0       	push   0xc002cf34
c001e1d8:	e8 c0 48 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e1dd:	59                   	pop    ecx
c001e1de:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e1e4:	e8 d7 26 ff ff       	call   c00108c0 <setActiveTerminal(VgaText*)>
c001e1e9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e1f1:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e1fb:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e201:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e204:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e20e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e214:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e21a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e224:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e22e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e238:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e23e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e248:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e24e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e258:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e25e:	58                   	pop    eax
c001e25f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e265:	5a                   	pop    edx
c001e266:	68 ab cd 02 c0       	push   0xc002cdab
c001e26b:	50                   	push   eax
c001e26c:	e8 9b 25 fe ff       	call   c000080c <strcpy>
c001e271:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e278:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e27c:	83 c4 14             	add    esp,0x14
c001e27f:	5b                   	pop    ebx
c001e280:	5e                   	pop    esi
c001e281:	e9 ce 20 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e286 <schedule()>:
c001e286:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001e28b:	85 c0                	test   eax,eax
c001e28d:	74 0b                	je     c001e29a <schedule()+0x14>
c001e28f:	c7 05 00 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x1
c001e299:	c3                   	ret    
c001e29a:	53                   	push   ebx
c001e29b:	83 ec 14             	sub    esp,0x14
c001e29e:	68 24 26 03 c0       	push   0xc0032624
c001e2a3:	e8 12 b2 00 00       	call   c00294ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e2a8:	83 c4 10             	add    esp,0x10
c001e2ab:	84 c0                	test   al,al
c001e2ad:	75 38                	jne    c001e2e7 <schedule()+0x61>
c001e2af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2b7:	4a                   	dec    edx
c001e2b8:	74 32                	je     c001e2ec <schedule()+0x66>
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	68 24 26 03 c0       	push   0xc0032624
c001e2c2:	e8 0f b2 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2c7:	c7 04 24 24 26 03 c0 	mov    DWORD PTR [esp],0xc0032624
c001e2ce:	89 c3                	mov    ebx,eax
c001e2d0:	e8 09 b2 00 00       	call   c00294de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2d5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e2dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2df:	e8 7e f8 ff ff       	call   c001db62 <switchToThread(ThreadControlBlock*)>
c001e2e4:	83 c4 10             	add    esp,0x10
c001e2e7:	83 c4 08             	add    esp,0x8
c001e2ea:	5b                   	pop    ebx
c001e2eb:	c3                   	ret    
c001e2ec:	83 ec 08             	sub    esp,0x8
c001e2ef:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e2f6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e2fc:	68 24 26 03 c0       	push   0xc0032624
c001e301:	e8 86 b2 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e306:	83 c4 10             	add    esp,0x10
c001e309:	eb af                	jmp    c001e2ba <schedule()+0x34>
c001e30b:	90                   	nop

c001e30c <Semaphore::tryAcquire()>:
c001e30c:	53                   	push   ebx
c001e30d:	83 ec 08             	sub    esp,0x8
c001e310:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e314:	fa                   	cli    
c001e315:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e31a:	8d 50 01             	lea    edx,[eax+0x1]
c001e31d:	89 15 08 26 03 c0    	mov    DWORD PTR ds:0xc0032608,edx
c001e323:	8b 15 04 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032604
c001e329:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e32c:	89 1d 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,ebx
c001e332:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e335:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e337:	7c 2a                	jl     c001e363 <Semaphore::tryAcquire()+0x57>
c001e339:	89 15 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,edx
c001e33f:	85 d2                	test   edx,edx
c001e341:	75 0a                	jne    c001e34d <Semaphore::tryAcquire()+0x41>
c001e343:	8b 15 00 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032600
c001e349:	85 d2                	test   edx,edx
c001e34b:	75 5b                	jne    c001e3a8 <Semaphore::tryAcquire()+0x9c>
c001e34d:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e352:	85 c0                	test   eax,eax
c001e354:	74 07                	je     c001e35d <Semaphore::tryAcquire()+0x51>
c001e356:	31 c0                	xor    eax,eax
c001e358:	83 c4 08             	add    esp,0x8
c001e35b:	5b                   	pop    ebx
c001e35c:	c3                   	ret    
c001e35d:	fb                   	sti    
c001e35e:	83 c4 08             	add    esp,0x8
c001e361:	5b                   	pop    ebx
c001e362:	c3                   	ret    
c001e363:	43                   	inc    ebx
c001e364:	89 15 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,edx
c001e36a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e36d:	85 d2                	test   edx,edx
c001e36f:	75 1f                	jne    c001e390 <Semaphore::tryAcquire()+0x84>
c001e371:	8b 0d 00 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032600
c001e377:	85 c9                	test   ecx,ecx
c001e379:	74 15                	je     c001e390 <Semaphore::tryAcquire()+0x84>
c001e37b:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001e385:	e8 fc fe ff ff       	call   c001e286 <schedule()>
c001e38a:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e38f:	48                   	dec    eax
c001e390:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e395:	85 c0                	test   eax,eax
c001e397:	75 08                	jne    c001e3a1 <Semaphore::tryAcquire()+0x95>
c001e399:	fb                   	sti    
c001e39a:	b0 01                	mov    al,0x1
c001e39c:	83 c4 08             	add    esp,0x8
c001e39f:	5b                   	pop    ebx
c001e3a0:	c3                   	ret    
c001e3a1:	b0 01                	mov    al,0x1
c001e3a3:	83 c4 08             	add    esp,0x8
c001e3a6:	5b                   	pop    ebx
c001e3a7:	c3                   	ret    
c001e3a8:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001e3b2:	e8 cf fe ff ff       	call   c001e286 <schedule()>
c001e3b7:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e3bc:	48                   	dec    eax
c001e3bd:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e3c2:	85 c0                	test   eax,eax
c001e3c4:	75 90                	jne    c001e356 <Semaphore::tryAcquire()+0x4a>
c001e3c6:	eb 95                	jmp    c001e35d <Semaphore::tryAcquire()+0x51>

c001e3c8 <Semaphore::assertLocked(char const*)>:
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3cf:	fa                   	cli    
c001e3d0:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001e3d6:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001e3db:	8d 48 01             	lea    ecx,[eax+0x1]
c001e3de:	89 0d 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,ecx
c001e3e4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e3e6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e3e9:	7c 24                	jl     c001e40f <Semaphore::assertLocked(char const*)+0x47>
c001e3eb:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001e3f0:	85 c0                	test   eax,eax
c001e3f2:	75 09                	jne    c001e3fd <Semaphore::assertLocked(char const*)+0x35>
c001e3f4:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c001e3f9:	85 c0                	test   eax,eax
c001e3fb:	75 29                	jne    c001e426 <Semaphore::assertLocked(char const*)+0x5e>
c001e3fd:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e402:	48                   	dec    eax
c001e403:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e408:	75 01                	jne    c001e40b <Semaphore::assertLocked(char const*)+0x43>
c001e40a:	fb                   	sti    
c001e40b:	83 c4 0c             	add    esp,0xc
c001e40e:	c3                   	ret    
c001e40f:	83 ec 0c             	sub    esp,0xc
c001e412:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e416:	e8 b8 c0 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001e41b:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	48                   	dec    eax
c001e424:	eb c5                	jmp    c001e3eb <Semaphore::assertLocked(char const*)+0x23>
c001e426:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001e430:	e8 51 fe ff ff       	call   c001e286 <schedule()>
c001e435:	eb c6                	jmp    c001e3fd <Semaphore::assertLocked(char const*)+0x35>

c001e437 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e437:	83 ec 14             	sub    esp,0x14
c001e43a:	ff 35 08 26 03 c0    	push   DWORD PTR ds:0xc0032608
c001e440:	68 58 cf 02 c0       	push   0xc002cf58
c001e445:	e8 53 46 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e44a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e44f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e453:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e456:	e8 2b fe ff ff       	call   c001e286 <schedule()>
c001e45b:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e460:	83 c4 10             	add    esp,0x10
c001e463:	48                   	dec    eax
c001e464:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e469:	85 c0                	test   eax,eax
c001e46b:	75 06                	jne    c001e473 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e46d:	fb                   	sti    
c001e46e:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e473:	83 ec 08             	sub    esp,0x8
c001e476:	50                   	push   eax
c001e477:	68 8c cf 02 c0       	push   0xc002cf8c
c001e47c:	e8 1c 46 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e481:	83 c4 1c             	add    esp,0x1c
c001e484:	c3                   	ret    

c001e485 <blockTask(TaskState)>:
c001e485:	83 ec 0c             	sub    esp,0xc
c001e488:	fa                   	cli    
c001e489:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001e48f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e493:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e498:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e49b:	e8 e6 fd ff ff       	call   c001e286 <schedule()>
c001e4a0:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e4a5:	48                   	dec    eax
c001e4a6:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e4ab:	75 01                	jne    c001e4ae <blockTask(TaskState)+0x29>
c001e4ad:	fb                   	sti    
c001e4ae:	83 c4 0c             	add    esp,0xc
c001e4b1:	c3                   	ret    

c001e4b2 <waitTask(int, int*, int)>:
c001e4b2:	83 ec 18             	sub    esp,0x18
c001e4b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4be:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e4c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e4c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4ca:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e4cd:	6a 07                	push   0x7
c001e4cf:	e8 b1 ff ff ff       	call   c001e485 <blockTask(TaskState)>
c001e4d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e4df:	85 d2                	test   edx,edx
c001e4e1:	74 0a                	je     c001e4ed <waitTask(int, int*, int)+0x3b>
c001e4e3:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e4e6:	89 02                	mov    DWORD PTR [edx],eax
c001e4e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4ed:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e4f0:	83 c4 0c             	add    esp,0xc
c001e4f3:	c3                   	ret    

c001e4f4 <nanoSleepUntil(unsigned long long)>:
c001e4f4:	83 ec 0c             	sub    esp,0xc
c001e4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4ff:	3b 05 50 f7 02 c0    	cmp    eax,DWORD PTR ds:0xc002f750
c001e505:	89 d1                	mov    ecx,edx
c001e507:	1b 0d 54 f7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f754
c001e50d:	73 04                	jae    c001e513 <nanoSleepUntil(unsigned long long)+0x1f>
c001e50f:	83 c4 0c             	add    esp,0xc
c001e512:	c3                   	ret    
c001e513:	fa                   	cli    
c001e514:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001e51a:	83 ec 08             	sub    esp,0x8
c001e51d:	ff 05 04 26 03 c0    	inc    DWORD PTR ds:0xc0032604
c001e523:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e529:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e52c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e52f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e535:	68 18 26 03 c0       	push   0xc0032618
c001e53a:	e8 4d b0 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e53f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e546:	e8 3a ff ff ff       	call   c001e485 <blockTask(TaskState)>
c001e54b:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001e550:	83 c4 10             	add    esp,0x10
c001e553:	48                   	dec    eax
c001e554:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001e559:	85 c0                	test   eax,eax
c001e55b:	75 09                	jne    c001e566 <nanoSleepUntil(unsigned long long)+0x72>
c001e55d:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c001e562:	85 c0                	test   eax,eax
c001e564:	75 12                	jne    c001e578 <nanoSleepUntil(unsigned long long)+0x84>
c001e566:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e56b:	48                   	dec    eax
c001e56c:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e571:	75 9c                	jne    c001e50f <nanoSleepUntil(unsigned long long)+0x1b>
c001e573:	fb                   	sti    
c001e574:	83 c4 0c             	add    esp,0xc
c001e577:	c3                   	ret    
c001e578:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001e582:	e8 ff fc ff ff       	call   c001e286 <schedule()>
c001e587:	eb dd                	jmp    c001e566 <nanoSleepUntil(unsigned long long)+0x72>

c001e589 <nanoSleep(unsigned long long)>:
c001e589:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001e58e:	8b 15 54 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f754
c001e594:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e598:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e59c:	e9 53 ff ff ff       	jmp    c001e4f4 <nanoSleepUntil(unsigned long long)>

c001e5a1 <sleep(unsigned long long)>:
c001e5a1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e5a9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e5ae:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e5b2:	01 ca                	add    edx,ecx
c001e5b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5b8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e5bc:	eb cb                	jmp    c001e589 <nanoSleep(unsigned long long)>

c001e5be <Semaphore::acquire()>:
c001e5be:	83 ec 0c             	sub    esp,0xc
c001e5c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5c5:	fa                   	cli    
c001e5c6:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001e5cb:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001e5d1:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5d4:	89 0d 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,ecx
c001e5da:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e5dd:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e5df:	7d 28                	jge    c001e609 <Semaphore::acquire()+0x4b>
c001e5e1:	41                   	inc    ecx
c001e5e2:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e5e5:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001e5ea:	85 c0                	test   eax,eax
c001e5ec:	75 09                	jne    c001e5f7 <Semaphore::acquire()+0x39>
c001e5ee:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c001e5f3:	85 c0                	test   eax,eax
c001e5f5:	75 4e                	jne    c001e645 <Semaphore::acquire()+0x87>
c001e5f7:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e5fc:	48                   	dec    eax
c001e5fd:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e602:	75 01                	jne    c001e605 <Semaphore::acquire()+0x47>
c001e604:	fb                   	sti    
c001e605:	83 c4 0c             	add    esp,0xc
c001e608:	c3                   	ret    
c001e609:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e60e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e615:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e618:	85 c9                	test   ecx,ecx
c001e61a:	74 3a                	je     c001e656 <Semaphore::acquire()+0x98>
c001e61c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e61f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e625:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e628:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e62d:	83 ec 0c             	sub    esp,0xc
c001e630:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e633:	6a 05                	push   0x5
c001e635:	e8 4b fe ff ff       	call   c001e485 <blockTask(TaskState)>
c001e63a:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001e63f:	83 c4 10             	add    esp,0x10
c001e642:	48                   	dec    eax
c001e643:	eb a0                	jmp    c001e5e5 <Semaphore::acquire()+0x27>
c001e645:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001e64f:	e8 32 fc ff ff       	call   c001e286 <schedule()>
c001e654:	eb a1                	jmp    c001e5f7 <Semaphore::acquire()+0x39>
c001e656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e65b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e65e:	eb c8                	jmp    c001e628 <Semaphore::acquire()+0x6a>

c001e660 <taskReturned>:
c001e660:	83 ec 18             	sub    esp,0x18
c001e663:	68 c0 cf 02 c0       	push   0xc002cfc0
c001e668:	e8 66 be ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001e66d:	83 c4 10             	add    esp,0x10
c001e670:	83 ec 0c             	sub    esp,0xc
c001e673:	6a 02                	push   0x2
c001e675:	e8 0b fe ff ff       	call   c001e485 <blockTask(TaskState)>
c001e67a:	fa                   	cli    
c001e67b:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001e681:	e8 00 fc ff ff       	call   c001e286 <schedule()>
c001e686:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	48                   	dec    eax
c001e68f:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e694:	85 c0                	test   eax,eax
c001e696:	75 d8                	jne    c001e670 <taskReturned+0x10>
c001e698:	fb                   	sti    
c001e699:	eb d5                	jmp    c001e670 <taskReturned+0x10>

c001e69b <Thr::processFromPID(int)>:
c001e69b:	57                   	push   edi
c001e69c:	56                   	push   esi
c001e69d:	53                   	push   ebx
c001e69e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e6a2:	83 ec 0c             	sub    esp,0xc
c001e6a5:	68 b6 cd 02 c0       	push   0xc002cdb6
c001e6aa:	e8 ee 43 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e6af:	fa                   	cli    
c001e6b0:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001e6b6:	c7 04 24 24 26 03 c0 	mov    DWORD PTR [esp],0xc0032624
c001e6bd:	e8 14 ae 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6c2:	83 c4 10             	add    esp,0x10
c001e6c5:	89 c7                	mov    edi,eax
c001e6c7:	eb 14                	jmp    c001e6dd <Thr::processFromPID(int)+0x42>
c001e6c9:	83 ec 0c             	sub    esp,0xc
c001e6cc:	68 24 26 03 c0       	push   0xc0032624
c001e6d1:	e8 00 ae 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6d6:	83 c4 10             	add    esp,0x10
c001e6d9:	39 f8                	cmp    eax,edi
c001e6db:	74 49                	je     c001e726 <Thr::processFromPID(int)+0x8b>
c001e6dd:	83 ec 0c             	sub    esp,0xc
c001e6e0:	68 24 26 03 c0       	push   0xc0032624
c001e6e5:	e8 ec ad 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6ea:	c7 04 24 24 26 03 c0 	mov    DWORD PTR [esp],0xc0032624
c001e6f1:	89 c3                	mov    ebx,eax
c001e6f3:	e8 e6 ad 00 00       	call   c00294de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6f8:	58                   	pop    eax
c001e6f9:	5a                   	pop    edx
c001e6fa:	53                   	push   ebx
c001e6fb:	68 24 26 03 c0       	push   0xc0032624
c001e700:	e8 87 ae 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e705:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e708:	83 c4 10             	add    esp,0x10
c001e70b:	39 30                	cmp    DWORD PTR [eax],esi
c001e70d:	75 ba                	jne    c001e6c9 <Thr::processFromPID(int)+0x2e>
c001e70f:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e714:	48                   	dec    eax
c001e715:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e71a:	74 07                	je     c001e723 <Thr::processFromPID(int)+0x88>
c001e71c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e71f:	5b                   	pop    ebx
c001e720:	5e                   	pop    esi
c001e721:	5f                   	pop    edi
c001e722:	c3                   	ret    
c001e723:	fb                   	sti    
c001e724:	eb f6                	jmp    c001e71c <Thr::processFromPID(int)+0x81>
c001e726:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e72b:	48                   	dec    eax
c001e72c:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e731:	75 01                	jne    c001e734 <Thr::processFromPID(int)+0x99>
c001e733:	fb                   	sti    
c001e734:	83 ec 0c             	sub    esp,0xc
c001e737:	68 d1 cd 02 c0       	push   0xc002cdd1
c001e73c:	e8 5c 43 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e741:	83 c4 10             	add    esp,0x10
c001e744:	31 c0                	xor    eax,eax
c001e746:	5b                   	pop    ebx
c001e747:	5e                   	pop    esi
c001e748:	5f                   	pop    edi
c001e749:	c3                   	ret    

c001e74a <unblockTask(ThreadControlBlock*)>:
c001e74a:	53                   	push   ebx
c001e74b:	83 ec 08             	sub    esp,0x8
c001e74e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e752:	fa                   	cli    
c001e753:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001e759:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e75c:	85 c0                	test   eax,eax
c001e75e:	74 66                	je     c001e7c6 <unblockTask(ThreadControlBlock*)+0x7c>
c001e760:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e763:	48                   	dec    eax
c001e764:	74 31                	je     c001e797 <unblockTask(ThreadControlBlock*)+0x4d>
c001e766:	83 ec 0c             	sub    esp,0xc
c001e769:	68 24 26 03 c0       	push   0xc0032624
c001e76e:	e8 63 ad 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e773:	83 c4 10             	add    esp,0x10
c001e776:	85 c0                	test   eax,eax
c001e778:	75 17                	jne    c001e791 <unblockTask(ThreadControlBlock*)+0x47>
c001e77a:	eb 68                	jmp    c001e7e4 <unblockTask(ThreadControlBlock*)+0x9a>
c001e77c:	83 ec 08             	sub    esp,0x8
c001e77f:	50                   	push   eax
c001e780:	68 24 26 03 c0       	push   0xc0032624
c001e785:	e8 ea b0 00 00       	call   c0029874 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e78a:	83 c4 10             	add    esp,0x10
c001e78d:	85 c0                	test   eax,eax
c001e78f:	74 53                	je     c001e7e4 <unblockTask(ThreadControlBlock*)+0x9a>
c001e791:	39 c3                	cmp    ebx,eax
c001e793:	75 e7                	jne    c001e77c <unblockTask(ThreadControlBlock*)+0x32>
c001e795:	eb 1c                	jmp    c001e7b3 <unblockTask(ThreadControlBlock*)+0x69>
c001e797:	83 ec 0c             	sub    esp,0xc
c001e79a:	68 b0 d0 02 c0       	push   0xc002d0b0
c001e79f:	e8 f9 42 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e7a4:	c7 04 24 3c d0 02 c0 	mov    DWORD PTR [esp],0xc002d03c
c001e7ab:	e8 ed 42 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e7b0:	83 c4 10             	add    esp,0x10
c001e7b3:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001e7b8:	48                   	dec    eax
c001e7b9:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001e7be:	75 01                	jne    c001e7c1 <unblockTask(ThreadControlBlock*)+0x77>
c001e7c0:	fb                   	sti    
c001e7c1:	83 c4 08             	add    esp,0x8
c001e7c4:	5b                   	pop    ebx
c001e7c5:	c3                   	ret    
c001e7c6:	83 ec 0c             	sub    esp,0xc
c001e7c9:	68 f4 cf 02 c0       	push   0xc002cff4
c001e7ce:	e8 ca 42 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e7d3:	c7 04 24 3c d0 02 c0 	mov    DWORD PTR [esp],0xc002d03c
c001e7da:	e8 be 42 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e7df:	83 c4 10             	add    esp,0x10
c001e7e2:	eb cf                	jmp    c001e7b3 <unblockTask(ThreadControlBlock*)+0x69>
c001e7e4:	83 ec 08             	sub    esp,0x8
c001e7e7:	53                   	push   ebx
c001e7e8:	68 24 26 03 c0       	push   0xc0032624
c001e7ed:	e8 9a ad 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7f2:	83 c4 10             	add    esp,0x10
c001e7f5:	eb bc                	jmp    c001e7b3 <unblockTask(ThreadControlBlock*)+0x69>

c001e7f7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e7f7:	55                   	push   ebp
c001e7f8:	57                   	push   edi
c001e7f9:	56                   	push   esi
c001e7fa:	53                   	push   ebx
c001e7fb:	83 ec 1c             	sub    esp,0x1c
c001e7fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e802:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e805:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e80b:	85 ff                	test   edi,edi
c001e80d:	7e 20                	jle    c001e82f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e80f:	31 f6                	xor    esi,esi
c001e811:	83 ec 0c             	sub    esp,0xc
c001e814:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e81b:	46                   	inc    esi
c001e81c:	e8 7b 10 ff ff       	call   c000f89c <free>
c001e821:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e824:	83 c4 10             	add    esp,0x10
c001e827:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e82d:	7f e2                	jg     c001e811 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e82f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e839:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e83e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e841:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e844:	d3 c0                	rol    eax,cl
c001e846:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e84d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e850:	89 f7                	mov    edi,esi
c001e852:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e85a:	0f 85 74 01 00 00    	jne    c001e9d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e860:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e866:	85 ed                	test   ebp,ebp
c001e868:	74 1b                	je     c001e885 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e86a:	83 ec 0c             	sub    esp,0xc
c001e86d:	55                   	push   ebp
c001e86e:	e8 d5 b9 ff ff       	call   c001a248 <EnvVarContainer::~EnvVarContainer()>
c001e873:	59                   	pop    ecx
c001e874:	5e                   	pop    esi
c001e875:	6a 0c                	push   0xc
c001e877:	55                   	push   ebp
c001e878:	e8 40 41 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c001e87d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e880:	83 c4 10             	add    esp,0x10
c001e883:	89 f7                	mov    edi,esi
c001e885:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e88b:	85 c0                	test   eax,eax
c001e88d:	0f 84 aa 00 00 00    	je     c001e93d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e893:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e896:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e89a:	31 c9                	xor    ecx,ecx
c001e89c:	eb 10                	jmp    c001e8ae <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e89e:	41                   	inc    ecx
c001e89f:	83 f9 10             	cmp    ecx,0x10
c001e8a2:	0f 84 95 00 00 00    	je     c001e93d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e8a8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e8ae:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e8b5:	d3 fa                	sar    edx,cl
c001e8b7:	83 e2 01             	and    edx,0x1
c001e8ba:	74 e2                	je     c001e89e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e8bc:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e8bf:	01 ca                	add    edx,ecx
c001e8c1:	89 d5                	mov    ebp,edx
c001e8c3:	c1 e5 05             	shl    ebp,0x5
c001e8c6:	01 ea                	add    edx,ebp
c001e8c8:	01 d0                	add    eax,edx
c001e8ca:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e8d0:	83 fd 07             	cmp    ebp,0x7
c001e8d3:	75 c9                	jne    c001e89e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e8d5:	05 40 02 00 00       	add    eax,0x240
c001e8da:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e8dd:	83 fd ff             	cmp    ebp,0xffffffff
c001e8e0:	0f 8c 08 01 00 00    	jl     c001e9ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e8e6:	0f 84 b9 01 00 00    	je     c001eaa5 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e8ec:	85 ed                	test   ebp,ebp
c001e8ee:	0f 84 a0 01 00 00    	je     c001ea94 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e8f4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e8f6:	75 a6                	jne    c001e89e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e8f8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e8fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e902:	01 d0                	add    eax,edx
c001e904:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e908:	83 ec 0c             	sub    esp,0xc
c001e90b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e911:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e914:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e91a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e921:	50                   	push   eax
c001e922:	e8 23 fe ff ff       	call   c001e74a <unblockTask(ThreadControlBlock*)>
c001e927:	83 c4 10             	add    esp,0x10
c001e92a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e92d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e931:	89 f7                	mov    edi,esi
c001e933:	41                   	inc    ecx
c001e934:	83 f9 10             	cmp    ecx,0x10
c001e937:	0f 85 6b ff ff ff    	jne    c001e8a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e93d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e943:	85 c0                	test   eax,eax
c001e945:	74 5d                	je     c001e9a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e947:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e94d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e953:	74 4f                	je     c001e9a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e955:	83 ec 0c             	sub    esp,0xc
c001e958:	68 24 26 03 c0       	push   0xc0032624
c001e95d:	e8 74 ab 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e962:	c7 04 24 24 26 03 c0 	mov    DWORD PTR [esp],0xc0032624
c001e969:	89 c7                	mov    edi,eax
c001e96b:	e8 4a ab 00 00       	call   c00294ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e970:	83 c4 10             	add    esp,0x10
c001e973:	84 c0                	test   al,al
c001e975:	0f 84 e4 00 00 00    	je     c001ea5f <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e97b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e97e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e984:	85 d2                	test   edx,edx
c001e986:	74 0f                	je     c001e997 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e98d:	52                   	push   edx
c001e98e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e991:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e994:	83 c4 10             	add    esp,0x10
c001e997:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e9a1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e9a4:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e9aa:	85 db                	test   ebx,ebx
c001e9ac:	74 16                	je     c001e9c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e9ae:	83 ec 0c             	sub    esp,0xc
c001e9b1:	53                   	push   ebx
c001e9b2:	e8 9b 33 ff ff       	call   c0011d52 <VAS::~VAS()>
c001e9b7:	58                   	pop    eax
c001e9b8:	5a                   	pop    edx
c001e9b9:	6a 14                	push   0x14
c001e9bb:	53                   	push   ebx
c001e9bc:	e8 fc 3f ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c001e9c1:	83 c4 10             	add    esp,0x10
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	68 e8 cd 02 c0       	push   0xc002cde8
c001e9cc:	e8 cc 40 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e9d1:	83 c4 10             	add    esp,0x10
c001e9d4:	83 ec 08             	sub    esp,0x8
c001e9d7:	68 3f 07 00 00       	push   0x73f
c001e9dc:	68 f6 cd 02 c0       	push   0xc002cdf6
c001e9e1:	e8 b7 40 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001e9e6:	83 c4 2c             	add    esp,0x2c
c001e9e9:	5b                   	pop    ebx
c001e9ea:	5e                   	pop    esi
c001e9eb:	5f                   	pop    edi
c001e9ec:	5d                   	pop    ebp
c001e9ed:	c3                   	ret    
c001e9ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e9f2:	83 ec 0c             	sub    esp,0xc
c001e9f5:	68 f4 d0 02 c0       	push   0xc002d0f4
c001e9fa:	e8 d4 ba ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001e9ff:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea02:	83 c4 10             	add    esp,0x10
c001ea05:	89 f7                	mov    edi,esi
c001ea07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea0b:	e9 8e fe ff ff       	jmp    c001e89e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea10:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ea16:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ea1c:	75 1c                	jne    c001ea3a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ea1e:	83 ec 0c             	sub    esp,0xc
c001ea21:	68 5c d1 02 c0       	push   0xc002d15c
c001ea26:	e8 72 40 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ea2b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ea32:	e8 4e fa ff ff       	call   c001e485 <blockTask(TaskState)>
c001ea37:	83 c4 10             	add    esp,0x10
c001ea3a:	83 ec 08             	sub    esp,0x8
c001ea3d:	56                   	push   esi
c001ea3e:	68 24 26 03 c0       	push   0xc0032624
c001ea43:	e8 44 ab 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea48:	c7 04 24 24 26 03 c0 	mov    DWORD PTR [esp],0xc0032624
c001ea4f:	e8 82 aa 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea54:	83 c4 10             	add    esp,0x10
c001ea57:	39 f8                	cmp    eax,edi
c001ea59:	0f 84 1c ff ff ff    	je     c001e97b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	68 24 26 03 c0       	push   0xc0032624
c001ea67:	e8 6a aa 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea6c:	c7 04 24 24 26 03 c0 	mov    DWORD PTR [esp],0xc0032624
c001ea73:	89 c6                	mov    esi,eax
c001ea75:	e8 64 aa 00 00       	call   c00294de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ea7a:	83 c4 10             	add    esp,0x10
c001ea7d:	39 f3                	cmp    ebx,esi
c001ea7f:	74 b9                	je     c001ea3a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ea81:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ea84:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea87:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ea8d:	75 ab                	jne    c001ea3a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ea8f:	e9 7c ff ff ff       	jmp    c001ea10 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ea94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ea98:	83 ec 0c             	sub    esp,0xc
c001ea9b:	68 28 d1 02 c0       	push   0xc002d128
c001eaa0:	e9 55 ff ff ff       	jmp    c001e9fa <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001eaa5:	8b 36                	mov    esi,DWORD PTR [esi]
c001eaa7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eaab:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001eaae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eab1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001eab7:	01 d7                	add    edi,edx
c001eab9:	89 f8                	mov    eax,edi
c001eabb:	e9 44 fe ff ff       	jmp    c001e904 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001eac0 <cleanerTaskFunction(void*)>:
c001eac0:	53                   	push   ebx
c001eac1:	83 ec 08             	sub    esp,0x8
c001eac4:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001eac9:	48                   	dec    eax
c001eaca:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001eacf:	75 01                	jne    c001ead2 <cleanerTaskFunction(void*)+0x12>
c001ead1:	fb                   	sti    
c001ead2:	fa                   	cli    
c001ead3:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001ead8:	80 3d ec 25 03 c0 00 	cmp    BYTE PTR ds:0xc00325ec,0x0
c001eadf:	8d 50 01             	lea    edx,[eax+0x1]
c001eae2:	89 15 08 26 03 c0    	mov    DWORD PTR ds:0xc0032608,edx
c001eae8:	0f 84 b9 00 00 00    	je     c001eba7 <cleanerTaskFunction(void*)+0xe7>
c001eaee:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001eaf3:	85 c0                	test   eax,eax
c001eaf5:	75 01                	jne    c001eaf8 <cleanerTaskFunction(void*)+0x38>
c001eaf7:	fb                   	sti    
c001eaf8:	c6 05 ec 25 03 c0 00 	mov    BYTE PTR ds:0xc00325ec,0x0
c001eaff:	fa                   	cli    
c001eb00:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001eb06:	ff 05 04 26 03 c0    	inc    DWORD PTR ds:0xc0032604
c001eb0c:	fa                   	cli    
c001eb0d:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001eb13:	eb 3e                	jmp    c001eb53 <cleanerTaskFunction(void*)+0x93>
c001eb15:	83 ec 0c             	sub    esp,0xc
c001eb18:	68 0c 26 03 c0       	push   0xc003260c
c001eb1d:	e8 b4 a9 00 00       	call   c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb22:	c7 04 24 0c 26 03 c0 	mov    DWORD PTR [esp],0xc003260c
c001eb29:	89 c3                	mov    ebx,eax
c001eb2b:	e8 ae a9 00 00       	call   c00294de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eb30:	c7 04 24 0c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce0c
c001eb37:	e8 61 3f ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001eb3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb3f:	e8 b3 fc ff ff       	call   c001e7f7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001eb44:	c7 04 24 25 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce25
c001eb4b:	e8 4d 3f ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001eb50:	83 c4 10             	add    esp,0x10
c001eb53:	83 ec 0c             	sub    esp,0xc
c001eb56:	68 0c 26 03 c0       	push   0xc003260c
c001eb5b:	e8 5a a9 00 00       	call   c00294ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb60:	83 c4 10             	add    esp,0x10
c001eb63:	84 c0                	test   al,al
c001eb65:	74 ae                	je     c001eb15 <cleanerTaskFunction(void*)+0x55>
c001eb67:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001eb6c:	48                   	dec    eax
c001eb6d:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001eb72:	75 01                	jne    c001eb75 <cleanerTaskFunction(void*)+0xb5>
c001eb74:	fb                   	sti    
c001eb75:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001eb7a:	48                   	dec    eax
c001eb7b:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001eb80:	0f 85 3e ff ff ff    	jne    c001eac4 <cleanerTaskFunction(void*)+0x4>
c001eb86:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c001eb8b:	85 c0                	test   eax,eax
c001eb8d:	0f 84 31 ff ff ff    	je     c001eac4 <cleanerTaskFunction(void*)+0x4>
c001eb93:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001eb9d:	e8 e4 f6 ff ff       	call   c001e286 <schedule()>
c001eba2:	e9 1d ff ff ff       	jmp    c001eac4 <cleanerTaskFunction(void*)+0x4>
c001eba7:	83 ec 0c             	sub    esp,0xc
c001ebaa:	6a 02                	push   0x2
c001ebac:	e8 86 f8 ff ff       	call   c001e437 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ebb1:	83 c4 10             	add    esp,0x10
c001ebb4:	e9 3f ff ff ff       	jmp    c001eaf8 <cleanerTaskFunction(void*)+0x38>

c001ebb9 <terminateTask(int)>:
c001ebb9:	83 ec 14             	sub    esp,0x14
c001ebbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ebc4:	83 c0 0c             	add    eax,0xc
c001ebc7:	50                   	push   eax
c001ebc8:	68 84 d1 02 c0       	push   0xc002d184
c001ebcd:	e8 cb 3e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ebd2:	fa                   	cli    
c001ebd3:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001ebd9:	ff 05 04 26 03 c0    	inc    DWORD PTR ds:0xc0032604
c001ebdf:	fa                   	cli    
c001ebe0:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001ebe6:	c7 04 24 38 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce38
c001ebed:	e8 ab 3e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ebf2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ebf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebfb:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ebfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec03:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec06:	5a                   	pop    edx
c001ec07:	59                   	pop    ecx
c001ec08:	50                   	push   eax
c001ec09:	68 0c 26 03 c0       	push   0xc003260c
c001ec0e:	e8 79 a9 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec18:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ec1f:	c7 04 24 52 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce52
c001ec26:	e8 72 3e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ec2b:	83 c4 10             	add    esp,0x10
c001ec2e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ec33:	85 c0                	test   eax,eax
c001ec35:	0f 84 8d 00 00 00    	je     c001ecc8 <terminateTask(int)+0x10f>
c001ec3b:	83 ec 0c             	sub    esp,0xc
c001ec3e:	68 6c ce 02 c0       	push   0xc002ce6c
c001ec43:	e8 55 3e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ec48:	58                   	pop    eax
c001ec49:	c6 05 ec 25 03 c0 01 	mov    BYTE PTR ds:0xc00325ec,0x1
c001ec50:	ff 35 e8 25 03 c0    	push   DWORD PTR ds:0xc00325e8
c001ec56:	e8 ef fa ff ff       	call   c001e74a <unblockTask(ThreadControlBlock*)>
c001ec5b:	c7 04 24 86 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce86
c001ec62:	e8 36 3e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ec67:	83 c4 10             	add    esp,0x10
c001ec6a:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001ec6f:	48                   	dec    eax
c001ec70:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001ec75:	75 01                	jne    c001ec78 <terminateTask(int)+0xbf>
c001ec77:	fb                   	sti    
c001ec78:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001ec7d:	48                   	dec    eax
c001ec7e:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001ec83:	75 09                	jne    c001ec8e <terminateTask(int)+0xd5>
c001ec85:	83 3d 00 26 03 c0 00 	cmp    DWORD PTR ds:0xc0032600,0x0
c001ec8c:	75 4c                	jne    c001ecda <terminateTask(int)+0x121>
c001ec8e:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001ec93:	48                   	dec    eax
c001ec94:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001ec99:	75 01                	jne    c001ec9c <terminateTask(int)+0xe3>
c001ec9b:	fb                   	sti    
c001ec9c:	83 ec 0c             	sub    esp,0xc
c001ec9f:	68 be ce 02 c0       	push   0xc002cebe
c001eca4:	e8 f4 3d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	fa                   	cli    
c001ecad:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001ecb3:	e8 ce f5 ff ff       	call   c001e286 <schedule()>
c001ecb8:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001ecbd:	48                   	dec    eax
c001ecbe:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001ecc3:	75 e7                	jne    c001ecac <terminateTask(int)+0xf3>
c001ecc5:	fb                   	sti    
c001ecc6:	eb e4                	jmp    c001ecac <terminateTask(int)+0xf3>
c001ecc8:	83 ec 0c             	sub    esp,0xc
c001eccb:	68 a0 ce 02 c0       	push   0xc002cea0
c001ecd0:	e8 c8 3d ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001ecd5:	83 c4 10             	add    esp,0x10
c001ecd8:	eb 90                	jmp    c001ec6a <terminateTask(int)+0xb1>
c001ecda:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001ece4:	e8 9d f5 ff ff       	call   c001e286 <schedule()>
c001ece9:	eb a3                	jmp    c001ec8e <terminateTask(int)+0xd5>

c001eceb <Thr::terminateFromIRQ(int)>:
c001eceb:	83 ec 18             	sub    esp,0x18
c001ecee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecf2:	e8 c2 fe ff ff       	call   c001ebb9 <terminateTask(int)>
c001ecf7:	90                   	nop

c001ecf8 <Semaphore::release()>:
c001ecf8:	83 ec 0c             	sub    esp,0xc
c001ecfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ecff:	fa                   	cli    
c001ed00:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001ed05:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001ed0b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ed0e:	89 0d 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,ecx
c001ed14:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ed17:	85 c9                	test   ecx,ecx
c001ed19:	74 3c                	je     c001ed57 <Semaphore::release()+0x5f>
c001ed1b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ed1e:	83 ec 0c             	sub    esp,0xc
c001ed21:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ed24:	51                   	push   ecx
c001ed25:	e8 20 fa ff ff       	call   c001e74a <unblockTask(ThreadControlBlock*)>
c001ed2a:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001ed2f:	83 c4 10             	add    esp,0x10
c001ed32:	48                   	dec    eax
c001ed33:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001ed38:	85 c0                	test   eax,eax
c001ed3a:	75 09                	jne    c001ed45 <Semaphore::release()+0x4d>
c001ed3c:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c001ed41:	85 c0                	test   eax,eax
c001ed43:	75 17                	jne    c001ed5c <Semaphore::release()+0x64>
c001ed45:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001ed4a:	48                   	dec    eax
c001ed4b:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001ed50:	75 01                	jne    c001ed53 <Semaphore::release()+0x5b>
c001ed52:	fb                   	sti    
c001ed53:	83 c4 0c             	add    esp,0xc
c001ed56:	c3                   	ret    
c001ed57:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ed5a:	eb d7                	jmp    c001ed33 <Semaphore::release()+0x3b>
c001ed5c:	c7 05 00 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032600,0x0
c001ed66:	e8 1b f5 ff ff       	call   c001e286 <schedule()>
c001ed6b:	eb d8                	jmp    c001ed45 <Semaphore::release()+0x4d>

c001ed6d <__static_initialization_and_destruction_0(int, int)>:
c001ed6d:	83 ec 0c             	sub    esp,0xc
c001ed70:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ed75:	0f 85 88 00 00 00    	jne    c001ee03 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ed7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ed83:	75 7e                	jne    c001ee03 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ed85:	83 ec 0c             	sub    esp,0xc
c001ed88:	68 24 26 03 c0       	push   0xc0032624
c001ed8d:	e8 8a aa 00 00       	call   c002981c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ed92:	83 c4 10             	add    esp,0x10
c001ed95:	83 ec 04             	sub    esp,0x4
c001ed98:	68 fc df 02 c0       	push   0xc002dffc
c001ed9d:	68 24 26 03 c0       	push   0xc0032624
c001eda2:	68 d0 97 02 c0       	push   0xc00297d0
c001eda7:	e8 8b 3b ff ff       	call   c0012937 <__cxa_atexit>
c001edac:	83 c4 10             	add    esp,0x10
c001edaf:	83 ec 0c             	sub    esp,0xc
c001edb2:	68 18 26 03 c0       	push   0xc0032618
c001edb7:	e8 60 aa 00 00       	call   c002981c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	83 ec 04             	sub    esp,0x4
c001edc2:	68 fc df 02 c0       	push   0xc002dffc
c001edc7:	68 18 26 03 c0       	push   0xc0032618
c001edcc:	68 d0 97 02 c0       	push   0xc00297d0
c001edd1:	e8 61 3b ff ff       	call   c0012937 <__cxa_atexit>
c001edd6:	83 c4 10             	add    esp,0x10
c001edd9:	83 ec 0c             	sub    esp,0xc
c001eddc:	68 0c 26 03 c0       	push   0xc003260c
c001ede1:	e8 36 aa 00 00       	call   c002981c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ede6:	83 c4 10             	add    esp,0x10
c001ede9:	83 ec 04             	sub    esp,0x4
c001edec:	68 fc df 02 c0       	push   0xc002dffc
c001edf1:	68 0c 26 03 c0       	push   0xc003260c
c001edf6:	68 d0 97 02 c0       	push   0xc00297d0
c001edfb:	e8 37 3b ff ff       	call   c0012937 <__cxa_atexit>
c001ee00:	83 c4 10             	add    esp,0x10
c001ee03:	90                   	nop
c001ee04:	83 c4 0c             	add    esp,0xc
c001ee07:	c3                   	ret    

c001ee08 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	83 ec 08             	sub    esp,0x8
c001ee0e:	68 ff ff 00 00       	push   0xffff
c001ee13:	6a 01                	push   0x1
c001ee15:	e8 53 ff ff ff       	call   c001ed6d <__static_initialization_and_destruction_0(int, int)>
c001ee1a:	83 c4 10             	add    esp,0x10
c001ee1d:	83 c4 0c             	add    esp,0xc
c001ee20:	c3                   	ret    

c001ee21 <Vm::inbv(unsigned short)>:
c001ee21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ee25:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ee2a:	75 06                	jne    c001ee32 <Vm::inbv(unsigned short)+0x11>
c001ee2c:	a0 6c 26 03 c0       	mov    al,ds:0xc003266c
c001ee31:	c3                   	ret    
c001ee32:	ec                   	in     al,dx
c001ee33:	c3                   	ret    

c001ee34 <Vm::outbv(unsigned short, unsigned char)>:
c001ee34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ee38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee3c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ee41:	75 25                	jne    c001ee68 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ee43:	8b 0d 6c 26 03 c0    	mov    ecx,DWORD PTR ds:0xc003266c
c001ee49:	8d 51 01             	lea    edx,[ecx+0x1]
c001ee4c:	88 81 80 26 03 c0    	mov    BYTE PTR [ecx-0x3ffcd980],al
c001ee52:	89 15 6c 26 03 c0    	mov    DWORD PTR ds:0xc003266c,edx
c001ee58:	83 fa 20             	cmp    edx,0x20
c001ee5b:	75 0c                	jne    c001ee69 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ee5d:	c7 05 6c 26 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003266c,0x1f
c001ee67:	c3                   	ret    
c001ee68:	ee                   	out    dx,al
c001ee69:	c3                   	ret    

c001ee6a <Vm::realToLinear(unsigned short, unsigned short)>:
c001ee6a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee6f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee74:	c1 e0 04             	shl    eax,0x4
c001ee77:	01 d0                	add    eax,edx
c001ee79:	c3                   	ret    

c001ee7a <Vm::getSegment(unsigned int)>:
c001ee7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee7e:	c1 e8 10             	shr    eax,0x10
c001ee81:	c3                   	ret    

c001ee82 <Vm::getOffset(unsigned int)>:
c001ee82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee86:	c3                   	ret    

c001ee87 <Vm::mainloop2()>:
c001ee87:	83 ec 18             	sub    esp,0x18
c001ee8a:	fa                   	cli    
c001ee8b:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001ee91:	6a 02                	push   0x2
c001ee93:	c6 05 65 26 03 c0 01 	mov    BYTE PTR ds:0xc0032665,0x1
c001ee9a:	e8 98 f5 ff ff       	call   c001e437 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ee9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eea4:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eea8:	52                   	push   edx
c001eea9:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eead:	52                   	push   edx
c001eeae:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eeb2:	52                   	push   edx
c001eeb3:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eeb7:	50                   	push   eax
c001eeb8:	e8 3d 14 fe ff       	call   c00002fa <goToVM86>
c001eebd:	83 c4 2c             	add    esp,0x2c
c001eec0:	c3                   	ret    

c001eec1 <Vm::mainVm8086Loop(void*)>:
c001eec1:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001eec6:	48                   	dec    eax
c001eec7:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001eecc:	75 01                	jne    c001eecf <Vm::mainVm8086Loop(void*)+0xe>
c001eece:	fb                   	sti    
c001eecf:	eb b6                	jmp    c001ee87 <Vm::mainloop2()>

c001eed1 <Vm::mainloop3(unsigned long)>:
c001eed1:	83 ec 18             	sub    esp,0x18
c001eed4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eed8:	fa                   	cli    
c001eed9:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001eedf:	6a 02                	push   0x2
c001eee1:	c6 05 64 26 03 c0 01 	mov    BYTE PTR ds:0xc0032664,0x1
c001eee8:	a3 60 26 03 c0       	mov    ds:0xc0032660,eax
c001eeed:	e8 45 f5 ff ff       	call   c001e437 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eef2:	83 c4 1c             	add    esp,0x1c
c001eef5:	eb 90                	jmp    c001ee87 <Vm::mainloop2()>

c001eef7 <Vm::initialise8086()>:
c001eef7:	83 ec 0c             	sub    esp,0xc
c001eefa:	68 80 00 00 00       	push   0x80
c001eeff:	6a 00                	push   0x0
c001ef01:	68 c1 ee 01 c0       	push   0xc001eec1
c001ef06:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c001ef0c:	e8 31 f1 ff ff       	call   c001e042 <Process::createThread(void (*)(void*), void*, int)>
c001ef11:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ef18:	a3 68 26 03 c0       	mov    ds:0xc0032668,eax
c001ef1d:	68 00 01 00 00       	push   0x100
c001ef22:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c001ef27:	6a 00                	push   0x0
c001ef29:	6a 00                	push   0x0
c001ef2b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ef31:	e8 8e 32 ff ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ef36:	83 c4 2c             	add    esp,0x2c
c001ef39:	c3                   	ret    

c001ef3a <Vm::finish8086()>:
c001ef3a:	53                   	push   ebx
c001ef3b:	83 ec 08             	sub    esp,0x8
c001ef3e:	fa                   	cli    
c001ef3f:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001ef45:	80 3d 64 26 03 c0 00 	cmp    BYTE PTR ds:0xc0032664,0x0
c001ef4c:	75 15                	jne    c001ef63 <Vm::finish8086()+0x29>
c001ef4e:	e8 33 f3 ff ff       	call   c001e286 <schedule()>
c001ef53:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001ef58:	48                   	dec    eax
c001ef59:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001ef5e:	75 de                	jne    c001ef3e <Vm::finish8086()+0x4>
c001ef60:	fb                   	sti    
c001ef61:	eb db                	jmp    c001ef3e <Vm::finish8086()+0x4>
c001ef63:	83 ec 0c             	sub    esp,0xc
c001ef66:	8b 1d 60 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032660
c001ef6c:	ff 35 68 26 03 c0    	push   DWORD PTR ds:0xc0032668
c001ef72:	c6 05 64 26 03 c0 00 	mov    BYTE PTR ds:0xc0032664,0x0
c001ef79:	e8 cc f7 ff ff       	call   c001e74a <unblockTask(ThreadControlBlock*)>
c001ef7e:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001ef83:	83 c4 10             	add    esp,0x10
c001ef86:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef89:	89 15 08 26 03 c0    	mov    DWORD PTR ds:0xc0032608,edx
c001ef8f:	85 d2                	test   edx,edx
c001ef91:	75 01                	jne    c001ef94 <Vm::finish8086()+0x5a>
c001ef93:	fb                   	sti    
c001ef94:	89 d8                	mov    eax,ebx
c001ef96:	83 c4 08             	add    esp,0x8
c001ef99:	5b                   	pop    ebx
c001ef9a:	c3                   	ret    

c001ef9b <Vm::getOutput8086(unsigned char*)>:
c001ef9b:	57                   	push   edi
c001ef9c:	8b 0d 6c 26 03 c0    	mov    ecx,DWORD PTR ds:0xc003266c
c001efa2:	56                   	push   esi
c001efa3:	be 80 26 03 c0       	mov    esi,0xc0032680
c001efa8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001efac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001efae:	a1 6c 26 03 c0       	mov    eax,ds:0xc003266c
c001efb3:	5e                   	pop    esi
c001efb4:	c7 05 6c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003266c,0x0
c001efbe:	5f                   	pop    edi
c001efbf:	c3                   	ret    

c001efc0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001efc0:	55                   	push   ebp
c001efc1:	57                   	push   edi
c001efc2:	56                   	push   esi
c001efc3:	53                   	push   ebx
c001efc4:	83 ec 2c             	sub    esp,0x2c
c001efc7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001efcb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001efcf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001efd3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001efd7:	fa                   	cli    
c001efd8:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c001efde:	0f b6 35 65 26 03 c0 	movzx  esi,BYTE PTR ds:0xc0032665
c001efe5:	89 f0                	mov    eax,esi
c001efe7:	84 c0                	test   al,al
c001efe9:	75 1d                	jne    c001f008 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001efeb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efef:	e8 92 f2 ff ff       	call   c001e286 <schedule()>
c001eff4:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001eff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001effd:	48                   	dec    eax
c001effe:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001f003:	75 d2                	jne    c001efd7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f005:	fb                   	sti    
c001f006:	eb cf                	jmp    c001efd7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f008:	a1 68 26 03 c0       	mov    eax,ds:0xc0032668
c001f00d:	c7 05 6c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003266c,0x0
c001f017:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f01b:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f01f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f023:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f027:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f02b:	50                   	push   eax
c001f02c:	6a 20                	push   0x20
c001f02e:	6a 00                	push   0x0
c001f030:	68 80 26 03 c0       	push   0xc0032680
c001f035:	e8 16 17 fe ff       	call   c0000750 <memset>
c001f03a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f041:	e8 46 08 ff ff       	call   c000f88c <malloc>
c001f046:	83 c4 0c             	add    esp,0xc
c001f049:	89 c3                	mov    ebx,eax
c001f04b:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c001f051:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f055:	50                   	push   eax
c001f056:	e8 a1 3f ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c001f05b:	83 c4 10             	add    esp,0x10
c001f05e:	85 db                	test   ebx,ebx
c001f060:	75 0a                	jne    c001f06c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f062:	83 ec 0c             	sub    esp,0xc
c001f065:	68 a3 d1 02 c0       	push   0xc002d1a3
c001f06a:	eb 3e                	jmp    c001f0aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f06c:	50                   	push   eax
c001f06d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f071:	50                   	push   eax
c001f072:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f076:	50                   	push   eax
c001f077:	53                   	push   ebx
c001f078:	e8 8f 42 ff ff       	call   c001330c <File::stat(unsigned long long*, bool*)>
c001f07d:	83 c4 10             	add    esp,0x10
c001f080:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f085:	74 0a                	je     c001f091 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f087:	83 ec 0c             	sub    esp,0xc
c001f08a:	68 b7 d1 02 c0       	push   0xc002d1b7
c001f08f:	eb 19                	jmp    c001f0aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f091:	51                   	push   ecx
c001f092:	51                   	push   ecx
c001f093:	6a 01                	push   0x1
c001f095:	53                   	push   ebx
c001f096:	e8 c5 3f ff ff       	call   c0013060 <File::open(FileOpenMode)>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	85 c0                	test   eax,eax
c001f0a0:	74 24                	je     c001f0c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f0a2:	83 ec 0c             	sub    esp,0xc
c001f0a5:	68 d0 d1 02 c0       	push   0xc002d1d0
c001f0aa:	e8 24 b4 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001f0af:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001f0b4:	83 c4 10             	add    esp,0x10
c001f0b7:	48                   	dec    eax
c001f0b8:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001f0bd:	85 c0                	test   eax,eax
c001f0bf:	75 01                	jne    c001f0c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f0c1:	fb                   	sti    
c001f0c2:	31 f6                	xor    esi,esi
c001f0c4:	eb 58                	jmp    c001f11e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f0c6:	0f b7 ed             	movzx  ebp,bp
c001f0c9:	50                   	push   eax
c001f0ca:	0f b7 ff             	movzx  edi,di
c001f0cd:	50                   	push   eax
c001f0ce:	55                   	push   ebp
c001f0cf:	57                   	push   edi
c001f0d0:	e8 95 fd ff ff       	call   c001ee6a <Vm::realToLinear(unsigned short, unsigned short)>
c001f0d5:	5a                   	pop    edx
c001f0d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f0d8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f0dc:	51                   	push   ecx
c001f0dd:	50                   	push   eax
c001f0de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f0e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f0e6:	53                   	push   ebx
c001f0e7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f0ea:	83 c4 14             	add    esp,0x14
c001f0ed:	53                   	push   ebx
c001f0ee:	e8 cb 3f ff ff       	call   c00130be <File::close()>
c001f0f3:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c001f0f8:	83 c4 10             	add    esp,0x10
c001f0fb:	48                   	dec    eax
c001f0fc:	c6 05 65 26 03 c0 00 	mov    BYTE PTR ds:0xc0032665,0x0
c001f103:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c001f108:	85 c0                	test   eax,eax
c001f10a:	75 01                	jne    c001f10d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f10c:	fb                   	sti    
c001f10d:	83 ec 0c             	sub    esp,0xc
c001f110:	ff 35 68 26 03 c0    	push   DWORD PTR ds:0xc0032668
c001f116:	e8 2f f6 ff ff       	call   c001e74a <unblockTask(ThreadControlBlock*)>
c001f11b:	83 c4 10             	add    esp,0x10
c001f11e:	83 c4 2c             	add    esp,0x2c
c001f121:	89 f0                	mov    eax,esi
c001f123:	5b                   	pop    ebx
c001f124:	5e                   	pop    esi
c001f125:	5f                   	pop    edi
c001f126:	5d                   	pop    ebp
c001f127:	c3                   	ret    

c001f128 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f128:	57                   	push   edi
c001f129:	56                   	push   esi
c001f12a:	53                   	push   ebx
c001f12b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f133:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f137:	83 e8 06             	sub    eax,0x6
c001f13a:	0f b7 c0             	movzx  eax,ax
c001f13d:	50                   	push   eax
c001f13e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f143:	50                   	push   eax
c001f144:	e8 21 fd ff ff       	call   c001ee6a <Vm::realToLinear(unsigned short, unsigned short)>
c001f149:	5a                   	pop    edx
c001f14a:	5e                   	pop    esi
c001f14b:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f14e:	8d 56 fa             	lea    edx,[esi-0x6]
c001f151:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f157:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f15a:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f15d:	83 c2 02             	add    edx,0x2
c001f160:	66 89 10             	mov    WORD PTR [eax],dx
c001f163:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f166:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f16a:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f16d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f171:	89 d6                	mov    esi,edx
c001f173:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f179:	66 81 e6 ff fd       	and    si,0xfdff
c001f17e:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f182:	74 07                	je     c001f18b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f184:	89 d6                	mov    esi,edx
c001f186:	66 81 ce 00 02       	or     si,0x200
c001f18b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f18f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f194:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f198:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f1a0:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f1a3:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f1ab:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f1ae:	5b                   	pop    ebx
c001f1af:	5e                   	pop    esi
c001f1b0:	5f                   	pop    edi
c001f1b1:	c3                   	ret    

c001f1b2 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f1b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f1b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f1bc:	c1 e0 04             	shl    eax,0x4
c001f1bf:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f1c2:	c3                   	ret    

c001f1c3 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f1c3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f1c8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f1cd:	c1 e0 04             	shl    eax,0x4
c001f1d0:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f1d4:	c3                   	ret    

c001f1d5 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f1d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f1da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f1df:	c1 e0 04             	shl    eax,0x4
c001f1e2:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f1e5:	c3                   	ret    

c001f1e6 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f1e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f1eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f1f0:	c1 e0 04             	shl    eax,0x4
c001f1f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1f7:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f1fa:	c3                   	ret    

c001f1fb <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f1fb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f200:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f205:	c1 e0 04             	shl    eax,0x4
c001f208:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f20c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f210:	c3                   	ret    

c001f211 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f211:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f216:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f21b:	c1 e0 04             	shl    eax,0x4
c001f21e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f222:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f225:	c3                   	ret    

c001f226 <Vm::faultHandler(regs*)>:
c001f226:	55                   	push   ebp
c001f227:	57                   	push   edi
c001f228:	56                   	push   esi
c001f229:	53                   	push   ebx
c001f22a:	83 ec 1c             	sub    esp,0x1c
c001f22d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f231:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f234:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f238:	0f b7 f8             	movzx  edi,ax
c001f23b:	52                   	push   edx
c001f23c:	0f b7 c0             	movzx  eax,ax
c001f23f:	50                   	push   eax
c001f240:	e8 25 fc ff ff       	call   c001ee6a <Vm::realToLinear(unsigned short, unsigned short)>
c001f245:	5a                   	pop    edx
c001f246:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f249:	59                   	pop    ecx
c001f24a:	89 c1                	mov    ecx,eax
c001f24c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f24f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f253:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f258:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f25c:	0f b7 c5             	movzx  eax,bp
c001f25f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f263:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f267:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f26b:	e8 fa fb ff ff       	call   c001ee6a <Vm::realToLinear(unsigned short, unsigned short)>
c001f270:	5e                   	pop    esi
c001f271:	be 06 00 00 00       	mov    esi,0x6
c001f276:	5a                   	pop    edx
c001f277:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f27c:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f281:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f284:	80 fa 9d             	cmp    dl,0x9d
c001f287:	0f 84 2c 02 00 00    	je     c001f4b9 <Vm::faultHandler(regs*)+0x293>
c001f28d:	0f 87 91 00 00 00    	ja     c001f324 <Vm::faultHandler(regs*)+0xfe>
c001f293:	80 fa 66             	cmp    dl,0x66
c001f296:	0f 84 98 01 00 00    	je     c001f434 <Vm::faultHandler(regs*)+0x20e>
c001f29c:	77 47                	ja     c001f2e5 <Vm::faultHandler(regs*)+0xbf>
c001f29e:	80 fa 36             	cmp    dl,0x36
c001f2a1:	0f 84 80 01 00 00    	je     c001f427 <Vm::faultHandler(regs*)+0x201>
c001f2a7:	77 1a                	ja     c001f2c3 <Vm::faultHandler(regs*)+0x9d>
c001f2a9:	80 fa 26             	cmp    dl,0x26
c001f2ac:	0f 84 4e 01 00 00    	je     c001f400 <Vm::faultHandler(regs*)+0x1da>
c001f2b2:	80 fa 2e             	cmp    dl,0x2e
c001f2b5:	0f 85 e2 05 00 00    	jne    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f2bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2be:	31 f6                	xor    esi,esi
c001f2c0:	41                   	inc    ecx
c001f2c1:	eb be                	jmp    c001f281 <Vm::faultHandler(regs*)+0x5b>
c001f2c3:	80 fa 64             	cmp    dl,0x64
c001f2c6:	0f 84 41 01 00 00    	je     c001f40d <Vm::faultHandler(regs*)+0x1e7>
c001f2cc:	0f 87 48 01 00 00    	ja     c001f41a <Vm::faultHandler(regs*)+0x1f4>
c001f2d2:	80 fa 3e             	cmp    dl,0x3e
c001f2d5:	0f 85 c2 05 00 00    	jne    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f2db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2de:	be 01 00 00 00       	mov    esi,0x1
c001f2e3:	eb db                	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f2e5:	80 fa 6d             	cmp    dl,0x6d
c001f2e8:	0f 84 ec 02 00 00    	je     c001f5da <Vm::faultHandler(regs*)+0x3b4>
c001f2ee:	77 17                	ja     c001f307 <Vm::faultHandler(regs*)+0xe1>
c001f2f0:	80 fa 67             	cmp    dl,0x67
c001f2f3:	0f 84 48 01 00 00    	je     c001f441 <Vm::faultHandler(regs*)+0x21b>
c001f2f9:	80 fa 6c             	cmp    dl,0x6c
c001f2fc:	0f 84 69 02 00 00    	je     c001f56b <Vm::faultHandler(regs*)+0x345>
c001f302:	e9 96 05 00 00       	jmp    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f307:	80 fa 6f             	cmp    dl,0x6f
c001f30a:	0f 84 f4 03 00 00    	je     c001f704 <Vm::faultHandler(regs*)+0x4de>
c001f310:	0f 82 59 03 00 00    	jb     c001f66f <Vm::faultHandler(regs*)+0x449>
c001f316:	80 fa 9c             	cmp    dl,0x9c
c001f319:	0f 84 2f 01 00 00    	je     c001f44e <Vm::faultHandler(regs*)+0x228>
c001f31f:	e9 79 05 00 00       	jmp    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f324:	80 fa ec             	cmp    dl,0xec
c001f327:	0f 84 14 05 00 00    	je     c001f841 <Vm::faultHandler(regs*)+0x61b>
c001f32d:	77 7b                	ja     c001f3aa <Vm::faultHandler(regs*)+0x184>
c001f32f:	80 fa e4             	cmp    dl,0xe4
c001f332:	0f 84 93 04 00 00    	je     c001f7cb <Vm::faultHandler(regs*)+0x5a5>
c001f338:	77 53                	ja     c001f38d <Vm::faultHandler(regs*)+0x167>
c001f33a:	80 fa cd             	cmp    dl,0xcd
c001f33d:	0f 84 d9 01 00 00    	je     c001f51c <Vm::faultHandler(regs*)+0x2f6>
c001f343:	80 fa cf             	cmp    dl,0xcf
c001f346:	0f 85 51 05 00 00    	jne    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f34c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f34f:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f352:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f356:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f359:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f35d:	81 ca 00 02 02 00    	or     edx,0x20200
c001f363:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f366:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f36a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f370:	66 c1 e8 09          	shr    ax,0x9
c001f374:	83 e0 01             	and    eax,0x1
c001f377:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f37a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f37d:	83 c0 06             	add    eax,0x6
c001f380:	25 ff ff 00 00       	and    eax,0xffff
c001f385:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f388:	e9 0c 05 00 00       	jmp    c001f899 <Vm::faultHandler(regs*)+0x673>
c001f38d:	80 fa e6             	cmp    dl,0xe6
c001f390:	0f 84 7f 04 00 00    	je     c001f815 <Vm::faultHandler(regs*)+0x5ef>
c001f396:	0f 82 4b 04 00 00    	jb     c001f7e7 <Vm::faultHandler(regs*)+0x5c1>
c001f39c:	80 fa e7             	cmp    dl,0xe7
c001f39f:	0f 84 87 04 00 00    	je     c001f82c <Vm::faultHandler(regs*)+0x606>
c001f3a5:	e9 f3 04 00 00       	jmp    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f3aa:	80 fa ef             	cmp    dl,0xef
c001f3ad:	0f 84 d1 04 00 00    	je     c001f884 <Vm::faultHandler(regs*)+0x65e>
c001f3b3:	77 28                	ja     c001f3dd <Vm::faultHandler(regs*)+0x1b7>
c001f3b5:	80 fa ed             	cmp    dl,0xed
c001f3b8:	0f 84 9f 04 00 00    	je     c001f85d <Vm::faultHandler(regs*)+0x637>
c001f3be:	80 fa ee             	cmp    dl,0xee
c001f3c1:	0f 85 d6 04 00 00    	jne    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f3c7:	50                   	push   eax
c001f3c8:	50                   	push   eax
c001f3c9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f3cd:	50                   	push   eax
c001f3ce:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3d2:	50                   	push   eax
c001f3d3:	e8 5c fa ff ff       	call   c001ee34 <Vm::outbv(unsigned short, unsigned char)>
c001f3d8:	e9 9f 04 00 00       	jmp    c001f87c <Vm::faultHandler(regs*)+0x656>
c001f3dd:	80 fa fa             	cmp    dl,0xfa
c001f3e0:	0f 84 69 01 00 00    	je     c001f54f <Vm::faultHandler(regs*)+0x329>
c001f3e6:	80 fa fb             	cmp    dl,0xfb
c001f3e9:	0f 84 6e 01 00 00    	je     c001f55d <Vm::faultHandler(regs*)+0x337>
c001f3ef:	80 fa f3             	cmp    dl,0xf3
c001f3f2:	0f 85 a5 04 00 00    	jne    c001f89d <Vm::faultHandler(regs*)+0x677>
c001f3f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f3fb:	e9 c0 fe ff ff       	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f400:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f403:	be 02 00 00 00       	mov    esi,0x2
c001f408:	e9 b3 fe ff ff       	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f40d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f410:	be 03 00 00 00       	mov    esi,0x3
c001f415:	e9 a6 fe ff ff       	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f41a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f41d:	be 04 00 00 00       	mov    esi,0x4
c001f422:	e9 99 fe ff ff       	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f427:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f42a:	be 05 00 00 00       	mov    esi,0x5
c001f42f:	e9 8c fe ff ff       	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f434:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f437:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f43c:	e9 7f fe ff ff       	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f441:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f444:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f449:	e9 72 fe ff ff       	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x9a>
c001f44e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f451:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f455:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f45a:	74 30                	je     c001f48c <Vm::faultHandler(regs*)+0x266>
c001f45c:	83 e9 04             	sub    ecx,0x4
c001f45f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f465:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f46b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f46e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f471:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f477:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f47b:	0f 84 15 04 00 00    	je     c001f896 <Vm::faultHandler(regs*)+0x670>
c001f481:	80 ce 02             	or     dh,0x2
c001f484:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f487:	e9 0a 04 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f48c:	83 e9 02             	sub    ecx,0x2
c001f48f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f495:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f498:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f49c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f4a2:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f4a6:	74 05                	je     c001f4ad <Vm::faultHandler(regs*)+0x287>
c001f4a8:	80 ce 02             	or     dh,0x2
c001f4ab:	eb 03                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x28a>
c001f4ad:	80 e6 fd             	and    dh,0xfd
c001f4b0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f4b4:	e9 dd 03 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f4b9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f4be:	74 2a                	je     c001f4ea <Vm::faultHandler(regs*)+0x2c4>
c001f4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001f4c2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f4c8:	81 ca 00 02 02 00    	or     edx,0x20200
c001f4ce:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f4d1:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f4d9:	c1 e8 09             	shr    eax,0x9
c001f4dc:	83 e0 01             	and    eax,0x1
c001f4df:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f4e2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f4e5:	83 c0 04             	add    eax,0x4
c001f4e8:	eb 25                	jmp    c001f50f <Vm::faultHandler(regs*)+0x2e9>
c001f4ea:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f4ed:	81 ca 00 02 02 00    	or     edx,0x20200
c001f4f3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f4f6:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f4f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f4ff:	66 c1 e8 09          	shr    ax,0x9
c001f503:	83 e0 01             	and    eax,0x1
c001f506:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f509:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f50c:	83 c0 02             	add    eax,0x2
c001f50f:	25 ff ff 00 00       	and    eax,0xffff
c001f514:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f517:	e9 7a 03 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f51c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f520:	3c ee                	cmp    al,0xee
c001f522:	75 10                	jne    c001f534 <Vm::faultHandler(regs*)+0x30e>
c001f524:	83 ec 0c             	sub    esp,0xc
c001f527:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f52a:	e8 a2 f9 ff ff       	call   c001eed1 <Vm::mainloop3(unsigned long)>
c001f52f:	e9 4b 03 00 00       	jmp    c001f87f <Vm::faultHandler(regs*)+0x659>
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f53b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f53f:	51                   	push   ecx
c001f540:	50                   	push   eax
c001f541:	53                   	push   ebx
c001f542:	e8 e1 fb ff ff       	call   c001f128 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f547:	83 c4 20             	add    esp,0x20
c001f54a:	e9 4a 03 00 00       	jmp    c001f899 <Vm::faultHandler(regs*)+0x673>
c001f54f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f554:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f558:	e9 39 03 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f55d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f562:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f566:	e9 2b 03 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f56b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f56e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f573:	74 2b                	je     c001f5a0 <Vm::faultHandler(regs*)+0x37a>
c001f575:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f57c:	76 22                	jbe    c001f5a0 <Vm::faultHandler(regs*)+0x37a>
c001f57e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f582:	50                   	push   eax
c001f583:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f587:	50                   	push   eax
c001f588:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f58c:	50                   	push   eax
c001f58d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f591:	50                   	push   eax
c001f592:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f596:	50                   	push   eax
c001f597:	6a 6c                	push   0x6c
c001f599:	6a 6c                	push   0x6c
c001f59b:	e9 b9 01 00 00       	jmp    c001f759 <Vm::faultHandler(regs*)+0x533>
c001f5a0:	83 ec 0c             	sub    esp,0xc
c001f5a3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f5a7:	0f b7 f6             	movzx  esi,si
c001f5aa:	50                   	push   eax
c001f5ab:	e8 71 f8 ff ff       	call   c001ee21 <Vm::inbv(unsigned short)>
c001f5b0:	83 c4 0c             	add    esp,0xc
c001f5b3:	0f b6 c0             	movzx  eax,al
c001f5b6:	50                   	push   eax
c001f5b7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f5bb:	50                   	push   eax
c001f5bc:	56                   	push   esi
c001f5bd:	e8 24 fc ff ff       	call   c001f1e6 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f5c2:	83 c4 10             	add    esp,0x10
c001f5c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f5c8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f5cc:	74 03                	je     c001f5d1 <Vm::faultHandler(regs*)+0x3ab>
c001f5ce:	48                   	dec    eax
c001f5cf:	eb 01                	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x3ac>
c001f5d1:	40                   	inc    eax
c001f5d2:	0f b7 c0             	movzx  eax,ax
c001f5d5:	e9 8d 00 00 00       	jmp    c001f667 <Vm::faultHandler(regs*)+0x441>
c001f5da:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f5dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f5e0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f5e5:	74 29                	je     c001f610 <Vm::faultHandler(regs*)+0x3ea>
c001f5e7:	3d ff ff 00 00       	cmp    eax,0xffff
c001f5ec:	76 22                	jbe    c001f610 <Vm::faultHandler(regs*)+0x3ea>
c001f5ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f5f2:	50                   	push   eax
c001f5f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f5f7:	50                   	push   eax
c001f5f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f5fc:	50                   	push   eax
c001f5fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f601:	50                   	push   eax
c001f602:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f606:	50                   	push   eax
c001f607:	6a 6d                	push   0x6d
c001f609:	6a 6d                	push   0x6d
c001f60b:	e9 49 01 00 00       	jmp    c001f759 <Vm::faultHandler(regs*)+0x533>
c001f610:	0f b7 c8             	movzx  ecx,ax
c001f613:	0f b7 f6             	movzx  esi,si
c001f616:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f619:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f61e:	74 20                	je     c001f640 <Vm::faultHandler(regs*)+0x41a>
c001f620:	ed                   	in     eax,dx
c001f621:	55                   	push   ebp
c001f622:	50                   	push   eax
c001f623:	51                   	push   ecx
c001f624:	56                   	push   esi
c001f625:	e8 e7 fb ff ff       	call   c001f211 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f62a:	83 c4 10             	add    esp,0x10
c001f62d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f630:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f634:	74 05                	je     c001f63b <Vm::faultHandler(regs*)+0x415>
c001f636:	83 e8 04             	sub    eax,0x4
c001f639:	eb 27                	jmp    c001f662 <Vm::faultHandler(regs*)+0x43c>
c001f63b:	83 c0 04             	add    eax,0x4
c001f63e:	eb 22                	jmp    c001f662 <Vm::faultHandler(regs*)+0x43c>
c001f640:	66 ed                	in     ax,dx
c001f642:	0f b7 c0             	movzx  eax,ax
c001f645:	57                   	push   edi
c001f646:	50                   	push   eax
c001f647:	51                   	push   ecx
c001f648:	56                   	push   esi
c001f649:	e8 ad fb ff ff       	call   c001f1fb <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f64e:	83 c4 10             	add    esp,0x10
c001f651:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f654:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f658:	74 05                	je     c001f65f <Vm::faultHandler(regs*)+0x439>
c001f65a:	83 e8 02             	sub    eax,0x2
c001f65d:	eb 03                	jmp    c001f662 <Vm::faultHandler(regs*)+0x43c>
c001f65f:	83 c0 02             	add    eax,0x2
c001f662:	25 ff ff 00 00       	and    eax,0xffff
c001f667:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f66a:	e9 27 02 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f66f:	8d 46 ff             	lea    eax,[esi-0x1]
c001f672:	3c 05                	cmp    al,0x5
c001f674:	77 24                	ja     c001f69a <Vm::faultHandler(regs*)+0x474>
c001f676:	0f b6 c0             	movzx  eax,al
c001f679:	ff 24 85 44 d2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2dbc]
c001f680:	0f b7 fd             	movzx  edi,bp
c001f683:	eb 15                	jmp    c001f69a <Vm::faultHandler(regs*)+0x474>
c001f685:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f689:	eb 0f                	jmp    c001f69a <Vm::faultHandler(regs*)+0x474>
c001f68b:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f68f:	eb 09                	jmp    c001f69a <Vm::faultHandler(regs*)+0x474>
c001f691:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f695:	eb 03                	jmp    c001f69a <Vm::faultHandler(regs*)+0x474>
c001f697:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f69d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f6a2:	74 29                	je     c001f6cd <Vm::faultHandler(regs*)+0x4a7>
c001f6a4:	3d ff ff 00 00       	cmp    eax,0xffff
c001f6a9:	76 22                	jbe    c001f6cd <Vm::faultHandler(regs*)+0x4a7>
c001f6ab:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f6af:	50                   	push   eax
c001f6b0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f6b4:	50                   	push   eax
c001f6b5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f6b9:	50                   	push   eax
c001f6ba:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f6be:	50                   	push   eax
c001f6bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6c3:	50                   	push   eax
c001f6c4:	6a 6e                	push   0x6e
c001f6c6:	6a 6e                	push   0x6e
c001f6c8:	e9 8c 00 00 00       	jmp    c001f759 <Vm::faultHandler(regs*)+0x533>
c001f6cd:	0f b7 c0             	movzx  eax,ax
c001f6d0:	52                   	push   edx
c001f6d1:	52                   	push   edx
c001f6d2:	50                   	push   eax
c001f6d3:	57                   	push   edi
c001f6d4:	e8 d9 fa ff ff       	call   c001f1b2 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f6d9:	59                   	pop    ecx
c001f6da:	0f b6 c0             	movzx  eax,al
c001f6dd:	5e                   	pop    esi
c001f6de:	50                   	push   eax
c001f6df:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f6e3:	50                   	push   eax
c001f6e4:	e8 4b f7 ff ff       	call   c001ee34 <Vm::outbv(unsigned short, unsigned char)>
c001f6e9:	83 c4 10             	add    esp,0x10
c001f6ec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f6ef:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f6f3:	74 03                	je     c001f6f8 <Vm::faultHandler(regs*)+0x4d2>
c001f6f5:	48                   	dec    eax
c001f6f6:	eb 01                	jmp    c001f6f9 <Vm::faultHandler(regs*)+0x4d3>
c001f6f8:	40                   	inc    eax
c001f6f9:	0f b7 c0             	movzx  eax,ax
c001f6fc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f6ff:	e9 92 01 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f704:	8d 46 ff             	lea    eax,[esi-0x1]
c001f707:	3c 05                	cmp    al,0x5
c001f709:	77 1f                	ja     c001f72a <Vm::faultHandler(regs*)+0x504>
c001f70b:	0f b6 c0             	movzx  eax,al
c001f70e:	ff 24 85 5c d2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2da4]
c001f715:	89 ef                	mov    edi,ebp
c001f717:	eb 11                	jmp    c001f72a <Vm::faultHandler(regs*)+0x504>
c001f719:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f71c:	eb 0c                	jmp    c001f72a <Vm::faultHandler(regs*)+0x504>
c001f71e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f721:	eb 07                	jmp    c001f72a <Vm::faultHandler(regs*)+0x504>
c001f723:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f726:	eb 02                	jmp    c001f72a <Vm::faultHandler(regs*)+0x504>
c001f728:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f72a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f72d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f732:	74 37                	je     c001f76b <Vm::faultHandler(regs*)+0x545>
c001f734:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f73a:	76 2f                	jbe    c001f76b <Vm::faultHandler(regs*)+0x545>
c001f73c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f740:	50                   	push   eax
c001f741:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f745:	50                   	push   eax
c001f746:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f74a:	50                   	push   eax
c001f74b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f74f:	50                   	push   eax
c001f750:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f754:	50                   	push   eax
c001f755:	6a 6f                	push   0x6f
c001f757:	6a 6f                	push   0x6f
c001f759:	68 e9 d1 02 c0       	push   0xc002d1e9
c001f75e:	e8 3a 33 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001f763:	83 c4 20             	add    esp,0x20
c001f766:	e9 86 01 00 00       	jmp    c001f8f1 <Vm::faultHandler(regs*)+0x6cb>
c001f76b:	0f b7 d7             	movzx  edx,di
c001f76e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f771:	0f b7 c6             	movzx  eax,si
c001f774:	81 e1 00 04 00 00    	and    ecx,0x400
c001f77a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f77d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f782:	74 1d                	je     c001f7a1 <Vm::faultHandler(regs*)+0x57b>
c001f784:	55                   	push   ebp
c001f785:	55                   	push   ebp
c001f786:	50                   	push   eax
c001f787:	52                   	push   edx
c001f788:	e8 48 fa ff ff       	call   c001f1d5 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f78d:	83 c4 10             	add    esp,0x10
c001f790:	89 fa                	mov    edx,edi
c001f792:	ef                   	out    dx,eax
c001f793:	85 c9                	test   ecx,ecx
c001f795:	74 05                	je     c001f79c <Vm::faultHandler(regs*)+0x576>
c001f797:	83 ee 04             	sub    esi,0x4
c001f79a:	eb 21                	jmp    c001f7bd <Vm::faultHandler(regs*)+0x597>
c001f79c:	83 c6 04             	add    esi,0x4
c001f79f:	eb 1c                	jmp    c001f7bd <Vm::faultHandler(regs*)+0x597>
c001f7a1:	55                   	push   ebp
c001f7a2:	55                   	push   ebp
c001f7a3:	50                   	push   eax
c001f7a4:	52                   	push   edx
c001f7a5:	e8 19 fa ff ff       	call   c001f1c3 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f7aa:	83 c4 10             	add    esp,0x10
c001f7ad:	89 fa                	mov    edx,edi
c001f7af:	66 ef                	out    dx,ax
c001f7b1:	85 c9                	test   ecx,ecx
c001f7b3:	74 05                	je     c001f7ba <Vm::faultHandler(regs*)+0x594>
c001f7b5:	83 ee 02             	sub    esi,0x2
c001f7b8:	eb 03                	jmp    c001f7bd <Vm::faultHandler(regs*)+0x597>
c001f7ba:	83 c6 02             	add    esi,0x2
c001f7bd:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f7c3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f7c6:	e9 cb 00 00 00       	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f7cb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f7d2:	83 ec 0c             	sub    esp,0xc
c001f7d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f7d9:	50                   	push   eax
c001f7da:	e8 42 f6 ff ff       	call   c001ee21 <Vm::inbv(unsigned short)>
c001f7df:	0f b6 c0             	movzx  eax,al
c001f7e2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f7e5:	eb 3f                	jmp    c001f826 <Vm::faultHandler(regs*)+0x600>
c001f7e7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f7ec:	74 07                	je     c001f7f5 <Vm::faultHandler(regs*)+0x5cf>
c001f7ee:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f7f2:	ed                   	in     eax,dx
c001f7f3:	eb 14                	jmp    c001f809 <Vm::faultHandler(regs*)+0x5e3>
c001f7f5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f7f8:	66 31 f6             	xor    si,si
c001f7fb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f7fe:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f802:	66 ed                	in     ax,dx
c001f804:	0f b7 c0             	movzx  eax,ax
c001f807:	09 f0                	or     eax,esi
c001f809:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f80c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f810:	e9 84 00 00 00       	jmp    c001f899 <Vm::faultHandler(regs*)+0x673>
c001f815:	52                   	push   edx
c001f816:	52                   	push   edx
c001f817:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f81b:	50                   	push   eax
c001f81c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f820:	50                   	push   eax
c001f821:	e8 0e f6 ff ff       	call   c001ee34 <Vm::outbv(unsigned short, unsigned char)>
c001f826:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f82a:	eb 53                	jmp    c001f87f <Vm::faultHandler(regs*)+0x659>
c001f82c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f82f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f833:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f838:	74 03                	je     c001f83d <Vm::faultHandler(regs*)+0x617>
c001f83a:	ef                   	out    dx,eax
c001f83b:	eb cf                	jmp    c001f80c <Vm::faultHandler(regs*)+0x5e6>
c001f83d:	66 ef                	out    dx,ax
c001f83f:	eb cb                	jmp    c001f80c <Vm::faultHandler(regs*)+0x5e6>
c001f841:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f848:	83 ec 0c             	sub    esp,0xc
c001f84b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f84f:	50                   	push   eax
c001f850:	e8 cc f5 ff ff       	call   c001ee21 <Vm::inbv(unsigned short)>
c001f855:	0f b6 c0             	movzx  eax,al
c001f858:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f85b:	eb 1f                	jmp    c001f87c <Vm::faultHandler(regs*)+0x656>
c001f85d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f860:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f865:	74 03                	je     c001f86a <Vm::faultHandler(regs*)+0x644>
c001f867:	ed                   	in     eax,dx
c001f868:	eb 0d                	jmp    c001f877 <Vm::faultHandler(regs*)+0x651>
c001f86a:	66 ed                	in     ax,dx
c001f86c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f86f:	0f b7 c0             	movzx  eax,ax
c001f872:	66 31 d2             	xor    dx,dx
c001f875:	09 d0                	or     eax,edx
c001f877:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f87a:	eb 1a                	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f87c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f87f:	83 c4 10             	add    esp,0x10
c001f882:	eb 15                	jmp    c001f899 <Vm::faultHandler(regs*)+0x673>
c001f884:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f887:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f88a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f88f:	74 03                	je     c001f894 <Vm::faultHandler(regs*)+0x66e>
c001f891:	ef                   	out    dx,eax
c001f892:	eb 02                	jmp    c001f896 <Vm::faultHandler(regs*)+0x670>
c001f894:	66 ef                	out    dx,ax
c001f896:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f899:	b0 01                	mov    al,0x1
c001f89b:	eb 56                	jmp    c001f8f3 <Vm::faultHandler(regs*)+0x6cd>
c001f89d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f8a1:	50                   	push   eax
c001f8a2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f8a6:	50                   	push   eax
c001f8a7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f8ab:	50                   	push   eax
c001f8ac:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f8b0:	50                   	push   eax
c001f8b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f8b5:	50                   	push   eax
c001f8b6:	52                   	push   edx
c001f8b7:	52                   	push   edx
c001f8b8:	68 16 d2 02 c0       	push   0xc002d216
c001f8bd:	e8 db 31 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c001f8c2:	83 c4 20             	add    esp,0x20
c001f8c5:	83 ec 0c             	sub    esp,0xc
c001f8c8:	6a 60                	push   0x60
c001f8ca:	e8 52 f5 ff ff       	call   c001ee21 <Vm::inbv(unsigned short)>
c001f8cf:	83 c4 10             	add    esp,0x10
c001f8d2:	3c 1c                	cmp    al,0x1c
c001f8d4:	74 04                	je     c001f8da <Vm::faultHandler(regs*)+0x6b4>
c001f8d6:	3c 5a                	cmp    al,0x5a
c001f8d8:	75 eb                	jne    c001f8c5 <Vm::faultHandler(regs*)+0x69f>
c001f8da:	3c 5a                	cmp    al,0x5a
c001f8dc:	74 04                	je     c001f8e2 <Vm::faultHandler(regs*)+0x6bc>
c001f8de:	3c 1c                	cmp    al,0x1c
c001f8e0:	75 0f                	jne    c001f8f1 <Vm::faultHandler(regs*)+0x6cb>
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	6a 60                	push   0x60
c001f8e7:	e8 35 f5 ff ff       	call   c001ee21 <Vm::inbv(unsigned short)>
c001f8ec:	83 c4 10             	add    esp,0x10
c001f8ef:	eb e9                	jmp    c001f8da <Vm::faultHandler(regs*)+0x6b4>
c001f8f1:	31 c0                	xor    eax,eax
c001f8f3:	83 c4 1c             	add    esp,0x1c
c001f8f6:	5b                   	pop    ebx
c001f8f7:	5e                   	pop    esi
c001f8f8:	5f                   	pop    edi
c001f8f9:	5d                   	pop    ebp
c001f8fa:	c3                   	ret    

c001f8fb <Vm::fpuInternalTo32(unsigned long long)>:
c001f8fb:	57                   	push   edi
c001f8fc:	56                   	push   esi
c001f8fd:	53                   	push   ebx
c001f8fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f906:	89 d6                	mov    esi,edx
c001f908:	89 d7                	mov    edi,edx
c001f90a:	89 c1                	mov    ecx,eax
c001f90c:	c1 ef 14             	shr    edi,0x14
c001f90f:	89 d3                	mov    ebx,edx
c001f911:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f917:	31 d2                	xor    edx,edx
c001f919:	89 f8                	mov    eax,edi
c001f91b:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f921:	bf ff 00 00 00       	mov    edi,0xff
c001f926:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f92b:	83 d2 ff             	adc    edx,0xffffffff
c001f92e:	39 c7                	cmp    edi,eax
c001f930:	bf 00 00 00 00       	mov    edi,0x0
c001f935:	19 d7                	sbb    edi,edx
c001f937:	72 15                	jb     c001f94e <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f939:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f93d:	c1 e0 17             	shl    eax,0x17
c001f940:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f946:	09 f1                	or     ecx,esi
c001f948:	09 c1                	or     ecx,eax
c001f94a:	89 cf                	mov    edi,ecx
c001f94c:	eb 02                	jmp    c001f950 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f94e:	31 ff                	xor    edi,edi
c001f950:	89 f8                	mov    eax,edi
c001f952:	5b                   	pop    ebx
c001f953:	5e                   	pop    esi
c001f954:	5f                   	pop    edi
c001f955:	c3                   	ret    

c001f956 <Vm::fpuInternalTo64(unsigned long long)>:
c001f956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f95e:	c3                   	ret    

c001f95f <Vm::fpu32ToInternal(unsigned int)>:
c001f95f:	57                   	push   edi
c001f960:	31 ff                	xor    edi,edi
c001f962:	56                   	push   esi
c001f963:	53                   	push   ebx
c001f964:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f968:	89 cb                	mov    ebx,ecx
c001f96a:	89 ce                	mov    esi,ecx
c001f96c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f972:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f978:	c1 e9 17             	shr    ecx,0x17
c001f97b:	89 f0                	mov    eax,esi
c001f97d:	0f b6 d1             	movzx  edx,cl
c001f980:	81 c2 80 03 00 00    	add    edx,0x380
c001f986:	89 d1                	mov    ecx,edx
c001f988:	89 fa                	mov    edx,edi
c001f98a:	c1 e1 14             	shl    ecx,0x14
c001f98d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f991:	c1 e0 1d             	shl    eax,0x1d
c001f994:	89 d7                	mov    edi,edx
c001f996:	89 c6                	mov    esi,eax
c001f998:	89 ca                	mov    edx,ecx
c001f99a:	89 f0                	mov    eax,esi
c001f99c:	09 fa                	or     edx,edi
c001f99e:	09 da                	or     edx,ebx
c001f9a0:	5b                   	pop    ebx
c001f9a1:	5e                   	pop    esi
c001f9a2:	5f                   	pop    edi
c001f9a3:	c3                   	ret    

c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>:
c001f9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9ac:	c3                   	ret    

c001f9ad <Vm::fpuFloatToLong(unsigned long long)>:
c001f9ad:	57                   	push   edi
c001f9ae:	31 c0                	xor    eax,eax
c001f9b0:	56                   	push   esi
c001f9b1:	31 d2                	xor    edx,edx
c001f9b3:	53                   	push   ebx
c001f9b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f9bc:	89 d9                	mov    ecx,ebx
c001f9be:	c1 e9 14             	shr    ecx,0x14
c001f9c1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f9c7:	89 cf                	mov    edi,ecx
c001f9c9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f9cf:	78 33                	js     c001fa04 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f9d1:	89 d9                	mov    ecx,ebx
c001f9d3:	89 f0                	mov    eax,esi
c001f9d5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f9db:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f9e1:	89 ca                	mov    edx,ecx
c001f9e3:	b9 34 00 00 00       	mov    ecx,0x34
c001f9e8:	29 f9                	sub    ecx,edi
c001f9ea:	0f ad d0             	shrd   eax,edx,cl
c001f9ed:	d3 fa                	sar    edx,cl
c001f9ef:	f6 c1 20             	test   cl,0x20
c001f9f2:	74 05                	je     c001f9f9 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f9f4:	89 d0                	mov    eax,edx
c001f9f6:	c1 fa 1f             	sar    edx,0x1f
c001f9f9:	85 db                	test   ebx,ebx
c001f9fb:	79 07                	jns    c001fa04 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f9fd:	f7 d8                	neg    eax
c001f9ff:	83 d2 00             	adc    edx,0x0
c001fa02:	f7 da                	neg    edx
c001fa04:	5b                   	pop    ebx
c001fa05:	5e                   	pop    esi
c001fa06:	5f                   	pop    edi
c001fa07:	c3                   	ret    

c001fa08 <Vm::fpuULongToFloat(unsigned long long)>:
c001fa08:	57                   	push   edi
c001fa09:	31 c9                	xor    ecx,ecx
c001fa0b:	56                   	push   esi
c001fa0c:	53                   	push   ebx
c001fa0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fa11:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fa15:	0f ba e7 14          	bt     edi,0x14
c001fa19:	72 07                	jb     c001fa22 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fa1b:	01 f6                	add    esi,esi
c001fa1d:	11 ff                	adc    edi,edi
c001fa1f:	41                   	inc    ecx
c001fa20:	eb f3                	jmp    c001fa15 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fa22:	89 fa                	mov    edx,edi
c001fa24:	89 f0                	mov    eax,esi
c001fa26:	bb 33 04 00 00       	mov    ebx,0x433
c001fa2b:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fa31:	29 cb                	sub    ebx,ecx
c001fa33:	89 d9                	mov    ecx,ebx
c001fa35:	5b                   	pop    ebx
c001fa36:	c1 e1 14             	shl    ecx,0x14
c001fa39:	5e                   	pop    esi
c001fa3a:	09 ca                	or     edx,ecx
c001fa3c:	5f                   	pop    edi
c001fa3d:	c3                   	ret    

c001fa3e <Vm::fpuLongToFloat(long long)>:
c001fa3e:	56                   	push   esi
c001fa3f:	31 c0                	xor    eax,eax
c001fa41:	53                   	push   ebx
c001fa42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fa46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa4a:	39 c8                	cmp    eax,ecx
c001fa4c:	19 d8                	sbb    eax,ebx
c001fa4e:	7d 04                	jge    c001fa54 <Vm::fpuLongToFloat(long long)+0x16>
c001fa50:	31 f6                	xor    esi,esi
c001fa52:	eb 0c                	jmp    c001fa60 <Vm::fpuLongToFloat(long long)+0x22>
c001fa54:	f7 d9                	neg    ecx
c001fa56:	be 01 00 00 00       	mov    esi,0x1
c001fa5b:	83 d3 00             	adc    ebx,0x0
c001fa5e:	f7 db                	neg    ebx
c001fa60:	31 c0                	xor    eax,eax
c001fa62:	0f ba e3 14          	bt     ebx,0x14
c001fa66:	72 07                	jb     c001fa6f <Vm::fpuLongToFloat(long long)+0x31>
c001fa68:	01 c9                	add    ecx,ecx
c001fa6a:	11 db                	adc    ebx,ebx
c001fa6c:	40                   	inc    eax
c001fa6d:	eb f3                	jmp    c001fa62 <Vm::fpuLongToFloat(long long)+0x24>
c001fa6f:	ba 33 04 00 00       	mov    edx,0x433
c001fa74:	29 c2                	sub    edx,eax
c001fa76:	89 c8                	mov    eax,ecx
c001fa78:	c1 e2 14             	shl    edx,0x14
c001fa7b:	89 d9                	mov    ecx,ebx
c001fa7d:	89 f3                	mov    ebx,esi
c001fa7f:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fa85:	09 ca                	or     edx,ecx
c001fa87:	84 db                	test   bl,bl
c001fa89:	74 06                	je     c001fa91 <Vm::fpuLongToFloat(long long)+0x53>
c001fa8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fa91:	5b                   	pop    ebx
c001fa92:	5e                   	pop    esi
c001fa93:	c3                   	ret    

c001fa94 <Vm::fpuGet0()>:
c001fa94:	31 c0                	xor    eax,eax
c001fa96:	31 d2                	xor    edx,edx
c001fa98:	c3                   	ret    

c001fa99 <Vm::fpuGet1()>:
c001fa99:	b8 01 00 00 00       	mov    eax,0x1
c001fa9e:	31 d2                	xor    edx,edx
c001faa0:	c3                   	ret    

c001faa1 <Vm::fpuGetPi()>:
c001faa1:	b8 03 00 00 00       	mov    eax,0x3
c001faa6:	31 d2                	xor    edx,edx
c001faa8:	c3                   	ret    

c001faa9 <Vm::fpuGetLog2E()>:
c001faa9:	83 ec 18             	sub    esp,0x18
c001faac:	68 74 d2 02 c0       	push   0xc002d274
c001fab1:	e8 1d aa ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001fab6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fabb:	31 d2                	xor    edx,edx
c001fabd:	83 c4 1c             	add    esp,0x1c
c001fac0:	c3                   	ret    

c001fac1 <Vm::fpuGetLogE2()>:
c001fac1:	83 ec 18             	sub    esp,0x18
c001fac4:	68 80 d2 02 c0       	push   0xc002d280
c001fac9:	e8 05 aa ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001face:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fad3:	31 d2                	xor    edx,edx
c001fad5:	83 c4 1c             	add    esp,0x1c
c001fad8:	c3                   	ret    

c001fad9 <Vm::fpuGetLog210()>:
c001fad9:	83 ec 18             	sub    esp,0x18
c001fadc:	68 8c d2 02 c0       	push   0xc002d28c
c001fae1:	e8 ed a9 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001fae6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001faeb:	31 d2                	xor    edx,edx
c001faed:	83 c4 1c             	add    esp,0x1c
c001faf0:	c3                   	ret    

c001faf1 <Vm::fpuGetLog102()>:
c001faf1:	83 ec 18             	sub    esp,0x18
c001faf4:	68 99 d2 02 c0       	push   0xc002d299
c001faf9:	e8 d5 a9 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001fafe:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fb03:	31 d2                	xor    edx,edx
c001fb05:	83 c4 1c             	add    esp,0x1c
c001fb08:	c3                   	ret    

c001fb09 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fb09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb0d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb15:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fb19:	0f 92 c0             	setb   al
c001fb1c:	c3                   	ret    

c001fb1d <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fb1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb25:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fb29:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fb2d:	09 c2                	or     edx,eax
c001fb2f:	0f 94 c0             	sete   al
c001fb32:	c3                   	ret    

c001fb33 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fb33:	57                   	push   edi
c001fb34:	56                   	push   esi
c001fb35:	53                   	push   ebx
c001fb36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fb3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fb3e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fb42:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fb46:	57                   	push   edi
c001fb47:	56                   	push   esi
c001fb48:	53                   	push   ebx
c001fb49:	51                   	push   ecx
c001fb4a:	e8 ce ff ff ff       	call   c001fb1d <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fb4f:	83 c4 10             	add    esp,0x10
c001fb52:	88 c2                	mov    dl,al
c001fb54:	31 c0                	xor    eax,eax
c001fb56:	84 d2                	test   dl,dl
c001fb58:	75 0c                	jne    c001fb66 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fb5a:	57                   	push   edi
c001fb5b:	56                   	push   esi
c001fb5c:	53                   	push   ebx
c001fb5d:	51                   	push   ecx
c001fb5e:	e8 a6 ff ff ff       	call   c001fb09 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fb63:	83 c4 10             	add    esp,0x10
c001fb66:	83 e0 01             	and    eax,0x1
c001fb69:	5b                   	pop    ebx
c001fb6a:	88 c1                	mov    cl,al
c001fb6c:	83 e2 01             	and    edx,0x1
c001fb6f:	a0 a1 26 03 c0       	mov    al,ds:0xc00326a1
c001fb74:	c1 e2 06             	shl    edx,0x6
c001fb77:	83 e0 ba             	and    eax,0xffffffba
c001fb7a:	5e                   	pop    esi
c001fb7b:	09 c8                	or     eax,ecx
c001fb7d:	5f                   	pop    edi
c001fb7e:	09 d0                	or     eax,edx
c001fb80:	a2 a1 26 03 c0       	mov    ds:0xc00326a1,al
c001fb85:	c3                   	ret    

c001fb86 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fb86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fb8e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fb92:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fb96:	c3                   	ret    

c001fb97 <Vm::fpuAbs(unsigned long long)>:
c001fb97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fb9f:	c3                   	ret    

c001fba0 <Vm::fpuChs(unsigned long long)>:
c001fba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fba8:	f7 d8                	neg    eax
c001fbaa:	83 d2 00             	adc    edx,0x0
c001fbad:	f7 da                	neg    edx
c001fbaf:	c3                   	ret    

c001fbb0 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fbb0:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fbb4:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fbb9:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fbbd:	eb c7                	jmp    c001fb86 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001fbbf <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001fbbf:	53                   	push   ebx
c001fbc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fbc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fbcc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fbd0:	0f af ca             	imul   ecx,edx
c001fbd3:	0f af d8             	imul   ebx,eax
c001fbd6:	f7 e2                	mul    edx
c001fbd8:	01 d9                	add    ecx,ebx
c001fbda:	5b                   	pop    ebx
c001fbdb:	01 ca                	add    edx,ecx
c001fbdd:	c3                   	ret    

c001fbde <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fbde:	83 ec 0c             	sub    esp,0xc
c001fbe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf1:	e8 3e 78 00 00       	call   c0027434 <__udivdi3>
c001fbf6:	83 c4 1c             	add    esp,0x1c
c001fbf9:	c3                   	ret    

c001fbfa <Vm::fpuSquare(unsigned long long)>:
c001fbfa:	50                   	push   eax
c001fbfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fc03:	52                   	push   edx
c001fc04:	50                   	push   eax
c001fc05:	52                   	push   edx
c001fc06:	50                   	push   eax
c001fc07:	e8 b3 ff ff ff       	call   c001fbbf <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc0c:	83 c4 14             	add    esp,0x14
c001fc0f:	c3                   	ret    

c001fc10 <Vm::fpuGetReg(int)>:
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fc18:	76 10                	jbe    c001fc2a <Vm::fpuGetReg(int)+0x1a>
c001fc1a:	83 ec 0c             	sub    esp,0xc
c001fc1d:	68 a6 d2 02 c0       	push   0xc002d2a6
c001fc22:	e8 ac a8 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001fc27:	83 c4 10             	add    esp,0x10
c001fc2a:	a0 a1 26 03 c0       	mov    al,ds:0xc00326a1
c001fc2f:	b9 08 00 00 00       	mov    ecx,0x8
c001fc34:	c0 e8 03             	shr    al,0x3
c001fc37:	83 e0 07             	and    eax,0x7
c001fc3a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fc3e:	99                   	cdq    
c001fc3f:	f7 f9                	idiv   ecx
c001fc41:	8b 04 d5 a4 26 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd95c]
c001fc48:	8b 14 d5 a8 26 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd958]
c001fc4f:	83 c4 0c             	add    esp,0xc
c001fc52:	c3                   	ret    

c001fc53 <Vm::fpuSetReg(int, unsigned long long)>:
c001fc53:	57                   	push   edi
c001fc54:	56                   	push   esi
c001fc55:	52                   	push   edx
c001fc56:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fc5a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fc5e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fc63:	76 10                	jbe    c001fc75 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fc65:	83 ec 0c             	sub    esp,0xc
c001fc68:	68 b9 d2 02 c0       	push   0xc002d2b9
c001fc6d:	e8 61 a8 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c001fc72:	83 c4 10             	add    esp,0x10
c001fc75:	a0 a1 26 03 c0       	mov    al,ds:0xc00326a1
c001fc7a:	b9 08 00 00 00       	mov    ecx,0x8
c001fc7f:	c0 e8 03             	shr    al,0x3
c001fc82:	83 e0 07             	and    eax,0x7
c001fc85:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fc89:	99                   	cdq    
c001fc8a:	f7 f9                	idiv   ecx
c001fc8c:	89 34 d5 a4 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd95c],esi
c001fc93:	89 3c d5 a8 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd958],edi
c001fc9a:	58                   	pop    eax
c001fc9b:	5e                   	pop    esi
c001fc9c:	5f                   	pop    edi
c001fc9d:	c3                   	ret    

c001fc9e <Vm::fpuPush(unsigned long long)>:
c001fc9e:	a0 a1 26 03 c0       	mov    al,ds:0xc00326a1
c001fca3:	c0 e8 03             	shr    al,0x3
c001fca6:	83 e0 07             	and    eax,0x7
c001fca9:	83 c0 07             	add    eax,0x7
c001fcac:	88 c2                	mov    dl,al
c001fcae:	83 e0 07             	and    eax,0x7
c001fcb1:	83 e2 07             	and    edx,0x7
c001fcb4:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fcbb:	8a 15 a1 26 03 c0    	mov    dl,BYTE PTR ds:0xc00326a1
c001fcc1:	83 e2 c7             	and    edx,0xffffffc7
c001fcc4:	09 ca                	or     edx,ecx
c001fcc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fcca:	88 15 a1 26 03 c0    	mov    BYTE PTR ds:0xc00326a1,dl
c001fcd0:	89 0c c5 a8 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd958],ecx
c001fcd7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fcdb:	89 14 c5 a4 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd95c],edx
c001fce2:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001fce7:	83 f8 08             	cmp    eax,0x8
c001fcea:	75 08                	jne    c001fcf4 <Vm::fpuPush(unsigned long long)+0x56>
c001fcec:	80 0d a0 26 03 c0 40 	or     BYTE PTR ds:0xc00326a0,0x40
c001fcf3:	c3                   	ret    
c001fcf4:	40                   	inc    eax
c001fcf5:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c001fcfa:	c3                   	ret    

c001fcfb <Vm::fpuPop()>:
c001fcfb:	8a 0d a1 26 03 c0    	mov    cl,BYTE PTR ds:0xc00326a1
c001fd01:	53                   	push   ebx
c001fd02:	c0 e9 03             	shr    cl,0x3
c001fd05:	8a 1d a1 26 03 c0    	mov    bl,BYTE PTR ds:0xc00326a1
c001fd0b:	83 e1 07             	and    ecx,0x7
c001fd0e:	83 e3 c7             	and    ebx,0xffffffc7
c001fd11:	8b 04 cd a4 26 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd95c]
c001fd18:	8b 14 cd a8 26 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd958]
c001fd1f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fd26:	83 e1 38             	and    ecx,0x38
c001fd29:	09 d9                	or     ecx,ebx
c001fd2b:	88 0d a1 26 03 c0    	mov    BYTE PTR ds:0xc00326a1,cl
c001fd31:	8b 0d e4 26 03 c0    	mov    ecx,DWORD PTR ds:0xc00326e4
c001fd37:	85 c9                	test   ecx,ecx
c001fd39:	74 09                	je     c001fd44 <Vm::fpuPop()+0x49>
c001fd3b:	49                   	dec    ecx
c001fd3c:	89 0d e4 26 03 c0    	mov    DWORD PTR ds:0xc00326e4,ecx
c001fd42:	eb 07                	jmp    c001fd4b <Vm::fpuPop()+0x50>
c001fd44:	80 0d a0 26 03 c0 40 	or     BYTE PTR ds:0xc00326a0,0x40
c001fd4b:	5b                   	pop    ebx
c001fd4c:	c3                   	ret    

c001fd4d <Vm::x87Handler(regs*)>:
c001fd4d:	55                   	push   ebp
c001fd4e:	57                   	push   edi
c001fd4f:	56                   	push   esi
c001fd50:	53                   	push   ebx
c001fd51:	83 ec 1c             	sub    esp,0x1c
c001fd54:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fd58:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fd5d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fd60:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fd68:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fd6c:	50                   	push   eax
c001fd6d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fd71:	50                   	push   eax
c001fd72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd76:	50                   	push   eax
c001fd77:	53                   	push   ebx
c001fd78:	e8 23 9e ff ff       	call   c0019ba0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fd7d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fd80:	83 c4 10             	add    esp,0x10
c001fd83:	89 c6                	mov    esi,eax
c001fd85:	80 fa d9             	cmp    dl,0xd9
c001fd88:	0f 85 52 01 00 00    	jne    c001fee0 <Vm::x87Handler(regs*)+0x193>
c001fd8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd92:	8d 50 20             	lea    edx,[eax+0x20]
c001fd95:	80 fa 0e             	cmp    dl,0xe
c001fd98:	0f 87 86 00 00 00    	ja     c001fe24 <Vm::x87Handler(regs*)+0xd7>
c001fd9e:	0f b6 d2             	movzx  edx,dl
c001fda1:	ff 24 95 cc d2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2d34]
c001fda8:	e8 e7 fc ff ff       	call   c001fa94 <Vm::fpuGet0()>
c001fdad:	eb 05                	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x67>
c001fdaf:	e8 e5 fc ff ff       	call   c001fa99 <Vm::fpuGet1()>
c001fdb4:	57                   	push   edi
c001fdb5:	57                   	push   edi
c001fdb6:	52                   	push   edx
c001fdb7:	50                   	push   eax
c001fdb8:	e8 e1 fe ff ff       	call   c001fc9e <Vm::fpuPush(unsigned long long)>
c001fdbd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fdc1:	83 c4 10             	add    esp,0x10
c001fdc4:	b0 01                	mov    al,0x1
c001fdc6:	e9 e3 09 00 00       	jmp    c00207ae <Vm::x87Handler(regs*)+0xa61>
c001fdcb:	83 ec 0c             	sub    esp,0xc
c001fdce:	6a 00                	push   0x0
c001fdd0:	e8 3b fe ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001fdd5:	59                   	pop    ecx
c001fdd6:	5e                   	pop    esi
c001fdd7:	52                   	push   edx
c001fdd8:	50                   	push   eax
c001fdd9:	e8 c2 fd ff ff       	call   c001fba0 <Vm::fpuChs(unsigned long long)>
c001fdde:	eb 13                	jmp    c001fdf3 <Vm::x87Handler(regs*)+0xa6>
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	6a 00                	push   0x0
c001fde5:	e8 26 fe ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001fdea:	5f                   	pop    edi
c001fdeb:	5d                   	pop    ebp
c001fdec:	52                   	push   edx
c001fded:	50                   	push   eax
c001fdee:	e8 a4 fd ff ff       	call   c001fb97 <Vm::fpuAbs(unsigned long long)>
c001fdf3:	83 c4 0c             	add    esp,0xc
c001fdf6:	52                   	push   edx
c001fdf7:	50                   	push   eax
c001fdf8:	6a 00                	push   0x0
c001fdfa:	e8 54 fe ff ff       	call   c001fc53 <Vm::fpuSetReg(int, unsigned long long)>
c001fdff:	eb bc                	jmp    c001fdbd <Vm::x87Handler(regs*)+0x70>
c001fe01:	e8 d3 fc ff ff       	call   c001fad9 <Vm::fpuGetLog210()>
c001fe06:	eb ac                	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x67>
c001fe08:	e8 9c fc ff ff       	call   c001faa9 <Vm::fpuGetLog2E()>
c001fe0d:	eb a5                	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x67>
c001fe0f:	e8 8d fc ff ff       	call   c001faa1 <Vm::fpuGetPi()>
c001fe14:	eb 9e                	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x67>
c001fe16:	e8 d6 fc ff ff       	call   c001faf1 <Vm::fpuGetLog102()>
c001fe1b:	eb 97                	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x67>
c001fe1d:	e8 9f fc ff ff       	call   c001fac1 <Vm::fpuGetLogE2()>
c001fe22:	eb 90                	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x67>
c001fe24:	8d 50 40             	lea    edx,[eax+0x40]
c001fe27:	80 fa 07             	cmp    dl,0x7
c001fe2a:	77 15                	ja     c001fe41 <Vm::x87Handler(regs*)+0xf4>
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	2d c0 00 00 00       	sub    eax,0xc0
c001fe34:	50                   	push   eax
c001fe35:	e8 d6 fd ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001fe3a:	59                   	pop    ecx
c001fe3b:	5e                   	pop    esi
c001fe3c:	e9 75 ff ff ff       	jmp    c001fdb6 <Vm::x87Handler(regs*)+0x69>
c001fe41:	8d 50 38             	lea    edx,[eax+0x38]
c001fe44:	80 fa 07             	cmp    dl,0x7
c001fe47:	77 3c                	ja     c001fe85 <Vm::x87Handler(regs*)+0x138>
c001fe49:	83 ec 0c             	sub    esp,0xc
c001fe4c:	2d c8 00 00 00       	sub    eax,0xc8
c001fe51:	50                   	push   eax
c001fe52:	e8 b9 fd ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001fe57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe5e:	89 c6                	mov    esi,eax
c001fe60:	89 d7                	mov    edi,edx
c001fe62:	e8 a9 fd ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001fe67:	83 c4 0c             	add    esp,0xc
c001fe6a:	52                   	push   edx
c001fe6b:	50                   	push   eax
c001fe6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe70:	2d c8 00 00 00       	sub    eax,0xc8
c001fe75:	50                   	push   eax
c001fe76:	e8 d8 fd ff ff       	call   c001fc53 <Vm::fpuSetReg(int, unsigned long long)>
c001fe7b:	83 c4 0c             	add    esp,0xc
c001fe7e:	57                   	push   edi
c001fe7f:	56                   	push   esi
c001fe80:	e9 73 ff ff ff       	jmp    c001fdf8 <Vm::x87Handler(regs*)+0xab>
c001fe85:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe89:	84 d2                	test   dl,dl
c001fe8b:	75 0f                	jne    c001fe9c <Vm::x87Handler(regs*)+0x14f>
c001fe8d:	83 ec 0c             	sub    esp,0xc
c001fe90:	ff 36                	push   DWORD PTR [esi]
c001fe92:	e8 c8 fa ff ff       	call   c001f95f <Vm::fpu32ToInternal(unsigned int)>
c001fe97:	e9 bf 00 00 00       	jmp    c001ff5b <Vm::x87Handler(regs*)+0x20e>
c001fe9c:	80 fa 03             	cmp    dl,0x3
c001fe9f:	75 13                	jne    c001feb4 <Vm::x87Handler(regs*)+0x167>
c001fea1:	e8 55 fe ff ff       	call   c001fcfb <Vm::fpuPop()>
c001fea6:	55                   	push   ebp
c001fea7:	55                   	push   ebp
c001fea8:	52                   	push   edx
c001fea9:	50                   	push   eax
c001feaa:	e8 4c fa ff ff       	call   c001f8fb <Vm::fpuInternalTo32(unsigned long long)>
c001feaf:	e9 88 00 00 00       	jmp    c001ff3c <Vm::x87Handler(regs*)+0x1ef>
c001feb4:	80 fa 05             	cmp    dl,0x5
c001feb7:	75 0e                	jne    c001fec7 <Vm::x87Handler(regs*)+0x17a>
c001feb9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001febc:	66 a3 a2 26 03 c0    	mov    ds:0xc00326a2,ax
c001fec2:	e9 df 00 00 00       	jmp    c001ffa6 <Vm::x87Handler(regs*)+0x259>
c001fec7:	31 c0                	xor    eax,eax
c001fec9:	80 fa 07             	cmp    dl,0x7
c001fecc:	0f 85 dc 08 00 00    	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c001fed2:	66 a1 a2 26 03 c0    	mov    ax,ds:0xc00326a2
c001fed8:	66 89 06             	mov    WORD PTR [esi],ax
c001fedb:	e9 c6 00 00 00       	jmp    c001ffa6 <Vm::x87Handler(regs*)+0x259>
c001fee0:	80 fa d8             	cmp    dl,0xd8
c001fee3:	0f 84 c9 00 00 00    	je     c001ffb2 <Vm::x87Handler(regs*)+0x265>
c001fee9:	80 fa dc             	cmp    dl,0xdc
c001feec:	0f 84 0d 02 00 00    	je     c00200ff <Vm::x87Handler(regs*)+0x3b2>
c001fef2:	80 fa de             	cmp    dl,0xde
c001fef5:	0f 84 cd 02 00 00    	je     c00201c8 <Vm::x87Handler(regs*)+0x47b>
c001fefb:	80 fa dd             	cmp    dl,0xdd
c001fefe:	0f 84 5f 04 00 00    	je     c0020363 <Vm::x87Handler(regs*)+0x616>
c001ff04:	80 fa da             	cmp    dl,0xda
c001ff07:	0f 84 24 05 00 00    	je     c0020431 <Vm::x87Handler(regs*)+0x6e4>
c001ff0d:	80 fa df             	cmp    dl,0xdf
c001ff10:	0f 84 68 05 00 00    	je     c002047e <Vm::x87Handler(regs*)+0x731>
c001ff16:	31 c0                	xor    eax,eax
c001ff18:	80 fa db             	cmp    dl,0xdb
c001ff1b:	0f 85 8d 08 00 00    	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c001ff21:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff25:	80 fa 03             	cmp    dl,0x3
c001ff28:	0f 85 70 06 00 00    	jne    c002059e <Vm::x87Handler(regs*)+0x851>
c001ff2e:	e8 c8 fd ff ff       	call   c001fcfb <Vm::fpuPop()>
c001ff33:	55                   	push   ebp
c001ff34:	55                   	push   ebp
c001ff35:	52                   	push   edx
c001ff36:	50                   	push   eax
c001ff37:	e8 71 fa ff ff       	call   c001f9ad <Vm::fpuFloatToLong(unsigned long long)>
c001ff3c:	83 c4 10             	add    esp,0x10
c001ff3f:	89 06                	mov    DWORD PTR [esi],eax
c001ff41:	eb 63                	jmp    c001ffa6 <Vm::x87Handler(regs*)+0x259>
c001ff43:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff47:	84 d2                	test   dl,dl
c001ff49:	0f 85 e6 05 00 00    	jne    c0020535 <Vm::x87Handler(regs*)+0x7e8>
c001ff4f:	57                   	push   edi
c001ff50:	57                   	push   edi
c001ff51:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff54:	ff 36                	push   DWORD PTR [esi]
c001ff56:	e8 49 fa ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c001ff5b:	5e                   	pop    esi
c001ff5c:	5f                   	pop    edi
c001ff5d:	52                   	push   edx
c001ff5e:	50                   	push   eax
c001ff5f:	e8 3a fd ff ff       	call   c001fc9e <Vm::fpuPush(unsigned long long)>
c001ff64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff68:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ff6b:	e9 51 fe ff ff       	jmp    c001fdc1 <Vm::x87Handler(regs*)+0x74>
c001ff70:	80 fa 03             	cmp    dl,0x3
c001ff73:	0f 85 d7 06 00 00    	jne    c0020650 <Vm::x87Handler(regs*)+0x903>
c001ff79:	57                   	push   edi
c001ff7a:	57                   	push   edi
c001ff7b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff7e:	ff 36                	push   DWORD PTR [esi]
c001ff80:	e8 1f fa ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c001ff85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8c:	89 c6                	mov    esi,eax
c001ff8e:	89 d7                	mov    edi,edx
c001ff90:	e8 7b fc ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001ff95:	57                   	push   edi
c001ff96:	56                   	push   esi
c001ff97:	52                   	push   edx
c001ff98:	50                   	push   eax
c001ff99:	e8 95 fb ff ff       	call   c001fb33 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff9e:	83 c4 20             	add    esp,0x20
c001ffa1:	e8 55 fd ff ff       	call   c001fcfb <Vm::fpuPop()>
c001ffa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffaa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ffad:	e9 12 fe ff ff       	jmp    c001fdc4 <Vm::x87Handler(regs*)+0x77>
c001ffb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb6:	8d 50 40             	lea    edx,[eax+0x40]
c001ffb9:	80 fa 07             	cmp    dl,0x7
c001ffbc:	77 29                	ja     c001ffe7 <Vm::x87Handler(regs*)+0x29a>
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	2d c0 00 00 00       	sub    eax,0xc0
c001ffc6:	50                   	push   eax
c001ffc7:	e8 44 fc ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001ffcc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffd3:	89 c6                	mov    esi,eax
c001ffd5:	89 d7                	mov    edi,edx
c001ffd7:	e8 34 fc ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001ffdc:	57                   	push   edi
c001ffdd:	56                   	push   esi
c001ffde:	52                   	push   edx
c001ffdf:	50                   	push   eax
c001ffe0:	e8 a1 fb ff ff       	call   c001fb86 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffe5:	eb 2f                	jmp    c0020016 <Vm::x87Handler(regs*)+0x2c9>
c001ffe7:	8d 50 38             	lea    edx,[eax+0x38]
c001ffea:	80 fa 07             	cmp    dl,0x7
c001ffed:	77 2f                	ja     c002001e <Vm::x87Handler(regs*)+0x2d1>
c001ffef:	83 ec 0c             	sub    esp,0xc
c001fff2:	2d c8 00 00 00       	sub    eax,0xc8
c001fff7:	50                   	push   eax
c001fff8:	e8 13 fc ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c001fffd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020004:	89 c6                	mov    esi,eax
c0020006:	89 d7                	mov    edi,edx
c0020008:	e8 03 fc ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002000d:	57                   	push   edi
c002000e:	56                   	push   esi
c002000f:	52                   	push   edx
c0020010:	50                   	push   eax
c0020011:	e8 a9 fb ff ff       	call   c001fbbf <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020016:	83 c4 1c             	add    esp,0x1c
c0020019:	e9 d8 fd ff ff       	jmp    c001fdf6 <Vm::x87Handler(regs*)+0xa9>
c002001e:	8d 50 30             	lea    edx,[eax+0x30]
c0020021:	80 fa 07             	cmp    dl,0x7
c0020024:	77 0d                	ja     c0020033 <Vm::x87Handler(regs*)+0x2e6>
c0020026:	83 ec 0c             	sub    esp,0xc
c0020029:	2d d0 00 00 00       	sub    eax,0xd0
c002002e:	e9 99 03 00 00       	jmp    c00203cc <Vm::x87Handler(regs*)+0x67f>
c0020033:	8d 50 28             	lea    edx,[eax+0x28]
c0020036:	80 fa 07             	cmp    dl,0x7
c0020039:	77 0d                	ja     c0020048 <Vm::x87Handler(regs*)+0x2fb>
c002003b:	83 ec 0c             	sub    esp,0xc
c002003e:	2d d8 00 00 00       	sub    eax,0xd8
c0020043:	e9 c0 03 00 00       	jmp    c0020408 <Vm::x87Handler(regs*)+0x6bb>
c0020048:	8d 50 20             	lea    edx,[eax+0x20]
c002004b:	80 fa 07             	cmp    dl,0x7
c002004e:	77 1b                	ja     c002006b <Vm::x87Handler(regs*)+0x31e>
c0020050:	83 ec 0c             	sub    esp,0xc
c0020053:	2d e0 00 00 00       	sub    eax,0xe0
c0020058:	50                   	push   eax
c0020059:	e8 b2 fb ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002005e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020065:	89 c6                	mov    esi,eax
c0020067:	89 d7                	mov    edi,edx
c0020069:	eb 22                	jmp    c002008d <Vm::x87Handler(regs*)+0x340>
c002006b:	8d 50 18             	lea    edx,[eax+0x18]
c002006e:	80 fa 07             	cmp    dl,0x7
c0020071:	77 2d                	ja     c00200a0 <Vm::x87Handler(regs*)+0x353>
c0020073:	83 ec 0c             	sub    esp,0xc
c0020076:	6a 00                	push   0x0
c0020078:	e8 93 fb ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002007d:	89 c6                	mov    esi,eax
c002007f:	89 d7                	mov    edi,edx
c0020081:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020085:	2d e8 00 00 00       	sub    eax,0xe8
c002008a:	89 04 24             	mov    DWORD PTR [esp],eax
c002008d:	e8 7e fb ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020092:	57                   	push   edi
c0020093:	56                   	push   esi
c0020094:	52                   	push   edx
c0020095:	50                   	push   eax
c0020096:	e8 15 fb ff ff       	call   c001fbb0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002009b:	e9 76 ff ff ff       	jmp    c0020016 <Vm::x87Handler(regs*)+0x2c9>
c00200a0:	8d 50 10             	lea    edx,[eax+0x10]
c00200a3:	80 fa 07             	cmp    dl,0x7
c00200a6:	77 1b                	ja     c00200c3 <Vm::x87Handler(regs*)+0x376>
c00200a8:	83 ec 0c             	sub    esp,0xc
c00200ab:	2d f0 00 00 00       	sub    eax,0xf0
c00200b0:	50                   	push   eax
c00200b1:	e8 5a fb ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00200b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200bd:	89 c6                	mov    esi,eax
c00200bf:	89 d7                	mov    edi,edx
c00200c1:	eb 22                	jmp    c00200e5 <Vm::x87Handler(regs*)+0x398>
c00200c3:	3c f7                	cmp    al,0xf7
c00200c5:	0f 86 d1 03 00 00    	jbe    c002049c <Vm::x87Handler(regs*)+0x74f>
c00200cb:	83 ec 0c             	sub    esp,0xc
c00200ce:	6a 00                	push   0x0
c00200d0:	e8 3b fb ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00200d5:	89 c6                	mov    esi,eax
c00200d7:	89 d7                	mov    edi,edx
c00200d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200dd:	2d f8 00 00 00       	sub    eax,0xf8
c00200e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00200e5:	e8 26 fb ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00200ea:	57                   	push   edi
c00200eb:	56                   	push   esi
c00200ec:	52                   	push   edx
c00200ed:	50                   	push   eax
c00200ee:	e8 eb fa ff ff       	call   c001fbde <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200f3:	83 c4 1c             	add    esp,0x1c
c00200f6:	52                   	push   edx
c00200f7:	50                   	push   eax
c00200f8:	6a 00                	push   0x0
c00200fa:	e9 51 02 00 00       	jmp    c0020350 <Vm::x87Handler(regs*)+0x603>
c00200ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020103:	8d 50 40             	lea    edx,[eax+0x40]
c0020106:	80 fa 07             	cmp    dl,0x7
c0020109:	77 37                	ja     c0020142 <Vm::x87Handler(regs*)+0x3f5>
c002010b:	83 ec 0c             	sub    esp,0xc
c002010e:	2d c0 00 00 00       	sub    eax,0xc0
c0020113:	50                   	push   eax
c0020114:	e8 f7 fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020119:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020120:	89 c6                	mov    esi,eax
c0020122:	89 d7                	mov    edi,edx
c0020124:	e8 e7 fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020129:	57                   	push   edi
c002012a:	56                   	push   esi
c002012b:	52                   	push   edx
c002012c:	50                   	push   eax
c002012d:	e8 54 fa ff ff       	call   c001fb86 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020132:	83 c4 1c             	add    esp,0x1c
c0020135:	52                   	push   edx
c0020136:	50                   	push   eax
c0020137:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002013b:	2d c0 00 00 00       	sub    eax,0xc0
c0020140:	eb 3d                	jmp    c002017f <Vm::x87Handler(regs*)+0x432>
c0020142:	8d 50 38             	lea    edx,[eax+0x38]
c0020145:	80 fa 07             	cmp    dl,0x7
c0020148:	77 3b                	ja     c0020185 <Vm::x87Handler(regs*)+0x438>
c002014a:	83 ec 0c             	sub    esp,0xc
c002014d:	2d c8 00 00 00       	sub    eax,0xc8
c0020152:	50                   	push   eax
c0020153:	e8 b8 fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020158:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002015f:	89 c6                	mov    esi,eax
c0020161:	89 d7                	mov    edi,edx
c0020163:	e8 a8 fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020168:	57                   	push   edi
c0020169:	56                   	push   esi
c002016a:	52                   	push   edx
c002016b:	50                   	push   eax
c002016c:	e8 4e fa ff ff       	call   c001fbbf <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020171:	83 c4 1c             	add    esp,0x1c
c0020174:	52                   	push   edx
c0020175:	50                   	push   eax
c0020176:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002017a:	2d c8 00 00 00       	sub    eax,0xc8
c002017f:	50                   	push   eax
c0020180:	e9 75 fc ff ff       	jmp    c001fdfa <Vm::x87Handler(regs*)+0xad>
c0020185:	83 c0 18             	add    eax,0x18
c0020188:	3c 07                	cmp    al,0x7
c002018a:	0f 87 3b 04 00 00    	ja     c00205cb <Vm::x87Handler(regs*)+0x87e>
c0020190:	83 ec 0c             	sub    esp,0xc
c0020193:	6a 00                	push   0x0
c0020195:	e8 76 fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002019a:	89 c6                	mov    esi,eax
c002019c:	89 d7                	mov    edi,edx
c002019e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201a2:	2d e8 00 00 00       	sub    eax,0xe8
c00201a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00201aa:	e8 61 fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00201af:	57                   	push   edi
c00201b0:	56                   	push   esi
c00201b1:	52                   	push   edx
c00201b2:	50                   	push   eax
c00201b3:	e8 f8 f9 ff ff       	call   c001fbb0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00201b8:	83 c4 1c             	add    esp,0x1c
c00201bb:	52                   	push   edx
c00201bc:	50                   	push   eax
c00201bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201c1:	2d e8 00 00 00       	sub    eax,0xe8
c00201c6:	eb b7                	jmp    c002017f <Vm::x87Handler(regs*)+0x432>
c00201c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201cc:	8d 50 40             	lea    edx,[eax+0x40]
c00201cf:	80 fa 07             	cmp    dl,0x7
c00201d2:	77 3a                	ja     c002020e <Vm::x87Handler(regs*)+0x4c1>
c00201d4:	83 ec 0c             	sub    esp,0xc
c00201d7:	2d c0 00 00 00       	sub    eax,0xc0
c00201dc:	50                   	push   eax
c00201dd:	e8 2e fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00201e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e9:	89 c6                	mov    esi,eax
c00201eb:	89 d7                	mov    edi,edx
c00201ed:	e8 1e fa ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00201f2:	57                   	push   edi
c00201f3:	56                   	push   esi
c00201f4:	52                   	push   edx
c00201f5:	50                   	push   eax
c00201f6:	e8 8b f9 ff ff       	call   c001fb86 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201fb:	83 c4 1c             	add    esp,0x1c
c00201fe:	52                   	push   edx
c00201ff:	50                   	push   eax
c0020200:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020204:	2d c0 00 00 00       	sub    eax,0xc0
c0020209:	e9 9e 01 00 00       	jmp    c00203ac <Vm::x87Handler(regs*)+0x65f>
c002020e:	8d 50 20             	lea    edx,[eax+0x20]
c0020211:	80 fa 07             	cmp    dl,0x7
c0020214:	77 3a                	ja     c0020250 <Vm::x87Handler(regs*)+0x503>
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	2d e0 00 00 00       	sub    eax,0xe0
c002021e:	50                   	push   eax
c002021f:	e8 ec f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020224:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002022b:	89 c6                	mov    esi,eax
c002022d:	89 d7                	mov    edi,edx
c002022f:	e8 dc f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020234:	57                   	push   edi
c0020235:	56                   	push   esi
c0020236:	52                   	push   edx
c0020237:	50                   	push   eax
c0020238:	e8 73 f9 ff ff       	call   c001fbb0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002023d:	83 c4 1c             	add    esp,0x1c
c0020240:	52                   	push   edx
c0020241:	50                   	push   eax
c0020242:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020246:	2d e0 00 00 00       	sub    eax,0xe0
c002024b:	e9 5c 01 00 00       	jmp    c00203ac <Vm::x87Handler(regs*)+0x65f>
c0020250:	8d 50 18             	lea    edx,[eax+0x18]
c0020253:	80 fa 07             	cmp    dl,0x7
c0020256:	77 3b                	ja     c0020293 <Vm::x87Handler(regs*)+0x546>
c0020258:	83 ec 0c             	sub    esp,0xc
c002025b:	6a 00                	push   0x0
c002025d:	e8 ae f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020262:	89 c6                	mov    esi,eax
c0020264:	89 d7                	mov    edi,edx
c0020266:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002026a:	2d e8 00 00 00       	sub    eax,0xe8
c002026f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020272:	e8 99 f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020277:	57                   	push   edi
c0020278:	56                   	push   esi
c0020279:	52                   	push   edx
c002027a:	50                   	push   eax
c002027b:	e8 30 f9 ff ff       	call   c001fbb0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020280:	83 c4 1c             	add    esp,0x1c
c0020283:	52                   	push   edx
c0020284:	50                   	push   eax
c0020285:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020289:	2d e8 00 00 00       	sub    eax,0xe8
c002028e:	e9 19 01 00 00       	jmp    c00203ac <Vm::x87Handler(regs*)+0x65f>
c0020293:	8d 50 38             	lea    edx,[eax+0x38]
c0020296:	80 fa 07             	cmp    dl,0x7
c0020299:	77 37                	ja     c00202d2 <Vm::x87Handler(regs*)+0x585>
c002029b:	83 ec 0c             	sub    esp,0xc
c002029e:	2d c8 00 00 00       	sub    eax,0xc8
c00202a3:	50                   	push   eax
c00202a4:	e8 67 f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00202a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202b0:	89 c6                	mov    esi,eax
c00202b2:	89 d7                	mov    edi,edx
c00202b4:	e8 57 f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00202b9:	57                   	push   edi
c00202ba:	56                   	push   esi
c00202bb:	52                   	push   edx
c00202bc:	50                   	push   eax
c00202bd:	e8 fd f8 ff ff       	call   c001fbbf <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00202c2:	83 c4 1c             	add    esp,0x1c
c00202c5:	52                   	push   edx
c00202c6:	50                   	push   eax
c00202c7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202cb:	2d c8 00 00 00       	sub    eax,0xc8
c00202d0:	eb 7d                	jmp    c002034f <Vm::x87Handler(regs*)+0x602>
c00202d2:	3c f7                	cmp    al,0xf7
c00202d4:	76 38                	jbe    c002030e <Vm::x87Handler(regs*)+0x5c1>
c00202d6:	83 ec 0c             	sub    esp,0xc
c00202d9:	6a 00                	push   0x0
c00202db:	e8 30 f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00202e0:	89 c6                	mov    esi,eax
c00202e2:	89 d7                	mov    edi,edx
c00202e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202e8:	2d f8 00 00 00       	sub    eax,0xf8
c00202ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00202f0:	e8 1b f9 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00202f5:	57                   	push   edi
c00202f6:	56                   	push   esi
c00202f7:	52                   	push   edx
c00202f8:	50                   	push   eax
c00202f9:	e8 e0 f8 ff ff       	call   c001fbde <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202fe:	83 c4 1c             	add    esp,0x1c
c0020301:	52                   	push   edx
c0020302:	50                   	push   eax
c0020303:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020307:	2d f8 00 00 00       	sub    eax,0xf8
c002030c:	eb 41                	jmp    c002034f <Vm::x87Handler(regs*)+0x602>
c002030e:	8d 50 10             	lea    edx,[eax+0x10]
c0020311:	80 fa 07             	cmp    dl,0x7
c0020314:	0f 87 5a 01 00 00    	ja     c0020474 <Vm::x87Handler(regs*)+0x727>
c002031a:	83 ec 0c             	sub    esp,0xc
c002031d:	2d f0 00 00 00       	sub    eax,0xf0
c0020322:	50                   	push   eax
c0020323:	e8 e8 f8 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020328:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002032f:	89 c6                	mov    esi,eax
c0020331:	89 d7                	mov    edi,edx
c0020333:	e8 d8 f8 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020338:	57                   	push   edi
c0020339:	56                   	push   esi
c002033a:	52                   	push   edx
c002033b:	50                   	push   eax
c002033c:	e8 9d f8 ff ff       	call   c001fbde <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020341:	83 c4 1c             	add    esp,0x1c
c0020344:	52                   	push   edx
c0020345:	50                   	push   eax
c0020346:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002034a:	2d f0 00 00 00       	sub    eax,0xf0
c002034f:	50                   	push   eax
c0020350:	e8 fe f8 ff ff       	call   c001fc53 <Vm::fpuSetReg(int, unsigned long long)>
c0020355:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020359:	e8 9d f9 ff ff       	call   c001fcfb <Vm::fpuPop()>
c002035e:	e9 5e fa ff ff       	jmp    c001fdc1 <Vm::x87Handler(regs*)+0x74>
c0020363:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020367:	8d 50 30             	lea    edx,[eax+0x30]
c002036a:	80 fa 07             	cmp    dl,0x7
c002036d:	77 1d                	ja     c002038c <Vm::x87Handler(regs*)+0x63f>
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	6a 00                	push   0x0
c0020374:	e8 97 f8 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020379:	83 c4 0c             	add    esp,0xc
c002037c:	52                   	push   edx
c002037d:	50                   	push   eax
c002037e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020382:	2d d0 00 00 00       	sub    eax,0xd0
c0020387:	e9 f3 fd ff ff       	jmp    c002017f <Vm::x87Handler(regs*)+0x432>
c002038c:	8d 50 28             	lea    edx,[eax+0x28]
c002038f:	80 fa 07             	cmp    dl,0x7
c0020392:	77 28                	ja     c00203bc <Vm::x87Handler(regs*)+0x66f>
c0020394:	83 ec 0c             	sub    esp,0xc
c0020397:	6a 00                	push   0x0
c0020399:	e8 72 f8 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002039e:	83 c4 0c             	add    esp,0xc
c00203a1:	52                   	push   edx
c00203a2:	50                   	push   eax
c00203a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203a7:	2d d8 00 00 00       	sub    eax,0xd8
c00203ac:	50                   	push   eax
c00203ad:	e8 a1 f8 ff ff       	call   c001fc53 <Vm::fpuSetReg(int, unsigned long long)>
c00203b2:	e8 44 f9 ff ff       	call   c001fcfb <Vm::fpuPop()>
c00203b7:	e9 01 fa ff ff       	jmp    c001fdbd <Vm::x87Handler(regs*)+0x70>
c00203bc:	8d 50 20             	lea    edx,[eax+0x20]
c00203bf:	80 fa 07             	cmp    dl,0x7
c00203c2:	77 30                	ja     c00203f4 <Vm::x87Handler(regs*)+0x6a7>
c00203c4:	83 ec 0c             	sub    esp,0xc
c00203c7:	2d e0 00 00 00       	sub    eax,0xe0
c00203cc:	50                   	push   eax
c00203cd:	e8 3e f8 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00203d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203d9:	89 c6                	mov    esi,eax
c00203db:	89 d7                	mov    edi,edx
c00203dd:	e8 2e f8 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00203e2:	57                   	push   edi
c00203e3:	56                   	push   esi
c00203e4:	52                   	push   edx
c00203e5:	50                   	push   eax
c00203e6:	e8 48 f7 ff ff       	call   c001fb33 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203eb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00203ef:	e9 54 02 00 00       	jmp    c0020648 <Vm::x87Handler(regs*)+0x8fb>
c00203f4:	8d 50 18             	lea    edx,[eax+0x18]
c00203f7:	80 fa 07             	cmp    dl,0x7
c00203fa:	0f 87 43 fb ff ff    	ja     c001ff43 <Vm::x87Handler(regs*)+0x1f6>
c0020400:	83 ec 0c             	sub    esp,0xc
c0020403:	2d e8 00 00 00       	sub    eax,0xe8
c0020408:	50                   	push   eax
c0020409:	e8 02 f8 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002040e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020415:	89 c6                	mov    esi,eax
c0020417:	89 d7                	mov    edi,edx
c0020419:	e8 f2 f7 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002041e:	57                   	push   edi
c002041f:	56                   	push   esi
c0020420:	52                   	push   edx
c0020421:	50                   	push   eax
c0020422:	e8 0c f7 ff ff       	call   c001fb33 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020427:	83 c4 20             	add    esp,0x20
c002042a:	e8 cc f8 ff ff       	call   c001fcfb <Vm::fpuPop()>
c002042f:	eb 62                	jmp    c0020493 <Vm::x87Handler(regs*)+0x746>
c0020431:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020435:	0f 85 0f 01 00 00    	jne    c002054a <Vm::x87Handler(regs*)+0x7fd>
c002043b:	83 ec 0c             	sub    esp,0xc
c002043e:	6a 01                	push   0x1
c0020440:	e8 cb f7 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020445:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002044c:	89 c6                	mov    esi,eax
c002044e:	89 d7                	mov    edi,edx
c0020450:	e8 bb f7 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020455:	57                   	push   edi
c0020456:	56                   	push   esi
c0020457:	52                   	push   edx
c0020458:	50                   	push   eax
c0020459:	e8 d5 f6 ff ff       	call   c001fb33 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002045e:	83 c4 20             	add    esp,0x20
c0020461:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020465:	e8 91 f8 ff ff       	call   c001fcfb <Vm::fpuPop()>
c002046a:	e8 8c f8 ff ff       	call   c001fcfb <Vm::fpuPop()>
c002046f:	e9 50 f9 ff ff       	jmp    c001fdc4 <Vm::x87Handler(regs*)+0x77>
c0020474:	3c d9                	cmp    al,0xd9
c0020476:	0f 85 b5 02 00 00    	jne    c0020731 <Vm::x87Handler(regs*)+0x9e4>
c002047c:	eb bd                	jmp    c002043b <Vm::x87Handler(regs*)+0x6ee>
c002047e:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020482:	0f 85 ea 02 00 00    	jne    c0020772 <Vm::x87Handler(regs*)+0xa25>
c0020488:	0f b7 05 a0 26 03 c0 	movzx  eax,WORD PTR ds:0xc00326a0
c002048f:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020493:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020497:	e9 28 f9 ff ff       	jmp    c001fdc4 <Vm::x87Handler(regs*)+0x77>
c002049c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204a0:	84 d2                	test   dl,dl
c00204a2:	75 0f                	jne    c00204b3 <Vm::x87Handler(regs*)+0x766>
c00204a4:	83 ec 0c             	sub    esp,0xc
c00204a7:	ff 36                	push   DWORD PTR [esi]
c00204a9:	e8 b1 f4 ff ff       	call   c001f95f <Vm::fpu32ToInternal(unsigned int)>
c00204ae:	e9 2c 01 00 00       	jmp    c00205df <Vm::x87Handler(regs*)+0x892>
c00204b3:	80 fa 01             	cmp    dl,0x1
c00204b6:	75 0f                	jne    c00204c7 <Vm::x87Handler(regs*)+0x77a>
c00204b8:	83 ec 0c             	sub    esp,0xc
c00204bb:	ff 36                	push   DWORD PTR [esi]
c00204bd:	e8 9d f4 ff ff       	call   c001f95f <Vm::fpu32ToInternal(unsigned int)>
c00204c2:	e9 81 02 00 00       	jmp    c0020748 <Vm::x87Handler(regs*)+0x9fb>
c00204c7:	80 fa 04             	cmp    dl,0x4
c00204ca:	75 0f                	jne    c00204db <Vm::x87Handler(regs*)+0x78e>
c00204cc:	83 ec 0c             	sub    esp,0xc
c00204cf:	ff 36                	push   DWORD PTR [esi]
c00204d1:	e8 89 f4 ff ff       	call   c001f95f <Vm::fpu32ToInternal(unsigned int)>
c00204d6:	e9 86 01 00 00       	jmp    c0020661 <Vm::x87Handler(regs*)+0x914>
c00204db:	80 fa 05             	cmp    dl,0x5
c00204de:	75 1b                	jne    c00204fb <Vm::x87Handler(regs*)+0x7ae>
c00204e0:	83 ec 0c             	sub    esp,0xc
c00204e3:	6a 00                	push   0x0
c00204e5:	e8 26 f7 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00204ea:	89 c7                	mov    edi,eax
c00204ec:	89 d5                	mov    ebp,edx
c00204ee:	58                   	pop    eax
c00204ef:	ff 36                	push   DWORD PTR [esi]
c00204f1:	e8 69 f4 ff ff       	call   c001f95f <Vm::fpu32ToInternal(unsigned int)>
c00204f6:	e9 a3 01 00 00       	jmp    c002069e <Vm::x87Handler(regs*)+0x951>
c00204fb:	80 fa 06             	cmp    dl,0x6
c00204fe:	75 0f                	jne    c002050f <Vm::x87Handler(regs*)+0x7c2>
c0020500:	83 ec 0c             	sub    esp,0xc
c0020503:	ff 36                	push   DWORD PTR [esi]
c0020505:	e8 55 f4 ff ff       	call   c001f95f <Vm::fpu32ToInternal(unsigned int)>
c002050a:	e9 ae 01 00 00       	jmp    c00206bd <Vm::x87Handler(regs*)+0x970>
c002050f:	31 c0                	xor    eax,eax
c0020511:	80 fa 07             	cmp    dl,0x7
c0020514:	0f 85 94 02 00 00    	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c002051a:	83 ec 0c             	sub    esp,0xc
c002051d:	6a 00                	push   0x0
c002051f:	e8 ec f6 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020524:	89 c7                	mov    edi,eax
c0020526:	89 d5                	mov    ebp,edx
c0020528:	58                   	pop    eax
c0020529:	ff 36                	push   DWORD PTR [esi]
c002052b:	e8 2f f4 ff ff       	call   c001f95f <Vm::fpu32ToInternal(unsigned int)>
c0020530:	e9 cb 01 00 00       	jmp    c0020700 <Vm::x87Handler(regs*)+0x9b3>
c0020535:	80 fa 03             	cmp    dl,0x3
c0020538:	0f 85 d3 01 00 00    	jne    c0020711 <Vm::x87Handler(regs*)+0x9c4>
c002053e:	e8 b8 f7 ff ff       	call   c001fcfb <Vm::fpuPop()>
c0020543:	51                   	push   ecx
c0020544:	51                   	push   ecx
c0020545:	e9 de 01 00 00       	jmp    c0020728 <Vm::x87Handler(regs*)+0x9db>
c002054a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002054e:	80 fa 01             	cmp    dl,0x1
c0020551:	75 09                	jne    c002055c <Vm::x87Handler(regs*)+0x80f>
c0020553:	57                   	push   edi
c0020554:	57                   	push   edi
c0020555:	8b 06                	mov    eax,DWORD PTR [esi]
c0020557:	e9 e3 01 00 00       	jmp    c002073f <Vm::x87Handler(regs*)+0x9f2>
c002055c:	80 fa 04             	cmp    dl,0x4
c002055f:	75 12                	jne    c0020573 <Vm::x87Handler(regs*)+0x826>
c0020561:	31 d2                	xor    edx,edx
c0020563:	51                   	push   ecx
c0020564:	51                   	push   ecx
c0020565:	8b 06                	mov    eax,DWORD PTR [esi]
c0020567:	52                   	push   edx
c0020568:	50                   	push   eax
c0020569:	e8 d0 f4 ff ff       	call   c001fa3e <Vm::fpuLongToFloat(long long)>
c002056e:	e9 ee 00 00 00       	jmp    c0020661 <Vm::x87Handler(regs*)+0x914>
c0020573:	31 c0                	xor    eax,eax
c0020575:	80 fa 07             	cmp    dl,0x7
c0020578:	0f 85 30 02 00 00    	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c002057e:	83 ec 0c             	sub    esp,0xc
c0020581:	6a 00                	push   0x0
c0020583:	e8 88 f6 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020588:	89 c7                	mov    edi,eax
c002058a:	89 d5                	mov    ebp,edx
c002058c:	58                   	pop    eax
c002058d:	8b 06                	mov    eax,DWORD PTR [esi]
c002058f:	5a                   	pop    edx
c0020590:	31 d2                	xor    edx,edx
c0020592:	52                   	push   edx
c0020593:	50                   	push   eax
c0020594:	e8 a5 f4 ff ff       	call   c001fa3e <Vm::fpuLongToFloat(long long)>
c0020599:	e9 62 01 00 00       	jmp    c0020700 <Vm::x87Handler(regs*)+0x9b3>
c002059e:	84 d2                	test   dl,dl
c00205a0:	75 0d                	jne    c00205af <Vm::x87Handler(regs*)+0x862>
c00205a2:	31 d2                	xor    edx,edx
c00205a4:	55                   	push   ebp
c00205a5:	55                   	push   ebp
c00205a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00205a8:	52                   	push   edx
c00205a9:	50                   	push   eax
c00205aa:	e9 d3 01 00 00       	jmp    c0020782 <Vm::x87Handler(regs*)+0xa35>
c00205af:	31 c0                	xor    eax,eax
c00205b1:	80 fa 02             	cmp    dl,0x2
c00205b4:	0f 85 f4 01 00 00    	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	6a 00                	push   0x0
c00205bf:	e8 4c f6 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00205c4:	59                   	pop    ecx
c00205c5:	5f                   	pop    edi
c00205c6:	e9 6a f9 ff ff       	jmp    c001ff35 <Vm::x87Handler(regs*)+0x1e8>
c00205cb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00205cf:	84 d2                	test   dl,dl
c00205d1:	75 2a                	jne    c00205fd <Vm::x87Handler(regs*)+0x8b0>
c00205d3:	50                   	push   eax
c00205d4:	50                   	push   eax
c00205d5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205d8:	ff 36                	push   DWORD PTR [esi]
c00205da:	e8 c5 f3 ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c00205df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205e6:	89 c6                	mov    esi,eax
c00205e8:	89 d7                	mov    edi,edx
c00205ea:	e8 21 f6 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00205ef:	57                   	push   edi
c00205f0:	56                   	push   esi
c00205f1:	52                   	push   edx
c00205f2:	50                   	push   eax
c00205f3:	e8 8e f5 ff ff       	call   c001fb86 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00205f8:	e9 64 01 00 00       	jmp    c0020761 <Vm::x87Handler(regs*)+0xa14>
c00205fd:	80 fa 01             	cmp    dl,0x1
c0020600:	75 11                	jne    c0020613 <Vm::x87Handler(regs*)+0x8c6>
c0020602:	50                   	push   eax
c0020603:	50                   	push   eax
c0020604:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020607:	ff 36                	push   DWORD PTR [esi]
c0020609:	e8 96 f3 ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c002060e:	e9 35 01 00 00       	jmp    c0020748 <Vm::x87Handler(regs*)+0x9fb>
c0020613:	80 fa 02             	cmp    dl,0x2
c0020616:	0f 85 54 f9 ff ff    	jne    c001ff70 <Vm::x87Handler(regs*)+0x223>
c002061c:	55                   	push   ebp
c002061d:	55                   	push   ebp
c002061e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020621:	ff 36                	push   DWORD PTR [esi]
c0020623:	e8 7c f3 ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c0020628:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002062f:	89 c6                	mov    esi,eax
c0020631:	89 d7                	mov    edi,edx
c0020633:	e8 d8 f5 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020638:	57                   	push   edi
c0020639:	56                   	push   esi
c002063a:	52                   	push   edx
c002063b:	50                   	push   eax
c002063c:	e8 f2 f4 ff ff       	call   c001fb33 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020645:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020648:	83 c4 20             	add    esp,0x20
c002064b:	e9 74 f7 ff ff       	jmp    c001fdc4 <Vm::x87Handler(regs*)+0x77>
c0020650:	80 fa 04             	cmp    dl,0x4
c0020653:	75 2a                	jne    c002067f <Vm::x87Handler(regs*)+0x932>
c0020655:	51                   	push   ecx
c0020656:	51                   	push   ecx
c0020657:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002065a:	ff 36                	push   DWORD PTR [esi]
c002065c:	e8 43 f3 ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c0020661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020668:	89 c6                	mov    esi,eax
c002066a:	89 d7                	mov    edi,edx
c002066c:	e8 9f f5 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020671:	57                   	push   edi
c0020672:	56                   	push   esi
c0020673:	52                   	push   edx
c0020674:	50                   	push   eax
c0020675:	e8 36 f5 ff ff       	call   c001fbb0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002067a:	e9 e2 00 00 00       	jmp    c0020761 <Vm::x87Handler(regs*)+0xa14>
c002067f:	80 fa 05             	cmp    dl,0x5
c0020682:	75 28                	jne    c00206ac <Vm::x87Handler(regs*)+0x95f>
c0020684:	83 ec 0c             	sub    esp,0xc
c0020687:	6a 00                	push   0x0
c0020689:	e8 82 f5 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c002068e:	89 c7                	mov    edi,eax
c0020690:	89 d5                	mov    ebp,edx
c0020692:	58                   	pop    eax
c0020693:	5a                   	pop    edx
c0020694:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020697:	ff 36                	push   DWORD PTR [esi]
c0020699:	e8 06 f3 ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c002069e:	83 c4 10             	add    esp,0x10
c00206a1:	55                   	push   ebp
c00206a2:	57                   	push   edi
c00206a3:	52                   	push   edx
c00206a4:	50                   	push   eax
c00206a5:	e8 06 f5 ff ff       	call   c001fbb0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00206aa:	eb 60                	jmp    c002070c <Vm::x87Handler(regs*)+0x9bf>
c00206ac:	80 fa 06             	cmp    dl,0x6
c00206af:	75 2a                	jne    c00206db <Vm::x87Handler(regs*)+0x98e>
c00206b1:	51                   	push   ecx
c00206b2:	51                   	push   ecx
c00206b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00206b6:	ff 36                	push   DWORD PTR [esi]
c00206b8:	e8 e7 f2 ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c00206bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206c4:	89 c6                	mov    esi,eax
c00206c6:	89 d7                	mov    edi,edx
c00206c8:	e8 43 f5 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00206cd:	57                   	push   edi
c00206ce:	56                   	push   esi
c00206cf:	52                   	push   edx
c00206d0:	50                   	push   eax
c00206d1:	e8 08 f5 ff ff       	call   c001fbde <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206d6:	e9 86 00 00 00       	jmp    c0020761 <Vm::x87Handler(regs*)+0xa14>
c00206db:	31 c0                	xor    eax,eax
c00206dd:	80 fa 07             	cmp    dl,0x7
c00206e0:	0f 85 c8 00 00 00    	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c00206e6:	83 ec 0c             	sub    esp,0xc
c00206e9:	6a 00                	push   0x0
c00206eb:	e8 20 f5 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c00206f0:	89 c7                	mov    edi,eax
c00206f2:	89 d5                	mov    ebp,edx
c00206f4:	58                   	pop    eax
c00206f5:	5a                   	pop    edx
c00206f6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00206f9:	ff 36                	push   DWORD PTR [esi]
c00206fb:	e8 a4 f2 ff ff       	call   c001f9a4 <Vm::fpu64ToInternal(unsigned long long)>
c0020700:	83 c4 10             	add    esp,0x10
c0020703:	55                   	push   ebp
c0020704:	57                   	push   edi
c0020705:	52                   	push   edx
c0020706:	50                   	push   eax
c0020707:	e8 d2 f4 ff ff       	call   c001fbde <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002070c:	83 c4 0c             	add    esp,0xc
c002070f:	eb 53                	jmp    c0020764 <Vm::x87Handler(regs*)+0xa17>
c0020711:	31 c0                	xor    eax,eax
c0020713:	80 fa 02             	cmp    dl,0x2
c0020716:	0f 85 92 00 00 00    	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c002071c:	83 ec 0c             	sub    esp,0xc
c002071f:	6a 00                	push   0x0
c0020721:	e8 ea f4 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020726:	59                   	pop    ecx
c0020727:	5f                   	pop    edi
c0020728:	52                   	push   edx
c0020729:	50                   	push   eax
c002072a:	e8 27 f2 ff ff       	call   c001f956 <Vm::fpuInternalTo64(unsigned long long)>
c002072f:	eb 70                	jmp    c00207a1 <Vm::x87Handler(regs*)+0xa54>
c0020731:	31 c0                	xor    eax,eax
c0020733:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020738:	75 74                	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c002073a:	50                   	push   eax
c002073b:	50                   	push   eax
c002073c:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002073f:	31 d2                	xor    edx,edx
c0020741:	52                   	push   edx
c0020742:	50                   	push   eax
c0020743:	e8 f6 f2 ff ff       	call   c001fa3e <Vm::fpuLongToFloat(long long)>
c0020748:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002074f:	89 c6                	mov    esi,eax
c0020751:	89 d7                	mov    edi,edx
c0020753:	e8 b8 f4 ff ff       	call   c001fc10 <Vm::fpuGetReg(int)>
c0020758:	57                   	push   edi
c0020759:	56                   	push   esi
c002075a:	52                   	push   edx
c002075b:	50                   	push   eax
c002075c:	e8 5e f4 ff ff       	call   c001fbbf <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020761:	83 c4 1c             	add    esp,0x1c
c0020764:	52                   	push   edx
c0020765:	50                   	push   eax
c0020766:	6a 00                	push   0x0
c0020768:	e8 e6 f4 ff ff       	call   c001fc53 <Vm::fpuSetReg(int, unsigned long long)>
c002076d:	e9 f2 f7 ff ff       	jmp    c001ff64 <Vm::x87Handler(regs*)+0x217>
c0020772:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020776:	80 fa 05             	cmp    dl,0x5
c0020779:	75 11                	jne    c002078c <Vm::x87Handler(regs*)+0xa3f>
c002077b:	55                   	push   ebp
c002077c:	55                   	push   ebp
c002077d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020780:	ff 36                	push   DWORD PTR [esi]
c0020782:	e8 81 f2 ff ff       	call   c001fa08 <Vm::fpuULongToFloat(unsigned long long)>
c0020787:	e9 cf f7 ff ff       	jmp    c001ff5b <Vm::x87Handler(regs*)+0x20e>
c002078c:	31 c0                	xor    eax,eax
c002078e:	80 fa 07             	cmp    dl,0x7
c0020791:	75 1b                	jne    c00207ae <Vm::x87Handler(regs*)+0xa61>
c0020793:	e8 63 f5 ff ff       	call   c001fcfb <Vm::fpuPop()>
c0020798:	51                   	push   ecx
c0020799:	51                   	push   ecx
c002079a:	52                   	push   edx
c002079b:	50                   	push   eax
c002079c:	e8 0c f2 ff ff       	call   c001f9ad <Vm::fpuFloatToLong(unsigned long long)>
c00207a1:	83 c4 10             	add    esp,0x10
c00207a4:	89 06                	mov    DWORD PTR [esi],eax
c00207a6:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00207a9:	e9 f8 f7 ff ff       	jmp    c001ffa6 <Vm::x87Handler(regs*)+0x259>
c00207ae:	83 c4 1c             	add    esp,0x1c
c00207b1:	5b                   	pop    ebx
c00207b2:	5e                   	pop    esi
c00207b3:	5f                   	pop    edi
c00207b4:	5d                   	pop    ebp
c00207b5:	c3                   	ret    

c00207b6 <__static_initialization_and_destruction_0(int, int)>:
c00207b6:	83 ec 0c             	sub    esp,0xc
c00207b9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00207be:	75 1a                	jne    c00207da <__static_initialization_and_destruction_0(int, int)+0x24>
c00207c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00207c8:	75 10                	jne    c00207da <__static_initialization_and_destruction_0(int, int)+0x24>
c00207ca:	83 ec 0c             	sub    esp,0xc
c00207cd:	68 a0 26 03 c0       	push   0xc00326a0
c00207d2:	e8 a5 90 00 00       	call   c002987c <Vm::_FPUState::_FPUState()>
c00207d7:	83 c4 10             	add    esp,0x10
c00207da:	90                   	nop
c00207db:	83 c4 0c             	add    esp,0xc
c00207de:	c3                   	ret    

c00207df <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00207df:	83 ec 0c             	sub    esp,0xc
c00207e2:	83 ec 08             	sub    esp,0x8
c00207e5:	68 ff ff 00 00       	push   0xffff
c00207ea:	6a 01                	push   0x1
c00207ec:	e8 c5 ff ff ff       	call   c00207b6 <__static_initialization_and_destruction_0(int, int)>
c00207f1:	83 c4 10             	add    esp,0x10
c00207f4:	83 c4 0c             	add    esp,0xc
c00207f7:	c3                   	ret    

c00207f8 <FAT::getName()>:
c00207f8:	b8 08 d3 02 c0       	mov    eax,0xc002d308
c00207fd:	c3                   	ret    

c00207fe <FAT::tell(void*, unsigned long long*)>:
c00207fe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020803:	75 06                	jne    c002080b <FAT::tell(void*, unsigned long long*)+0xd>
c0020805:	b8 04 00 00 00       	mov    eax,0x4
c002080a:	c3                   	ret    
c002080b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020810:	75 06                	jne    c0020818 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020812:	b8 04 00 00 00       	mov    eax,0x4
c0020817:	c3                   	ret    
c0020818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002081c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002081f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020822:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020826:	89 01                	mov    DWORD PTR [ecx],eax
c0020828:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002082b:	b8 00 00 00 00       	mov    eax,0x0
c0020830:	c3                   	ret    
c0020831:	90                   	nop

c0020832 <FAT::stat(void*, unsigned long long*)>:
c0020832:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020837:	75 06                	jne    c002083f <FAT::stat(void*, unsigned long long*)+0xd>
c0020839:	b8 04 00 00 00       	mov    eax,0x4
c002083e:	c3                   	ret    
c002083f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020844:	75 06                	jne    c002084c <FAT::stat(void*, unsigned long long*)+0x1a>
c0020846:	b8 04 00 00 00       	mov    eax,0x4
c002084b:	c3                   	ret    
c002084c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020850:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020853:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002085a:	89 01                	mov    DWORD PTR [ecx],eax
c002085c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002085f:	b8 00 00 00 00       	mov    eax,0x0
c0020864:	c3                   	ret    
c0020865:	90                   	nop

c0020866 <FAT::~FAT()>:
c0020866:	83 ec 0c             	sub    esp,0xc
c0020869:	ba 98 d3 02 c0       	mov    edx,0xc002d398
c002086e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020872:	89 10                	mov    DWORD PTR [eax],edx
c0020874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020878:	83 ec 0c             	sub    esp,0xc
c002087b:	50                   	push   eax
c002087c:	e8 4b 25 ff ff       	call   c0012dcc <Filesystem::~Filesystem()>
c0020881:	83 c4 10             	add    esp,0x10
c0020884:	90                   	nop
c0020885:	83 c4 0c             	add    esp,0xc
c0020888:	c3                   	ret    
c0020889:	90                   	nop

c002088a <FAT::~FAT()>:
c002088a:	83 ec 0c             	sub    esp,0xc
c002088d:	83 ec 0c             	sub    esp,0xc
c0020890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020894:	e8 cd ff ff ff       	call   c0020866 <FAT::~FAT()>
c0020899:	83 c4 10             	add    esp,0x10
c002089c:	83 ec 08             	sub    esp,0x8
c002089f:	6a 08                	push   0x8
c00208a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208a5:	e8 13 21 ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00208aa:	83 c4 10             	add    esp,0x10
c00208ad:	83 c4 0c             	add    esp,0xc
c00208b0:	c3                   	ret    
c00208b1:	90                   	nop

c00208b2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00208b2:	83 ec 1c             	sub    esp,0x1c
c00208b5:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00208bc:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00208c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00208c5:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c00208cc:	83 f8 ff             	cmp    eax,0xffffffff
c00208cf:	75 34                	jne    c0020905 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00208d1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00208d5:	88 c2                	mov    dl,al
c00208d7:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c00208dc:	01 d0                	add    eax,edx
c00208de:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00208e2:	8b 15 00 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032700
c00208e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00208ec:	89 14 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],edx
c00208f3:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c00208f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00208fc:	89 14 85 a0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd860],edx
c0020903:	eb 17                	jmp    c002091c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020905:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020909:	88 c2                	mov    dl,al
c002090b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002090f:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c0020916:	01 d0                	add    eax,edx
c0020918:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002091c:	83 ec 04             	sub    esp,0x4
c002091f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020927:	8d 44 24 15          	lea    eax,[esp+0x15]
c002092b:	50                   	push   eax
c002092c:	e8 cd 63 fe ff       	call   c0006cfe <f_getlabel>
c0020931:	83 c4 10             	add    esp,0x10
c0020934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020938:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002093d:	75 07                	jne    c0020946 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002093f:	b8 00 00 00 00       	mov    eax,0x0
c0020944:	eb 05                	jmp    c002094b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020946:	b8 01 00 00 00       	mov    eax,0x1
c002094b:	83 c4 1c             	add    esp,0x1c
c002094e:	c3                   	ret    
c002094f:	90                   	nop

c0020950 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020950:	57                   	push   edi
c0020951:	83 ec 58             	sub    esp,0x58
c0020954:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002095c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020960:	b9 0f 00 00 00       	mov    ecx,0xf
c0020965:	b8 00 00 00 00       	mov    eax,0x0
c002096a:	fc                   	cld    
c002096b:	89 d7                	mov    edi,edx
c002096d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002096f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020973:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c002097a:	83 f8 ff             	cmp    eax,0xffffffff
c002097d:	75 34                	jne    c00209b3 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002097f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020983:	88 c2                	mov    dl,al
c0020985:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c002098a:	01 d0                	add    eax,edx
c002098c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020990:	8b 15 00 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032700
c0020996:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002099a:	89 14 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],edx
c00209a1:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c00209a6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00209aa:	89 14 85 a0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd860],edx
c00209b1:	eb 17                	jmp    c00209ca <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00209b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00209b7:	88 c2                	mov    dl,al
c00209b9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00209bd:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c00209c4:	01 d0                	add    eax,edx
c00209c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00209ca:	83 ec 08             	sub    esp,0x8
c00209cd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00209d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209d5:	50                   	push   eax
c00209d6:	e8 71 ff fd ff       	call   c000094c <strcat>
c00209db:	83 c4 10             	add    esp,0x10
c00209de:	83 ec 0c             	sub    esp,0xc
c00209e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209e5:	50                   	push   eax
c00209e6:	e8 01 65 fe ff       	call   c0006eec <f_setlabel>
c00209eb:	83 c4 10             	add    esp,0x10
c00209ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00209f2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00209f7:	75 07                	jne    c0020a00 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00209f9:	b8 00 00 00 00       	mov    eax,0x0
c00209fe:	eb 05                	jmp    c0020a05 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020a00:	b8 01 00 00 00       	mov    eax,0x1
c0020a05:	83 c4 58             	add    esp,0x58
c0020a08:	5f                   	pop    edi
c0020a09:	c3                   	ret    

c0020a0a <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020a0a:	83 ec 2c             	sub    esp,0x2c
c0020a0d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020a15:	83 ec 08             	sub    esp,0x8
c0020a18:	68 2c d3 02 c0       	push   0xc002d32c
c0020a1d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020a21:	e8 72 fe fd ff       	call   c0000898 <strcmp>
c0020a26:	83 c4 10             	add    esp,0x10
c0020a29:	85 c0                	test   eax,eax
c0020a2b:	0f 94 c0             	sete   al
c0020a2e:	84 c0                	test   al,al
c0020a30:	74 0d                	je     c0020a3f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020a32:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020a3a:	e9 a6 00 00 00       	jmp    c0020ae5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020a3f:	83 ec 08             	sub    esp,0x8
c0020a42:	68 1e d3 02 c0       	push   0xc002d31e
c0020a47:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020a4b:	e8 48 fe fd ff       	call   c0000898 <strcmp>
c0020a50:	83 c4 10             	add    esp,0x10
c0020a53:	85 c0                	test   eax,eax
c0020a55:	0f 94 c0             	sete   al
c0020a58:	84 c0                	test   al,al
c0020a5a:	74 0a                	je     c0020a66 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020a5c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020a64:	eb 7f                	jmp    c0020ae5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020a66:	83 ec 08             	sub    esp,0x8
c0020a69:	68 24 d3 02 c0       	push   0xc002d324
c0020a6e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020a72:	e8 21 fe fd ff       	call   c0000898 <strcmp>
c0020a77:	83 c4 10             	add    esp,0x10
c0020a7a:	85 c0                	test   eax,eax
c0020a7c:	0f 94 c0             	sete   al
c0020a7f:	84 c0                	test   al,al
c0020a81:	74 0a                	je     c0020a8d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020a83:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020a8b:	eb 58                	jmp    c0020ae5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020a8d:	83 ec 08             	sub    esp,0x8
c0020a90:	68 ec 9f 02 c0       	push   0xc0029fec
c0020a95:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020a99:	e8 fa fd fd ff       	call   c0000898 <strcmp>
c0020a9e:	83 c4 10             	add    esp,0x10
c0020aa1:	85 c0                	test   eax,eax
c0020aa3:	0f 94 c0             	sete   al
c0020aa6:	84 c0                	test   al,al
c0020aa8:	74 0a                	je     c0020ab4 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020aaa:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020ab2:	eb 31                	jmp    c0020ae5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ab4:	83 ec 08             	sub    esp,0x8
c0020ab7:	68 2a d3 02 c0       	push   0xc002d32a
c0020abc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ac0:	e8 d3 fd fd ff       	call   c0000898 <strcmp>
c0020ac5:	83 c4 10             	add    esp,0x10
c0020ac8:	85 c0                	test   eax,eax
c0020aca:	0f 94 c0             	sete   al
c0020acd:	84 c0                	test   al,al
c0020acf:	74 0a                	je     c0020adb <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020ad1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020ad9:	eb 0a                	jmp    c0020ae5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020adb:	b8 08 00 00 00       	mov    eax,0x8
c0020ae0:	e9 04 01 00 00       	jmp    c0020be9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ae5:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020aec:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020af1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020af5:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c0020afc:	83 f8 ff             	cmp    eax,0xffffffff
c0020aff:	75 34                	jne    c0020b35 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020b01:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020b05:	88 c2                	mov    dl,al
c0020b07:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0020b0c:	01 d0                	add    eax,edx
c0020b0e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020b12:	8b 15 00 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032700
c0020b18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b1c:	89 14 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],edx
c0020b23:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0020b28:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020b2c:	89 14 85 a0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd860],edx
c0020b33:	eb 17                	jmp    c0020b4c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020b35:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020b39:	88 c2                	mov    dl,al
c0020b3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b3f:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c0020b46:	01 d0                	add    eax,edx
c0020b48:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020b4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020b50:	88 04 24             	mov    BYTE PTR [esp],al
c0020b53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020b57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b5b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020b63:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020b68:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020b70:	83 ec 0c             	sub    esp,0xc
c0020b73:	68 00 20 00 00       	push   0x2000
c0020b78:	e8 0f ed fe ff       	call   c000f88c <malloc>
c0020b7d:	83 c4 10             	add    esp,0x10
c0020b80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b84:	68 00 20 00 00       	push   0x2000
c0020b89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b8d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b91:	50                   	push   eax
c0020b92:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020b96:	50                   	push   eax
c0020b97:	e8 9b 67 fe ff       	call   c0007337 <f_mkfs>
c0020b9c:	83 c4 10             	add    esp,0x10
c0020b9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ba3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ba8:	75 07                	jne    c0020bb1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020baa:	b8 00 00 00 00       	mov    eax,0x0
c0020baf:	eb 38                	jmp    c0020be9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020bb1:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020bb6:	75 17                	jne    c0020bcf <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020bb8:	83 ec 0c             	sub    esp,0xc
c0020bbb:	68 68 d3 02 c0       	push   0xc002d368
c0020bc0:	e8 d8 1e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0020bc5:	83 c4 10             	add    esp,0x10
c0020bc8:	b8 09 00 00 00       	mov    eax,0x9
c0020bcd:	eb 1a                	jmp    c0020be9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bd3:	83 ec 08             	sub    esp,0x8
c0020bd6:	50                   	push   eax
c0020bd7:	68 30 d3 02 c0       	push   0xc002d330
c0020bdc:	e8 bc 1e ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0020be1:	83 c4 10             	add    esp,0x10
c0020be4:	b8 01 00 00 00       	mov    eax,0x1
c0020be9:	83 c4 2c             	add    esp,0x2c
c0020bec:	c3                   	ret    
c0020bed:	90                   	nop

c0020bee <FAT::tryMount(LogicalDisk*, int)>:
c0020bee:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020bf4:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0020bf9:	83 f8 14             	cmp    eax,0x14
c0020bfc:	75 17                	jne    c0020c15 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020bfe:	83 ec 0c             	sub    esp,0xc
c0020c01:	68 42 d3 02 c0       	push   0xc002d342
c0020c06:	e8 c8 98 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0020c0b:	83 c4 10             	add    esp,0x10
c0020c0e:	b0 00                	mov    al,0x0
c0020c10:	e9 d7 01 00 00       	jmp    c0020dec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c15:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020c1c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020c22:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020c28:	3d 00 02 00 00       	cmp    eax,0x200
c0020c2d:	74 07                	je     c0020c36 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020c2f:	b0 00                	mov    al,0x0
c0020c31:	e9 b6 01 00 00       	jmp    c0020dec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c36:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020c3e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020c45:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c0020c4c:	83 f8 ff             	cmp    eax,0xffffffff
c0020c4f:	74 07                	je     c0020c58 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020c51:	b0 01                	mov    al,0x1
c0020c53:	e9 94 01 00 00       	jmp    c0020dec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c58:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020c62:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020c6a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020c71:	88 c2                	mov    dl,al
c0020c73:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0020c78:	01 d0                	add    eax,edx
c0020c7a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020c81:	8b 15 00 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032700
c0020c87:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020c8e:	89 14 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],edx
c0020c95:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0020c9a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020ca1:	89 14 85 a0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd860],edx
c0020ca8:	83 ec 0c             	sub    esp,0xc
c0020cab:	68 54 02 00 00       	push   0x254
c0020cb0:	e8 d7 eb fe ff       	call   c000f88c <malloc>
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020cbf:	83 ec 04             	sub    esp,0x4
c0020cc2:	6a 00                	push   0x0
c0020cc4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ccb:	50                   	push   eax
c0020ccc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020cd3:	e8 1d 42 fe ff       	call   c0004ef5 <f_mount>
c0020cd8:	83 c4 10             	add    esp,0x10
c0020cdb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ce2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020cea:	74 19                	je     c0020d05 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020cec:	83 ec 0c             	sub    esp,0xc
c0020cef:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020cf6:	e8 b1 eb fe ff       	call   c000f8ac <rfree>
c0020cfb:	83 c4 10             	add    esp,0x10
c0020cfe:	b0 00                	mov    al,0x0
c0020d00:	e9 e7 00 00 00       	jmp    c0020dec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020d05:	83 ec 04             	sub    esp,0x4
c0020d08:	68 00 01 00 00       	push   0x100
c0020d0d:	6a 00                	push   0x0
c0020d0f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020d16:	50                   	push   eax
c0020d17:	e8 34 fa fd ff       	call   c0000750 <memset>
c0020d1c:	83 c4 10             	add    esp,0x10
c0020d1f:	83 ec 08             	sub    esp,0x8
c0020d22:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020d29:	50                   	push   eax
c0020d2a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020d31:	50                   	push   eax
c0020d32:	e8 15 fc fd ff       	call   c000094c <strcat>
c0020d37:	83 c4 10             	add    esp,0x10
c0020d3a:	83 ec 08             	sub    esp,0x8
c0020d3d:	68 50 d3 02 c0       	push   0xc002d350
c0020d42:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020d49:	50                   	push   eax
c0020d4a:	e8 fd fb fd ff       	call   c000094c <strcat>
c0020d4f:	83 c4 10             	add    esp,0x10
c0020d52:	83 ec 04             	sub    esp,0x4
c0020d55:	6a 01                	push   0x1
c0020d57:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020d5e:	50                   	push   eax
c0020d5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020d63:	50                   	push   eax
c0020d64:	e8 ee 41 fe ff       	call   c0004f57 <f_open>
c0020d69:	83 c4 10             	add    esp,0x10
c0020d6c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020d73:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020d7a:	85 c0                	test   eax,eax
c0020d7c:	74 0a                	je     c0020d88 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020d7e:	78 2d                	js     c0020dad <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020d80:	83 e8 04             	sub    eax,0x4
c0020d83:	83 f8 01             	cmp    eax,0x1
c0020d86:	77 25                	ja     c0020dad <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020d88:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020d90:	83 ec 0c             	sub    esp,0xc
c0020d93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020d97:	50                   	push   eax
c0020d98:	e8 0c 4d fe ff       	call   c0005aa9 <f_close>
c0020d9d:	83 c4 10             	add    esp,0x10
c0020da0:	90                   	nop
c0020da1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020da9:	74 3a                	je     c0020de5 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020dab:	eb 2d                	jmp    c0020dda <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020dad:	83 ec 0c             	sub    esp,0xc
c0020db0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020db7:	e8 f0 ea fe ff       	call   c000f8ac <rfree>
c0020dbc:	83 c4 10             	add    esp,0x10
c0020dbf:	83 ec 04             	sub    esp,0x4
c0020dc2:	6a 00                	push   0x0
c0020dc4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020dcb:	50                   	push   eax
c0020dcc:	6a 00                	push   0x0
c0020dce:	e8 22 41 fe ff       	call   c0004ef5 <f_mount>
c0020dd3:	83 c4 10             	add    esp,0x10
c0020dd6:	b0 00                	mov    al,0x0
c0020dd8:	eb 12                	jmp    c0020dec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020dda:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0020ddf:	40                   	inc    eax
c0020de0:	a3 00 27 03 c0       	mov    ds:0xc0032700,eax
c0020de5:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020dec:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020df2:	c3                   	ret    
c0020df3:	90                   	nop

c0020df4 <FAT::getFileFirstSector(char const*)>:
c0020df4:	53                   	push   ebx
c0020df5:	83 ec 28             	sub    esp,0x28
c0020df8:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020e00:	83 ec 0c             	sub    esp,0xc
c0020e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e07:	e8 80 ea fe ff       	call   c000f88c <malloc>
c0020e0c:	83 c4 10             	add    esp,0x10
c0020e0f:	89 c3                	mov    ebx,eax
c0020e11:	a1 30 26 03 c0       	mov    eax,ds:0xc0032630
c0020e16:	83 ec 04             	sub    esp,0x4
c0020e19:	50                   	push   eax
c0020e1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020e1e:	53                   	push   ebx
c0020e1f:	e8 d8 21 ff ff       	call   c0012ffc <File::File(char const*, Process*)>
c0020e24:	83 c4 10             	add    esp,0x10
c0020e27:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020e2b:	83 ec 08             	sub    esp,0x8
c0020e2e:	6a 01                	push   0x1
c0020e30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020e34:	e8 27 22 ff ff       	call   c0013060 <File::open(FileOpenMode)>
c0020e39:	83 c4 10             	add    esp,0x10
c0020e3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e40:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e42:	83 c0 0c             	add    eax,0xc
c0020e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e47:	83 ec 0c             	sub    esp,0xc
c0020e4a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020e4e:	52                   	push   edx
c0020e4f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020e53:	52                   	push   edx
c0020e54:	6a 00                	push   0x0
c0020e56:	6a 04                	push   0x4
c0020e58:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020e5c:	ff d0                	call   eax
c0020e5e:	83 c4 20             	add    esp,0x20
c0020e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e65:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020e6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e73:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020e76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020e79:	83 ec 04             	sub    esp,0x4
c0020e7c:	52                   	push   edx
c0020e7d:	50                   	push   eax
c0020e7e:	68 5b d3 02 c0       	push   0xc002d35b
c0020e83:	e8 15 1c ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0020e88:	83 c4 10             	add    esp,0x10
c0020e8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e8f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020e92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020e95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e99:	83 ec 0c             	sub    esp,0xc
c0020e9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020ea0:	e8 19 22 ff ff       	call   c00130be <File::close()>
c0020ea5:	83 c4 10             	add    esp,0x10
c0020ea8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020eac:	ba 00 00 00 00       	mov    edx,0x0
c0020eb1:	83 c4 28             	add    esp,0x28
c0020eb4:	5b                   	pop    ebx
c0020eb5:	c3                   	ret    

c0020eb6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020eb6:	57                   	push   edi
c0020eb7:	56                   	push   esi
c0020eb8:	53                   	push   ebx
c0020eb9:	81 ec 50 02 00 00    	sub    esp,0x250
c0020ebf:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020ec7:	74 0a                	je     c0020ed3 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020ec9:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020ed1:	75 0a                	jne    c0020edd <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020ed3:	b8 04 00 00 00       	mov    eax,0x4
c0020ed8:	e9 29 01 00 00       	jmp    c0021006 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020edd:	83 ec 08             	sub    esp,0x8
c0020ee0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020ee7:	50                   	push   eax
c0020ee8:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020eef:	e8 bf 51 fe ff       	call   c00060b3 <f_readdir>
c0020ef4:	83 c4 10             	add    esp,0x10
c0020ef7:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020efe:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020f05:	83 ec 0c             	sub    esp,0xc
c0020f08:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020f0f:	83 c0 1a             	add    eax,0x1a
c0020f12:	50                   	push   eax
c0020f13:	e8 54 f8 fd ff       	call   c000076c <strlen>
c0020f18:	83 c4 10             	add    esp,0x10
c0020f1b:	ba 00 00 00 00       	mov    edx,0x0
c0020f20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f28:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020f2f:	0f b6 c0             	movzx  eax,al
c0020f32:	83 e0 10             	and    eax,0x10
c0020f35:	74 07                	je     c0020f3e <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020f37:	b8 02 00 00 00       	mov    eax,0x2
c0020f3c:	eb 05                	jmp    c0020f43 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020f3e:	b8 01 00 00 00       	mov    eax,0x1
c0020f43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020f47:	83 ec 08             	sub    esp,0x8
c0020f4a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020f51:	83 c0 1a             	add    eax,0x1a
c0020f54:	50                   	push   eax
c0020f55:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020f59:	83 c0 10             	add    eax,0x10
c0020f5c:	50                   	push   eax
c0020f5d:	e8 aa f8 fd ff       	call   c000080c <strcpy>
c0020f62:	83 c4 10             	add    esp,0x10
c0020f65:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020f6c:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020f73:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020f77:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020f7e:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020f85:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020f8c:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020f93:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020f9a:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020fa1:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020fa8:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020faf:	89 c6                	mov    esi,eax
c0020fb1:	89 d7                	mov    edi,edx
c0020fb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fb5:	89 c8                	mov    eax,ecx
c0020fb7:	89 fa                	mov    edx,edi
c0020fb9:	89 f3                	mov    ebx,esi
c0020fbb:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020fc2:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020fc9:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020fd0:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020fd7:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020fdd:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020fe4:	84 c0                	test   al,al
c0020fe6:	75 07                	jne    c0020fef <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020fe8:	b8 07 00 00 00       	mov    eax,0x7
c0020fed:	eb 17                	jmp    c0021006 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020fef:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020ff6:	85 c0                	test   eax,eax
c0020ff8:	75 07                	jne    c0021001 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020ffa:	b8 00 00 00 00       	mov    eax,0x0
c0020fff:	eb 05                	jmp    c0021006 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021001:	b8 01 00 00 00       	mov    eax,0x1
c0021006:	81 c4 50 02 00 00    	add    esp,0x250
c002100c:	5b                   	pop    ebx
c002100d:	5e                   	pop    esi
c002100e:	5f                   	pop    edi
c002100f:	c3                   	ret    

c0021010 <FAT::read(void*, unsigned long, void*, int*)>:
c0021010:	83 ec 1c             	sub    esp,0x1c
c0021013:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021018:	74 07                	je     c0021021 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002101a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002101f:	75 07                	jne    c0021028 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021021:	b8 04 00 00 00       	mov    eax,0x4
c0021026:	eb 3d                	jmp    c0021065 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021028:	8d 44 24 08          	lea    eax,[esp+0x8]
c002102c:	50                   	push   eax
c002102d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021035:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021039:	e8 55 43 fe ff       	call   c0005393 <f_read>
c002103e:	83 c4 10             	add    esp,0x10
c0021041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021049:	89 c2                	mov    edx,eax
c002104b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002104f:	89 10                	mov    DWORD PTR [eax],edx
c0021051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021055:	85 c0                	test   eax,eax
c0021057:	75 07                	jne    c0021060 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021059:	b8 00 00 00 00       	mov    eax,0x0
c002105e:	eb 05                	jmp    c0021065 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021060:	b8 01 00 00 00       	mov    eax,0x1
c0021065:	83 c4 1c             	add    esp,0x1c
c0021068:	c3                   	ret    
c0021069:	90                   	nop

c002106a <FAT::write(void*, unsigned long, void*, int*)>:
c002106a:	83 ec 1c             	sub    esp,0x1c
c002106d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021072:	74 07                	je     c002107b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0021074:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021079:	75 07                	jne    c0021082 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002107b:	b8 04 00 00 00       	mov    eax,0x4
c0021080:	eb 3d                	jmp    c00210bf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021082:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021086:	50                   	push   eax
c0021087:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002108b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002108f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021093:	e8 7b 45 fe ff       	call   c0005613 <f_write>
c0021098:	83 c4 10             	add    esp,0x10
c002109b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002109f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210a3:	89 c2                	mov    edx,eax
c00210a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00210a9:	89 10                	mov    DWORD PTR [eax],edx
c00210ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210af:	85 c0                	test   eax,eax
c00210b1:	75 07                	jne    c00210ba <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00210b3:	b8 00 00 00 00       	mov    eax,0x0
c00210b8:	eb 05                	jmp    c00210bf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00210ba:	b8 01 00 00 00       	mov    eax,0x1
c00210bf:	83 c4 1c             	add    esp,0x1c
c00210c2:	c3                   	ret    
c00210c3:	90                   	nop

c00210c4 <FAT::close(void*)>:
c00210c4:	83 ec 1c             	sub    esp,0x1c
c00210c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00210cc:	75 07                	jne    c00210d5 <FAT::close(void*)+0x11>
c00210ce:	b8 04 00 00 00       	mov    eax,0x4
c00210d3:	eb 36                	jmp    c002110b <FAT::close(void*)+0x47>
c00210d5:	83 ec 0c             	sub    esp,0xc
c00210d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210dc:	e8 c8 49 fe ff       	call   c0005aa9 <f_close>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00210e8:	83 ec 0c             	sub    esp,0xc
c00210eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210ef:	e8 a8 e7 fe ff       	call   c000f89c <free>
c00210f4:	83 c4 10             	add    esp,0x10
c00210f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210fb:	85 c0                	test   eax,eax
c00210fd:	75 07                	jne    c0021106 <FAT::close(void*)+0x42>
c00210ff:	b8 00 00 00 00       	mov    eax,0x0
c0021104:	eb 05                	jmp    c002110b <FAT::close(void*)+0x47>
c0021106:	b8 01 00 00 00       	mov    eax,0x1
c002110b:	83 c4 1c             	add    esp,0x1c
c002110e:	c3                   	ret    
c002110f:	90                   	nop

c0021110 <FAT::closeDir(void*)>:
c0021110:	83 ec 1c             	sub    esp,0x1c
c0021113:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021118:	75 07                	jne    c0021121 <FAT::closeDir(void*)+0x11>
c002111a:	b8 04 00 00 00       	mov    eax,0x4
c002111f:	eb 36                	jmp    c0021157 <FAT::closeDir(void*)+0x47>
c0021121:	83 ec 0c             	sub    esp,0xc
c0021124:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021128:	e8 64 4f fe ff       	call   c0006091 <f_closedir>
c002112d:	83 c4 10             	add    esp,0x10
c0021130:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021134:	83 ec 0c             	sub    esp,0xc
c0021137:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002113b:	e8 5c e7 fe ff       	call   c000f89c <free>
c0021140:	83 c4 10             	add    esp,0x10
c0021143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021147:	85 c0                	test   eax,eax
c0021149:	75 07                	jne    c0021152 <FAT::closeDir(void*)+0x42>
c002114b:	b8 00 00 00 00       	mov    eax,0x0
c0021150:	eb 05                	jmp    c0021157 <FAT::closeDir(void*)+0x47>
c0021152:	b8 01 00 00 00       	mov    eax,0x1
c0021157:	83 c4 1c             	add    esp,0x1c
c002115a:	c3                   	ret    
c002115b:	90                   	nop

c002115c <FAT::seek(void*, unsigned long long)>:
c002115c:	83 ec 2c             	sub    esp,0x2c
c002115f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021163:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021167:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002116b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002116f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021174:	75 07                	jne    c002117d <FAT::seek(void*, unsigned long long)+0x21>
c0021176:	b8 04 00 00 00       	mov    eax,0x4
c002117b:	eb 2f                	jmp    c00211ac <FAT::seek(void*, unsigned long long)+0x50>
c002117d:	83 ec 04             	sub    esp,0x4
c0021180:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021184:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021188:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002118c:	e8 47 49 fe ff       	call   c0005ad8 <f_lseek>
c0021191:	83 c4 10             	add    esp,0x10
c0021194:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021198:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002119c:	85 c0                	test   eax,eax
c002119e:	75 07                	jne    c00211a7 <FAT::seek(void*, unsigned long long)+0x4b>
c00211a0:	b8 00 00 00 00       	mov    eax,0x0
c00211a5:	eb 05                	jmp    c00211ac <FAT::seek(void*, unsigned long long)+0x50>
c00211a7:	b8 01 00 00 00       	mov    eax,0x1
c00211ac:	83 c4 2c             	add    esp,0x2c
c00211af:	c3                   	ret    

c00211b0 <fatWrapperReadDisk>:
c00211b0:	83 ec 1c             	sub    esp,0x1c
c00211b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00211bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00211bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00211c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00211c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00211ca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00211cf:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c00211d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00211da:	83 ec 0c             	sub    esp,0xc
c00211dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00211e1:	52                   	push   edx
c00211e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00211e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00211ea:	50                   	push   eax
c00211eb:	e8 2a 52 ff ff       	call   c001641a <LogicalDisk::read(unsigned long long, int, void*)>
c00211f0:	83 c4 20             	add    esp,0x20
c00211f3:	83 c4 1c             	add    esp,0x1c
c00211f6:	c3                   	ret    

c00211f7 <fatWrapperWriteDisk>:
c00211f7:	83 ec 1c             	sub    esp,0x1c
c00211fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211fe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021202:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021206:	89 04 24             	mov    DWORD PTR [esp],eax
c0021209:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002120d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021211:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021216:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c002121d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021221:	83 ec 0c             	sub    esp,0xc
c0021224:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021228:	52                   	push   edx
c0021229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002122d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021231:	50                   	push   eax
c0021232:	e8 4f 52 ff ff       	call   c0016486 <LogicalDisk::write(unsigned long long, int, void*)>
c0021237:	83 c4 20             	add    esp,0x20
c002123a:	83 c4 1c             	add    esp,0x1c
c002123d:	c3                   	ret    

c002123e <fatWrapperIoctl>:
c002123e:	53                   	push   ebx
c002123f:	83 ec 28             	sub    esp,0x28
c0021242:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021246:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002124a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002124e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021252:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021257:	75 31                	jne    c002128a <fatWrapperIoctl+0x4c>
c0021259:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002125d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021261:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021266:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c002126d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021273:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021279:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002127d:	66 89 02             	mov    WORD PTR [edx],ax
c0021280:	b8 00 00 00 00       	mov    eax,0x0
c0021285:	e9 b2 00 00 00       	jmp    c002133c <fatWrapperIoctl+0xfe>
c002128a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002128f:	75 6a                	jne    c00212fb <fatWrapperIoctl+0xbd>
c0021291:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021295:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021299:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002129e:	8b 04 85 e0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0920]
c00212a5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00212ab:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00212b1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00212b7:	89 c8                	mov    eax,ecx
c00212b9:	89 da                	mov    edx,ebx
c00212bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00212bf:	c1 e0 0a             	shl    eax,0xa
c00212c2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00212c7:	8b 0c 8d e0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0920]
c00212ce:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00212d4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00212da:	89 cb                	mov    ebx,ecx
c00212dc:	c1 fb 1f             	sar    ebx,0x1f
c00212df:	53                   	push   ebx
c00212e0:	51                   	push   ecx
c00212e1:	52                   	push   edx
c00212e2:	50                   	push   eax
c00212e3:	e8 4c 61 00 00       	call   c0027434 <__udivdi3>
c00212e8:	83 c4 10             	add    esp,0x10
c00212eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00212ef:	89 01                	mov    DWORD PTR [ecx],eax
c00212f1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212f4:	b8 00 00 00 00       	mov    eax,0x0
c00212f9:	eb 41                	jmp    c002133c <fatWrapperIoctl+0xfe>
c00212fb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021300:	75 07                	jne    c0021309 <fatWrapperIoctl+0xcb>
c0021302:	b8 00 00 00 00       	mov    eax,0x0
c0021307:	eb 33                	jmp    c002133c <fatWrapperIoctl+0xfe>
c0021309:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002130e:	75 19                	jne    c0021329 <fatWrapperIoctl+0xeb>
c0021310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021314:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021318:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002131c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021322:	b8 00 00 00 00       	mov    eax,0x0
c0021327:	eb 13                	jmp    c002133c <fatWrapperIoctl+0xfe>
c0021329:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002132e:	75 07                	jne    c0021337 <fatWrapperIoctl+0xf9>
c0021330:	b8 00 00 00 00       	mov    eax,0x0
c0021335:	eb 05                	jmp    c002133c <fatWrapperIoctl+0xfe>
c0021337:	b8 04 00 00 00       	mov    eax,0x4
c002133c:	83 c4 28             	add    esp,0x28
c002133f:	5b                   	pop    ebx
c0021340:	c3                   	ret    
c0021341:	90                   	nop

c0021342 <FAT::FAT()>:
c0021342:	83 ec 1c             	sub    esp,0x1c
c0021345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021349:	83 ec 0c             	sub    esp,0xc
c002134c:	50                   	push   eax
c002134d:	e8 56 1a ff ff       	call   c0012da8 <Filesystem::Filesystem()>
c0021352:	83 c4 10             	add    esp,0x10
c0021355:	ba 98 d3 02 c0       	mov    edx,0xc002d398
c002135a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002135e:	89 10                	mov    DWORD PTR [eax],edx
c0021360:	c7 05 00 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032700,0x0
c002136a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021372:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021377:	7f 15                	jg     c002138e <FAT::FAT()+0x4c>
c0021379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002137d:	c7 04 85 20 27 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd8e0],0xffffffff
c0021388:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002138c:	eb e4                	jmp    c0021372 <FAT::FAT()+0x30>
c002138e:	90                   	nop
c002138f:	83 c4 1c             	add    esp,0x1c
c0021392:	c3                   	ret    
c0021393:	90                   	nop

c0021394 <FAT::fixFilepath(char*)>:
c0021394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021398:	8a 00                	mov    al,BYTE PTR [eax]
c002139a:	3c 40                	cmp    al,0x40
c002139c:	7e 2c                	jle    c00213ca <FAT::fixFilepath(char*)+0x36>
c002139e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213a2:	8a 00                	mov    al,BYTE PTR [eax]
c00213a4:	83 e8 41             	sub    eax,0x41
c00213a7:	88 c2                	mov    dl,al
c00213a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213ad:	88 10                	mov    BYTE PTR [eax],dl
c00213af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213b3:	8a 00                	mov    al,BYTE PTR [eax]
c00213b5:	0f be c0             	movsx  eax,al
c00213b8:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c00213bf:	83 c0 30             	add    eax,0x30
c00213c2:	88 c2                	mov    dl,al
c00213c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213c8:	88 10                	mov    BYTE PTR [eax],dl
c00213ca:	90                   	nop
c00213cb:	c3                   	ret    

c00213cc <FAT::open(char const*, void**, FileOpenMode)>:
c00213cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213da:	74 0a                	je     c00213e6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00213dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00213e4:	75 0a                	jne    c00213f0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00213e6:	b8 04 00 00 00       	mov    eax,0x4
c00213eb:	e9 fd 00 00 00       	jmp    c00214ed <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00213f0:	83 ec 08             	sub    esp,0x8
c00213f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213fe:	50                   	push   eax
c00213ff:	e8 08 f4 fd ff       	call   c000080c <strcpy>
c0021404:	83 c4 10             	add    esp,0x10
c0021407:	83 ec 08             	sub    esp,0x8
c002140a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002140e:	50                   	push   eax
c002140f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021416:	e8 79 ff ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c002141b:	83 c4 10             	add    esp,0x10
c002141e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021426:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002142d:	83 e0 01             	and    eax,0x1
c0021430:	74 08                	je     c002143a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021432:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002143a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021441:	83 e0 04             	and    eax,0x4
c0021444:	74 10                	je     c0021456 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021446:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002144e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021456:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002145d:	83 e0 02             	and    eax,0x2
c0021460:	74 08                	je     c002146a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021462:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002146a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021471:	83 e0 08             	and    eax,0x8
c0021474:	74 08                	je     c002147e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021476:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002147e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021485:	83 e0 10             	and    eax,0x10
c0021488:	74 08                	je     c0021492 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002148a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021492:	83 ec 0c             	sub    esp,0xc
c0021495:	68 50 02 00 00       	push   0x250
c002149a:	e8 ed e3 fe ff       	call   c000f88c <malloc>
c002149f:	83 c4 10             	add    esp,0x10
c00214a2:	89 c2                	mov    edx,eax
c00214a4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00214ab:	89 10                	mov    DWORD PTR [eax],edx
c00214ad:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00214b5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00214bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00214be:	83 ec 04             	sub    esp,0x4
c00214c1:	52                   	push   edx
c00214c2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00214c6:	52                   	push   edx
c00214c7:	50                   	push   eax
c00214c8:	e8 8a 3a fe ff       	call   c0004f57 <f_open>
c00214cd:	83 c4 10             	add    esp,0x10
c00214d0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00214d7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00214df:	74 07                	je     c00214e8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00214e1:	b8 01 00 00 00       	mov    eax,0x1
c00214e6:	eb 05                	jmp    c00214ed <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00214e8:	b8 00 00 00 00       	mov    eax,0x0
c00214ed:	81 c4 1c 01 00 00    	add    esp,0x11c
c00214f3:	c3                   	ret    

c00214f4 <FAT::openDir(char const*, void**)>:
c00214f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021502:	74 0a                	je     c002150e <FAT::openDir(char const*, void**)+0x1a>
c0021504:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002150c:	75 07                	jne    c0021515 <FAT::openDir(char const*, void**)+0x21>
c002150e:	b8 04 00 00 00       	mov    eax,0x4
c0021513:	eb 7d                	jmp    c0021592 <FAT::openDir(char const*, void**)+0x9e>
c0021515:	83 ec 08             	sub    esp,0x8
c0021518:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002151f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021523:	50                   	push   eax
c0021524:	e8 e3 f2 fd ff       	call   c000080c <strcpy>
c0021529:	83 c4 10             	add    esp,0x10
c002152c:	83 ec 08             	sub    esp,0x8
c002152f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021533:	50                   	push   eax
c0021534:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002153b:	e8 54 fe ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c0021540:	83 c4 10             	add    esp,0x10
c0021543:	83 ec 0c             	sub    esp,0xc
c0021546:	6a 4c                	push   0x4c
c0021548:	e8 3f e3 fe ff       	call   c000f88c <malloc>
c002154d:	83 c4 10             	add    esp,0x10
c0021550:	89 c2                	mov    edx,eax
c0021552:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021559:	89 10                	mov    DWORD PTR [eax],edx
c002155b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021562:	8b 00                	mov    eax,DWORD PTR [eax]
c0021564:	83 ec 08             	sub    esp,0x8
c0021567:	8d 54 24 14          	lea    edx,[esp+0x14]
c002156b:	52                   	push   edx
c002156c:	50                   	push   eax
c002156d:	e8 1d 4a fe ff       	call   c0005f8f <f_opendir>
c0021572:	83 c4 10             	add    esp,0x10
c0021575:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002157c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021584:	74 07                	je     c002158d <FAT::openDir(char const*, void**)+0x99>
c0021586:	b8 01 00 00 00       	mov    eax,0x1
c002158b:	eb 05                	jmp    c0021592 <FAT::openDir(char const*, void**)+0x9e>
c002158d:	b8 00 00 00 00       	mov    eax,0x0
c0021592:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021598:	c3                   	ret    
c0021599:	90                   	nop

c002159a <FAT::stat(char const*, unsigned long long*, bool*)>:
c002159a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215a0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00215a8:	75 0a                	jne    c00215b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00215aa:	b8 04 00 00 00       	mov    eax,0x4
c00215af:	e9 c9 00 00 00       	jmp    c002167d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00215b4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00215bc:	75 0a                	jne    c00215c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00215be:	b8 04 00 00 00       	mov    eax,0x4
c00215c3:	e9 b5 00 00 00       	jmp    c002167d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00215c8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00215d0:	75 0a                	jne    c00215dc <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00215d2:	b8 04 00 00 00       	mov    eax,0x4
c00215d7:	e9 a1 00 00 00       	jmp    c002167d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00215dc:	83 ec 08             	sub    esp,0x8
c00215df:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215e6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00215ed:	50                   	push   eax
c00215ee:	e8 19 f2 fd ff       	call   c000080c <strcpy>
c00215f3:	83 c4 10             	add    esp,0x10
c00215f6:	83 ec 08             	sub    esp,0x8
c00215f9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021600:	50                   	push   eax
c0021601:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021608:	e8 87 fd ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c002160d:	83 c4 10             	add    esp,0x10
c0021610:	83 ec 08             	sub    esp,0x8
c0021613:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021617:	50                   	push   eax
c0021618:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002161f:	50                   	push   eax
c0021620:	e8 29 4b fe ff       	call   c000614e <f_stat>
c0021625:	83 c4 10             	add    esp,0x10
c0021628:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002162f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021636:	85 c0                	test   eax,eax
c0021638:	74 07                	je     c0021641 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002163a:	83 f8 04             	cmp    eax,0x4
c002163d:	74 32                	je     c0021671 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002163f:	eb 37                	jmp    c0021678 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021641:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021645:	0f b6 c0             	movzx  eax,al
c0021648:	83 e0 10             	and    eax,0x10
c002164b:	0f 95 c2             	setne  dl
c002164e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021655:	88 10                	mov    BYTE PTR [eax],dl
c0021657:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002165a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002165e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021665:	89 01                	mov    DWORD PTR [ecx],eax
c0021667:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002166a:	b8 00 00 00 00       	mov    eax,0x0
c002166f:	eb 0c                	jmp    c002167d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021671:	b8 02 00 00 00       	mov    eax,0x2
c0021676:	eb 05                	jmp    c002167d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021678:	b8 01 00 00 00       	mov    eax,0x1
c002167d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021683:	c3                   	ret    

c0021684 <FAT::unlink(char const*)>:
c0021684:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002168a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021692:	75 07                	jne    c002169b <FAT::unlink(char const*)+0x17>
c0021694:	b8 04 00 00 00       	mov    eax,0x4
c0021699:	eb 5c                	jmp    c00216f7 <FAT::unlink(char const*)+0x73>
c002169b:	83 ec 08             	sub    esp,0x8
c002169e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216a9:	50                   	push   eax
c00216aa:	e8 5d f1 fd ff       	call   c000080c <strcpy>
c00216af:	83 c4 10             	add    esp,0x10
c00216b2:	83 ec 08             	sub    esp,0x8
c00216b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216b9:	50                   	push   eax
c00216ba:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216c1:	e8 ce fc ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c00216c6:	83 c4 10             	add    esp,0x10
c00216c9:	83 ec 0c             	sub    esp,0xc
c00216cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216d0:	50                   	push   eax
c00216d1:	e8 ca 4d fe ff       	call   c00064a0 <f_unlink>
c00216d6:	83 c4 10             	add    esp,0x10
c00216d9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00216e0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00216e7:	85 c0                	test   eax,eax
c00216e9:	75 07                	jne    c00216f2 <FAT::unlink(char const*)+0x6e>
c00216eb:	b8 00 00 00 00       	mov    eax,0x0
c00216f0:	eb 05                	jmp    c00216f7 <FAT::unlink(char const*)+0x73>
c00216f2:	b8 01 00 00 00       	mov    eax,0x1
c00216f7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00216fd:	c3                   	ret    

c00216fe <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00216fe:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021704:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002170b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021712:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021716:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002171a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021722:	75 0a                	jne    c002172e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021724:	b8 04 00 00 00       	mov    eax,0x4
c0021729:	e9 1c 01 00 00       	jmp    c002184a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002172e:	83 ec 08             	sub    esp,0x8
c0021731:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021738:	8d 44 24 24          	lea    eax,[esp+0x24]
c002173c:	50                   	push   eax
c002173d:	e8 ca f0 fd ff       	call   c000080c <strcpy>
c0021742:	83 c4 10             	add    esp,0x10
c0021745:	83 ec 08             	sub    esp,0x8
c0021748:	8d 44 24 20          	lea    eax,[esp+0x20]
c002174c:	50                   	push   eax
c002174d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021754:	e8 3b fc ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c0021759:	83 c4 10             	add    esp,0x10
c002175c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021764:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002176c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021771:	83 e0 01             	and    eax,0x1
c0021774:	74 08                	je     c002177e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021776:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002177e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021783:	83 e0 02             	and    eax,0x2
c0021786:	74 08                	je     c0021790 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021788:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021790:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021795:	83 e0 04             	and    eax,0x4
c0021798:	74 08                	je     c00217a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002179a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00217a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00217a7:	83 e0 08             	and    eax,0x8
c00217aa:	74 08                	je     c00217b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00217ac:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00217b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217b9:	83 e0 01             	and    eax,0x1
c00217bc:	74 08                	je     c00217c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00217be:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00217c6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217cb:	83 e0 02             	and    eax,0x2
c00217ce:	74 08                	je     c00217d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00217d0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00217d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217dd:	83 e0 04             	and    eax,0x4
c00217e0:	74 08                	je     c00217ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00217e2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00217ea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217ef:	83 e0 08             	and    eax,0x8
c00217f2:	74 08                	je     c00217fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00217f4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00217fc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021803:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002180a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021812:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002181a:	83 ec 04             	sub    esp,0x4
c002181d:	52                   	push   edx
c002181e:	50                   	push   eax
c002181f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021823:	50                   	push   eax
c0021824:	e8 19 53 fe ff       	call   c0006b42 <f_chmod>
c0021829:	83 c4 10             	add    esp,0x10
c002182c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021833:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002183a:	85 c0                	test   eax,eax
c002183c:	75 07                	jne    c0021845 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002183e:	b8 00 00 00 00       	mov    eax,0x0
c0021843:	eb 05                	jmp    c002184a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021845:	b8 01 00 00 00       	mov    eax,0x1
c002184a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021850:	c3                   	ret    
c0021851:	90                   	nop

c0021852 <FAT::rename(char const*, char const*)>:
c0021852:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021858:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021860:	74 0a                	je     c002186c <FAT::rename(char const*, char const*)+0x1a>
c0021862:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002186a:	75 0a                	jne    c0021876 <FAT::rename(char const*, char const*)+0x24>
c002186c:	b8 04 00 00 00       	mov    eax,0x4
c0021871:	e9 98 00 00 00       	jmp    c002190e <FAT::rename(char const*, char const*)+0xbc>
c0021876:	83 ec 08             	sub    esp,0x8
c0021879:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021880:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021887:	50                   	push   eax
c0021888:	e8 7f ef fd ff       	call   c000080c <strcpy>
c002188d:	83 c4 10             	add    esp,0x10
c0021890:	83 ec 08             	sub    esp,0x8
c0021893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002189a:	50                   	push   eax
c002189b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00218a2:	e8 ed fa ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c00218a7:	83 c4 10             	add    esp,0x10
c00218aa:	83 ec 08             	sub    esp,0x8
c00218ad:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00218b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218b8:	50                   	push   eax
c00218b9:	e8 4e ef fd ff       	call   c000080c <strcpy>
c00218be:	83 c4 10             	add    esp,0x10
c00218c1:	83 ec 08             	sub    esp,0x8
c00218c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218c8:	50                   	push   eax
c00218c9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00218d0:	e8 bf fa ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c00218d5:	83 c4 10             	add    esp,0x10
c00218d8:	83 ec 08             	sub    esp,0x8
c00218db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218df:	50                   	push   eax
c00218e0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00218e7:	50                   	push   eax
c00218e8:	e8 62 4f fe ff       	call   c000684f <f_rename>
c00218ed:	83 c4 10             	add    esp,0x10
c00218f0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00218f7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00218fe:	85 c0                	test   eax,eax
c0021900:	75 07                	jne    c0021909 <FAT::rename(char const*, char const*)+0xb7>
c0021902:	b8 00 00 00 00       	mov    eax,0x0
c0021907:	eb 05                	jmp    c002190e <FAT::rename(char const*, char const*)+0xbc>
c0021909:	b8 01 00 00 00       	mov    eax,0x1
c002190e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021914:	c3                   	ret    
c0021915:	90                   	nop

c0021916 <FAT::mkdir(char const*)>:
c0021916:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002191c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021924:	75 07                	jne    c002192d <FAT::mkdir(char const*)+0x17>
c0021926:	b8 04 00 00 00       	mov    eax,0x4
c002192b:	eb 5c                	jmp    c0021989 <FAT::mkdir(char const*)+0x73>
c002192d:	83 ec 08             	sub    esp,0x8
c0021930:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021937:	8d 44 24 18          	lea    eax,[esp+0x18]
c002193b:	50                   	push   eax
c002193c:	e8 cb ee fd ff       	call   c000080c <strcpy>
c0021941:	83 c4 10             	add    esp,0x10
c0021944:	83 ec 08             	sub    esp,0x8
c0021947:	8d 44 24 14          	lea    eax,[esp+0x14]
c002194b:	50                   	push   eax
c002194c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021953:	e8 3c fa ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c0021958:	83 c4 10             	add    esp,0x10
c002195b:	83 ec 0c             	sub    esp,0xc
c002195e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021962:	50                   	push   eax
c0021963:	e8 bb 4c fe ff       	call   c0006623 <f_mkdir>
c0021968:	83 c4 10             	add    esp,0x10
c002196b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021972:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021979:	85 c0                	test   eax,eax
c002197b:	75 07                	jne    c0021984 <FAT::mkdir(char const*)+0x6e>
c002197d:	b8 00 00 00 00       	mov    eax,0x0
c0021982:	eb 05                	jmp    c0021989 <FAT::mkdir(char const*)+0x73>
c0021984:	b8 01 00 00 00       	mov    eax,0x1
c0021989:	81 c4 1c 01 00 00    	add    esp,0x11c
c002198f:	c3                   	ret    

c0021990 <FAT::exists(char const*)>:
c0021990:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021996:	83 ec 08             	sub    esp,0x8
c0021999:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00219a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00219a4:	50                   	push   eax
c00219a5:	e8 62 ee fd ff       	call   c000080c <strcpy>
c00219aa:	83 c4 10             	add    esp,0x10
c00219ad:	83 ec 08             	sub    esp,0x8
c00219b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219b4:	50                   	push   eax
c00219b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00219bc:	e8 d3 f9 ff ff       	call   c0021394 <FAT::fixFilepath(char*)>
c00219c1:	83 c4 10             	add    esp,0x10
c00219c4:	83 ec 08             	sub    esp,0x8
c00219c7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00219ce:	50                   	push   eax
c00219cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00219d3:	50                   	push   eax
c00219d4:	e8 75 47 fe ff       	call   c000614e <f_stat>
c00219d9:	83 c4 10             	add    esp,0x10
c00219dc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00219e3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00219ea:	85 c0                	test   eax,eax
c00219ec:	75 04                	jne    c00219f2 <FAT::exists(char const*)+0x62>
c00219ee:	b0 01                	mov    al,0x1
c00219f0:	eb 02                	jmp    c00219f4 <FAT::exists(char const*)+0x64>
c00219f2:	b0 00                	mov    al,0x0
c00219f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00219fa:	c3                   	ret    
c00219fb:	90                   	nop

c00219fc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00219fc:	b8 08 00 00 00       	mov    eax,0x8
c0021a01:	c3                   	ret    

c0021a02 <ISO9660::seek(void*, unsigned long long)>:
c0021a02:	53                   	push   ebx
c0021a03:	b8 04 00 00 00       	mov    eax,0x4
c0021a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021a14:	85 d2                	test   edx,edx
c0021a16:	74 17                	je     c0021a2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021a18:	89 c8                	mov    eax,ecx
c0021a1a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021a1d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021a20:	b8 01 00 00 00       	mov    eax,0x1
c0021a25:	73 08                	jae    c0021a2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021a27:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021a2a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021a2d:	31 c0                	xor    eax,eax
c0021a2f:	5b                   	pop    ebx
c0021a30:	c3                   	ret    
c0021a31:	90                   	nop

c0021a32 <ISO9660::tell(void*, unsigned long long*)>:
c0021a32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a3a:	85 d2                	test   edx,edx
c0021a3c:	74 12                	je     c0021a50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021a3e:	85 c0                	test   eax,eax
c0021a40:	74 0e                	je     c0021a50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021a42:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021a45:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021a48:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021a4b:	89 10                	mov    DWORD PTR [eax],edx
c0021a4d:	31 c0                	xor    eax,eax
c0021a4f:	c3                   	ret    
c0021a50:	b8 04 00 00 00       	mov    eax,0x4
c0021a55:	c3                   	ret    

c0021a56 <ISO9660::getName()>:
c0021a56:	b8 f8 d3 02 c0       	mov    eax,0xc002d3f8
c0021a5b:	c3                   	ret    

c0021a5c <ISO9660::stat(void*, unsigned long long*)>:
c0021a5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a64:	85 d2                	test   edx,edx
c0021a66:	74 12                	je     c0021a7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021a68:	85 c0                	test   eax,eax
c0021a6a:	74 0e                	je     c0021a7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021a6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021a6f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021a72:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021a75:	89 10                	mov    DWORD PTR [eax],edx
c0021a77:	31 c0                	xor    eax,eax
c0021a79:	c3                   	ret    
c0021a7a:	b8 04 00 00 00       	mov    eax,0x4
c0021a7f:	c3                   	ret    

c0021a80 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021a80:	b8 01 00 00 00       	mov    eax,0x1
c0021a85:	c3                   	ret    

c0021a86 <ISO9660::unlink(char const*)>:
c0021a86:	b8 01 00 00 00       	mov    eax,0x1
c0021a8b:	c3                   	ret    

c0021a8c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021a8c:	b8 01 00 00 00       	mov    eax,0x1
c0021a91:	c3                   	ret    

c0021a92 <ISO9660::rename(char const*, char const*)>:
c0021a92:	b8 01 00 00 00       	mov    eax,0x1
c0021a97:	c3                   	ret    

c0021a98 <ISO9660::mkdir(char const*)>:
c0021a98:	b8 01 00 00 00       	mov    eax,0x1
c0021a9d:	c3                   	ret    

c0021a9e <ISO9660::close(void*)>:
c0021a9e:	83 ec 0c             	sub    esp,0xc
c0021aa1:	b8 04 00 00 00       	mov    eax,0x4
c0021aa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021aaa:	85 d2                	test   edx,edx
c0021aac:	74 0e                	je     c0021abc <ISO9660::close(void*)+0x1e>
c0021aae:	83 ec 0c             	sub    esp,0xc
c0021ab1:	52                   	push   edx
c0021ab2:	e8 e5 dd fe ff       	call   c000f89c <free>
c0021ab7:	83 c4 10             	add    esp,0x10
c0021aba:	31 c0                	xor    eax,eax
c0021abc:	83 c4 0c             	add    esp,0xc
c0021abf:	c3                   	ret    

c0021ac0 <ISO9660::closeDir(void*)>:
c0021ac0:	83 ec 0c             	sub    esp,0xc
c0021ac3:	b8 04 00 00 00       	mov    eax,0x4
c0021ac8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021acc:	85 d2                	test   edx,edx
c0021ace:	74 0e                	je     c0021ade <ISO9660::closeDir(void*)+0x1e>
c0021ad0:	83 ec 0c             	sub    esp,0xc
c0021ad3:	52                   	push   edx
c0021ad4:	e8 c3 dd fe ff       	call   c000f89c <free>
c0021ad9:	83 c4 10             	add    esp,0x10
c0021adc:	31 c0                	xor    eax,eax
c0021ade:	83 c4 0c             	add    esp,0xc
c0021ae1:	c3                   	ret    

c0021ae2 <ISO9660::~ISO9660()>:
c0021ae2:	83 ec 0c             	sub    esp,0xc
c0021ae5:	ba 5c d4 02 c0       	mov    edx,0xc002d45c
c0021aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aee:	89 10                	mov    DWORD PTR [eax],edx
c0021af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af4:	83 ec 0c             	sub    esp,0xc
c0021af7:	50                   	push   eax
c0021af8:	e8 cf 12 ff ff       	call   c0012dcc <Filesystem::~Filesystem()>
c0021afd:	83 c4 10             	add    esp,0x10
c0021b00:	90                   	nop
c0021b01:	83 c4 0c             	add    esp,0xc
c0021b04:	c3                   	ret    
c0021b05:	90                   	nop

c0021b06 <ISO9660::~ISO9660()>:
c0021b06:	83 ec 0c             	sub    esp,0xc
c0021b09:	83 ec 0c             	sub    esp,0xc
c0021b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b10:	e8 cd ff ff ff       	call   c0021ae2 <ISO9660::~ISO9660()>
c0021b15:	83 c4 10             	add    esp,0x10
c0021b18:	83 ec 08             	sub    esp,0x8
c0021b1b:	6a 08                	push   0x8
c0021b1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b21:	e8 97 0e ff ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0021b26:	83 c4 10             	add    esp,0x10
c0021b29:	83 c4 0c             	add    esp,0xc
c0021b2c:	c3                   	ret    

c0021b2d <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021b2d:	55                   	push   ebp
c0021b2e:	31 c9                	xor    ecx,ecx
c0021b30:	57                   	push   edi
c0021b31:	56                   	push   esi
c0021b32:	53                   	push   ebx
c0021b33:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021b37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021b3b:	89 eb                	mov    ebx,ebp
c0021b3d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021b41:	39 ce                	cmp    esi,ecx
c0021b43:	7e 17                	jle    c0021b5c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021b45:	31 d2                	xor    edx,edx
c0021b47:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021b4b:	7d 13                	jge    c0021b60 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021b4d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b51:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021b54:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021b57:	75 0d                	jne    c0021b66 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021b59:	42                   	inc    edx
c0021b5a:	eb eb                	jmp    c0021b47 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021b5c:	31 c0                	xor    eax,eax
c0021b5e:	eb 0a                	jmp    c0021b6a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021b60:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021b64:	eb 04                	jmp    c0021b6a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021b66:	41                   	inc    ecx
c0021b67:	43                   	inc    ebx
c0021b68:	eb d7                	jmp    c0021b41 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021b6a:	5b                   	pop    ebx
c0021b6b:	5e                   	pop    esi
c0021b6c:	5f                   	pop    edi
c0021b6d:	5d                   	pop    ebp
c0021b6e:	c3                   	ret    

c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021b6f:	57                   	push   edi
c0021b70:	56                   	push   esi
c0021b71:	53                   	push   ebx
c0021b72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021b76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021b7a:	39 0d 00 28 03 c0    	cmp    DWORD PTR ds:0xc0032800,ecx
c0021b80:	75 08                	jne    c0021b8a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021b82:	38 05 74 e6 02 c0    	cmp    BYTE PTR ds:0xc002e674,al
c0021b88:	74 2b                	je     c0021bb5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021b8a:	83 ec 0c             	sub    esp,0xc
c0021b8d:	a2 74 e6 02 c0       	mov    ds:0xc002e674,al
c0021b92:	68 20 28 03 c0       	push   0xc0032820
c0021b97:	0f be c0             	movsx  eax,al
c0021b9a:	6a 01                	push   0x1
c0021b9c:	89 0d 00 28 03 c0    	mov    DWORD PTR ds:0xc0032800,ecx
c0021ba2:	31 db                	xor    ebx,ebx
c0021ba4:	53                   	push   ebx
c0021ba5:	51                   	push   ecx
c0021ba6:	ff 34 85 dc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a24]
c0021bad:	e8 68 48 ff ff       	call   c001641a <LogicalDisk::read(unsigned long long, int, void*)>
c0021bb2:	83 c4 20             	add    esp,0x20
c0021bb5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021bb9:	be 20 28 03 c0       	mov    esi,0xc0032820
c0021bbe:	b9 00 08 00 00       	mov    ecx,0x800
c0021bc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021bc5:	5b                   	pop    ebx
c0021bc6:	5e                   	pop    esi
c0021bc7:	5f                   	pop    edi
c0021bc8:	c3                   	ret    
c0021bc9:	90                   	nop

c0021bca <ISO9660::tryMount(LogicalDisk*, int)>:
c0021bca:	81 ec 10 08 00 00    	sub    esp,0x810
c0021bd0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021bd7:	83 c0 41             	add    eax,0x41
c0021bda:	0f be c0             	movsx  eax,al
c0021bdd:	50                   	push   eax
c0021bde:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021be2:	50                   	push   eax
c0021be3:	6a 10                	push   0x10
c0021be5:	e8 85 ff ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bea:	83 c4 10             	add    esp,0x10
c0021bed:	31 c0                	xor    eax,eax
c0021bef:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021bf4:	75 1d                	jne    c0021c13 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021bf6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021bfb:	75 16                	jne    c0021c13 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021bfd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021c02:	75 0f                	jne    c0021c13 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021c04:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021c09:	75 08                	jne    c0021c13 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021c0b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021c10:	0f 94 c0             	sete   al
c0021c13:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021c19:	c3                   	ret    

c0021c1a <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021c1a:	55                   	push   ebp
c0021c1b:	57                   	push   edi
c0021c1c:	56                   	push   esi
c0021c1d:	53                   	push   ebx
c0021c1e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021c24:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021c2b:	85 ed                	test   ebp,ebp
c0021c2d:	0f 84 da 01 00 00    	je     c0021e0d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021c33:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021c3b:	0f 84 cc 01 00 00    	je     c0021e0d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021c41:	b8 01 00 00 00       	mov    eax,0x1
c0021c46:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021c4a:	0f 85 c2 01 00 00    	jne    c0021e12 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021c50:	31 d2                	xor    edx,edx
c0021c52:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021c59:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021c5c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021c5f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021c62:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021c69:	01 c8                	add    eax,ecx
c0021c6b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021c6e:	11 da                	adc    edx,ebx
c0021c70:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021c74:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021c78:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021c7c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021c80:	19 d7                	sbb    edi,edx
c0021c82:	72 11                	jb     c0021c95 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021c84:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021c87:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021c8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021c93:	eb 0c                	jmp    c0021ca1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021c95:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021c99:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021c9d:	29 ce                	sub    esi,ecx
c0021c9f:	19 df                	sbb    edi,ebx
c0021ca1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ca4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021ca7:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021cab:	c1 e0 0b             	shl    eax,0xb
c0021cae:	01 c8                	add    eax,ecx
c0021cb0:	11 da                	adc    edx,ebx
c0021cb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0021cb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021cb9:	51                   	push   ecx
c0021cba:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021cbe:	50                   	push   eax
c0021cbf:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021cc3:	53                   	push   ebx
c0021cc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ccc:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021cd0:	50                   	push   eax
c0021cd1:	e8 99 fe ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cd6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021cd9:	b8 00 08 00 00       	mov    eax,0x800
c0021cde:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021ce4:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021ce8:	29 d0                	sub    eax,edx
c0021cea:	83 c4 10             	add    esp,0x10
c0021ced:	89 f9                	mov    ecx,edi
c0021cef:	39 c6                	cmp    esi,eax
c0021cf1:	83 d9 00             	sbb    ecx,0x0
c0021cf4:	7d 1b                	jge    c0021d11 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021cf6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021cfb:	75 12                	jne    c0021d0f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021cfd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d0a:	e9 fa 00 00 00       	jmp    c0021e09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021d0f:	89 f0                	mov    eax,esi
c0021d11:	01 d3                	add    ebx,edx
c0021d13:	31 d2                	xor    edx,edx
c0021d15:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021d19:	39 c2                	cmp    edx,eax
c0021d1b:	7d 14                	jge    c0021d31 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021d1d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021d24:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021d28:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021d2b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021d2e:	42                   	inc    edx
c0021d2f:	eb e8                	jmp    c0021d19 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021d31:	89 c2                	mov    edx,eax
c0021d33:	85 c0                	test   eax,eax
c0021d35:	79 02                	jns    c0021d39 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021d37:	31 d2                	xor    edx,edx
c0021d39:	01 c2                	add    edx,eax
c0021d3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021d3e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021d45:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021d49:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021d4d:	99                   	cdq    
c0021d4e:	01 c1                	add    ecx,eax
c0021d50:	11 d3                	adc    ebx,edx
c0021d52:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021d56:	29 c6                	sub    esi,eax
c0021d58:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021d5c:	19 d7                	sbb    edi,edx
c0021d5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d61:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021d65:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021d6a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021d6d:	b8 00 00 00 00       	mov    eax,0x0
c0021d72:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021d76:	7d 43                	jge    c0021dbb <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021d78:	52                   	push   edx
c0021d79:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d7d:	50                   	push   eax
c0021d7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d86:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d8a:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021d8e:	50                   	push   eax
c0021d8f:	e8 db fd ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d94:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021d9c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021da1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021da9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021db1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021db6:	83 c4 10             	add    esp,0x10
c0021db9:	eb aa                	jmp    c0021d65 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021dbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dbf:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021dc2:	74 2a                	je     c0021dee <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021dc4:	50                   	push   eax
c0021dc5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021dc9:	50                   	push   eax
c0021dca:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021dce:	56                   	push   esi
c0021dcf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021dd3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021dd7:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021ddb:	51                   	push   ecx
c0021ddc:	e8 8e fd ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021de1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021de5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021de9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021deb:	83 c4 10             	add    esp,0x10
c0021dee:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021df5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021df9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dfd:	89 18                	mov    DWORD PTR [eax],ebx
c0021dff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e03:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021e06:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021e09:	31 c0                	xor    eax,eax
c0021e0b:	eb 05                	jmp    c0021e12 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021e0d:	b8 04 00 00 00       	mov    eax,0x4
c0021e12:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021e18:	5b                   	pop    ebx
c0021e19:	5e                   	pop    esi
c0021e1a:	5f                   	pop    edi
c0021e1b:	5d                   	pop    ebp
c0021e1c:	c3                   	ret    
c0021e1d:	90                   	nop

c0021e1e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021e1e:	55                   	push   ebp
c0021e1f:	57                   	push   edi
c0021e20:	56                   	push   esi
c0021e21:	53                   	push   ebx
c0021e22:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021e28:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021e2f:	85 ed                	test   ebp,ebp
c0021e31:	0f 84 51 02 00 00    	je     c0022088 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021e37:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021e3f:	0f 84 43 02 00 00    	je     c0022088 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021e45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021e48:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021e4b:	75 0a                	jne    c0021e57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021e4d:	b8 07 00 00 00       	mov    eax,0x7
c0021e52:	e9 36 02 00 00       	jmp    c002208d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021e57:	50                   	push   eax
c0021e58:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021e5c:	50                   	push   eax
c0021e5d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021e64:	53                   	push   ebx
c0021e65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021e68:	c1 e0 0b             	shl    eax,0xb
c0021e6b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021e6e:	c1 e8 0b             	shr    eax,0xb
c0021e71:	50                   	push   eax
c0021e72:	e8 f8 fc ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e7a:	83 c4 10             	add    esp,0x10
c0021e7d:	89 c1                	mov    ecx,eax
c0021e7f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021e82:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021e88:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021e8b:	84 db                	test   bl,bl
c0021e8d:	0f 85 8b 00 00 00    	jne    c0021f1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021e93:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021e99:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021e9c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021ea2:	29 c6                	sub    esi,eax
c0021ea4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021ea8:	89 f3                	mov    ebx,esi
c0021eaa:	89 f1                	mov    ecx,esi
c0021eac:	c1 fb 1f             	sar    ebx,0x1f
c0021eaf:	01 f0                	add    eax,esi
c0021eb1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021eb4:	11 da                	adc    edx,ebx
c0021eb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0021eb9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ebd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ec0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ec3:	89 d8                	mov    eax,ebx
c0021ec5:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021ec9:	ba 00 00 00 00       	mov    edx,0x0
c0021ece:	19 f8                	sbb    eax,edi
c0021ed0:	b8 00 00 00 00       	mov    eax,0x0
c0021ed5:	73 08                	jae    c0021edf <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021ed7:	89 f0                	mov    eax,esi
c0021ed9:	89 fa                	mov    edx,edi
c0021edb:	29 c8                	sub    eax,ecx
c0021edd:	19 da                	sbb    edx,ebx
c0021edf:	89 d7                	mov    edi,edx
c0021ee1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021ee4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021ee7:	09 c7                	or     edi,eax
c0021ee9:	0f 84 5e ff ff ff    	je     c0021e4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021eef:	57                   	push   edi
c0021ef0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ef4:	50                   	push   eax
c0021ef5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021efc:	53                   	push   ebx
c0021efd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021f00:	c1 e0 0b             	shl    eax,0xb
c0021f03:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021f07:	c1 e8 0b             	shr    eax,0xb
c0021f0a:	50                   	push   eax
c0021f0b:	e8 5f fc ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f10:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021f13:	83 c4 10             	add    esp,0x10
c0021f16:	25 ff 07 00 00       	and    eax,0x7ff
c0021f1b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021f1e:	31 ff                	xor    edi,edi
c0021f20:	56                   	push   esi
c0021f21:	6a 28                	push   0x28
c0021f23:	6a 00                	push   0x0
c0021f25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021f29:	50                   	push   eax
c0021f2a:	e8 21 e8 fd ff       	call   c0000750 <memset>
c0021f2f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021f32:	25 ff 07 00 00       	and    eax,0x7ff
c0021f37:	89 c6                	mov    esi,eax
c0021f39:	83 c6 21             	add    esi,0x21
c0021f3c:	83 d7 00             	adc    edi,0x0
c0021f3f:	83 c4 10             	add    esp,0x10
c0021f42:	31 c9                	xor    ecx,ecx
c0021f44:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021f4b:	83 f9 28             	cmp    ecx,0x28
c0021f4e:	88 04 24             	mov    BYTE PTR [esp],al
c0021f51:	0f 94 c2             	sete   dl
c0021f54:	88 d0                	mov    al,dl
c0021f56:	ba ff 07 00 00       	mov    edx,0x7ff
c0021f5b:	39 f2                	cmp    edx,esi
c0021f5d:	ba 00 00 00 00       	mov    edx,0x0
c0021f62:	19 fa                	sbb    edx,edi
c0021f64:	0f 92 c2             	setb   dl
c0021f67:	09 c2                	or     edx,eax
c0021f69:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021f6d:	0f 94 c0             	sete   al
c0021f70:	08 d0                	or     al,dl
c0021f72:	75 16                	jne    c0021f8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021f74:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021f78:	74 10                	je     c0021f8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021f7a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021f7d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021f81:	41                   	inc    ecx
c0021f82:	83 c6 01             	add    esi,0x1
c0021f85:	83 d7 00             	adc    edi,0x0
c0021f88:	eb ba                	jmp    c0021f44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021f8a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021f91:	83 ec 0c             	sub    esp,0xc
c0021f94:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021f98:	56                   	push   esi
c0021f99:	e8 ce e7 fd ff       	call   c000076c <strlen>
c0021f9e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021fa5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021fa9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021fb1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021fb4:	5a                   	pop    edx
c0021fb5:	25 ff 07 00 00       	and    eax,0x7ff
c0021fba:	59                   	pop    ecx
c0021fbb:	01 f8                	add    eax,edi
c0021fbd:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021fc3:	83 e0 02             	and    eax,0x2
c0021fc6:	3c 01                	cmp    al,0x1
c0021fc8:	19 c0                	sbb    eax,eax
c0021fca:	83 c0 02             	add    eax,0x2
c0021fcd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021fd1:	56                   	push   esi
c0021fd2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021fd6:	50                   	push   eax
c0021fd7:	e8 30 e8 fd ff       	call   c000080c <strcpy>
c0021fdc:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021fe0:	83 c4 10             	add    esp,0x10
c0021fe3:	84 c0                	test   al,al
c0021fe5:	75 21                	jne    c0022008 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021fe7:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021fef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ff7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021fff:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022006:	eb 28                	jmp    c0022030 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022008:	fe c8                	dec    al
c002200a:	75 24                	jne    c0022030 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002200c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022014:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002201c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022024:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002202b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022030:	8d 74 24 40          	lea    esi,[esp+0x40]
c0022034:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002203b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0022042:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022044:	0f b6 f3             	movzx  esi,bl
c0022047:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002204e:	31 db                	xor    ebx,ebx
c0022050:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0022056:	89 df                	mov    edi,ebx
c0022058:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002205b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002205e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0022061:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022064:	39 c6                	cmp    esi,eax
c0022066:	19 d7                	sbb    edi,edx
c0022068:	72 10                	jb     c002207a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002206a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0022071:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0022078:	eb 0a                	jmp    c0022084 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002207a:	29 f0                	sub    eax,esi
c002207c:	19 da                	sbb    edx,ebx
c002207e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022081:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022084:	31 c0                	xor    eax,eax
c0022086:	eb 05                	jmp    c002208d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0022088:	b8 04 00 00 00       	mov    eax,0x4
c002208d:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022093:	5b                   	pop    ebx
c0022094:	5e                   	pop    esi
c0022095:	5f                   	pop    edi
c0022096:	5d                   	pop    ebp
c0022097:	c3                   	ret    

c0022098 <readRoot(unsigned int*, unsigned int*, char)>:
c0022098:	57                   	push   edi
c0022099:	56                   	push   esi
c002209a:	81 ec 38 08 00 00    	sub    esp,0x838
c00220a0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00220a8:	50                   	push   eax
c00220a9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00220ad:	50                   	push   eax
c00220ae:	6a 10                	push   0x10
c00220b0:	e8 ba fa ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220b5:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00220bc:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00220c0:	b9 22 00 00 00       	mov    ecx,0x22
c00220c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220c7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00220ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00220d2:	89 10                	mov    DWORD PTR [eax],edx
c00220d4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00220db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00220df:	89 10                	mov    DWORD PTR [eax],edx
c00220e1:	81 c4 44 08 00 00    	add    esp,0x844
c00220e7:	b0 01                	mov    al,0x1
c00220e9:	5e                   	pop    esi
c00220ea:	5f                   	pop    edi
c00220eb:	c3                   	ret    

c00220ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00220ec:	55                   	push   ebp
c00220ed:	57                   	push   edi
c00220ee:	56                   	push   esi
c00220ef:	53                   	push   ebx
c00220f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00220f6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00220fd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022104:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022108:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002210c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022110:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022114:	75 03                	jne    c0022119 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022116:	83 c3 02             	add    ebx,0x2
c0022119:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002211c:	75 03                	jne    c0022121 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002211e:	43                   	inc    ebx
c002211f:	eb f8                	jmp    c0022119 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022121:	51                   	push   ecx
c0022122:	68 00 01 00 00       	push   0x100
c0022127:	6a 00                	push   0x0
c0022129:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002212d:	50                   	push   eax
c002212e:	e8 1d e6 fd ff       	call   c0000750 <memset>
c0022133:	83 c4 10             	add    esp,0x10
c0022136:	31 d2                	xor    edx,edx
c0022138:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002213b:	84 c0                	test   al,al
c002213d:	74 21                	je     c0022160 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002213f:	3c 2f                	cmp    al,0x2f
c0022141:	75 0b                	jne    c002214e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022143:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022147:	bd 01 00 00 00       	mov    ebp,0x1
c002214c:	eb 14                	jmp    c0022162 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002214e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022151:	80 f9 19             	cmp    cl,0x19
c0022154:	77 03                	ja     c0022159 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022156:	83 e8 20             	sub    eax,0x20
c0022159:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002215d:	42                   	inc    edx
c002215e:	eb d8                	jmp    c0022138 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022160:	31 ed                	xor    ebp,ebp
c0022162:	83 ec 0c             	sub    esp,0xc
c0022165:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002216c:	e8 1b d7 fe ff       	call   c000f88c <malloc>
c0022171:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0022178:	89 c6                	mov    esi,eax
c002217a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022180:	c1 ef 0b             	shr    edi,0xb
c0022183:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002218a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002218e:	83 c4 10             	add    esp,0x10
c0022191:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0022196:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002219a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00221a1:	74 28                	je     c00221cb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00221a3:	52                   	push   edx
c00221a4:	57                   	push   edi
c00221a5:	50                   	push   eax
c00221a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221aa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00221b1:	e8 b9 f9 ff ff       	call   c0021b6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221ba:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00221c1:	05 00 08 00 00       	add    eax,0x800
c00221c6:	83 c4 10             	add    esp,0x10
c00221c9:	eb cb                	jmp    c0022196 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00221cb:	83 ec 0c             	sub    esp,0xc
c00221ce:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00221d2:	57                   	push   edi
c00221d3:	e8 94 e5 fd ff       	call   c000076c <strlen>
c00221d8:	50                   	push   eax
c00221d9:	57                   	push   edi
c00221da:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00221e1:	56                   	push   esi
c00221e2:	e8 46 f9 ff ff       	call   c0021b2d <__memmem(unsigned char*, int, unsigned char*, int)>
c00221e7:	83 c4 20             	add    esp,0x20
c00221ea:	85 c0                	test   eax,eax
c00221ec:	75 13                	jne    c0022201 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00221ee:	83 ec 0c             	sub    esp,0xc
c00221f1:	56                   	push   esi
c00221f2:	e8 a5 d6 fe ff       	call   c000f89c <free>
c00221f7:	83 c4 10             	add    esp,0x10
c00221fa:	31 c0                	xor    eax,eax
c00221fc:	e9 b3 00 00 00       	jmp    c00222b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022201:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022205:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022209:	c1 e7 08             	shl    edi,0x8
c002220c:	c1 e2 10             	shl    edx,0x10
c002220f:	09 d7                	or     edi,edx
c0022211:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022215:	09 d7                	or     edi,edx
c0022217:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002221b:	c1 e2 18             	shl    edx,0x18
c002221e:	09 d7                	or     edi,edx
c0022220:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022224:	89 d1                	mov    ecx,edx
c0022226:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002222a:	c1 e1 08             	shl    ecx,0x8
c002222d:	c1 e2 10             	shl    edx,0x10
c0022230:	09 ca                	or     edx,ecx
c0022232:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022236:	09 ca                	or     edx,ecx
c0022238:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002223c:	c1 e1 18             	shl    ecx,0x18
c002223f:	09 ca                	or     edx,ecx
c0022241:	89 e9                	mov    ecx,ebp
c0022243:	84 c9                	test   cl,cl
c0022245:	74 3c                	je     c0022283 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022247:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002224b:	83 ec 0c             	sub    esp,0xc
c002224e:	56                   	push   esi
c002224f:	e8 48 d6 fe ff       	call   c000f89c <free>
c0022254:	83 c4 0c             	add    esp,0xc
c0022257:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002225e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022263:	50                   	push   eax
c0022264:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002226b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022276:	52                   	push   edx
c0022277:	57                   	push   edi
c0022278:	53                   	push   ebx
c0022279:	e8 6e fe ff ff       	call   c00220ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002227e:	83 c4 20             	add    esp,0x20
c0022281:	eb 31                	jmp    c00222b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022283:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022286:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002228d:	d0 e8                	shr    al,1
c002228f:	89 3b                	mov    DWORD PTR [ebx],edi
c0022291:	83 e0 01             	and    eax,0x1
c0022294:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002229b:	83 ec 0c             	sub    esp,0xc
c002229e:	89 13                	mov    DWORD PTR [ebx],edx
c00222a0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00222a7:	89 03                	mov    DWORD PTR [ebx],eax
c00222a9:	56                   	push   esi
c00222aa:	e8 ed d5 fe ff       	call   c000f89c <free>
c00222af:	83 c4 10             	add    esp,0x10
c00222b2:	b0 01                	mov    al,0x1
c00222b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00222ba:	5b                   	pop    ebx
c00222bb:	5e                   	pop    esi
c00222bc:	5f                   	pop    edi
c00222bd:	5d                   	pop    ebp
c00222be:	c3                   	ret    

c00222bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00222bf:	55                   	push   ebp
c00222c0:	57                   	push   edi
c00222c1:	56                   	push   esi
c00222c2:	53                   	push   ebx
c00222c3:	83 ec 20             	sub    esp,0x20
c00222c6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00222ca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00222ce:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00222d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00222e2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00222e7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00222ed:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00222f3:	57                   	push   edi
c00222f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222f8:	50                   	push   eax
c00222f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222fd:	50                   	push   eax
c00222fe:	e8 95 fd ff ff       	call   c0022098 <readRoot(unsigned int*, unsigned int*, char)>
c0022303:	5a                   	pop    edx
c0022304:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022308:	e8 5f e4 fd ff       	call   c000076c <strlen>
c002230d:	83 c4 10             	add    esp,0x10
c0022310:	83 f8 03             	cmp    eax,0x3
c0022313:	77 17                	ja     c002232c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022315:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022319:	89 03                	mov    DWORD PTR [ebx],eax
c002231b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002231f:	89 06                	mov    DWORD PTR [esi],eax
c0022321:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022328:	b0 01                	mov    al,0x1
c002232a:	eb 19                	jmp    c0022345 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002232c:	50                   	push   eax
c002232d:	55                   	push   ebp
c002232e:	57                   	push   edi
c002232f:	56                   	push   esi
c0022330:	53                   	push   ebx
c0022331:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022335:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022339:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002233d:	e8 aa fd ff ff       	call   c00220ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022342:	83 c4 20             	add    esp,0x20
c0022345:	83 c4 1c             	add    esp,0x1c
c0022348:	5b                   	pop    ebx
c0022349:	5e                   	pop    esi
c002234a:	5f                   	pop    edi
c002234b:	5d                   	pop    ebp
c002234c:	c3                   	ret    
c002234d:	90                   	nop

c002234e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002234e:	57                   	push   edi
c002234f:	56                   	push   esi
c0022350:	53                   	push   ebx
c0022351:	83 ec 10             	sub    esp,0x10
c0022354:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022358:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002235c:	85 ff                	test   edi,edi
c002235e:	0f 84 9d 00 00 00    	je     c0022401 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022364:	85 f6                	test   esi,esi
c0022366:	0f 84 95 00 00 00    	je     c0022401 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002236c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022371:	74 17                	je     c002238a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022373:	83 ec 0c             	sub    esp,0xc
c0022376:	68 13 d4 02 c0       	push   0xc002d413
c002237b:	e8 1d 07 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022380:	83 c4 10             	add    esp,0x10
c0022383:	b8 03 00 00 00       	mov    eax,0x3
c0022388:	eb 7c                	jmp    c0022406 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002238a:	83 ec 0c             	sub    esp,0xc
c002238d:	6a 1c                	push   0x1c
c002238f:	e8 f8 d4 fe ff       	call   c000f88c <malloc>
c0022394:	89 07                	mov    DWORD PTR [edi],eax
c0022396:	89 c3                	mov    ebx,eax
c0022398:	58                   	pop    eax
c0022399:	8d 44 24 18          	lea    eax,[esp+0x18]
c002239d:	50                   	push   eax
c002239e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00223a1:	50                   	push   eax
c00223a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223a6:	50                   	push   eax
c00223a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223ab:	50                   	push   eax
c00223ac:	56                   	push   esi
c00223ad:	e8 0d ff ff ff       	call   c00222bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00223b2:	83 c4 20             	add    esp,0x20
c00223b5:	84 c0                	test   al,al
c00223b7:	74 07                	je     c00223c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00223b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00223be:	74 0b                	je     c00223cb <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00223c0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00223c4:	b8 01 00 00 00       	mov    eax,0x1
c00223c9:	eb 3b                	jmp    c0022406 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00223cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223cf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00223d3:	89 03                	mov    DWORD PTR [ebx],eax
c00223d5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00223dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00223e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00223ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00223f1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00223f8:	8a 06                	mov    al,BYTE PTR [esi]
c00223fa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00223fd:	31 c0                	xor    eax,eax
c00223ff:	eb 05                	jmp    c0022406 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022401:	b8 04 00 00 00       	mov    eax,0x4
c0022406:	83 c4 10             	add    esp,0x10
c0022409:	5b                   	pop    ebx
c002240a:	5e                   	pop    esi
c002240b:	5f                   	pop    edi
c002240c:	c3                   	ret    
c002240d:	90                   	nop

c002240e <ISO9660::exists(char const*)>:
c002240e:	83 ec 28             	sub    esp,0x28
c0022411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022415:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022419:	52                   	push   edx
c002241a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002241d:	52                   	push   edx
c002241e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022422:	52                   	push   edx
c0022423:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022427:	52                   	push   edx
c0022428:	50                   	push   eax
c0022429:	e8 91 fe ff ff       	call   c00222bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002242e:	83 c4 3c             	add    esp,0x3c
c0022431:	c3                   	ret    

c0022432 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022432:	56                   	push   esi
c0022433:	53                   	push   ebx
c0022434:	83 ec 14             	sub    esp,0x14
c0022437:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002243b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002243f:	85 db                	test   ebx,ebx
c0022441:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022445:	0f 94 c2             	sete   dl
c0022448:	85 f6                	test   esi,esi
c002244a:	0f 94 c0             	sete   al
c002244d:	08 c2                	or     dl,al
c002244f:	75 68                	jne    c00224b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022451:	85 c9                	test   ecx,ecx
c0022453:	74 64                	je     c00224b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022455:	83 ec 0c             	sub    esp,0xc
c0022458:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002245b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002245f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022465:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002246c:	50                   	push   eax
c002246d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022470:	50                   	push   eax
c0022471:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022475:	50                   	push   eax
c0022476:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002247a:	50                   	push   eax
c002247b:	51                   	push   ecx
c002247c:	e8 3e fe ff ff       	call   c00222bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022481:	83 c4 20             	add    esp,0x20
c0022484:	ba 01 00 00 00       	mov    edx,0x1
c0022489:	84 c0                	test   al,al
c002248b:	74 31                	je     c00224be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002248d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022491:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022498:	89 03                	mov    DWORD PTR [ebx],eax
c002249a:	ba 00 00 00 00       	mov    edx,0x0
c002249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224a3:	85 c0                	test   eax,eax
c00224a5:	0f 95 06             	setne  BYTE PTR [esi]
c00224a8:	74 14                	je     c00224be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00224aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00224b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00224b7:	eb 05                	jmp    c00224be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00224b9:	ba 04 00 00 00       	mov    edx,0x4
c00224be:	83 c4 14             	add    esp,0x14
c00224c1:	89 d0                	mov    eax,edx
c00224c3:	5b                   	pop    ebx
c00224c4:	5e                   	pop    esi
c00224c5:	c3                   	ret    

c00224c6 <ISO9660::openDir(char const*, void**)>:
c00224c6:	57                   	push   edi
c00224c7:	56                   	push   esi
c00224c8:	53                   	push   ebx
c00224c9:	83 ec 10             	sub    esp,0x10
c00224cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00224d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00224d4:	85 ff                	test   edi,edi
c00224d6:	0f 84 95 00 00 00    	je     c0022571 <ISO9660::openDir(char const*, void**)+0xab>
c00224dc:	85 f6                	test   esi,esi
c00224de:	0f 84 8d 00 00 00    	je     c0022571 <ISO9660::openDir(char const*, void**)+0xab>
c00224e4:	83 ec 0c             	sub    esp,0xc
c00224e7:	6a 1c                	push   0x1c
c00224e9:	e8 9e d3 fe ff       	call   c000f88c <malloc>
c00224ee:	89 07                	mov    DWORD PTR [edi],eax
c00224f0:	89 c3                	mov    ebx,eax
c00224f2:	59                   	pop    ecx
c00224f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00224f7:	50                   	push   eax
c00224f8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00224fb:	50                   	push   eax
c00224fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022500:	50                   	push   eax
c0022501:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022505:	50                   	push   eax
c0022506:	56                   	push   esi
c0022507:	e8 b3 fd ff ff       	call   c00222bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002250c:	83 c4 20             	add    esp,0x20
c002250f:	84 c0                	test   al,al
c0022511:	74 07                	je     c002251a <ISO9660::openDir(char const*, void**)+0x54>
c0022513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022518:	75 21                	jne    c002253b <ISO9660::openDir(char const*, void**)+0x75>
c002251a:	0f b6 c0             	movzx  eax,al
c002251d:	52                   	push   edx
c002251e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022522:	50                   	push   eax
c0022523:	68 39 d4 02 c0       	push   0xc002d439
c0022528:	e8 70 05 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002252d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022531:	83 c4 10             	add    esp,0x10
c0022534:	b8 01 00 00 00       	mov    eax,0x1
c0022539:	eb 3b                	jmp    c0022576 <ISO9660::openDir(char const*, void**)+0xb0>
c002253b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002253f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022543:	89 03                	mov    DWORD PTR [ebx],eax
c0022545:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002254c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022550:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022557:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002255e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022561:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022568:	8a 06                	mov    al,BYTE PTR [esi]
c002256a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002256d:	31 c0                	xor    eax,eax
c002256f:	eb 05                	jmp    c0022576 <ISO9660::openDir(char const*, void**)+0xb0>
c0022571:	b8 04 00 00 00       	mov    eax,0x4
c0022576:	83 c4 10             	add    esp,0x10
c0022579:	5b                   	pop    ebx
c002257a:	5e                   	pop    esi
c002257b:	5f                   	pop    edi
c002257c:	c3                   	ret    
c002257d:	90                   	nop

c002257e <ISO9660::ISO9660()>:
c002257e:	83 ec 0c             	sub    esp,0xc
c0022581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022585:	83 ec 0c             	sub    esp,0xc
c0022588:	50                   	push   eax
c0022589:	e8 1a 08 ff ff       	call   c0012da8 <Filesystem::Filesystem()>
c002258e:	83 c4 10             	add    esp,0x10
c0022591:	ba 5c d4 02 c0       	mov    edx,0xc002d45c
c0022596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002259a:	89 10                	mov    DWORD PTR [eax],edx
c002259c:	90                   	nop
c002259d:	83 c4 0c             	add    esp,0xc
c00225a0:	c3                   	ret    
c00225a1:	90                   	nop

c00225a2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00225a2:	83 ec 1c             	sub    esp,0x1c
c00225a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00225ad:	89 10                	mov    DWORD PTR [eax],edx
c00225af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00225b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00225ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225be:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00225c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00225c5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00225ca:	75 23                	jne    c00225ef <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00225cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00225d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225d9:	0f af c2             	imul   eax,edx
c00225dc:	85 c0                	test   eax,eax
c00225de:	79 03                	jns    c00225e3 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00225e0:	83 c0 03             	add    eax,0x3
c00225e3:	c1 f8 02             	sar    eax,0x2
c00225e6:	05 a0 0f 00 00       	add    eax,0xfa0
c00225eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00225ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00225f7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00225fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225fe:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022609:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022614:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022617:	c1 e0 02             	shl    eax,0x2
c002261a:	83 ec 0c             	sub    esp,0xc
c002261d:	50                   	push   eax
c002261e:	e8 69 d2 fe ff       	call   c000f88c <malloc>
c0022623:	83 c4 10             	add    esp,0x10
c0022626:	89 c2                	mov    edx,eax
c0022628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002262c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002262f:	83 ec 04             	sub    esp,0x4
c0022632:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022636:	50                   	push   eax
c0022637:	6a 01                	push   0x1
c0022639:	6a 04                	push   0x4
c002263b:	e8 25 65 fe ff       	call   c0008b65 <src_new>
c0022640:	83 c4 10             	add    esp,0x10
c0022643:	89 c2                	mov    edx,eax
c0022645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022649:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002264c:	83 ec 0c             	sub    esp,0xc
c002264f:	68 bc d4 02 c0       	push   0xc002d4bc
c0022654:	e8 44 04 ff ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022659:	83 c4 10             	add    esp,0x10
c002265c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022660:	85 c0                	test   eax,eax
c0022662:	74 10                	je     c0022674 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022664:	83 ec 0c             	sub    esp,0xc
c0022667:	68 d2 d4 02 c0       	push   0xc002d4d2
c002266c:	e8 62 7e ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0022671:	83 c4 10             	add    esp,0x10
c0022674:	a0 20 34 03 c0       	mov    al,ds:0xc0033420
c0022679:	83 f0 01             	xor    eax,0x1
c002267c:	84 c0                	test   al,al
c002267e:	74 57                	je     c00226d7 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c0022680:	a1 ec d4 02 c0       	mov    eax,ds:0xc002d4ec
c0022685:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022689:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022691:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022699:	7f 35                	jg     c00226d0 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c002269b:	83 ec 0c             	sub    esp,0xc
c002269e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00226a2:	e8 b8 56 00 00       	call   c0027d5f <__floatsisf>
c00226a7:	83 c4 10             	add    esp,0x10
c00226aa:	8b 15 ec d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4ec
c00226b0:	83 ec 08             	sub    esp,0x8
c00226b3:	52                   	push   edx
c00226b4:	50                   	push   eax
c00226b5:	e8 b7 52 00 00       	call   c0027971 <__mulsf3>
c00226ba:	83 c4 10             	add    esp,0x10
c00226bd:	89 c2                	mov    edx,eax
c00226bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226c3:	89 14 85 20 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffccfe0],edx
c00226ca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00226ce:	eb c1                	jmp    c0022691 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c00226d0:	c6 05 20 34 03 c0 01 	mov    BYTE PTR ds:0xc0033420,0x1
c00226d7:	90                   	nop
c00226d8:	83 c4 1c             	add    esp,0x1c
c00226db:	c3                   	ret    

c00226dc <SoundChannel::~SoundChannel()>:
c00226dc:	83 ec 0c             	sub    esp,0xc
c00226df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00226e6:	83 ec 0c             	sub    esp,0xc
c00226e9:	50                   	push   eax
c00226ea:	e8 ad d1 fe ff       	call   c000f89c <free>
c00226ef:	83 c4 10             	add    esp,0x10
c00226f2:	90                   	nop
c00226f3:	83 c4 0c             	add    esp,0xc
c00226f6:	c3                   	ret    
c00226f7:	90                   	nop

c00226f8 <SoundChannel::getSampleRate()>:
c00226f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00226fe:	c3                   	ret    
c00226ff:	90                   	nop

c0022700 <SoundChannel::getBits()>:
c0022700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022707:	c3                   	ret    

c0022708 <SoundChannel::getBufferUsed()>:
c0022708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002270c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002270f:	c3                   	ret    

c0022710 <SoundChannel::getBufferSize()>:
c0022710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022714:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022717:	c3                   	ret    

c0022718 <SoundChannel::unbuffer(float*, int, int)>:
c0022718:	56                   	push   esi
c0022719:	53                   	push   ebx
c002271a:	83 ec 40             	sub    esp,0x40
c002271d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022721:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022724:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022728:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002272b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002272f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022733:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022737:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002273b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002273f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022743:	e8 17 56 00 00       	call   c0027d5f <__floatsisf>
c0022748:	5a                   	pop    edx
c0022749:	89 c6                	mov    esi,eax
c002274b:	ff 33                	push   DWORD PTR [ebx]
c002274d:	e8 0d 56 00 00       	call   c0027d5f <__floatsisf>
c0022752:	59                   	pop    ecx
c0022753:	5a                   	pop    edx
c0022754:	50                   	push   eax
c0022755:	56                   	push   esi
c0022756:	e8 d9 53 00 00       	call   c0027b34 <__divsf3>
c002275b:	89 04 24             	mov    DWORD PTR [esp],eax
c002275e:	e8 cc 68 00 00       	call   c002902f <__extendsfdf2>
c0022763:	59                   	pop    ecx
c0022764:	5e                   	pop    esi
c0022765:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022769:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002276d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022775:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022779:	50                   	push   eax
c002277a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002277d:	e8 d8 5f fe ff       	call   c000875a <src_process>
c0022782:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022786:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022789:	83 c4 0c             	add    esp,0xc
c002278c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002278f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022792:	29 d0                	sub    eax,edx
c0022794:	c1 e0 02             	shl    eax,0x2
c0022797:	50                   	push   eax
c0022798:	8d 04 91             	lea    eax,[ecx+edx*4]
c002279b:	50                   	push   eax
c002279c:	51                   	push   ecx
c002279d:	e8 e6 de fd ff       	call   c0000688 <memmove>
c00227a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227a6:	83 c4 44             	add    esp,0x44
c00227a9:	5b                   	pop    ebx
c00227aa:	5e                   	pop    esi
c00227ab:	c3                   	ret    

c00227ac <SoundChannel::buffer16(short*, int)>:
c00227ac:	55                   	push   ebp
c00227ad:	57                   	push   edi
c00227ae:	56                   	push   esi
c00227af:	53                   	push   ebx
c00227b0:	83 ec 1c             	sub    esp,0x1c
c00227b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00227b7:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00227ba:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00227bd:	0f 84 d2 00 00 00    	je     c0022895 <SoundChannel::buffer16(short*, int)+0xe9>
c00227c3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00227c7:	85 ed                	test   ebp,ebp
c00227c9:	0f 8e c6 00 00 00    	jle    c0022895 <SoundChannel::buffer16(short*, int)+0xe9>
c00227cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00227d3:	bd 00 00 00 38       	mov    ebp,0x38000000
c00227d8:	83 ec 0c             	sub    esp,0xc
c00227db:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00227de:	50                   	push   eax
c00227df:	e8 7b 55 00 00       	call   c0027d5f <__floatsisf>
c00227e4:	59                   	pop    ecx
c00227e5:	8d 4e 01             	lea    ecx,[esi+0x1]
c00227e8:	5f                   	pop    edi
c00227e9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00227ec:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00227ef:	55                   	push   ebp
c00227f0:	50                   	push   eax
c00227f1:	e8 7b 51 00 00       	call   c0027971 <__mulsf3>
c00227f6:	83 c4 10             	add    esp,0x10
c00227f9:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00227fc:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00227ff:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022802:	0f 84 99 00 00 00    	je     c00228a1 <SoundChannel::buffer16(short*, int)+0xf5>
c0022808:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c002280d:	74 78                	je     c0022887 <SoundChannel::buffer16(short*, int)+0xdb>
c002280f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022813:	83 ec 0c             	sub    esp,0xc
c0022816:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c002281a:	50                   	push   eax
c002281b:	e8 3f 55 00 00       	call   c0027d5f <__floatsisf>
c0022820:	5f                   	pop    edi
c0022821:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022824:	5a                   	pop    edx
c0022825:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022828:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002282b:	55                   	push   ebp
c002282c:	50                   	push   eax
c002282d:	e8 3f 51 00 00       	call   c0027971 <__mulsf3>
c0022832:	83 c4 10             	add    esp,0x10
c0022835:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022838:	be 02 00 00 00       	mov    esi,0x2
c002283d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022840:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022843:	74 46                	je     c002288b <SoundChannel::buffer16(short*, int)+0xdf>
c0022845:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022849:	eb 36                	jmp    c0022881 <SoundChannel::buffer16(short*, int)+0xd5>
c002284b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002284f:	83 ec 0c             	sub    esp,0xc
c0022852:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022856:	46                   	inc    esi
c0022857:	50                   	push   eax
c0022858:	e8 02 55 00 00       	call   c0027d5f <__floatsisf>
c002285d:	5a                   	pop    edx
c002285e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022861:	59                   	pop    ecx
c0022862:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022865:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022868:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002286c:	50                   	push   eax
c002286d:	e8 ff 50 00 00       	call   c0027971 <__mulsf3>
c0022872:	83 c4 10             	add    esp,0x10
c0022875:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022879:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002287c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002287f:	74 0a                	je     c002288b <SoundChannel::buffer16(short*, int)+0xdf>
c0022881:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022885:	75 c4                	jne    c002284b <SoundChannel::buffer16(short*, int)+0x9f>
c0022887:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002288b:	83 c4 1c             	add    esp,0x1c
c002288e:	89 f0                	mov    eax,esi
c0022890:	5b                   	pop    ebx
c0022891:	5e                   	pop    esi
c0022892:	5f                   	pop    edi
c0022893:	5d                   	pop    ebp
c0022894:	c3                   	ret    
c0022895:	83 c4 1c             	add    esp,0x1c
c0022898:	31 f6                	xor    esi,esi
c002289a:	5b                   	pop    ebx
c002289b:	89 f0                	mov    eax,esi
c002289d:	5e                   	pop    esi
c002289e:	5f                   	pop    edi
c002289f:	5d                   	pop    ebp
c00228a0:	c3                   	ret    
c00228a1:	be 01 00 00 00       	mov    esi,0x1
c00228a6:	eb e3                	jmp    c002288b <SoundChannel::buffer16(short*, int)+0xdf>

c00228a8 <SoundChannel::buffer8(unsigned char*, int)>:
c00228a8:	55                   	push   ebp
c00228a9:	57                   	push   edi
c00228aa:	56                   	push   esi
c00228ab:	53                   	push   ebx
c00228ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228b0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00228b4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00228b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00228bb:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00228be:	74 7a                	je     c002293a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00228c0:	85 ff                	test   edi,edi
c00228c2:	7e 76                	jle    c002293a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00228c4:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00228c8:	8d 70 01             	lea    esi,[eax+0x1]
c00228cb:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00228ce:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00228d1:	8b 1c 9d 20 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccfe0]
c00228d8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00228db:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00228de:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00228e1:	74 5e                	je     c0022941 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00228e3:	83 ff 01             	cmp    edi,0x1
c00228e6:	74 4b                	je     c0022933 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00228e8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00228ec:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00228ef:	8d 70 01             	lea    esi,[eax+0x1]
c00228f2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00228f5:	8b 1c 9d 20 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccfe0]
c00228fc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00228ff:	b8 02 00 00 00       	mov    eax,0x2
c0022904:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022907:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002290a:	75 23                	jne    c002292f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002290c:	eb 27                	jmp    c0022935 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002290e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022913:	8d 71 01             	lea    esi,[ecx+0x1]
c0022916:	40                   	inc    eax
c0022917:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002291a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002291d:	8b 1c 9d 20 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccfe0]
c0022924:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022927:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002292a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002292d:	74 06                	je     c0022935 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002292f:	39 c7                	cmp    edi,eax
c0022931:	75 db                	jne    c002290e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022933:	89 f8                	mov    eax,edi
c0022935:	5b                   	pop    ebx
c0022936:	5e                   	pop    esi
c0022937:	5f                   	pop    edi
c0022938:	5d                   	pop    ebp
c0022939:	c3                   	ret    
c002293a:	5b                   	pop    ebx
c002293b:	31 c0                	xor    eax,eax
c002293d:	5e                   	pop    esi
c002293e:	5f                   	pop    edi
c002293f:	5d                   	pop    ebp
c0022940:	c3                   	ret    
c0022941:	b8 01 00 00 00       	mov    eax,0x1
c0022946:	eb ed                	jmp    c0022935 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022948 <SoundDevice::SoundDevice(char const*)>:
c0022948:	83 ec 1c             	sub    esp,0x1c
c002294b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002294f:	83 ec 08             	sub    esp,0x8
c0022952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022956:	50                   	push   eax
c0022957:	e8 7e 17 ff ff       	call   c00140da <Device::Device(char const*)>
c002295c:	83 c4 10             	add    esp,0x10
c002295f:	ba ec d5 02 c0       	mov    edx,0xc002d5ec
c0022964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022968:	89 10                	mov    DWORD PTR [eax],edx
c002296a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002296e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002297c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022986:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002298e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022993:	7f 19                	jg     c00229ae <SoundDevice::SoundDevice(char const*)+0x66>
c0022995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022999:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002299d:	83 c2 54             	add    edx,0x54
c00229a0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00229a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00229ac:	eb e0                	jmp    c002298e <SoundDevice::SoundDevice(char const*)+0x46>
c00229ae:	90                   	nop
c00229af:	83 c4 1c             	add    esp,0x1c
c00229b2:	c3                   	ret    
c00229b3:	90                   	nop

c00229b4 <SoundDevice::~SoundDevice()>:
c00229b4:	53                   	push   ebx
c00229b5:	83 ec 18             	sub    esp,0x18
c00229b8:	ba ec d5 02 c0       	mov    edx,0xc002d5ec
c00229bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229c1:	89 10                	mov    DWORD PTR [eax],edx
c00229c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00229cb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00229d0:	7f 46                	jg     c0022a18 <SoundDevice::~SoundDevice()+0x64>
c00229d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00229da:	83 c2 54             	add    edx,0x54
c00229dd:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00229e1:	85 c0                	test   eax,eax
c00229e3:	74 2d                	je     c0022a12 <SoundDevice::~SoundDevice()+0x5e>
c00229e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00229ed:	83 c2 54             	add    edx,0x54
c00229f0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00229f4:	85 db                	test   ebx,ebx
c00229f6:	74 1a                	je     c0022a12 <SoundDevice::~SoundDevice()+0x5e>
c00229f8:	83 ec 0c             	sub    esp,0xc
c00229fb:	53                   	push   ebx
c00229fc:	e8 db fc ff ff       	call   c00226dc <SoundChannel::~SoundChannel()>
c0022a01:	83 c4 10             	add    esp,0x10
c0022a04:	83 ec 08             	sub    esp,0x8
c0022a07:	6a 2c                	push   0x2c
c0022a09:	53                   	push   ebx
c0022a0a:	e8 ae ff fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0022a0f:	83 c4 10             	add    esp,0x10
c0022a12:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022a16:	eb b3                	jmp    c00229cb <SoundDevice::~SoundDevice()+0x17>
c0022a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a1c:	83 ec 0c             	sub    esp,0xc
c0022a1f:	50                   	push   eax
c0022a20:	e8 7f 13 ff ff       	call   c0013da4 <Device::~Device()>
c0022a25:	83 c4 10             	add    esp,0x10
c0022a28:	90                   	nop
c0022a29:	83 c4 18             	add    esp,0x18
c0022a2c:	5b                   	pop    ebx
c0022a2d:	c3                   	ret    

c0022a2e <SoundDevice::~SoundDevice()>:
c0022a2e:	83 ec 0c             	sub    esp,0xc
c0022a31:	83 ec 0c             	sub    esp,0xc
c0022a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a38:	e8 77 ff ff ff       	call   c00229b4 <SoundDevice::~SoundDevice()>
c0022a3d:	83 c4 10             	add    esp,0x10
c0022a40:	83 ec 08             	sub    esp,0x8
c0022a43:	68 e4 01 00 00       	push   0x1e4
c0022a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a4c:	e8 6c ff fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0022a51:	83 c4 10             	add    esp,0x10
c0022a54:	83 c4 0c             	add    esp,0xc
c0022a57:	c3                   	ret    

c0022a58 <SoundDevice::getFreeChannelNum()>:
c0022a58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022a5c:	31 c0                	xor    eax,eax
c0022a5e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022a66:	74 09                	je     c0022a71 <SoundDevice::getFreeChannelNum()+0x19>
c0022a68:	40                   	inc    eax
c0022a69:	83 f8 20             	cmp    eax,0x20
c0022a6c:	75 f0                	jne    c0022a5e <SoundDevice::getFreeChannelNum()+0x6>
c0022a6e:	83 c8 ff             	or     eax,0xffffffff
c0022a71:	c3                   	ret    

c0022a72 <SoundDevice::addChannel(SoundChannel*)>:
c0022a72:	56                   	push   esi
c0022a73:	53                   	push   ebx
c0022a74:	51                   	push   ecx
c0022a75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022a79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022a7d:	53                   	push   ebx
c0022a7e:	e8 d5 ff ff ff       	call   c0022a58 <SoundDevice::getFreeChannelNum()>
c0022a83:	5a                   	pop    edx
c0022a84:	83 f8 ff             	cmp    eax,0xffffffff
c0022a87:	74 51                	je     c0022ada <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022a89:	85 f6                	test   esi,esi
c0022a8b:	74 4d                	je     c0022ada <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022a8d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022a94:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022a9b:	75 30                	jne    c0022acd <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022a9d:	83 ec 0c             	sub    esp,0xc
c0022aa0:	56                   	push   esi
c0022aa1:	e8 52 fc ff ff       	call   c00226f8 <SoundChannel::getSampleRate()>
c0022aa6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022aac:	89 34 24             	mov    DWORD PTR [esp],esi
c0022aaf:	e8 4c fc ff ff       	call   c0022700 <SoundChannel::getBits()>
c0022ab4:	83 c4 0c             	add    esp,0xc
c0022ab7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022abd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022abf:	50                   	push   eax
c0022ac0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022ac6:	53                   	push   ebx
c0022ac7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022aca:	83 c4 10             	add    esp,0x10
c0022acd:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022ad3:	b8 01 00 00 00       	mov    eax,0x1
c0022ad8:	eb 03                	jmp    c0022add <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022ada:	83 c8 ff             	or     eax,0xffffffff
c0022add:	5a                   	pop    edx
c0022ade:	5b                   	pop    ebx
c0022adf:	5e                   	pop    esi
c0022ae0:	c3                   	ret    
c0022ae1:	90                   	nop

c0022ae2 <SoundDevice::removeChannel(int)>:
c0022ae2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aea:	83 fa 1f             	cmp    edx,0x1f
c0022aed:	77 23                	ja     c0022b12 <SoundDevice::removeChannel(int)+0x30>
c0022aef:	8d 14 90             	lea    edx,[eax+edx*4]
c0022af2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022af9:	74 17                	je     c0022b12 <SoundDevice::removeChannel(int)+0x30>
c0022afb:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022b05:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022b0b:	75 05                	jne    c0022b12 <SoundDevice::removeChannel(int)+0x30>
c0022b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b0f:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022b12:	c3                   	ret    
c0022b13:	90                   	nop

c0022b14 <SoundDevice::floatTo16(float*, short*, int)>:
c0022b14:	57                   	push   edi
c0022b15:	56                   	push   esi
c0022b16:	53                   	push   ebx
c0022b17:	31 db                	xor    ebx,ebx
c0022b19:	83 ec 10             	sub    esp,0x10
c0022b1c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022b20:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022b24:	0f 8d d0 00 00 00    	jge    c0022bfa <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022b2a:	83 ec 0c             	sub    esp,0xc
c0022b2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b31:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022b34:	e8 f6 64 00 00       	call   c002902f <__extendsfdf2>
c0022b39:	83 c4 10             	add    esp,0x10
c0022b3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b44:	68 00 00 f0 3f       	push   0x3ff00000
c0022b49:	6a 00                	push   0x0
c0022b4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b53:	e8 63 54 00 00       	call   c0027fbb <__adddf3>
c0022b58:	83 c4 10             	add    esp,0x10
c0022b5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b63:	68 00 00 e0 3f       	push   0x3fe00000
c0022b68:	6a 00                	push   0x0
c0022b6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b72:	e8 c1 5a 00 00       	call   c0028638 <__muldf3>
c0022b77:	83 c4 10             	add    esp,0x10
c0022b7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b82:	68 c0 ff df 40       	push   0x40dfffc0
c0022b87:	6a 00                	push   0x0
c0022b89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b91:	e8 a2 5a 00 00       	call   c0028638 <__muldf3>
c0022b96:	59                   	pop    ecx
c0022b97:	5f                   	pop    edi
c0022b98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022b9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022ba0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ba4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ba8:	e8 5e 63 00 00       	call   c0028f0b <__truncdfsf2>
c0022bad:	5a                   	pop    edx
c0022bae:	89 c7                	mov    edi,eax
c0022bb0:	59                   	pop    ecx
c0022bb1:	68 00 fe ff 46       	push   0x46fffe00
c0022bb6:	50                   	push   eax
c0022bb7:	e8 f9 53 00 00       	call   c0027fb5 <__gesf2>
c0022bbc:	83 c4 10             	add    esp,0x10
c0022bbf:	85 c0                	test   eax,eax
c0022bc1:	78 08                	js     c0022bcb <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022bc3:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022bc9:	eb 29                	jmp    c0022bf4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022bcb:	50                   	push   eax
c0022bcc:	50                   	push   eax
c0022bcd:	6a 00                	push   0x0
c0022bcf:	57                   	push   edi
c0022bd0:	e8 e4 53 00 00       	call   c0027fb9 <__lesf2>
c0022bd5:	83 c4 10             	add    esp,0x10
c0022bd8:	85 c0                	test   eax,eax
c0022bda:	7f 08                	jg     c0022be4 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022bdc:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022be2:	eb 10                	jmp    c0022bf4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022be4:	83 ec 0c             	sub    esp,0xc
c0022be7:	57                   	push   edi
c0022be8:	e8 df 64 00 00       	call   c00290cc <lrintf>
c0022bed:	83 c4 10             	add    esp,0x10
c0022bf0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022bf4:	43                   	inc    ebx
c0022bf5:	e9 26 ff ff ff       	jmp    c0022b20 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022bfa:	83 c4 10             	add    esp,0x10
c0022bfd:	5b                   	pop    ebx
c0022bfe:	5e                   	pop    esi
c0022bff:	5f                   	pop    edi
c0022c00:	c3                   	ret    
c0022c01:	90                   	nop

c0022c02 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022c02:	57                   	push   edi
c0022c03:	56                   	push   esi
c0022c04:	53                   	push   ebx
c0022c05:	31 db                	xor    ebx,ebx
c0022c07:	83 ec 10             	sub    esp,0x10
c0022c0a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022c0e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022c12:	0f 8d cb 00 00 00    	jge    c0022ce3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022c18:	83 ec 0c             	sub    esp,0xc
c0022c1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022c22:	e8 08 64 00 00       	call   c002902f <__extendsfdf2>
c0022c27:	83 c4 10             	add    esp,0x10
c0022c2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c32:	68 00 00 f0 3f       	push   0x3ff00000
c0022c37:	6a 00                	push   0x0
c0022c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c41:	e8 75 53 00 00       	call   c0027fbb <__adddf3>
c0022c46:	83 c4 10             	add    esp,0x10
c0022c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022c4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c51:	68 00 00 e0 3f       	push   0x3fe00000
c0022c56:	6a 00                	push   0x0
c0022c58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c60:	e8 d3 59 00 00       	call   c0028638 <__muldf3>
c0022c65:	83 c4 10             	add    esp,0x10
c0022c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c70:	68 00 00 60 40       	push   0x40600000
c0022c75:	6a 00                	push   0x0
c0022c77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c7f:	e8 b4 59 00 00       	call   c0028638 <__muldf3>
c0022c84:	59                   	pop    ecx
c0022c85:	5f                   	pop    edi
c0022c86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c8a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022c8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c96:	e8 70 62 00 00       	call   c0028f0b <__truncdfsf2>
c0022c9b:	5a                   	pop    edx
c0022c9c:	89 c7                	mov    edi,eax
c0022c9e:	59                   	pop    ecx
c0022c9f:	68 00 00 fe 42       	push   0x42fe0000
c0022ca4:	50                   	push   eax
c0022ca5:	e8 0b 53 00 00       	call   c0027fb5 <__gesf2>
c0022caa:	83 c4 10             	add    esp,0x10
c0022cad:	85 c0                	test   eax,eax
c0022caf:	78 06                	js     c0022cb7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022cb1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022cb5:	eb 26                	jmp    c0022cdd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022cb7:	50                   	push   eax
c0022cb8:	50                   	push   eax
c0022cb9:	6a 00                	push   0x0
c0022cbb:	57                   	push   edi
c0022cbc:	e8 f8 52 00 00       	call   c0027fb9 <__lesf2>
c0022cc1:	83 c4 10             	add    esp,0x10
c0022cc4:	85 c0                	test   eax,eax
c0022cc6:	7f 06                	jg     c0022cce <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022cc8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022ccc:	eb 0f                	jmp    c0022cdd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022cce:	83 ec 0c             	sub    esp,0xc
c0022cd1:	57                   	push   edi
c0022cd2:	e8 f5 63 00 00       	call   c00290cc <lrintf>
c0022cd7:	83 c4 10             	add    esp,0x10
c0022cda:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022cdd:	43                   	inc    ebx
c0022cde:	e9 2b ff ff ff       	jmp    c0022c0e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ce3:	83 c4 10             	add    esp,0x10
c0022ce6:	5b                   	pop    ebx
c0022ce7:	5e                   	pop    esi
c0022ce8:	5f                   	pop    edi
c0022ce9:	c3                   	ret    

c0022cea <SoundDevice::getAudio(int, float*, float*)>:
c0022cea:	55                   	push   ebp
c0022ceb:	57                   	push   edi
c0022cec:	56                   	push   esi
c0022ced:	53                   	push   ebx
c0022cee:	83 ec 28             	sub    esp,0x28
c0022cf1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022cf5:	68 f0 d4 02 c0       	push   0xc002d4f0
c0022cfa:	e8 9e fd fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022cff:	59                   	pop    ecx
c0022d00:	5e                   	pop    esi
c0022d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022d05:	68 07 d5 02 c0       	push   0xc002d507
c0022d0a:	e8 8e fd fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022d0f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022d13:	83 c4 0c             	add    esp,0xc
c0022d16:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022d1d:	56                   	push   esi
c0022d1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022d22:	68 29 d5 02 c0       	push   0xc002d529
c0022d27:	e8 71 fd fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022d2c:	83 c4 0c             	add    esp,0xc
c0022d2f:	56                   	push   esi
c0022d30:	31 f6                	xor    esi,esi
c0022d32:	6a 00                	push   0x0
c0022d34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022d38:	e8 13 da fd ff       	call   c0000750 <memset>
c0022d3d:	83 c4 10             	add    esp,0x10
c0022d40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d48:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022d50:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022d57:	85 c0                	test   eax,eax
c0022d59:	0f 84 d7 00 00 00    	je     c0022e36 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022d5f:	83 ec 0c             	sub    esp,0xc
c0022d62:	50                   	push   eax
c0022d63:	e8 a8 f9 ff ff       	call   c0022710 <SoundChannel::getBufferSize()>
c0022d68:	5f                   	pop    edi
c0022d69:	5d                   	pop    ebp
c0022d6a:	50                   	push   eax
c0022d6b:	68 4d d5 02 c0       	push   0xc002d54d
c0022d70:	e8 28 fd fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022d75:	58                   	pop    eax
c0022d76:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022d7d:	e8 86 f9 ff ff       	call   c0022708 <SoundChannel::getBufferUsed()>
c0022d82:	5a                   	pop    edx
c0022d83:	59                   	pop    ecx
c0022d84:	50                   	push   eax
c0022d85:	68 60 d5 02 c0       	push   0xc002d560
c0022d8a:	e8 0e fd fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022d8f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022d93:	99                   	cdq    
c0022d94:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022d9a:	50                   	push   eax
c0022d9b:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022da1:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022da5:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022dac:	e8 67 f9 ff ff       	call   c0022718 <SoundChannel::unbuffer(float*, int, int)>
c0022db1:	83 c4 14             	add    esp,0x14
c0022db4:	89 c5                	mov    ebp,eax
c0022db6:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022dbd:	e8 46 f9 ff ff       	call   c0022708 <SoundChannel::getBufferUsed()>
c0022dc2:	5f                   	pop    edi
c0022dc3:	5a                   	pop    edx
c0022dc4:	50                   	push   eax
c0022dc5:	68 78 d5 02 c0       	push   0xc002d578
c0022dca:	e8 ce fc fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022dcf:	56                   	push   esi
c0022dd0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022dd4:	99                   	cdq    
c0022dd5:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022ddb:	50                   	push   eax
c0022ddc:	55                   	push   ebp
c0022ddd:	68 90 d5 02 c0       	push   0xc002d590
c0022de2:	e8 b6 fc fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022de7:	83 c4 20             	add    esp,0x20
c0022dea:	31 c0                	xor    eax,eax
c0022dec:	39 e8                	cmp    eax,ebp
c0022dee:	7d 1e                	jge    c0022e0e <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022df0:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022df6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022dfa:	0f af d0             	imul   edx,eax
c0022dfd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022e00:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022e04:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022e08:	40                   	inc    eax
c0022e09:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022e0c:	eb de                	jmp    c0022dec <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022e0e:	50                   	push   eax
c0022e0f:	50                   	push   eax
c0022e10:	55                   	push   ebp
c0022e11:	68 bd d5 02 c0       	push   0xc002d5bd
c0022e16:	e8 82 fc fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022e1b:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022e1f:	5a                   	pop    edx
c0022e20:	59                   	pop    ecx
c0022e21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022e25:	68 ce d5 02 c0       	push   0xc002d5ce
c0022e2a:	e8 6e fc fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022e2f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022e33:	83 c4 10             	add    esp,0x10
c0022e36:	46                   	inc    esi
c0022e37:	83 fe 20             	cmp    esi,0x20
c0022e3a:	0f 85 10 ff ff ff    	jne    c0022d50 <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022e40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022e44:	83 c4 1c             	add    esp,0x1c
c0022e47:	5b                   	pop    ebx
c0022e48:	5e                   	pop    esi
c0022e49:	5f                   	pop    edi
c0022e4a:	5d                   	pop    ebp
c0022e4b:	c3                   	ret    

c0022e4c <PCI::open(int, int, void*)>:
c0022e4c:	83 ec 18             	sub    esp,0x18
c0022e4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022e57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0022e5f:	50                   	push   eax
c0022e60:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022e63:	31 c0                	xor    eax,eax
c0022e65:	83 c4 1c             	add    esp,0x1c
c0022e68:	c3                   	ret    
c0022e69:	90                   	nop

c0022e6a <PCI::close(int, int, void*)>:
c0022e6a:	31 c0                	xor    eax,eax
c0022e6c:	c3                   	ret    
c0022e6d:	90                   	nop

c0022e6e <PCI::PCI()>:
c0022e6e:	83 ec 0c             	sub    esp,0xc
c0022e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e75:	83 ec 08             	sub    esp,0x8
c0022e78:	68 1c d6 02 c0       	push   0xc002d61c
c0022e7d:	50                   	push   eax
c0022e7e:	e8 bb 08 ff ff       	call   c001373e <Bus::Bus(char const*)>
c0022e83:	83 c4 10             	add    esp,0x10
c0022e86:	ba 30 d7 02 c0       	mov    edx,0xc002d730
c0022e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e8f:	89 10                	mov    DWORD PTR [eax],edx
c0022e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e95:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ea3:	a3 24 34 03 c0       	mov    ds:0xc0033424,eax
c0022ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022eb2:	0f b6 d0             	movzx  edx,al
c0022eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022eca:	0f b6 d0             	movzx  edx,al
c0022ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ee0:	8d 50 01             	lea    edx,[eax+0x1]
c0022ee3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ee7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022eed:	0f b6 d0             	movzx  edx,al
c0022ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022ef8:	83 c9 c0             	or     ecx,0xffffffc0
c0022efb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022eff:	90                   	nop
c0022f00:	83 c4 0c             	add    esp,0xc
c0022f03:	c3                   	ret    

c0022f04 <PCI::readBAR8(unsigned int, int)>:
c0022f04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f0c:	f6 c2 01             	test   dl,0x1
c0022f0f:	74 07                	je     c0022f18 <PCI::readBAR8(unsigned int, int)+0x14>
c0022f11:	83 e2 fc             	and    edx,0xfffffffc
c0022f14:	01 c2                	add    edx,eax
c0022f16:	ec                   	in     al,dx
c0022f17:	c3                   	ret    
c0022f18:	83 e2 f0             	and    edx,0xfffffff0
c0022f1b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022f1e:	c3                   	ret    
c0022f1f:	90                   	nop

c0022f20 <PCI::readBAR16(unsigned int, int)>:
c0022f20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f28:	f6 c2 01             	test   dl,0x1
c0022f2b:	74 08                	je     c0022f35 <PCI::readBAR16(unsigned int, int)+0x15>
c0022f2d:	83 e2 fc             	and    edx,0xfffffffc
c0022f30:	01 c2                	add    edx,eax
c0022f32:	66 ed                	in     ax,dx
c0022f34:	c3                   	ret    
c0022f35:	83 e2 f0             	and    edx,0xfffffff0
c0022f38:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022f3c:	c3                   	ret    
c0022f3d:	90                   	nop

c0022f3e <PCI::readBAR32(unsigned int, int)>:
c0022f3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f46:	f6 c2 01             	test   dl,0x1
c0022f49:	74 07                	je     c0022f52 <PCI::readBAR32(unsigned int, int)+0x14>
c0022f4b:	83 e2 fc             	and    edx,0xfffffffc
c0022f4e:	01 c2                	add    edx,eax
c0022f50:	ed                   	in     eax,dx
c0022f51:	c3                   	ret    
c0022f52:	83 e2 f0             	and    edx,0xfffffff0
c0022f55:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022f58:	c3                   	ret    
c0022f59:	90                   	nop

c0022f5a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022f5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022f66:	f6 c2 01             	test   dl,0x1
c0022f69:	74 07                	je     c0022f72 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022f6b:	83 e2 fc             	and    edx,0xfffffffc
c0022f6e:	01 ca                	add    edx,ecx
c0022f70:	ee                   	out    dx,al
c0022f71:	c3                   	ret    
c0022f72:	83 e2 f0             	and    edx,0xfffffff0
c0022f75:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022f78:	c3                   	ret    
c0022f79:	90                   	nop

c0022f7a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022f7a:	57                   	push   edi
c0022f7b:	56                   	push   esi
c0022f7c:	53                   	push   ebx
c0022f7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f81:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022f85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022f89:	f6 c2 01             	test   dl,0x1
c0022f8c:	74 24                	je     c0022fb2 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022f8e:	89 d3                	mov    ebx,edx
c0022f90:	83 e3 fc             	and    ebx,0xfffffffc
c0022f93:	50                   	push   eax
c0022f94:	0f b7 c7             	movzx  eax,di
c0022f97:	50                   	push   eax
c0022f98:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022f9b:	50                   	push   eax
c0022f9c:	68 24 d6 02 c0       	push   0xc002d624
c0022fa1:	e8 f7 fa fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0022fa6:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022fa9:	89 f8                	mov    eax,edi
c0022fab:	66 ef                	out    dx,ax
c0022fad:	83 c4 10             	add    esp,0x10
c0022fb0:	eb 07                	jmp    c0022fb9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022fb2:	83 e2 f0             	and    edx,0xfffffff0
c0022fb5:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022fb9:	5b                   	pop    ebx
c0022fba:	5e                   	pop    esi
c0022fbb:	5f                   	pop    edi
c0022fbc:	c3                   	ret    
c0022fbd:	90                   	nop

c0022fbe <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022fbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022fc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022fc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fca:	f6 c2 01             	test   dl,0x1
c0022fcd:	74 07                	je     c0022fd6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022fcf:	83 e2 fc             	and    edx,0xfffffffc
c0022fd2:	01 ca                	add    edx,ecx
c0022fd4:	ef                   	out    dx,eax
c0022fd5:	c3                   	ret    
c0022fd6:	83 e2 f0             	and    edx,0xfffffff0
c0022fd9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022fdc:	c3                   	ret    
c0022fdd:	90                   	nop

c0022fde <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022fde:	55                   	push   ebp
c0022fdf:	57                   	push   edi
c0022fe0:	56                   	push   esi
c0022fe1:	53                   	push   ebx
c0022fe2:	83 ec 0c             	sub    esp,0xc
c0022fe5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022fe9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022fed:	89 f0                	mov    eax,esi
c0022fef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022ff3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff7:	3c 07                	cmp    al,0x7
c0022ff9:	76 10                	jbe    c002300b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022ffb:	83 ec 0c             	sub    esp,0xc
c0022ffe:	68 3b d6 02 c0       	push   0xc002d63b
c0023003:	e8 cb 74 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0023008:	83 c4 10             	add    esp,0x10
c002300b:	80 fb 0f             	cmp    bl,0xf
c002300e:	76 10                	jbe    c0023020 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0023010:	83 ec 0c             	sub    esp,0xc
c0023013:	68 6b d6 02 c0       	push   0xc002d66b
c0023018:	e8 b6 74 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c002301d:	83 c4 10             	add    esp,0x10
c0023020:	8d 04 36             	lea    eax,[esi+esi*1]
c0023023:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023028:	83 c8 f0             	or     eax,0xfffffff0
c002302b:	ee                   	out    dx,al
c002302c:	ba fa 0c 00 00       	mov    edx,0xcfa
c0023031:	89 e8                	mov    eax,ebp
c0023033:	ee                   	out    dx,al
c0023034:	83 c4 0c             	add    esp,0xc
c0023037:	89 d8                	mov    eax,ebx
c0023039:	66 81 e7 fc 00       	and    di,0xfc
c002303e:	5b                   	pop    ebx
c002303f:	c1 e0 08             	shl    eax,0x8
c0023042:	5e                   	pop    esi
c0023043:	09 f8                	or     eax,edi
c0023045:	5f                   	pop    edi
c0023046:	66 0d 00 c0          	or     ax,0xc000
c002304a:	5d                   	pop    ebp
c002304b:	c3                   	ret    

c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002304c:	57                   	push   edi
c002304d:	56                   	push   esi
c002304e:	53                   	push   ebx
c002304f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023057:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002305d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023061:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023065:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023069:	83 ff 01             	cmp    edi,0x1
c002306c:	75 3e                	jne    c00230ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002306e:	89 de                	mov    esi,ebx
c0023070:	0f b6 c0             	movzx  eax,al
c0023073:	81 e6 fc 00 00 00    	and    esi,0xfc
c0023079:	c1 e0 10             	shl    eax,0x10
c002307c:	0f b6 c9             	movzx  ecx,cl
c002307f:	09 f0                	or     eax,esi
c0023081:	c1 e1 08             	shl    ecx,0x8
c0023084:	0f b6 d2             	movzx  edx,dl
c0023087:	09 c8                	or     eax,ecx
c0023089:	c1 e2 0b             	shl    edx,0xb
c002308c:	09 d0                	or     eax,edx
c002308e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023093:	0d 00 00 00 80       	or     eax,0x80000000
c0023098:	ef                   	out    dx,eax
c0023099:	ba fc 0c 00 00       	mov    edx,0xcfc
c002309e:	ed                   	in     eax,dx
c002309f:	83 e3 02             	and    ebx,0x2
c00230a2:	0f b6 cb             	movzx  ecx,bl
c00230a5:	c1 e1 03             	shl    ecx,0x3
c00230a8:	d3 e8                	shr    eax,cl
c00230aa:	eb 43                	jmp    c00230ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00230ac:	83 ff 02             	cmp    edi,0x2
c00230af:	75 2c                	jne    c00230dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00230b1:	83 ec 0c             	sub    esp,0xc
c00230b4:	0f b6 c9             	movzx  ecx,cl
c00230b7:	0f b6 d2             	movzx  edx,dl
c00230ba:	0f b6 fb             	movzx  edi,bl
c00230bd:	0f b6 c0             	movzx  eax,al
c00230c0:	57                   	push   edi
c00230c1:	51                   	push   ecx
c00230c2:	52                   	push   edx
c00230c3:	50                   	push   eax
c00230c4:	56                   	push   esi
c00230c5:	e8 14 ff ff ff       	call   c0022fde <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230ca:	89 c2                	mov    edx,eax
c00230cc:	ed                   	in     eax,dx
c00230cd:	83 e3 02             	and    ebx,0x2
c00230d0:	83 c4 20             	add    esp,0x20
c00230d3:	0f b6 cb             	movzx  ecx,bl
c00230d6:	c1 e1 03             	shl    ecx,0x3
c00230d9:	d3 e8                	shr    eax,cl
c00230db:	eb 12                	jmp    c00230ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00230dd:	83 ec 0c             	sub    esp,0xc
c00230e0:	68 9b d6 02 c0       	push   0xc002d69b
c00230e5:	e8 e9 73 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00230ea:	83 c4 10             	add    esp,0x10
c00230ed:	31 c0                	xor    eax,eax
c00230ef:	5b                   	pop    ebx
c00230f0:	5e                   	pop    esi
c00230f1:	5f                   	pop    edi
c00230f2:	c3                   	ret    
c00230f3:	90                   	nop

c00230f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00230f4:	83 ec 18             	sub    esp,0x18
c00230f7:	6a 00                	push   0x0
c00230f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230fe:	50                   	push   eax
c00230ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023104:	50                   	push   eax
c0023105:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002310a:	50                   	push   eax
c002310b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002310f:	e8 38 ff ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023114:	83 c4 2c             	add    esp,0x2c
c0023117:	c3                   	ret    

c0023118 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0023118:	83 ec 18             	sub    esp,0x18
c002311b:	6a 0e                	push   0xe
c002311d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023122:	50                   	push   eax
c0023123:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023128:	50                   	push   eax
c0023129:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002312e:	50                   	push   eax
c002312f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023133:	e8 14 ff ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023138:	83 c4 2c             	add    esp,0x2c
c002313b:	0f b6 c0             	movzx  eax,al
c002313e:	c3                   	ret    
c002313f:	90                   	nop

c0023140 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023140:	55                   	push   ebp
c0023141:	57                   	push   edi
c0023142:	56                   	push   esi
c0023143:	53                   	push   ebx
c0023144:	83 ec 18             	sub    esp,0x18
c0023147:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002314c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0023151:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0023156:	6a 0a                	push   0xa
c0023158:	56                   	push   esi
c0023159:	55                   	push   ebp
c002315a:	57                   	push   edi
c002315b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002315f:	e8 e8 fe ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023164:	83 c4 14             	add    esp,0x14
c0023167:	89 c3                	mov    ebx,eax
c0023169:	6a 0a                	push   0xa
c002316b:	0f b6 db             	movzx  ebx,bl
c002316e:	56                   	push   esi
c002316f:	55                   	push   ebp
c0023170:	57                   	push   edi
c0023171:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023175:	e8 d2 fe ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002317a:	83 c4 2c             	add    esp,0x2c
c002317d:	25 00 ff 00 00       	and    eax,0xff00
c0023182:	09 d8                	or     eax,ebx
c0023184:	5b                   	pop    ebx
c0023185:	5e                   	pop    esi
c0023186:	5f                   	pop    edi
c0023187:	5d                   	pop    ebp
c0023188:	c3                   	ret    
c0023189:	90                   	nop

c002318a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002318a:	83 ec 18             	sub    esp,0x18
c002318d:	6a 08                	push   0x8
c002318f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023194:	50                   	push   eax
c0023195:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002319a:	50                   	push   eax
c002319b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231a0:	50                   	push   eax
c00231a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231a5:	e8 a2 fe ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231aa:	83 c4 2c             	add    esp,0x2c
c00231ad:	0f b6 c4             	movzx  eax,ah
c00231b0:	c3                   	ret    
c00231b1:	90                   	nop

c00231b2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00231b2:	83 ec 18             	sub    esp,0x18
c00231b5:	6a 08                	push   0x8
c00231b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231bc:	50                   	push   eax
c00231bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231c2:	50                   	push   eax
c00231c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231c8:	50                   	push   eax
c00231c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231cd:	e8 7a fe ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231d2:	83 c4 2c             	add    esp,0x2c
c00231d5:	c3                   	ret    

c00231d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00231d6:	83 ec 18             	sub    esp,0x18
c00231d9:	6a 3c                	push   0x3c
c00231db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231e0:	50                   	push   eax
c00231e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231e6:	50                   	push   eax
c00231e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231ec:	50                   	push   eax
c00231ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231f1:	e8 56 fe ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231f6:	83 c4 2c             	add    esp,0x2c
c00231f9:	c3                   	ret    

c00231fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00231fa:	83 ec 18             	sub    esp,0x18
c00231fd:	6a 18                	push   0x18
c00231ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023204:	50                   	push   eax
c0023205:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002320a:	50                   	push   eax
c002320b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023210:	50                   	push   eax
c0023211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023215:	e8 32 fe ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002321a:	83 c4 2c             	add    esp,0x2c
c002321d:	0f b6 c4             	movzx  eax,ah
c0023220:	c3                   	ret    
c0023221:	90                   	nop

c0023222 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023222:	55                   	push   ebp
c0023223:	57                   	push   edi
c0023224:	56                   	push   esi
c0023225:	53                   	push   ebx
c0023226:	83 ec 28             	sub    esp,0x28
c0023229:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002322d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023232:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023237:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002323c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023243:	8d 43 12             	lea    eax,[ebx+0x12]
c0023246:	83 c3 10             	add    ebx,0x10
c0023249:	0f b6 c0             	movzx  eax,al
c002324c:	0f b6 db             	movzx  ebx,bl
c002324f:	50                   	push   eax
c0023250:	51                   	push   ecx
c0023251:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0023255:	57                   	push   edi
c0023256:	55                   	push   ebp
c0023257:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002325b:	e8 ec fd ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023260:	83 c4 14             	add    esp,0x14
c0023263:	89 c6                	mov    esi,eax
c0023265:	53                   	push   ebx
c0023266:	c1 e6 10             	shl    esi,0x10
c0023269:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002326d:	51                   	push   ecx
c002326e:	57                   	push   edi
c002326f:	55                   	push   ebp
c0023270:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023274:	e8 d3 fd ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023279:	83 c4 3c             	add    esp,0x3c
c002327c:	0f b7 c0             	movzx  eax,ax
c002327f:	5b                   	pop    ebx
c0023280:	09 f0                	or     eax,esi
c0023282:	5e                   	pop    esi
c0023283:	5f                   	pop    edi
c0023284:	5d                   	pop    ebp
c0023285:	c3                   	ret    

c0023286 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023286:	55                   	push   ebp
c0023287:	57                   	push   edi
c0023288:	56                   	push   esi
c0023289:	53                   	push   ebx
c002328a:	83 ec 0c             	sub    esp,0xc
c002328d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0023291:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023295:	89 f5                	mov    ebp,esi
c0023297:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002329d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00232a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00232a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00232a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00232ad:	83 f9 01             	cmp    ecx,0x1
c00232b0:	75 5d                	jne    c002330f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00232b2:	0f b6 c8             	movzx  ecx,al
c00232b5:	0f b6 d2             	movzx  edx,dl
c00232b8:	c1 e1 10             	shl    ecx,0x10
c00232bb:	c1 e2 0b             	shl    edx,0xb
c00232be:	89 f0                	mov    eax,esi
c00232c0:	25 fc 00 00 00       	and    eax,0xfc
c00232c5:	09 c1                	or     ecx,eax
c00232c7:	89 e8                	mov    eax,ebp
c00232c9:	0f b6 c0             	movzx  eax,al
c00232cc:	c1 e0 08             	shl    eax,0x8
c00232cf:	09 c1                	or     ecx,eax
c00232d1:	09 d1                	or     ecx,edx
c00232d3:	ba f8 0c 00 00       	mov    edx,0xcf8
c00232d8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00232de:	89 c8                	mov    eax,ecx
c00232e0:	ef                   	out    dx,eax
c00232e1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00232e6:	ed                   	in     eax,dx
c00232e7:	0f b7 db             	movzx  ebx,bx
c00232ea:	83 e6 02             	and    esi,0x2
c00232ed:	74 0a                	je     c00232f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00232ef:	0f b7 d0             	movzx  edx,ax
c00232f2:	c1 e3 10             	shl    ebx,0x10
c00232f5:	09 d3                	or     ebx,edx
c00232f7:	eb 05                	jmp    c00232fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00232f9:	66 31 c0             	xor    ax,ax
c00232fc:	09 c3                	or     ebx,eax
c00232fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023303:	89 c8                	mov    eax,ecx
c0023305:	ef                   	out    dx,eax
c0023306:	ba fc 0c 00 00       	mov    edx,0xcfc
c002330b:	89 d8                	mov    eax,ebx
c002330d:	eb 41                	jmp    c0023350 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002330f:	83 f9 02             	cmp    ecx,0x2
c0023312:	75 45                	jne    c0023359 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0023314:	83 ec 0c             	sub    esp,0xc
c0023317:	0f b6 d2             	movzx  edx,dl
c002331a:	89 f1                	mov    ecx,esi
c002331c:	0f b6 c0             	movzx  eax,al
c002331f:	0f b6 f1             	movzx  esi,cl
c0023322:	89 e9                	mov    ecx,ebp
c0023324:	56                   	push   esi
c0023325:	0f b6 c9             	movzx  ecx,cl
c0023328:	51                   	push   ecx
c0023329:	52                   	push   edx
c002332a:	50                   	push   eax
c002332b:	57                   	push   edi
c002332c:	e8 ad fc ff ff       	call   c0022fde <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023331:	89 c2                	mov    edx,eax
c0023333:	ed                   	in     eax,dx
c0023334:	83 c4 20             	add    esp,0x20
c0023337:	0f b7 db             	movzx  ebx,bx
c002333a:	f6 c2 02             	test   dl,0x2
c002333d:	74 0c                	je     c002334b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002333f:	0f b7 c8             	movzx  ecx,ax
c0023342:	89 d8                	mov    eax,ebx
c0023344:	c1 e0 10             	shl    eax,0x10
c0023347:	09 c8                	or     eax,ecx
c0023349:	eb 05                	jmp    c0023350 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002334b:	66 31 c0             	xor    ax,ax
c002334e:	09 d8                	or     eax,ebx
c0023350:	ef                   	out    dx,eax
c0023351:	83 c4 0c             	add    esp,0xc
c0023354:	5b                   	pop    ebx
c0023355:	5e                   	pop    esi
c0023356:	5f                   	pop    edi
c0023357:	5d                   	pop    ebp
c0023358:	c3                   	ret    
c0023359:	c7 44 24 20 9b d6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d69b
c0023361:	83 c4 0c             	add    esp,0xc
c0023364:	5b                   	pop    ebx
c0023365:	5e                   	pop    esi
c0023366:	5f                   	pop    edi
c0023367:	5d                   	pop    ebp
c0023368:	e9 66 71 ff ff       	jmp    c001a4d3 <Krnl::panic(char const*)>
c002336d:	90                   	nop

c002336e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002336e:	55                   	push   ebp
c002336f:	57                   	push   edi
c0023370:	56                   	push   esi
c0023371:	53                   	push   ebx
c0023372:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023378:	80 3d 30 34 03 c0 00 	cmp    BYTE PTR ds:0xc0033430,0x0
c002337f:	0f 85 96 00 00 00    	jne    c002341b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c0023385:	83 ec 0c             	sub    esp,0xc
c0023388:	68 14 01 00 00       	push   0x114
c002338d:	e8 fa c4 fe ff       	call   c000f88c <malloc>
c0023392:	83 c4 0c             	add    esp,0xc
c0023395:	89 c3                	mov    ebx,eax
c0023397:	ff 35 30 26 03 c0    	push   DWORD PTR ds:0xc0032630
c002339d:	68 a1 d6 02 c0       	push   0xc002d6a1
c00233a2:	50                   	push   eax
c00233a3:	e8 54 fc fe ff       	call   c0012ffc <File::File(char const*, Process*)>
c00233a8:	5a                   	pop    edx
c00233a9:	59                   	pop    ecx
c00233aa:	6a 01                	push   0x1
c00233ac:	53                   	push   ebx
c00233ad:	e8 ae fc fe ff       	call   c0013060 <File::open(FileOpenMode)>
c00233b2:	83 c4 0c             	add    esp,0xc
c00233b5:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00233b9:	50                   	push   eax
c00233ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c00233be:	50                   	push   eax
c00233bf:	53                   	push   ebx
c00233c0:	e8 47 ff fe ff       	call   c001330c <File::stat(unsigned long long*, bool*)>
c00233c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00233c9:	40                   	inc    eax
c00233ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00233cd:	e8 ba c4 fe ff       	call   c000f88c <malloc>
c00233d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233d6:	a3 2c 34 03 c0       	mov    ds:0xc003342c,eax
c00233db:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00233df:	5e                   	pop    esi
c00233e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00233e2:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00233e6:	51                   	push   ecx
c00233e7:	50                   	push   eax
c00233e8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00233ec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00233f0:	53                   	push   ebx
c00233f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00233f4:	83 c4 14             	add    esp,0x14
c00233f7:	53                   	push   ebx
c00233f8:	e8 c1 fc fe ff       	call   c00130be <File::close()>
c00233fd:	5f                   	pop    edi
c00233fe:	5d                   	pop    ebp
c00233ff:	ff 35 2c 34 03 c0    	push   DWORD PTR ds:0xc003342c
c0023405:	68 ba d6 02 c0       	push   0xc002d6ba
c002340a:	e8 8e f6 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002340f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023413:	83 c4 10             	add    esp,0x10
c0023416:	a3 28 34 03 c0       	mov    ds:0xc0033428,eax
c002341b:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c0023420:	8b 15 2c 34 03 c0    	mov    edx,DWORD PTR ds:0xc003342c
c0023426:	89 04 24             	mov    DWORD PTR [esp],eax
c0023429:	31 ff                	xor    edi,edi
c002342b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023433:	31 f6                	xor    esi,esi
c0023435:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002343a:	31 db                	xor    ebx,ebx
c002343c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023444:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0023449:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023450:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023454:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002345b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002345f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023462:	0f 8e 6b 01 00 00    	jle    c00235d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0023468:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002346b:	d4 40                	aam    0x40
c002346d:	d5 39                	aad    0x39
c002346f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023473:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0023477:	d4 40                	aam    0x40
c0023479:	d5 39                	aad    0x39
c002347b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002347f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0023483:	d4 40                	aam    0x40
c0023485:	d5 39                	aad    0x39
c0023487:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002348b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002348f:	d4 40                	aam    0x40
c0023491:	d5 39                	aad    0x39
c0023493:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023497:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002349b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002349f:	3c 56                	cmp    al,0x56
c00234a1:	74 45                	je     c00234e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00234a3:	d4 40                	aam    0x40
c00234a5:	d5 39                	aad    0x39
c00234a7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00234aa:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00234ae:	0f b6 c9             	movzx  ecx,cl
c00234b1:	c1 e1 04             	shl    ecx,0x4
c00234b4:	d4 40                	aam    0x40
c00234b6:	d5 39                	aad    0x39
c00234b8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00234bb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00234bf:	0f b6 db             	movzx  ebx,bl
c00234c2:	09 cb                	or     ebx,ecx
c00234c4:	c1 e3 04             	shl    ebx,0x4
c00234c7:	d4 40                	aam    0x40
c00234c9:	d5 39                	aad    0x39
c00234cb:	8d 48 d0             	lea    ecx,[eax-0x30]
c00234ce:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00234d2:	0f b6 c9             	movzx  ecx,cl
c00234d5:	09 cb                	or     ebx,ecx
c00234d7:	c1 e3 04             	shl    ebx,0x4
c00234da:	89 d9                	mov    ecx,ebx
c00234dc:	d4 40                	aam    0x40
c00234de:	d5 39                	aad    0x39
c00234e0:	8d 58 d0             	lea    ebx,[eax-0x30]
c00234e3:	0f b6 db             	movzx  ebx,bl
c00234e6:	09 cb                	or     ebx,ecx
c00234e8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00234ec:	80 f9 44             	cmp    cl,0x44
c00234ef:	74 47                	je     c0023538 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c00234f1:	88 c8                	mov    al,cl
c00234f3:	d4 40                	aam    0x40
c00234f5:	d5 39                	aad    0x39
c00234f7:	83 e8 30             	sub    eax,0x30
c00234fa:	0f b6 e8             	movzx  ebp,al
c00234fd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023501:	c1 e5 04             	shl    ebp,0x4
c0023504:	d4 40                	aam    0x40
c0023506:	d5 39                	aad    0x39
c0023508:	83 e8 30             	sub    eax,0x30
c002350b:	0f b6 f0             	movzx  esi,al
c002350e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0023512:	09 ee                	or     esi,ebp
c0023514:	c1 e6 04             	shl    esi,0x4
c0023517:	d4 40                	aam    0x40
c0023519:	d5 39                	aad    0x39
c002351b:	83 e8 30             	sub    eax,0x30
c002351e:	0f b6 e8             	movzx  ebp,al
c0023521:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023525:	09 ee                	or     esi,ebp
c0023527:	c1 e6 04             	shl    esi,0x4
c002352a:	89 f5                	mov    ebp,esi
c002352c:	d4 40                	aam    0x40
c002352e:	d5 39                	aad    0x39
c0023530:	83 e8 30             	sub    eax,0x30
c0023533:	0f b6 f0             	movzx  esi,al
c0023536:	09 ee                	or     esi,ebp
c0023538:	83 c7 10             	add    edi,0x10
c002353b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002353f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023542:	3c 0a                	cmp    al,0xa
c0023544:	74 09                	je     c002354f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023546:	45                   	inc    ebp
c0023547:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002354a:	75 16                	jne    c0023562 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002354c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002354f:	3c 0a                	cmp    al,0xa
c0023551:	0f 94 c0             	sete   al
c0023554:	0f b6 c0             	movzx  eax,al
c0023557:	01 c7                	add    edi,eax
c0023559:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002355e:	75 0c                	jne    c002356c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c0023560:	eb 15                	jmp    c0023577 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023562:	47                   	inc    edi
c0023563:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023566:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002356a:	eb d3                	jmp    c002353f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002356c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0023571:	0f 85 e8 fe ff ff    	jne    c002345f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023577:	80 f9 44             	cmp    cl,0x44
c002357a:	74 0b                	je     c0023587 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c002357c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0023581:	0f 85 d8 fe ff ff    	jne    c002345f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023587:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002358b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002358f:	c1 e1 04             	shl    ecx,0x4
c0023592:	83 e8 30             	sub    eax,0x30
c0023595:	09 c8                	or     eax,ecx
c0023597:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c002359b:	0f 85 be fe ff ff    	jne    c002345f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235a1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00235a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00235a9:	c1 e1 04             	shl    ecx,0x4
c00235ac:	83 e8 30             	sub    eax,0x30
c00235af:	09 c8                	or     eax,ecx
c00235b1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00235b5:	0f 85 a4 fe ff ff    	jne    c002345f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235bb:	50                   	push   eax
c00235bc:	50                   	push   eax
c00235bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00235c1:	50                   	push   eax
c00235c2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00235c9:	e8 3e d2 fd ff       	call   c000080c <strcpy>
c00235ce:	83 c4 10             	add    esp,0x10
c00235d1:	eb 15                	jmp    c00235e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c00235d3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00235da:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00235e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00235e8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00235ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c00235f5:	5b                   	pop    ebx
c00235f6:	5e                   	pop    esi
c00235f7:	5f                   	pop    edi
c00235f8:	5d                   	pop    ebp
c00235f9:	c3                   	ret    

c00235fa <PCI::checkBus(unsigned char)>:
c00235fa:	56                   	push   esi
c00235fb:	53                   	push   ebx
c00235fc:	31 db                	xor    ebx,ebx
c00235fe:	51                   	push   ecx
c00235ff:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023604:	52                   	push   edx
c0023605:	53                   	push   ebx
c0023606:	43                   	inc    ebx
c0023607:	56                   	push   esi
c0023608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002360c:	e8 37 03 00 00       	call   c0023948 <PCI::checkDevice(unsigned char, unsigned char)>
c0023611:	83 c4 10             	add    esp,0x10
c0023614:	83 fb 20             	cmp    ebx,0x20
c0023617:	75 eb                	jne    c0023604 <PCI::checkBus(unsigned char)+0xa>
c0023619:	58                   	pop    eax
c002361a:	5b                   	pop    ebx
c002361b:	5e                   	pop    esi
c002361c:	c3                   	ret    
c002361d:	90                   	nop

c002361e <PCI::foundDevice(PCIDeviceInfo)>:
c002361e:	55                   	push   ebp
c002361f:	57                   	push   edi
c0023620:	56                   	push   esi
c0023621:	53                   	push   ebx
c0023622:	83 ec 1c             	sub    esp,0x1c
c0023625:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023629:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002362f:	0f 84 52 01 00 00    	je     c0023787 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023635:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023639:	66 81 f9 06 04       	cmp    cx,0x406
c002363e:	75 2c                	jne    c002366c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023640:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023645:	50                   	push   eax
c0023646:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002364b:	50                   	push   eax
c002364c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023651:	50                   	push   eax
c0023652:	56                   	push   esi
c0023653:	e8 a2 fb ff ff       	call   c00231fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023658:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002365c:	0f b6 c0             	movzx  eax,al
c002365f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023663:	83 c4 2c             	add    esp,0x2c
c0023666:	5b                   	pop    ebx
c0023667:	5e                   	pop    esi
c0023668:	5f                   	pop    edi
c0023669:	5d                   	pop    ebp
c002366a:	eb 8e                	jmp    c00235fa <PCI::checkBus(unsigned char)>
c002366c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023670:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002367a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002367e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023682:	88 d3                	mov    bl,dl
c0023684:	85 c0                	test   eax,eax
c0023686:	74 33                	je     c00236bb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023688:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002368b:	85 d2                	test   edx,edx
c002368d:	74 28                	je     c00236b7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002368f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023695:	31 ef                	xor    edi,ebp
c0023697:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002369d:	75 18                	jne    c00236b7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002369f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00236a3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00236a9:	75 0c                	jne    c00236b7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236ab:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00236b1:	0f 84 d0 00 00 00    	je     c0023787 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00236b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00236b9:	eb c9                	jmp    c0023684 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00236bb:	66 81 f9 01 06       	cmp    cx,0x601
c00236c0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00236c4:	75 19                	jne    c00236df <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00236c6:	83 ec 0c             	sub    esp,0xc
c00236c9:	68 64 01 00 00       	push   0x164
c00236ce:	e8 b9 c1 fe ff       	call   c000f88c <malloc>
c00236d3:	89 c5                	mov    ebp,eax
c00236d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00236d8:	e8 a1 0f 00 00       	call   c002467e <SATABus::SATABus()>
c00236dd:	eb 1e                	jmp    c00236fd <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00236df:	66 81 f9 01 01       	cmp    cx,0x101
c00236e4:	75 60                	jne    c0023746 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00236e6:	83 ec 0c             	sub    esp,0xc
c00236e9:	68 70 02 00 00       	push   0x270
c00236ee:	e8 99 c1 fe ff       	call   c000f88c <malloc>
c00236f3:	89 c5                	mov    ebp,eax
c00236f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00236f8:	e8 0f 03 00 00       	call   c0023a0c <IDE::IDE()>
c00236fd:	58                   	pop    eax
c00236fe:	5a                   	pop    edx
c00236ff:	55                   	push   ebp
c0023700:	56                   	push   esi
c0023701:	e8 d0 07 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c0023706:	83 ec 1c             	sub    esp,0x1c
c0023709:	b9 09 00 00 00       	mov    ecx,0x9
c002370e:	fc                   	cld    
c002370f:	89 e7                	mov    edi,esp
c0023711:	89 de                	mov    esi,ebx
c0023713:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023715:	55                   	push   ebp
c0023716:	e8 cd 06 ff ff       	call   c0013de8 <Device::preOpenPCI(PCIDeviceInfo)>
c002371b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002371e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023722:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002372a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023732:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002373a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002373d:	83 c4 4c             	add    esp,0x4c
c0023740:	5b                   	pop    ebx
c0023741:	5e                   	pop    esi
c0023742:	5f                   	pop    edi
c0023743:	5d                   	pop    ebp
c0023744:	ff e0                	jmp    eax
c0023746:	83 ec 0c             	sub    esp,0xc
c0023749:	68 58 01 00 00       	push   0x158
c002374e:	e8 39 c1 fe ff       	call   c000f88c <malloc>
c0023753:	89 c5                	mov    ebp,eax
c0023755:	58                   	pop    eax
c0023756:	5a                   	pop    edx
c0023757:	68 cc d6 02 c0       	push   0xc002d6cc
c002375c:	55                   	push   ebp
c002375d:	e8 7e 0a ff ff       	call   c00141e0 <DriverlessDevice::DriverlessDevice(char const*)>
c0023762:	59                   	pop    ecx
c0023763:	5f                   	pop    edi
c0023764:	55                   	push   ebp
c0023765:	56                   	push   esi
c0023766:	e8 6b 07 ff ff       	call   c0013ed6 <Device::addChild(Device*)>
c002376b:	b9 09 00 00 00       	mov    ecx,0x9
c0023770:	fc                   	cld    
c0023771:	89 df                	mov    edi,ebx
c0023773:	89 de                	mov    esi,ebx
c0023775:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023777:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002377b:	83 c4 2c             	add    esp,0x2c
c002377e:	5b                   	pop    ebx
c002377f:	5e                   	pop    esi
c0023780:	5f                   	pop    edi
c0023781:	5d                   	pop    ebp
c0023782:	e9 61 06 ff ff       	jmp    c0013de8 <Device::preOpenPCI(PCIDeviceInfo)>
c0023787:	83 c4 1c             	add    esp,0x1c
c002378a:	5b                   	pop    ebx
c002378b:	5e                   	pop    esi
c002378c:	5f                   	pop    edi
c002378d:	5d                   	pop    ebp
c002378e:	c3                   	ret    
c002378f:	90                   	nop

c0023790 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023790:	55                   	push   ebp
c0023791:	57                   	push   edi
c0023792:	56                   	push   esi
c0023793:	53                   	push   ebx
c0023794:	83 ec 68             	sub    esp,0x68
c0023797:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002379b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00237a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00237a6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00237ad:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00237b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00237b6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00237bd:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00237c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00237c6:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00237cb:	6a 0c                	push   0xc
c00237cd:	57                   	push   edi
c00237ce:	53                   	push   ebx
c00237cf:	56                   	push   esi
c00237d0:	55                   	push   ebp
c00237d1:	e8 76 f8 ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00237d6:	83 c4 20             	add    esp,0x20
c00237d9:	57                   	push   edi
c00237da:	53                   	push   ebx
c00237db:	56                   	push   esi
c00237dc:	55                   	push   ebp
c00237dd:	e8 5e f9 ff ff       	call   c0023140 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00237e2:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00237e7:	57                   	push   edi
c00237e8:	53                   	push   ebx
c00237e9:	56                   	push   esi
c00237ea:	55                   	push   ebp
c00237eb:	e8 e6 f9 ff ff       	call   c00231d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00237f0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00237f4:	83 c4 14             	add    esp,0x14
c00237f7:	6a 3c                	push   0x3c
c00237f9:	57                   	push   edi
c00237fa:	53                   	push   ebx
c00237fb:	56                   	push   esi
c00237fc:	55                   	push   ebp
c00237fd:	e8 4a f8 ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023802:	0f b6 c4             	movzx  eax,ah
c0023805:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023809:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002380d:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0023811:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0023816:	83 c4 20             	add    esp,0x20
c0023819:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002381f:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023826:	74 7c                	je     c00238a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023828:	31 c0                	xor    eax,eax
c002382a:	8b 15 e8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e8
c0023830:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023836:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002383c:	7e 66                	jle    c00238a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002383e:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023841:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023848:	39 cb                	cmp    ebx,ecx
c002384a:	75 55                	jne    c00238a1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002384c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023853:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023857:	75 48                	jne    c00238a1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023859:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002385d:	83 ec 0c             	sub    esp,0xc
c0023860:	68 e6 d6 02 c0       	push   0xc002d6e6
c0023865:	e8 33 f2 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002386a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002386e:	8b 15 e8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e8
c0023874:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023878:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002387e:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023886:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c002388a:	52                   	push   edx
c002388b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002388f:	53                   	push   ebx
c0023890:	68 0b d7 02 c0       	push   0xc002d70b
c0023895:	e8 03 f2 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002389a:	83 c4 20             	add    esp,0x20
c002389d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238a1:	40                   	inc    eax
c00238a2:	eb 86                	jmp    c002382a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00238a4:	31 d2                	xor    edx,edx
c00238a6:	83 ec 0c             	sub    esp,0xc
c00238a9:	57                   	push   edi
c00238aa:	53                   	push   ebx
c00238ab:	56                   	push   esi
c00238ac:	52                   	push   edx
c00238ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00238b1:	55                   	push   ebp
c00238b2:	e8 6b f9 ff ff       	call   c0023222 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00238b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00238bb:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00238bf:	42                   	inc    edx
c00238c0:	83 c4 20             	add    esp,0x20
c00238c3:	83 fa 06             	cmp    edx,0x6
c00238c6:	75 de                	jne    c00238a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00238c8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00238cd:	83 ec 0c             	sub    esp,0xc
c00238d0:	86 e0                	xchg   al,ah
c00238d2:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00238d7:	6a 02                	push   0x2
c00238d9:	57                   	push   edi
c00238da:	53                   	push   ebx
c00238db:	56                   	push   esi
c00238dc:	55                   	push   ebp
c00238dd:	e8 6a f7 ff ff       	call   c002304c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00238e2:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00238e7:	83 c4 20             	add    esp,0x20
c00238ea:	57                   	push   edi
c00238eb:	53                   	push   ebx
c00238ec:	56                   	push   esi
c00238ed:	55                   	push   ebp
c00238ee:	e8 97 f8 ff ff       	call   c002318a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00238f3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00238f7:	57                   	push   edi
c00238f8:	53                   	push   ebx
c00238f9:	56                   	push   esi
c00238fa:	55                   	push   ebp
c00238fb:	e8 f4 f7 ff ff       	call   c00230f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023900:	b9 09 00 00 00       	mov    ecx,0x9
c0023905:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002390a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c002390e:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023912:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023916:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002391a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002391e:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023922:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023926:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002392a:	83 ec 0c             	sub    esp,0xc
c002392d:	fc                   	cld    
c002392e:	89 e7                	mov    edi,esp
c0023930:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023934:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023936:	55                   	push   ebp
c0023937:	e8 e2 fc ff ff       	call   c002361e <PCI::foundDevice(PCIDeviceInfo)>
c002393c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023942:	5b                   	pop    ebx
c0023943:	5e                   	pop    esi
c0023944:	5f                   	pop    edi
c0023945:	5d                   	pop    ebp
c0023946:	c3                   	ret    
c0023947:	90                   	nop

c0023948 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023948:	55                   	push   ebp
c0023949:	57                   	push   edi
c002394a:	56                   	push   esi
c002394b:	53                   	push   ebx
c002394c:	83 ec 0c             	sub    esp,0xc
c002394f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023953:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023958:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002395d:	6a 00                	push   0x0
c002395f:	56                   	push   esi
c0023960:	57                   	push   edi
c0023961:	55                   	push   ebp
c0023962:	e8 8d f7 ff ff       	call   c00230f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023967:	6a 00                	push   0x0
c0023969:	56                   	push   esi
c002396a:	57                   	push   edi
c002396b:	55                   	push   ebp
c002396c:	e8 1f fe ff ff       	call   c0023790 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023971:	83 c4 20             	add    esp,0x20
c0023974:	6a 00                	push   0x0
c0023976:	56                   	push   esi
c0023977:	57                   	push   edi
c0023978:	55                   	push   ebp
c0023979:	e8 9a f7 ff ff       	call   c0023118 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002397e:	83 c4 10             	add    esp,0x10
c0023981:	84 c0                	test   al,al
c0023983:	79 27                	jns    c00239ac <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023985:	bb 01 00 00 00       	mov    ebx,0x1
c002398a:	53                   	push   ebx
c002398b:	56                   	push   esi
c002398c:	57                   	push   edi
c002398d:	55                   	push   ebp
c002398e:	e8 61 f7 ff ff       	call   c00230f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023993:	83 c4 10             	add    esp,0x10
c0023996:	66 40                	inc    ax
c0023998:	74 0c                	je     c00239a6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002399a:	53                   	push   ebx
c002399b:	56                   	push   esi
c002399c:	57                   	push   edi
c002399d:	55                   	push   ebp
c002399e:	e8 ed fd ff ff       	call   c0023790 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00239a3:	83 c4 10             	add    esp,0x10
c00239a6:	43                   	inc    ebx
c00239a7:	83 fb 08             	cmp    ebx,0x8
c00239aa:	75 de                	jne    c002398a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00239ac:	83 c4 0c             	add    esp,0xc
c00239af:	5b                   	pop    ebx
c00239b0:	5e                   	pop    esi
c00239b1:	5f                   	pop    edi
c00239b2:	5d                   	pop    ebp
c00239b3:	c3                   	ret    

c00239b4 <PCI::detect()>:
c00239b4:	56                   	push   esi
c00239b5:	53                   	push   ebx
c00239b6:	53                   	push   ebx
c00239b7:	31 db                	xor    ebx,ebx
c00239b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00239bd:	6a 00                	push   0x0
c00239bf:	6a 00                	push   0x0
c00239c1:	6a 00                	push   0x0
c00239c3:	56                   	push   esi
c00239c4:	e8 4f f7 ff ff       	call   c0023118 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00239c9:	83 c4 10             	add    esp,0x10
c00239cc:	a8 80                	test   al,0x80
c00239ce:	75 21                	jne    c00239f1 <PCI::detect()+0x3d>
c00239d0:	51                   	push   ecx
c00239d1:	51                   	push   ecx
c00239d2:	6a 00                	push   0x0
c00239d4:	56                   	push   esi
c00239d5:	e8 20 fc ff ff       	call   c00235fa <PCI::checkBus(unsigned char)>
c00239da:	83 c4 10             	add    esp,0x10
c00239dd:	eb 24                	jmp    c0023a03 <PCI::detect()+0x4f>
c00239df:	52                   	push   edx
c00239e0:	52                   	push   edx
c00239e1:	53                   	push   ebx
c00239e2:	43                   	inc    ebx
c00239e3:	56                   	push   esi
c00239e4:	e8 11 fc ff ff       	call   c00235fa <PCI::checkBus(unsigned char)>
c00239e9:	83 c4 10             	add    esp,0x10
c00239ec:	83 fb 08             	cmp    ebx,0x8
c00239ef:	74 12                	je     c0023a03 <PCI::detect()+0x4f>
c00239f1:	53                   	push   ebx
c00239f2:	6a 00                	push   0x0
c00239f4:	6a 00                	push   0x0
c00239f6:	56                   	push   esi
c00239f7:	e8 f8 f6 ff ff       	call   c00230f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00239fc:	83 c4 10             	add    esp,0x10
c00239ff:	66 40                	inc    ax
c0023a01:	74 dc                	je     c00239df <PCI::detect()+0x2b>
c0023a03:	58                   	pop    eax
c0023a04:	5b                   	pop    ebx
c0023a05:	5e                   	pop    esi
c0023a06:	c3                   	ret    
c0023a07:	90                   	nop

c0023a08 <IDE::close(int, int, void*)>:
c0023a08:	83 c8 ff             	or     eax,0xffffffff
c0023a0b:	c3                   	ret    

c0023a0c <IDE::IDE()>:
c0023a0c:	83 ec 0c             	sub    esp,0xc
c0023a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a13:	83 ec 08             	sub    esp,0x8
c0023a16:	68 54 d7 02 c0       	push   0xc002d754
c0023a1b:	50                   	push   eax
c0023a1c:	e8 63 08 ff ff       	call   c0014284 <HardDiskController::HardDiskController(char const*)>
c0023a21:	83 c4 10             	add    esp,0x10
c0023a24:	ba 94 d9 02 c0       	mov    edx,0xc002d994
c0023a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a2d:	89 10                	mov    DWORD PTR [eax],edx
c0023a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a33:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023a3a:	90                   	nop
c0023a3b:	83 c4 0c             	add    esp,0xc
c0023a3e:	c3                   	ret    
c0023a3f:	90                   	nop

c0023a40 <IDE::prepareInterrupt(unsigned char)>:
c0023a40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023a45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023a49:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023a51:	c3                   	ret    

c0023a52 <selectDrive(unsigned char, unsigned char)>:
c0023a52:	c3                   	ret    
c0023a53:	90                   	nop

c0023a54 <IDE::getBase(unsigned char)>:
c0023a54:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023a59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a5d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023a65:	c3                   	ret    

c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023a66:	55                   	push   ebp
c0023a67:	57                   	push   edi
c0023a68:	56                   	push   esi
c0023a69:	53                   	push   ebx
c0023a6a:	83 ec 1c             	sub    esp,0x1c
c0023a6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023a71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a75:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023a78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023a7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a80:	80 f9 03             	cmp    cl,0x3
c0023a83:	77 51                	ja     c0023ad6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023a85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a89:	0f b6 f2             	movzx  esi,dl
c0023a8c:	0f b6 db             	movzx  ebx,bl
c0023a8f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023a92:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023a96:	83 ca 80             	or     edx,0xffffff80
c0023a99:	0f b6 d2             	movzx  edx,dl
c0023a9c:	52                   	push   edx
c0023a9d:	6a 0c                	push   0xc
c0023a9f:	56                   	push   esi
c0023aa0:	57                   	push   edi
c0023aa1:	e8 c0 ff ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aa6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023aab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023aaf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023ab3:	ee                   	out    dx,al
c0023ab4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023ab9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023abd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023ac1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ac5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023acd:	83 c4 2c             	add    esp,0x2c
c0023ad0:	5b                   	pop    ebx
c0023ad1:	5e                   	pop    esi
c0023ad2:	5f                   	pop    edi
c0023ad3:	5d                   	pop    ebp
c0023ad4:	eb 90                	jmp    c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ad6:	80 fb 07             	cmp    bl,0x7
c0023ad9:	77 12                	ja     c0023aed <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023adb:	0f b6 d2             	movzx  edx,dl
c0023ade:	0f b6 db             	movzx  ebx,bl
c0023ae1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023ae9:	89 da                	mov    edx,ebx
c0023aeb:	eb 2f                	jmp    c0023b1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023aed:	80 fb 0d             	cmp    bl,0xd
c0023af0:	77 13                	ja     c0023b05 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023af2:	0f b6 d2             	movzx  edx,dl
c0023af5:	0f b6 db             	movzx  ebx,bl
c0023af8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023aff:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023b03:	eb 17                	jmp    c0023b1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023b05:	80 fb 15             	cmp    bl,0x15
c0023b08:	77 13                	ja     c0023b1d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023b0a:	0f b6 d2             	movzx  edx,dl
c0023b0d:	0f b6 db             	movzx  ebx,bl
c0023b10:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023b18:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023b1c:	ee                   	out    dx,al
c0023b1d:	83 c4 1c             	add    esp,0x1c
c0023b20:	5b                   	pop    ebx
c0023b21:	5e                   	pop    esi
c0023b22:	5f                   	pop    edi
c0023b23:	5d                   	pop    ebp
c0023b24:	c3                   	ret    
c0023b25:	90                   	nop

c0023b26 <IDE::read(unsigned char, unsigned char)>:
c0023b26:	55                   	push   ebp
c0023b27:	57                   	push   edi
c0023b28:	56                   	push   esi
c0023b29:	53                   	push   ebx
c0023b2a:	83 ec 1c             	sub    esp,0x1c
c0023b2d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023b31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b35:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023b38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023b3c:	3c 03                	cmp    al,0x3
c0023b3e:	77 43                	ja     c0023b83 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023b40:	0f b6 f2             	movzx  esi,dl
c0023b43:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023b46:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023b4a:	83 c8 80             	or     eax,0xffffff80
c0023b4d:	0f b6 c0             	movzx  eax,al
c0023b50:	50                   	push   eax
c0023b51:	6a 0c                	push   0xc
c0023b53:	56                   	push   esi
c0023b54:	57                   	push   edi
c0023b55:	e8 0c ff ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b5a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023b5f:	0f b6 c3             	movzx  eax,bl
c0023b62:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023b66:	ec                   	in     al,dx
c0023b67:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023b6b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023b70:	52                   	push   edx
c0023b71:	6a 0c                	push   0xc
c0023b73:	56                   	push   esi
c0023b74:	57                   	push   edi
c0023b75:	e8 ec fe ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b7a:	83 c4 20             	add    esp,0x20
c0023b7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023b81:	eb 49                	jmp    c0023bcc <IDE::read(unsigned char, unsigned char)+0xa6>
c0023b83:	80 fb 07             	cmp    bl,0x7
c0023b86:	77 12                	ja     c0023b9a <IDE::read(unsigned char, unsigned char)+0x74>
c0023b88:	0f b6 d2             	movzx  edx,dl
c0023b8b:	0f b6 c3             	movzx  eax,bl
c0023b8e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023b96:	89 c2                	mov    edx,eax
c0023b98:	eb 31                	jmp    c0023bcb <IDE::read(unsigned char, unsigned char)+0xa5>
c0023b9a:	80 fb 0d             	cmp    bl,0xd
c0023b9d:	77 13                	ja     c0023bb2 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023b9f:	0f b6 d2             	movzx  edx,dl
c0023ba2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023ba9:	0f b6 d3             	movzx  edx,bl
c0023bac:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023bb0:	eb 19                	jmp    c0023bcb <IDE::read(unsigned char, unsigned char)+0xa5>
c0023bb2:	31 c0                	xor    eax,eax
c0023bb4:	80 fb 15             	cmp    bl,0x15
c0023bb7:	77 13                	ja     c0023bcc <IDE::read(unsigned char, unsigned char)+0xa6>
c0023bb9:	0f b6 d2             	movzx  edx,dl
c0023bbc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023bc4:	0f b6 d3             	movzx  edx,bl
c0023bc7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023bcb:	ec                   	in     al,dx
c0023bcc:	83 c4 1c             	add    esp,0x1c
c0023bcf:	5b                   	pop    ebx
c0023bd0:	5e                   	pop    esi
c0023bd1:	5f                   	pop    edi
c0023bd2:	5d                   	pop    ebp
c0023bd3:	c3                   	ret    

c0023bd4 <IDE::waitInterrupt(unsigned char)>:
c0023bd4:	55                   	push   ebp
c0023bd5:	57                   	push   edi
c0023bd6:	56                   	push   esi
c0023bd7:	53                   	push   ebx
c0023bd8:	31 db                	xor    ebx,ebx
c0023bda:	83 ec 0c             	sub    esp,0xc
c0023bdd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023be1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023be6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023bee:	89 e8                	mov    eax,ebp
c0023bf0:	84 c0                	test   al,al
c0023bf2:	75 34                	jne    c0023c28 <IDE::waitInterrupt(unsigned char)+0x54>
c0023bf4:	52                   	push   edx
c0023bf5:	6a 0c                	push   0xc
c0023bf7:	56                   	push   esi
c0023bf8:	57                   	push   edi
c0023bf9:	e8 28 ff ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0023bfe:	83 c4 10             	add    esp,0x10
c0023c01:	a8 01                	test   al,0x1
c0023c03:	75 2b                	jne    c0023c30 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c05:	f6 c3 04             	test   bl,0x4
c0023c08:	75 16                	jne    c0023c20 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c0a:	83 fb 32             	cmp    ebx,0x32
c0023c0d:	7e 11                	jle    c0023c20 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c0f:	50                   	push   eax
c0023c10:	50                   	push   eax
c0023c11:	6a 00                	push   0x0
c0023c13:	68 80 96 98 00       	push   0x989680
c0023c18:	e8 6c a9 ff ff       	call   c001e589 <nanoSleep(unsigned long long)>
c0023c1d:	83 c4 10             	add    esp,0x10
c0023c20:	83 fb 3c             	cmp    ebx,0x3c
c0023c23:	74 0b                	je     c0023c30 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c25:	43                   	inc    ebx
c0023c26:	eb be                	jmp    c0023be6 <IDE::waitInterrupt(unsigned char)+0x12>
c0023c28:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023c30:	83 c4 0c             	add    esp,0xc
c0023c33:	89 e8                	mov    eax,ebp
c0023c35:	5b                   	pop    ebx
c0023c36:	5e                   	pop    esi
c0023c37:	5f                   	pop    edi
c0023c38:	5d                   	pop    ebp
c0023c39:	c3                   	ret    

c0023c3a <ideChannel0IRQHandler(regs*, void*)>:
c0023c3a:	83 ec 10             	sub    esp,0x10
c0023c3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c41:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023c48:	6a 07                	push   0x7
c0023c4a:	6a 00                	push   0x0
c0023c4c:	50                   	push   eax
c0023c4d:	e8 d4 fe ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0023c52:	83 c4 1c             	add    esp,0x1c
c0023c55:	c3                   	ret    

c0023c56 <ideChannel1IRQHandler(regs*, void*)>:
c0023c56:	83 ec 10             	sub    esp,0x10
c0023c59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c5d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023c64:	6a 07                	push   0x7
c0023c66:	6a 01                	push   0x1
c0023c68:	50                   	push   eax
c0023c69:	e8 b8 fe ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0023c6e:	83 c4 1c             	add    esp,0x1c
c0023c71:	c3                   	ret    

c0023c72 <IDE::enableIRQs(unsigned char, bool)>:
c0023c72:	57                   	push   edi
c0023c73:	56                   	push   esi
c0023c74:	be 04 00 00 00       	mov    esi,0x4
c0023c79:	53                   	push   ebx
c0023c7a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023c7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c83:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023c88:	0f 94 c0             	sete   al
c0023c8b:	d1 e0                	shl    eax,1
c0023c8d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023c94:	0f b6 c0             	movzx  eax,al
c0023c97:	50                   	push   eax
c0023c98:	6a 0c                	push   0xc
c0023c9a:	57                   	push   edi
c0023c9b:	53                   	push   ebx
c0023c9c:	e8 c5 fd ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ca1:	83 c4 10             	add    esp,0x10
c0023ca4:	50                   	push   eax
c0023ca5:	6a 0c                	push   0xc
c0023ca7:	57                   	push   edi
c0023ca8:	53                   	push   ebx
c0023ca9:	e8 78 fe ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0023cae:	83 c4 10             	add    esp,0x10
c0023cb1:	4e                   	dec    esi
c0023cb2:	75 f0                	jne    c0023ca4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023cb4:	5b                   	pop    ebx
c0023cb5:	5e                   	pop    esi
c0023cb6:	5f                   	pop    edi
c0023cb7:	c3                   	ret    

c0023cb8 <IDE::open(int, int, void*)>:
c0023cb8:	55                   	push   ebp
c0023cb9:	57                   	push   edi
c0023cba:	56                   	push   esi
c0023cbb:	53                   	push   ebx
c0023cbc:	83 ec 1c             	sub    esp,0x1c
c0023cbf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023cc3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023ccc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023cd5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023cdc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023ce3:	0f 85 b0 02 00 00    	jne    c0023f99 <IDE::open(int, int, void*)+0x2e1>
c0023ce9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023cef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023cf3:	83 e0 7f             	and    eax,0x7f
c0023cf6:	3c 05                	cmp    al,0x5
c0023cf8:	74 04                	je     c0023cfe <IDE::open(int, int, void*)+0x46>
c0023cfa:	3c 0f                	cmp    al,0xf
c0023cfc:	75 32                	jne    c0023d30 <IDE::open(int, int, void*)+0x78>
c0023cfe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023d04:	83 e0 fc             	and    eax,0xfffffffc
c0023d07:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023d0e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023d14:	83 e0 fc             	and    eax,0xfffffffc
c0023d17:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023d1e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023d24:	83 e0 fc             	and    eax,0xfffffffc
c0023d27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d2e:	eb 14                	jmp    c0023d44 <IDE::open(int, int, void*)+0x8c>
c0023d30:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d3a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d44:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023d4b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023d52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d56:	89 c6                	mov    esi,eax
c0023d58:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023d5d:	c1 e6 10             	shl    esi,0x10
c0023d60:	89 e8                	mov    eax,ebp
c0023d62:	89 fa                	mov    edx,edi
c0023d64:	c1 e0 0b             	shl    eax,0xb
c0023d67:	09 f0                	or     eax,esi
c0023d69:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023d70:	c1 e6 08             	shl    esi,0x8
c0023d73:	09 c6                	or     esi,eax
c0023d75:	89 f0                	mov    eax,esi
c0023d77:	0d 08 00 00 80       	or     eax,0x80000008
c0023d7c:	ef                   	out    dx,eax
c0023d7d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023d82:	89 ca                	mov    edx,ecx
c0023d84:	ed                   	in     eax,dx
c0023d85:	c1 e8 10             	shr    eax,0x10
c0023d88:	3d ff ff 00 00       	cmp    eax,0xffff
c0023d8d:	0f 84 f5 00 00 00    	je     c0023e88 <IDE::open(int, int, void*)+0x1d0>
c0023d93:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023d99:	89 fa                	mov    edx,edi
c0023d9b:	89 f0                	mov    eax,esi
c0023d9d:	ef                   	out    dx,eax
c0023d9e:	b0 fe                	mov    al,0xfe
c0023da0:	89 ca                	mov    edx,ecx
c0023da2:	ee                   	out    dx,al
c0023da3:	89 f0                	mov    eax,esi
c0023da5:	89 fa                	mov    edx,edi
c0023da7:	ef                   	out    dx,eax
c0023da8:	89 ca                	mov    edx,ecx
c0023daa:	ed                   	in     eax,dx
c0023dab:	3c fe                	cmp    al,0xfe
c0023dad:	0f 85 a9 00 00 00    	jne    c0023e5c <IDE::open(int, int, void*)+0x1a4>
c0023db3:	8b 15 e8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e8
c0023db9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023dc0:	74 33                	je     c0023df5 <IDE::open(int, int, void*)+0x13d>
c0023dc2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023dc8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023dcc:	40                   	inc    eax
c0023dcd:	83 ec 0c             	sub    esp,0xc
c0023dd0:	0f b6 c0             	movzx  eax,al
c0023dd3:	50                   	push   eax
c0023dd4:	55                   	push   ebp
c0023dd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023dd9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023ddf:	51                   	push   ecx
c0023de0:	e8 a1 41 ff ff       	call   c0017f86 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023de5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023dea:	83 c4 1c             	add    esp,0x1c
c0023ded:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023df3:	eb 0a                	jmp    c0023dff <IDE::open(int, int, void*)+0x147>
c0023df5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023dff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023e06:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023e0d:	c1 e1 10             	shl    ecx,0x10
c0023e10:	c1 e0 08             	shl    eax,0x8
c0023e13:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023e18:	09 c1                	or     ecx,eax
c0023e1a:	89 fa                	mov    edx,edi
c0023e1c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023e23:	c1 e0 0b             	shl    eax,0xb
c0023e26:	09 c1                	or     ecx,eax
c0023e28:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023e2e:	89 c8                	mov    eax,ecx
c0023e30:	ef                   	out    dx,eax
c0023e31:	be fc 0c 00 00       	mov    esi,0xcfc
c0023e36:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023e3c:	89 f2                	mov    edx,esi
c0023e3e:	ee                   	out    dx,al
c0023e3f:	89 c8                	mov    eax,ecx
c0023e41:	89 fa                	mov    edx,edi
c0023e43:	ef                   	out    dx,eax
c0023e44:	89 f2                	mov    edx,esi
c0023e46:	ed                   	in     eax,dx
c0023e47:	0f b6 c0             	movzx  eax,al
c0023e4a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023e50:	74 46                	je     c0023e98 <IDE::open(int, int, void*)+0x1e0>
c0023e52:	83 ec 0c             	sub    esp,0xc
c0023e55:	68 6c d7 02 c0       	push   0xc002d76c
c0023e5a:	eb 34                	jmp    c0023e90 <IDE::open(int, int, void*)+0x1d8>
c0023e5c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023e65:	75 17                	jne    c0023e7e <IDE::open(int, int, void*)+0x1c6>
c0023e67:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023e6c:	74 07                	je     c0023e75 <IDE::open(int, int, void*)+0x1bd>
c0023e6e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023e73:	75 09                	jne    c0023e7e <IDE::open(int, int, void*)+0x1c6>
c0023e75:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023e7c:	eb 1a                	jmp    c0023e98 <IDE::open(int, int, void*)+0x1e0>
c0023e7e:	83 ec 0c             	sub    esp,0xc
c0023e81:	68 74 d7 02 c0       	push   0xc002d774
c0023e86:	eb 08                	jmp    c0023e90 <IDE::open(int, int, void*)+0x1d8>
c0023e88:	83 ec 0c             	sub    esp,0xc
c0023e8b:	68 a5 d7 02 c0       	push   0xc002d7a5
c0023e90:	e8 3e 66 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0023e95:	83 c4 10             	add    esp,0x10
c0023e98:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023e9f:	79 1a                	jns    c0023ebb <IDE::open(int, int, void*)+0x203>
c0023ea1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023ea7:	83 e0 fc             	and    eax,0xfffffffc
c0023eaa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023eb1:	83 c0 08             	add    eax,0x8
c0023eb4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ebb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023ec1:	89 c2                	mov    edx,eax
c0023ec3:	83 e2 0f             	and    edx,0xf
c0023ec6:	66 83 fa 08          	cmp    dx,0x8
c0023eca:	75 0a                	jne    c0023ed6 <IDE::open(int, int, void*)+0x21e>
c0023ecc:	83 e8 02             	sub    eax,0x2
c0023ecf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023ed6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023edc:	89 c2                	mov    edx,eax
c0023ede:	83 e2 0f             	and    edx,0xf
c0023ee1:	66 83 fa 08          	cmp    dx,0x8
c0023ee5:	75 0a                	jne    c0023ef1 <IDE::open(int, int, void*)+0x239>
c0023ee7:	83 e8 02             	sub    eax,0x2
c0023eea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023ef1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023ef8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023eff:	89 d0                	mov    eax,edx
c0023f01:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f04:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f08:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023f0c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023f0f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f14:	0f b6 c9             	movzx  ecx,cl
c0023f17:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023f1e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f21:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f25:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023f29:	8d 50 02             	lea    edx,[eax+0x2]
c0023f2c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023f31:	0f b6 d2             	movzx  edx,dl
c0023f34:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023f3a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f3d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f41:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023f45:	8d 48 03             	lea    ecx,[eax+0x3]
c0023f48:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f4d:	0f b6 c9             	movzx  ecx,cl
c0023f50:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023f56:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f59:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f5d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023f61:	8d 50 04             	lea    edx,[eax+0x4]
c0023f64:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023f6a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023f6f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023f76:	66 85 f6             	test   si,si
c0023f79:	74 3e                	je     c0023fb9 <IDE::open(int, int, void*)+0x301>
c0023f7b:	0f b6 d2             	movzx  edx,dl
c0023f7e:	83 c0 05             	add    eax,0x5
c0023f81:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f84:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f88:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023f8c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023f92:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f97:	eb 20                	jmp    c0023fb9 <IDE::open(int, int, void*)+0x301>
c0023f99:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023fa3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023fad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023fb4:	e9 02 ff ff ff       	jmp    c0023ebb <IDE::open(int, int, void*)+0x203>
c0023fb9:	52                   	push   edx
c0023fba:	52                   	push   edx
c0023fbb:	6a 00                	push   0x0
c0023fbd:	53                   	push   ebx
c0023fbe:	e8 7d fa ff ff       	call   c0023a40 <IDE::prepareInterrupt(unsigned char)>
c0023fc3:	59                   	pop    ecx
c0023fc4:	5e                   	pop    esi
c0023fc5:	6a 01                	push   0x1
c0023fc7:	53                   	push   ebx
c0023fc8:	e8 73 fa ff ff       	call   c0023a40 <IDE::prepareInterrupt(unsigned char)>
c0023fcd:	83 c4 0c             	add    esp,0xc
c0023fd0:	6a 00                	push   0x0
c0023fd2:	6a 00                	push   0x0
c0023fd4:	53                   	push   ebx
c0023fd5:	e8 98 fc ff ff       	call   c0023c72 <IDE::enableIRQs(unsigned char, bool)>
c0023fda:	83 c4 0c             	add    esp,0xc
c0023fdd:	6a 00                	push   0x0
c0023fdf:	6a 01                	push   0x1
c0023fe1:	53                   	push   ebx
c0023fe2:	e8 8b fc ff ff       	call   c0023c72 <IDE::enableIRQs(unsigned char, bool)>
c0023fe7:	83 c4 10             	add    esp,0x10
c0023fea:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023ff1:	74 40                	je     c0024033 <IDE::open(int, int, void*)+0x37b>
c0023ff3:	83 ec 0c             	sub    esp,0xc
c0023ff6:	68 cf d7 02 c0       	push   0xc002d7cf
c0023ffb:	e8 9d ea fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024003:	6a 01                	push   0x1
c0024005:	68 3a 3c 02 c0       	push   0xc0023c3a
c002400a:	6a 0e                	push   0xe
c002400c:	53                   	push   ebx
c002400d:	e8 3c fe fe ff       	call   c0013e4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024012:	83 c4 14             	add    esp,0x14
c0024015:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002401b:	53                   	push   ebx
c002401c:	6a 01                	push   0x1
c002401e:	68 56 3c 02 c0       	push   0xc0023c56
c0024023:	6a 0f                	push   0xf
c0024025:	53                   	push   ebx
c0024026:	e8 23 fe fe ff       	call   c0013e4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002402b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0024031:	eb 4a                	jmp    c002407d <IDE::open(int, int, void*)+0x3c5>
c0024033:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002403d:	50                   	push   eax
c002403e:	6a 0f                	push   0xf
c0024040:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024046:	68 eb d7 02 c0       	push   0xc002d7eb
c002404b:	e8 4d ea fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024050:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024053:	6a 00                	push   0x0
c0024055:	68 3a 3c 02 c0       	push   0xc0023c3a
c002405a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024060:	53                   	push   ebx
c0024061:	e8 e8 fd fe ff       	call   c0013e4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024066:	83 c4 14             	add    esp,0x14
c0024069:	53                   	push   ebx
c002406a:	6a 00                	push   0x0
c002406c:	68 56 3c 02 c0       	push   0xc0023c56
c0024071:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0024077:	53                   	push   ebx
c0024078:	e8 d1 fd fe ff       	call   c0013e4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002407d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002407f:	83 c4 20             	add    esp,0x20
c0024082:	83 ec 0c             	sub    esp,0xc
c0024085:	53                   	push   ebx
c0024086:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0024089:	83 c4 0c             	add    esp,0xc
c002408c:	6a 07                	push   0x7
c002408e:	6a 00                	push   0x0
c0024090:	53                   	push   ebx
c0024091:	e8 90 fa ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024096:	83 c4 0c             	add    esp,0xc
c0024099:	6a 07                	push   0x7
c002409b:	6a 01                	push   0x1
c002409d:	53                   	push   ebx
c002409e:	e8 83 fa ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c00240a3:	83 c4 0c             	add    esp,0xc
c00240a6:	6a 01                	push   0x1
c00240a8:	6a 00                	push   0x0
c00240aa:	53                   	push   ebx
c00240ab:	e8 c2 fb ff ff       	call   c0023c72 <IDE::enableIRQs(unsigned char, bool)>
c00240b0:	83 c4 0c             	add    esp,0xc
c00240b3:	6a 01                	push   0x1
c00240b5:	6a 01                	push   0x1
c00240b7:	53                   	push   ebx
c00240b8:	e8 b5 fb ff ff       	call   c0023c72 <IDE::enableIRQs(unsigned char, bool)>
c00240bd:	83 c4 2c             	add    esp,0x2c
c00240c0:	31 c0                	xor    eax,eax
c00240c2:	5b                   	pop    ebx
c00240c3:	5e                   	pop    esi
c00240c4:	5f                   	pop    edi
c00240c5:	5d                   	pop    ebp
c00240c6:	c3                   	ret    
c00240c7:	90                   	nop

c00240c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00240c8:	55                   	push   ebp
c00240c9:	57                   	push   edi
c00240ca:	56                   	push   esi
c00240cb:	53                   	push   ebx
c00240cc:	83 ec 1c             	sub    esp,0x1c
c00240cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00240d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00240d7:	8d 50 f8             	lea    edx,[eax-0x8]
c00240da:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00240de:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00240e2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00240e6:	80 fa 03             	cmp    dl,0x3
c00240e9:	77 5d                	ja     c0024148 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00240eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00240ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240f3:	0f b6 db             	movzx  ebx,bl
c00240f6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00240f9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00240fd:	83 ca 80             	or     edx,0xffffff80
c0024100:	0f b6 d2             	movzx  edx,dl
c0024103:	52                   	push   edx
c0024104:	6a 0c                	push   0xc
c0024106:	53                   	push   ebx
c0024107:	56                   	push   esi
c0024108:	e8 59 f9 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002410d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0024112:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024116:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002411a:	0f b6 c0             	movzx  eax,al
c002411d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0024121:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024123:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024128:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002412c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0024130:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024134:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002413c:	83 c4 2c             	add    esp,0x2c
c002413f:	5b                   	pop    ebx
c0024140:	5e                   	pop    esi
c0024141:	5f                   	pop    edi
c0024142:	5d                   	pop    ebp
c0024143:	e9 1e f9 ff ff       	jmp    c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024148:	3c 07                	cmp    al,0x7
c002414a:	77 10                	ja     c002415c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002414c:	0f b6 db             	movzx  ebx,bl
c002414f:	0f b6 d0             	movzx  edx,al
c0024152:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002415a:	eb 2d                	jmp    c0024189 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002415c:	3c 0d                	cmp    al,0xd
c002415e:	77 13                	ja     c0024173 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024160:	0f b6 db             	movzx  ebx,bl
c0024163:	0f b6 c0             	movzx  eax,al
c0024166:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002416d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0024171:	eb 16                	jmp    c0024189 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024173:	3c 15                	cmp    al,0x15
c0024175:	77 14                	ja     c002418b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024177:	0f b6 db             	movzx  ebx,bl
c002417a:	0f b6 c0             	movzx  eax,al
c002417d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0024185:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0024189:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002418b:	83 c4 1c             	add    esp,0x1c
c002418e:	5b                   	pop    ebx
c002418f:	5e                   	pop    esi
c0024190:	5f                   	pop    edi
c0024191:	5d                   	pop    ebp
c0024192:	c3                   	ret    
c0024193:	90                   	nop

c0024194 <IDE::detect()>:
c0024194:	55                   	push   ebp
c0024195:	57                   	push   edi
c0024196:	56                   	push   esi
c0024197:	53                   	push   ebx
c0024198:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002419e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00241a5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00241ac:	0f 85 be 02 00 00    	jne    c0024470 <IDE::detect()+0x2dc>
c00241b2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00241b9:	31 f6                	xor    esi,esi
c00241bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00241c3:	31 ed                	xor    ebp,ebp
c00241c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00241c9:	c1 e0 06             	shl    eax,0x6
c00241cc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00241d4:	89 e8                	mov    eax,ebp
c00241d6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00241da:	c1 e0 04             	shl    eax,0x4
c00241dd:	83 c8 a0             	or     eax,0xffffffa0
c00241e0:	0f b6 c0             	movzx  eax,al
c00241e3:	50                   	push   eax
c00241e4:	6a 06                	push   0x6
c00241e6:	56                   	push   esi
c00241e7:	53                   	push   ebx
c00241e8:	e8 79 f8 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ed:	83 c4 0c             	add    esp,0xc
c00241f0:	6a 0c                	push   0xc
c00241f2:	56                   	push   esi
c00241f3:	53                   	push   ebx
c00241f4:	e8 2d f9 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c00241f9:	83 c4 0c             	add    esp,0xc
c00241fc:	6a 0c                	push   0xc
c00241fe:	56                   	push   esi
c00241ff:	53                   	push   ebx
c0024200:	e8 21 f9 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024205:	83 c4 0c             	add    esp,0xc
c0024208:	6a 0c                	push   0xc
c002420a:	56                   	push   esi
c002420b:	53                   	push   ebx
c002420c:	e8 15 f9 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024211:	83 c4 0c             	add    esp,0xc
c0024214:	6a 0c                	push   0xc
c0024216:	56                   	push   esi
c0024217:	53                   	push   ebx
c0024218:	e8 09 f9 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c002421d:	68 ec 00 00 00       	push   0xec
c0024222:	6a 07                	push   0x7
c0024224:	56                   	push   esi
c0024225:	53                   	push   ebx
c0024226:	e8 3b f8 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422b:	83 c4 1c             	add    esp,0x1c
c002422e:	6a 0c                	push   0xc
c0024230:	56                   	push   esi
c0024231:	53                   	push   ebx
c0024232:	e8 ef f8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024237:	83 c4 0c             	add    esp,0xc
c002423a:	6a 0c                	push   0xc
c002423c:	56                   	push   esi
c002423d:	53                   	push   ebx
c002423e:	e8 e3 f8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024243:	83 c4 0c             	add    esp,0xc
c0024246:	6a 0c                	push   0xc
c0024248:	56                   	push   esi
c0024249:	53                   	push   ebx
c002424a:	e8 d7 f8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c002424f:	83 c4 0c             	add    esp,0xc
c0024252:	6a 0c                	push   0xc
c0024254:	56                   	push   esi
c0024255:	53                   	push   ebx
c0024256:	e8 cb f8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c002425b:	83 c4 0c             	add    esp,0xc
c002425e:	6a 0c                	push   0xc
c0024260:	56                   	push   esi
c0024261:	53                   	push   ebx
c0024262:	e8 bf f8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024267:	83 c4 10             	add    esp,0x10
c002426a:	84 c0                	test   al,al
c002426c:	0f 84 8b 01 00 00    	je     c00243fd <IDE::detect()+0x269>
c0024272:	31 ff                	xor    edi,edi
c0024274:	50                   	push   eax
c0024275:	6a 0c                	push   0xc
c0024277:	56                   	push   esi
c0024278:	53                   	push   ebx
c0024279:	e8 a8 f8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c002427e:	83 c4 10             	add    esp,0x10
c0024281:	a8 01                	test   al,0x1
c0024283:	0f 85 8e 01 00 00    	jne    c0024417 <IDE::detect()+0x283>
c0024289:	84 c0                	test   al,al
c002428b:	78 04                	js     c0024291 <IDE::detect()+0xfd>
c002428d:	a8 08                	test   al,0x8
c002428f:	75 27                	jne    c00242b8 <IDE::detect()+0x124>
c0024291:	47                   	inc    edi
c0024292:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024298:	7e da                	jle    c0024274 <IDE::detect()+0xe0>
c002429a:	50                   	push   eax
c002429b:	50                   	push   eax
c002429c:	6a 00                	push   0x0
c002429e:	68 40 4b 4c 00       	push   0x4c4b40
c00242a3:	e8 e1 a2 ff ff       	call   c001e589 <nanoSleep(unsigned long long)>
c00242a8:	83 c4 10             	add    esp,0x10
c00242ab:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00242b1:	75 c1                	jne    c0024274 <IDE::detect()+0xe0>
c00242b3:	e9 5f 01 00 00       	jmp    c0024417 <IDE::detect()+0x283>
c00242b8:	31 c9                	xor    ecx,ecx
c00242ba:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00242be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00242c2:	83 ec 0c             	sub    esp,0xc
c00242c5:	68 80 00 00 00       	push   0x80
c00242ca:	57                   	push   edi
c00242cb:	6a 00                	push   0x0
c00242cd:	56                   	push   esi
c00242ce:	53                   	push   ebx
c00242cf:	e8 f4 fd ff ff       	call   c00240c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00242d4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00242d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00242dd:	89 d1                	mov    ecx,edx
c00242df:	c1 e0 06             	shl    eax,0x6
c00242e2:	01 d8                	add    eax,ebx
c00242e4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00242eb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00242f2:	89 f2                	mov    edx,esi
c00242f4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00242fa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00242fe:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024304:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024308:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002430f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024317:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002431e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024326:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002432c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024333:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024339:	8d 54 24 58          	lea    edx,[esp+0x58]
c002433d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024341:	83 c4 20             	add    esp,0x20
c0024344:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024347:	83 c0 02             	add    eax,0x2
c002434a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024350:	83 c7 02             	add    edi,0x2
c0024353:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024356:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002435c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024360:	75 e2                	jne    c0024344 <IDE::detect()+0x1b0>
c0024362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024366:	c1 e0 06             	shl    eax,0x6
c0024369:	01 d8                	add    eax,ebx
c002436b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024371:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024378:	66 c1 ea 09          	shr    dx,0x9
c002437c:	83 e2 01             	and    edx,0x1
c002437f:	84 c9                	test   cl,cl
c0024381:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024387:	75 2f                	jne    c00243b8 <IDE::detect()+0x224>
c0024389:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002438f:	85 c0                	test   eax,eax
c0024391:	74 66                	je     c00243f9 <IDE::detect()+0x265>
c0024393:	50                   	push   eax
c0024394:	55                   	push   ebp
c0024395:	56                   	push   esi
c0024396:	68 07 d8 02 c0       	push   0xc002d807
c002439b:	e8 fd e6 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00243a0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00243a7:	e8 e0 b4 fe ff       	call   c000f88c <malloc>
c00243ac:	89 c7                	mov    edi,eax
c00243ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00243b1:	e8 78 06 00 00       	call   c0024a2e <ATA::ATA()>
c00243b6:	eb 28                	jmp    c00243e0 <IDE::detect()+0x24c>
c00243b8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00243be:	55                   	push   ebp
c00243bf:	56                   	push   esi
c00243c0:	68 36 d8 02 c0       	push   0xc002d836
c00243c5:	e8 d3 e6 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00243ca:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00243d1:	e8 b6 b4 fe ff       	call   c000f88c <malloc>
c00243d6:	89 c7                	mov    edi,eax
c00243d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00243db:	e8 8e 0c 00 00       	call   c002506e <ATAPI::ATAPI()>
c00243e0:	5a                   	pop    edx
c00243e1:	59                   	pop    ecx
c00243e2:	57                   	push   edi
c00243e3:	53                   	push   ebx
c00243e4:	e8 ed fa fe ff       	call   c0013ed6 <Device::addChild(Device*)>
c00243e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00243eb:	53                   	push   ebx
c00243ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00243f0:	6a 00                	push   0x0
c00243f2:	57                   	push   edi
c00243f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00243f6:	83 c4 20             	add    esp,0x20
c00243f9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00243fd:	4d                   	dec    ebp
c00243fe:	74 0a                	je     c002440a <IDE::detect()+0x276>
c0024400:	bd 01 00 00 00       	mov    ebp,0x1
c0024405:	e9 bb fd ff ff       	jmp    c00241c5 <IDE::detect()+0x31>
c002440a:	4e                   	dec    esi
c002440b:	74 63                	je     c0024470 <IDE::detect()+0x2dc>
c002440d:	be 01 00 00 00       	mov    esi,0x1
c0024412:	e9 ac fd ff ff       	jmp    c00241c3 <IDE::detect()+0x2f>
c0024417:	50                   	push   eax
c0024418:	6a 04                	push   0x4
c002441a:	56                   	push   esi
c002441b:	53                   	push   ebx
c002441c:	e8 05 f7 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024421:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024425:	83 c4 0c             	add    esp,0xc
c0024428:	6a 05                	push   0x5
c002442a:	56                   	push   esi
c002442b:	53                   	push   ebx
c002442c:	e8 f5 f6 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024431:	83 c4 10             	add    esp,0x10
c0024434:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024438:	80 fa 14             	cmp    dl,0x14
c002443b:	75 04                	jne    c0024441 <IDE::detect()+0x2ad>
c002443d:	3c eb                	cmp    al,0xeb
c002443f:	eb 07                	jmp    c0024448 <IDE::detect()+0x2b4>
c0024441:	3c 96                	cmp    al,0x96
c0024443:	75 b8                	jne    c00243fd <IDE::detect()+0x269>
c0024445:	80 fa 69             	cmp    dl,0x69
c0024448:	75 b3                	jne    c00243fd <IDE::detect()+0x269>
c002444a:	68 a1 00 00 00       	push   0xa1
c002444f:	6a 07                	push   0x7
c0024451:	56                   	push   esi
c0024452:	53                   	push   ebx
c0024453:	e8 0e f6 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024458:	5f                   	pop    edi
c0024459:	58                   	pop    eax
c002445a:	6a 00                	push   0x0
c002445c:	68 40 42 0f 00       	push   0xf4240
c0024461:	e8 23 a1 ff ff       	call   c001e589 <nanoSleep(unsigned long long)>
c0024466:	83 c4 10             	add    esp,0x10
c0024469:	b1 01                	mov    cl,0x1
c002446b:	e9 4a fe ff ff       	jmp    c00242ba <IDE::detect()+0x126>
c0024470:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024476:	5b                   	pop    ebx
c0024477:	5e                   	pop    esi
c0024478:	5f                   	pop    edi
c0024479:	5d                   	pop    ebp
c002447a:	c3                   	ret    
c002447b:	90                   	nop

c002447c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002447c:	55                   	push   ebp
c002447d:	57                   	push   edi
c002447e:	56                   	push   esi
c002447f:	53                   	push   ebx
c0024480:	83 ec 1c             	sub    esp,0x1c
c0024483:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024487:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002448b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002448f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024493:	88 c3                	mov    bl,al
c0024495:	84 c0                	test   al,al
c0024497:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002449b:	0f 84 67 01 00 00    	je     c0024608 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00244a1:	83 ec 0c             	sub    esp,0xc
c00244a4:	68 67 d8 02 c0       	push   0xc002d867
c00244a9:	e8 ef e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00244ae:	83 c4 10             	add    esp,0x10
c00244b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244b5:	3c 01                	cmp    al,0x1
c00244b7:	75 17                	jne    c00244d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00244b9:	83 ec 0c             	sub    esp,0xc
c00244bc:	b3 13                	mov    bl,0x13
c00244be:	68 73 d8 02 c0       	push   0xc002d873
c00244c3:	e8 d5 e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00244c8:	83 c4 10             	add    esp,0x10
c00244cb:	e9 25 01 00 00       	jmp    c00245f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244d0:	3c 02                	cmp    al,0x2
c00244d2:	0f 85 ef 00 00 00    	jne    c00245c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00244d8:	d1 e6                	shl    esi,1
c00244da:	09 ee                	or     esi,ebp
c00244dc:	52                   	push   edx
c00244dd:	89 f0                	mov    eax,esi
c00244df:	6a 01                	push   0x1
c00244e1:	0f b6 f0             	movzx  esi,al
c00244e4:	c1 e6 06             	shl    esi,0x6
c00244e7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00244ef:	50                   	push   eax
c00244f0:	57                   	push   edi
c00244f1:	e8 30 f6 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c00244f6:	83 c4 10             	add    esp,0x10
c00244f9:	89 c6                	mov    esi,eax
c00244fb:	a8 01                	test   al,0x1
c00244fd:	74 12                	je     c0024511 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00244ff:	83 ec 0c             	sub    esp,0xc
c0024502:	b3 07                	mov    bl,0x7
c0024504:	68 88 d8 02 c0       	push   0xc002d888
c0024509:	e8 8f e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002450e:	83 c4 10             	add    esp,0x10
c0024511:	f7 c6 02 00 00 00    	test   esi,0x2
c0024517:	74 12                	je     c002452b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024519:	83 ec 0c             	sub    esp,0xc
c002451c:	b3 03                	mov    bl,0x3
c002451e:	68 a6 d8 02 c0       	push   0xc002d8a6
c0024523:	e8 75 e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024528:	83 c4 10             	add    esp,0x10
c002452b:	f7 c6 04 00 00 00    	test   esi,0x4
c0024531:	74 12                	je     c0024545 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024533:	83 ec 0c             	sub    esp,0xc
c0024536:	b3 14                	mov    bl,0x14
c0024538:	68 c6 d8 02 c0       	push   0xc002d8c6
c002453d:	e8 5b e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024542:	83 c4 10             	add    esp,0x10
c0024545:	f7 c6 08 00 00 00    	test   esi,0x8
c002454b:	74 12                	je     c002455f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002454d:	83 ec 0c             	sub    esp,0xc
c0024550:	b3 03                	mov    bl,0x3
c0024552:	68 a6 d8 02 c0       	push   0xc002d8a6
c0024557:	e8 41 e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002455c:	83 c4 10             	add    esp,0x10
c002455f:	f7 c6 10 00 00 00    	test   esi,0x10
c0024565:	74 12                	je     c0024579 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024567:	83 ec 0c             	sub    esp,0xc
c002456a:	b3 15                	mov    bl,0x15
c002456c:	68 de d8 02 c0       	push   0xc002d8de
c0024571:	e8 27 e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024576:	83 c4 10             	add    esp,0x10
c0024579:	f7 c6 20 00 00 00    	test   esi,0x20
c002457f:	74 12                	je     c0024593 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024581:	83 ec 0c             	sub    esp,0xc
c0024584:	b3 03                	mov    bl,0x3
c0024586:	68 a6 d8 02 c0       	push   0xc002d8a6
c002458b:	e8 0d e5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024590:	83 c4 10             	add    esp,0x10
c0024593:	f7 c6 40 00 00 00    	test   esi,0x40
c0024599:	74 12                	je     c00245ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002459b:	83 ec 0c             	sub    esp,0xc
c002459e:	b3 16                	mov    bl,0x16
c00245a0:	68 f8 d8 02 c0       	push   0xc002d8f8
c00245a5:	e8 f3 e4 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00245aa:	83 c4 10             	add    esp,0x10
c00245ad:	89 f0                	mov    eax,esi
c00245af:	84 c0                	test   al,al
c00245b1:	79 42                	jns    c00245f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00245b3:	83 ec 0c             	sub    esp,0xc
c00245b6:	b3 0d                	mov    bl,0xd
c00245b8:	68 19 d9 02 c0       	push   0xc002d919
c00245bd:	e8 db e4 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00245c2:	83 c4 10             	add    esp,0x10
c00245c5:	eb 2e                	jmp    c00245f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00245c7:	3c 03                	cmp    al,0x3
c00245c9:	75 14                	jne    c00245df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00245cb:	83 ec 0c             	sub    esp,0xc
c00245ce:	b3 17                	mov    bl,0x17
c00245d0:	68 2d d9 02 c0       	push   0xc002d92d
c00245d5:	e8 c3 e4 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00245da:	83 c4 10             	add    esp,0x10
c00245dd:	eb 16                	jmp    c00245f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00245df:	3c 04                	cmp    al,0x4
c00245e1:	75 12                	jne    c00245f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00245e3:	83 ec 0c             	sub    esp,0xc
c00245e6:	b3 08                	mov    bl,0x8
c00245e8:	68 43 d9 02 c0       	push   0xc002d943
c00245ed:	e8 ab e4 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00245f2:	83 c4 10             	add    esp,0x10
c00245f5:	50                   	push   eax
c00245f6:	50                   	push   eax
c00245f7:	0f b6 c3             	movzx  eax,bl
c00245fa:	50                   	push   eax
c00245fb:	68 5b d9 02 c0       	push   0xc002d95b
c0024600:	e8 98 e4 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024605:	83 c4 10             	add    esp,0x10
c0024608:	83 c4 1c             	add    esp,0x1c
c002460b:	88 d8                	mov    al,bl
c002460d:	5b                   	pop    ebx
c002460e:	5e                   	pop    esi
c002460f:	5f                   	pop    edi
c0024610:	5d                   	pop    ebp
c0024611:	c3                   	ret    

c0024612 <IDE::polling(unsigned char, unsigned int)>:
c0024612:	57                   	push   edi
c0024613:	56                   	push   esi
c0024614:	53                   	push   ebx
c0024615:	bb 04 00 00 00       	mov    ebx,0x4
c002461a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002461e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024623:	52                   	push   edx
c0024624:	6a 0c                	push   0xc
c0024626:	56                   	push   esi
c0024627:	57                   	push   edi
c0024628:	e8 f9 f4 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c002462d:	83 c4 10             	add    esp,0x10
c0024630:	4b                   	dec    ebx
c0024631:	75 f0                	jne    c0024623 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024633:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024638:	50                   	push   eax
c0024639:	6a 0c                	push   0xc
c002463b:	56                   	push   esi
c002463c:	57                   	push   edi
c002463d:	e8 e4 f4 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024642:	83 c4 10             	add    esp,0x10
c0024645:	a8 01                	test   al,0x1
c0024647:	74 12                	je     c002465b <IDE::polling(unsigned char, unsigned int)+0x49>
c0024649:	83 ec 0c             	sub    esp,0xc
c002464c:	68 75 d9 02 c0       	push   0xc002d975
c0024651:	e8 47 e4 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024656:	83 c4 10             	add    esp,0x10
c0024659:	eb 17                	jmp    c0024672 <IDE::polling(unsigned char, unsigned int)+0x60>
c002465b:	a8 20                	test   al,0x20
c002465d:	75 0f                	jne    c002466e <IDE::polling(unsigned char, unsigned int)+0x5c>
c002465f:	4b                   	dec    ebx
c0024660:	74 10                	je     c0024672 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024662:	84 c0                	test   al,al
c0024664:	78 d2                	js     c0024638 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024666:	a8 08                	test   al,0x8
c0024668:	74 ce                	je     c0024638 <IDE::polling(unsigned char, unsigned int)+0x26>
c002466a:	31 c0                	xor    eax,eax
c002466c:	eb 06                	jmp    c0024674 <IDE::polling(unsigned char, unsigned int)+0x62>
c002466e:	b0 01                	mov    al,0x1
c0024670:	eb 02                	jmp    c0024674 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024672:	b0 02                	mov    al,0x2
c0024674:	5b                   	pop    ebx
c0024675:	5e                   	pop    esi
c0024676:	5f                   	pop    edi
c0024677:	c3                   	ret    

c0024678 <SATABus::close(int, int, void*)>:
c0024678:	31 c0                	xor    eax,eax
c002467a:	c3                   	ret    
c002467b:	90                   	nop

c002467c <SATABus::detect()>:
c002467c:	c3                   	ret    
c002467d:	90                   	nop

c002467e <SATABus::SATABus()>:
c002467e:	83 ec 0c             	sub    esp,0xc
c0024681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024685:	83 ec 08             	sub    esp,0x8
c0024688:	68 b8 d9 02 c0       	push   0xc002d9b8
c002468d:	50                   	push   eax
c002468e:	e8 f1 fb fe ff       	call   c0014284 <HardDiskController::HardDiskController(char const*)>
c0024693:	83 c4 10             	add    esp,0x10
c0024696:	ba 74 da 02 c0       	mov    edx,0xc002da74
c002469b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002469f:	89 10                	mov    DWORD PTR [eax],edx
c00246a1:	83 ec 0c             	sub    esp,0xc
c00246a4:	6a 50                	push   0x50
c00246a6:	e8 a6 b5 fe ff       	call   c000fc51 <Phys::allocateContiguousPages(int)>
c00246ab:	83 c4 10             	add    esp,0x10
c00246ae:	89 c2                	mov    edx,eax
c00246b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00246ba:	83 ec 0c             	sub    esp,0xc
c00246bd:	6a 50                	push   0x50
c00246bf:	e8 d3 cf fe ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c00246c4:	83 c4 10             	add    esp,0x10
c00246c7:	89 c2                	mov    edx,eax
c00246c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00246d3:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00246d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00246dc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00246e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00246e6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00246ec:	83 ec 0c             	sub    esp,0xc
c00246ef:	6a 03                	push   0x3
c00246f1:	6a 50                	push   0x50
c00246f3:	51                   	push   ecx
c00246f4:	52                   	push   edx
c00246f5:	50                   	push   eax
c00246f6:	e8 c9 da fe ff       	call   c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00246fb:	83 c4 20             	add    esp,0x20
c00246fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024702:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002470c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024712:	83 ec 04             	sub    esp,0x4
c0024715:	52                   	push   edx
c0024716:	50                   	push   eax
c0024717:	68 dc d9 02 c0       	push   0xc002d9dc
c002471c:	e8 7c e3 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024721:	83 c4 10             	add    esp,0x10
c0024724:	90                   	nop
c0024725:	83 c4 0c             	add    esp,0xc
c0024728:	c3                   	ret    
c0024729:	90                   	nop

c002472a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002472a:	83 ec 0c             	sub    esp,0xc
c002472d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024731:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024734:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024737:	09 c2                	or     edx,eax
c0024739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002473d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024743:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024745:	31 c0                	xor    eax,eax
c0024747:	c1 e9 08             	shr    ecx,0x8
c002474a:	83 e1 0f             	and    ecx,0xf
c002474d:	39 c8                	cmp    eax,ecx
c002474f:	74 0a                	je     c002475b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024751:	f6 c2 01             	test   dl,0x1
c0024754:	74 18                	je     c002476e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024756:	d1 ea                	shr    edx,1
c0024758:	40                   	inc    eax
c0024759:	eb f2                	jmp    c002474d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002475b:	83 ec 0c             	sub    esp,0xc
c002475e:	68 00 da 02 c0       	push   0xc002da00
c0024763:	e8 6b 5d ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0024768:	83 c4 10             	add    esp,0x10
c002476b:	83 c8 ff             	or     eax,0xffffffff
c002476e:	83 c4 0c             	add    esp,0xc
c0024771:	c3                   	ret    

c0024772 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024772:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024776:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024779:	89 c2                	mov    edx,eax
c002477b:	c1 ea 08             	shr    edx,0x8
c002477e:	83 e2 0f             	and    edx,0xf
c0024781:	fe ca                	dec    dl
c0024783:	75 31                	jne    c00247b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024785:	83 e0 0f             	and    eax,0xf
c0024788:	3c 03                	cmp    al,0x3
c002478a:	75 2a                	jne    c00247b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002478c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002478f:	b8 02 00 00 00       	mov    eax,0x2
c0024794:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002479a:	74 1c                	je     c00247b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002479c:	b8 04 00 00 00       	mov    eax,0x4
c00247a1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00247a7:	74 0f                	je     c00247b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00247a9:	31 c0                	xor    eax,eax
c00247ab:	83 fa 03             	cmp    edx,0x3
c00247ae:	0f 94 c0             	sete   al
c00247b1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00247b5:	c3                   	ret    
c00247b6:	31 c0                	xor    eax,eax
c00247b8:	c3                   	ret    
c00247b9:	90                   	nop

c00247ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00247ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247c1:	0f ba e2 0f          	bt     edx,0xf
c00247c5:	72 f7                	jb     c00247be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00247c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247ca:	83 ca 10             	or     edx,0x10
c00247cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00247d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247d3:	83 ca 01             	or     edx,0x1
c00247d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00247d9:	c3                   	ret    

c00247da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00247da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247e1:	83 e2 fe             	and    edx,0xfffffffe
c00247e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00247e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247ea:	83 e2 ef             	and    edx,0xffffffef
c00247ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00247f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247f3:	0f ba e2 0e          	bt     edx,0xe
c00247f7:	72 f7                	jb     c00247f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00247f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247fc:	0f ba e2 0f          	bt     edx,0xf
c0024800:	72 ee                	jb     c00247f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024802:	c3                   	ret    
c0024803:	90                   	nop

c0024804 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024804:	55                   	push   ebp
c0024805:	57                   	push   edi
c0024806:	56                   	push   esi
c0024807:	53                   	push   ebx
c0024808:	83 ec 1c             	sub    esp,0x1c
c002480b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002480f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024813:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024817:	53                   	push   ebx
c0024818:	89 fd                	mov    ebp,edi
c002481a:	56                   	push   esi
c002481b:	c1 e5 0a             	shl    ebp,0xa
c002481e:	e8 b7 ff ff ff       	call   c00247da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024823:	83 ec 0c             	sub    esp,0xc
c0024826:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002482c:	01 e8                	add    eax,ebp
c002482e:	89 03                	mov    DWORD PTR [ebx],eax
c0024830:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024832:	68 00 04 00 00       	push   0x400
c0024837:	6a 00                	push   0x0
c0024839:	50                   	push   eax
c002483a:	e8 11 bf fd ff       	call   c0000750 <memset>
c002483f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024845:	89 fa                	mov    edx,edi
c0024847:	01 e8                	add    eax,ebp
c0024849:	c1 e7 0d             	shl    edi,0xd
c002484c:	89 03                	mov    DWORD PTR [ebx],eax
c002484e:	c1 e2 08             	shl    edx,0x8
c0024851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024858:	81 c2 00 80 00 00    	add    edx,0x8000
c002485e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024862:	89 d0                	mov    eax,edx
c0024864:	83 c4 1c             	add    esp,0x1c
c0024867:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002486d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024870:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024873:	68 00 01 00 00       	push   0x100
c0024878:	6a 00                	push   0x0
c002487a:	50                   	push   eax
c002487b:	e8 d0 be fd ff       	call   c0000750 <memset>
c0024880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024884:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002488a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024890:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024894:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024897:	83 c4 10             	add    esp,0x10
c002489a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00248a1:	31 ff                	xor    edi,edi
c00248a3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00248a9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00248af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00248b3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00248b9:	83 c5 20             	add    ebp,0x20
c00248bc:	01 f8                	add    eax,edi
c00248be:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00248c1:	52                   	push   edx
c00248c2:	68 00 01 00 00       	push   0x100
c00248c7:	6a 00                	push   0x0
c00248c9:	50                   	push   eax
c00248ca:	e8 81 be fd ff       	call   c0000750 <memset>
c00248cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00248d3:	83 c4 10             	add    esp,0x10
c00248d6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00248dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00248e3:	01 f8                	add    eax,edi
c00248e5:	81 c7 00 01 00 00    	add    edi,0x100
c00248eb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00248ee:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00248f4:	75 b3                	jne    c00248a9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00248f6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00248fa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00248fe:	83 c4 1c             	add    esp,0x1c
c0024901:	5b                   	pop    ebx
c0024902:	5e                   	pop    esi
c0024903:	5f                   	pop    edi
c0024904:	5d                   	pop    ebp
c0024905:	e9 b0 fe ff ff       	jmp    c00247ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002490a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002490a:	55                   	push   ebp
c002490b:	57                   	push   edi
c002490c:	56                   	push   esi
c002490d:	53                   	push   ebx
c002490e:	31 db                	xor    ebx,ebx
c0024910:	83 ec 0c             	sub    esp,0xc
c0024913:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024917:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002491b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002491e:	f7 c7 01 00 00 00    	test   edi,0x1
c0024924:	0f 84 aa 00 00 00    	je     c00249d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002492a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002492e:	89 d8                	mov    eax,ebx
c0024930:	c1 e0 07             	shl    eax,0x7
c0024933:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002493a:	55                   	push   ebp
c002493b:	56                   	push   esi
c002493c:	e8 31 fe ff ff       	call   c0024772 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024941:	5a                   	pop    edx
c0024942:	83 f8 01             	cmp    eax,0x1
c0024945:	59                   	pop    ecx
c0024946:	75 30                	jne    c0024978 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024948:	50                   	push   eax
c0024949:	50                   	push   eax
c002494a:	53                   	push   ebx
c002494b:	68 25 da 02 c0       	push   0xc002da25
c0024950:	e8 48 e1 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024955:	83 c4 0c             	add    esp,0xc
c0024958:	53                   	push   ebx
c0024959:	55                   	push   ebp
c002495a:	56                   	push   esi
c002495b:	e8 a4 fe ff ff       	call   c0024804 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024960:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024967:	e8 20 af fe ff       	call   c000f88c <malloc>
c002496c:	89 c5                	mov    ebp,eax
c002496e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024971:	e8 5c 0d 00 00       	call   c00256d2 <SATA::SATA()>
c0024976:	eb 33                	jmp    c00249ab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024978:	83 f8 04             	cmp    eax,0x4
c002497b:	75 47                	jne    c00249c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002497d:	50                   	push   eax
c002497e:	50                   	push   eax
c002497f:	53                   	push   ebx
c0024980:	68 3c da 02 c0       	push   0xc002da3c
c0024985:	e8 13 e1 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002498a:	83 c4 0c             	add    esp,0xc
c002498d:	53                   	push   ebx
c002498e:	55                   	push   ebp
c002498f:	56                   	push   esi
c0024990:	e8 6f fe ff ff       	call   c0024804 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024995:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002499c:	e8 eb ae fe ff       	call   c000f88c <malloc>
c00249a1:	89 c5                	mov    ebp,eax
c00249a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00249a6:	e8 d3 10 00 00       	call   c0025a7e <SATAPI::SATAPI()>
c00249ab:	5a                   	pop    edx
c00249ac:	59                   	pop    ecx
c00249ad:	55                   	push   ebp
c00249ae:	56                   	push   esi
c00249af:	e8 22 f5 fe ff       	call   c0013ed6 <Device::addChild(Device*)>
c00249b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00249b7:	56                   	push   esi
c00249b8:	6a 00                	push   0x0
c00249ba:	53                   	push   ebx
c00249bb:	55                   	push   ebp
c00249bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00249bf:	83 c4 20             	add    esp,0x20
c00249c2:	eb 10                	jmp    c00249d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00249c4:	50                   	push   eax
c00249c5:	50                   	push   eax
c00249c6:	53                   	push   ebx
c00249c7:	68 55 da 02 c0       	push   0xc002da55
c00249cc:	e8 cc e0 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00249d1:	83 c4 10             	add    esp,0x10
c00249d4:	d1 ef                	shr    edi,1
c00249d6:	43                   	inc    ebx
c00249d7:	83 fb 20             	cmp    ebx,0x20
c00249da:	0f 85 3e ff ff ff    	jne    c002491e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00249e0:	83 c4 0c             	add    esp,0xc
c00249e3:	5b                   	pop    ebx
c00249e4:	5e                   	pop    esi
c00249e5:	5f                   	pop    edi
c00249e6:	5d                   	pop    ebp
c00249e7:	c3                   	ret    

c00249e8 <SATABus::open(int, int, void*)>:
c00249e8:	83 ec 14             	sub    esp,0x14
c00249eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249ef:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00249f5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00249fb:	52                   	push   edx
c00249fc:	50                   	push   eax
c00249fd:	e8 08 ff ff ff       	call   c002490a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024a02:	31 c0                	xor    eax,eax
c0024a04:	83 c4 1c             	add    esp,0x1c
c0024a07:	c3                   	ret    

c0024a08 <ATA::close(int, int, void*)>:
c0024a08:	83 ec 0c             	sub    esp,0xc
c0024a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a0f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a15:	85 c0                	test   eax,eax
c0024a17:	74 0c                	je     c0024a25 <ATA::close(int, int, void*)+0x1d>
c0024a19:	83 ec 0c             	sub    esp,0xc
c0024a1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a1e:	50                   	push   eax
c0024a1f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a22:	83 c4 10             	add    esp,0x10
c0024a25:	31 c0                	xor    eax,eax
c0024a27:	83 c4 0c             	add    esp,0xc
c0024a2a:	c3                   	ret    
c0024a2b:	90                   	nop

c0024a2c <ATA::powerSaving(PowerSavingLevel)>:
c0024a2c:	c3                   	ret    
c0024a2d:	90                   	nop

c0024a2e <ATA::ATA()>:
c0024a2e:	83 ec 0c             	sub    esp,0xc
c0024a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a35:	83 ec 04             	sub    esp,0x4
c0024a38:	68 00 02 00 00       	push   0x200
c0024a3d:	68 3d db 02 c0       	push   0xc002db3d
c0024a42:	50                   	push   eax
c0024a43:	e8 d4 f8 fe ff       	call   c001431c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a48:	83 c4 10             	add    esp,0x10
c0024a4b:	ba c0 da 02 c0       	mov    edx,0xc002dac0
c0024a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a54:	89 10                	mov    DWORD PTR [eax],edx
c0024a56:	90                   	nop
c0024a57:	83 c4 0c             	add    esp,0xc
c0024a5a:	c3                   	ret    
c0024a5b:	90                   	nop

c0024a5c <ATA::flush(bool)>:
c0024a5c:	53                   	push   ebx
c0024a5d:	83 ec 08             	sub    esp,0x8
c0024a60:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024a65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a69:	19 c0                	sbb    eax,eax
c0024a6b:	83 e0 fd             	and    eax,0xfffffffd
c0024a6e:	05 ea 00 00 00       	add    eax,0xea
c0024a73:	50                   	push   eax
c0024a74:	6a 07                	push   0x7
c0024a76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a7d:	50                   	push   eax
c0024a7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a84:	e8 dd ef ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a89:	83 c4 0c             	add    esp,0xc
c0024a8c:	6a 00                	push   0x0
c0024a8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a95:	50                   	push   eax
c0024a96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a9c:	e8 71 fb ff ff       	call   c0024612 <IDE::polling(unsigned char, unsigned int)>
c0024aa1:	83 c4 18             	add    esp,0x18
c0024aa4:	5b                   	pop    ebx
c0024aa5:	c3                   	ret    

c0024aa6 <ATA::readyForCommand()>:
c0024aa6:	56                   	push   esi
c0024aa7:	53                   	push   ebx
c0024aa8:	31 db                	xor    ebx,ebx
c0024aaa:	50                   	push   eax
c0024aab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024aaf:	50                   	push   eax
c0024ab0:	6a 0c                	push   0xc
c0024ab2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ab9:	50                   	push   eax
c0024aba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024ac0:	e8 61 f0 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0024ac5:	83 c4 10             	add    esp,0x10
c0024ac8:	a8 88                	test   al,0x88
c0024aca:	74 23                	je     c0024aef <ATA::readyForCommand()+0x49>
c0024acc:	43                   	inc    ebx
c0024acd:	83 fb 63             	cmp    ebx,0x63
c0024ad0:	7e dd                	jle    c0024aaf <ATA::readyForCommand()+0x9>
c0024ad2:	51                   	push   ecx
c0024ad3:	51                   	push   ecx
c0024ad4:	6a 00                	push   0x0
c0024ad6:	68 40 42 0f 00       	push   0xf4240
c0024adb:	e8 a9 9a ff ff       	call   c001e589 <nanoSleep(unsigned long long)>
c0024ae0:	83 c4 10             	add    esp,0x10
c0024ae3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024ae9:	75 c4                	jne    c0024aaf <ATA::readyForCommand()+0x9>
c0024aeb:	31 c0                	xor    eax,eax
c0024aed:	eb 02                	jmp    c0024af1 <ATA::readyForCommand()+0x4b>
c0024aef:	b0 01                	mov    al,0x1
c0024af1:	5a                   	pop    edx
c0024af2:	5b                   	pop    ebx
c0024af3:	5e                   	pop    esi
c0024af4:	c3                   	ret    
c0024af5:	90                   	nop

c0024af6 <ATA::access(unsigned long long, int, void*, bool)>:
c0024af6:	55                   	push   ebp
c0024af7:	57                   	push   edi
c0024af8:	56                   	push   esi
c0024af9:	53                   	push   ebx
c0024afa:	83 ec 2c             	sub    esp,0x2c
c0024afd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024b01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b05:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024b09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024b0d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024b11:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024b15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024b19:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024b1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024b23:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024b29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024b2d:	c1 e0 06             	shl    eax,0x6
c0024b30:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024b38:	74 5d                	je     c0024b97 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024b3a:	89 fa                	mov    edx,edi
c0024b3c:	89 f0                	mov    eax,esi
c0024b3e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024b42:	c1 ea 1c             	shr    edx,0x1c
c0024b45:	89 d1                	mov    ecx,edx
c0024b47:	09 c1                	or     ecx,eax
c0024b49:	74 25                	je     c0024b70 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024b4b:	31 ed                	xor    ebp,ebp
c0024b4d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024b54:	89 fa                	mov    edx,edi
c0024b56:	89 f0                	mov    eax,esi
c0024b58:	0f ad d0             	shrd   eax,edx,cl
c0024b5b:	d3 ea                	shr    edx,cl
c0024b5d:	f6 c1 20             	test   cl,0x20
c0024b60:	74 02                	je     c0024b64 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024b62:	89 d0                	mov    eax,edx
c0024b64:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024b68:	45                   	inc    ebp
c0024b69:	83 fd 06             	cmp    ebp,0x6
c0024b6c:	75 df                	jne    c0024b4d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024b6e:	eb 76                	jmp    c0024be6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024b70:	89 f0                	mov    eax,esi
c0024b72:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024b77:	89 fa                	mov    edx,edi
c0024b79:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024b80:	0f ac d0 10          	shrd   eax,edx,0x10
c0024b84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024b89:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024b8d:	c1 ee 18             	shr    esi,0x18
c0024b90:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024b95:	eb 56                	jmp    c0024bed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024b97:	6a 00                	push   0x0
c0024b99:	6a 3f                	push   0x3f
c0024b9b:	57                   	push   edi
c0024b9c:	56                   	push   esi
c0024b9d:	e8 92 29 00 00       	call   c0027534 <__umoddi3>
c0024ba2:	83 c4 10             	add    esp,0x10
c0024ba5:	40                   	inc    eax
c0024ba6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024baa:	6a 00                	push   0x0
c0024bac:	68 f0 03 00 00       	push   0x3f0
c0024bb1:	57                   	push   edi
c0024bb2:	56                   	push   esi
c0024bb3:	e8 7c 28 00 00       	call   c0027434 <__udivdi3>
c0024bb8:	83 c4 10             	add    esp,0x10
c0024bbb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024bc0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024bc7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024bcc:	6a 00                	push   0x0
c0024bce:	6a 3f                	push   0x3f
c0024bd0:	57                   	push   edi
c0024bd1:	56                   	push   esi
c0024bd2:	e8 5d 28 00 00       	call   c0027434 <__udivdi3>
c0024bd7:	83 c4 10             	add    esp,0x10
c0024bda:	89 c6                	mov    esi,eax
c0024bdc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024be1:	83 e6 0f             	and    esi,0xf
c0024be4:	eb 07                	jmp    c0024bed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024be6:	31 f6                	xor    esi,esi
c0024be8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024bed:	bf 01 00 00 00       	mov    edi,0x1
c0024bf2:	50                   	push   eax
c0024bf3:	6a 00                	push   0x0
c0024bf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bfc:	50                   	push   eax
c0024bfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c01:	e8 6c f0 ff ff       	call   c0023c72 <IDE::enableIRQs(unsigned char, bool)>
c0024c06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c09:	e8 98 fe ff ff       	call   c0024aa6 <ATA::readyForCommand()>
c0024c0e:	83 c4 10             	add    esp,0x10
c0024c11:	84 c0                	test   al,al
c0024c13:	0f 84 5a 02 00 00    	je     c0024e73 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c19:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024c1f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024c25:	c1 e0 04             	shl    eax,0x4
c0024c28:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024c2f:	09 c6                	or     esi,eax
c0024c31:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024c36:	75 05                	jne    c0024c3d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024c38:	83 ce a0             	or     esi,0xffffffa0
c0024c3b:	eb 03                	jmp    c0024c40 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024c3d:	83 ce e0             	or     esi,0xffffffe0
c0024c40:	89 f0                	mov    eax,esi
c0024c42:	0f b6 f0             	movzx  esi,al
c0024c45:	56                   	push   esi
c0024c46:	6a 06                	push   0x6
c0024c48:	51                   	push   ecx
c0024c49:	52                   	push   edx
c0024c4a:	e8 17 ee ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c4f:	83 c4 10             	add    esp,0x10
c0024c52:	6a 00                	push   0x0
c0024c54:	6a 01                	push   0x1
c0024c56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c5d:	50                   	push   eax
c0024c5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c64:	e8 fd ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c69:	83 c4 10             	add    esp,0x10
c0024c6c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024c71:	75 6e                	jne    c0024ce1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024c73:	6a 00                	push   0x0
c0024c75:	6a 08                	push   0x8
c0024c77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c7e:	50                   	push   eax
c0024c7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c85:	e8 dc ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c8a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024c8f:	50                   	push   eax
c0024c90:	6a 09                	push   0x9
c0024c92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c99:	50                   	push   eax
c0024c9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ca0:	e8 c1 ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ca5:	83 c4 20             	add    esp,0x20
c0024ca8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024cad:	50                   	push   eax
c0024cae:	6a 0a                	push   0xa
c0024cb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cb7:	50                   	push   eax
c0024cb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cbe:	e8 a3 ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cc3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024cc8:	50                   	push   eax
c0024cc9:	6a 0b                	push   0xb
c0024ccb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd2:	50                   	push   eax
c0024cd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cd9:	e8 88 ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cde:	83 c4 20             	add    esp,0x20
c0024ce1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024ce6:	50                   	push   eax
c0024ce7:	6a 02                	push   0x2
c0024ce9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cf0:	50                   	push   eax
c0024cf1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cf7:	e8 6a ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cfc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024d01:	50                   	push   eax
c0024d02:	6a 03                	push   0x3
c0024d04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d0b:	50                   	push   eax
c0024d0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d12:	e8 4f ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d17:	83 c4 20             	add    esp,0x20
c0024d1a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024d1f:	50                   	push   eax
c0024d20:	6a 04                	push   0x4
c0024d22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d29:	50                   	push   eax
c0024d2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d30:	e8 31 ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024d3a:	50                   	push   eax
c0024d3b:	6a 05                	push   0x5
c0024d3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d44:	50                   	push   eax
c0024d45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d4b:	e8 16 ed ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d50:	83 c4 20             	add    esp,0x20
c0024d53:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024d58:	0f 94 c0             	sete   al
c0024d5b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d60:	74 09                	je     c0024d6b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024d62:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024d69:	eb 07                	jmp    c0024d72 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024d6b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024d72:	0f b6 c0             	movzx  eax,al
c0024d75:	50                   	push   eax
c0024d76:	6a 07                	push   0x7
c0024d78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d7f:	50                   	push   eax
c0024d80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d86:	e8 db ec ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d8b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024d8f:	83 c4 10             	add    esp,0x10
c0024d92:	85 f6                	test   esi,esi
c0024d94:	0f 84 ba 00 00 00    	je     c0024e54 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024d9a:	50                   	push   eax
c0024d9b:	6a 01                	push   0x1
c0024d9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024da4:	50                   	push   eax
c0024da5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dab:	e8 62 f8 ff ff       	call   c0024612 <IDE::polling(unsigned char, unsigned int)>
c0024db0:	83 c4 10             	add    esp,0x10
c0024db3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024db9:	84 c0                	test   al,al
c0024dbb:	74 2c                	je     c0024de9 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024dbd:	0f b6 f8             	movzx  edi,al
c0024dc0:	0f b6 d2             	movzx  edx,dl
c0024dc3:	57                   	push   edi
c0024dc4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024dcb:	50                   	push   eax
c0024dcc:	52                   	push   edx
c0024dcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dd3:	e8 a4 f6 ff ff       	call   c002447c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024dd8:	c7 04 24 98 da 02 c0 	mov    DWORD PTR [esp],0xc002da98
c0024ddf:	e8 b9 dc fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0024de4:	e9 87 00 00 00       	jmp    c0024e70 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024de9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024dee:	74 33                	je     c0024e23 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024df0:	31 ed                	xor    ebp,ebp
c0024df2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024df6:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024dfa:	50                   	push   eax
c0024dfb:	50                   	push   eax
c0024dfc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e03:	50                   	push   eax
c0024e04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e0a:	e8 45 ec ff ff       	call   c0023a54 <IDE::getBase(unsigned char)>
c0024e0f:	89 c2                	mov    edx,eax
c0024e11:	89 f8                	mov    eax,edi
c0024e13:	66 ef                	out    dx,ax
c0024e15:	45                   	inc    ebp
c0024e16:	83 c4 10             	add    esp,0x10
c0024e19:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024e1f:	75 d1                	jne    c0024df2 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024e21:	eb 23                	jmp    c0024e46 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024e23:	0f b6 d2             	movzx  edx,dl
c0024e26:	51                   	push   ecx
c0024e27:	51                   	push   ecx
c0024e28:	52                   	push   edx
c0024e29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e2f:	e8 20 ec ff ff       	call   c0023a54 <IDE::getBase(unsigned char)>
c0024e34:	b9 00 01 00 00       	mov    ecx,0x100
c0024e39:	89 c2                	mov    edx,eax
c0024e3b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024e3f:	fc                   	cld    
c0024e40:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024e43:	83 c4 10             	add    esp,0x10
c0024e46:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024e4e:	4e                   	dec    esi
c0024e4f:	e9 3e ff ff ff       	jmp    c0024d92 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024e54:	31 ff                	xor    edi,edi
c0024e56:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024e5b:	74 16                	je     c0024e73 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024e5d:	50                   	push   eax
c0024e5e:	50                   	push   eax
c0024e5f:	31 c0                	xor    eax,eax
c0024e61:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024e66:	0f 94 c0             	sete   al
c0024e69:	50                   	push   eax
c0024e6a:	53                   	push   ebx
c0024e6b:	e8 ec fb ff ff       	call   c0024a5c <ATA::flush(bool)>
c0024e70:	83 c4 10             	add    esp,0x10
c0024e73:	83 c4 2c             	add    esp,0x2c
c0024e76:	89 f8                	mov    eax,edi
c0024e78:	5b                   	pop    ebx
c0024e79:	5e                   	pop    esi
c0024e7a:	5f                   	pop    edi
c0024e7b:	5d                   	pop    ebp
c0024e7c:	c3                   	ret    
c0024e7d:	90                   	nop

c0024e7e <ATA::read(unsigned long long, int, void*)>:
c0024e7e:	57                   	push   edi
c0024e7f:	b8 04 00 00 00       	mov    eax,0x4
c0024e84:	56                   	push   esi
c0024e85:	53                   	push   ebx
c0024e86:	83 ec 10             	sub    esp,0x10
c0024e89:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e8d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024e91:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024e94:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024e98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e9c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ea2:	77 3b                	ja     c0024edf <ATA::read(unsigned long long, int, void*)+0x61>
c0024ea4:	b8 06 00 00 00       	mov    eax,0x6
c0024ea9:	85 d2                	test   edx,edx
c0024eab:	74 32                	je     c0024edf <ATA::read(unsigned long long, int, void*)+0x61>
c0024ead:	50                   	push   eax
c0024eae:	50                   	push   eax
c0024eaf:	6a 00                	push   0x0
c0024eb1:	52                   	push   edx
c0024eb2:	53                   	push   ebx
c0024eb3:	57                   	push   edi
c0024eb4:	56                   	push   esi
c0024eb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024eb9:	e8 38 fc ff ff       	call   c0024af6 <ATA::access(unsigned long long, int, void*, bool)>
c0024ebe:	83 c4 20             	add    esp,0x20
c0024ec1:	85 c0                	test   eax,eax
c0024ec3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ec7:	75 11                	jne    c0024eda <ATA::read(unsigned long long, int, void*)+0x5c>
c0024ec9:	01 1d 38 34 03 c0    	add    DWORD PTR ds:0xc0033438,ebx
c0024ecf:	e8 d2 b6 fe ff       	call   c00105a6 <VgaText::updateDiskUsage()>
c0024ed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ed8:	eb 05                	jmp    c0024edf <ATA::read(unsigned long long, int, void*)+0x61>
c0024eda:	b8 01 00 00 00       	mov    eax,0x1
c0024edf:	83 c4 10             	add    esp,0x10
c0024ee2:	5b                   	pop    ebx
c0024ee3:	5e                   	pop    esi
c0024ee4:	5f                   	pop    edi
c0024ee5:	c3                   	ret    

c0024ee6 <ATA::write(unsigned long long, int, void*)>:
c0024ee6:	57                   	push   edi
c0024ee7:	b8 04 00 00 00       	mov    eax,0x4
c0024eec:	56                   	push   esi
c0024eed:	53                   	push   ebx
c0024eee:	83 ec 10             	sub    esp,0x10
c0024ef1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ef5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ef9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024efc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f04:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f0a:	77 3b                	ja     c0024f47 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f0c:	b8 06 00 00 00       	mov    eax,0x6
c0024f11:	85 d2                	test   edx,edx
c0024f13:	74 32                	je     c0024f47 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f15:	50                   	push   eax
c0024f16:	50                   	push   eax
c0024f17:	6a 01                	push   0x1
c0024f19:	52                   	push   edx
c0024f1a:	53                   	push   ebx
c0024f1b:	57                   	push   edi
c0024f1c:	56                   	push   esi
c0024f1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f21:	e8 d0 fb ff ff       	call   c0024af6 <ATA::access(unsigned long long, int, void*, bool)>
c0024f26:	83 c4 20             	add    esp,0x20
c0024f29:	85 c0                	test   eax,eax
c0024f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f2f:	75 11                	jne    c0024f42 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024f31:	01 1d 34 34 03 c0    	add    DWORD PTR ds:0xc0033434,ebx
c0024f37:	e8 6a b6 fe ff       	call   c00105a6 <VgaText::updateDiskUsage()>
c0024f3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f40:	eb 05                	jmp    c0024f47 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f42:	b8 01 00 00 00       	mov    eax,0x1
c0024f47:	83 c4 10             	add    esp,0x10
c0024f4a:	5b                   	pop    ebx
c0024f4b:	5e                   	pop    esi
c0024f4c:	5f                   	pop    edi
c0024f4d:	c3                   	ret    

c0024f4e <ATA::detectCHS()>:
c0024f4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024f52:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024f58:	c1 e0 06             	shl    eax,0x6
c0024f5b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024f61:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024f6b:	c7 44 24 04 a3 da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002daa3
c0024f73:	e9 5b 55 ff ff       	jmp    c001a4d3 <Krnl::panic(char const*)>

c0024f78 <ATA::open(int, int, void*)>:
c0024f78:	53                   	push   ebx
c0024f79:	83 ec 08             	sub    esp,0x8
c0024f7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024f84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024f88:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024f8e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f94:	c1 e0 06             	shl    eax,0x6
c0024f97:	01 d0                	add    eax,edx
c0024f99:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024fa0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024fa6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024fad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024fb7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024fbd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024fc4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024fcb:	75 0c                	jne    c0024fd9 <ATA::open(int, int, void*)+0x61>
c0024fcd:	83 ec 0c             	sub    esp,0xc
c0024fd0:	53                   	push   ebx
c0024fd1:	e8 78 ff ff ff       	call   c0024f4e <ATA::detectCHS()>
c0024fd6:	83 c4 10             	add    esp,0x10
c0024fd9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024fdf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024fe5:	c1 e0 06             	shl    eax,0x6
c0024fe8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024fef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ff9:	d1 e8                	shr    eax,1
c0024ffb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0025001:	6a 04                	push   0x4
c0025003:	6a 0c                	push   0xc
c0025005:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002500c:	50                   	push   eax
c002500d:	52                   	push   edx
c002500e:	e8 53 ea ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025013:	90                   	nop
c0025014:	90                   	nop
c0025015:	6a 00                	push   0x0
c0025017:	6a 0c                	push   0xc
c0025019:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025020:	50                   	push   eax
c0025021:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025027:	e8 3a ea ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002502c:	83 c4 14             	add    esp,0x14
c002502f:	53                   	push   ebx
c0025030:	e8 4f f3 fe ff       	call   c0014384 <PhysicalDisk::startCache()>
c0025035:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025038:	e8 01 16 ff ff       	call   c001663e <createPartitionsForDisk(PhysicalDisk*)>
c002503d:	31 c0                	xor    eax,eax
c002503f:	83 c4 18             	add    esp,0x18
c0025042:	5b                   	pop    ebx
c0025043:	c3                   	ret    

c0025044 <ATAPI::write(unsigned long long, int, void*)>:
c0025044:	b8 03 00 00 00       	mov    eax,0x3
c0025049:	c3                   	ret    

c002504a <ATAPI::close(int, int, void*)>:
c002504a:	83 ec 0c             	sub    esp,0xc
c002504d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025051:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025057:	85 c0                	test   eax,eax
c0025059:	74 0c                	je     c0025067 <ATAPI::close(int, int, void*)+0x1d>
c002505b:	83 ec 0c             	sub    esp,0xc
c002505e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025060:	50                   	push   eax
c0025061:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025064:	83 c4 10             	add    esp,0x10
c0025067:	31 c0                	xor    eax,eax
c0025069:	83 c4 0c             	add    esp,0xc
c002506c:	c3                   	ret    
c002506d:	90                   	nop

c002506e <ATAPI::ATAPI()>:
c002506e:	83 ec 0c             	sub    esp,0xc
c0025071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025075:	83 ec 04             	sub    esp,0x4
c0025078:	68 00 08 00 00       	push   0x800
c002507d:	68 dd db 02 c0       	push   0xc002dbdd
c0025082:	50                   	push   eax
c0025083:	e8 94 f2 fe ff       	call   c001431c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025088:	83 c4 10             	add    esp,0x10
c002508b:	ba f8 da 02 c0       	mov    edx,0xc002daf8
c0025090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025094:	89 10                	mov    DWORD PTR [eax],edx
c0025096:	90                   	nop
c0025097:	83 c4 0c             	add    esp,0xc
c002509a:	c3                   	ret    
c002509b:	90                   	nop

c002509c <ATAPI::readyForCommand()>:
c002509c:	56                   	push   esi
c002509d:	53                   	push   ebx
c002509e:	31 db                	xor    ebx,ebx
c00250a0:	50                   	push   eax
c00250a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00250a5:	50                   	push   eax
c00250a6:	6a 0c                	push   0xc
c00250a8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00250af:	50                   	push   eax
c00250b0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00250b6:	e8 6b ea ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c00250bb:	83 c4 10             	add    esp,0x10
c00250be:	a8 88                	test   al,0x88
c00250c0:	74 23                	je     c00250e5 <ATAPI::readyForCommand()+0x49>
c00250c2:	43                   	inc    ebx
c00250c3:	83 fb 63             	cmp    ebx,0x63
c00250c6:	7e dd                	jle    c00250a5 <ATAPI::readyForCommand()+0x9>
c00250c8:	51                   	push   ecx
c00250c9:	51                   	push   ecx
c00250ca:	6a 00                	push   0x0
c00250cc:	68 40 42 0f 00       	push   0xf4240
c00250d1:	e8 b3 94 ff ff       	call   c001e589 <nanoSleep(unsigned long long)>
c00250d6:	83 c4 10             	add    esp,0x10
c00250d9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00250df:	75 c4                	jne    c00250a5 <ATAPI::readyForCommand()+0x9>
c00250e1:	31 c0                	xor    eax,eax
c00250e3:	eb 02                	jmp    c00250e7 <ATAPI::readyForCommand()+0x4b>
c00250e5:	b0 01                	mov    al,0x1
c00250e7:	5a                   	pop    edx
c00250e8:	5b                   	pop    ebx
c00250e9:	5e                   	pop    esi
c00250ea:	c3                   	ret    
c00250eb:	90                   	nop

c00250ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00250ec:	55                   	push   ebp
c00250ed:	57                   	push   edi
c00250ee:	56                   	push   esi
c00250ef:	53                   	push   ebx
c00250f0:	83 ec 20             	sub    esp,0x20
c00250f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00250f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00250fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00250ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025103:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025107:	6a 01                	push   0x1
c0025109:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025110:	50                   	push   eax
c0025111:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025117:	e8 56 eb ff ff       	call   c0023c72 <IDE::enableIRQs(unsigned char, bool)>
c002511c:	5e                   	pop    esi
c002511d:	58                   	pop    eax
c002511e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025125:	50                   	push   eax
c0025126:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002512c:	e8 0f e9 ff ff       	call   c0023a40 <IDE::prepareInterrupt(unsigned char)>
c0025131:	89 3c 24             	mov    DWORD PTR [esp],edi
c0025134:	e8 63 ff ff ff       	call   c002509c <ATAPI::readyForCommand()>
c0025139:	83 c4 10             	add    esp,0x10
c002513c:	84 c0                	test   al,al
c002513e:	75 0a                	jne    c002514a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0025140:	bb 01 00 00 00       	mov    ebx,0x1
c0025145:	e9 57 02 00 00       	jmp    c00253a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002514a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025150:	c1 e0 04             	shl    eax,0x4
c0025153:	0f b6 c0             	movzx  eax,al
c0025156:	50                   	push   eax
c0025157:	6a 06                	push   0x6
c0025159:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025160:	50                   	push   eax
c0025161:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025167:	e8 fa e8 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002516c:	6a 00                	push   0x0
c002516e:	6a 01                	push   0x1
c0025170:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025177:	50                   	push   eax
c0025178:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002517e:	e8 e3 e8 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025183:	83 c4 20             	add    esp,0x20
c0025186:	0f b6 c3             	movzx  eax,bl
c0025189:	0f b6 df             	movzx  ebx,bh
c002518c:	50                   	push   eax
c002518d:	6a 04                	push   0x4
c002518f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025196:	50                   	push   eax
c0025197:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002519d:	e8 c4 e8 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251a2:	53                   	push   ebx
c00251a3:	6a 05                	push   0x5
c00251a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251ac:	50                   	push   eax
c00251ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251b3:	e8 ae e8 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251b8:	83 c4 20             	add    esp,0x20
c00251bb:	68 a0 00 00 00       	push   0xa0
c00251c0:	6a 07                	push   0x7
c00251c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251c9:	50                   	push   eax
c00251ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251d0:	e8 91 e8 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251d5:	83 c4 0c             	add    esp,0xc
c00251d8:	6a 01                	push   0x1
c00251da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251e1:	50                   	push   eax
c00251e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251e8:	e8 25 f4 ff ff       	call   c0024612 <IDE::polling(unsigned char, unsigned int)>
c00251ed:	83 c4 10             	add    esp,0x10
c00251f0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00251f6:	84 c0                	test   al,al
c00251f8:	74 23                	je     c002521d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00251fa:	0f b6 d8             	movzx  ebx,al
c00251fd:	0f b6 d2             	movzx  edx,dl
c0025200:	53                   	push   ebx
c0025201:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025208:	50                   	push   eax
c0025209:	52                   	push   edx
c002520a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025210:	e8 67 f2 ff ff       	call   c002447c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0025215:	83 c4 10             	add    esp,0x10
c0025218:	e9 84 01 00 00       	jmp    c00253a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002521d:	0f b6 d2             	movzx  edx,dl
c0025220:	53                   	push   ebx
c0025221:	53                   	push   ebx
c0025222:	52                   	push   edx
c0025223:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025229:	e8 26 e8 ff ff       	call   c0023a54 <IDE::getBase(unsigned char)>
c002522e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025232:	b9 06 00 00 00       	mov    ecx,0x6
c0025237:	89 c2                	mov    edx,eax
c0025239:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002523c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025240:	83 c4 10             	add    esp,0x10
c0025243:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025249:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025250:	85 db                	test   ebx,ebx
c0025252:	0f 84 ec 00 00 00    	je     c0025344 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025258:	51                   	push   ecx
c0025259:	51                   	push   ecx
c002525a:	52                   	push   edx
c002525b:	50                   	push   eax
c002525c:	e8 73 e9 ff ff       	call   c0023bd4 <IDE::waitInterrupt(unsigned char)>
c0025261:	83 c4 10             	add    esp,0x10
c0025264:	84 c0                	test   al,al
c0025266:	0f 84 d4 fe ff ff    	je     c0025140 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002526c:	56                   	push   esi
c002526d:	56                   	push   esi
c002526e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025275:	50                   	push   eax
c0025276:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002527c:	e8 bf e7 ff ff       	call   c0023a40 <IDE::prepareInterrupt(unsigned char)>
c0025281:	83 c4 0c             	add    esp,0xc
c0025284:	6a 04                	push   0x4
c0025286:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002528d:	50                   	push   eax
c002528e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025294:	e8 8d e8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c0025299:	83 c4 0c             	add    esp,0xc
c002529c:	89 c6                	mov    esi,eax
c002529e:	6a 05                	push   0x5
c00252a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252a7:	50                   	push   eax
c00252a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252ae:	e8 73 e8 ff ff       	call   c0023b26 <IDE::read(unsigned char, unsigned char)>
c00252b3:	89 f1                	mov    ecx,esi
c00252b5:	0f b6 c0             	movzx  eax,al
c00252b8:	0f b6 f1             	movzx  esi,cl
c00252bb:	c1 e0 08             	shl    eax,0x8
c00252be:	09 c6                	or     esi,eax
c00252c0:	d1 fe                	sar    esi,1
c00252c2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00252c6:	83 c4 10             	add    esp,0x10
c00252c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00252ce:	74 41                	je     c0025311 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00252d0:	31 c9                	xor    ecx,ecx
c00252d2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00252d8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00252df:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00252e3:	75 0a                	jne    c00252ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00252e5:	01 c9                	add    ecx,ecx
c00252e7:	01 cd                	add    ebp,ecx
c00252e9:	4b                   	dec    ebx
c00252ea:	e9 54 ff ff ff       	jmp    c0025243 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00252ef:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00252f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00252f8:	51                   	push   ecx
c00252f9:	51                   	push   ecx
c00252fa:	52                   	push   edx
c00252fb:	50                   	push   eax
c00252fc:	e8 53 e7 ff ff       	call   c0023a54 <IDE::getBase(unsigned char)>
c0025301:	89 c2                	mov    edx,eax
c0025303:	89 f0                	mov    eax,esi
c0025305:	66 ef                	out    dx,ax
c0025307:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002530b:	83 c4 10             	add    esp,0x10
c002530e:	41                   	inc    ecx
c002530f:	eb c1                	jmp    c00252d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025311:	31 f6                	xor    esi,esi
c0025313:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025319:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025320:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025324:	75 06                	jne    c002532c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025326:	01 f6                	add    esi,esi
c0025328:	01 f5                	add    ebp,esi
c002532a:	eb bd                	jmp    c00252e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002532c:	51                   	push   ecx
c002532d:	51                   	push   ecx
c002532e:	52                   	push   edx
c002532f:	50                   	push   eax
c0025330:	e8 1f e7 ff ff       	call   c0023a54 <IDE::getBase(unsigned char)>
c0025335:	89 c2                	mov    edx,eax
c0025337:	66 ed                	in     ax,dx
c0025339:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002533e:	83 c4 10             	add    esp,0x10
c0025341:	46                   	inc    esi
c0025342:	eb cf                	jmp    c0025313 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025344:	51                   	push   ecx
c0025345:	51                   	push   ecx
c0025346:	52                   	push   edx
c0025347:	50                   	push   eax
c0025348:	e8 87 e8 ff ff       	call   c0023bd4 <IDE::waitInterrupt(unsigned char)>
c002534d:	83 c4 10             	add    esp,0x10
c0025350:	84 c0                	test   al,al
c0025352:	0f 84 e8 fd ff ff    	je     c0025140 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025358:	bb a0 86 01 00       	mov    ebx,0x186a0
c002535d:	52                   	push   edx
c002535e:	52                   	push   edx
c002535f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025366:	50                   	push   eax
c0025367:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002536d:	e8 ce e6 ff ff       	call   c0023a40 <IDE::prepareInterrupt(unsigned char)>
c0025372:	83 c4 10             	add    esp,0x10
c0025375:	50                   	push   eax
c0025376:	50                   	push   eax
c0025377:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002537e:	50                   	push   eax
c002537f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025385:	e8 ca e6 ff ff       	call   c0023a54 <IDE::getBase(unsigned char)>
c002538a:	8d 50 07             	lea    edx,[eax+0x7]
c002538d:	ec                   	in     al,dx
c002538e:	83 c4 10             	add    esp,0x10
c0025391:	a8 88                	test   al,0x88
c0025393:	74 0a                	je     c002539f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025395:	4b                   	dec    ebx
c0025396:	75 dd                	jne    c0025375 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025398:	bb 02 00 00 00       	mov    ebx,0x2
c002539d:	eb 02                	jmp    c00253a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002539f:	31 db                	xor    ebx,ebx
c00253a1:	83 c4 1c             	add    esp,0x1c
c00253a4:	89 d8                	mov    eax,ebx
c00253a6:	5b                   	pop    ebx
c00253a7:	5e                   	pop    esi
c00253a8:	5f                   	pop    edi
c00253a9:	5d                   	pop    ebp
c00253aa:	c3                   	ret    
c00253ab:	90                   	nop

c00253ac <ATAPI::diskRemoved()>:
c00253ac:	83 ec 18             	sub    esp,0x18
c00253af:	68 e9 db 02 c0       	push   0xc002dbe9
c00253b4:	e8 e4 d6 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00253b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00253bd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00253c4:	83 c4 1c             	add    esp,0x1c
c00253c7:	c3                   	ret    

c00253c8 <ATAPI::eject()>:
c00253c8:	57                   	push   edi
c00253c9:	b9 03 00 00 00       	mov    ecx,0x3
c00253ce:	53                   	push   ebx
c00253cf:	83 ec 14             	sub    esp,0x14
c00253d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00253d6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253da:	fc                   	cld    
c00253db:	31 c0                	xor    eax,eax
c00253dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253df:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00253e4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00253e9:	50                   	push   eax
c00253ea:	50                   	push   eax
c00253eb:	6a 00                	push   0x0
c00253ed:	6a 00                	push   0x0
c00253ef:	6a 00                	push   0x0
c00253f1:	6a 02                	push   0x2
c00253f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253f7:	50                   	push   eax
c00253f8:	53                   	push   ebx
c00253f9:	e8 ee fc ff ff       	call   c00250ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253fe:	83 c4 14             	add    esp,0x14
c0025401:	53                   	push   ebx
c0025402:	e8 a5 ff ff ff       	call   c00253ac <ATAPI::diskRemoved()>
c0025407:	83 c4 24             	add    esp,0x24
c002540a:	31 c0                	xor    eax,eax
c002540c:	5b                   	pop    ebx
c002540d:	5f                   	pop    edi
c002540e:	c3                   	ret    
c002540f:	90                   	nop

c0025410 <ATAPI::diskInserted()>:
c0025410:	53                   	push   ebx
c0025411:	83 ec 14             	sub    esp,0x14
c0025414:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025418:	68 00 dc 02 c0       	push   0xc002dc00
c002541d:	e8 7b d6 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0025422:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025429:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002542c:	e8 53 ef fe ff       	call   c0014384 <PhysicalDisk::startCache()>
c0025431:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025435:	83 c4 18             	add    esp,0x18
c0025438:	5b                   	pop    ebx
c0025439:	e9 00 12 ff ff       	jmp    c001663e <createPartitionsForDisk(PhysicalDisk*)>

c002543e <ATAPI::detectMedia()>:
c002543e:	56                   	push   esi
c002543f:	53                   	push   ebx
c0025440:	83 ec 28             	sub    esp,0x28
c0025443:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025447:	6a 0c                	push   0xc
c0025449:	6a 00                	push   0x0
c002544b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002544f:	56                   	push   esi
c0025450:	e8 fb b2 fd ff       	call   c0000750 <memset>
c0025455:	58                   	pop    eax
c0025456:	5a                   	pop    edx
c0025457:	6a 00                	push   0x0
c0025459:	6a 00                	push   0x0
c002545b:	6a 00                	push   0x0
c002545d:	6a 00                	push   0x0
c002545f:	56                   	push   esi
c0025460:	53                   	push   ebx
c0025461:	e8 86 fc ff ff       	call   c00250ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025466:	83 c4 1c             	add    esp,0x1c
c0025469:	6a 0c                	push   0xc
c002546b:	6a 00                	push   0x0
c002546d:	56                   	push   esi
c002546e:	e8 dd b2 fd ff       	call   c0000750 <memset>
c0025473:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025478:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002547d:	59                   	pop    ecx
c002547e:	58                   	pop    eax
c002547f:	6a 01                	push   0x1
c0025481:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025485:	50                   	push   eax
c0025486:	6a 00                	push   0x0
c0025488:	6a 12                	push   0x12
c002548a:	56                   	push   esi
c002548b:	53                   	push   ebx
c002548c:	e8 5b fc ff ff       	call   c00250ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025491:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025495:	83 c4 20             	add    esp,0x20
c0025498:	83 e0 7f             	and    eax,0x7f
c002549b:	3c 70                	cmp    al,0x70
c002549d:	74 15                	je     c00254b4 <ATAPI::detectMedia()+0x76>
c002549f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00254a6:	75 0c                	jne    c00254b4 <ATAPI::detectMedia()+0x76>
c00254a8:	83 ec 0c             	sub    esp,0xc
c00254ab:	53                   	push   ebx
c00254ac:	e8 5f ff ff ff       	call   c0025410 <ATAPI::diskInserted()>
c00254b1:	83 c4 10             	add    esp,0x10
c00254b4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00254b8:	83 e0 0f             	and    eax,0xf
c00254bb:	3c 02                	cmp    al,0x2
c00254bd:	75 1b                	jne    c00254da <ATAPI::detectMedia()+0x9c>
c00254bf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00254c4:	75 2d                	jne    c00254f3 <ATAPI::detectMedia()+0xb5>
c00254c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00254cd:	74 24                	je     c00254f3 <ATAPI::detectMedia()+0xb5>
c00254cf:	83 ec 0c             	sub    esp,0xc
c00254d2:	53                   	push   ebx
c00254d3:	e8 d4 fe ff ff       	call   c00253ac <ATAPI::diskRemoved()>
c00254d8:	eb 16                	jmp    c00254f0 <ATAPI::detectMedia()+0xb2>
c00254da:	84 c0                	test   al,al
c00254dc:	75 15                	jne    c00254f3 <ATAPI::detectMedia()+0xb5>
c00254de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00254e5:	75 0c                	jne    c00254f3 <ATAPI::detectMedia()+0xb5>
c00254e7:	83 ec 0c             	sub    esp,0xc
c00254ea:	53                   	push   ebx
c00254eb:	e8 20 ff ff ff       	call   c0025410 <ATAPI::diskInserted()>
c00254f0:	83 c4 10             	add    esp,0x10
c00254f3:	83 c4 24             	add    esp,0x24
c00254f6:	5b                   	pop    ebx
c00254f7:	5e                   	pop    esi
c00254f8:	c3                   	ret    
c00254f9:	90                   	nop

c00254fa <ATAPI::open(int, int, void*)>:
c00254fa:	53                   	push   ebx
c00254fb:	83 ec 08             	sub    esp,0x8
c00254fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025502:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025506:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002550a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025510:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025516:	c1 e0 06             	shl    eax,0x6
c0025519:	01 d0                	add    eax,edx
c002551b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025522:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025528:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002552f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025539:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002553f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025546:	6a 04                	push   0x4
c0025548:	6a 0c                	push   0xc
c002554a:	51                   	push   ecx
c002554b:	52                   	push   edx
c002554c:	e8 15 e5 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025551:	90                   	nop
c0025552:	90                   	nop
c0025553:	6a 00                	push   0x0
c0025555:	6a 0c                	push   0xc
c0025557:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002555e:	50                   	push   eax
c002555f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025565:	e8 fc e4 ff ff       	call   c0023a66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002556a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025571:	83 c4 14             	add    esp,0x14
c0025574:	53                   	push   ebx
c0025575:	e8 c4 fe ff ff       	call   c002543e <ATAPI::detectMedia()>
c002557a:	31 c0                	xor    eax,eax
c002557c:	83 c4 18             	add    esp,0x18
c002557f:	5b                   	pop    ebx
c0025580:	c3                   	ret    
c0025581:	90                   	nop

c0025582 <ATAPI::read(unsigned long long, int, void*)>:
c0025582:	55                   	push   ebp
c0025583:	57                   	push   edi
c0025584:	56                   	push   esi
c0025585:	53                   	push   ebx
c0025586:	83 ec 1c             	sub    esp,0x1c
c0025589:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002558d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025591:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025595:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002559c:	74 41                	je     c00255df <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002559e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255a2:	b9 03 00 00 00       	mov    ecx,0x3
c00255a7:	fc                   	cld    
c00255a8:	31 c0                	xor    eax,eax
c00255aa:	86 fb                	xchg   bl,bh
c00255ac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00255ae:	c1 c3 10             	rol    ebx,0x10
c00255b1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00255b6:	89 e8                	mov    eax,ebp
c00255b8:	86 fb                	xchg   bl,bh
c00255ba:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255be:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00255c2:	50                   	push   eax
c00255c3:	50                   	push   eax
c00255c4:	55                   	push   ebp
c00255c5:	c1 e5 0b             	shl    ebp,0xb
c00255c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00255cc:	6a 00                	push   0x0
c00255ce:	55                   	push   ebp
c00255cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255d3:	50                   	push   eax
c00255d4:	56                   	push   esi
c00255d5:	e8 12 fb ff ff       	call   c00250ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00255da:	83 c4 20             	add    esp,0x20
c00255dd:	eb 1a                	jmp    c00255f9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00255df:	83 ec 0c             	sub    esp,0xc
c00255e2:	56                   	push   esi
c00255e3:	e8 56 fe ff ff       	call   c002543e <ATAPI::detectMedia()>
c00255e8:	83 c4 10             	add    esp,0x10
c00255eb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00255f2:	75 aa                	jne    c002559e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00255f4:	b8 02 00 00 00       	mov    eax,0x2
c00255f9:	83 c4 1c             	add    esp,0x1c
c00255fc:	5b                   	pop    ebx
c00255fd:	5e                   	pop    esi
c00255fe:	5f                   	pop    edi
c00255ff:	5d                   	pop    ebp
c0025600:	c3                   	ret    
c0025601:	90                   	nop

c0025602 <SATA::close(int, int, void*)>:
c0025602:	83 ec 0c             	sub    esp,0xc
c0025605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025609:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002560f:	85 c0                	test   eax,eax
c0025611:	74 0c                	je     c002561f <SATA::close(int, int, void*)+0x1d>
c0025613:	83 ec 0c             	sub    esp,0xc
c0025616:	8b 10                	mov    edx,DWORD PTR [eax]
c0025618:	50                   	push   eax
c0025619:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002561c:	83 c4 10             	add    esp,0x10
c002561f:	31 c0                	xor    eax,eax
c0025621:	83 c4 0c             	add    esp,0xc
c0025624:	c3                   	ret    
c0025625:	90                   	nop

c0025626 <SATA::powerSaving(PowerSavingLevel)>:
c0025626:	c3                   	ret    
c0025627:	90                   	nop

c0025628 <SATA::open(int, int, void*)>:
c0025628:	56                   	push   esi
c0025629:	53                   	push   ebx
c002562a:	50                   	push   eax
c002562b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002562f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025633:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002563d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025643:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002564d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025651:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002565b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025661:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025668:	e8 ff a4 fe ff       	call   c000fb6c <Phys::allocatePage()>
c002566d:	89 c6                	mov    esi,eax
c002566f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025675:	81 c6 00 10 00 00    	add    esi,0x1000
c002567b:	e8 ec a4 fe ff       	call   c000fb6c <Phys::allocatePage()>
c0025680:	39 c6                	cmp    esi,eax
c0025682:	74 10                	je     c0025694 <SATA::open(int, int, void*)+0x6c>
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	68 28 db 02 c0       	push   0xc002db28
c002568c:	e8 42 4e ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0025691:	83 c4 10             	add    esp,0x10
c0025694:	83 ec 0c             	sub    esp,0xc
c0025697:	6a 02                	push   0x2
c0025699:	e8 f9 bf fe ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c002569e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256a4:	6a 03                	push   0x3
c00256a6:	50                   	push   eax
c00256a7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00256ad:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c00256b3:	e8 16 c8 fe ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c00256b8:	83 c4 14             	add    esp,0x14
c00256bb:	53                   	push   ebx
c00256bc:	e8 c3 ec fe ff       	call   c0014384 <PhysicalDisk::startCache()>
c00256c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00256c4:	e8 75 0f ff ff       	call   c001663e <createPartitionsForDisk(PhysicalDisk*)>
c00256c9:	83 c4 14             	add    esp,0x14
c00256cc:	31 c0                	xor    eax,eax
c00256ce:	5b                   	pop    ebx
c00256cf:	5e                   	pop    esi
c00256d0:	c3                   	ret    
c00256d1:	90                   	nop

c00256d2 <SATA::SATA()>:
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d9:	83 ec 04             	sub    esp,0x4
c00256dc:	68 00 02 00 00       	push   0x200
c00256e1:	68 3c db 02 c0       	push   0xc002db3c
c00256e6:	50                   	push   eax
c00256e7:	e8 30 ec fe ff       	call   c001431c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00256ec:	83 c4 10             	add    esp,0x10
c00256ef:	ba ac db 02 c0       	mov    edx,0xc002dbac
c00256f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f8:	89 10                	mov    DWORD PTR [eax],edx
c00256fa:	90                   	nop
c00256fb:	83 c4 0c             	add    esp,0xc
c00256fe:	c3                   	ret    
c00256ff:	90                   	nop

c0025700 <SATA::access(unsigned long long, int, void*, bool)>:
c0025700:	55                   	push   ebp
c0025701:	57                   	push   edi
c0025702:	56                   	push   esi
c0025703:	53                   	push   ebx
c0025704:	83 ec 2c             	sub    esp,0x2c
c0025707:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002570b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002570f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025713:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025717:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002571b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025720:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025724:	7e 10                	jle    c0025736 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025726:	83 ec 0c             	sub    esp,0xc
c0025729:	68 4c db 02 c0       	push   0xc002db4c
c002572e:	e8 a0 4d ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0025733:	83 c4 10             	add    esp,0x10
c0025736:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002573c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025742:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025748:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002574c:	89 d0                	mov    eax,edx
c002574e:	c1 e0 07             	shl    eax,0x7
c0025751:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025755:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002575f:	51                   	push   ecx
c0025760:	8d 42 02             	lea    eax,[edx+0x2]
c0025763:	51                   	push   ecx
c0025764:	c1 e0 07             	shl    eax,0x7
c0025767:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002576b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002576f:	50                   	push   eax
c0025770:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025776:	e8 af ef ff ff       	call   c002472a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002577b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002577f:	83 c4 10             	add    esp,0x10
c0025782:	b8 01 00 00 00       	mov    eax,0x1
c0025787:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002578c:	0f 84 cb 01 00 00    	je     c002595d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025792:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025796:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002579a:	c1 e0 09             	shl    eax,0x9
c002579d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00257a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00257a6:	74 0e                	je     c00257b6 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00257a8:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00257ae:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00257b2:	89 c1                	mov    ecx,eax
c00257b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00257b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00257ba:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00257c0:	8d 42 02             	lea    eax,[edx+0x2]
c00257c3:	c1 e0 07             	shl    eax,0x7
c00257c6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00257ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00257cc:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00257d2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00257d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00257dc:	c1 e1 05             	shl    ecx,0x5
c00257df:	01 c8                	add    eax,ecx
c00257e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00257e5:	83 e1 01             	and    ecx,0x1
c00257e8:	89 ce                	mov    esi,ecx
c00257ea:	8a 08                	mov    cl,BYTE PTR [eax]
c00257ec:	c1 e6 06             	shl    esi,0x6
c00257ef:	83 e1 bf             	and    ecx,0xffffffbf
c00257f2:	09 f1                	or     ecx,esi
c00257f4:	88 08                	mov    BYTE PTR [eax],cl
c00257f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00257f8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00257fe:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025804:	89 08                	mov    DWORD PTR [eax],ecx
c0025806:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002580c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025812:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025818:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002581b:	50                   	push   eax
c002581c:	68 90 00 00 00       	push   0x90
c0025821:	6a 00                	push   0x0
c0025823:	56                   	push   esi
c0025824:	e8 27 af fd ff       	call   c0000750 <memset>
c0025829:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002582f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025833:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025839:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002583d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025841:	83 c4 10             	add    esp,0x10
c0025844:	48                   	dec    eax
c0025845:	25 ff ff 3f 00       	and    eax,0x3fffff
c002584a:	89 c1                	mov    ecx,eax
c002584c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025852:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025857:	09 c8                	or     eax,ecx
c0025859:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002585f:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025862:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025869:	66 25 00 7f          	and    ax,0x7f00
c002586d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025871:	66 0d 27 80          	or     ax,0x8027
c0025875:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002587a:	66 89 06             	mov    WORD PTR [esi],ax
c002587d:	19 c0                	sbb    eax,eax
c002587f:	83 e0 f0             	and    eax,0xfffffff0
c0025882:	83 c0 35             	add    eax,0x35
c0025885:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025888:	89 e8                	mov    eax,ebp
c002588a:	c1 e8 10             	shr    eax,0x10
c002588d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025890:	89 e8                	mov    eax,ebp
c0025892:	c1 e8 18             	shr    eax,0x18
c0025895:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025898:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002589c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002589f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00258a3:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00258a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00258aa:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00258ae:	89 d6                	mov    esi,edx
c00258b0:	31 c0                	xor    eax,eax
c00258b2:	c1 e6 07             	shl    esi,0x7
c00258b5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00258b9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00258bf:	80 e1 88             	and    cl,0x88
c00258c2:	74 0a                	je     c00258ce <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00258c4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00258c9:	74 0a                	je     c00258d5 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00258cb:	40                   	inc    eax
c00258cc:	eb eb                	jmp    c00258b9 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00258ce:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00258d3:	75 0a                	jne    c00258df <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00258d5:	83 ec 0c             	sub    esp,0xc
c00258d8:	68 85 db 02 c0       	push   0xc002db85
c00258dd:	eb 56                	jmp    c0025935 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00258df:	b8 01 00 00 00       	mov    eax,0x1
c00258e4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00258e8:	c1 e2 07             	shl    edx,0x7
c00258eb:	d3 e0                	shl    eax,cl
c00258ed:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00258f1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00258f7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00258fd:	85 c8                	test   eax,ecx
c00258ff:	74 20                	je     c0025921 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025901:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025907:	0f ba e1 1e          	bt     ecx,0x1e
c002590b:	73 ea                	jae    c00258f7 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c002590d:	83 ec 0c             	sub    esp,0xc
c0025910:	68 93 db 02 c0       	push   0xc002db93
c0025915:	e8 b9 4b ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c002591a:	83 c4 10             	add    esp,0x10
c002591d:	31 c0                	xor    eax,eax
c002591f:	eb 3c                	jmp    c002595d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025921:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025927:	0f ba e0 1e          	bt     eax,0x1e
c002592b:	73 17                	jae    c0025944 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c002592d:	83 ec 0c             	sub    esp,0xc
c0025930:	68 93 db 02 c0       	push   0xc002db93
c0025935:	e8 99 4b ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c002593a:	83 c4 10             	add    esp,0x10
c002593d:	b8 01 00 00 00       	mov    eax,0x1
c0025942:	eb 19                	jmp    c002595d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025944:	31 c0                	xor    eax,eax
c0025946:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002594b:	75 10                	jne    c002595d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002594d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025953:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025957:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002595b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002595d:	83 c4 2c             	add    esp,0x2c
c0025960:	5b                   	pop    ebx
c0025961:	5e                   	pop    esi
c0025962:	5f                   	pop    edi
c0025963:	5d                   	pop    ebp
c0025964:	c3                   	ret    
c0025965:	90                   	nop

c0025966 <SATA::read(unsigned long long, int, void*)>:
c0025966:	57                   	push   edi
c0025967:	b8 04 00 00 00       	mov    eax,0x4
c002596c:	56                   	push   esi
c002596d:	53                   	push   ebx
c002596e:	83 ec 10             	sub    esp,0x10
c0025971:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025975:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025979:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002597c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025980:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025984:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002598a:	77 3b                	ja     c00259c7 <SATA::read(unsigned long long, int, void*)+0x61>
c002598c:	b8 06 00 00 00       	mov    eax,0x6
c0025991:	85 d2                	test   edx,edx
c0025993:	74 32                	je     c00259c7 <SATA::read(unsigned long long, int, void*)+0x61>
c0025995:	50                   	push   eax
c0025996:	50                   	push   eax
c0025997:	6a 00                	push   0x0
c0025999:	52                   	push   edx
c002599a:	53                   	push   ebx
c002599b:	57                   	push   edi
c002599c:	56                   	push   esi
c002599d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00259a1:	e8 5a fd ff ff       	call   c0025700 <SATA::access(unsigned long long, int, void*, bool)>
c00259a6:	83 c4 20             	add    esp,0x20
c00259a9:	85 c0                	test   eax,eax
c00259ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00259af:	75 11                	jne    c00259c2 <SATA::read(unsigned long long, int, void*)+0x5c>
c00259b1:	01 1d 38 34 03 c0    	add    DWORD PTR ds:0xc0033438,ebx
c00259b7:	e8 ea ab fe ff       	call   c00105a6 <VgaText::updateDiskUsage()>
c00259bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00259c0:	eb 05                	jmp    c00259c7 <SATA::read(unsigned long long, int, void*)+0x61>
c00259c2:	b8 01 00 00 00       	mov    eax,0x1
c00259c7:	83 c4 10             	add    esp,0x10
c00259ca:	5b                   	pop    ebx
c00259cb:	5e                   	pop    esi
c00259cc:	5f                   	pop    edi
c00259cd:	c3                   	ret    

c00259ce <SATA::write(unsigned long long, int, void*)>:
c00259ce:	55                   	push   ebp
c00259cf:	b8 04 00 00 00       	mov    eax,0x4
c00259d4:	57                   	push   edi
c00259d5:	56                   	push   esi
c00259d6:	53                   	push   ebx
c00259d7:	83 ec 1c             	sub    esp,0x1c
c00259da:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00259de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00259e2:	8d 75 ff             	lea    esi,[ebp-0x1]
c00259e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00259e9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00259ed:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00259f3:	77 56                	ja     c0025a4b <SATA::write(unsigned long long, int, void*)+0x7d>
c00259f5:	b8 06 00 00 00       	mov    eax,0x6
c00259fa:	85 ff                	test   edi,edi
c00259fc:	74 4d                	je     c0025a4b <SATA::write(unsigned long long, int, void*)+0x7d>
c00259fe:	89 ee                	mov    esi,ebp
c0025a00:	c1 e6 09             	shl    esi,0x9
c0025a03:	01 fe                	add    esi,edi
c0025a05:	89 c8                	mov    eax,ecx
c0025a07:	89 da                	mov    edx,ebx
c0025a09:	83 c0 01             	add    eax,0x1
c0025a0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a10:	83 d2 00             	adc    edx,0x0
c0025a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025a17:	50                   	push   eax
c0025a18:	50                   	push   eax
c0025a19:	6a 01                	push   0x1
c0025a1b:	57                   	push   edi
c0025a1c:	81 c7 00 02 00 00    	add    edi,0x200
c0025a22:	6a 01                	push   0x1
c0025a24:	53                   	push   ebx
c0025a25:	51                   	push   ecx
c0025a26:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025a2a:	e8 d1 fc ff ff       	call   c0025700 <SATA::access(unsigned long long, int, void*, bool)>
c0025a2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025a33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025a37:	83 c4 20             	add    esp,0x20
c0025a3a:	39 f7                	cmp    edi,esi
c0025a3c:	75 c7                	jne    c0025a05 <SATA::write(unsigned long long, int, void*)+0x37>
c0025a3e:	01 2d 34 34 03 c0    	add    DWORD PTR ds:0xc0033434,ebp
c0025a44:	e8 5d ab fe ff       	call   c00105a6 <VgaText::updateDiskUsage()>
c0025a49:	31 c0                	xor    eax,eax
c0025a4b:	83 c4 1c             	add    esp,0x1c
c0025a4e:	5b                   	pop    ebx
c0025a4f:	5e                   	pop    esi
c0025a50:	5f                   	pop    edi
c0025a51:	5d                   	pop    ebp
c0025a52:	c3                   	ret    
c0025a53:	90                   	nop

c0025a54 <SATAPI::write(unsigned long long, int, void*)>:
c0025a54:	b8 03 00 00 00       	mov    eax,0x3
c0025a59:	c3                   	ret    

c0025a5a <SATAPI::close(int, int, void*)>:
c0025a5a:	83 ec 0c             	sub    esp,0xc
c0025a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a61:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a67:	85 c0                	test   eax,eax
c0025a69:	74 0c                	je     c0025a77 <SATAPI::close(int, int, void*)+0x1d>
c0025a6b:	83 ec 0c             	sub    esp,0xc
c0025a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025a70:	50                   	push   eax
c0025a71:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025a74:	83 c4 10             	add    esp,0x10
c0025a77:	31 c0                	xor    eax,eax
c0025a79:	83 c4 0c             	add    esp,0xc
c0025a7c:	c3                   	ret    
c0025a7d:	90                   	nop

c0025a7e <SATAPI::SATAPI()>:
c0025a7e:	83 ec 0c             	sub    esp,0xc
c0025a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a85:	83 ec 04             	sub    esp,0x4
c0025a88:	68 00 08 00 00       	push   0x800
c0025a8d:	68 dc db 02 c0       	push   0xc002dbdc
c0025a92:	50                   	push   eax
c0025a93:	e8 84 e8 fe ff       	call   c001431c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025a98:	83 c4 10             	add    esp,0x10
c0025a9b:	ba 88 dc 02 c0       	mov    edx,0xc002dc88
c0025aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa4:	89 10                	mov    DWORD PTR [eax],edx
c0025aa6:	90                   	nop
c0025aa7:	83 c4 0c             	add    esp,0xc
c0025aaa:	c3                   	ret    
c0025aab:	90                   	nop

c0025aac <SATAPI::diskRemoved()>:
c0025aac:	83 ec 18             	sub    esp,0x18
c0025aaf:	68 e8 db 02 c0       	push   0xc002dbe8
c0025ab4:	e8 e4 cf fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0025ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025abd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025ac4:	83 c4 1c             	add    esp,0x1c
c0025ac7:	c3                   	ret    

c0025ac8 <SATAPI::diskInserted()>:
c0025ac8:	53                   	push   ebx
c0025ac9:	83 ec 14             	sub    esp,0x14
c0025acc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025ad0:	68 ff db 02 c0       	push   0xc002dbff
c0025ad5:	e8 c3 cf fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0025ada:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025ae1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025ae4:	e8 9b e8 fe ff       	call   c0014384 <PhysicalDisk::startCache()>
c0025ae9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025aed:	83 c4 18             	add    esp,0x18
c0025af0:	5b                   	pop    ebx
c0025af1:	e9 48 0b ff ff       	jmp    c001663e <createPartitionsForDisk(PhysicalDisk*)>

c0025af6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025af6:	55                   	push   ebp
c0025af7:	57                   	push   edi
c0025af8:	56                   	push   esi
c0025af9:	53                   	push   ebx
c0025afa:	83 ec 34             	sub    esp,0x34
c0025afd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025b01:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025b05:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025b09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025b0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025b11:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025b17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025b21:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025b27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025b2b:	c1 e0 07             	shl    eax,0x7
c0025b2e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025b32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025b36:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025b40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b44:	8d 58 02             	lea    ebx,[eax+0x2]
c0025b47:	c1 e3 07             	shl    ebx,0x7
c0025b4a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025b4e:	53                   	push   ebx
c0025b4f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025b55:	e8 d0 eb ff ff       	call   c002472a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025b5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025b5e:	83 c4 10             	add    esp,0x10
c0025b61:	b8 01 00 00 00       	mov    eax,0x1
c0025b66:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025b6b:	0f 84 85 01 00 00    	je     c0025cf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025b71:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025b77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025b79:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025b7f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025b85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b89:	c1 e1 05             	shl    ecx,0x5
c0025b8c:	01 c8                	add    eax,ecx
c0025b8e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025b90:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025b96:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0025b9e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025ba4:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025baa:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025bb0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025bb3:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025bb6:	50                   	push   eax
c0025bb7:	68 90 00 00 00       	push   0x90
c0025bbc:	6a 00                	push   0x0
c0025bbe:	53                   	push   ebx
c0025bbf:	e8 8c ab fd ff       	call   c0000750 <memset>
c0025bc4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025bc8:	b9 0c 00 00 00       	mov    ecx,0xc
c0025bcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025bcf:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025bd5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025bd9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025bdf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025be3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025be7:	48                   	dec    eax
c0025be8:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025bed:	89 c1                	mov    ecx,eax
c0025bef:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025bf5:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025bfa:	09 c8                	or     eax,ecx
c0025bfc:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025c02:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025c05:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025c0c:	66 25 00 7f          	and    ax,0x7f00
c0025c10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025c14:	66 0d 27 80          	or     ax,0x8027
c0025c18:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025c1c:	66 89 03             	mov    WORD PTR [ebx],ax
c0025c1f:	89 d0                	mov    eax,edx
c0025c21:	c1 ea 18             	shr    edx,0x18
c0025c24:	c1 e8 10             	shr    eax,0x10
c0025c27:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025c2a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025c2d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025c31:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025c34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025c38:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025c3b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025c3f:	83 c4 10             	add    esp,0x10
c0025c42:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025c46:	31 c0                	xor    eax,eax
c0025c48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025c4c:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025c52:	80 e2 88             	and    dl,0x88
c0025c55:	74 0a                	je     c0025c61 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025c57:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025c5c:	74 0a                	je     c0025c68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025c5e:	40                   	inc    eax
c0025c5f:	eb eb                	jmp    c0025c4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025c61:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025c66:	75 0f                	jne    c0025c77 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025c68:	83 ec 0c             	sub    esp,0xc
c0025c6b:	68 85 db 02 c0       	push   0xc002db85
c0025c70:	e8 5e 48 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0025c75:	eb 3f                	jmp    c0025cb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025c77:	ba 01 00 00 00       	mov    edx,0x1
c0025c7c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c84:	d3 e2                	shl    edx,cl
c0025c86:	c1 e0 07             	shl    eax,0x7
c0025c89:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025c8f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025c93:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025c99:	85 ca                	test   edx,ecx
c0025c9b:	74 23                	je     c0025cc0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025c9d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025ca3:	0f ba e1 1e          	bt     ecx,0x1e
c0025ca7:	73 ea                	jae    c0025c93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025ca9:	83 ec 0c             	sub    esp,0xc
c0025cac:	68 17 dc 02 c0       	push   0xc002dc17
c0025cb1:	e8 e7 cd fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c0025cb6:	83 c4 10             	add    esp,0x10
c0025cb9:	b8 01 00 00 00       	mov    eax,0x1
c0025cbe:	eb 36                	jmp    c0025cf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025cc0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025cc6:	0f ba e0 1e          	bt     eax,0x1e
c0025cca:	73 0a                	jae    c0025cd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025ccc:	83 ec 0c             	sub    esp,0xc
c0025ccf:	68 2a dc 02 c0       	push   0xc002dc2a
c0025cd4:	eb db                	jmp    c0025cb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025cd6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025cdb:	74 17                	je     c0025cf4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025cdd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025ce2:	74 10                	je     c0025cf4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ce4:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025cea:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025cee:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025cf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025cf4:	31 c0                	xor    eax,eax
c0025cf6:	83 c4 2c             	add    esp,0x2c
c0025cf9:	5b                   	pop    ebx
c0025cfa:	5e                   	pop    esi
c0025cfb:	5f                   	pop    edi
c0025cfc:	5d                   	pop    ebp
c0025cfd:	c3                   	ret    

c0025cfe <SATAPI::eject()>:
c0025cfe:	57                   	push   edi
c0025cff:	b9 03 00 00 00       	mov    ecx,0x3
c0025d04:	53                   	push   ebx
c0025d05:	83 ec 14             	sub    esp,0x14
c0025d08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025d0c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025d10:	fc                   	cld    
c0025d11:	31 c0                	xor    eax,eax
c0025d13:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025d15:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025d1a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025d1f:	50                   	push   eax
c0025d20:	6a 00                	push   0x0
c0025d22:	6a 00                	push   0x0
c0025d24:	6a 00                	push   0x0
c0025d26:	6a 00                	push   0x0
c0025d28:	6a 02                	push   0x2
c0025d2a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d2e:	50                   	push   eax
c0025d2f:	53                   	push   ebx
c0025d30:	e8 c1 fd ff ff       	call   c0025af6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d35:	83 c4 14             	add    esp,0x14
c0025d38:	53                   	push   ebx
c0025d39:	e8 6e fd ff ff       	call   c0025aac <SATAPI::diskRemoved()>
c0025d3e:	83 c4 24             	add    esp,0x24
c0025d41:	31 c0                	xor    eax,eax
c0025d43:	5b                   	pop    ebx
c0025d44:	5f                   	pop    edi
c0025d45:	c3                   	ret    

c0025d46 <SATAPI::detectMedia()>:
c0025d46:	56                   	push   esi
c0025d47:	53                   	push   ebx
c0025d48:	83 ec 28             	sub    esp,0x28
c0025d4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d4f:	6a 0c                	push   0xc
c0025d51:	6a 00                	push   0x0
c0025d53:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025d57:	56                   	push   esi
c0025d58:	e8 f3 a9 fd ff       	call   c0000750 <memset>
c0025d5d:	83 c4 0c             	add    esp,0xc
c0025d60:	6a 00                	push   0x0
c0025d62:	6a 00                	push   0x0
c0025d64:	6a 00                	push   0x0
c0025d66:	6a 00                	push   0x0
c0025d68:	6a 00                	push   0x0
c0025d6a:	56                   	push   esi
c0025d6b:	53                   	push   ebx
c0025d6c:	e8 85 fd ff ff       	call   c0025af6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d71:	83 c4 1c             	add    esp,0x1c
c0025d74:	6a 0c                	push   0xc
c0025d76:	6a 00                	push   0x0
c0025d78:	56                   	push   esi
c0025d79:	e8 d2 a9 fd ff       	call   c0000750 <memset>
c0025d7e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025d83:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025d88:	83 c4 0c             	add    esp,0xc
c0025d8b:	6a 01                	push   0x1
c0025d8d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025d91:	50                   	push   eax
c0025d92:	6a 00                	push   0x0
c0025d94:	6a 00                	push   0x0
c0025d96:	6a 12                	push   0x12
c0025d98:	56                   	push   esi
c0025d99:	53                   	push   ebx
c0025d9a:	e8 57 fd ff ff       	call   c0025af6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d9f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025da3:	83 c4 20             	add    esp,0x20
c0025da6:	83 e0 7f             	and    eax,0x7f
c0025da9:	3c 70                	cmp    al,0x70
c0025dab:	74 15                	je     c0025dc2 <SATAPI::detectMedia()+0x7c>
c0025dad:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025db4:	75 0c                	jne    c0025dc2 <SATAPI::detectMedia()+0x7c>
c0025db6:	83 ec 0c             	sub    esp,0xc
c0025db9:	53                   	push   ebx
c0025dba:	e8 09 fd ff ff       	call   c0025ac8 <SATAPI::diskInserted()>
c0025dbf:	83 c4 10             	add    esp,0x10
c0025dc2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025dc6:	83 e0 0f             	and    eax,0xf
c0025dc9:	3c 02                	cmp    al,0x2
c0025dcb:	75 1b                	jne    c0025de8 <SATAPI::detectMedia()+0xa2>
c0025dcd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025dd2:	75 2d                	jne    c0025e01 <SATAPI::detectMedia()+0xbb>
c0025dd4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025ddb:	74 24                	je     c0025e01 <SATAPI::detectMedia()+0xbb>
c0025ddd:	83 ec 0c             	sub    esp,0xc
c0025de0:	53                   	push   ebx
c0025de1:	e8 c6 fc ff ff       	call   c0025aac <SATAPI::diskRemoved()>
c0025de6:	eb 16                	jmp    c0025dfe <SATAPI::detectMedia()+0xb8>
c0025de8:	84 c0                	test   al,al
c0025dea:	75 15                	jne    c0025e01 <SATAPI::detectMedia()+0xbb>
c0025dec:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025df3:	75 0c                	jne    c0025e01 <SATAPI::detectMedia()+0xbb>
c0025df5:	83 ec 0c             	sub    esp,0xc
c0025df8:	53                   	push   ebx
c0025df9:	e8 ca fc ff ff       	call   c0025ac8 <SATAPI::diskInserted()>
c0025dfe:	83 c4 10             	add    esp,0x10
c0025e01:	83 c4 24             	add    esp,0x24
c0025e04:	5b                   	pop    ebx
c0025e05:	5e                   	pop    esi
c0025e06:	c3                   	ret    
c0025e07:	90                   	nop

c0025e08 <SATAPI::open(int, int, void*)>:
c0025e08:	56                   	push   esi
c0025e09:	53                   	push   ebx
c0025e0a:	50                   	push   eax
c0025e0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e13:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025e1d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025e23:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025e2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e31:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025e3b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025e41:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025e48:	e8 1f 9d fe ff       	call   c000fb6c <Phys::allocatePage()>
c0025e4d:	89 c6                	mov    esi,eax
c0025e4f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025e55:	81 c6 00 10 00 00    	add    esi,0x1000
c0025e5b:	e8 0c 9d fe ff       	call   c000fb6c <Phys::allocatePage()>
c0025e60:	39 c6                	cmp    esi,eax
c0025e62:	74 10                	je     c0025e74 <SATAPI::open(int, int, void*)+0x6c>
c0025e64:	83 ec 0c             	sub    esp,0xc
c0025e67:	68 3f dc 02 c0       	push   0xc002dc3f
c0025e6c:	e8 62 46 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0025e71:	83 c4 10             	add    esp,0x10
c0025e74:	83 ec 0c             	sub    esp,0xc
c0025e77:	6a 02                	push   0x2
c0025e79:	e8 19 b8 fe ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0025e7e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025e84:	6a 03                	push   0x3
c0025e86:	50                   	push   eax
c0025e87:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025e8d:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0025e93:	e8 36 c0 fe ff       	call   c0011ece <VAS::mapPage(unsigned long, unsigned long, int)>
c0025e98:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025e9f:	83 c4 14             	add    esp,0x14
c0025ea2:	53                   	push   ebx
c0025ea3:	e8 9e fe ff ff       	call   c0025d46 <SATAPI::detectMedia()>
c0025ea8:	83 c4 14             	add    esp,0x14
c0025eab:	31 c0                	xor    eax,eax
c0025ead:	5b                   	pop    ebx
c0025eae:	5e                   	pop    esi
c0025eaf:	c3                   	ret    

c0025eb0 <SATAPI::read(unsigned long long, int, void*)>:
c0025eb0:	55                   	push   ebp
c0025eb1:	57                   	push   edi
c0025eb2:	56                   	push   esi
c0025eb3:	53                   	push   ebx
c0025eb4:	83 ec 1c             	sub    esp,0x1c
c0025eb7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025ebb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025ebf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025ec3:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025eca:	74 19                	je     c0025ee5 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025ecc:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025ed1:	7e 2e                	jle    c0025f01 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025ed3:	83 ec 0c             	sub    esp,0xc
c0025ed6:	68 55 dc 02 c0       	push   0xc002dc55
c0025edb:	e8 f3 45 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0025ee0:	83 c4 10             	add    esp,0x10
c0025ee3:	eb 1c                	jmp    c0025f01 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025ee5:	83 ec 0c             	sub    esp,0xc
c0025ee8:	55                   	push   ebp
c0025ee9:	e8 58 fe ff ff       	call   c0025d46 <SATAPI::detectMedia()>
c0025eee:	83 c4 10             	add    esp,0x10
c0025ef1:	b8 02 00 00 00       	mov    eax,0x2
c0025ef6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025efd:	75 cd                	jne    c0025ecc <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025eff:	eb 49                	jmp    c0025f4a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025f01:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025f05:	b9 03 00 00 00       	mov    ecx,0x3
c0025f0a:	fc                   	cld    
c0025f0b:	31 c0                	xor    eax,eax
c0025f0d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025f0f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025f14:	89 d8                	mov    eax,ebx
c0025f16:	86 e0                	xchg   al,ah
c0025f18:	c1 c0 10             	rol    eax,0x10
c0025f1b:	86 e0                	xchg   al,ah
c0025f1d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025f21:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025f25:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025f29:	50                   	push   eax
c0025f2a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025f2e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025f32:	56                   	push   esi
c0025f33:	53                   	push   ebx
c0025f34:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025f38:	c1 e0 0b             	shl    eax,0xb
c0025f3b:	50                   	push   eax
c0025f3c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025f40:	50                   	push   eax
c0025f41:	55                   	push   ebp
c0025f42:	e8 af fb ff ff       	call   c0025af6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f47:	83 c4 20             	add    esp,0x20
c0025f4a:	83 c4 1c             	add    esp,0x1c
c0025f4d:	5b                   	pop    ebx
c0025f4e:	5e                   	pop    esi
c0025f4f:	5f                   	pop    edi
c0025f50:	5d                   	pop    ebp
c0025f51:	c3                   	ret    

c0025f52 <AVX::open(int, int, void*)>:
c0025f52:	83 ec 0c             	sub    esp,0xc
c0025f55:	e8 3e 11 00 00       	call   c0027098 <avxInit>
c0025f5a:	b8 00 00 00 00       	mov    eax,0x0
c0025f5f:	83 c4 0c             	add    esp,0xc
c0025f62:	c3                   	ret    
c0025f63:	90                   	nop

c0025f64 <AVX::close(int, int, void*)>:
c0025f64:	83 ec 0c             	sub    esp,0xc
c0025f67:	e8 2d 11 00 00       	call   c0027099 <avxClose>
c0025f6c:	b8 00 00 00 00       	mov    eax,0x0
c0025f71:	83 c4 0c             	add    esp,0xc
c0025f74:	c3                   	ret    
c0025f75:	90                   	nop

c0025f76 <AVX::available()>:
c0025f76:	83 ec 0c             	sub    esp,0xc
c0025f79:	e8 12 11 00 00       	call   c0027090 <avxDetect>
c0025f7e:	85 c0                	test   eax,eax
c0025f80:	0f 95 c0             	setne  al
c0025f83:	83 c4 0c             	add    esp,0xc
c0025f86:	c3                   	ret    
c0025f87:	90                   	nop

c0025f88 <AVX::save(void*)>:
c0025f88:	83 ec 0c             	sub    esp,0xc
c0025f8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f8f:	83 ec 0c             	sub    esp,0xc
c0025f92:	50                   	push   eax
c0025f93:	e8 fe 10 00 00       	call   c0027096 <avxSave>
c0025f98:	83 c4 10             	add    esp,0x10
c0025f9b:	90                   	nop
c0025f9c:	83 c4 0c             	add    esp,0xc
c0025f9f:	c3                   	ret    

c0025fa0 <AVX::load(void*)>:
c0025fa0:	83 ec 0c             	sub    esp,0xc
c0025fa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fa7:	83 ec 0c             	sub    esp,0xc
c0025faa:	50                   	push   eax
c0025fab:	e8 e7 10 00 00       	call   c0027097 <avxLoad>
c0025fb0:	83 c4 10             	add    esp,0x10
c0025fb3:	90                   	nop
c0025fb4:	83 c4 0c             	add    esp,0xc
c0025fb7:	c3                   	ret    

c0025fb8 <AVX::AVX()>:
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbf:	83 ec 08             	sub    esp,0x8
c0025fc2:	68 b8 dc 02 c0       	push   0xc002dcb8
c0025fc7:	50                   	push   eax
c0025fc8:	e8 2d e4 fe ff       	call   c00143fa <FPU::FPU(char const*)>
c0025fcd:	83 c4 10             	add    esp,0x10
c0025fd0:	ba c8 dc 02 c0       	mov    edx,0xc002dcc8
c0025fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd9:	89 10                	mov    DWORD PTR [eax],edx
c0025fdb:	90                   	nop
c0025fdc:	83 c4 0c             	add    esp,0xc
c0025fdf:	c3                   	ret    

c0025fe0 <MMX::available()>:
c0025fe0:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0025fe5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025feb:	83 e0 20             	and    eax,0x20
c0025fee:	84 c0                	test   al,al
c0025ff0:	0f 95 c0             	setne  al
c0025ff3:	c3                   	ret    

c0025ff4 <MMX::open(int, int, void*)>:
c0025ff4:	83 ec 0c             	sub    esp,0xc
c0025ff7:	e8 26 11 00 00       	call   c0027122 <x87Init>
c0025ffc:	b8 00 00 00 00       	mov    eax,0x0
c0026001:	83 c4 0c             	add    esp,0xc
c0026004:	c3                   	ret    
c0026005:	90                   	nop

c0026006 <MMX::close(int, int, void*)>:
c0026006:	83 ec 0c             	sub    esp,0xc
c0026009:	e8 2e 11 00 00       	call   c002713c <x87Close>
c002600e:	b8 00 00 00 00       	mov    eax,0x0
c0026013:	83 c4 0c             	add    esp,0xc
c0026016:	c3                   	ret    
c0026017:	90                   	nop

c0026018 <MMX::save(void*)>:
c0026018:	83 ec 0c             	sub    esp,0xc
c002601b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002601f:	83 ec 0c             	sub    esp,0xc
c0026022:	50                   	push   eax
c0026023:	e8 e9 10 00 00       	call   c0027111 <x87Save>
c0026028:	83 c4 10             	add    esp,0x10
c002602b:	90                   	nop
c002602c:	83 c4 0c             	add    esp,0xc
c002602f:	c3                   	ret    

c0026030 <MMX::load(void*)>:
c0026030:	83 ec 0c             	sub    esp,0xc
c0026033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026037:	83 ec 0c             	sub    esp,0xc
c002603a:	50                   	push   eax
c002603b:	e8 da 10 00 00       	call   c002711a <x87Load>
c0026040:	83 c4 10             	add    esp,0x10
c0026043:	90                   	nop
c0026044:	83 c4 0c             	add    esp,0xc
c0026047:	c3                   	ret    

c0026048 <MMX::MMX()>:
c0026048:	83 ec 0c             	sub    esp,0xc
c002604b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002604f:	83 ec 08             	sub    esp,0x8
c0026052:	68 f8 dc 02 c0       	push   0xc002dcf8
c0026057:	50                   	push   eax
c0026058:	e8 9d e3 fe ff       	call   c00143fa <FPU::FPU(char const*)>
c002605d:	83 c4 10             	add    esp,0x10
c0026060:	ba 08 dd 02 c0       	mov    edx,0xc002dd08
c0026065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026069:	89 10                	mov    DWORD PTR [eax],edx
c002606b:	90                   	nop
c002606c:	83 c4 0c             	add    esp,0xc
c002606f:	c3                   	ret    

c0026070 <SSE::open(int, int, void*)>:
c0026070:	83 ec 0c             	sub    esp,0xc
c0026073:	e8 5c 10 00 00       	call   c00270d4 <sseInit>
c0026078:	b8 00 00 00 00       	mov    eax,0x0
c002607d:	83 c4 0c             	add    esp,0xc
c0026080:	c3                   	ret    
c0026081:	90                   	nop

c0026082 <SSE::close(int, int, void*)>:
c0026082:	83 ec 0c             	sub    esp,0xc
c0026085:	e8 5a 10 00 00       	call   c00270e4 <sseClose>
c002608a:	b8 00 00 00 00       	mov    eax,0x0
c002608f:	83 c4 0c             	add    esp,0xc
c0026092:	c3                   	ret    
c0026093:	90                   	nop

c0026094 <SSE::available()>:
c0026094:	83 ec 1c             	sub    esp,0x1c
c0026097:	e8 14 10 00 00       	call   c00270b0 <absolutelyNoChanceInHell>
c002609c:	85 c0                	test   eax,eax
c002609e:	0f 95 c0             	setne  al
c00260a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00260a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00260a9:	83 c4 1c             	add    esp,0x1c
c00260ac:	c3                   	ret    
c00260ad:	90                   	nop

c00260ae <SSE::save(void*)>:
c00260ae:	83 ec 0c             	sub    esp,0xc
c00260b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260b5:	83 ec 0c             	sub    esp,0xc
c00260b8:	50                   	push   eax
c00260b9:	e8 0a 10 00 00       	call   c00270c8 <sseSave>
c00260be:	83 c4 10             	add    esp,0x10
c00260c1:	90                   	nop
c00260c2:	83 c4 0c             	add    esp,0xc
c00260c5:	c3                   	ret    

c00260c6 <SSE::load(void*)>:
c00260c6:	83 ec 0c             	sub    esp,0xc
c00260c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260cd:	83 ec 0c             	sub    esp,0xc
c00260d0:	50                   	push   eax
c00260d1:	e8 f8 0f 00 00       	call   c00270ce <sseLoad>
c00260d6:	83 c4 10             	add    esp,0x10
c00260d9:	90                   	nop
c00260da:	83 c4 0c             	add    esp,0xc
c00260dd:	c3                   	ret    

c00260de <SSE::SSE()>:
c00260de:	83 ec 0c             	sub    esp,0xc
c00260e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e5:	83 ec 08             	sub    esp,0x8
c00260e8:	68 38 dd 02 c0       	push   0xc002dd38
c00260ed:	50                   	push   eax
c00260ee:	e8 07 e3 fe ff       	call   c00143fa <FPU::FPU(char const*)>
c00260f3:	83 c4 10             	add    esp,0x10
c00260f6:	ba 48 dd 02 c0       	mov    edx,0xc002dd48
c00260fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ff:	89 10                	mov    DWORD PTR [eax],edx
c0026101:	90                   	nop
c0026102:	83 c4 0c             	add    esp,0xc
c0026105:	c3                   	ret    

c0026106 <x87::open(int, int, void*)>:
c0026106:	83 ec 0c             	sub    esp,0xc
c0026109:	e8 14 10 00 00       	call   c0027122 <x87Init>
c002610e:	b8 00 00 00 00       	mov    eax,0x0
c0026113:	83 c4 0c             	add    esp,0xc
c0026116:	c3                   	ret    
c0026117:	90                   	nop

c0026118 <x87::close(int, int, void*)>:
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	e8 1c 10 00 00       	call   c002713c <x87Close>
c0026120:	b8 00 00 00 00       	mov    eax,0x0
c0026125:	83 c4 0c             	add    esp,0xc
c0026128:	c3                   	ret    
c0026129:	90                   	nop

c002612a <x87::available()>:
c002612a:	83 ec 0c             	sub    esp,0xc
c002612d:	e8 c4 0f 00 00       	call   c00270f6 <x87Detect>
c0026132:	85 c0                	test   eax,eax
c0026134:	0f 95 c0             	setne  al
c0026137:	83 c4 0c             	add    esp,0xc
c002613a:	c3                   	ret    
c002613b:	90                   	nop

c002613c <x87::save(void*)>:
c002613c:	83 ec 0c             	sub    esp,0xc
c002613f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026143:	83 ec 0c             	sub    esp,0xc
c0026146:	50                   	push   eax
c0026147:	e8 c5 0f 00 00       	call   c0027111 <x87Save>
c002614c:	83 c4 10             	add    esp,0x10
c002614f:	90                   	nop
c0026150:	83 c4 0c             	add    esp,0xc
c0026153:	c3                   	ret    

c0026154 <x87::load(void*)>:
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002615b:	83 ec 0c             	sub    esp,0xc
c002615e:	50                   	push   eax
c002615f:	e8 b6 0f 00 00       	call   c002711a <x87Load>
c0026164:	83 c4 10             	add    esp,0x10
c0026167:	90                   	nop
c0026168:	83 c4 0c             	add    esp,0xc
c002616b:	c3                   	ret    

c002616c <x87::x87()>:
c002616c:	83 ec 0c             	sub    esp,0xc
c002616f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026173:	83 ec 08             	sub    esp,0x8
c0026176:	68 78 dd 02 c0       	push   0xc002dd78
c002617b:	50                   	push   eax
c002617c:	e8 79 e2 fe ff       	call   c00143fa <FPU::FPU(char const*)>
c0026181:	83 c4 10             	add    esp,0x10
c0026184:	ba 88 dd 02 c0       	mov    edx,0xc002dd88
c0026189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618d:	89 10                	mov    DWORD PTR [eax],edx
c002618f:	90                   	nop
c0026190:	83 c4 0c             	add    esp,0xc
c0026193:	c3                   	ret    

c0026194 <APIC::disable()>:
c0026194:	90                   	nop
c0026195:	c3                   	ret    

c0026196 <APIC::close(int, int, void*)>:
c0026196:	55                   	push   ebp
c0026197:	89 e5                	mov    ebp,esp
c0026199:	83 ec 08             	sub    esp,0x8
c002619c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002619f:	8b 00                	mov    eax,DWORD PTR [eax]
c00261a1:	83 c0 3c             	add    eax,0x3c
c00261a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00261a6:	83 ec 0c             	sub    esp,0xc
c00261a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261ac:	ff d0                	call   eax
c00261ae:	83 c4 10             	add    esp,0x10
c00261b1:	b8 00 00 00 00       	mov    eax,0x0
c00261b6:	c9                   	leave  
c00261b7:	c3                   	ret    

c00261b8 <IOAPIC::close(int, int, void*)>:
c00261b8:	b8 00 00 00 00       	mov    eax,0x0
c00261bd:	c3                   	ret    

c00261be <APIC::io_wait()>:
c00261be:	eb 00                	jmp    c00261c0 <APIC::io_wait()+0x2>
c00261c0:	eb 00                	jmp    c00261c2 <APIC::io_wait()+0x4>
c00261c2:	90                   	nop
c00261c3:	c3                   	ret    

c00261c4 <APIC::getBase()>:
c00261c4:	55                   	push   ebp
c00261c5:	89 e5                	mov    ebp,esp
c00261c7:	83 ec 18             	sub    esp,0x18
c00261ca:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00261cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00261d5:	83 e0 08             	and    eax,0x8
c00261d8:	84 c0                	test   al,al
c00261da:	75 07                	jne    c00261e3 <APIC::getBase()+0x1f>
c00261dc:	b8 00 00 00 00       	mov    eax,0x0
c00261e1:	eb 21                	jmp    c0026204 <APIC::getBase()+0x40>
c00261e3:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c00261e8:	83 ec 08             	sub    esp,0x8
c00261eb:	6a 1b                	push   0x1b
c00261ed:	50                   	push   eax
c00261ee:	e8 3f 8c fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00261f3:	83 c4 10             	add    esp,0x10
c00261f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00261f9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00261fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026204:	c9                   	leave  
c0026205:	c3                   	ret    

c0026206 <APIC::eoi(unsigned char)>:
c0026206:	55                   	push   ebp
c0026207:	89 e5                	mov    ebp,esp
c0026209:	83 ec 28             	sub    esp,0x28
c002620c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002620f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026212:	83 ec 0c             	sub    esp,0xc
c0026215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026218:	e8 a7 ff ff ff       	call   c00261c4 <APIC::getBase()>
c002621d:	83 c4 10             	add    esp,0x10
c0026220:	05 b0 00 00 00       	add    eax,0xb0
c0026225:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026228:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002622b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0026231:	90                   	nop
c0026232:	c9                   	leave  
c0026233:	c3                   	ret    

c0026234 <APIC::open(int, int, void*)>:
c0026234:	55                   	push   ebp
c0026235:	89 e5                	mov    ebp,esp
c0026237:	57                   	push   edi
c0026238:	56                   	push   esi
c0026239:	53                   	push   ebx
c002623a:	83 ec 2c             	sub    esp,0x2c
c002623d:	83 ec 0c             	sub    esp,0xc
c0026240:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026243:	e8 7c ff ff ff       	call   c00261c4 <APIC::getBase()>
c0026248:	83 c4 10             	add    esp,0x10
c002624b:	89 c2                	mov    edx,eax
c002624d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026250:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026256:	0f b6 f8             	movzx  edi,al
c0026259:	89 d0                	mov    eax,edx
c002625b:	ba 00 00 00 00       	mov    edx,0x0
c0026260:	89 c1                	mov    ecx,eax
c0026262:	80 e5 ff             	and    ch,0xff
c0026265:	89 cb                	mov    ebx,ecx
c0026267:	0f b6 f2             	movzx  esi,dl
c002626a:	89 d8                	mov    eax,ebx
c002626c:	89 f2                	mov    edx,esi
c002626e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026271:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026274:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026278:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002627c:	83 e0 00             	and    eax,0x0
c002627f:	09 d0                	or     eax,edx
c0026281:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026288:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002628e:	8d 50 01             	lea    edx,[eax+0x1]
c0026291:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026294:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002629a:	0f b6 d0             	movzx  edx,al
c002629d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a0:	83 c2 08             	add    edx,0x8
c00262a3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262a7:	0f b6 c9             	movzx  ecx,cl
c00262aa:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262b0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262b4:	83 ec 0c             	sub    esp,0xc
c00262b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262ba:	e8 05 ff ff ff       	call   c00261c4 <APIC::getBase()>
c00262bf:	83 c4 10             	add    esp,0x10
c00262c2:	05 f0 00 00 00       	add    eax,0xf0
c00262c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00262ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00262cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00262cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00262d2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00262d9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00262e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00262e3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00262e6:	89 10                	mov    DWORD PTR [eax],edx
c00262e8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00262ef:	a1 b0 19 03 c0       	mov    eax,ds:0xc00319b0
c00262f4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00262f7:	7d 7c                	jge    c0026375 <APIC::open(int, int, void*)+0x141>
c00262f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00262fc:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c0026303:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026306:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026309:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c0026310:	c1 e8 08             	shr    eax,0x8
c0026313:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026317:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002631a:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c0026321:	c1 e8 18             	shr    eax,0x18
c0026324:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026327:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002632b:	75 40                	jne    c002636d <APIC::open(int, int, void*)+0x139>
c002632d:	83 ec 0c             	sub    esp,0xc
c0026330:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026333:	e8 8c fe ff ff       	call   c00261c4 <APIC::getBase()>
c0026338:	83 c4 10             	add    esp,0x10
c002633b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002633f:	75 07                	jne    c0026348 <APIC::open(int, int, void*)+0x114>
c0026341:	ba 60 03 00 00       	mov    edx,0x360
c0026346:	eb 05                	jmp    c002634d <APIC::open(int, int, void*)+0x119>
c0026348:	ba 50 03 00 00       	mov    edx,0x350
c002634d:	01 d0                	add    eax,edx
c002634f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026352:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026355:	8b 00                	mov    eax,DWORD PTR [eax]
c0026357:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002635a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026361:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026365:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026368:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002636b:	89 10                	mov    DWORD PTR [eax],edx
c002636d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026370:	e9 7a ff ff ff       	jmp    c00262ef <APIC::open(int, int, void*)+0xbb>
c0026375:	b8 00 00 00 00       	mov    eax,0x0
c002637a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002637d:	5b                   	pop    ebx
c002637e:	5e                   	pop    esi
c002637f:	5f                   	pop    edi
c0026380:	5d                   	pop    ebp
c0026381:	c3                   	ret    

c0026382 <IOAPIC::IOAPIC()>:
c0026382:	83 ec 0c             	sub    esp,0xc
c0026385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026389:	83 ec 08             	sub    esp,0x8
c002638c:	68 b8 dd 02 c0       	push   0xc002ddb8
c0026391:	50                   	push   eax
c0026392:	e8 43 dd fe ff       	call   c00140da <Device::Device(char const*)>
c0026397:	83 c4 10             	add    esp,0x10
c002639a:	ba e0 de 02 c0       	mov    edx,0xc002dee0
c002639f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a3:	89 10                	mov    DWORD PTR [eax],edx
c00263a5:	90                   	nop
c00263a6:	83 c4 0c             	add    esp,0xc
c00263a9:	c3                   	ret    

c00263aa <APIC::APIC()>:
c00263aa:	53                   	push   ebx
c00263ab:	83 ec 18             	sub    esp,0x18
c00263ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00263b2:	83 ec 08             	sub    esp,0x8
c00263b5:	68 c0 dd 02 c0       	push   0xc002ddc0
c00263ba:	50                   	push   eax
c00263bb:	e8 94 e4 fe ff       	call   c0014854 <InterruptController::InterruptController(char const*)>
c00263c0:	83 c4 10             	add    esp,0x10
c00263c3:	ba 98 de 02 c0       	mov    edx,0xc002de98
c00263c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00263cc:	89 10                	mov    DWORD PTR [eax],edx
c00263ce:	a0 80 34 03 c0       	mov    al,ds:0xc0033480
c00263d3:	83 f0 01             	xor    eax,0x1
c00263d6:	84 c0                	test   al,al
c00263d8:	0f 84 a1 00 00 00    	je     c002647f <APIC::APIC()+0xd5>
c00263de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00263e3:	a0 60 1a 03 c0       	mov    al,ds:0xc0031a60
c00263e8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00263ec:	0f 83 86 00 00 00    	jae    c0026478 <APIC::APIC()+0xce>
c00263f2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00263fa:	83 ec 0c             	sub    esp,0xc
c00263fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026401:	e8 86 94 fe ff       	call   c000f88c <malloc>
c0026406:	83 c4 10             	add    esp,0x10
c0026409:	89 c3                	mov    ebx,eax
c002640b:	83 ec 0c             	sub    esp,0xc
c002640e:	53                   	push   ebx
c002640f:	e8 6e ff ff ff       	call   c0026382 <IOAPIC::IOAPIC()>
c0026414:	83 c4 10             	add    esp,0x10
c0026417:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002641b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026424:	89 14 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],edx
c002642b:	a1 40 34 03 c0       	mov    eax,ds:0xc0033440
c0026430:	40                   	inc    eax
c0026431:	a3 40 34 03 c0       	mov    ds:0xc0033440,eax
c0026436:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c002643b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026441:	83 ec 08             	sub    esp,0x8
c0026444:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026448:	50                   	push   eax
c0026449:	e8 88 da fe ff       	call   c0013ed6 <Device::addChild(Device*)>
c002644e:	83 c4 10             	add    esp,0x10
c0026451:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026455:	8b 00                	mov    eax,DWORD PTR [eax]
c0026457:	83 c0 08             	add    eax,0x8
c002645a:	8b 00                	mov    eax,DWORD PTR [eax]
c002645c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026461:	6a 00                	push   0x0
c0026463:	6a 00                	push   0x0
c0026465:	52                   	push   edx
c0026466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002646a:	ff d0                	call   eax
c002646c:	83 c4 10             	add    esp,0x10
c002646f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026473:	e9 6b ff ff ff       	jmp    c00263e3 <APIC::APIC()+0x39>
c0026478:	c6 05 80 34 03 c0 01 	mov    BYTE PTR ds:0xc0033480,0x1
c002647f:	90                   	nop
c0026480:	83 c4 18             	add    esp,0x18
c0026483:	5b                   	pop    ebx
c0026484:	c3                   	ret    
c0026485:	90                   	nop

c0026486 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026486:	55                   	push   ebp
c0026487:	89 e5                	mov    ebp,esp
c0026489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002648c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026492:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026495:	72 1d                	jb     c00264b4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002649a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00264a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264a3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00264a9:	01 d0                	add    eax,edx
c00264ab:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00264ae:	73 04                	jae    c00264b4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00264b0:	b0 01                	mov    al,0x1
c00264b2:	eb 02                	jmp    c00264b6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00264b4:	b0 00                	mov    al,0x0
c00264b6:	5d                   	pop    ebp
c00264b7:	c3                   	ret    

c00264b8 <IOAPIC::read(int)>:
c00264b8:	55                   	push   ebp
c00264b9:	89 e5                	mov    ebp,esp
c00264bb:	83 ec 10             	sub    esp,0x10
c00264be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00264c7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00264ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264cd:	0f b6 d0             	movzx  edx,al
c00264d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00264d3:	89 10                	mov    DWORD PTR [eax],edx
c00264d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00264d8:	83 c0 10             	add    eax,0x10
c00264db:	8b 00                	mov    eax,DWORD PTR [eax]
c00264dd:	c9                   	leave  
c00264de:	c3                   	ret    
c00264df:	90                   	nop

c00264e0 <IOAPIC::open(int, int, void*)>:
c00264e0:	55                   	push   ebp
c00264e1:	89 e5                	mov    ebp,esp
c00264e3:	57                   	push   edi
c00264e4:	56                   	push   esi
c00264e5:	53                   	push   ebx
c00264e6:	83 ec 0c             	sub    esp,0xc
c00264e9:	83 ec 0c             	sub    esp,0xc
c00264ec:	68 eb dd 02 c0       	push   0xc002ddeb
c00264f1:	e8 a7 c5 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00264f6:	83 c4 10             	add    esp,0x10
c00264f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00264ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026508:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002650e:	8b 14 85 a0 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce560]
c0026515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026518:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002651e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026521:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026527:	8b 14 85 20 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce4e0]
c002652e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026531:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002653a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026543:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026549:	0f b6 f8             	movzx  edi,al
c002654c:	89 d0                	mov    eax,edx
c002654e:	ba 00 00 00 00       	mov    edx,0x0
c0026553:	89 c1                	mov    ecx,eax
c0026555:	80 e5 ff             	and    ch,0xff
c0026558:	89 cb                	mov    ebx,ecx
c002655a:	0f b6 f2             	movzx  esi,dl
c002655d:	89 d8                	mov    eax,ebx
c002655f:	89 f2                	mov    edx,esi
c0026561:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026564:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026567:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002656b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002656f:	83 e0 00             	and    eax,0x0
c0026572:	09 d0                	or     eax,edx
c0026574:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002657b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026581:	8d 50 01             	lea    edx,[eax+0x1]
c0026584:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026587:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002658d:	0f b6 d0             	movzx  edx,al
c0026590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026593:	83 c2 08             	add    edx,0x8
c0026596:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002659a:	0f b6 c9             	movzx  ecx,cl
c002659d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00265a3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00265a7:	83 ec 08             	sub    esp,0x8
c00265aa:	6a 01                	push   0x1
c00265ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265af:	e8 04 ff ff ff       	call   c00264b8 <IOAPIC::read(int)>
c00265b4:	83 c4 10             	add    esp,0x10
c00265b7:	c1 f8 10             	sar    eax,0x10
c00265ba:	0f b6 c0             	movzx  eax,al
c00265bd:	8d 50 01             	lea    edx,[eax+0x1]
c00265c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265c3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00265c9:	b8 00 00 00 00       	mov    eax,0x0
c00265ce:	8d 65 f4             	lea    esp,[ebp-0xc]
c00265d1:	5b                   	pop    ebx
c00265d2:	5e                   	pop    esi
c00265d3:	5f                   	pop    edi
c00265d4:	5d                   	pop    ebp
c00265d5:	c3                   	ret    

c00265d6 <IOAPIC::write(int, int)>:
c00265d6:	55                   	push   ebp
c00265d7:	89 e5                	mov    ebp,esp
c00265d9:	83 ec 10             	sub    esp,0x10
c00265dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00265e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00265e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265eb:	0f b6 d0             	movzx  edx,al
c00265ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00265f1:	89 10                	mov    DWORD PTR [eax],edx
c00265f3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00265f6:	8d 50 10             	lea    edx,[eax+0x10]
c00265f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00265fc:	89 02                	mov    DWORD PTR [edx],eax
c00265fe:	90                   	nop
c00265ff:	c9                   	leave  
c0026600:	c3                   	ret    
c0026601:	90                   	nop

c0026602 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026602:	55                   	push   ebp
c0026603:	89 e5                	mov    ebp,esp
c0026605:	53                   	push   ebx
c0026606:	83 ec 2c             	sub    esp,0x2c
c0026609:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002660c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002660f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026612:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026615:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026618:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002661b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002661e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026621:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026624:	88 d8                	mov    al,bl
c0026626:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026629:	88 c8                	mov    al,cl
c002662b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002662e:	88 d0                	mov    al,dl
c0026630:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026633:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026637:	83 c0 08             	add    eax,0x8
c002663a:	01 c0                	add    eax,eax
c002663c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002663f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026643:	83 c0 08             	add    eax,0x8
c0026646:	01 c0                	add    eax,eax
c0026648:	40                   	inc    eax
c0026649:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002664c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002664f:	50                   	push   eax
c0026650:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026653:	e8 60 fe ff ff       	call   c00264b8 <IOAPIC::read(int)>
c0026658:	83 c4 08             	add    esp,0x8
c002665b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002665e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026665:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026668:	c1 e0 18             	shl    eax,0x18
c002666b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002666e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026671:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026674:	52                   	push   edx
c0026675:	50                   	push   eax
c0026676:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026679:	e8 58 ff ff ff       	call   c00265d6 <IOAPIC::write(int, int)>
c002667e:	83 c4 0c             	add    esp,0xc
c0026681:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026684:	50                   	push   eax
c0026685:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026688:	e8 2b fe ff ff       	call   c00264b8 <IOAPIC::read(int)>
c002668d:	83 c4 08             	add    esp,0x8
c0026690:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026693:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002669a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00266a1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00266a8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00266ac:	74 09                	je     c00266b7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00266ae:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00266b5:	eb 07                	jmp    c00266be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00266b7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00266be:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00266c2:	74 09                	je     c00266cd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00266c4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00266cb:	eb 07                	jmp    c00266d4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00266cd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00266d4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00266db:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00266df:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00266e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00266e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00266e8:	52                   	push   edx
c00266e9:	50                   	push   eax
c00266ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266ed:	e8 e4 fe ff ff       	call   c00265d6 <IOAPIC::write(int, int)>
c00266f2:	83 c4 0c             	add    esp,0xc
c00266f5:	90                   	nop
c00266f6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00266f9:	c9                   	leave  
c00266fa:	c3                   	ret    
c00266fb:	90                   	nop

c00266fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00266fc:	55                   	push   ebp
c00266fd:	89 e5                	mov    ebp,esp
c00266ff:	57                   	push   edi
c0026700:	56                   	push   esi
c0026701:	53                   	push   ebx
c0026702:	83 ec 2c             	sub    esp,0x2c
c0026705:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026708:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002670b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002670f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026713:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026717:	74 5a                	je     c0026773 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026719:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002671d:	7f 44                	jg     c0026763 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002671f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026722:	05 40 e3 02 c0       	add    eax,0xc002e340
c0026727:	8a 00                	mov    al,BYTE PTR [eax]
c0026729:	0f b6 c0             	movzx  eax,al
c002672c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002672f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026732:	66 8b 84 00 40 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce5c0]
c002673a:	0f b7 c0             	movzx  eax,ax
c002673d:	83 e0 02             	and    eax,0x2
c0026740:	85 c0                	test   eax,eax
c0026742:	74 04                	je     c0026748 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026744:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026748:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002674b:	66 8b 84 00 40 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce5c0]
c0026753:	0f b7 c0             	movzx  eax,ax
c0026756:	83 e0 08             	and    eax,0x8
c0026759:	85 c0                	test   eax,eax
c002675b:	74 16                	je     c0026773 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002675d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026761:	eb 10                	jmp    c0026773 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026763:	83 ec 0c             	sub    esp,0xc
c0026766:	68 fc dd 02 c0       	push   0xc002ddfc
c002676b:	e8 63 3d ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0026770:	83 c4 10             	add    esp,0x10
c0026773:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026777:	a1 40 34 03 c0       	mov    eax,ds:0xc0033440
c002677c:	83 ec 08             	sub    esp,0x8
c002677f:	50                   	push   eax
c0026780:	68 34 de 02 c0       	push   0xc002de34
c0026785:	e8 13 c3 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002678a:	83 c4 10             	add    esp,0x10
c002678d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026794:	a1 40 34 03 c0       	mov    eax,ds:0xc0033440
c0026799:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002679c:	7d 67                	jge    c0026805 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002679e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00267a1:	8b 04 85 60 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccba0]
c00267a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267ab:	83 ec 08             	sub    esp,0x8
c00267ae:	52                   	push   edx
c00267af:	50                   	push   eax
c00267b0:	e8 d1 fc ff ff       	call   c0026486 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00267b5:	83 c4 10             	add    esp,0x10
c00267b8:	84 c0                	test   al,al
c00267ba:	74 44                	je     c0026800 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00267bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00267bf:	8b 1c 85 60 34 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccba0]
c00267c6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00267ca:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00267cd:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00267d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267d4:	83 c0 20             	add    eax,0x20
c00267d7:	0f b6 f0             	movzx  esi,al
c00267da:	b8 00 00 00 00       	mov    eax,0x0
c00267df:	99                   	cdq    
c00267e0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00267e3:	0f b6 c9             	movzx  ecx,cl
c00267e6:	83 ec 04             	sub    esp,0x4
c00267e9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00267ec:	57                   	push   edi
c00267ed:	56                   	push   esi
c00267ee:	52                   	push   edx
c00267ef:	50                   	push   eax
c00267f0:	51                   	push   ecx
c00267f1:	53                   	push   ebx
c00267f2:	e8 0b fe ff ff       	call   c0026602 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00267f7:	83 c4 20             	add    esp,0x20
c00267fa:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00267fe:	eb 05                	jmp    c0026805 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026800:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026803:	eb 8f                	jmp    c0026794 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026805:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026808:	83 f0 01             	xor    eax,0x1
c002680b:	84 c0                	test   al,al
c002680d:	74 10                	je     c002681f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002680f:	83 ec 0c             	sub    esp,0xc
c0026812:	68 4b de 02 c0       	push   0xc002de4b
c0026817:	e8 b7 3c ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c002681c:	83 c4 10             	add    esp,0x10
c002681f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026823:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002682a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002682e:	7f 65                	jg     c0026895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026833:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026836:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002683d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026840:	01 ca                	add    edx,ecx
c0026842:	83 c2 54             	add    edx,0x54
c0026845:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026849:	85 c0                	test   eax,eax
c002684b:	75 43                	jne    c0026890 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002684d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026850:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026853:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002685a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002685d:	01 ca                	add    edx,ecx
c002685f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026862:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026865:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002686c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002686f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026876:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026879:	01 ca                	add    edx,ecx
c002687b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026881:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026884:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026888:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002688b:	83 e8 20             	sub    eax,0x20
c002688e:	eb 1a                	jmp    c00268aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026890:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026893:	eb 95                	jmp    c002682a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026895:	83 ec 0c             	sub    esp,0xc
c0026898:	68 58 de 02 c0       	push   0xc002de58
c002689d:	e8 31 3c ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00268a2:	83 c4 10             	add    esp,0x10
c00268a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00268aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c00268ad:	5b                   	pop    ebx
c00268ae:	5e                   	pop    esi
c00268af:	5f                   	pop    edi
c00268b0:	5d                   	pop    ebp
c00268b1:	c3                   	ret    

c00268b2 <PIC::disable()>:
c00268b2:	55                   	push   ebp
c00268b3:	89 e5                	mov    ebp,esp
c00268b5:	83 ec 10             	sub    esp,0x10
c00268b8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00268be:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00268c2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00268c5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00268c9:	ee                   	out    dx,al
c00268ca:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00268d0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00268d4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00268d7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00268db:	ee                   	out    dx,al
c00268dc:	90                   	nop
c00268dd:	c9                   	leave  
c00268de:	c3                   	ret    
c00268df:	90                   	nop

c00268e0 <PIC::close(int, int, void*)>:
c00268e0:	55                   	push   ebp
c00268e1:	89 e5                	mov    ebp,esp
c00268e3:	83 ec 08             	sub    esp,0x8
c00268e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00268eb:	83 c0 3c             	add    eax,0x3c
c00268ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00268f0:	83 ec 0c             	sub    esp,0xc
c00268f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268f6:	ff d0                	call   eax
c00268f8:	83 c4 10             	add    esp,0x10
c00268fb:	b8 00 00 00 00       	mov    eax,0x0
c0026900:	c9                   	leave  
c0026901:	c3                   	ret    

c0026902 <PIC::PIC()>:
c0026902:	83 ec 0c             	sub    esp,0xc
c0026905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026909:	83 ec 08             	sub    esp,0x8
c002690c:	68 04 df 02 c0       	push   0xc002df04
c0026911:	50                   	push   eax
c0026912:	e8 3d df fe ff       	call   c0014854 <InterruptController::InterruptController(char const*)>
c0026917:	83 c4 10             	add    esp,0x10
c002691a:	ba 30 df 02 c0       	mov    edx,0xc002df30
c002691f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026923:	89 10                	mov    DWORD PTR [eax],edx
c0026925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026929:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002692f:	0f b6 d0             	movzx  edx,al
c0026932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026936:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002693d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026941:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026947:	0f b6 d0             	movzx  edx,al
c002694a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002694e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026957:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002695d:	8d 50 01             	lea    edx,[eax+0x1]
c0026960:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026964:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002696a:	0f b6 d0             	movzx  edx,al
c002696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026971:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026975:	83 e1 3f             	and    ecx,0x3f
c0026978:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002697c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026980:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026986:	0f b6 d0             	movzx  edx,al
c0026989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002698d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026998:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002699e:	0f b6 d0             	movzx  edx,al
c00269a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269a5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00269aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269b4:	8d 50 01             	lea    edx,[eax+0x1]
c00269b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269bb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269c1:	0f b6 d0             	movzx  edx,al
c00269c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00269cc:	83 e1 3f             	and    ecx,0x3f
c00269cf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00269d3:	90                   	nop
c00269d4:	83 c4 0c             	add    esp,0xc
c00269d7:	c3                   	ret    

c00269d8 <PIC::ioWait()>:
c00269d8:	eb 00                	jmp    c00269da <PIC::ioWait()+0x2>
c00269da:	eb 00                	jmp    c00269dc <PIC::ioWait()+0x4>
c00269dc:	90                   	nop
c00269dd:	c3                   	ret    

c00269de <PIC::getIRQReg(int)>:
c00269de:	55                   	push   ebp
c00269df:	89 e5                	mov    ebp,esp
c00269e1:	83 ec 10             	sub    esp,0x10
c00269e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269e7:	0f b6 c0             	movzx  eax,al
c00269ea:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00269f0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00269f3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00269f6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00269fa:	ee                   	out    dx,al
c00269fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269fe:	0f b6 c0             	movzx  eax,al
c0026a01:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026a07:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026a0a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a0d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a11:	ee                   	out    dx,al
c0026a12:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026a18:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026a1c:	89 c2                	mov    edx,eax
c0026a1e:	ec                   	in     al,dx
c0026a1f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026a22:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026a25:	0f b6 c0             	movzx  eax,al
c0026a28:	c1 e0 08             	shl    eax,0x8
c0026a2b:	89 c1                	mov    ecx,eax
c0026a2d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026a33:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026a37:	89 c2                	mov    edx,eax
c0026a39:	ec                   	in     al,dx
c0026a3a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026a3d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026a40:	0f b6 c0             	movzx  eax,al
c0026a43:	09 c8                	or     eax,ecx
c0026a45:	c9                   	leave  
c0026a46:	c3                   	ret    
c0026a47:	90                   	nop

c0026a48 <PIC::eoi(unsigned char)>:
c0026a48:	55                   	push   ebp
c0026a49:	89 e5                	mov    ebp,esp
c0026a4b:	83 ec 14             	sub    esp,0x14
c0026a4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a51:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026a54:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026a58:	75 1e                	jne    c0026a78 <PIC::eoi(unsigned char)+0x30>
c0026a5a:	6a 0b                	push   0xb
c0026a5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a5f:	e8 7a ff ff ff       	call   c00269de <PIC::getIRQReg(int)>
c0026a64:	83 c4 08             	add    esp,0x8
c0026a67:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026a6b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026a6f:	25 80 00 00 00       	and    eax,0x80
c0026a74:	85 c0                	test   eax,eax
c0026a76:	74 5f                	je     c0026ad7 <PIC::eoi(unsigned char)+0x8f>
c0026a78:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026a7c:	75 2d                	jne    c0026aab <PIC::eoi(unsigned char)+0x63>
c0026a7e:	6a 0b                	push   0xb
c0026a80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a83:	e8 56 ff ff ff       	call   c00269de <PIC::getIRQReg(int)>
c0026a88:	83 c4 08             	add    esp,0x8
c0026a8b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026a8f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026a92:	66 85 c0             	test   ax,ax
c0026a95:	78 14                	js     c0026aab <PIC::eoi(unsigned char)+0x63>
c0026a97:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026a9d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026aa1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026aa4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026aa8:	ee                   	out    dx,al
c0026aa9:	eb 2d                	jmp    c0026ad8 <PIC::eoi(unsigned char)+0x90>
c0026aab:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026aaf:	76 12                	jbe    c0026ac3 <PIC::eoi(unsigned char)+0x7b>
c0026ab1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026ab7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026abb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026abe:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026ac2:	ee                   	out    dx,al
c0026ac3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026ac9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026acd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026ad0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026ad4:	ee                   	out    dx,al
c0026ad5:	eb 01                	jmp    c0026ad8 <PIC::eoi(unsigned char)+0x90>
c0026ad7:	90                   	nop
c0026ad8:	c9                   	leave  
c0026ad9:	c3                   	ret    

c0026ada <PIC::remap()>:
c0026ada:	55                   	push   ebp
c0026adb:	89 e5                	mov    ebp,esp
c0026add:	83 ec 48             	sub    esp,0x48
c0026ae0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026ae7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026aee:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026af4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026af7:	89 c2                	mov    edx,eax
c0026af9:	ec                   	in     al,dx
c0026afa:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026afd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026b00:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026b03:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026b09:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026b0c:	89 c2                	mov    edx,eax
c0026b0e:	ec                   	in     al,dx
c0026b0f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026b12:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026b15:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026b18:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026b1e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026b22:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026b25:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026b28:	ee                   	out    dx,al
c0026b29:	83 ec 0c             	sub    esp,0xc
c0026b2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b2f:	e8 a4 fe ff ff       	call   c00269d8 <PIC::ioWait()>
c0026b34:	83 c4 10             	add    esp,0x10
c0026b37:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026b3d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026b41:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026b44:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026b47:	ee                   	out    dx,al
c0026b48:	83 ec 0c             	sub    esp,0xc
c0026b4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b4e:	e8 85 fe ff ff       	call   c00269d8 <PIC::ioWait()>
c0026b53:	83 c4 10             	add    esp,0x10
c0026b56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026b59:	0f b6 c0             	movzx  eax,al
c0026b5c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026b62:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026b65:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026b68:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026b6b:	ee                   	out    dx,al
c0026b6c:	83 ec 0c             	sub    esp,0xc
c0026b6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b72:	e8 61 fe ff ff       	call   c00269d8 <PIC::ioWait()>
c0026b77:	83 c4 10             	add    esp,0x10
c0026b7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b7d:	0f b6 c0             	movzx  eax,al
c0026b80:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026b86:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026b89:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026b8c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026b8f:	ee                   	out    dx,al
c0026b90:	83 ec 0c             	sub    esp,0xc
c0026b93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b96:	e8 3d fe ff ff       	call   c00269d8 <PIC::ioWait()>
c0026b9b:	83 c4 10             	add    esp,0x10
c0026b9e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026ba4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026ba8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026bab:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026bae:	ee                   	out    dx,al
c0026baf:	83 ec 0c             	sub    esp,0xc
c0026bb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bb5:	e8 1e fe ff ff       	call   c00269d8 <PIC::ioWait()>
c0026bba:	83 c4 10             	add    esp,0x10
c0026bbd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026bc3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026bc7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026bca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026bcd:	ee                   	out    dx,al
c0026bce:	83 ec 0c             	sub    esp,0xc
c0026bd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bd4:	e8 ff fd ff ff       	call   c00269d8 <PIC::ioWait()>
c0026bd9:	83 c4 10             	add    esp,0x10
c0026bdc:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026be2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026be6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026be9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026bec:	ee                   	out    dx,al
c0026bed:	83 ec 0c             	sub    esp,0xc
c0026bf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bf3:	e8 e0 fd ff ff       	call   c00269d8 <PIC::ioWait()>
c0026bf8:	83 c4 10             	add    esp,0x10
c0026bfb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026c01:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026c05:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026c08:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c0b:	ee                   	out    dx,al
c0026c0c:	83 ec 0c             	sub    esp,0xc
c0026c0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c12:	e8 c1 fd ff ff       	call   c00269d8 <PIC::ioWait()>
c0026c17:	83 c4 10             	add    esp,0x10
c0026c1a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026c1e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026c24:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026c27:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026c2a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026c2d:	ee                   	out    dx,al
c0026c2e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026c32:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026c38:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026c3b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026c3e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026c41:	ee                   	out    dx,al
c0026c42:	90                   	nop
c0026c43:	c9                   	leave  
c0026c44:	c3                   	ret    
c0026c45:	90                   	nop

c0026c46 <PIC::open(int, int, void*)>:
c0026c46:	55                   	push   ebp
c0026c47:	89 e5                	mov    ebp,esp
c0026c49:	83 ec 18             	sub    esp,0x18
c0026c4c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026c52:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026c56:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026c59:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026c5d:	ee                   	out    dx,al
c0026c5e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026c64:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026c68:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026c6b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026c6f:	ee                   	out    dx,al
c0026c70:	83 ec 0c             	sub    esp,0xc
c0026c73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c76:	e8 5f fe ff ff       	call   c0026ada <PIC::remap()>
c0026c7b:	83 c4 10             	add    esp,0x10
c0026c7e:	b8 00 00 00 00       	mov    eax,0x0
c0026c83:	c9                   	leave  
c0026c84:	c3                   	ret    
c0026c85:	90                   	nop

c0026c86 <APICTimer::close(int, int, void*)>:
c0026c86:	b8 00 00 00 00       	mov    eax,0x0
c0026c8b:	c3                   	ret    

c0026c8c <apicTimerHandler(regs*, void*)>:
c0026c8c:	83 ec 0c             	sub    esp,0xc
c0026c8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c95:	99                   	cdq    
c0026c96:	52                   	push   edx
c0026c97:	50                   	push   eax
c0026c98:	6a 00                	push   0x0
c0026c9a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026c9f:	e8 90 07 00 00       	call   c0027434 <__udivdi3>
c0026ca4:	83 c4 10             	add    esp,0x10
c0026ca7:	83 ec 08             	sub    esp,0x8
c0026caa:	52                   	push   edx
c0026cab:	50                   	push   eax
c0026cac:	e8 32 fd fe ff       	call   c00169e3 <timerHandler(unsigned long long)>
c0026cb1:	83 c4 10             	add    esp,0x10
c0026cb4:	90                   	nop
c0026cb5:	83 c4 0c             	add    esp,0xc
c0026cb8:	c3                   	ret    
c0026cb9:	90                   	nop

c0026cba <APICTimer::write(int)>:
c0026cba:	53                   	push   ebx
c0026cbb:	83 ec 28             	sub    esp,0x28
c0026cbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026cc2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026cc6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026ccc:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0026cd1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026cd7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026cdd:	83 ec 0c             	sub    esp,0xc
c0026ce0:	50                   	push   eax
c0026ce1:	e8 de f4 ff ff       	call   c00261c4 <APIC::getBase()>
c0026ce6:	83 c4 10             	add    esp,0x10
c0026ce9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026ced:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0026cf2:	8b 15 54 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f754
c0026cf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026cfc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026d00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d04:	05 e0 03 00 00       	add    eax,0x3e0
c0026d09:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d13:	05 80 03 00 00       	add    eax,0x380
c0026d18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026d1e:	fb                   	sti    
c0026d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026d27:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026d2c:	83 d2 00             	adc    edx,0x0
c0026d2f:	89 c1                	mov    ecx,eax
c0026d31:	89 d3                	mov    ebx,edx
c0026d33:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0026d38:	8b 15 54 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f754
c0026d3e:	39 c8                	cmp    eax,ecx
c0026d40:	89 d0                	mov    eax,edx
c0026d42:	19 d8                	sbb    eax,ebx
c0026d44:	73 02                	jae    c0026d48 <APICTimer::write(int)+0x8e>
c0026d46:	eb d7                	jmp    c0026d1f <APICTimer::write(int)+0x65>
c0026d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d4c:	05 20 03 00 00       	add    eax,0x320
c0026d51:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026d57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d5b:	05 90 03 00 00       	add    eax,0x390
c0026d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d62:	f7 d0                	not    eax
c0026d64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026d68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026d6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d70:	ba 00 00 00 00       	mov    edx,0x0
c0026d75:	f7 f3                	div    ebx
c0026d77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026d7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026d85:	0d 00 00 02 00       	or     eax,0x20000
c0026d8a:	89 c2                	mov    edx,eax
c0026d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d90:	05 20 03 00 00       	add    eax,0x320
c0026d95:	89 10                	mov    DWORD PTR [eax],edx
c0026d97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d9b:	05 e0 03 00 00       	add    eax,0x3e0
c0026da0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026daa:	05 80 03 00 00       	add    eax,0x380
c0026daf:	89 c2                	mov    edx,eax
c0026db1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026db5:	89 02                	mov    DWORD PTR [edx],eax
c0026db7:	90                   	nop
c0026db8:	83 c4 28             	add    esp,0x28
c0026dbb:	5b                   	pop    ebx
c0026dbc:	c3                   	ret    
c0026dbd:	90                   	nop

c0026dbe <APICTimer::open(int, int, void*)>:
c0026dbe:	57                   	push   edi
c0026dbf:	56                   	push   esi
c0026dc0:	53                   	push   ebx
c0026dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0026dc7:	83 c0 24             	add    eax,0x24
c0026dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0026dcc:	83 ec 08             	sub    esp,0x8
c0026dcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026dd7:	ff d0                	call   eax
c0026dd9:	83 c4 10             	add    esp,0x10
c0026ddc:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0026de1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026de7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026ded:	83 ec 0c             	sub    esp,0xc
c0026df0:	50                   	push   eax
c0026df1:	e8 ce f3 ff ff       	call   c00261c4 <APIC::getBase()>
c0026df6:	83 c4 10             	add    esp,0x10
c0026df9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e03:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e09:	0f b6 f8             	movzx  edi,al
c0026e0c:	89 d0                	mov    eax,edx
c0026e0e:	ba 00 00 00 00       	mov    edx,0x0
c0026e13:	89 c1                	mov    ecx,eax
c0026e15:	80 e5 ff             	and    ch,0xff
c0026e18:	89 cb                	mov    ebx,ecx
c0026e1a:	0f b6 f2             	movzx  esi,dl
c0026e1d:	89 d8                	mov    eax,ebx
c0026e1f:	89 f2                	mov    edx,esi
c0026e21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e25:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026e28:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026e2c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026e30:	83 e0 00             	and    eax,0x0
c0026e33:	09 d0                	or     eax,edx
c0026e35:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e43:	8d 50 01             	lea    edx,[eax+0x1]
c0026e46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e4a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026e50:	0f b6 d0             	movzx  edx,al
c0026e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e57:	83 c2 08             	add    edx,0x8
c0026e5a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026e5e:	0f b6 c9             	movzx  ecx,cl
c0026e61:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026e67:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026e73:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026e81:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026e87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026e8b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026e91:	83 ec 0c             	sub    esp,0xc
c0026e94:	51                   	push   ecx
c0026e95:	6a 01                	push   0x1
c0026e97:	68 8c 6c 02 c0       	push   0xc0026c8c
c0026e9c:	52                   	push   edx
c0026e9d:	50                   	push   eax
c0026e9e:	e8 ab cf fe ff       	call   c0013e4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026ea3:	83 c4 20             	add    esp,0x20
c0026ea6:	89 c2                	mov    edx,eax
c0026ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eac:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026eb2:	b8 00 00 00 00       	mov    eax,0x0
c0026eb7:	5b                   	pop    ebx
c0026eb8:	5e                   	pop    esi
c0026eb9:	5f                   	pop    edi
c0026eba:	c3                   	ret    
c0026ebb:	90                   	nop

c0026ebc <APICTimer::APICTimer()>:
c0026ebc:	83 ec 0c             	sub    esp,0xc
c0026ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ec3:	83 ec 08             	sub    esp,0x8
c0026ec6:	68 70 df 02 c0       	push   0xc002df70
c0026ecb:	50                   	push   eax
c0026ecc:	e8 83 fa fe ff       	call   c0016954 <Timer::Timer(char const*)>
c0026ed1:	83 c4 10             	add    esp,0x10
c0026ed4:	ba 84 df 02 c0       	mov    edx,0xc002df84
c0026ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026edd:	89 10                	mov    DWORD PTR [eax],edx
c0026edf:	90                   	nop
c0026ee0:	83 c4 0c             	add    esp,0xc
c0026ee3:	c3                   	ret    

c0026ee4 <PIT::write(int)>:
c0026ee4:	83 ec 10             	sub    esp,0x10
c0026ee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026eeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026eef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026ef5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026ef9:	a3 84 34 03 c0       	mov    ds:0xc0033484,eax
c0026efe:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026f03:	99                   	cdq    
c0026f04:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f0c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026f13:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026f18:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026f1c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026f21:	ee                   	out    dx,al
c0026f22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f26:	0f b6 c0             	movzx  eax,al
c0026f29:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026f30:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026f34:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026f38:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026f3d:	ee                   	out    dx,al
c0026f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f42:	c1 f8 08             	sar    eax,0x8
c0026f45:	0f b6 c0             	movzx  eax,al
c0026f48:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026f4f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026f53:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026f57:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026f5c:	ee                   	out    dx,al
c0026f5d:	90                   	nop
c0026f5e:	83 c4 10             	add    esp,0x10
c0026f61:	c3                   	ret    

c0026f62 <pitHandler(regs*, void*)>:
c0026f62:	83 ec 0c             	sub    esp,0xc
c0026f65:	a1 84 34 03 c0       	mov    eax,ds:0xc0033484
c0026f6a:	99                   	cdq    
c0026f6b:	52                   	push   edx
c0026f6c:	50                   	push   eax
c0026f6d:	6a 00                	push   0x0
c0026f6f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026f74:	e8 bb 04 00 00       	call   c0027434 <__udivdi3>
c0026f79:	83 c4 10             	add    esp,0x10
c0026f7c:	83 ec 08             	sub    esp,0x8
c0026f7f:	52                   	push   edx
c0026f80:	50                   	push   eax
c0026f81:	e8 5d fa fe ff       	call   c00169e3 <timerHandler(unsigned long long)>
c0026f86:	83 c4 10             	add    esp,0x10
c0026f89:	90                   	nop
c0026f8a:	83 c4 0c             	add    esp,0xc
c0026f8d:	c3                   	ret    

c0026f8e <PIT::open(int, int, void*)>:
c0026f8e:	83 ec 0c             	sub    esp,0xc
c0026f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f95:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f97:	83 c0 24             	add    eax,0x24
c0026f9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f9c:	83 ec 08             	sub    esp,0x8
c0026f9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fa7:	ff d0                	call   eax
c0026fa9:	83 c4 10             	add    esp,0x10
c0026fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb0:	83 ec 0c             	sub    esp,0xc
c0026fb3:	6a 00                	push   0x0
c0026fb5:	6a 01                	push   0x1
c0026fb7:	68 62 6f 02 c0       	push   0xc0026f62
c0026fbc:	6a 00                	push   0x0
c0026fbe:	50                   	push   eax
c0026fbf:	e8 8a ce fe ff       	call   c0013e4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026fc4:	83 c4 20             	add    esp,0x20
c0026fc7:	89 c2                	mov    edx,eax
c0026fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fcd:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026fd3:	b8 00 00 00 00       	mov    eax,0x0
c0026fd8:	83 c4 0c             	add    esp,0xc
c0026fdb:	c3                   	ret    

c0026fdc <PIT::close(int, int, void*)>:
c0026fdc:	83 ec 0c             	sub    esp,0xc
c0026fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fe3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ff1:	6a 01                	push   0x1
c0026ff3:	68 62 6f 02 c0       	push   0xc0026f62
c0026ff8:	6a 00                	push   0x0
c0026ffa:	50                   	push   eax
c0026ffb:	e8 98 ce fe ff       	call   c0013e98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0027000:	83 c4 10             	add    esp,0x10
c0027003:	b8 00 00 00 00       	mov    eax,0x0
c0027008:	83 c4 0c             	add    esp,0xc
c002700b:	c3                   	ret    

c002700c <PIT::PIT()>:
c002700c:	83 ec 0c             	sub    esp,0xc
c002700f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027013:	83 ec 08             	sub    esp,0x8
c0027016:	68 ac df 02 c0       	push   0xc002dfac
c002701b:	50                   	push   eax
c002701c:	e8 33 f9 fe ff       	call   c0016954 <Timer::Timer(char const*)>
c0027021:	83 c4 10             	add    esp,0x10
c0027024:	ba d4 df 02 c0       	mov    edx,0xc002dfd4
c0027029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002702d:	89 10                	mov    DWORD PTR [eax],edx
c002702f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027033:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027039:	0f b6 d0             	movzx  edx,al
c002703c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027040:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0027047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002704b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027051:	0f b6 d0             	movzx  edx,al
c0027054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027058:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002705d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027061:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027067:	8d 50 01             	lea    edx,[eax+0x1]
c002706a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002706e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0027074:	0f b6 d0             	movzx  edx,al
c0027077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002707f:	83 e1 3f             	and    ecx,0x3f
c0027082:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0027086:	90                   	nop
c0027087:	83 c4 0c             	add    esp,0xc
c002708a:	c3                   	ret    
c002708b:	66 90                	xchg   ax,ax
c002708d:	66 90                	xchg   ax,ax
c002708f:	90                   	nop

c0027090 <avxDetect>:
c0027090:	b8 00 00 00 00       	mov    eax,0x0
c0027095:	c3                   	ret    

c0027096 <avxSave>:
c0027096:	c3                   	ret    

c0027097 <avxLoad>:
c0027097:	c3                   	ret    

c0027098 <avxInit>:
c0027098:	c3                   	ret    

c0027099 <avxClose>:
c0027099:	c3                   	ret    

c002709a <wouldSheSayYes>:
c002709a:	c3                   	ret    
c002709b:	49                   	dec    ecx
c002709c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00270a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00270a4:	75 20                	jne    c00270c6 <sseDetect.noSSE+0x1>
c00270a6:	4e                   	dec    esi
c00270a7:	79 61                	jns    c002710a <x87Detect+0x14>
c00270a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00270ae:	66 90                	xchg   ax,ax

c00270b0 <absolutelyNoChanceInHell>:
c00270b0:	b8 01 00 00 00       	mov    eax,0x1
c00270b5:	0f a2                	cpuid  
c00270b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00270bd:	74 06                	je     c00270c5 <sseDetect.noSSE>
c00270bf:	b8 01 00 00 00       	mov    eax,0x1
c00270c4:	c3                   	ret    

c00270c5 <sseDetect.noSSE>:
c00270c5:	31 c0                	xor    eax,eax
c00270c7:	c3                   	ret    

c00270c8 <sseSave>:
c00270c8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00270cd:	c3                   	ret    

c00270ce <sseLoad>:
c00270ce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00270d3:	c3                   	ret    

c00270d4 <sseInit>:
c00270d4:	e8 49 00 00 00       	call   c0027122 <x87Init>
c00270d9:	0f 20 e0             	mov    eax,cr4
c00270dc:	66 0d 00 06          	or     ax,0x600
c00270e0:	0f 22 e0             	mov    cr4,eax
c00270e3:	c3                   	ret    

c00270e4 <sseClose>:
c00270e4:	c3                   	ret    
c00270e5:	66 90                	xchg   ax,ax
c00270e7:	66 90                	xchg   ax,ax
c00270e9:	66 90                	xchg   ax,ax
c00270eb:	66 90                	xchg   ax,ax
c00270ed:	66 90                	xchg   ax,ax
c00270ef:	90                   	nop

c00270f0 <value_37F>:
c00270f0:	7f 03                	jg     c00270f5 <value_37A+0x1>

c00270f2 <value_37E>:
c00270f2:	7e 03                	jle    c00270f7 <x87Detect+0x1>

c00270f4 <value_37A>:
c00270f4:	7a 03                	jp     c00270f9 <x87Detect+0x3>

c00270f6 <x87Detect>:
c00270f6:	b8 01 00 00 00       	mov    eax,0x1
c00270fb:	0f a2                	cpuid  
c00270fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0027103:	74 06                	je     c002710b <x87Detect.nox87>
c0027105:	b8 01 00 00 00       	mov    eax,0x1
c002710a:	c3                   	ret    

c002710b <x87Detect.nox87>:
c002710b:	b8 00 00 00 00       	mov    eax,0x0
c0027110:	c3                   	ret    

c0027111 <x87Save>:
c0027111:	55                   	push   ebp
c0027112:	89 e5                	mov    ebp,esp
c0027114:	9b dd 75 08          	fsave  [ebp+0x8]
c0027118:	c9                   	leave  
c0027119:	c3                   	ret    

c002711a <x87Load>:
c002711a:	55                   	push   ebp
c002711b:	89 e5                	mov    ebp,esp
c002711d:	dd 65 08             	frstor [ebp+0x8]
c0027120:	c9                   	leave  
c0027121:	c3                   	ret    

c0027122 <x87Init>:
c0027122:	9b db e3             	finit  
c0027125:	0f 20 c0             	mov    eax,cr0
c0027128:	66 25 fb ff          	and    ax,0xfffb
c002712c:	66 0d 22 00          	or     ax,0x22
c0027130:	0f 22 c0             	mov    cr0,eax
c0027133:	0f 06                	clts   
c0027135:	d9 2d f4 70 02 c0    	fldcw  WORD PTR ds:0xc00270f4
c002713b:	c3                   	ret    

c002713c <x87Close>:
c002713c:	c3                   	ret    
c002713d:	66 90                	xchg   ax,ax
c002713f:	90                   	nop

c0027140 <__do_global_ctors_aux>:
c0027140:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c0027145:	83 f8 ff             	cmp    eax,0xffffffff
c0027148:	74 1a                	je     c0027164 <__do_global_ctors_aux+0x24>
c002714a:	55                   	push   ebp
c002714b:	89 e5                	mov    ebp,esp
c002714d:	53                   	push   ebx
c002714e:	52                   	push   edx
c002714f:	bb 78 9d 02 c0       	mov    ebx,0xc0029d78
c0027154:	ff d0                	call   eax
c0027156:	83 eb 04             	sub    ebx,0x4
c0027159:	8b 03                	mov    eax,DWORD PTR [ebx]
c002715b:	83 f8 ff             	cmp    eax,0xffffffff
c002715e:	75 f4                	jne    c0027154 <__do_global_ctors_aux+0x14>
c0027160:	58                   	pop    eax
c0027161:	5b                   	pop    ebx
c0027162:	5d                   	pop    ebp
c0027163:	c3                   	ret    
c0027164:	c3                   	ret    
c0027165:	66 90                	xchg   ax,ax
c0027167:	90                   	nop

c0027168 <__divdi3>:
c0027168:	55                   	push   ebp
c0027169:	57                   	push   edi
c002716a:	56                   	push   esi
c002716b:	53                   	push   ebx
c002716c:	83 ec 1c             	sub    esp,0x1c
c002716f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027173:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027177:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002717a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002717e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027182:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027186:	85 db                	test   ebx,ebx
c0027188:	0f 88 8e 00 00 00    	js     c002721c <__divdi3+0xb4>
c002718e:	89 dd                	mov    ebp,ebx
c0027190:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027198:	89 d3                	mov    ebx,edx
c002719a:	85 d2                	test   edx,edx
c002719c:	79 0d                	jns    c00271ab <__divdi3+0x43>
c002719e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00271a2:	f7 d8                	neg    eax
c00271a4:	83 d2 00             	adc    edx,0x0
c00271a7:	f7 da                	neg    edx
c00271a9:	89 d3                	mov    ebx,edx
c00271ab:	89 c7                	mov    edi,eax
c00271ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00271b0:	85 db                	test   ebx,ebx
c00271b2:	75 48                	jne    c00271fc <__divdi3+0x94>
c00271b4:	39 ef                	cmp    edi,ebp
c00271b6:	76 24                	jbe    c00271dc <__divdi3+0x74>
c00271b8:	89 ea                	mov    edx,ebp
c00271ba:	f7 f7                	div    edi
c00271bc:	89 c1                	mov    ecx,eax
c00271be:	31 f6                	xor    esi,esi
c00271c0:	89 c8                	mov    eax,ecx
c00271c2:	89 f2                	mov    edx,esi
c00271c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00271c8:	85 c9                	test   ecx,ecx
c00271ca:	74 07                	je     c00271d3 <__divdi3+0x6b>
c00271cc:	f7 d8                	neg    eax
c00271ce:	83 d2 00             	adc    edx,0x0
c00271d1:	f7 da                	neg    edx
c00271d3:	83 c4 1c             	add    esp,0x1c
c00271d6:	5b                   	pop    ebx
c00271d7:	5e                   	pop    esi
c00271d8:	5f                   	pop    edi
c00271d9:	5d                   	pop    ebp
c00271da:	c3                   	ret    
c00271db:	90                   	nop
c00271dc:	85 ff                	test   edi,edi
c00271de:	75 0b                	jne    c00271eb <__divdi3+0x83>
c00271e0:	b8 01 00 00 00       	mov    eax,0x1
c00271e5:	31 d2                	xor    edx,edx
c00271e7:	f7 f3                	div    ebx
c00271e9:	89 c7                	mov    edi,eax
c00271eb:	31 d2                	xor    edx,edx
c00271ed:	89 e8                	mov    eax,ebp
c00271ef:	f7 f7                	div    edi
c00271f1:	89 c6                	mov    esi,eax
c00271f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00271f6:	f7 f7                	div    edi
c00271f8:	89 c1                	mov    ecx,eax
c00271fa:	eb c4                	jmp    c00271c0 <__divdi3+0x58>
c00271fc:	39 eb                	cmp    ebx,ebp
c00271fe:	77 3c                	ja     c002723c <__divdi3+0xd4>
c0027200:	0f bd f3             	bsr    esi,ebx
c0027203:	83 f6 1f             	xor    esi,0x1f
c0027206:	75 40                	jne    c0027248 <__divdi3+0xe0>
c0027208:	39 eb                	cmp    ebx,ebp
c002720a:	72 09                	jb     c0027215 <__divdi3+0xad>
c002720c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002720f:	0f 87 97 00 00 00    	ja     c00272ac <__divdi3+0x144>
c0027215:	b9 01 00 00 00       	mov    ecx,0x1
c002721a:	eb a4                	jmp    c00271c0 <__divdi3+0x58>
c002721c:	f7 d9                	neg    ecx
c002721e:	83 d3 00             	adc    ebx,0x0
c0027221:	f7 db                	neg    ebx
c0027223:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027226:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002722a:	89 dd                	mov    ebp,ebx
c002722c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027234:	e9 5f ff ff ff       	jmp    c0027198 <__divdi3+0x30>
c0027239:	8d 76 00             	lea    esi,[esi+0x0]
c002723c:	31 f6                	xor    esi,esi
c002723e:	31 c9                	xor    ecx,ecx
c0027240:	e9 7b ff ff ff       	jmp    c00271c0 <__divdi3+0x58>
c0027245:	8d 76 00             	lea    esi,[esi+0x0]
c0027248:	b8 20 00 00 00       	mov    eax,0x20
c002724d:	29 f0                	sub    eax,esi
c002724f:	89 f1                	mov    ecx,esi
c0027251:	d3 e3                	shl    ebx,cl
c0027253:	89 fa                	mov    edx,edi
c0027255:	88 c1                	mov    cl,al
c0027257:	d3 ea                	shr    edx,cl
c0027259:	09 da                	or     edx,ebx
c002725b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002725f:	89 f1                	mov    ecx,esi
c0027261:	d3 e7                	shl    edi,cl
c0027263:	89 eb                	mov    ebx,ebp
c0027265:	88 c1                	mov    cl,al
c0027267:	d3 eb                	shr    ebx,cl
c0027269:	89 f1                	mov    ecx,esi
c002726b:	d3 e5                	shl    ebp,cl
c002726d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027270:	88 c1                	mov    cl,al
c0027272:	d3 ea                	shr    edx,cl
c0027274:	09 d5                	or     ebp,edx
c0027276:	89 e8                	mov    eax,ebp
c0027278:	89 da                	mov    edx,ebx
c002727a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002727e:	89 d3                	mov    ebx,edx
c0027280:	89 c5                	mov    ebp,eax
c0027282:	f7 e7                	mul    edi
c0027284:	39 d3                	cmp    ebx,edx
c0027286:	72 18                	jb     c00272a0 <__divdi3+0x138>
c0027288:	74 0a                	je     c0027294 <__divdi3+0x12c>
c002728a:	89 e9                	mov    ecx,ebp
c002728c:	31 f6                	xor    esi,esi
c002728e:	e9 2d ff ff ff       	jmp    c00271c0 <__divdi3+0x58>
c0027293:	90                   	nop
c0027294:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027297:	89 f1                	mov    ecx,esi
c0027299:	d3 e7                	shl    edi,cl
c002729b:	39 c7                	cmp    edi,eax
c002729d:	73 eb                	jae    c002728a <__divdi3+0x122>
c002729f:	90                   	nop
c00272a0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00272a3:	31 f6                	xor    esi,esi
c00272a5:	e9 16 ff ff ff       	jmp    c00271c0 <__divdi3+0x58>
c00272aa:	66 90                	xchg   ax,ax
c00272ac:	31 c9                	xor    ecx,ecx
c00272ae:	e9 0d ff ff ff       	jmp    c00271c0 <__divdi3+0x58>
c00272b3:	90                   	nop

c00272b4 <__moddi3>:
c00272b4:	55                   	push   ebp
c00272b5:	57                   	push   edi
c00272b6:	56                   	push   esi
c00272b7:	53                   	push   ebx
c00272b8:	83 ec 2c             	sub    esp,0x2c
c00272bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00272bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00272c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00272c7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00272cb:	85 db                	test   ebx,ebx
c00272cd:	0f 88 85 00 00 00    	js     c0027358 <__moddi3+0xa4>
c00272d3:	89 de                	mov    esi,ebx
c00272d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00272dd:	89 d7                	mov    edi,edx
c00272df:	85 d2                	test   edx,edx
c00272e1:	79 09                	jns    c00272ec <__moddi3+0x38>
c00272e3:	f7 d8                	neg    eax
c00272e5:	83 d2 00             	adc    edx,0x0
c00272e8:	f7 da                	neg    edx
c00272ea:	89 d7                	mov    edi,edx
c00272ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00272f0:	89 cd                	mov    ebp,ecx
c00272f2:	85 ff                	test   edi,edi
c00272f4:	75 52                	jne    c0027348 <__moddi3+0x94>
c00272f6:	89 c3                	mov    ebx,eax
c00272f8:	39 f0                	cmp    eax,esi
c00272fa:	76 24                	jbe    c0027320 <__moddi3+0x6c>
c00272fc:	89 c8                	mov    eax,ecx
c00272fe:	89 f2                	mov    edx,esi
c0027300:	f7 f3                	div    ebx
c0027302:	89 d6                	mov    esi,edx
c0027304:	89 f0                	mov    eax,esi
c0027306:	31 d2                	xor    edx,edx
c0027308:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002730c:	85 c9                	test   ecx,ecx
c002730e:	74 07                	je     c0027317 <__moddi3+0x63>
c0027310:	f7 d8                	neg    eax
c0027312:	83 d2 00             	adc    edx,0x0
c0027315:	f7 da                	neg    edx
c0027317:	83 c4 2c             	add    esp,0x2c
c002731a:	5b                   	pop    ebx
c002731b:	5e                   	pop    esi
c002731c:	5f                   	pop    edi
c002731d:	5d                   	pop    ebp
c002731e:	c3                   	ret    
c002731f:	90                   	nop
c0027320:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027324:	85 db                	test   ebx,ebx
c0027326:	75 0d                	jne    c0027335 <__moddi3+0x81>
c0027328:	b8 01 00 00 00       	mov    eax,0x1
c002732d:	31 d2                	xor    edx,edx
c002732f:	f7 f7                	div    edi
c0027331:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027335:	89 f0                	mov    eax,esi
c0027337:	31 d2                	xor    edx,edx
c0027339:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002733d:	f7 f7                	div    edi
c002733f:	89 e8                	mov    eax,ebp
c0027341:	f7 f7                	div    edi
c0027343:	89 d6                	mov    esi,edx
c0027345:	eb bd                	jmp    c0027304 <__moddi3+0x50>
c0027347:	90                   	nop
c0027348:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002734c:	39 f7                	cmp    edi,esi
c002734e:	76 20                	jbe    c0027370 <__moddi3+0xbc>
c0027350:	89 c8                	mov    eax,ecx
c0027352:	89 f2                	mov    edx,esi
c0027354:	eb b2                	jmp    c0027308 <__moddi3+0x54>
c0027356:	66 90                	xchg   ax,ax
c0027358:	f7 d9                	neg    ecx
c002735a:	83 d3 00             	adc    ebx,0x0
c002735d:	f7 db                	neg    ebx
c002735f:	89 de                	mov    esi,ebx
c0027361:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027369:	e9 6f ff ff ff       	jmp    c00272dd <__moddi3+0x29>
c002736e:	66 90                	xchg   ax,ax
c0027370:	0f bd c7             	bsr    eax,edi
c0027373:	83 f0 1f             	xor    eax,0x1f
c0027376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002737a:	75 24                	jne    c00273a0 <__moddi3+0xec>
c002737c:	39 f7                	cmp    edi,esi
c002737e:	72 06                	jb     c0027386 <__moddi3+0xd2>
c0027380:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027384:	77 0c                	ja     c0027392 <__moddi3+0xde>
c0027386:	89 e9                	mov    ecx,ebp
c0027388:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002738c:	19 fe                	sbb    esi,edi
c002738e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027396:	89 f2                	mov    edx,esi
c0027398:	e9 6b ff ff ff       	jmp    c0027308 <__moddi3+0x54>
c002739d:	8d 76 00             	lea    esi,[esi+0x0]
c00273a0:	b8 20 00 00 00       	mov    eax,0x20
c00273a5:	89 c2                	mov    edx,eax
c00273a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00273ab:	29 da                	sub    edx,ebx
c00273ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00273b1:	88 d9                	mov    cl,bl
c00273b3:	d3 e7                	shl    edi,cl
c00273b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00273b9:	88 d1                	mov    cl,dl
c00273bb:	d3 e8                	shr    eax,cl
c00273bd:	09 c7                	or     edi,eax
c00273bf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00273c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00273c7:	89 d8                	mov    eax,ebx
c00273c9:	88 d9                	mov    cl,bl
c00273cb:	d3 e7                	shl    edi,cl
c00273cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273d1:	89 f3                	mov    ebx,esi
c00273d3:	88 d1                	mov    cl,dl
c00273d5:	d3 eb                	shr    ebx,cl
c00273d7:	89 c7                	mov    edi,eax
c00273d9:	88 c1                	mov    cl,al
c00273db:	d3 e6                	shl    esi,cl
c00273dd:	89 e8                	mov    eax,ebp
c00273df:	88 d1                	mov    cl,dl
c00273e1:	d3 e8                	shr    eax,cl
c00273e3:	09 f0                	or     eax,esi
c00273e5:	89 f9                	mov    ecx,edi
c00273e7:	d3 e5                	shl    ebp,cl
c00273e9:	89 da                	mov    edx,ebx
c00273eb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00273ef:	89 d3                	mov    ebx,edx
c00273f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273f5:	89 c6                	mov    esi,eax
c00273f7:	89 d1                	mov    ecx,edx
c00273f9:	39 d3                	cmp    ebx,edx
c00273fb:	72 27                	jb     c0027424 <__moddi3+0x170>
c00273fd:	74 21                	je     c0027420 <__moddi3+0x16c>
c00273ff:	29 f5                	sub    ebp,esi
c0027401:	19 cb                	sbb    ebx,ecx
c0027403:	89 de                	mov    esi,ebx
c0027405:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027409:	d3 e6                	shl    esi,cl
c002740b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002740f:	89 f9                	mov    ecx,edi
c0027411:	d3 ed                	shr    ebp,cl
c0027413:	09 ee                	or     esi,ebp
c0027415:	89 f0                	mov    eax,esi
c0027417:	d3 eb                	shr    ebx,cl
c0027419:	89 da                	mov    edx,ebx
c002741b:	e9 e8 fe ff ff       	jmp    c0027308 <__moddi3+0x54>
c0027420:	39 c5                	cmp    ebp,eax
c0027422:	73 db                	jae    c00273ff <__moddi3+0x14b>
c0027424:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027428:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002742c:	89 d1                	mov    ecx,edx
c002742e:	89 c6                	mov    esi,eax
c0027430:	eb cd                	jmp    c00273ff <__moddi3+0x14b>
c0027432:	66 90                	xchg   ax,ax

c0027434 <__udivdi3>:
c0027434:	55                   	push   ebp
c0027435:	57                   	push   edi
c0027436:	56                   	push   esi
c0027437:	53                   	push   ebx
c0027438:	83 ec 1c             	sub    esp,0x1c
c002743b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002743f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027443:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027447:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002744b:	85 d2                	test   edx,edx
c002744d:	75 41                	jne    c0027490 <__udivdi3+0x5c>
c002744f:	39 f7                	cmp    edi,esi
c0027451:	76 15                	jbe    c0027468 <__udivdi3+0x34>
c0027453:	89 e8                	mov    eax,ebp
c0027455:	89 f2                	mov    edx,esi
c0027457:	f7 f7                	div    edi
c0027459:	31 db                	xor    ebx,ebx
c002745b:	89 da                	mov    edx,ebx
c002745d:	83 c4 1c             	add    esp,0x1c
c0027460:	5b                   	pop    ebx
c0027461:	5e                   	pop    esi
c0027462:	5f                   	pop    edi
c0027463:	5d                   	pop    ebp
c0027464:	c3                   	ret    
c0027465:	8d 76 00             	lea    esi,[esi+0x0]
c0027468:	89 f9                	mov    ecx,edi
c002746a:	85 ff                	test   edi,edi
c002746c:	75 0b                	jne    c0027479 <__udivdi3+0x45>
c002746e:	b8 01 00 00 00       	mov    eax,0x1
c0027473:	31 d2                	xor    edx,edx
c0027475:	f7 f7                	div    edi
c0027477:	89 c1                	mov    ecx,eax
c0027479:	31 d2                	xor    edx,edx
c002747b:	89 f0                	mov    eax,esi
c002747d:	f7 f1                	div    ecx
c002747f:	89 c3                	mov    ebx,eax
c0027481:	89 e8                	mov    eax,ebp
c0027483:	f7 f1                	div    ecx
c0027485:	89 da                	mov    edx,ebx
c0027487:	83 c4 1c             	add    esp,0x1c
c002748a:	5b                   	pop    ebx
c002748b:	5e                   	pop    esi
c002748c:	5f                   	pop    edi
c002748d:	5d                   	pop    ebp
c002748e:	c3                   	ret    
c002748f:	90                   	nop
c0027490:	39 f2                	cmp    edx,esi
c0027492:	77 1c                	ja     c00274b0 <__udivdi3+0x7c>
c0027494:	0f bd da             	bsr    ebx,edx
c0027497:	83 f3 1f             	xor    ebx,0x1f
c002749a:	75 24                	jne    c00274c0 <__udivdi3+0x8c>
c002749c:	39 f2                	cmp    edx,esi
c002749e:	72 08                	jb     c00274a8 <__udivdi3+0x74>
c00274a0:	39 ef                	cmp    edi,ebp
c00274a2:	0f 87 84 00 00 00    	ja     c002752c <__udivdi3+0xf8>
c00274a8:	b8 01 00 00 00       	mov    eax,0x1
c00274ad:	eb ac                	jmp    c002745b <__udivdi3+0x27>
c00274af:	90                   	nop
c00274b0:	31 db                	xor    ebx,ebx
c00274b2:	31 c0                	xor    eax,eax
c00274b4:	89 da                	mov    edx,ebx
c00274b6:	83 c4 1c             	add    esp,0x1c
c00274b9:	5b                   	pop    ebx
c00274ba:	5e                   	pop    esi
c00274bb:	5f                   	pop    edi
c00274bc:	5d                   	pop    ebp
c00274bd:	c3                   	ret    
c00274be:	66 90                	xchg   ax,ax
c00274c0:	b8 20 00 00 00       	mov    eax,0x20
c00274c5:	29 d8                	sub    eax,ebx
c00274c7:	88 d9                	mov    cl,bl
c00274c9:	d3 e2                	shl    edx,cl
c00274cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00274cf:	89 fa                	mov    edx,edi
c00274d1:	88 c1                	mov    cl,al
c00274d3:	d3 ea                	shr    edx,cl
c00274d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00274d9:	09 d1                	or     ecx,edx
c00274db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00274df:	88 d9                	mov    cl,bl
c00274e1:	d3 e7                	shl    edi,cl
c00274e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00274e7:	89 f7                	mov    edi,esi
c00274e9:	88 c1                	mov    cl,al
c00274eb:	d3 ef                	shr    edi,cl
c00274ed:	88 d9                	mov    cl,bl
c00274ef:	d3 e6                	shl    esi,cl
c00274f1:	89 ea                	mov    edx,ebp
c00274f3:	88 c1                	mov    cl,al
c00274f5:	d3 ea                	shr    edx,cl
c00274f7:	09 d6                	or     esi,edx
c00274f9:	89 f0                	mov    eax,esi
c00274fb:	89 fa                	mov    edx,edi
c00274fd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027501:	89 d7                	mov    edi,edx
c0027503:	89 c6                	mov    esi,eax
c0027505:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027509:	39 d7                	cmp    edi,edx
c002750b:	72 13                	jb     c0027520 <__udivdi3+0xec>
c002750d:	74 09                	je     c0027518 <__udivdi3+0xe4>
c002750f:	89 f0                	mov    eax,esi
c0027511:	31 db                	xor    ebx,ebx
c0027513:	e9 43 ff ff ff       	jmp    c002745b <__udivdi3+0x27>
c0027518:	88 d9                	mov    cl,bl
c002751a:	d3 e5                	shl    ebp,cl
c002751c:	39 c5                	cmp    ebp,eax
c002751e:	73 ef                	jae    c002750f <__udivdi3+0xdb>
c0027520:	8d 46 ff             	lea    eax,[esi-0x1]
c0027523:	31 db                	xor    ebx,ebx
c0027525:	e9 31 ff ff ff       	jmp    c002745b <__udivdi3+0x27>
c002752a:	66 90                	xchg   ax,ax
c002752c:	31 c0                	xor    eax,eax
c002752e:	e9 28 ff ff ff       	jmp    c002745b <__udivdi3+0x27>
c0027533:	90                   	nop

c0027534 <__umoddi3>:
c0027534:	55                   	push   ebp
c0027535:	57                   	push   edi
c0027536:	56                   	push   esi
c0027537:	53                   	push   ebx
c0027538:	83 ec 1c             	sub    esp,0x1c
c002753b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002753f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027543:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027547:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002754b:	89 da                	mov    edx,ebx
c002754d:	85 c0                	test   eax,eax
c002754f:	75 37                	jne    c0027588 <__umoddi3+0x54>
c0027551:	39 df                	cmp    edi,ebx
c0027553:	76 13                	jbe    c0027568 <__umoddi3+0x34>
c0027555:	89 f0                	mov    eax,esi
c0027557:	f7 f7                	div    edi
c0027559:	89 d0                	mov    eax,edx
c002755b:	31 d2                	xor    edx,edx
c002755d:	83 c4 1c             	add    esp,0x1c
c0027560:	5b                   	pop    ebx
c0027561:	5e                   	pop    esi
c0027562:	5f                   	pop    edi
c0027563:	5d                   	pop    ebp
c0027564:	c3                   	ret    
c0027565:	8d 76 00             	lea    esi,[esi+0x0]
c0027568:	89 fd                	mov    ebp,edi
c002756a:	85 ff                	test   edi,edi
c002756c:	75 0b                	jne    c0027579 <__umoddi3+0x45>
c002756e:	b8 01 00 00 00       	mov    eax,0x1
c0027573:	31 d2                	xor    edx,edx
c0027575:	f7 f7                	div    edi
c0027577:	89 c5                	mov    ebp,eax
c0027579:	89 d8                	mov    eax,ebx
c002757b:	31 d2                	xor    edx,edx
c002757d:	f7 f5                	div    ebp
c002757f:	89 f0                	mov    eax,esi
c0027581:	f7 f5                	div    ebp
c0027583:	89 d0                	mov    eax,edx
c0027585:	eb d4                	jmp    c002755b <__umoddi3+0x27>
c0027587:	90                   	nop
c0027588:	89 f1                	mov    ecx,esi
c002758a:	39 d8                	cmp    eax,ebx
c002758c:	76 0a                	jbe    c0027598 <__umoddi3+0x64>
c002758e:	89 f0                	mov    eax,esi
c0027590:	83 c4 1c             	add    esp,0x1c
c0027593:	5b                   	pop    ebx
c0027594:	5e                   	pop    esi
c0027595:	5f                   	pop    edi
c0027596:	5d                   	pop    ebp
c0027597:	c3                   	ret    
c0027598:	0f bd e8             	bsr    ebp,eax
c002759b:	83 f5 1f             	xor    ebp,0x1f
c002759e:	75 1c                	jne    c00275bc <__umoddi3+0x88>
c00275a0:	39 d8                	cmp    eax,ebx
c00275a2:	72 04                	jb     c00275a8 <__umoddi3+0x74>
c00275a4:	39 f7                	cmp    edi,esi
c00275a6:	77 08                	ja     c00275b0 <__umoddi3+0x7c>
c00275a8:	89 da                	mov    edx,ebx
c00275aa:	29 fe                	sub    esi,edi
c00275ac:	19 c2                	sbb    edx,eax
c00275ae:	89 f1                	mov    ecx,esi
c00275b0:	89 c8                	mov    eax,ecx
c00275b2:	83 c4 1c             	add    esp,0x1c
c00275b5:	5b                   	pop    ebx
c00275b6:	5e                   	pop    esi
c00275b7:	5f                   	pop    edi
c00275b8:	5d                   	pop    ebp
c00275b9:	c3                   	ret    
c00275ba:	66 90                	xchg   ax,ax
c00275bc:	ba 20 00 00 00       	mov    edx,0x20
c00275c1:	29 ea                	sub    edx,ebp
c00275c3:	89 e9                	mov    ecx,ebp
c00275c5:	d3 e0                	shl    eax,cl
c00275c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00275cb:	89 f8                	mov    eax,edi
c00275cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00275d1:	88 d1                	mov    cl,dl
c00275d3:	d3 e8                	shr    eax,cl
c00275d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00275d9:	09 c1                	or     ecx,eax
c00275db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00275df:	89 e9                	mov    ecx,ebp
c00275e1:	d3 e7                	shl    edi,cl
c00275e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00275e7:	89 d8                	mov    eax,ebx
c00275e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00275ed:	88 d1                	mov    cl,dl
c00275ef:	d3 e8                	shr    eax,cl
c00275f1:	89 c7                	mov    edi,eax
c00275f3:	89 e9                	mov    ecx,ebp
c00275f5:	d3 e3                	shl    ebx,cl
c00275f7:	89 f0                	mov    eax,esi
c00275f9:	88 d1                	mov    cl,dl
c00275fb:	d3 e8                	shr    eax,cl
c00275fd:	09 d8                	or     eax,ebx
c00275ff:	89 e9                	mov    ecx,ebp
c0027601:	d3 e6                	shl    esi,cl
c0027603:	89 f3                	mov    ebx,esi
c0027605:	89 fa                	mov    edx,edi
c0027607:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002760b:	89 d1                	mov    ecx,edx
c002760d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027611:	89 c6                	mov    esi,eax
c0027613:	89 d7                	mov    edi,edx
c0027615:	39 d1                	cmp    ecx,edx
c0027617:	72 27                	jb     c0027640 <__umoddi3+0x10c>
c0027619:	74 21                	je     c002763c <__umoddi3+0x108>
c002761b:	89 ca                	mov    edx,ecx
c002761d:	29 f3                	sub    ebx,esi
c002761f:	19 fa                	sbb    edx,edi
c0027621:	89 d0                	mov    eax,edx
c0027623:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027627:	d3 e0                	shl    eax,cl
c0027629:	89 e9                	mov    ecx,ebp
c002762b:	d3 eb                	shr    ebx,cl
c002762d:	09 d8                	or     eax,ebx
c002762f:	d3 ea                	shr    edx,cl
c0027631:	83 c4 1c             	add    esp,0x1c
c0027634:	5b                   	pop    ebx
c0027635:	5e                   	pop    esi
c0027636:	5f                   	pop    edi
c0027637:	5d                   	pop    ebp
c0027638:	c3                   	ret    
c0027639:	8d 76 00             	lea    esi,[esi+0x0]
c002763c:	39 c3                	cmp    ebx,eax
c002763e:	73 db                	jae    c002761b <__umoddi3+0xe7>
c0027640:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027644:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027648:	89 d7                	mov    edi,edx
c002764a:	89 c6                	mov    esi,eax
c002764c:	eb cd                	jmp    c002761b <__umoddi3+0xe7>

c002764e <__addsf3>:
c002764e:	55                   	push   ebp
c002764f:	89 e5                	mov    ebp,esp
c0027651:	57                   	push   edi
c0027652:	56                   	push   esi
c0027653:	53                   	push   ebx
c0027654:	83 ec 08             	sub    esp,0x8
c0027657:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002765a:	89 fa                	mov    edx,edi
c002765c:	89 f8                	mov    eax,edi
c002765e:	c1 f8 17             	sar    eax,0x17
c0027661:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027664:	c1 e2 08             	shl    edx,0x8
c0027667:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002766d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027670:	89 de                	mov    esi,ebx
c0027672:	c1 fe 17             	sar    esi,0x17
c0027675:	c1 e3 08             	shl    ebx,0x8
c0027678:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002767e:	31 f0                	xor    eax,esi
c0027680:	0f 88 3b 01 00 00    	js     c00277c1 <__addsf3+0x173>
c0027686:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027689:	29 f1                	sub    ecx,esi
c002768b:	85 c9                	test   ecx,ecx
c002768d:	7e 54                	jle    c00276e3 <__addsf3+0x95>
c002768f:	89 f0                	mov    eax,esi
c0027691:	84 c0                	test   al,al
c0027693:	75 10                	jne    c00276a5 <__addsf3+0x57>
c0027695:	85 db                	test   ebx,ebx
c0027697:	0f 84 aa 02 00 00    	je     c0027947 <__addsf3+0x2f9>
c002769d:	49                   	dec    ecx
c002769e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00276a1:	74 38                	je     c00276db <__addsf3+0x8d>
c00276a3:	eb 13                	jmp    c00276b8 <__addsf3+0x6a>
c00276a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276a8:	f7 d0                	not    eax
c00276aa:	84 c0                	test   al,al
c00276ac:	0f 84 95 02 00 00    	je     c0027947 <__addsf3+0x2f9>
c00276b2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00276b8:	83 f9 1f             	cmp    ecx,0x1f
c00276bb:	0f 8f 86 02 00 00    	jg     c0027947 <__addsf3+0x2f9>
c00276c1:	89 de                	mov    esi,ebx
c00276c3:	d3 ee                	shr    esi,cl
c00276c5:	b8 20 00 00 00       	mov    eax,0x20
c00276ca:	29 c8                	sub    eax,ecx
c00276cc:	89 c1                	mov    ecx,eax
c00276ce:	d3 e3                	shl    ebx,cl
c00276d0:	31 c0                	xor    eax,eax
c00276d2:	85 db                	test   ebx,ebx
c00276d4:	0f 95 c0             	setne  al
c00276d7:	09 f0                	or     eax,esi
c00276d9:	01 d0                	add    eax,edx
c00276db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276de:	e9 b6 00 00 00       	jmp    c0027799 <__addsf3+0x14b>
c00276e3:	74 5c                	je     c0027741 <__addsf3+0xf3>
c00276e5:	89 f1                	mov    ecx,esi
c00276e7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00276ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276ed:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00276f1:	75 14                	jne    c0027707 <__addsf3+0xb9>
c00276f3:	85 d2                	test   edx,edx
c00276f5:	0f 84 4c 02 00 00    	je     c0027947 <__addsf3+0x2f9>
c00276fb:	49                   	dec    ecx
c00276fc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00276ff:	0f 84 94 00 00 00    	je     c0027799 <__addsf3+0x14b>
c0027705:	eb 12                	jmp    c0027719 <__addsf3+0xcb>
c0027707:	89 f0                	mov    eax,esi
c0027709:	f7 d0                	not    eax
c002770b:	84 c0                	test   al,al
c002770d:	0f 84 34 02 00 00    	je     c0027947 <__addsf3+0x2f9>
c0027713:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027719:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002771c:	83 f9 1f             	cmp    ecx,0x1f
c002771f:	0f 8f 22 02 00 00    	jg     c0027947 <__addsf3+0x2f9>
c0027725:	89 d7                	mov    edi,edx
c0027727:	d3 ef                	shr    edi,cl
c0027729:	b8 20 00 00 00       	mov    eax,0x20
c002772e:	29 c8                	sub    eax,ecx
c0027730:	89 c1                	mov    ecx,eax
c0027732:	d3 e2                	shl    edx,cl
c0027734:	31 c0                	xor    eax,eax
c0027736:	85 d2                	test   edx,edx
c0027738:	0f 95 c0             	setne  al
c002773b:	09 f8                	or     eax,edi
c002773d:	01 d8                	add    eax,ebx
c002773f:	eb 58                	jmp    c0027799 <__addsf3+0x14b>
c0027741:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027744:	8d 70 01             	lea    esi,[eax+0x1]
c0027747:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002774d:	75 32                	jne    c0027781 <__addsf3+0x133>
c002774f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027753:	75 1f                	jne    c0027774 <__addsf3+0x126>
c0027755:	85 d2                	test   edx,edx
c0027757:	0f 84 e0 01 00 00    	je     c002793d <__addsf3+0x2ef>
c002775d:	85 db                	test   ebx,ebx
c002775f:	0f 84 e2 01 00 00    	je     c0027947 <__addsf3+0x2f9>
c0027765:	89 d0                	mov    eax,edx
c0027767:	01 d8                	add    eax,ebx
c0027769:	0f 89 a9 01 00 00    	jns    c0027918 <__addsf3+0x2ca>
c002776f:	e9 9d 01 00 00       	jmp    c0027911 <__addsf3+0x2c3>
c0027774:	85 d2                	test   edx,edx
c0027776:	0f 85 cb 01 00 00    	jne    c0027947 <__addsf3+0x2f9>
c002777c:	e9 bc 01 00 00       	jmp    c002793d <__addsf3+0x2ef>
c0027781:	31 c0                	xor    eax,eax
c0027783:	89 f1                	mov    ecx,esi
c0027785:	f7 d1                	not    ecx
c0027787:	84 c9                	test   cl,cl
c0027789:	0f 84 90 01 00 00    	je     c002791f <__addsf3+0x2d1>
c002778f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027792:	d1 e8                	shr    eax,1
c0027794:	e9 86 01 00 00       	jmp    c002791f <__addsf3+0x2d1>
c0027799:	85 c0                	test   eax,eax
c002779b:	0f 89 7e 01 00 00    	jns    c002791f <__addsf3+0x2d1>
c00277a1:	46                   	inc    esi
c00277a2:	89 f2                	mov    edx,esi
c00277a4:	f7 d2                	not    edx
c00277a6:	84 d2                	test   dl,dl
c00277a8:	0f 84 6f 01 00 00    	je     c002791d <__addsf3+0x2cf>
c00277ae:	89 c2                	mov    edx,eax
c00277b0:	83 e2 01             	and    edx,0x1
c00277b3:	d1 e8                	shr    eax,1
c00277b5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277ba:	09 d0                	or     eax,edx
c00277bc:	e9 5e 01 00 00       	jmp    c002791f <__addsf3+0x2d1>
c00277c1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00277c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277c8:	89 f0                	mov    eax,esi
c00277ca:	0f b6 c0             	movzx  eax,al
c00277cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277d0:	29 c1                	sub    ecx,eax
c00277d2:	85 c9                	test   ecx,ecx
c00277d4:	7e 55                	jle    c002782b <__addsf3+0x1dd>
c00277d6:	85 c0                	test   eax,eax
c00277d8:	75 11                	jne    c00277eb <__addsf3+0x19d>
c00277da:	85 db                	test   ebx,ebx
c00277dc:	0f 84 65 01 00 00    	je     c0027947 <__addsf3+0x2f9>
c00277e2:	49                   	dec    ecx
c00277e3:	75 19                	jne    c00277fe <__addsf3+0x1b0>
c00277e5:	89 d0                	mov    eax,edx
c00277e7:	29 d8                	sub    eax,ebx
c00277e9:	eb 38                	jmp    c0027823 <__addsf3+0x1d5>
c00277eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00277ee:	f7 d0                	not    eax
c00277f0:	84 c0                	test   al,al
c00277f2:	0f 84 4f 01 00 00    	je     c0027947 <__addsf3+0x2f9>
c00277f8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00277fe:	83 f9 1f             	cmp    ecx,0x1f
c0027801:	0f 8f 40 01 00 00    	jg     c0027947 <__addsf3+0x2f9>
c0027807:	89 de                	mov    esi,ebx
c0027809:	d3 ee                	shr    esi,cl
c002780b:	b8 20 00 00 00       	mov    eax,0x20
c0027810:	29 c8                	sub    eax,ecx
c0027812:	89 c1                	mov    ecx,eax
c0027814:	d3 e3                	shl    ebx,cl
c0027816:	31 c0                	xor    eax,eax
c0027818:	85 db                	test   ebx,ebx
c002781a:	0f 95 c0             	setne  al
c002781d:	09 f0                	or     eax,esi
c002781f:	29 c2                	sub    edx,eax
c0027821:	89 d0                	mov    eax,edx
c0027823:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027826:	e9 af 00 00 00       	jmp    c00278da <__addsf3+0x28c>
c002782b:	74 5c                	je     c0027889 <__addsf3+0x23b>
c002782d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027830:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027833:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027837:	75 14                	jne    c002784d <__addsf3+0x1ff>
c0027839:	85 d2                	test   edx,edx
c002783b:	0f 84 06 01 00 00    	je     c0027947 <__addsf3+0x2f9>
c0027841:	48                   	dec    eax
c0027842:	75 1b                	jne    c002785f <__addsf3+0x211>
c0027844:	89 d8                	mov    eax,ebx
c0027846:	29 d0                	sub    eax,edx
c0027848:	e9 8d 00 00 00       	jmp    c00278da <__addsf3+0x28c>
c002784d:	89 f1                	mov    ecx,esi
c002784f:	f7 d1                	not    ecx
c0027851:	84 c9                	test   cl,cl
c0027853:	0f 84 ee 00 00 00    	je     c0027947 <__addsf3+0x2f9>
c0027859:	81 ca 00 00 00 80    	or     edx,0x80000000
c002785f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027862:	83 f8 1f             	cmp    eax,0x1f
c0027865:	0f 8f dc 00 00 00    	jg     c0027947 <__addsf3+0x2f9>
c002786b:	89 d7                	mov    edi,edx
c002786d:	88 c1                	mov    cl,al
c002786f:	d3 ef                	shr    edi,cl
c0027871:	b9 20 00 00 00       	mov    ecx,0x20
c0027876:	29 c1                	sub    ecx,eax
c0027878:	d3 e2                	shl    edx,cl
c002787a:	31 c0                	xor    eax,eax
c002787c:	85 d2                	test   edx,edx
c002787e:	0f 95 c0             	setne  al
c0027881:	09 f8                	or     eax,edi
c0027883:	29 c3                	sub    ebx,eax
c0027885:	89 d8                	mov    eax,ebx
c0027887:	eb 51                	jmp    c00278da <__addsf3+0x28c>
c0027889:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002788c:	40                   	inc    eax
c002788d:	a8 fe                	test   al,0xfe
c002788f:	75 3d                	jne    c00278ce <__addsf3+0x280>
c0027891:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027895:	0f 85 a7 00 00 00    	jne    c0027942 <__addsf3+0x2f4>
c002789b:	85 d2                	test   edx,edx
c002789d:	75 12                	jne    c00278b1 <__addsf3+0x263>
c002789f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278a2:	85 db                	test   ebx,ebx
c00278a4:	0f 85 9d 00 00 00    	jne    c0027947 <__addsf3+0x2f9>
c00278aa:	31 ff                	xor    edi,edi
c00278ac:	e9 96 00 00 00       	jmp    c0027947 <__addsf3+0x2f9>
c00278b1:	85 db                	test   ebx,ebx
c00278b3:	0f 84 8e 00 00 00    	je     c0027947 <__addsf3+0x2f9>
c00278b9:	89 d0                	mov    eax,edx
c00278bb:	29 d8                	sub    eax,ebx
c00278bd:	79 06                	jns    c00278c5 <__addsf3+0x277>
c00278bf:	89 d8                	mov    eax,ebx
c00278c1:	29 d0                	sub    eax,edx
c00278c3:	eb 5a                	jmp    c002791f <__addsf3+0x2d1>
c00278c5:	bf 00 00 00 00       	mov    edi,0x0
c00278ca:	74 7b                	je     c0027947 <__addsf3+0x2f9>
c00278cc:	eb 4a                	jmp    c0027918 <__addsf3+0x2ca>
c00278ce:	89 d0                	mov    eax,edx
c00278d0:	29 d8                	sub    eax,ebx
c00278d2:	79 12                	jns    c00278e6 <__addsf3+0x298>
c00278d4:	89 d8                	mov    eax,ebx
c00278d6:	29 d0                	sub    eax,edx
c00278d8:	eb 09                	jmp    c00278e3 <__addsf3+0x295>
c00278da:	85 c0                	test   eax,eax
c00278dc:	79 41                	jns    c002791f <__addsf3+0x2d1>
c00278de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00278e3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00278e6:	31 f6                	xor    esi,esi
c00278e8:	85 c0                	test   eax,eax
c00278ea:	74 33                	je     c002791f <__addsf3+0x2d1>
c00278ec:	0f bd c8             	bsr    ecx,eax
c00278ef:	83 f1 1f             	xor    ecx,0x1f
c00278f2:	d3 e0                	shl    eax,cl
c00278f4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00278f8:	39 ca                	cmp    edx,ecx
c00278fa:	7f 10                	jg     c002790c <__addsf3+0x2be>
c00278fc:	29 d1                	sub    ecx,edx
c00278fe:	41                   	inc    ecx
c00278ff:	d3 e8                	shr    eax,cl
c0027901:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027904:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002790a:	eb 13                	jmp    c002791f <__addsf3+0x2d1>
c002790c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002790f:	29 ce                	sub    esi,ecx
c0027911:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027916:	eb 07                	jmp    c002791f <__addsf3+0x2d1>
c0027918:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002791b:	eb 02                	jmp    c002791f <__addsf3+0x2d1>
c002791d:	31 c0                	xor    eax,eax
c002791f:	89 c2                	mov    edx,eax
c0027921:	c1 ea 08             	shr    edx,0x8
c0027924:	a8 7f                	test   al,0x7f
c0027926:	0f 95 c1             	setne  cl
c0027929:	09 d1                	or     ecx,edx
c002792b:	83 e1 01             	and    ecx,0x1
c002792e:	c1 e8 07             	shr    eax,0x7
c0027931:	21 c8                	and    eax,ecx
c0027933:	c1 e6 17             	shl    esi,0x17
c0027936:	09 d6                	or     esi,edx
c0027938:	8d 3c 30             	lea    edi,[eax+esi*1]
c002793b:	eb 0a                	jmp    c0027947 <__addsf3+0x2f9>
c002793d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027940:	eb 05                	jmp    c0027947 <__addsf3+0x2f9>
c0027942:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027947:	89 f8                	mov    eax,edi
c0027949:	5a                   	pop    edx
c002794a:	59                   	pop    ecx
c002794b:	5b                   	pop    ebx
c002794c:	5e                   	pop    esi
c002794d:	5f                   	pop    edi
c002794e:	5d                   	pop    ebp
c002794f:	c3                   	ret    

c0027950 <__subsf3>:
c0027950:	55                   	push   ebp
c0027951:	89 e5                	mov    ebp,esp
c0027953:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027956:	05 00 00 00 80       	add    eax,0x80000000
c002795b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002795e:	5d                   	pop    ebp
c002795f:	e9 ea fc ff ff       	jmp    c002764e <__addsf3>

c0027964 <__negsf2>:
c0027964:	55                   	push   ebp
c0027965:	89 e5                	mov    ebp,esp
c0027967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002796a:	05 00 00 00 80       	add    eax,0x80000000
c002796f:	5d                   	pop    ebp
c0027970:	c3                   	ret    

c0027971 <__mulsf3>:
c0027971:	55                   	push   ebp
c0027972:	89 e5                	mov    ebp,esp
c0027974:	57                   	push   edi
c0027975:	56                   	push   esi
c0027976:	53                   	push   ebx
c0027977:	83 ec 1c             	sub    esp,0x1c
c002797a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002797d:	89 f0                	mov    eax,esi
c002797f:	89 f1                	mov    ecx,esi
c0027981:	c1 f9 17             	sar    ecx,0x17
c0027984:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027987:	c1 e0 08             	shl    eax,0x8
c002798a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002798f:	89 c1                	mov    ecx,eax
c0027991:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027994:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027997:	89 c7                	mov    edi,eax
c0027999:	c1 ff 17             	sar    edi,0x17
c002799c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00279a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00279a3:	89 f8                	mov    eax,edi
c00279a5:	0f b6 c0             	movzx  eax,al
c00279a8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279ab:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00279af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00279b2:	42                   	inc    edx
c00279b3:	80 e2 fe             	and    dl,0xfe
c00279b6:	75 7b                	jne    c0027a33 <__mulsf3+0xc2>
c00279b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279bc:	74 54                	je     c0027a12 <__mulsf3+0xa1>
c00279be:	85 c9                	test   ecx,ecx
c00279c0:	0f 85 64 01 00 00    	jne    c0027b2a <__mulsf3+0x1b9>
c00279c6:	8d 57 01             	lea    edx,[edi+0x1]
c00279c9:	80 e2 fe             	and    dl,0xfe
c00279cc:	75 1f                	jne    c00279ed <__mulsf3+0x7c>
c00279ce:	85 c0                	test   eax,eax
c00279d0:	b8 00 00 00 00       	mov    eax,0x0
c00279d5:	74 29                	je     c0027a00 <__mulsf3+0x8f>
c00279d7:	53                   	push   ebx
c00279d8:	53                   	push   ebx
c00279d9:	50                   	push   eax
c00279da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279dd:	e8 96 05 00 00       	call   c0027f78 <__nesf2>
c00279e2:	83 c4 10             	add    esp,0x10
c00279e5:	85 c0                	test   eax,eax
c00279e7:	0f 85 3a 01 00 00    	jne    c0027b27 <__mulsf3+0x1b6>
c00279ed:	85 ff                	test   edi,edi
c00279ef:	0f 89 35 01 00 00    	jns    c0027b2a <__mulsf3+0x1b9>
c00279f5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00279fb:	e9 2a 01 00 00       	jmp    c0027b2a <__mulsf3+0x1b9>
c0027a00:	51                   	push   ecx
c0027a01:	51                   	push   ecx
c0027a02:	50                   	push   eax
c0027a03:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a06:	e8 6d 05 00 00       	call   c0027f78 <__nesf2>
c0027a0b:	83 c4 10             	add    esp,0x10
c0027a0e:	85 c0                	test   eax,eax
c0027a10:	eb 15                	jmp    c0027a27 <__mulsf3+0xb6>
c0027a12:	85 c9                	test   ecx,ecx
c0027a14:	74 0b                	je     c0027a21 <__mulsf3+0xb0>
c0027a16:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027a19:	01 c9                	add    ecx,ecx
c0027a1b:	78 16                	js     c0027a33 <__mulsf3+0xc2>
c0027a1d:	89 d3                	mov    ebx,edx
c0027a1f:	eb f5                	jmp    c0027a16 <__mulsf3+0xa5>
c0027a21:	89 f8                	mov    eax,edi
c0027a23:	f7 d0                	not    eax
c0027a25:	84 c0                	test   al,al
c0027a27:	75 c4                	jne    c00279ed <__mulsf3+0x7c>
c0027a29:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027a2e:	e9 f7 00 00 00       	jmp    c0027b2a <__mulsf3+0x1b9>
c0027a33:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027a36:	c1 e6 08             	shl    esi,0x8
c0027a39:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027a3f:	8d 57 01             	lea    edx,[edi+0x1]
c0027a42:	80 e2 fe             	and    dl,0xfe
c0027a45:	75 63                	jne    c0027aaa <__mulsf3+0x139>
c0027a47:	85 c0                	test   eax,eax
c0027a49:	74 2f                	je     c0027a7a <__mulsf3+0x109>
c0027a4b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027a4f:	0f 89 d2 00 00 00    	jns    c0027b27 <__mulsf3+0x1b6>
c0027a55:	52                   	push   edx
c0027a56:	52                   	push   edx
c0027a57:	6a 00                	push   0x0
c0027a59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a5c:	e8 dc 04 00 00       	call   c0027f3d <__eqsf2>
c0027a61:	83 c4 10             	add    esp,0x10
c0027a64:	85 c0                	test   eax,eax
c0027a66:	0f 85 bb 00 00 00    	jne    c0027b27 <__mulsf3+0x1b6>
c0027a6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a6f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027a75:	e9 b0 00 00 00       	jmp    c0027b2a <__mulsf3+0x1b9>
c0027a7a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a7d:	50                   	push   eax
c0027a7e:	50                   	push   eax
c0027a7f:	6a 00                	push   0x0
c0027a81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a84:	e8 b4 04 00 00       	call   c0027f3d <__eqsf2>
c0027a89:	83 c4 10             	add    esp,0x10
c0027a8c:	85 c0                	test   eax,eax
c0027a8e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a91:	75 0c                	jne    c0027a9f <__mulsf3+0x12e>
c0027a93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027a97:	0f 89 8a 00 00 00    	jns    c0027b27 <__mulsf3+0x1b6>
c0027a9d:	eb cd                	jmp    c0027a6c <__mulsf3+0xfb>
c0027a9f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027aa2:	01 f6                	add    esi,esi
c0027aa4:	78 04                	js     c0027aaa <__mulsf3+0x139>
c0027aa6:	89 c3                	mov    ebx,eax
c0027aa8:	eb f5                	jmp    c0027a9f <__mulsf3+0x12e>
c0027aaa:	89 c8                	mov    eax,ecx
c0027aac:	0d 00 00 00 80       	or     eax,0x80000000
c0027ab1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ab7:	f7 e6                	mul    esi
c0027ab9:	85 c0                	test   eax,eax
c0027abb:	0f 95 c0             	setne  al
c0027abe:	0f b6 c0             	movzx  eax,al
c0027ac1:	09 c2                	or     edx,eax
c0027ac3:	78 03                	js     c0027ac8 <__mulsf3+0x157>
c0027ac5:	01 d2                	add    edx,edx
c0027ac7:	4b                   	dec    ebx
c0027ac8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027ace:	7f 22                	jg     c0027af2 <__mulsf3+0x181>
c0027ad0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ad6:	85 db                	test   ebx,ebx
c0027ad8:	7f 23                	jg     c0027afd <__mulsf3+0x18c>
c0027ada:	83 fb e9             	cmp    ebx,0xffffffe9
c0027add:	7c 1a                	jl     c0027af9 <__mulsf3+0x188>
c0027adf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ae5:	b9 01 00 00 00       	mov    ecx,0x1
c0027aea:	29 d9                	sub    ecx,ebx
c0027aec:	d3 ea                	shr    edx,cl
c0027aee:	31 db                	xor    ebx,ebx
c0027af0:	eb 0b                	jmp    c0027afd <__mulsf3+0x18c>
c0027af2:	bb ff 00 00 00       	mov    ebx,0xff
c0027af7:	eb 02                	jmp    c0027afb <__mulsf3+0x18a>
c0027af9:	31 db                	xor    ebx,ebx
c0027afb:	31 d2                	xor    edx,edx
c0027afd:	89 d0                	mov    eax,edx
c0027aff:	c1 e8 08             	shr    eax,0x8
c0027b02:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b05:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b0b:	09 fb                	or     ebx,edi
c0027b0d:	c1 e3 17             	shl    ebx,0x17
c0027b10:	09 c3                	or     ebx,eax
c0027b12:	f6 c2 7f             	test   dl,0x7f
c0027b15:	0f 95 c1             	setne  cl
c0027b18:	09 c8                	or     eax,ecx
c0027b1a:	83 e0 01             	and    eax,0x1
c0027b1d:	c1 ea 07             	shr    edx,0x7
c0027b20:	21 c2                	and    edx,eax
c0027b22:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027b25:	eb 03                	jmp    c0027b2a <__mulsf3+0x1b9>
c0027b27:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027b2a:	89 f0                	mov    eax,esi
c0027b2c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b2f:	5b                   	pop    ebx
c0027b30:	5e                   	pop    esi
c0027b31:	5f                   	pop    edi
c0027b32:	5d                   	pop    ebp
c0027b33:	c3                   	ret    

c0027b34 <__divsf3>:
c0027b34:	55                   	push   ebp
c0027b35:	89 e5                	mov    ebp,esp
c0027b37:	57                   	push   edi
c0027b38:	56                   	push   esi
c0027b39:	53                   	push   ebx
c0027b3a:	83 ec 1c             	sub    esp,0x1c
c0027b3d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b40:	89 d8                	mov    eax,ebx
c0027b42:	89 d9                	mov    ecx,ebx
c0027b44:	c1 f9 17             	sar    ecx,0x17
c0027b47:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027b4a:	c1 e0 08             	shl    eax,0x8
c0027b4d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027b52:	89 c1                	mov    ecx,eax
c0027b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b57:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b5a:	89 c7                	mov    edi,eax
c0027b5c:	c1 ff 17             	sar    edi,0x17
c0027b5f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027b63:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027b66:	89 f8                	mov    eax,edi
c0027b68:	0f b6 c0             	movzx  eax,al
c0027b6b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b6e:	29 c6                	sub    esi,eax
c0027b70:	83 c6 7f             	add    esi,0x7f
c0027b73:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027b76:	42                   	inc    edx
c0027b77:	80 e2 fe             	and    dl,0xfe
c0027b7a:	0f 85 9c 00 00 00    	jne    c0027c1c <__divsf3+0xe8>
c0027b80:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027b84:	74 33                	je     c0027bb9 <__divsf3+0x85>
c0027b86:	85 c9                	test   ecx,ecx
c0027b88:	0f 85 c7 01 00 00    	jne    c0027d55 <__divsf3+0x221>
c0027b8e:	8d 57 01             	lea    edx,[edi+0x1]
c0027b91:	80 e2 fe             	and    dl,0xfe
c0027b94:	75 2f                	jne    c0027bc5 <__divsf3+0x91>
c0027b96:	85 c0                	test   eax,eax
c0027b98:	74 2b                	je     c0027bc5 <__divsf3+0x91>
c0027b9a:	51                   	push   ecx
c0027b9b:	51                   	push   ecx
c0027b9c:	6a 00                	push   0x0
c0027b9e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ba1:	e8 d2 03 00 00       	call   c0027f78 <__nesf2>
c0027ba6:	83 c4 10             	add    esp,0x10
c0027ba9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027bac:	85 c0                	test   eax,eax
c0027bae:	0f 85 a1 01 00 00    	jne    c0027d55 <__divsf3+0x221>
c0027bb4:	e9 92 01 00 00       	jmp    c0027d4b <__divsf3+0x217>
c0027bb9:	85 c9                	test   ecx,ecx
c0027bbb:	75 1b                	jne    c0027bd8 <__divsf3+0xa4>
c0027bbd:	8d 57 01             	lea    edx,[edi+0x1]
c0027bc0:	80 e2 fe             	and    dl,0xfe
c0027bc3:	74 1e                	je     c0027be3 <__divsf3+0xaf>
c0027bc5:	85 ff                	test   edi,edi
c0027bc7:	0f 89 88 01 00 00    	jns    c0027d55 <__divsf3+0x221>
c0027bcd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027bd3:	e9 7d 01 00 00       	jmp    c0027d55 <__divsf3+0x221>
c0027bd8:	8d 56 ff             	lea    edx,[esi-0x1]
c0027bdb:	01 c9                	add    ecx,ecx
c0027bdd:	78 3d                	js     c0027c1c <__divsf3+0xe8>
c0027bdf:	89 d6                	mov    esi,edx
c0027be1:	eb f5                	jmp    c0027bd8 <__divsf3+0xa4>
c0027be3:	85 c0                	test   eax,eax
c0027be5:	b8 00 00 00 00       	mov    eax,0x0
c0027bea:	74 18                	je     c0027c04 <__divsf3+0xd0>
c0027bec:	52                   	push   edx
c0027bed:	52                   	push   edx
c0027bee:	50                   	push   eax
c0027bef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bf2:	e8 81 03 00 00       	call   c0027f78 <__nesf2>
c0027bf7:	83 c4 10             	add    esp,0x10
c0027bfa:	85 c0                	test   eax,eax
c0027bfc:	0f 85 50 01 00 00    	jne    c0027d52 <__divsf3+0x21e>
c0027c02:	eb c1                	jmp    c0027bc5 <__divsf3+0x91>
c0027c04:	56                   	push   esi
c0027c05:	56                   	push   esi
c0027c06:	50                   	push   eax
c0027c07:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c0a:	e8 69 03 00 00       	call   c0027f78 <__nesf2>
c0027c0f:	83 c4 10             	add    esp,0x10
c0027c12:	85 c0                	test   eax,eax
c0027c14:	0f 84 31 01 00 00    	je     c0027d4b <__divsf3+0x217>
c0027c1a:	eb a9                	jmp    c0027bc5 <__divsf3+0x91>
c0027c1c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027c1f:	c1 e3 08             	shl    ebx,0x8
c0027c22:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c28:	8d 57 01             	lea    edx,[edi+0x1]
c0027c2b:	80 e2 fe             	and    dl,0xfe
c0027c2e:	75 71                	jne    c0027ca1 <__divsf3+0x16d>
c0027c30:	85 c0                	test   eax,eax
c0027c32:	ba 00 00 00 00       	mov    edx,0x0
c0027c37:	74 2f                	je     c0027c68 <__divsf3+0x134>
c0027c39:	51                   	push   ecx
c0027c3a:	51                   	push   ecx
c0027c3b:	52                   	push   edx
c0027c3c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c3f:	e8 f9 02 00 00       	call   c0027f3d <__eqsf2>
c0027c44:	83 c4 10             	add    esp,0x10
c0027c47:	85 c0                	test   eax,eax
c0027c49:	0f 85 03 01 00 00    	jne    c0027d52 <__divsf3+0x21e>
c0027c4f:	31 d2                	xor    edx,edx
c0027c51:	89 d3                	mov    ebx,edx
c0027c53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c56:	31 f8                	xor    eax,edi
c0027c58:	0f 89 f7 00 00 00    	jns    c0027d55 <__divsf3+0x221>
c0027c5e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027c63:	e9 ed 00 00 00       	jmp    c0027d55 <__divsf3+0x221>
c0027c68:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027c6b:	50                   	push   eax
c0027c6c:	50                   	push   eax
c0027c6d:	52                   	push   edx
c0027c6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c71:	e8 c7 02 00 00       	call   c0027f3d <__eqsf2>
c0027c76:	83 c4 10             	add    esp,0x10
c0027c79:	85 c0                	test   eax,eax
c0027c7b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c7e:	75 16                	jne    c0027c96 <__divsf3+0x162>
c0027c80:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c83:	31 fb                	xor    ebx,edi
c0027c85:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027c8b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027c91:	e9 bf 00 00 00       	jmp    c0027d55 <__divsf3+0x221>
c0027c96:	8d 46 01             	lea    eax,[esi+0x1]
c0027c99:	01 db                	add    ebx,ebx
c0027c9b:	78 04                	js     c0027ca1 <__divsf3+0x16d>
c0027c9d:	89 c6                	mov    esi,eax
c0027c9f:	eb f5                	jmp    c0027c96 <__divsf3+0x162>
c0027ca1:	89 c8                	mov    eax,ecx
c0027ca3:	0d 00 00 00 80       	or     eax,0x80000000
c0027ca8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027cae:	31 d2                	xor    edx,edx
c0027cb0:	39 d8                	cmp    eax,ebx
c0027cb2:	72 07                	jb     c0027cbb <__divsf3+0x187>
c0027cb4:	29 d8                	sub    eax,ebx
c0027cb6:	ba 01 00 00 00       	mov    edx,0x1
c0027cbb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027cc2:	01 d2                	add    edx,edx
c0027cc4:	89 c1                	mov    ecx,eax
c0027cc6:	01 c0                	add    eax,eax
c0027cc8:	85 c9                	test   ecx,ecx
c0027cca:	78 04                	js     c0027cd0 <__divsf3+0x19c>
c0027ccc:	39 c3                	cmp    ebx,eax
c0027cce:	77 05                	ja     c0027cd5 <__divsf3+0x1a1>
c0027cd0:	29 d8                	sub    eax,ebx
c0027cd2:	83 ca 01             	or     edx,0x1
c0027cd5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027cd8:	75 e8                	jne    c0027cc2 <__divsf3+0x18e>
c0027cda:	85 c0                	test   eax,eax
c0027cdc:	0f 95 c0             	setne  al
c0027cdf:	0f b6 c0             	movzx  eax,al
c0027ce2:	c1 e2 06             	shl    edx,0x6
c0027ce5:	09 c2                	or     edx,eax
c0027ce7:	78 03                	js     c0027cec <__divsf3+0x1b8>
c0027ce9:	01 d2                	add    edx,edx
c0027ceb:	4e                   	dec    esi
c0027cec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027cf2:	7f 22                	jg     c0027d16 <__divsf3+0x1e2>
c0027cf4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027cfa:	85 f6                	test   esi,esi
c0027cfc:	7f 23                	jg     c0027d21 <__divsf3+0x1ed>
c0027cfe:	83 fe e9             	cmp    esi,0xffffffe9
c0027d01:	7c 1a                	jl     c0027d1d <__divsf3+0x1e9>
c0027d03:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d09:	b9 01 00 00 00       	mov    ecx,0x1
c0027d0e:	29 f1                	sub    ecx,esi
c0027d10:	d3 ea                	shr    edx,cl
c0027d12:	31 f6                	xor    esi,esi
c0027d14:	eb 0b                	jmp    c0027d21 <__divsf3+0x1ed>
c0027d16:	be ff 00 00 00       	mov    esi,0xff
c0027d1b:	eb 02                	jmp    c0027d1f <__divsf3+0x1eb>
c0027d1d:	31 f6                	xor    esi,esi
c0027d1f:	31 d2                	xor    edx,edx
c0027d21:	89 d0                	mov    eax,edx
c0027d23:	c1 e8 08             	shr    eax,0x8
c0027d26:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027d29:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027d2f:	09 fe                	or     esi,edi
c0027d31:	c1 e6 17             	shl    esi,0x17
c0027d34:	09 c6                	or     esi,eax
c0027d36:	f6 c2 7f             	test   dl,0x7f
c0027d39:	0f 95 c1             	setne  cl
c0027d3c:	09 c8                	or     eax,ecx
c0027d3e:	83 e0 01             	and    eax,0x1
c0027d41:	c1 ea 07             	shr    edx,0x7
c0027d44:	21 c2                	and    edx,eax
c0027d46:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027d49:	eb 0a                	jmp    c0027d55 <__divsf3+0x221>
c0027d4b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027d50:	eb 03                	jmp    c0027d55 <__divsf3+0x221>
c0027d52:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027d55:	89 d8                	mov    eax,ebx
c0027d57:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d5a:	5b                   	pop    ebx
c0027d5b:	5e                   	pop    esi
c0027d5c:	5f                   	pop    edi
c0027d5d:	5d                   	pop    ebp
c0027d5e:	c3                   	ret    

c0027d5f <__floatsisf>:
c0027d5f:	55                   	push   ebp
c0027d60:	89 e5                	mov    ebp,esp
c0027d62:	53                   	push   ebx
c0027d63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d66:	85 d2                	test   edx,edx
c0027d68:	7e 2b                	jle    c0027d95 <__floatsisf+0x36>
c0027d6a:	0f bd ca             	bsr    ecx,edx
c0027d6d:	83 f1 1f             	xor    ecx,0x1f
c0027d70:	d3 e2                	shl    edx,cl
c0027d72:	89 d0                	mov    eax,edx
c0027d74:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d79:	89 c3                	mov    ebx,eax
c0027d7b:	c1 eb 08             	shr    ebx,0x8
c0027d7e:	80 e2 7f             	and    dl,0x7f
c0027d81:	0f 95 c2             	setne  dl
c0027d84:	09 da                	or     edx,ebx
c0027d86:	83 e2 01             	and    edx,0x1
c0027d89:	c1 e8 07             	shr    eax,0x7
c0027d8c:	21 c2                	and    edx,eax
c0027d8e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027d93:	eb 32                	jmp    c0027dc7 <__floatsisf+0x68>
c0027d95:	b8 00 00 00 00       	mov    eax,0x0
c0027d9a:	74 34                	je     c0027dd0 <__floatsisf+0x71>
c0027d9c:	f7 da                	neg    edx
c0027d9e:	0f bd ca             	bsr    ecx,edx
c0027da1:	83 f1 1f             	xor    ecx,0x1f
c0027da4:	d3 e2                	shl    edx,cl
c0027da6:	89 d0                	mov    eax,edx
c0027da8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027dad:	89 c3                	mov    ebx,eax
c0027daf:	c1 eb 08             	shr    ebx,0x8
c0027db2:	80 e2 7f             	and    dl,0x7f
c0027db5:	0f 95 c2             	setne  dl
c0027db8:	09 da                	or     edx,ebx
c0027dba:	83 e2 01             	and    edx,0x1
c0027dbd:	c1 e8 07             	shr    eax,0x7
c0027dc0:	21 c2                	and    edx,eax
c0027dc2:	b8 9e 01 00 00       	mov    eax,0x19e
c0027dc7:	29 c8                	sub    eax,ecx
c0027dc9:	c1 e0 17             	shl    eax,0x17
c0027dcc:	09 d8                	or     eax,ebx
c0027dce:	01 d0                	add    eax,edx
c0027dd0:	5b                   	pop    ebx
c0027dd1:	5d                   	pop    ebp
c0027dd2:	c3                   	ret    

c0027dd3 <__floatunsisf>:
c0027dd3:	55                   	push   ebp
c0027dd4:	89 e5                	mov    ebp,esp
c0027dd6:	53                   	push   ebx
c0027dd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027dda:	31 c0                	xor    eax,eax
c0027ddc:	85 d2                	test   edx,edx
c0027dde:	74 32                	je     c0027e12 <__floatunsisf+0x3f>
c0027de0:	0f bd ca             	bsr    ecx,edx
c0027de3:	83 f1 1f             	xor    ecx,0x1f
c0027de6:	d3 e2                	shl    edx,cl
c0027de8:	89 d0                	mov    eax,edx
c0027dea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027def:	89 c3                	mov    ebx,eax
c0027df1:	c1 eb 08             	shr    ebx,0x8
c0027df4:	80 e2 7f             	and    dl,0x7f
c0027df7:	0f 95 c2             	setne  dl
c0027dfa:	09 da                	or     edx,ebx
c0027dfc:	83 e2 01             	and    edx,0x1
c0027dff:	c1 e8 07             	shr    eax,0x7
c0027e02:	21 c2                	and    edx,eax
c0027e04:	b8 9e 00 00 00       	mov    eax,0x9e
c0027e09:	29 c8                	sub    eax,ecx
c0027e0b:	c1 e0 17             	shl    eax,0x17
c0027e0e:	09 d8                	or     eax,ebx
c0027e10:	01 d0                	add    eax,edx
c0027e12:	5b                   	pop    ebx
c0027e13:	5d                   	pop    ebp
c0027e14:	c3                   	ret    

c0027e15 <__fixsfsi>:
c0027e15:	55                   	push   ebp
c0027e16:	89 e5                	mov    ebp,esp
c0027e18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e1b:	89 d1                	mov    ecx,edx
c0027e1d:	c1 e1 08             	shl    ecx,0x8
c0027e20:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027e26:	c1 fa 17             	sar    edx,0x17
c0027e29:	78 1c                	js     c0027e47 <__fixsfsi+0x32>
c0027e2b:	83 ea 7f             	sub    edx,0x7f
c0027e2e:	31 c0                	xor    eax,eax
c0027e30:	83 fa 1e             	cmp    edx,0x1e
c0027e33:	77 40                	ja     c0027e75 <__fixsfsi+0x60>
c0027e35:	89 c8                	mov    eax,ecx
c0027e37:	0d 00 00 00 80       	or     eax,0x80000000
c0027e3c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e41:	29 d1                	sub    ecx,edx
c0027e43:	d3 e8                	shr    eax,cl
c0027e45:	eb 2e                	jmp    c0027e75 <__fixsfsi+0x60>
c0027e47:	31 c0                	xor    eax,eax
c0027e49:	81 c2 81 00 00 00    	add    edx,0x81
c0027e4f:	78 24                	js     c0027e75 <__fixsfsi+0x60>
c0027e51:	83 fa 1e             	cmp    edx,0x1e
c0027e54:	7e 09                	jle    c0027e5f <__fixsfsi+0x4a>
c0027e56:	83 fa 1f             	cmp    edx,0x1f
c0027e59:	75 18                	jne    c0027e73 <__fixsfsi+0x5e>
c0027e5b:	85 c9                	test   ecx,ecx
c0027e5d:	75 14                	jne    c0027e73 <__fixsfsi+0x5e>
c0027e5f:	89 c8                	mov    eax,ecx
c0027e61:	0d 00 00 00 80       	or     eax,0x80000000
c0027e66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e6b:	29 d1                	sub    ecx,edx
c0027e6d:	d3 e8                	shr    eax,cl
c0027e6f:	f7 d8                	neg    eax
c0027e71:	eb 02                	jmp    c0027e75 <__fixsfsi+0x60>
c0027e73:	31 c0                	xor    eax,eax
c0027e75:	5d                   	pop    ebp
c0027e76:	c3                   	ret    

c0027e77 <__fixunssfsi>:
c0027e77:	55                   	push   ebp
c0027e78:	89 e5                	mov    ebp,esp
c0027e7a:	53                   	push   ebx
c0027e7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e7e:	89 d3                	mov    ebx,edx
c0027e80:	c1 fb 17             	sar    ebx,0x17
c0027e83:	83 eb 7f             	sub    ebx,0x7f
c0027e86:	31 c0                	xor    eax,eax
c0027e88:	83 fb 1f             	cmp    ebx,0x1f
c0027e8b:	77 18                	ja     c0027ea5 <__fixunssfsi+0x2e>
c0027e8d:	89 d0                	mov    eax,edx
c0027e8f:	c1 e0 08             	shl    eax,0x8
c0027e92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027e97:	0d 00 00 00 80       	or     eax,0x80000000
c0027e9c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ea1:	29 d9                	sub    ecx,ebx
c0027ea3:	d3 e8                	shr    eax,cl
c0027ea5:	5b                   	pop    ebx
c0027ea6:	5d                   	pop    ebp
c0027ea7:	c3                   	ret    

c0027ea8 <__cmpsf2>:
c0027ea8:	55                   	push   ebp
c0027ea9:	89 e5                	mov    ebp,esp
c0027eab:	57                   	push   edi
c0027eac:	56                   	push   esi
c0027ead:	53                   	push   ebx
c0027eae:	83 ec 24             	sub    esp,0x24
c0027eb1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027eb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027eb7:	e8 4f 10 00 00       	call   c0028f0b <__truncdfsf2>
c0027ebc:	5a                   	pop    edx
c0027ebd:	59                   	pop    ecx
c0027ebe:	89 c3                	mov    ebx,eax
c0027ec0:	c1 e8 17             	shr    eax,0x17
c0027ec3:	0f b6 f0             	movzx  esi,al
c0027ec6:	89 d8                	mov    eax,ebx
c0027ec8:	c1 e8 1f             	shr    eax,0x1f
c0027ecb:	31 c6                	xor    esi,eax
c0027ecd:	c1 e3 08             	shl    ebx,0x8
c0027ed0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027ed3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027ed6:	e8 30 10 00 00       	call   c0028f0b <__truncdfsf2>
c0027edb:	83 c4 10             	add    esp,0x10
c0027ede:	89 c1                	mov    ecx,eax
c0027ee0:	c1 e9 17             	shr    ecx,0x17
c0027ee3:	0f b6 c9             	movzx  ecx,cl
c0027ee6:	89 c7                	mov    edi,eax
c0027ee8:	c1 ef 1f             	shr    edi,0x1f
c0027eeb:	89 ca                	mov    edx,ecx
c0027eed:	31 fa                	xor    edx,edi
c0027eef:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ef2:	c1 e0 08             	shl    eax,0x8
c0027ef5:	89 c2                	mov    edx,eax
c0027ef7:	89 d8                	mov    eax,ebx
c0027ef9:	09 d0                	or     eax,edx
c0027efb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027f00:	09 f0                	or     eax,esi
c0027f02:	75 08                	jne    c0027f0c <__cmpsf2+0x64>
c0027f04:	31 c0                	xor    eax,eax
c0027f06:	39 f9                	cmp    ecx,edi
c0027f08:	75 0c                	jne    c0027f16 <__cmpsf2+0x6e>
c0027f0a:	eb 29                	jmp    c0027f35 <__cmpsf2+0x8d>
c0027f0c:	b8 01 00 00 00       	mov    eax,0x1
c0027f11:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f14:	7f 1f                	jg     c0027f35 <__cmpsf2+0x8d>
c0027f16:	83 c8 ff             	or     eax,0xffffffff
c0027f19:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f1c:	7c 17                	jl     c0027f35 <__cmpsf2+0x8d>
c0027f1e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027f24:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027f2a:	b8 01 00 00 00       	mov    eax,0x1
c0027f2f:	39 d3                	cmp    ebx,edx
c0027f31:	77 02                	ja     c0027f35 <__cmpsf2+0x8d>
c0027f33:	19 c0                	sbb    eax,eax
c0027f35:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f38:	5b                   	pop    ebx
c0027f39:	5e                   	pop    esi
c0027f3a:	5f                   	pop    edi
c0027f3b:	5d                   	pop    ebp
c0027f3c:	c3                   	ret    

c0027f3d <__eqsf2>:
c0027f3d:	55                   	push   ebp
c0027f3e:	89 e5                	mov    ebp,esp
c0027f40:	83 ec 24             	sub    esp,0x24
c0027f43:	6a 01                	push   0x1
c0027f45:	83 ec 0c             	sub    esp,0xc
c0027f48:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f4b:	e8 df 10 00 00       	call   c002902f <__extendsfdf2>
c0027f50:	83 c4 10             	add    esp,0x10
c0027f53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027f56:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027f59:	52                   	push   edx
c0027f5a:	50                   	push   eax
c0027f5b:	50                   	push   eax
c0027f5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027f5f:	e8 cb 10 00 00       	call   c002902f <__extendsfdf2>
c0027f64:	59                   	pop    ecx
c0027f65:	59                   	pop    ecx
c0027f66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027f69:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027f6c:	52                   	push   edx
c0027f6d:	50                   	push   eax
c0027f6e:	e8 35 ff ff ff       	call   c0027ea8 <__cmpsf2>
c0027f73:	83 c4 20             	add    esp,0x20
c0027f76:	c9                   	leave  
c0027f77:	c3                   	ret    

c0027f78 <__nesf2>:
c0027f78:	eb c3                	jmp    c0027f3d <__eqsf2>

c0027f7a <__gtsf2>:
c0027f7a:	55                   	push   ebp
c0027f7b:	89 e5                	mov    ebp,esp
c0027f7d:	83 ec 24             	sub    esp,0x24
c0027f80:	6a ff                	push   0xffffffff
c0027f82:	83 ec 0c             	sub    esp,0xc
c0027f85:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f88:	e8 a2 10 00 00       	call   c002902f <__extendsfdf2>
c0027f8d:	83 c4 10             	add    esp,0x10
c0027f90:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027f93:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027f96:	52                   	push   edx
c0027f97:	50                   	push   eax
c0027f98:	50                   	push   eax
c0027f99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027f9c:	e8 8e 10 00 00       	call   c002902f <__extendsfdf2>
c0027fa1:	59                   	pop    ecx
c0027fa2:	59                   	pop    ecx
c0027fa3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fa6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fa9:	52                   	push   edx
c0027faa:	50                   	push   eax
c0027fab:	e8 f8 fe ff ff       	call   c0027ea8 <__cmpsf2>
c0027fb0:	83 c4 20             	add    esp,0x20
c0027fb3:	c9                   	leave  
c0027fb4:	c3                   	ret    

c0027fb5 <__gesf2>:
c0027fb5:	eb c3                	jmp    c0027f7a <__gtsf2>

c0027fb7 <__ltsf2>:
c0027fb7:	eb 84                	jmp    c0027f3d <__eqsf2>

c0027fb9 <__lesf2>:
c0027fb9:	eb 82                	jmp    c0027f3d <__eqsf2>

c0027fbb <__adddf3>:
c0027fbb:	55                   	push   ebp
c0027fbc:	89 e5                	mov    ebp,esp
c0027fbe:	57                   	push   edi
c0027fbf:	56                   	push   esi
c0027fc0:	53                   	push   ebx
c0027fc1:	83 ec 24             	sub    esp,0x24
c0027fc4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027fc7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fcd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fd0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027fd3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027fd6:	89 c8                	mov    eax,ecx
c0027fd8:	89 ce                	mov    esi,ecx
c0027fda:	c1 fe 14             	sar    esi,0x14
c0027fdd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027fe0:	89 fb                	mov    ebx,edi
c0027fe2:	89 fa                	mov    edx,edi
c0027fe4:	c1 e2 0b             	shl    edx,0xb
c0027fe7:	c1 e0 0b             	shl    eax,0xb
c0027fea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fef:	c1 eb 15             	shr    ebx,0x15
c0027ff2:	09 d8                	or     eax,ebx
c0027ff4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ff7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027ffa:	c1 fe 14             	sar    esi,0x14
c0027ffd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028000:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028003:	89 f3                	mov    ebx,esi
c0028005:	c1 e3 0b             	shl    ebx,0xb
c0028008:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002800b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002800e:	c1 e3 0b             	shl    ebx,0xb
c0028011:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0028017:	c1 ee 15             	shr    esi,0x15
c002801a:	09 f3                	or     ebx,esi
c002801c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002801f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0028022:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0028025:	0f 88 5f 02 00 00    	js     c002828a <__adddf3+0x2cf>
c002802b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002802e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0028031:	85 db                	test   ebx,ebx
c0028033:	0f 8e c7 00 00 00    	jle    c0028100 <__adddf3+0x145>
c0028039:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028040:	75 1a                	jne    c002805c <__adddf3+0xa1>
c0028042:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028045:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028048:	0f 84 b2 05 00 00    	je     c0028600 <__adddf3+0x645>
c002804e:	4b                   	dec    ebx
c002804f:	75 23                	jne    c0028074 <__adddf3+0xb9>
c0028051:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028054:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028057:	e9 99 00 00 00       	jmp    c00280f5 <__adddf3+0x13a>
c002805c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002805f:	f7 d6                	not    esi
c0028061:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028067:	0f 84 93 05 00 00    	je     c0028600 <__adddf3+0x645>
c002806d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0028074:	83 fb 1f             	cmp    ebx,0x1f
c0028077:	7e 42                	jle    c00280bb <__adddf3+0x100>
c0028079:	83 fb 3f             	cmp    ebx,0x3f
c002807c:	0f 8f 7e 05 00 00    	jg     c0028600 <__adddf3+0x645>
c0028082:	83 e3 1f             	and    ebx,0x1f
c0028085:	89 d9                	mov    ecx,ebx
c0028087:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002808a:	d3 ef                	shr    edi,cl
c002808c:	31 db                	xor    ebx,ebx
c002808e:	85 c9                	test   ecx,ecx
c0028090:	74 15                	je     c00280a7 <__adddf3+0xec>
c0028092:	be 20 00 00 00       	mov    esi,0x20
c0028097:	29 ce                	sub    esi,ecx
c0028099:	89 f1                	mov    ecx,esi
c002809b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002809e:	d3 e6                	shl    esi,cl
c00280a0:	31 db                	xor    ebx,ebx
c00280a2:	85 f6                	test   esi,esi
c00280a4:	0f 95 c3             	setne  bl
c00280a7:	31 c9                	xor    ecx,ecx
c00280a9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280ad:	0f 95 c1             	setne  cl
c00280b0:	09 cf                	or     edi,ecx
c00280b2:	09 fb                	or     ebx,edi
c00280b4:	01 da                	add    edx,ebx
c00280b6:	83 d0 00             	adc    eax,0x0
c00280b9:	eb 3a                	jmp    c00280f5 <__adddf3+0x13a>
c00280bb:	bf 20 00 00 00       	mov    edi,0x20
c00280c0:	29 df                	sub    edi,ebx
c00280c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280c8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280cb:	d3 e6                	shl    esi,cl
c00280cd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280d0:	88 d9                	mov    cl,bl
c00280d2:	d3 ef                	shr    edi,cl
c00280d4:	09 fe                	or     esi,edi
c00280d6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280d9:	88 d9                	mov    cl,bl
c00280db:	d3 ef                	shr    edi,cl
c00280dd:	89 fb                	mov    ebx,edi
c00280df:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280e2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280e5:	d3 e7                	shl    edi,cl
c00280e7:	85 ff                	test   edi,edi
c00280e9:	0f 95 c1             	setne  cl
c00280ec:	0f b6 c9             	movzx  ecx,cl
c00280ef:	09 ce                	or     esi,ecx
c00280f1:	01 f2                	add    edx,esi
c00280f3:	11 d8                	adc    eax,ebx
c00280f5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280f8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280fb:	e9 52 01 00 00       	jmp    c0028252 <__adddf3+0x297>
c0028100:	0f 84 d5 00 00 00    	je     c00281db <__adddf3+0x220>
c0028106:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028109:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002810c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002810f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028112:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028119:	75 20                	jne    c002813b <__adddf3+0x180>
c002811b:	89 d6                	mov    esi,edx
c002811d:	09 c6                	or     esi,eax
c002811f:	0f 84 db 04 00 00    	je     c0028600 <__adddf3+0x645>
c0028125:	4b                   	dec    ebx
c0028126:	75 29                	jne    c0028151 <__adddf3+0x196>
c0028128:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002812b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002812e:	01 d1                	add    ecx,edx
c0028130:	11 c6                	adc    esi,eax
c0028132:	89 f0                	mov    eax,esi
c0028134:	89 ca                	mov    edx,ecx
c0028136:	e9 17 01 00 00       	jmp    c0028252 <__adddf3+0x297>
c002813b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002813e:	f7 d6                	not    esi
c0028140:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028146:	0f 84 b4 04 00 00    	je     c0028600 <__adddf3+0x645>
c002814c:	0d 00 00 00 80       	or     eax,0x80000000
c0028151:	83 fb 1f             	cmp    ebx,0x1f
c0028154:	7e 48                	jle    c002819e <__adddf3+0x1e3>
c0028156:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028159:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002815c:	83 fb 3f             	cmp    ebx,0x3f
c002815f:	0f 8f 9b 04 00 00    	jg     c0028600 <__adddf3+0x645>
c0028165:	83 e3 1f             	and    ebx,0x1f
c0028168:	89 d9                	mov    ecx,ebx
c002816a:	89 c7                	mov    edi,eax
c002816c:	d3 ef                	shr    edi,cl
c002816e:	31 db                	xor    ebx,ebx
c0028170:	85 c9                	test   ecx,ecx
c0028172:	74 12                	je     c0028186 <__adddf3+0x1cb>
c0028174:	be 20 00 00 00       	mov    esi,0x20
c0028179:	29 ce                	sub    esi,ecx
c002817b:	89 f1                	mov    ecx,esi
c002817d:	d3 e0                	shl    eax,cl
c002817f:	31 db                	xor    ebx,ebx
c0028181:	85 c0                	test   eax,eax
c0028183:	0f 95 c3             	setne  bl
c0028186:	31 c0                	xor    eax,eax
c0028188:	85 d2                	test   edx,edx
c002818a:	0f 95 c0             	setne  al
c002818d:	09 c7                	or     edi,eax
c002818f:	09 fb                	or     ebx,edi
c0028191:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028194:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028197:	01 da                	add    edx,ebx
c0028199:	83 d6 00             	adc    esi,0x0
c002819c:	eb 39                	jmp    c00281d7 <__adddf3+0x21c>
c002819e:	be 20 00 00 00       	mov    esi,0x20
c00281a3:	29 de                	sub    esi,ebx
c00281a5:	89 c7                	mov    edi,eax
c00281a7:	89 f1                	mov    ecx,esi
c00281a9:	d3 e7                	shl    edi,cl
c00281ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281ae:	89 d7                	mov    edi,edx
c00281b0:	88 d9                	mov    cl,bl
c00281b2:	d3 ef                	shr    edi,cl
c00281b4:	89 f9                	mov    ecx,edi
c00281b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281b9:	09 cf                	or     edi,ecx
c00281bb:	88 d9                	mov    cl,bl
c00281bd:	d3 e8                	shr    eax,cl
c00281bf:	89 f1                	mov    ecx,esi
c00281c1:	d3 e2                	shl    edx,cl
c00281c3:	85 d2                	test   edx,edx
c00281c5:	0f 95 c2             	setne  dl
c00281c8:	0f b6 d2             	movzx  edx,dl
c00281cb:	09 d7                	or     edi,edx
c00281cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281d3:	01 fa                	add    edx,edi
c00281d5:	11 c6                	adc    esi,eax
c00281d7:	89 f0                	mov    eax,esi
c00281d9:	eb 77                	jmp    c0028252 <__adddf3+0x297>
c00281db:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281de:	46                   	inc    esi
c00281df:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00281e2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00281e8:	75 41                	jne    c002822b <__adddf3+0x270>
c00281ea:	89 d3                	mov    ebx,edx
c00281ec:	09 c3                	or     ebx,eax
c00281ee:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00281f5:	75 27                	jne    c002821e <__adddf3+0x263>
c00281f7:	85 db                	test   ebx,ebx
c00281f9:	0f 84 fb 03 00 00    	je     c00285fa <__adddf3+0x63f>
c00281ff:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028202:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028205:	0f 84 f5 03 00 00    	je     c0028600 <__adddf3+0x645>
c002820b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002820e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028211:	85 c0                	test   eax,eax
c0028213:	0f 89 91 03 00 00    	jns    c00285aa <__adddf3+0x5ef>
c0028219:	e9 85 03 00 00       	jmp    c00285a3 <__adddf3+0x5e8>
c002821e:	85 db                	test   ebx,ebx
c0028220:	0f 85 da 03 00 00    	jne    c0028600 <__adddf3+0x645>
c0028226:	e9 cf 03 00 00       	jmp    c00285fa <__adddf3+0x63f>
c002822b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002822e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028231:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028234:	f7 d1                	not    ecx
c0028236:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002823c:	0f 84 70 03 00 00    	je     c00285b2 <__adddf3+0x5f7>
c0028242:	d1 ea                	shr    edx,1
c0028244:	89 c1                	mov    ecx,eax
c0028246:	c1 e1 1f             	shl    ecx,0x1f
c0028249:	09 ca                	or     edx,ecx
c002824b:	d1 e8                	shr    eax,1
c002824d:	e9 6f 03 00 00       	jmp    c00285c1 <__adddf3+0x606>
c0028252:	85 c0                	test   eax,eax
c0028254:	0f 89 67 03 00 00    	jns    c00285c1 <__adddf3+0x606>
c002825a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002825d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028260:	f7 d1                	not    ecx
c0028262:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028268:	0f 84 44 03 00 00    	je     c00285b2 <__adddf3+0x5f7>
c002826e:	89 d1                	mov    ecx,edx
c0028270:	d1 e9                	shr    ecx,1
c0028272:	83 e2 01             	and    edx,0x1
c0028275:	09 ca                	or     edx,ecx
c0028277:	89 c1                	mov    ecx,eax
c0028279:	c1 e1 1f             	shl    ecx,0x1f
c002827c:	09 ca                	or     edx,ecx
c002827e:	d1 e8                	shr    eax,1
c0028280:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028285:	e9 37 03 00 00       	jmp    c00285c1 <__adddf3+0x606>
c002828a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002828d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028293:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028296:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028299:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002829f:	29 de                	sub    esi,ebx
c00282a1:	85 f6                	test   esi,esi
c00282a3:	0f 8e bd 00 00 00    	jle    c0028366 <__adddf3+0x3ab>
c00282a9:	85 db                	test   ebx,ebx
c00282ab:	75 17                	jne    c00282c4 <__adddf3+0x309>
c00282ad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00282b0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282b3:	0f 84 47 03 00 00    	je     c0028600 <__adddf3+0x645>
c00282b9:	4e                   	dec    esi
c00282ba:	75 20                	jne    c00282dc <__adddf3+0x321>
c00282bc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00282bf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00282c2:	eb 5b                	jmp    c002831f <__adddf3+0x364>
c00282c4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282c7:	f7 d3                	not    ebx
c00282c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282cf:	0f 84 2b 03 00 00    	je     c0028600 <__adddf3+0x645>
c00282d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00282dc:	83 fe 1f             	cmp    esi,0x1f
c00282df:	7e 49                	jle    c002832a <__adddf3+0x36f>
c00282e1:	83 fe 3f             	cmp    esi,0x3f
c00282e4:	0f 8f 16 03 00 00    	jg     c0028600 <__adddf3+0x645>
c00282ea:	83 e6 1f             	and    esi,0x1f
c00282ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00282f0:	89 f1                	mov    ecx,esi
c00282f2:	d3 ef                	shr    edi,cl
c00282f4:	31 db                	xor    ebx,ebx
c00282f6:	85 f6                	test   esi,esi
c00282f8:	74 13                	je     c002830d <__adddf3+0x352>
c00282fa:	b9 20 00 00 00       	mov    ecx,0x20
c00282ff:	29 f1                	sub    ecx,esi
c0028301:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028304:	d3 e6                	shl    esi,cl
c0028306:	31 db                	xor    ebx,ebx
c0028308:	85 f6                	test   esi,esi
c002830a:	0f 95 c3             	setne  bl
c002830d:	31 c9                	xor    ecx,ecx
c002830f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028313:	0f 95 c1             	setne  cl
c0028316:	09 cf                	or     edi,ecx
c0028318:	09 fb                	or     ebx,edi
c002831a:	29 da                	sub    edx,ebx
c002831c:	83 d8 00             	sbb    eax,0x0
c002831f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028322:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028325:	e9 aa 01 00 00       	jmp    c00284d4 <__adddf3+0x519>
c002832a:	bf 20 00 00 00       	mov    edi,0x20
c002832f:	29 f7                	sub    edi,esi
c0028331:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028334:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028337:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002833a:	d3 e3                	shl    ebx,cl
c002833c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002833f:	89 f1                	mov    ecx,esi
c0028341:	d3 ef                	shr    edi,cl
c0028343:	09 fb                	or     ebx,edi
c0028345:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028348:	89 f1                	mov    ecx,esi
c002834a:	d3 ef                	shr    edi,cl
c002834c:	89 fe                	mov    esi,edi
c002834e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028351:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028354:	d3 e7                	shl    edi,cl
c0028356:	85 ff                	test   edi,edi
c0028358:	0f 95 c1             	setne  cl
c002835b:	0f b6 c9             	movzx  ecx,cl
c002835e:	09 cb                	or     ebx,ecx
c0028360:	29 da                	sub    edx,ebx
c0028362:	19 f0                	sbb    eax,esi
c0028364:	eb b9                	jmp    c002831f <__adddf3+0x364>
c0028366:	0f 84 cd 00 00 00    	je     c0028439 <__adddf3+0x47e>
c002836c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002836f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028372:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028375:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028379:	75 1b                	jne    c0028396 <__adddf3+0x3db>
c002837b:	89 d6                	mov    esi,edx
c002837d:	09 c6                	or     esi,eax
c002837f:	0f 84 7b 02 00 00    	je     c0028600 <__adddf3+0x645>
c0028385:	4b                   	dec    ebx
c0028386:	75 24                	jne    c00283ac <__adddf3+0x3f1>
c0028388:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002838b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002838e:	29 d1                	sub    ecx,edx
c0028390:	19 c6                	sbb    esi,eax
c0028392:	89 ca                	mov    edx,ecx
c0028394:	eb 61                	jmp    c00283f7 <__adddf3+0x43c>
c0028396:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028399:	f7 d6                	not    esi
c002839b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283a1:	0f 84 59 02 00 00    	je     c0028600 <__adddf3+0x645>
c00283a7:	0d 00 00 00 80       	or     eax,0x80000000
c00283ac:	83 fb 1f             	cmp    ebx,0x1f
c00283af:	7e 4d                	jle    c00283fe <__adddf3+0x443>
c00283b1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283b4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283b7:	83 fb 3f             	cmp    ebx,0x3f
c00283ba:	0f 8f 40 02 00 00    	jg     c0028600 <__adddf3+0x645>
c00283c0:	83 e3 1f             	and    ebx,0x1f
c00283c3:	89 d9                	mov    ecx,ebx
c00283c5:	89 c7                	mov    edi,eax
c00283c7:	d3 ef                	shr    edi,cl
c00283c9:	31 db                	xor    ebx,ebx
c00283cb:	85 c9                	test   ecx,ecx
c00283cd:	74 12                	je     c00283e1 <__adddf3+0x426>
c00283cf:	be 20 00 00 00       	mov    esi,0x20
c00283d4:	29 ce                	sub    esi,ecx
c00283d6:	89 f1                	mov    ecx,esi
c00283d8:	d3 e0                	shl    eax,cl
c00283da:	31 db                	xor    ebx,ebx
c00283dc:	85 c0                	test   eax,eax
c00283de:	0f 95 c3             	setne  bl
c00283e1:	31 c0                	xor    eax,eax
c00283e3:	85 d2                	test   edx,edx
c00283e5:	0f 95 c0             	setne  al
c00283e8:	09 c7                	or     edi,eax
c00283ea:	09 fb                	or     ebx,edi
c00283ec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283ef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00283f2:	29 da                	sub    edx,ebx
c00283f4:	83 de 00             	sbb    esi,0x0
c00283f7:	89 f0                	mov    eax,esi
c00283f9:	e9 d6 00 00 00       	jmp    c00284d4 <__adddf3+0x519>
c00283fe:	be 20 00 00 00       	mov    esi,0x20
c0028403:	29 de                	sub    esi,ebx
c0028405:	89 c7                	mov    edi,eax
c0028407:	89 f1                	mov    ecx,esi
c0028409:	d3 e7                	shl    edi,cl
c002840b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002840e:	89 d7                	mov    edi,edx
c0028410:	88 d9                	mov    cl,bl
c0028412:	d3 ef                	shr    edi,cl
c0028414:	89 f9                	mov    ecx,edi
c0028416:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028419:	09 cf                	or     edi,ecx
c002841b:	88 d9                	mov    cl,bl
c002841d:	d3 e8                	shr    eax,cl
c002841f:	89 f1                	mov    ecx,esi
c0028421:	d3 e2                	shl    edx,cl
c0028423:	85 d2                	test   edx,edx
c0028425:	0f 95 c2             	setne  dl
c0028428:	0f b6 d2             	movzx  edx,dl
c002842b:	09 d7                	or     edi,edx
c002842d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028430:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028433:	29 fa                	sub    edx,edi
c0028435:	19 c6                	sbb    esi,eax
c0028437:	eb be                	jmp    c00283f7 <__adddf3+0x43c>
c0028439:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002843c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002843f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028445:	75 6a                	jne    c00284b1 <__adddf3+0x4f6>
c0028447:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002844b:	75 58                	jne    c00284a5 <__adddf3+0x4ea>
c002844d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028450:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028453:	89 d6                	mov    esi,edx
c0028455:	09 c6                	or     esi,eax
c0028457:	75 17                	jne    c0028470 <__adddf3+0x4b5>
c0028459:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002845c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002845f:	85 db                	test   ebx,ebx
c0028461:	0f 85 99 01 00 00    	jne    c0028600 <__adddf3+0x645>
c0028467:	31 ff                	xor    edi,edi
c0028469:	31 c9                	xor    ecx,ecx
c002846b:	e9 90 01 00 00       	jmp    c0028600 <__adddf3+0x645>
c0028470:	85 db                	test   ebx,ebx
c0028472:	0f 84 88 01 00 00    	je     c0028600 <__adddf3+0x645>
c0028478:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002847b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002847e:	85 c0                	test   eax,eax
c0028480:	79 10                	jns    c0028492 <__adddf3+0x4d7>
c0028482:	31 c9                	xor    ecx,ecx
c0028484:	f7 da                	neg    edx
c0028486:	0f 95 c1             	setne  cl
c0028489:	01 c8                	add    eax,ecx
c002848b:	f7 d8                	neg    eax
c002848d:	e9 2f 01 00 00       	jmp    c00285c1 <__adddf3+0x606>
c0028492:	31 ff                	xor    edi,edi
c0028494:	31 c9                	xor    ecx,ecx
c0028496:	89 c3                	mov    ebx,eax
c0028498:	09 d3                	or     ebx,edx
c002849a:	0f 84 60 01 00 00    	je     c0028600 <__adddf3+0x645>
c00284a0:	e9 05 01 00 00       	jmp    c00285aa <__adddf3+0x5ef>
c00284a5:	31 ff                	xor    edi,edi
c00284a7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00284ac:	e9 4f 01 00 00       	jmp    c0028600 <__adddf3+0x645>
c00284b1:	89 c1                	mov    ecx,eax
c00284b3:	89 d0                	mov    eax,edx
c00284b5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00284b8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00284bb:	89 ca                	mov    edx,ecx
c00284bd:	85 c9                	test   ecx,ecx
c00284bf:	79 2c                	jns    c00284ed <__adddf3+0x532>
c00284c1:	31 c9                	xor    ecx,ecx
c00284c3:	f7 d8                	neg    eax
c00284c5:	0f 95 c1             	setne  cl
c00284c8:	01 ca                	add    edx,ecx
c00284ca:	f7 da                	neg    edx
c00284cc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00284cf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00284d2:	eb 19                	jmp    c00284ed <__adddf3+0x532>
c00284d4:	85 c0                	test   eax,eax
c00284d6:	0f 89 e5 00 00 00    	jns    c00285c1 <__adddf3+0x606>
c00284dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00284e1:	89 c1                	mov    ecx,eax
c00284e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00284e9:	89 d0                	mov    eax,edx
c00284eb:	89 ca                	mov    edx,ecx
c00284ed:	85 d2                	test   edx,edx
c00284ef:	74 59                	je     c002854a <__adddf3+0x58f>
c00284f1:	0f bd da             	bsr    ebx,edx
c00284f4:	83 f3 1f             	xor    ebx,0x1f
c00284f7:	88 d9                	mov    cl,bl
c00284f9:	d3 e2                	shl    edx,cl
c00284fb:	bf 20 00 00 00       	mov    edi,0x20
c0028500:	89 f9                	mov    ecx,edi
c0028502:	29 d9                	sub    ecx,ebx
c0028504:	89 c6                	mov    esi,eax
c0028506:	d3 ee                	shr    esi,cl
c0028508:	09 d6                	or     esi,edx
c002850a:	88 d9                	mov    cl,bl
c002850c:	d3 e0                	shl    eax,cl
c002850e:	89 c2                	mov    edx,eax
c0028510:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028513:	25 ff 07 00 00       	and    eax,0x7ff
c0028518:	39 d8                	cmp    eax,ebx
c002851a:	7f 22                	jg     c002853e <__adddf3+0x583>
c002851c:	29 c3                	sub    ebx,eax
c002851e:	43                   	inc    ebx
c002851f:	88 d9                	mov    cl,bl
c0028521:	d3 ea                	shr    edx,cl
c0028523:	29 df                	sub    edi,ebx
c0028525:	89 f9                	mov    ecx,edi
c0028527:	89 f0                	mov    eax,esi
c0028529:	d3 e0                	shl    eax,cl
c002852b:	09 c2                	or     edx,eax
c002852d:	89 f0                	mov    eax,esi
c002852f:	88 d9                	mov    cl,bl
c0028531:	d3 e8                	shr    eax,cl
c0028533:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028536:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002853c:	eb 6f                	jmp    c00285ad <__adddf3+0x5f2>
c002853e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028541:	29 d8                	sub    eax,ebx
c0028543:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028546:	89 f0                	mov    eax,esi
c0028548:	eb 59                	jmp    c00285a3 <__adddf3+0x5e8>
c002854a:	85 c0                	test   eax,eax
c002854c:	74 6a                	je     c00285b8 <__adddf3+0x5fd>
c002854e:	0f bd c8             	bsr    ecx,eax
c0028551:	83 f1 1f             	xor    ecx,0x1f
c0028554:	d3 e0                	shl    eax,cl
c0028556:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028559:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002855f:	83 c1 20             	add    ecx,0x20
c0028562:	39 cb                	cmp    ebx,ecx
c0028564:	7f 35                	jg     c002859b <__adddf3+0x5e0>
c0028566:	29 d9                	sub    ecx,ebx
c0028568:	8d 71 01             	lea    esi,[ecx+0x1]
c002856b:	83 fe 1f             	cmp    esi,0x1f
c002856e:	7e 09                	jle    c0028579 <__adddf3+0x5be>
c0028570:	83 e9 1f             	sub    ecx,0x1f
c0028573:	d3 e8                	shr    eax,cl
c0028575:	89 c3                	mov    ebx,eax
c0028577:	eb 11                	jmp    c002858a <__adddf3+0x5cf>
c0028579:	b9 20 00 00 00       	mov    ecx,0x20
c002857e:	29 f1                	sub    ecx,esi
c0028580:	89 c3                	mov    ebx,eax
c0028582:	d3 e3                	shl    ebx,cl
c0028584:	89 f1                	mov    ecx,esi
c0028586:	d3 e8                	shr    eax,cl
c0028588:	89 c2                	mov    edx,eax
c002858a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002858d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028592:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028595:	89 d0                	mov    eax,edx
c0028597:	89 da                	mov    edx,ebx
c0028599:	eb 26                	jmp    c00285c1 <__adddf3+0x606>
c002859b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002859e:	29 cf                	sub    edi,ecx
c00285a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285a3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285a8:	eb 17                	jmp    c00285c1 <__adddf3+0x606>
c00285aa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285ad:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285b0:	eb 0f                	jmp    c00285c1 <__adddf3+0x606>
c00285b2:	31 d2                	xor    edx,edx
c00285b4:	31 c0                	xor    eax,eax
c00285b6:	eb 09                	jmp    c00285c1 <__adddf3+0x606>
c00285b8:	89 c2                	mov    edx,eax
c00285ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00285c1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00285c4:	c1 e1 14             	shl    ecx,0x14
c00285c7:	89 c3                	mov    ebx,eax
c00285c9:	c1 eb 0b             	shr    ebx,0xb
c00285cc:	09 d9                	or     ecx,ebx
c00285ce:	89 d3                	mov    ebx,edx
c00285d0:	c1 eb 0b             	shr    ebx,0xb
c00285d3:	c1 e0 15             	shl    eax,0x15
c00285d6:	09 d8                	or     eax,ebx
c00285d8:	89 c7                	mov    edi,eax
c00285da:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00285e0:	0f 95 c0             	setne  al
c00285e3:	89 c6                	mov    esi,eax
c00285e5:	09 f3                	or     ebx,esi
c00285e7:	83 e3 01             	and    ebx,0x1
c00285ea:	c1 ea 0a             	shr    edx,0xa
c00285ed:	21 da                	and    edx,ebx
c00285ef:	89 f8                	mov    eax,edi
c00285f1:	01 d0                	add    eax,edx
c00285f3:	83 d1 00             	adc    ecx,0x0
c00285f6:	89 c7                	mov    edi,eax
c00285f8:	eb 06                	jmp    c0028600 <__adddf3+0x645>
c00285fa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00285fd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028600:	89 f8                	mov    eax,edi
c0028602:	89 ca                	mov    edx,ecx
c0028604:	83 c4 24             	add    esp,0x24
c0028607:	5b                   	pop    ebx
c0028608:	5e                   	pop    esi
c0028609:	5f                   	pop    edi
c002860a:	5d                   	pop    ebp
c002860b:	c3                   	ret    

c002860c <__subdf3>:
c002860c:	55                   	push   ebp
c002860d:	89 e5                	mov    ebp,esp
c002860f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028612:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028615:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002861b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002861e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028621:	5d                   	pop    ebp
c0028622:	e9 94 f9 ff ff       	jmp    c0027fbb <__adddf3>

c0028627 <__negdf2>:
c0028627:	55                   	push   ebp
c0028628:	89 e5                	mov    ebp,esp
c002862a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002862d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028630:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028636:	5d                   	pop    ebp
c0028637:	c3                   	ret    

c0028638 <__muldf3>:
c0028638:	55                   	push   ebp
c0028639:	89 e5                	mov    ebp,esp
c002863b:	57                   	push   edi
c002863c:	56                   	push   esi
c002863d:	53                   	push   ebx
c002863e:	83 ec 24             	sub    esp,0x24
c0028641:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028644:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028647:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002864a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002864d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028650:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028653:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028656:	89 c8                	mov    eax,ecx
c0028658:	c1 f8 14             	sar    eax,0x14
c002865b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002865e:	89 f8                	mov    eax,edi
c0028660:	89 fb                	mov    ebx,edi
c0028662:	c1 e3 0b             	shl    ebx,0xb
c0028665:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028668:	c1 e1 0b             	shl    ecx,0xb
c002866b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028671:	c1 e8 15             	shr    eax,0x15
c0028674:	09 c1                	or     ecx,eax
c0028676:	89 d6                	mov    esi,edx
c0028678:	89 d0                	mov    eax,edx
c002867a:	c1 f8 14             	sar    eax,0x14
c002867d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028680:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028683:	89 c3                	mov    ebx,eax
c0028685:	c1 e3 0b             	shl    ebx,0xb
c0028688:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002868b:	c1 e6 0b             	shl    esi,0xb
c002868e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028694:	c1 e8 15             	shr    eax,0x15
c0028697:	09 c6                	or     esi,eax
c0028699:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002869c:	25 ff 07 00 00       	and    eax,0x7ff
c00286a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286a7:	25 ff 07 00 00       	and    eax,0x7ff
c00286ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286af:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286b2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286b5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00286bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286bf:	40                   	inc    eax
c00286c0:	a9 fe 07 00 00       	test   eax,0x7fe
c00286c5:	0f 85 8d 00 00 00    	jne    c0028758 <__muldf3+0x120>
c00286cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286ce:	09 c8                	or     eax,ecx
c00286d0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00286d4:	74 44                	je     c002871a <__muldf3+0xe2>
c00286d6:	85 c0                	test   eax,eax
c00286d8:	0f 85 31 02 00 00    	jne    c002890f <__muldf3+0x2d7>
c00286de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286e1:	40                   	inc    eax
c00286e2:	a9 fe 07 00 00       	test   eax,0x7fe
c00286e7:	75 13                	jne    c00286fc <__muldf3+0xc4>
c00286e9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00286ec:	09 f1                	or     ecx,esi
c00286ee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00286f2:	74 22                	je     c0028716 <__muldf3+0xde>
c00286f4:	85 c9                	test   ecx,ecx
c00286f6:	0f 85 0d 02 00 00    	jne    c0028909 <__muldf3+0x2d1>
c00286fc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028700:	0f 89 09 02 00 00    	jns    c002890f <__muldf3+0x2d7>
c0028706:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028709:	05 00 00 00 80       	add    eax,0x80000000
c002870e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028711:	e9 f9 01 00 00       	jmp    c002890f <__muldf3+0x2d7>
c0028716:	85 c9                	test   ecx,ecx
c0028718:	eb 2e                	jmp    c0028748 <__muldf3+0x110>
c002871a:	85 c0                	test   eax,eax
c002871c:	74 20                	je     c002873e <__muldf3+0x106>
c002871e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028721:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028724:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028727:	c1 ef 1f             	shr    edi,0x1f
c002872a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002872d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028730:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028733:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028736:	09 f9                	or     ecx,edi
c0028738:	78 1e                	js     c0028758 <__muldf3+0x120>
c002873a:	89 c3                	mov    ebx,eax
c002873c:	eb e0                	jmp    c002871e <__muldf3+0xe6>
c002873e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028741:	f7 d0                	not    eax
c0028743:	a9 ff 07 00 00       	test   eax,0x7ff
c0028748:	75 b2                	jne    c00286fc <__muldf3+0xc4>
c002874a:	31 ff                	xor    edi,edi
c002874c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028753:	e9 b7 01 00 00       	jmp    c002890f <__muldf3+0x2d7>
c0028758:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002875b:	40                   	inc    eax
c002875c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028761:	75 57                	jne    c00287ba <__muldf3+0x182>
c0028763:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028766:	09 f0                	or     eax,esi
c0028768:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002876c:	74 23                	je     c0028791 <__muldf3+0x159>
c002876e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028772:	0f 89 91 01 00 00    	jns    c0028909 <__muldf3+0x2d1>
c0028778:	85 c0                	test   eax,eax
c002877a:	0f 85 89 01 00 00    	jne    c0028909 <__muldf3+0x2d1>
c0028780:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028783:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028789:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002878c:	e9 7e 01 00 00       	jmp    c002890f <__muldf3+0x2d7>
c0028791:	85 c0                	test   eax,eax
c0028793:	75 0c                	jne    c00287a1 <__muldf3+0x169>
c0028795:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028799:	0f 89 6a 01 00 00    	jns    c0028909 <__muldf3+0x2d1>
c002879f:	eb df                	jmp    c0028780 <__muldf3+0x148>
c00287a1:	01 f6                	add    esi,esi
c00287a3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00287a6:	c1 ea 1f             	shr    edx,0x1f
c00287a9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00287ac:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00287af:	8d 43 ff             	lea    eax,[ebx-0x1]
c00287b2:	09 d6                	or     esi,edx
c00287b4:	78 04                	js     c00287ba <__muldf3+0x182>
c00287b6:	89 c3                	mov    ebx,eax
c00287b8:	eb e7                	jmp    c00287a1 <__muldf3+0x169>
c00287ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00287c0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00287c6:	89 c8                	mov    eax,ecx
c00287c8:	f7 e6                	mul    esi
c00287ca:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00287cd:	89 c7                	mov    edi,eax
c00287cf:	89 c8                	mov    eax,ecx
c00287d1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00287d4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00287d7:	89 c1                	mov    ecx,eax
c00287d9:	89 f0                	mov    eax,esi
c00287db:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00287de:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00287e1:	89 c6                	mov    esi,eax
c00287e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287e6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00287e9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00287ec:	31 c0                	xor    eax,eax
c00287ee:	01 f1                	add    ecx,esi
c00287f0:	0f 92 c0             	setb   al
c00287f3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00287f6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00287f9:	83 d6 00             	adc    esi,0x0
c00287fc:	01 c7                	add    edi,eax
c00287fe:	83 d6 00             	adc    esi,0x0
c0028801:	01 ca                	add    edx,ecx
c0028803:	0f 92 c1             	setb   cl
c0028806:	0f b6 c9             	movzx  ecx,cl
c0028809:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002880c:	83 d6 00             	adc    esi,0x0
c002880f:	01 cf                	add    edi,ecx
c0028811:	83 d6 00             	adc    esi,0x0
c0028814:	31 c9                	xor    ecx,ecx
c0028816:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028819:	0f 95 c1             	setne  cl
c002881c:	09 cf                	or     edi,ecx
c002881e:	85 f6                	test   esi,esi
c0028820:	78 0c                	js     c002882e <__muldf3+0x1f6>
c0028822:	01 f6                	add    esi,esi
c0028824:	89 f8                	mov    eax,edi
c0028826:	c1 e8 1f             	shr    eax,0x1f
c0028829:	09 c6                	or     esi,eax
c002882b:	01 ff                	add    edi,edi
c002882d:	4b                   	dec    ebx
c002882e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028834:	0f 8f 85 00 00 00    	jg     c00288bf <__muldf3+0x287>
c002883a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028840:	85 db                	test   ebx,ebx
c0028842:	0f 8f 84 00 00 00    	jg     c00288cc <__muldf3+0x294>
c0028848:	83 fb cc             	cmp    ebx,0xffffffcc
c002884b:	7c 79                	jl     c00288c6 <__muldf3+0x28e>
c002884d:	ba 01 00 00 00       	mov    edx,0x1
c0028852:	29 da                	sub    edx,ebx
c0028854:	81 ce 00 00 00 80    	or     esi,0x80000000
c002885a:	83 fa 1f             	cmp    edx,0x1f
c002885d:	7e 30                	jle    c002888f <__muldf3+0x257>
c002885f:	83 fa 20             	cmp    edx,0x20
c0028862:	75 0b                	jne    c002886f <__muldf3+0x237>
c0028864:	31 c0                	xor    eax,eax
c0028866:	85 ff                	test   edi,edi
c0028868:	0f 95 c0             	setne  al
c002886b:	89 c7                	mov    edi,eax
c002886d:	eb 1a                	jmp    c0028889 <__muldf3+0x251>
c002886f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028872:	89 f0                	mov    eax,esi
c0028874:	d3 e0                	shl    eax,cl
c0028876:	09 f8                	or     eax,edi
c0028878:	0f 95 c0             	setne  al
c002887b:	0f b6 c0             	movzx  eax,al
c002887e:	89 c7                	mov    edi,eax
c0028880:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028885:	29 d9                	sub    ecx,ebx
c0028887:	d3 ee                	shr    esi,cl
c0028889:	09 f7                	or     edi,esi
c002888b:	31 db                	xor    ebx,ebx
c002888d:	eb 3b                	jmp    c00288ca <__muldf3+0x292>
c002888f:	83 c3 1f             	add    ebx,0x1f
c0028892:	89 f0                	mov    eax,esi
c0028894:	88 d9                	mov    cl,bl
c0028896:	d3 e0                	shl    eax,cl
c0028898:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002889b:	89 f8                	mov    eax,edi
c002889d:	88 d1                	mov    cl,dl
c002889f:	d3 e8                	shr    eax,cl
c00288a1:	89 c1                	mov    ecx,eax
c00288a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288a6:	09 c8                	or     eax,ecx
c00288a8:	88 d9                	mov    cl,bl
c00288aa:	d3 e7                	shl    edi,cl
c00288ac:	31 db                	xor    ebx,ebx
c00288ae:	85 ff                	test   edi,edi
c00288b0:	0f 95 c3             	setne  bl
c00288b3:	89 df                	mov    edi,ebx
c00288b5:	09 c7                	or     edi,eax
c00288b7:	88 d1                	mov    cl,dl
c00288b9:	d3 ee                	shr    esi,cl
c00288bb:	31 db                	xor    ebx,ebx
c00288bd:	eb 0d                	jmp    c00288cc <__muldf3+0x294>
c00288bf:	bb ff 07 00 00       	mov    ebx,0x7ff
c00288c4:	eb 02                	jmp    c00288c8 <__muldf3+0x290>
c00288c6:	31 db                	xor    ebx,ebx
c00288c8:	31 ff                	xor    edi,edi
c00288ca:	31 f6                	xor    esi,esi
c00288cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00288cf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00288d2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00288d7:	09 c3                	or     ebx,eax
c00288d9:	c1 e3 14             	shl    ebx,0x14
c00288dc:	89 f0                	mov    eax,esi
c00288de:	c1 e8 0b             	shr    eax,0xb
c00288e1:	09 c3                	or     ebx,eax
c00288e3:	89 f8                	mov    eax,edi
c00288e5:	c1 e8 0b             	shr    eax,0xb
c00288e8:	c1 e6 15             	shl    esi,0x15
c00288eb:	09 c6                	or     esi,eax
c00288ed:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00288f3:	0f 95 c1             	setne  cl
c00288f6:	09 c8                	or     eax,ecx
c00288f8:	83 e0 01             	and    eax,0x1
c00288fb:	c1 ef 0a             	shr    edi,0xa
c00288fe:	21 c7                	and    edi,eax
c0028900:	01 f7                	add    edi,esi
c0028902:	83 d3 00             	adc    ebx,0x0
c0028905:	89 da                	mov    edx,ebx
c0028907:	eb 03                	jmp    c002890c <__muldf3+0x2d4>
c0028909:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002890c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002890f:	89 f8                	mov    eax,edi
c0028911:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028914:	83 c4 24             	add    esp,0x24
c0028917:	5b                   	pop    ebx
c0028918:	5e                   	pop    esi
c0028919:	5f                   	pop    edi
c002891a:	5d                   	pop    ebp
c002891b:	c3                   	ret    

c002891c <__divdf3>:
c002891c:	55                   	push   ebp
c002891d:	89 e5                	mov    ebp,esp
c002891f:	57                   	push   edi
c0028920:	56                   	push   esi
c0028921:	53                   	push   ebx
c0028922:	83 ec 2c             	sub    esp,0x2c
c0028925:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028928:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002892b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002892e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028931:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028934:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028937:	89 ce                	mov    esi,ecx
c0028939:	89 c8                	mov    eax,ecx
c002893b:	c1 f8 14             	sar    eax,0x14
c002893e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028941:	89 f8                	mov    eax,edi
c0028943:	89 fb                	mov    ebx,edi
c0028945:	c1 e3 0b             	shl    ebx,0xb
c0028948:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002894b:	c1 e6 0b             	shl    esi,0xb
c002894e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028954:	c1 e8 15             	shr    eax,0x15
c0028957:	09 c6                	or     esi,eax
c0028959:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002895c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002895f:	89 c2                	mov    edx,eax
c0028961:	c1 fa 14             	sar    edx,0x14
c0028964:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028967:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002896a:	89 de                	mov    esi,ebx
c002896c:	c1 e6 0b             	shl    esi,0xb
c002896f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028972:	c1 e0 0b             	shl    eax,0xb
c0028975:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002897a:	c1 eb 15             	shr    ebx,0x15
c002897d:	09 d8                	or     eax,ebx
c002897f:	89 c2                	mov    edx,eax
c0028981:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028984:	25 ff 07 00 00       	and    eax,0x7ff
c0028989:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002898c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002898f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028995:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028998:	29 d8                	sub    eax,ebx
c002899a:	05 ff 03 00 00       	add    eax,0x3ff
c002899f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00289a2:	46                   	inc    esi
c00289a3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00289a9:	0f 85 a5 00 00 00    	jne    c0028a54 <__divdf3+0x138>
c00289af:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00289b2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00289b5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00289b9:	74 2a                	je     c00289e5 <__divdf3+0xc9>
c00289bb:	85 f6                	test   esi,esi
c00289bd:	0f 85 cc 02 00 00    	jne    c0028c8f <__divdf3+0x373>
c00289c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00289c6:	40                   	inc    eax
c00289c7:	a9 fe 07 00 00       	test   eax,0x7fe
c00289cc:	75 26                	jne    c00289f4 <__divdf3+0xd8>
c00289ce:	85 db                	test   ebx,ebx
c00289d0:	74 22                	je     c00289f4 <__divdf3+0xd8>
c00289d2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00289d5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00289d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00289db:	09 d0                	or     eax,edx
c00289dd:	0f 85 ac 02 00 00    	jne    c0028c8f <__divdf3+0x373>
c00289e3:	eb 63                	jmp    c0028a48 <__divdf3+0x12c>
c00289e5:	85 f6                	test   esi,esi
c00289e7:	75 22                	jne    c0028a0b <__divdf3+0xef>
c00289e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00289ec:	40                   	inc    eax
c00289ed:	a9 fe 07 00 00       	test   eax,0x7fe
c00289f2:	74 36                	je     c0028a2a <__divdf3+0x10e>
c00289f4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00289f8:	0f 89 91 02 00 00    	jns    c0028c8f <__divdf3+0x373>
c00289fe:	89 f8                	mov    eax,edi
c0028a00:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028a06:	e9 80 02 00 00       	jmp    c0028c8b <__divdf3+0x36f>
c0028a0b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028a0e:	01 f6                	add    esi,esi
c0028a10:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a13:	c1 ef 1f             	shr    edi,0x1f
c0028a16:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028a19:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028a1c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028a1f:	09 f7                	or     edi,esi
c0028a21:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028a24:	78 2e                	js     c0028a54 <__divdf3+0x138>
c0028a26:	89 c8                	mov    eax,ecx
c0028a28:	eb e1                	jmp    c0028a0b <__divdf3+0xef>
c0028a2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a2d:	09 d0                	or     eax,edx
c0028a2f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028a33:	74 0f                	je     c0028a44 <__divdf3+0x128>
c0028a35:	85 c0                	test   eax,eax
c0028a37:	74 bb                	je     c00289f4 <__divdf3+0xd8>
c0028a39:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a3c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a3f:	e9 4b 02 00 00       	jmp    c0028c8f <__divdf3+0x373>
c0028a44:	85 c0                	test   eax,eax
c0028a46:	75 ac                	jne    c00289f4 <__divdf3+0xd8>
c0028a48:	31 ff                	xor    edi,edi
c0028a4a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028a4f:	e9 3b 02 00 00       	jmp    c0028c8f <__divdf3+0x373>
c0028a54:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028a57:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028a5a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028a60:	75 6b                	jne    c0028acd <__divdf3+0x1b1>
c0028a62:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028a65:	09 d6                	or     esi,edx
c0028a67:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028a6b:	74 28                	je     c0028a95 <__divdf3+0x179>
c0028a6d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a70:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a73:	85 f6                	test   esi,esi
c0028a75:	0f 85 14 02 00 00    	jne    c0028c8f <__divdf3+0x373>
c0028a7b:	31 ff                	xor    edi,edi
c0028a7d:	31 c9                	xor    ecx,ecx
c0028a7f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028a82:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028a85:	0f 89 04 02 00 00    	jns    c0028c8f <__divdf3+0x373>
c0028a8b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028a90:	e9 fa 01 00 00       	jmp    c0028c8f <__divdf3+0x373>
c0028a95:	85 f6                	test   esi,esi
c0028a97:	75 1b                	jne    c0028ab4 <__divdf3+0x198>
c0028a99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028a9c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028a9f:	25 00 00 00 80       	and    eax,0x80000000
c0028aa4:	31 c9                	xor    ecx,ecx
c0028aa6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028aab:	89 cf                	mov    edi,ecx
c0028aad:	89 c1                	mov    ecx,eax
c0028aaf:	e9 db 01 00 00       	jmp    c0028c8f <__divdf3+0x373>
c0028ab4:	01 d2                	add    edx,edx
c0028ab6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028ab9:	c1 eb 1f             	shr    ebx,0x1f
c0028abc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028abf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028ac2:	8d 48 01             	lea    ecx,[eax+0x1]
c0028ac5:	09 da                	or     edx,ebx
c0028ac7:	78 04                	js     c0028acd <__divdf3+0x1b1>
c0028ac9:	89 c8                	mov    eax,ecx
c0028acb:	eb e7                	jmp    c0028ab4 <__divdf3+0x198>
c0028acd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028ad0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028ad6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028adc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028adf:	39 d6                	cmp    esi,edx
c0028ae1:	77 0d                	ja     c0028af0 <__divdf3+0x1d4>
c0028ae3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028ae6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028ae9:	72 1b                	jb     c0028b06 <__divdf3+0x1ea>
c0028aeb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028aee:	75 16                	jne    c0028b06 <__divdf3+0x1ea>
c0028af0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028af3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028af6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028af9:	83 de 00             	sbb    esi,0x0
c0028afc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028aff:	ba 01 00 00 00       	mov    edx,0x1
c0028b04:	eb 02                	jmp    c0028b08 <__divdf3+0x1ec>
c0028b06:	31 d2                	xor    edx,edx
c0028b08:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028b0f:	31 ff                	xor    edi,edi
c0028b11:	01 ff                	add    edi,edi
c0028b13:	89 d1                	mov    ecx,edx
c0028b15:	c1 e9 1f             	shr    ecx,0x1f
c0028b18:	09 cf                	or     edi,ecx
c0028b1a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028b1d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028b20:	89 da                	mov    edx,ebx
c0028b22:	89 f3                	mov    ebx,esi
c0028b24:	8d 34 36             	lea    esi,[esi+esi*1]
c0028b27:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b2a:	c1 e9 1f             	shr    ecx,0x1f
c0028b2d:	09 ce                	or     esi,ecx
c0028b2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b32:	01 c9                	add    ecx,ecx
c0028b34:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028b37:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028b3a:	85 db                	test   ebx,ebx
c0028b3c:	78 29                	js     c0028b67 <__divdf3+0x24b>
c0028b3e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028b41:	72 07                	jb     c0028b4a <__divdf3+0x22e>
c0028b43:	75 3c                	jne    c0028b81 <__divdf3+0x265>
c0028b45:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028b48:	77 37                	ja     c0028b81 <__divdf3+0x265>
c0028b4a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b4d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028b50:	31 d2                	xor    edx,edx
c0028b52:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028b55:	0f 97 c2             	seta   dl
c0028b58:	29 d6                	sub    esi,edx
c0028b5a:	89 d9                	mov    ecx,ebx
c0028b5c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028b5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028b62:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028b65:	eb 17                	jmp    c0028b7e <__divdf3+0x262>
c0028b67:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b6a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028b70:	0f 97 c1             	seta   cl
c0028b73:	0f b6 c9             	movzx  ecx,cl
c0028b76:	29 ce                	sub    esi,ecx
c0028b78:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028b7b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028b7e:	83 ca 01             	or     edx,0x1
c0028b81:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028b84:	75 8b                	jne    c0028b11 <__divdf3+0x1f5>
c0028b86:	c1 e7 09             	shl    edi,0x9
c0028b89:	89 d1                	mov    ecx,edx
c0028b8b:	c1 e9 17             	shr    ecx,0x17
c0028b8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028b91:	09 f3                	or     ebx,esi
c0028b93:	0f 95 c3             	setne  bl
c0028b96:	0f b6 db             	movzx  ebx,bl
c0028b99:	c1 e2 09             	shl    edx,0x9
c0028b9c:	09 d3                	or     ebx,edx
c0028b9e:	89 ca                	mov    edx,ecx
c0028ba0:	09 fa                	or     edx,edi
c0028ba2:	78 0c                	js     c0028bb0 <__divdf3+0x294>
c0028ba4:	01 d2                	add    edx,edx
c0028ba6:	89 d9                	mov    ecx,ebx
c0028ba8:	c1 e9 1f             	shr    ecx,0x1f
c0028bab:	09 ca                	or     edx,ecx
c0028bad:	01 db                	add    ebx,ebx
c0028baf:	48                   	dec    eax
c0028bb0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028bb5:	0f 8f 83 00 00 00    	jg     c0028c3e <__divdf3+0x322>
c0028bbb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028bc1:	85 c0                	test   eax,eax
c0028bc3:	0f 8f 82 00 00 00    	jg     c0028c4b <__divdf3+0x32f>
c0028bc9:	83 f8 cc             	cmp    eax,0xffffffcc
c0028bcc:	7c 77                	jl     c0028c45 <__divdf3+0x329>
c0028bce:	be 01 00 00 00       	mov    esi,0x1
c0028bd3:	29 c6                	sub    esi,eax
c0028bd5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028bdb:	83 fe 1f             	cmp    esi,0x1f
c0028bde:	7e 2f                	jle    c0028c0f <__divdf3+0x2f3>
c0028be0:	83 fe 20             	cmp    esi,0x20
c0028be3:	75 0a                	jne    c0028bef <__divdf3+0x2d3>
c0028be5:	85 db                	test   ebx,ebx
c0028be7:	0f 95 c3             	setne  bl
c0028bea:	0f b6 db             	movzx  ebx,bl
c0028bed:	eb 1a                	jmp    c0028c09 <__divdf3+0x2ed>
c0028bef:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028bf2:	89 d7                	mov    edi,edx
c0028bf4:	d3 e7                	shl    edi,cl
c0028bf6:	89 f9                	mov    ecx,edi
c0028bf8:	09 d9                	or     ecx,ebx
c0028bfa:	0f 95 c3             	setne  bl
c0028bfd:	0f b6 db             	movzx  ebx,bl
c0028c00:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028c05:	29 c1                	sub    ecx,eax
c0028c07:	d3 ea                	shr    edx,cl
c0028c09:	09 d3                	or     ebx,edx
c0028c0b:	31 c0                	xor    eax,eax
c0028c0d:	eb 3a                	jmp    c0028c49 <__divdf3+0x32d>
c0028c0f:	83 c0 1f             	add    eax,0x1f
c0028c12:	89 d7                	mov    edi,edx
c0028c14:	88 c1                	mov    cl,al
c0028c16:	d3 e7                	shl    edi,cl
c0028c18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028c1b:	89 df                	mov    edi,ebx
c0028c1d:	89 f1                	mov    ecx,esi
c0028c1f:	d3 ef                	shr    edi,cl
c0028c21:	89 f9                	mov    ecx,edi
c0028c23:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028c26:	09 cf                	or     edi,ecx
c0028c28:	88 c1                	mov    cl,al
c0028c2a:	d3 e3                	shl    ebx,cl
c0028c2c:	85 db                	test   ebx,ebx
c0028c2e:	0f 95 c3             	setne  bl
c0028c31:	0f b6 db             	movzx  ebx,bl
c0028c34:	09 fb                	or     ebx,edi
c0028c36:	89 f1                	mov    ecx,esi
c0028c38:	d3 ea                	shr    edx,cl
c0028c3a:	31 c0                	xor    eax,eax
c0028c3c:	eb 0d                	jmp    c0028c4b <__divdf3+0x32f>
c0028c3e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028c43:	eb 02                	jmp    c0028c47 <__divdf3+0x32b>
c0028c45:	31 c0                	xor    eax,eax
c0028c47:	31 db                	xor    ebx,ebx
c0028c49:	31 d2                	xor    edx,edx
c0028c4b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028c4e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028c51:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028c57:	09 c8                	or     eax,ecx
c0028c59:	c1 e0 14             	shl    eax,0x14
c0028c5c:	89 d1                	mov    ecx,edx
c0028c5e:	c1 e9 0b             	shr    ecx,0xb
c0028c61:	09 c8                	or     eax,ecx
c0028c63:	89 c6                	mov    esi,eax
c0028c65:	89 d9                	mov    ecx,ebx
c0028c67:	c1 e9 0b             	shr    ecx,0xb
c0028c6a:	c1 e2 15             	shl    edx,0x15
c0028c6d:	09 ca                	or     edx,ecx
c0028c6f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028c75:	0f 95 c0             	setne  al
c0028c78:	09 c1                	or     ecx,eax
c0028c7a:	83 e1 01             	and    ecx,0x1
c0028c7d:	c1 eb 0a             	shr    ebx,0xa
c0028c80:	21 cb                	and    ebx,ecx
c0028c82:	01 d3                	add    ebx,edx
c0028c84:	89 d8                	mov    eax,ebx
c0028c86:	83 d6 00             	adc    esi,0x0
c0028c89:	89 f2                	mov    edx,esi
c0028c8b:	89 c7                	mov    edi,eax
c0028c8d:	89 d1                	mov    ecx,edx
c0028c8f:	89 f8                	mov    eax,edi
c0028c91:	89 ca                	mov    edx,ecx
c0028c93:	83 c4 2c             	add    esp,0x2c
c0028c96:	5b                   	pop    ebx
c0028c97:	5e                   	pop    esi
c0028c98:	5f                   	pop    edi
c0028c99:	5d                   	pop    ebp
c0028c9a:	c3                   	ret    

c0028c9b <__floatsidf>:
c0028c9b:	55                   	push   ebp
c0028c9c:	89 e5                	mov    ebp,esp
c0028c9e:	56                   	push   esi
c0028c9f:	53                   	push   ebx
c0028ca0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ca3:	85 db                	test   ebx,ebx
c0028ca5:	7e 15                	jle    c0028cbc <__floatsidf+0x21>
c0028ca7:	0f bd cb             	bsr    ecx,ebx
c0028caa:	83 f1 1f             	xor    ecx,0x1f
c0028cad:	d3 e3                	shl    ebx,cl
c0028caf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028cb5:	b8 1e 04 00 00       	mov    eax,0x41e
c0028cba:	eb 21                	jmp    c0028cdd <__floatsidf+0x42>
c0028cbc:	b8 00 00 00 00       	mov    eax,0x0
c0028cc1:	ba 00 00 00 00       	mov    edx,0x0
c0028cc6:	74 2a                	je     c0028cf2 <__floatsidf+0x57>
c0028cc8:	f7 db                	neg    ebx
c0028cca:	0f bd cb             	bsr    ecx,ebx
c0028ccd:	83 f1 1f             	xor    ecx,0x1f
c0028cd0:	d3 e3                	shl    ebx,cl
c0028cd2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028cd8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028cdd:	29 c8                	sub    eax,ecx
c0028cdf:	c1 e0 14             	shl    eax,0x14
c0028ce2:	89 c1                	mov    ecx,eax
c0028ce4:	89 de                	mov    esi,ebx
c0028ce6:	c1 ee 0b             	shr    esi,0xb
c0028ce9:	09 f1                	or     ecx,esi
c0028ceb:	89 ca                	mov    edx,ecx
c0028ced:	c1 e3 15             	shl    ebx,0x15
c0028cf0:	89 d8                	mov    eax,ebx
c0028cf2:	5b                   	pop    ebx
c0028cf3:	5e                   	pop    esi
c0028cf4:	5d                   	pop    ebp
c0028cf5:	c3                   	ret    

c0028cf6 <__floatunsidf>:
c0028cf6:	55                   	push   ebp
c0028cf7:	89 e5                	mov    ebp,esp
c0028cf9:	56                   	push   esi
c0028cfa:	53                   	push   ebx
c0028cfb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cfe:	85 db                	test   ebx,ebx
c0028d00:	74 2a                	je     c0028d2c <__floatunsidf+0x36>
c0028d02:	0f bd cb             	bsr    ecx,ebx
c0028d05:	83 f1 1f             	xor    ecx,0x1f
c0028d08:	d3 e3                	shl    ebx,cl
c0028d0a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d10:	b8 1e 04 00 00       	mov    eax,0x41e
c0028d15:	29 c8                	sub    eax,ecx
c0028d17:	c1 e0 14             	shl    eax,0x14
c0028d1a:	89 c1                	mov    ecx,eax
c0028d1c:	89 de                	mov    esi,ebx
c0028d1e:	c1 ee 0b             	shr    esi,0xb
c0028d21:	09 f1                	or     ecx,esi
c0028d23:	89 ca                	mov    edx,ecx
c0028d25:	c1 e3 15             	shl    ebx,0x15
c0028d28:	89 d8                	mov    eax,ebx
c0028d2a:	eb 04                	jmp    c0028d30 <__floatunsidf+0x3a>
c0028d2c:	31 c0                	xor    eax,eax
c0028d2e:	31 d2                	xor    edx,edx
c0028d30:	5b                   	pop    ebx
c0028d31:	5e                   	pop    esi
c0028d32:	5d                   	pop    ebp
c0028d33:	c3                   	ret    

c0028d34 <__fixdfsi>:
c0028d34:	55                   	push   ebp
c0028d35:	89 e5                	mov    ebp,esp
c0028d37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d3a:	89 d1                	mov    ecx,edx
c0028d3c:	c1 e1 0b             	shl    ecx,0xb
c0028d3f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028d48:	c1 e8 15             	shr    eax,0x15
c0028d4b:	09 c1                	or     ecx,eax
c0028d4d:	c1 fa 14             	sar    edx,0x14
c0028d50:	78 1f                	js     c0028d71 <__fixdfsi+0x3d>
c0028d52:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028d58:	31 c0                	xor    eax,eax
c0028d5a:	83 fa 1e             	cmp    edx,0x1e
c0028d5d:	77 40                	ja     c0028d9f <__fixdfsi+0x6b>
c0028d5f:	89 c8                	mov    eax,ecx
c0028d61:	0d 00 00 00 80       	or     eax,0x80000000
c0028d66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028d6b:	29 d1                	sub    ecx,edx
c0028d6d:	d3 e8                	shr    eax,cl
c0028d6f:	eb 2e                	jmp    c0028d9f <__fixdfsi+0x6b>
c0028d71:	31 c0                	xor    eax,eax
c0028d73:	81 c2 01 04 00 00    	add    edx,0x401
c0028d79:	78 24                	js     c0028d9f <__fixdfsi+0x6b>
c0028d7b:	83 fa 1e             	cmp    edx,0x1e
c0028d7e:	7e 09                	jle    c0028d89 <__fixdfsi+0x55>
c0028d80:	83 fa 1f             	cmp    edx,0x1f
c0028d83:	75 18                	jne    c0028d9d <__fixdfsi+0x69>
c0028d85:	85 c9                	test   ecx,ecx
c0028d87:	75 14                	jne    c0028d9d <__fixdfsi+0x69>
c0028d89:	89 c8                	mov    eax,ecx
c0028d8b:	0d 00 00 00 80       	or     eax,0x80000000
c0028d90:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028d95:	29 d1                	sub    ecx,edx
c0028d97:	d3 e8                	shr    eax,cl
c0028d99:	f7 d8                	neg    eax
c0028d9b:	eb 02                	jmp    c0028d9f <__fixdfsi+0x6b>
c0028d9d:	31 c0                	xor    eax,eax
c0028d9f:	5d                   	pop    ebp
c0028da0:	c3                   	ret    

c0028da1 <__fixunsdfsi>:
c0028da1:	55                   	push   ebp
c0028da2:	89 e5                	mov    ebp,esp
c0028da4:	53                   	push   ebx
c0028da5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028da8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028dab:	89 d3                	mov    ebx,edx
c0028dad:	c1 fb 14             	sar    ebx,0x14
c0028db0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028db6:	31 c0                	xor    eax,eax
c0028db8:	83 fb 1f             	cmp    ebx,0x1f
c0028dbb:	77 1d                	ja     c0028dda <__fixunsdfsi+0x39>
c0028dbd:	89 d0                	mov    eax,edx
c0028dbf:	c1 e0 0b             	shl    eax,0xb
c0028dc2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028dc7:	c1 e9 15             	shr    ecx,0x15
c0028dca:	09 c8                	or     eax,ecx
c0028dcc:	0d 00 00 00 80       	or     eax,0x80000000
c0028dd1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028dd6:	29 d9                	sub    ecx,ebx
c0028dd8:	d3 e8                	shr    eax,cl
c0028dda:	5b                   	pop    ebx
c0028ddb:	5d                   	pop    ebp
c0028ddc:	c3                   	ret    

c0028ddd <__cmpdf2>:
c0028ddd:	55                   	push   ebp
c0028dde:	89 e5                	mov    ebp,esp
c0028de0:	57                   	push   edi
c0028de1:	56                   	push   esi
c0028de2:	53                   	push   ebx
c0028de3:	83 ec 0c             	sub    esp,0xc
c0028de6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028de9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028dec:	89 ca                	mov    edx,ecx
c0028dee:	c1 ea 14             	shr    edx,0x14
c0028df1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028df7:	89 cb                	mov    ebx,ecx
c0028df9:	c1 fb 1f             	sar    ebx,0x1f
c0028dfc:	31 da                	xor    edx,ebx
c0028dfe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e01:	89 df                	mov    edi,ebx
c0028e03:	c1 e7 0b             	shl    edi,0xb
c0028e06:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028e09:	c1 e1 0b             	shl    ecx,0xb
c0028e0c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e12:	c1 eb 15             	shr    ebx,0x15
c0028e15:	09 d9                	or     ecx,ebx
c0028e17:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028e1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028e1d:	89 ce                	mov    esi,ecx
c0028e1f:	c1 ee 14             	shr    esi,0x14
c0028e22:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028e28:	89 cb                	mov    ebx,ecx
c0028e2a:	c1 fb 1f             	sar    ebx,0x1f
c0028e2d:	31 de                	xor    esi,ebx
c0028e2f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028e32:	89 df                	mov    edi,ebx
c0028e34:	c1 e7 0b             	shl    edi,0xb
c0028e37:	c1 e1 0b             	shl    ecx,0xb
c0028e3a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e40:	c1 eb 15             	shr    ebx,0x15
c0028e43:	09 d9                	or     ecx,ebx
c0028e45:	89 d3                	mov    ebx,edx
c0028e47:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028e4d:	43                   	inc    ebx
c0028e4e:	83 fb 01             	cmp    ebx,0x1
c0028e51:	77 08                	ja     c0028e5b <__cmpdf2+0x7e>
c0028e53:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028e56:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028e59:	75 68                	jne    c0028ec3 <__cmpdf2+0xe6>
c0028e5b:	89 f3                	mov    ebx,esi
c0028e5d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028e63:	43                   	inc    ebx
c0028e64:	83 fb 01             	cmp    ebx,0x1
c0028e67:	77 06                	ja     c0028e6f <__cmpdf2+0x92>
c0028e69:	89 fb                	mov    ebx,edi
c0028e6b:	09 cb                	or     ebx,ecx
c0028e6d:	75 54                	jne    c0028ec3 <__cmpdf2+0xe6>
c0028e6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028e72:	09 f8                	or     eax,edi
c0028e74:	09 c8                	or     eax,ecx
c0028e76:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028e79:	75 12                	jne    c0028e8d <__cmpdf2+0xb0>
c0028e7b:	8d 42 01             	lea    eax,[edx+0x1]
c0028e7e:	83 f8 01             	cmp    eax,0x1
c0028e81:	77 0a                	ja     c0028e8d <__cmpdf2+0xb0>
c0028e83:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028e86:	31 c0                	xor    eax,eax
c0028e88:	83 fb 01             	cmp    ebx,0x1
c0028e8b:	76 36                	jbe    c0028ec3 <__cmpdf2+0xe6>
c0028e8d:	b8 01 00 00 00       	mov    eax,0x1
c0028e92:	39 f2                	cmp    edx,esi
c0028e94:	7f 2d                	jg     c0028ec3 <__cmpdf2+0xe6>
c0028e96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028e9b:	7c 26                	jl     c0028ec3 <__cmpdf2+0xe6>
c0028e9d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ea0:	77 07                	ja     c0028ea9 <__cmpdf2+0xcc>
c0028ea2:	72 16                	jb     c0028eba <__cmpdf2+0xdd>
c0028ea4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028ea7:	76 0a                	jbe    c0028eb3 <__cmpdf2+0xd6>
c0028ea9:	89 d0                	mov    eax,edx
c0028eab:	c1 f8 1f             	sar    eax,0x1f
c0028eae:	83 c8 01             	or     eax,0x1
c0028eb1:	eb 10                	jmp    c0028ec3 <__cmpdf2+0xe6>
c0028eb3:	b8 00 00 00 00       	mov    eax,0x0
c0028eb8:	73 09                	jae    c0028ec3 <__cmpdf2+0xe6>
c0028eba:	89 d0                	mov    eax,edx
c0028ebc:	c1 f8 1f             	sar    eax,0x1f
c0028ebf:	83 e0 02             	and    eax,0x2
c0028ec2:	48                   	dec    eax
c0028ec3:	83 c4 0c             	add    esp,0xc
c0028ec6:	5b                   	pop    ebx
c0028ec7:	5e                   	pop    esi
c0028ec8:	5f                   	pop    edi
c0028ec9:	5d                   	pop    ebp
c0028eca:	c3                   	ret    

c0028ecb <__eqdf2>:
c0028ecb:	55                   	push   ebp
c0028ecc:	89 e5                	mov    ebp,esp
c0028ece:	50                   	push   eax
c0028ecf:	6a 01                	push   0x1
c0028ed1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028ed4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028ed7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028eda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028edd:	e8 fb fe ff ff       	call   c0028ddd <__cmpdf2>
c0028ee2:	83 c4 18             	add    esp,0x18
c0028ee5:	c9                   	leave  
c0028ee6:	c3                   	ret    

c0028ee7 <__nedf2>:
c0028ee7:	eb e2                	jmp    c0028ecb <__eqdf2>

c0028ee9 <__gtdf2>:
c0028ee9:	55                   	push   ebp
c0028eea:	89 e5                	mov    ebp,esp
c0028eec:	50                   	push   eax
c0028eed:	6a ff                	push   0xffffffff
c0028eef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028ef2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028ef5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028ef8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028efb:	e8 dd fe ff ff       	call   c0028ddd <__cmpdf2>
c0028f00:	83 c4 18             	add    esp,0x18
c0028f03:	c9                   	leave  
c0028f04:	c3                   	ret    

c0028f05 <__gedf2>:
c0028f05:	eb e2                	jmp    c0028ee9 <__gtdf2>

c0028f07 <__ltdf2>:
c0028f07:	eb c2                	jmp    c0028ecb <__eqdf2>

c0028f09 <__ledf2>:
c0028f09:	eb c0                	jmp    c0028ecb <__eqdf2>

c0028f0b <__truncdfsf2>:
c0028f0b:	55                   	push   ebp
c0028f0c:	89 e5                	mov    ebp,esp
c0028f0e:	57                   	push   edi
c0028f0f:	56                   	push   esi
c0028f10:	53                   	push   ebx
c0028f11:	83 ec 0c             	sub    esp,0xc
c0028f14:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f17:	89 d1                	mov    ecx,edx
c0028f19:	c1 f9 14             	sar    ecx,0x14
c0028f1c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028f1f:	89 df                	mov    edi,ebx
c0028f21:	c1 e7 0b             	shl    edi,0xb
c0028f24:	89 d0                	mov    eax,edx
c0028f26:	c1 e0 0b             	shl    eax,0xb
c0028f29:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028f2e:	c1 eb 15             	shr    ebx,0x15
c0028f31:	09 d8                	or     eax,ebx
c0028f33:	89 cb                	mov    ebx,ecx
c0028f35:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028f3b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028f41:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028f47:	0f 86 9e 00 00 00    	jbe    c0028feb <__truncdfsf2+0xe0>
c0028f4d:	85 db                	test   ebx,ebx
c0028f4f:	75 0a                	jne    c0028f5b <__truncdfsf2+0x50>
c0028f51:	c1 fa 17             	sar    edx,0x17
c0028f54:	30 d2                	xor    dl,dl
c0028f56:	e9 84 00 00 00       	jmp    c0028fdf <__truncdfsf2+0xd4>
c0028f5b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028f61:	83 fe 83             	cmp    esi,0xffffff83
c0028f64:	7d 4b                	jge    c0028fb1 <__truncdfsf2+0xa6>
c0028f66:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028f6b:	29 f1                	sub    ecx,esi
c0028f6d:	83 f9 1f             	cmp    ecx,0x1f
c0028f70:	7f 6b                	jg     c0028fdd <__truncdfsf2+0xd2>
c0028f72:	0d 00 00 00 80       	or     eax,0x80000000
c0028f77:	89 c3                	mov    ebx,eax
c0028f79:	d3 eb                	shr    ebx,cl
c0028f7b:	be 01 00 00 00       	mov    esi,0x1
c0028f80:	d3 e6                	shl    esi,cl
c0028f82:	4e                   	dec    esi
c0028f83:	21 f0                	and    eax,esi
c0028f85:	09 f8                	or     eax,edi
c0028f87:	0f 95 c0             	setne  al
c0028f8a:	0f b6 c0             	movzx  eax,al
c0028f8d:	09 c3                	or     ebx,eax
c0028f8f:	89 d9                	mov    ecx,ebx
c0028f91:	c1 e9 08             	shr    ecx,0x8
c0028f94:	f6 c3 7f             	test   bl,0x7f
c0028f97:	0f 95 c0             	setne  al
c0028f9a:	09 c8                	or     eax,ecx
c0028f9c:	83 e0 01             	and    eax,0x1
c0028f9f:	c1 eb 07             	shr    ebx,0x7
c0028fa2:	21 c3                	and    ebx,eax
c0028fa4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028faa:	09 d1                	or     ecx,edx
c0028fac:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028faf:	eb 76                	jmp    c0029027 <__truncdfsf2+0x11c>
c0028fb1:	83 c6 80             	add    esi,0xffffff80
c0028fb4:	7e 1d                	jle    c0028fd3 <__truncdfsf2+0xc8>
c0028fb6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028fbc:	75 0b                	jne    c0028fc9 <__truncdfsf2+0xbe>
c0028fbe:	09 f8                	or     eax,edi
c0028fc0:	74 09                	je     c0028fcb <__truncdfsf2+0xc0>
c0028fc2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028fc7:	eb 02                	jmp    c0028fcb <__truncdfsf2+0xc0>
c0028fc9:	31 c0                	xor    eax,eax
c0028fcb:	c1 fa 17             	sar    edx,0x17
c0028fce:	80 ca ff             	or     dl,0xff
c0028fd1:	eb 0e                	jmp    c0028fe1 <__truncdfsf2+0xd6>
c0028fd3:	c1 fa 1f             	sar    edx,0x1f
c0028fd6:	c1 e2 08             	shl    edx,0x8
c0028fd9:	09 ca                	or     edx,ecx
c0028fdb:	eb 04                	jmp    c0028fe1 <__truncdfsf2+0xd6>
c0028fdd:	31 d2                	xor    edx,edx
c0028fdf:	31 c0                	xor    eax,eax
c0028fe1:	c1 e2 17             	shl    edx,0x17
c0028fe4:	c1 e8 08             	shr    eax,0x8
c0028fe7:	09 d0                	or     eax,edx
c0028fe9:	eb 3c                	jmp    c0029027 <__truncdfsf2+0x11c>
c0028feb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028ff1:	89 ca                	mov    edx,ecx
c0028ff3:	c1 fa 0b             	sar    edx,0xb
c0028ff6:	c1 e2 08             	shl    edx,0x8
c0028ff9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028ffc:	31 db                	xor    ebx,ebx
c0028ffe:	85 ff                	test   edi,edi
c0029000:	0f 95 c3             	setne  bl
c0029003:	09 d8                	or     eax,ebx
c0029005:	89 c3                	mov    ebx,eax
c0029007:	c1 eb 08             	shr    ebx,0x8
c002900a:	a8 7f                	test   al,0x7f
c002900c:	0f 95 c2             	setne  dl
c002900f:	89 d6                	mov    esi,edx
c0029011:	09 de                	or     esi,ebx
c0029013:	83 e6 01             	and    esi,0x1
c0029016:	c1 e8 07             	shr    eax,0x7
c0029019:	21 f0                	and    eax,esi
c002901b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002901e:	09 ca                	or     edx,ecx
c0029020:	c1 e2 17             	shl    edx,0x17
c0029023:	09 da                	or     edx,ebx
c0029025:	01 d0                	add    eax,edx
c0029027:	83 c4 0c             	add    esp,0xc
c002902a:	5b                   	pop    ebx
c002902b:	5e                   	pop    esi
c002902c:	5f                   	pop    edi
c002902d:	5d                   	pop    ebp
c002902e:	c3                   	ret    

c002902f <__extendsfdf2>:
c002902f:	55                   	push   ebp
c0029030:	89 e5                	mov    ebp,esp
c0029032:	57                   	push   edi
c0029033:	56                   	push   esi
c0029034:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029037:	89 d1                	mov    ecx,edx
c0029039:	c1 f9 17             	sar    ecx,0x17
c002903c:	c1 e2 08             	shl    edx,0x8
c002903f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029045:	89 c8                	mov    eax,ecx
c0029047:	80 e4 f8             	and    ah,0xf8
c002904a:	8d 71 01             	lea    esi,[ecx+0x1]
c002904d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029053:	75 27                	jne    c002907c <__extendsfdf2+0x4d>
c0029055:	81 e1 ff 00 00 00    	and    ecx,0xff
c002905b:	75 18                	jne    c0029075 <__extendsfdf2+0x46>
c002905d:	85 d2                	test   edx,edx
c002905f:	74 20                	je     c0029081 <__extendsfdf2+0x52>
c0029061:	41                   	inc    ecx
c0029062:	01 d2                	add    edx,edx
c0029064:	79 fb                	jns    c0029061 <__extendsfdf2+0x32>
c0029066:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002906c:	29 c8                	sub    eax,ecx
c002906e:	05 81 03 00 00       	add    eax,0x381
c0029073:	eb 0c                	jmp    c0029081 <__extendsfdf2+0x52>
c0029075:	05 00 07 00 00       	add    eax,0x700
c002907a:	eb 05                	jmp    c0029081 <__extendsfdf2+0x52>
c002907c:	05 80 03 00 00       	add    eax,0x380
c0029081:	c1 e0 14             	shl    eax,0x14
c0029084:	89 c1                	mov    ecx,eax
c0029086:	89 d0                	mov    eax,edx
c0029088:	c1 e8 0b             	shr    eax,0xb
c002908b:	09 c1                	or     ecx,eax
c002908d:	c1 e2 15             	shl    edx,0x15
c0029090:	89 d0                	mov    eax,edx
c0029092:	89 ca                	mov    edx,ecx
c0029094:	5e                   	pop    esi
c0029095:	5f                   	pop    edi
c0029096:	5d                   	pop    ebp
c0029097:	c3                   	ret    
c0029098:	66 90                	xchg   ax,ax
c002909a:	66 90                	xchg   ax,ax
c002909c:	66 90                	xchg   ax,ax
c002909e:	66 90                	xchg   ax,ax

c00290a0 <fabs>:
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00290aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00290ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00290b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00290b7:	dd 04 24             	fld    QWORD PTR [esp]
c00290ba:	83 c4 0c             	add    esp,0xc
c00290bd:	c3                   	ret    
c00290be:	66 90                	xchg   ax,ax

c00290c0 <lrint>:
c00290c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00290c4:	83 ec 04             	sub    esp,0x4
c00290c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00290ca:	58                   	pop    eax
c00290cb:	c3                   	ret    

c00290cc <lrintf>:
c00290cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00290d0:	83 ec 04             	sub    esp,0x4
c00290d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00290d6:	58                   	pop    eax
c00290d7:	c3                   	ret    

Disassembly of section .init:

c00290d8 <_init>:
c00290d8:	55                   	push   ebp
c00290d9:	89 e5                	mov    ebp,esp
c00290db:	e8 38 70 fd ff       	call   c0000118 <frame_dummy>
c00290e0:	e8 5b e0 ff ff       	call   c0027140 <__do_global_ctors_aux>
c00290e5:	5d                   	pop    ebp
c00290e6:	c3                   	ret    

Disassembly of section .fini:

c00290e7 <_fini>:
c00290e7:	55                   	push   ebp
c00290e8:	89 e5                	mov    ebp,esp
c00290ea:	e8 b9 6f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00290ef:	5d                   	pop    ebp
c00290f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00290f2 <Computer::~Computer()>:
c00290f2:	83 ec 0c             	sub    esp,0xc
c00290f5:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c00290fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fe:	89 10                	mov    DWORD PTR [eax],edx
c0029100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029104:	83 ec 0c             	sub    esp,0xc
c0029107:	50                   	push   eax
c0029108:	e8 97 ac fe ff       	call   c0013da4 <Device::~Device()>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	90                   	nop
c0029111:	83 c4 0c             	add    esp,0xc
c0029114:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029116 <Computer::~Computer()>:
c0029116:	83 ec 0c             	sub    esp,0xc
c0029119:	83 ec 0c             	sub    esp,0xc
c002911c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029120:	e8 cd ff ff ff       	call   c00290f2 <Computer::~Computer()>
c0029125:	83 c4 10             	add    esp,0x10
c0029128:	83 ec 08             	sub    esp,0x8
c002912b:	68 ec 01 00 00       	push   0x1ec
c0029130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029134:	e8 84 98 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029139:	83 c4 10             	add    esp,0x10
c002913c:	83 c4 0c             	add    esp,0xc
c002913f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029140 <idleCommon()>:
c0029140:	83 ec 0c             	sub    esp,0xc
c0029143:	fa                   	cli    
c0029144:	ff 05 08 26 03 c0    	inc    DWORD PTR ds:0xc0032608
c002914a:	e8 37 51 ff ff       	call   c001e286 <schedule()>
c002914f:	a1 08 26 03 c0       	mov    eax,ds:0xc0032608
c0029154:	48                   	dec    eax
c0029155:	a3 08 26 03 c0       	mov    ds:0xc0032608,eax
c002915a:	75 01                	jne    c002915d <idleCommon()+0x1d>
c002915c:	fb                   	sti    
c002915d:	83 c4 0c             	add    esp,0xc
c0029160:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029162 <LinkedList<UnixFile>::~LinkedList()>:
c0029162:	90                   	nop
c0029163:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029164 <LinkedList<UnixFile>::LinkedList()>:
c0029164:	83 ec 0c             	sub    esp,0xc
c0029167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029175:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002917c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029180:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029195:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002919c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291a7:	83 ec 0c             	sub    esp,0xc
c00291aa:	68 9a af 02 c0       	push   0xc002af9a
c00291af:	e8 e9 98 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00291b4:	83 c4 10             	add    esp,0x10
c00291b7:	90                   	nop
c00291b8:	83 c4 0c             	add    esp,0xc
c00291bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00291bc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00291bc:	83 ec 0c             	sub    esp,0xc
c00291bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00291c4:	75 10                	jne    c00291d6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	68 b4 af 02 c0       	push   0xc002afb4
c00291ce:	e8 00 13 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00291d3:	83 c4 10             	add    esp,0x10
c00291d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291da:	8b 00                	mov    eax,DWORD PTR [eax]
c00291dc:	85 c0                	test   eax,eax
c00291de:	74 34                	je     c0029214 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00291e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291e7:	85 c0                	test   eax,eax
c00291e9:	74 29                	je     c0029214 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00291eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029201:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029208:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002920b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029212:	eb 65                	jmp    c0029279 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029218:	8b 00                	mov    eax,DWORD PTR [eax]
c002921a:	85 c0                	test   eax,eax
c002921c:	75 4b                	jne    c0029269 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002921e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029225:	85 c0                	test   eax,eax
c0029227:	75 40                	jne    c0029269 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029231:	89 10                	mov    DWORD PTR [eax],edx
c0029233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029237:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002923b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002923e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029242:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029245:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002924c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029250:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029253:	85 c0                	test   eax,eax
c0029255:	74 22                	je     c0029279 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029257:	83 ec 0c             	sub    esp,0xc
c002925a:	68 d6 af 02 c0       	push   0xc002afd6
c002925f:	e8 6f 12 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029264:	83 c4 10             	add    esp,0x10
c0029267:	eb 10                	jmp    c0029279 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029269:	83 ec 0c             	sub    esp,0xc
c002926c:	68 e0 af 02 c0       	push   0xc002afe0
c0029271:	e8 5d 12 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029276:	83 c4 10             	add    esp,0x10
c0029279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029280:	8d 50 01             	lea    edx,[eax+0x1]
c0029283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029287:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002928a:	90                   	nop
c002928b:	83 c4 0c             	add    esp,0xc
c002928e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029290 <LinkedList<UnixFile>::getFirstElement()>:
c0029290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029294:	8b 00                	mov    eax,DWORD PTR [eax]
c0029296:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029298 <LinkedList<UnixFile>::removeFirst()>:
c0029298:	83 ec 0c             	sub    esp,0xc
c002929b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929f:	8b 00                	mov    eax,DWORD PTR [eax]
c00292a1:	85 c0                	test   eax,eax
c00292a3:	75 12                	jne    c00292b7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00292a5:	83 ec 0c             	sub    esp,0xc
c00292a8:	68 ec af 02 c0       	push   0xc002afec
c00292ad:	e8 21 12 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00292b2:	83 c4 10             	add    esp,0x10
c00292b5:	eb 7e                	jmp    c0029335 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00292b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292c1:	85 c0                	test   eax,eax
c00292c3:	74 10                	je     c00292d5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00292c5:	83 ec 0c             	sub    esp,0xc
c00292c8:	68 37 b0 02 c0       	push   0xc002b037
c00292cd:	e8 01 12 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00292d2:	83 c4 10             	add    esp,0x10
c00292d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00292db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292de:	85 c0                	test   eax,eax
c00292e0:	75 33                	jne    c0029315 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00292e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292fe:	83 f8 01             	cmp    eax,0x1
c0029301:	74 21                	je     c0029324 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029303:	83 ec 0c             	sub    esp,0xc
c0029306:	68 10 b0 02 c0       	push   0xc002b010
c002930b:	e8 c3 11 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029310:	83 c4 10             	add    esp,0x10
c0029313:	eb 0f                	jmp    c0029324 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029319:	8b 00                	mov    eax,DWORD PTR [eax]
c002931b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002931e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029322:	89 10                	mov    DWORD PTR [eax],edx
c0029324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002932b:	8d 50 ff             	lea    edx,[eax-0x1]
c002932e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029332:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029335:	83 c4 0c             	add    esp,0xc
c0029338:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002933a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002933a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002933e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029341:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029342 <DriverlessDevice::~DriverlessDevice()>:
c0029342:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0029347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002934b:	89 10                	mov    DWORD PTR [eax],edx
c002934d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029351:	50                   	push   eax
c0029352:	e8 4d aa fe ff       	call   c0013da4 <Device::~Device()>
c0029357:	83 c4 04             	add    esp,0x4
c002935a:	90                   	nop
c002935b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002935c <DriverlessDevice::~DriverlessDevice()>:
c002935c:	83 ec 0c             	sub    esp,0xc
c002935f:	83 ec 0c             	sub    esp,0xc
c0029362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029366:	e8 d7 ff ff ff       	call   c0029342 <DriverlessDevice::~DriverlessDevice()>
c002936b:	83 c4 10             	add    esp,0x10
c002936e:	83 ec 08             	sub    esp,0x8
c0029371:	68 58 01 00 00       	push   0x158
c0029376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002937a:	e8 3e 96 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c002937f:	83 c4 10             	add    esp,0x10
c0029382:	83 c4 0c             	add    esp,0xc
c0029385:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029386 <LinkedList<Device>::addElement(Device*)>:
c0029386:	83 ec 0c             	sub    esp,0xc
c0029389:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002938e:	75 10                	jne    c00293a0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029390:	83 ec 0c             	sub    esp,0xc
c0029393:	68 b4 af 02 c0       	push   0xc002afb4
c0029398:	e8 36 11 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c002939d:	83 c4 10             	add    esp,0x10
c00293a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00293a6:	85 c0                	test   eax,eax
c00293a8:	74 3a                	je     c00293e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00293aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b1:	85 c0                	test   eax,eax
c00293b3:	74 2f                	je     c00293e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00293b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293c0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00293c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293d8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00293e2:	eb 68                	jmp    c002944c <LinkedList<Device>::addElement(Device*)+0xc6>
c00293e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ea:	85 c0                	test   eax,eax
c00293ec:	75 4e                	jne    c002943c <LinkedList<Device>::addElement(Device*)+0xb6>
c00293ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293f5:	85 c0                	test   eax,eax
c00293f7:	75 43                	jne    c002943c <LinkedList<Device>::addElement(Device*)+0xb6>
c00293f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029401:	89 10                	mov    DWORD PTR [eax],edx
c0029403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029407:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002940b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002940e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029415:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002941f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029423:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029426:	85 c0                	test   eax,eax
c0029428:	74 22                	je     c002944c <LinkedList<Device>::addElement(Device*)+0xc6>
c002942a:	83 ec 0c             	sub    esp,0xc
c002942d:	68 d6 af 02 c0       	push   0xc002afd6
c0029432:	e8 9c 10 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029437:	83 c4 10             	add    esp,0x10
c002943a:	eb 10                	jmp    c002944c <LinkedList<Device>::addElement(Device*)+0xc6>
c002943c:	83 ec 0c             	sub    esp,0xc
c002943f:	68 e0 af 02 c0       	push   0xc002afe0
c0029444:	e8 8a 10 ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029449:	83 c4 10             	add    esp,0x10
c002944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029450:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029453:	8d 50 01             	lea    edx,[eax+0x1]
c0029456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002945d:	90                   	nop
c002945e:	83 c4 0c             	add    esp,0xc
c0029461:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029462 <LinkedList<Device>::LinkedList()>:
c0029462:	83 ec 0c             	sub    esp,0xc
c0029465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029469:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002946f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029473:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002947a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029489:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002948f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029493:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002949a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294a5:	83 ec 0c             	sub    esp,0xc
c00294a8:	68 9a af 02 c0       	push   0xc002af9a
c00294ad:	e8 eb 95 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c00294b2:	83 c4 10             	add    esp,0x10
c00294b5:	90                   	nop
c00294b6:	83 c4 0c             	add    esp,0xc
c00294b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00294ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00294ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294be:	8b 00                	mov    eax,DWORD PTR [eax]
c00294c0:	85 c0                	test   eax,eax
c00294c2:	75 0e                	jne    c00294d2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00294c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294cb:	85 c0                	test   eax,eax
c00294cd:	75 03                	jne    c00294d2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00294cf:	b0 01                	mov    al,0x1
c00294d1:	c3                   	ret    
c00294d2:	b0 00                	mov    al,0x0
c00294d4:	90                   	nop
c00294d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00294d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00294d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294da:	8b 00                	mov    eax,DWORD PTR [eax]
c00294dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00294de <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00294de:	83 ec 0c             	sub    esp,0xc
c00294e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00294e7:	85 c0                	test   eax,eax
c00294e9:	75 15                	jne    c0029500 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00294eb:	83 ec 0c             	sub    esp,0xc
c00294ee:	68 ec af 02 c0       	push   0xc002afec
c00294f3:	e8 db 0f ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00294f8:	83 c4 10             	add    esp,0x10
c00294fb:	e9 88 00 00 00       	jmp    c0029588 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029507:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002950a:	85 c0                	test   eax,eax
c002950c:	0f 95 c0             	setne  al
c002950f:	84 c0                	test   al,al
c0029511:	74 10                	je     c0029523 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029513:	83 ec 0c             	sub    esp,0xc
c0029516:	68 37 b0 02 c0       	push   0xc002b037
c002951b:	e8 b3 0f ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029520:	83 c4 10             	add    esp,0x10
c0029523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029527:	8b 00                	mov    eax,DWORD PTR [eax]
c0029529:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002952c:	85 c0                	test   eax,eax
c002952e:	0f 94 c0             	sete   al
c0029531:	84 c0                	test   al,al
c0029533:	74 33                	je     c0029568 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029539:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029551:	83 f8 01             	cmp    eax,0x1
c0029554:	74 21                	je     c0029577 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029556:	83 ec 0c             	sub    esp,0xc
c0029559:	68 10 b0 02 c0       	push   0xc002b010
c002955e:	e8 70 0f ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029563:	83 c4 10             	add    esp,0x10
c0029566:	eb 0f                	jmp    c0029577 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002956c:	8b 00                	mov    eax,DWORD PTR [eax]
c002956e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029575:	89 10                	mov    DWORD PTR [eax],edx
c0029577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002957e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029585:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029588:	83 c4 0c             	add    esp,0xc
c002958b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002958c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002958c:	83 ec 0c             	sub    esp,0xc
c002958f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029594:	75 10                	jne    c00295a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029596:	83 ec 0c             	sub    esp,0xc
c0029599:	68 b4 af 02 c0       	push   0xc002afb4
c002959e:	e8 30 0f ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00295a3:	83 c4 10             	add    esp,0x10
c00295a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ac:	85 c0                	test   eax,eax
c00295ae:	74 34                	je     c00295e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00295b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295b7:	85 c0                	test   eax,eax
c00295b9:	74 29                	je     c00295e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00295bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295c6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00295c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00295d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295db:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00295e2:	eb 65                	jmp    c0029649 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00295e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ea:	85 c0                	test   eax,eax
c00295ec:	75 4b                	jne    c0029639 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00295ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295f5:	85 c0                	test   eax,eax
c00295f7:	75 40                	jne    c0029639 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00295f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029601:	89 10                	mov    DWORD PTR [eax],edx
c0029603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029607:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002960b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002960e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029615:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002961c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029620:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029623:	85 c0                	test   eax,eax
c0029625:	74 22                	je     c0029649 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029627:	83 ec 0c             	sub    esp,0xc
c002962a:	68 d6 af 02 c0       	push   0xc002afd6
c002962f:	e8 9f 0e ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029634:	83 c4 10             	add    esp,0x10
c0029637:	eb 10                	jmp    c0029649 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029639:	83 ec 0c             	sub    esp,0xc
c002963c:	68 e0 af 02 c0       	push   0xc002afe0
c0029641:	e8 8d 0e ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029646:	83 c4 10             	add    esp,0x10
c0029649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029650:	8d 50 01             	lea    edx,[eax+0x1]
c0029653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029657:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002965a:	90                   	nop
c002965b:	83 c4 0c             	add    esp,0xc
c002965e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029660 <ACPI::~ACPI()>:
c0029660:	83 ec 0c             	sub    esp,0xc
c0029663:	ba ac c1 02 c0       	mov    edx,0xc002c1ac
c0029668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002966c:	89 10                	mov    DWORD PTR [eax],edx
c002966e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029672:	83 ec 0c             	sub    esp,0xc
c0029675:	50                   	push   eax
c0029676:	e8 29 a7 fe ff       	call   c0013da4 <Device::~Device()>
c002967b:	83 c4 10             	add    esp,0x10
c002967e:	90                   	nop
c002967f:	83 c4 0c             	add    esp,0xc
c0029682:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029684 <ACPI::~ACPI()>:
c0029684:	83 ec 0c             	sub    esp,0xc
c0029687:	83 ec 0c             	sub    esp,0xc
c002968a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002968e:	e8 cd ff ff ff       	call   c0029660 <ACPI::~ACPI()>
c0029693:	83 c4 10             	add    esp,0x10
c0029696:	83 ec 08             	sub    esp,0x8
c0029699:	68 64 12 00 00       	push   0x1264
c002969e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296a2:	e8 16 93 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00296a7:	83 c4 10             	add    esp,0x10
c00296aa:	83 c4 0c             	add    esp,0xc
c00296ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00296ae <LinkedList<Device>::~LinkedList()>:
c00296ae:	90                   	nop
c00296af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00296b0 <LinkedList<Device>::isEmpty()>:
c00296b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00296b6:	85 c0                	test   eax,eax
c00296b8:	75 0e                	jne    c00296c8 <LinkedList<Device>::isEmpty()+0x18>
c00296ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296c1:	85 c0                	test   eax,eax
c00296c3:	75 03                	jne    c00296c8 <LinkedList<Device>::isEmpty()+0x18>
c00296c5:	b0 01                	mov    al,0x1
c00296c7:	c3                   	ret    
c00296c8:	b0 00                	mov    al,0x0
c00296ca:	90                   	nop
c00296cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00296cc <LinkedList<Device>::getFirstElement()>:
c00296cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00296d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00296d4 <LinkedList<Device>::removeFirst()>:
c00296d4:	83 ec 0c             	sub    esp,0xc
c00296d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296db:	8b 00                	mov    eax,DWORD PTR [eax]
c00296dd:	85 c0                	test   eax,eax
c00296df:	75 15                	jne    c00296f6 <LinkedList<Device>::removeFirst()+0x22>
c00296e1:	83 ec 0c             	sub    esp,0xc
c00296e4:	68 ec af 02 c0       	push   0xc002afec
c00296e9:	e8 e5 0d ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c00296ee:	83 c4 10             	add    esp,0x10
c00296f1:	e9 87 00 00 00       	jmp    c002977d <LinkedList<Device>::removeFirst()+0xa9>
c00296f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296fd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029703:	85 c0                	test   eax,eax
c0029705:	74 10                	je     c0029717 <LinkedList<Device>::removeFirst()+0x43>
c0029707:	83 ec 0c             	sub    esp,0xc
c002970a:	68 37 b0 02 c0       	push   0xc002b037
c002970f:	e8 bf 0d ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029714:	83 c4 10             	add    esp,0x10
c0029717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971b:	8b 00                	mov    eax,DWORD PTR [eax]
c002971d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029723:	85 c0                	test   eax,eax
c0029725:	75 33                	jne    c002975a <LinkedList<Device>::removeFirst()+0x86>
c0029727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002972b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029735:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002973c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029740:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029743:	83 f8 01             	cmp    eax,0x1
c0029746:	74 24                	je     c002976c <LinkedList<Device>::removeFirst()+0x98>
c0029748:	83 ec 0c             	sub    esp,0xc
c002974b:	68 10 b0 02 c0       	push   0xc002b010
c0029750:	e8 7e 0d ff ff       	call   c001a4d3 <Krnl::panic(char const*)>
c0029755:	83 c4 10             	add    esp,0x10
c0029758:	eb 12                	jmp    c002976c <LinkedList<Device>::removeFirst()+0x98>
c002975a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029760:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976a:	89 10                	mov    DWORD PTR [eax],edx
c002976c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029770:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029773:	8d 50 ff             	lea    edx,[eax-0x1]
c0029776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002977a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002977d:	83 c4 0c             	add    esp,0xc
c0029780:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029782 <CPU::~CPU()>:
c0029782:	83 ec 0c             	sub    esp,0xc
c0029785:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c002978a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978e:	89 10                	mov    DWORD PTR [eax],edx
c0029790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029794:	83 ec 0c             	sub    esp,0xc
c0029797:	50                   	push   eax
c0029798:	e8 07 a6 fe ff       	call   c0013da4 <Device::~Device()>
c002979d:	83 c4 10             	add    esp,0x10
c00297a0:	90                   	nop
c00297a1:	83 c4 0c             	add    esp,0xc
c00297a4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00297a6 <CPU::~CPU()>:
c00297a6:	83 ec 0c             	sub    esp,0xc
c00297a9:	83 ec 0c             	sub    esp,0xc
c00297ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297b0:	e8 cd ff ff ff       	call   c0029782 <CPU::~CPU()>
c00297b5:	83 c4 10             	add    esp,0x10
c00297b8:	83 ec 08             	sub    esp,0x8
c00297bb:	68 98 11 00 00       	push   0x1198
c00297c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c4:	e8 f4 91 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00297c9:	83 c4 10             	add    esp,0x10
c00297cc:	83 c4 0c             	add    esp,0xc
c00297cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00297d0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00297d0:	90                   	nop
c00297d1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00297d2 <ThreadControlBlock::ThreadControlBlock()>:
c00297d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00297dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00297e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297ec:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00297f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297f7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00297fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029802:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002980d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029811:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029815:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029819:	90                   	nop
c002981a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002981c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002981c:	83 ec 0c             	sub    esp,0xc
c002981f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029823:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029838:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002983f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029843:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029858:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002985f:	83 ec 0c             	sub    esp,0xc
c0029862:	68 9a af 02 c0       	push   0xc002af9a
c0029867:	e8 31 92 fe ff       	call   c0012a9d <Dbg::kprintf(char const*, ...)>
c002986c:	83 c4 10             	add    esp,0x10
c002986f:	90                   	nop
c0029870:	83 c4 0c             	add    esp,0xc
c0029873:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029874 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029874:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002987b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002987c <Vm::_FPUState::_FPUState()>:
c002987c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029880:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029887:	90                   	nop
c0029888:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002988a <PCI::~PCI()>:
c002988a:	83 ec 0c             	sub    esp,0xc
c002988d:	ba 30 d7 02 c0       	mov    edx,0xc002d730
c0029892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029896:	89 10                	mov    DWORD PTR [eax],edx
c0029898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989c:	83 ec 0c             	sub    esp,0xc
c002989f:	50                   	push   eax
c00298a0:	e8 cf 9e fe ff       	call   c0013774 <Bus::~Bus()>
c00298a5:	83 c4 10             	add    esp,0x10
c00298a8:	90                   	nop
c00298a9:	83 c4 0c             	add    esp,0xc
c00298ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00298ae <PCI::~PCI()>:
c00298ae:	83 ec 0c             	sub    esp,0xc
c00298b1:	83 ec 0c             	sub    esp,0xc
c00298b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b8:	e8 cd ff ff ff       	call   c002988a <PCI::~PCI()>
c00298bd:	83 c4 10             	add    esp,0x10
c00298c0:	83 ec 08             	sub    esp,0x8
c00298c3:	68 5c 01 00 00       	push   0x15c
c00298c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298cc:	e8 ec 90 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00298d1:	83 c4 10             	add    esp,0x10
c00298d4:	83 c4 0c             	add    esp,0xc
c00298d7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00298d8 <IDE::~IDE()>:
c00298d8:	83 ec 0c             	sub    esp,0xc
c00298db:	ba 94 d9 02 c0       	mov    edx,0xc002d994
c00298e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e4:	89 10                	mov    DWORD PTR [eax],edx
c00298e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ea:	83 ec 0c             	sub    esp,0xc
c00298ed:	50                   	push   eax
c00298ee:	e8 c7 a9 fe ff       	call   c00142ba <HardDiskController::~HardDiskController()>
c00298f3:	83 c4 10             	add    esp,0x10
c00298f6:	90                   	nop
c00298f7:	83 c4 0c             	add    esp,0xc
c00298fa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00298fc <IDE::~IDE()>:
c00298fc:	83 ec 0c             	sub    esp,0xc
c00298ff:	83 ec 0c             	sub    esp,0xc
c0029902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029906:	e8 cd ff ff ff       	call   c00298d8 <IDE::~IDE()>
c002990b:	83 c4 10             	add    esp,0x10
c002990e:	83 ec 08             	sub    esp,0x8
c0029911:	68 70 02 00 00       	push   0x270
c0029916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002991a:	e8 9e 90 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c002991f:	83 c4 10             	add    esp,0x10
c0029922:	83 c4 0c             	add    esp,0xc
c0029925:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029926 <SATABus::~SATABus()>:
c0029926:	83 ec 0c             	sub    esp,0xc
c0029929:	ba 74 da 02 c0       	mov    edx,0xc002da74
c002992e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029932:	89 10                	mov    DWORD PTR [eax],edx
c0029934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029938:	83 ec 0c             	sub    esp,0xc
c002993b:	50                   	push   eax
c002993c:	e8 79 a9 fe ff       	call   c00142ba <HardDiskController::~HardDiskController()>
c0029941:	83 c4 10             	add    esp,0x10
c0029944:	90                   	nop
c0029945:	83 c4 0c             	add    esp,0xc
c0029948:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002994a <SATABus::~SATABus()>:
c002994a:	83 ec 0c             	sub    esp,0xc
c002994d:	83 ec 0c             	sub    esp,0xc
c0029950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029954:	e8 cd ff ff ff       	call   c0029926 <SATABus::~SATABus()>
c0029959:	83 c4 10             	add    esp,0x10
c002995c:	83 ec 08             	sub    esp,0x8
c002995f:	68 64 01 00 00       	push   0x164
c0029964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029968:	e8 50 90 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c002996d:	83 c4 10             	add    esp,0x10
c0029970:	83 c4 0c             	add    esp,0xc
c0029973:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029974 <ATA::~ATA()>:
c0029974:	83 ec 0c             	sub    esp,0xc
c0029977:	ba c0 da 02 c0       	mov    edx,0xc002dac0
c002997c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029980:	89 10                	mov    DWORD PTR [eax],edx
c0029982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029986:	83 ec 0c             	sub    esp,0xc
c0029989:	50                   	push   eax
c002998a:	e8 1d aa fe ff       	call   c00143ac <PhysicalDisk::~PhysicalDisk()>
c002998f:	83 c4 10             	add    esp,0x10
c0029992:	90                   	nop
c0029993:	83 c4 0c             	add    esp,0xc
c0029996:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029998 <ATA::~ATA()>:
c0029998:	83 ec 0c             	sub    esp,0xc
c002999b:	83 ec 0c             	sub    esp,0xc
c002999e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a2:	e8 cd ff ff ff       	call   c0029974 <ATA::~ATA()>
c00299a7:	83 c4 10             	add    esp,0x10
c00299aa:	83 ec 08             	sub    esp,0x8
c00299ad:	68 7c 01 00 00       	push   0x17c
c00299b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299b6:	e8 02 90 fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c00299bb:	83 c4 10             	add    esp,0x10
c00299be:	83 c4 0c             	add    esp,0xc
c00299c1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00299c2 <ATAPI::~ATAPI()>:
c00299c2:	83 ec 0c             	sub    esp,0xc
c00299c5:	ba f8 da 02 c0       	mov    edx,0xc002daf8
c00299ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ce:	89 10                	mov    DWORD PTR [eax],edx
c00299d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d4:	83 ec 0c             	sub    esp,0xc
c00299d7:	50                   	push   eax
c00299d8:	e8 cf a9 fe ff       	call   c00143ac <PhysicalDisk::~PhysicalDisk()>
c00299dd:	83 c4 10             	add    esp,0x10
c00299e0:	90                   	nop
c00299e1:	83 c4 0c             	add    esp,0xc
c00299e4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00299e6 <ATAPI::~ATAPI()>:
c00299e6:	83 ec 0c             	sub    esp,0xc
c00299e9:	83 ec 0c             	sub    esp,0xc
c00299ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f0:	e8 cd ff ff ff       	call   c00299c2 <ATAPI::~ATAPI()>
c00299f5:	83 c4 10             	add    esp,0x10
c00299f8:	83 ec 08             	sub    esp,0x8
c00299fb:	68 80 01 00 00       	push   0x180
c0029a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a04:	e8 b4 8f fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029a09:	83 c4 10             	add    esp,0x10
c0029a0c:	83 c4 0c             	add    esp,0xc
c0029a0f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029a10 <SATA::~SATA()>:
c0029a10:	83 ec 0c             	sub    esp,0xc
c0029a13:	ba ac db 02 c0       	mov    edx,0xc002dbac
c0029a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a1c:	89 10                	mov    DWORD PTR [eax],edx
c0029a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a22:	83 ec 0c             	sub    esp,0xc
c0029a25:	50                   	push   eax
c0029a26:	e8 81 a9 fe ff       	call   c00143ac <PhysicalDisk::~PhysicalDisk()>
c0029a2b:	83 c4 10             	add    esp,0x10
c0029a2e:	90                   	nop
c0029a2f:	83 c4 0c             	add    esp,0xc
c0029a32:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029a34 <SATA::~SATA()>:
c0029a34:	83 ec 0c             	sub    esp,0xc
c0029a37:	83 ec 0c             	sub    esp,0xc
c0029a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a3e:	e8 cd ff ff ff       	call   c0029a10 <SATA::~SATA()>
c0029a43:	83 c4 10             	add    esp,0x10
c0029a46:	83 ec 08             	sub    esp,0x8
c0029a49:	68 7c 01 00 00       	push   0x17c
c0029a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a52:	e8 66 8f fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029a57:	83 c4 10             	add    esp,0x10
c0029a5a:	83 c4 0c             	add    esp,0xc
c0029a5d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029a5e <SATAPI::~SATAPI()>:
c0029a5e:	83 ec 0c             	sub    esp,0xc
c0029a61:	ba 88 dc 02 c0       	mov    edx,0xc002dc88
c0029a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a6a:	89 10                	mov    DWORD PTR [eax],edx
c0029a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a70:	83 ec 0c             	sub    esp,0xc
c0029a73:	50                   	push   eax
c0029a74:	e8 33 a9 fe ff       	call   c00143ac <PhysicalDisk::~PhysicalDisk()>
c0029a79:	83 c4 10             	add    esp,0x10
c0029a7c:	90                   	nop
c0029a7d:	83 c4 0c             	add    esp,0xc
c0029a80:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029a82 <SATAPI::~SATAPI()>:
c0029a82:	83 ec 0c             	sub    esp,0xc
c0029a85:	83 ec 0c             	sub    esp,0xc
c0029a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a8c:	e8 cd ff ff ff       	call   c0029a5e <SATAPI::~SATAPI()>
c0029a91:	83 c4 10             	add    esp,0x10
c0029a94:	83 ec 08             	sub    esp,0x8
c0029a97:	68 80 01 00 00       	push   0x180
c0029a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aa0:	e8 18 8f fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029aa5:	83 c4 10             	add    esp,0x10
c0029aa8:	83 c4 0c             	add    esp,0xc
c0029aab:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029aac <AVX::~AVX()>:
c0029aac:	83 ec 0c             	sub    esp,0xc
c0029aaf:	ba c8 dc 02 c0       	mov    edx,0xc002dcc8
c0029ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab8:	89 10                	mov    DWORD PTR [eax],edx
c0029aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029abe:	83 ec 0c             	sub    esp,0xc
c0029ac1:	50                   	push   eax
c0029ac2:	e8 69 a9 fe ff       	call   c0014430 <FPU::~FPU()>
c0029ac7:	83 c4 10             	add    esp,0x10
c0029aca:	90                   	nop
c0029acb:	83 c4 0c             	add    esp,0xc
c0029ace:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029ad0 <AVX::~AVX()>:
c0029ad0:	83 ec 0c             	sub    esp,0xc
c0029ad3:	83 ec 0c             	sub    esp,0xc
c0029ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ada:	e8 cd ff ff ff       	call   c0029aac <AVX::~AVX()>
c0029adf:	83 c4 10             	add    esp,0x10
c0029ae2:	83 ec 08             	sub    esp,0x8
c0029ae5:	68 58 01 00 00       	push   0x158
c0029aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aee:	e8 ca 8e fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029af3:	83 c4 10             	add    esp,0x10
c0029af6:	83 c4 0c             	add    esp,0xc
c0029af9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029afa <MMX::~MMX()>:
c0029afa:	83 ec 0c             	sub    esp,0xc
c0029afd:	ba 08 dd 02 c0       	mov    edx,0xc002dd08
c0029b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b06:	89 10                	mov    DWORD PTR [eax],edx
c0029b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b0c:	83 ec 0c             	sub    esp,0xc
c0029b0f:	50                   	push   eax
c0029b10:	e8 1b a9 fe ff       	call   c0014430 <FPU::~FPU()>
c0029b15:	83 c4 10             	add    esp,0x10
c0029b18:	90                   	nop
c0029b19:	83 c4 0c             	add    esp,0xc
c0029b1c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029b1e <MMX::~MMX()>:
c0029b1e:	83 ec 0c             	sub    esp,0xc
c0029b21:	83 ec 0c             	sub    esp,0xc
c0029b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b28:	e8 cd ff ff ff       	call   c0029afa <MMX::~MMX()>
c0029b2d:	83 c4 10             	add    esp,0x10
c0029b30:	83 ec 08             	sub    esp,0x8
c0029b33:	68 58 01 00 00       	push   0x158
c0029b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b3c:	e8 7c 8e fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029b41:	83 c4 10             	add    esp,0x10
c0029b44:	83 c4 0c             	add    esp,0xc
c0029b47:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029b48 <SSE::~SSE()>:
c0029b48:	83 ec 0c             	sub    esp,0xc
c0029b4b:	ba 48 dd 02 c0       	mov    edx,0xc002dd48
c0029b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b54:	89 10                	mov    DWORD PTR [eax],edx
c0029b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b5a:	83 ec 0c             	sub    esp,0xc
c0029b5d:	50                   	push   eax
c0029b5e:	e8 cd a8 fe ff       	call   c0014430 <FPU::~FPU()>
c0029b63:	83 c4 10             	add    esp,0x10
c0029b66:	90                   	nop
c0029b67:	83 c4 0c             	add    esp,0xc
c0029b6a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029b6c <SSE::~SSE()>:
c0029b6c:	83 ec 0c             	sub    esp,0xc
c0029b6f:	83 ec 0c             	sub    esp,0xc
c0029b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b76:	e8 cd ff ff ff       	call   c0029b48 <SSE::~SSE()>
c0029b7b:	83 c4 10             	add    esp,0x10
c0029b7e:	83 ec 08             	sub    esp,0x8
c0029b81:	68 58 01 00 00       	push   0x158
c0029b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b8a:	e8 2e 8e fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029b8f:	83 c4 10             	add    esp,0x10
c0029b92:	83 c4 0c             	add    esp,0xc
c0029b95:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029b96 <x87::~x87()>:
c0029b96:	83 ec 0c             	sub    esp,0xc
c0029b99:	ba 88 dd 02 c0       	mov    edx,0xc002dd88
c0029b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ba2:	89 10                	mov    DWORD PTR [eax],edx
c0029ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ba8:	83 ec 0c             	sub    esp,0xc
c0029bab:	50                   	push   eax
c0029bac:	e8 7f a8 fe ff       	call   c0014430 <FPU::~FPU()>
c0029bb1:	83 c4 10             	add    esp,0x10
c0029bb4:	90                   	nop
c0029bb5:	83 c4 0c             	add    esp,0xc
c0029bb8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029bba <x87::~x87()>:
c0029bba:	83 ec 0c             	sub    esp,0xc
c0029bbd:	83 ec 0c             	sub    esp,0xc
c0029bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bc4:	e8 cd ff ff ff       	call   c0029b96 <x87::~x87()>
c0029bc9:	83 c4 10             	add    esp,0x10
c0029bcc:	83 ec 08             	sub    esp,0x8
c0029bcf:	68 58 01 00 00       	push   0x158
c0029bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bd8:	e8 e0 8d fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029bdd:	83 c4 10             	add    esp,0x10
c0029be0:	83 c4 0c             	add    esp,0xc
c0029be3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029be4 <IOAPIC::~IOAPIC()>:
c0029be4:	83 ec 0c             	sub    esp,0xc
c0029be7:	ba e0 de 02 c0       	mov    edx,0xc002dee0
c0029bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf0:	89 10                	mov    DWORD PTR [eax],edx
c0029bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf6:	83 ec 0c             	sub    esp,0xc
c0029bf9:	50                   	push   eax
c0029bfa:	e8 a5 a1 fe ff       	call   c0013da4 <Device::~Device()>
c0029bff:	83 c4 10             	add    esp,0x10
c0029c02:	90                   	nop
c0029c03:	83 c4 0c             	add    esp,0xc
c0029c06:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029c08 <IOAPIC::~IOAPIC()>:
c0029c08:	83 ec 0c             	sub    esp,0xc
c0029c0b:	83 ec 0c             	sub    esp,0xc
c0029c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c12:	e8 cd ff ff ff       	call   c0029be4 <IOAPIC::~IOAPIC()>
c0029c17:	83 c4 10             	add    esp,0x10
c0029c1a:	83 ec 08             	sub    esp,0x8
c0029c1d:	68 68 01 00 00       	push   0x168
c0029c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c26:	e8 92 8d fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029c2b:	83 c4 10             	add    esp,0x10
c0029c2e:	83 c4 0c             	add    esp,0xc
c0029c31:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029c32 <APIC::~APIC()>:
c0029c32:	83 ec 0c             	sub    esp,0xc
c0029c35:	ba 98 de 02 c0       	mov    edx,0xc002de98
c0029c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c3e:	89 10                	mov    DWORD PTR [eax],edx
c0029c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c44:	83 ec 0c             	sub    esp,0xc
c0029c47:	50                   	push   eax
c0029c48:	e8 ad ac fe ff       	call   c00148fa <InterruptController::~InterruptController()>
c0029c4d:	83 c4 10             	add    esp,0x10
c0029c50:	90                   	nop
c0029c51:	83 c4 0c             	add    esp,0xc
c0029c54:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029c56 <APIC::~APIC()>:
c0029c56:	83 ec 0c             	sub    esp,0xc
c0029c59:	83 ec 0c             	sub    esp,0xc
c0029c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c60:	e8 cd ff ff ff       	call   c0029c32 <APIC::~APIC()>
c0029c65:	83 c4 10             	add    esp,0x10
c0029c68:	83 ec 08             	sub    esp,0x8
c0029c6b:	68 58 21 00 00       	push   0x2158
c0029c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c74:	e8 44 8d fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029c79:	83 c4 10             	add    esp,0x10
c0029c7c:	83 c4 0c             	add    esp,0xc
c0029c7f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029c80 <PIC::~PIC()>:
c0029c80:	83 ec 0c             	sub    esp,0xc
c0029c83:	ba 30 df 02 c0       	mov    edx,0xc002df30
c0029c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c8c:	89 10                	mov    DWORD PTR [eax],edx
c0029c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c92:	83 ec 0c             	sub    esp,0xc
c0029c95:	50                   	push   eax
c0029c96:	e8 5f ac fe ff       	call   c00148fa <InterruptController::~InterruptController()>
c0029c9b:	83 c4 10             	add    esp,0x10
c0029c9e:	90                   	nop
c0029c9f:	83 c4 0c             	add    esp,0xc
c0029ca2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029ca4 <PIC::~PIC()>:
c0029ca4:	83 ec 0c             	sub    esp,0xc
c0029ca7:	83 ec 0c             	sub    esp,0xc
c0029caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cae:	e8 cd ff ff ff       	call   c0029c80 <PIC::~PIC()>
c0029cb3:	83 c4 10             	add    esp,0x10
c0029cb6:	83 ec 08             	sub    esp,0x8
c0029cb9:	68 58 21 00 00       	push   0x2158
c0029cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cc2:	e8 f6 8c fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029cc7:	83 c4 10             	add    esp,0x10
c0029cca:	83 c4 0c             	add    esp,0xc
c0029ccd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029cce <APICTimer::~APICTimer()>:
c0029cce:	83 ec 0c             	sub    esp,0xc
c0029cd1:	ba 84 df 02 c0       	mov    edx,0xc002df84
c0029cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cda:	89 10                	mov    DWORD PTR [eax],edx
c0029cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ce0:	83 ec 0c             	sub    esp,0xc
c0029ce3:	50                   	push   eax
c0029ce4:	e8 a1 cc fe ff       	call   c001698a <Timer::~Timer()>
c0029ce9:	83 c4 10             	add    esp,0x10
c0029cec:	90                   	nop
c0029ced:	83 c4 0c             	add    esp,0xc
c0029cf0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029cf2 <APICTimer::~APICTimer()>:
c0029cf2:	83 ec 0c             	sub    esp,0xc
c0029cf5:	83 ec 0c             	sub    esp,0xc
c0029cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cfc:	e8 cd ff ff ff       	call   c0029cce <APICTimer::~APICTimer()>
c0029d01:	83 c4 10             	add    esp,0x10
c0029d04:	83 ec 08             	sub    esp,0x8
c0029d07:	68 60 01 00 00       	push   0x160
c0029d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d10:	e8 a8 8c fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029d15:	83 c4 10             	add    esp,0x10
c0029d18:	83 c4 0c             	add    esp,0xc
c0029d1b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029d1c <PIT::~PIT()>:
c0029d1c:	83 ec 0c             	sub    esp,0xc
c0029d1f:	ba d4 df 02 c0       	mov    edx,0xc002dfd4
c0029d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d28:	89 10                	mov    DWORD PTR [eax],edx
c0029d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d2e:	83 ec 0c             	sub    esp,0xc
c0029d31:	50                   	push   eax
c0029d32:	e8 53 cc fe ff       	call   c001698a <Timer::~Timer()>
c0029d37:	83 c4 10             	add    esp,0x10
c0029d3a:	90                   	nop
c0029d3b:	83 c4 0c             	add    esp,0xc
c0029d3e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029d40 <PIT::~PIT()>:
c0029d40:	83 ec 0c             	sub    esp,0xc
c0029d43:	83 ec 0c             	sub    esp,0xc
c0029d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d4a:	e8 cd ff ff ff       	call   c0029d1c <PIT::~PIT()>
c0029d4f:	83 c4 10             	add    esp,0x10
c0029d52:	83 ec 08             	sub    esp,0x8
c0029d55:	68 5c 01 00 00       	push   0x15c
c0029d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d5e:	e8 5a 8c fe ff       	call   c00129bd <operator delete(void*, unsigned long)>
c0029d63:	83 c4 10             	add    esp,0x10
c0029d66:	83 c4 0c             	add    esp,0xc
c0029d69:	c3                   	ret    
