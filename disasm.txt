
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 86 02 00       	call   c00286d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 92 02 c0       	mov    ebx,0xc0029282
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 92 02 c0    	cmp    ebx,0xc0029290
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 da 02 c0       	mov    eax,0xc002da78
c0000049:	3d 78 da 02 c0       	cmp    eax,0xc002da78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 da 02 c0       	push   0xc002da78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 da 02 c0       	mov    eax,0xc002da78
c0000075:	2d 78 da 02 c0       	sub    eax,0xc002da78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 da 02 c0       	push   0xc002da78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 92 02 c0       	mov    ebx,0xc0029298
c00000bb:	81 eb 94 92 02 c0    	sub    ebx,0xc0029294
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 92 02 c0       	mov    esi,0xc0029294
c00000ca:	a1 ac e0 02 c0       	mov    eax,ds:0xc002e0ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac e0 02 c0       	mov    ds:0xc002e0ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac e0 02 c0       	mov    eax,ds:0xc002e0ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 da 02 c0       	push   0xc002da78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 e0 02 c0       	push   0xc002e0b0
c000012c:	68 78 da 02 c0       	push   0xc002da78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 85 d6 01 00       	call   c001da20 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 e2 29 01 00       	call   c0012d95 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 63 d6 01 00       	call   c001da20 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 b1 da 01 00       	call   c001de8d <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 5f e0 01 00       	call   c001e444 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 e4 02 c0 	lgdtd  ds:0xc002e4f0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 c0 46 01 00       	call   c0014c99 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 c8 e0 02 c0       	mov    ds:0xc002e0c8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 c8 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 a0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d60],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 a0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d60],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 a0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d60],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 a0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d60],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 a0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d60],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d e0 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0e0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 e4 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f1c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 e4 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f1c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 0c e1 02 c0    	cmp    DWORD PTR ds:0xc002e10c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 1c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e11c
c0000e60:	c7 42 0c 14 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e114
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 1c e1 02 c0    	mov    DWORD PTR ds:0xc002e11c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 0c e1 02 c0    	mov    DWORD PTR ds:0xc002e10c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 e0 e0 02 c0 02 	test   BYTE PTR ds:0xc002e0e0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d e0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0e0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 e4 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f1c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 e4 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f1c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 14 e1 02 c0 	lea    edx,[eax*8-0x3ffd1eec]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 20 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e120
c00011e2:	81 fb 14 e1 02 c0    	cmp    ebx,0xc002e114
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 14 e1 02 c0       	cmp    eax,0xc002e114
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 10 e1 02 c0    	cmp    DWORD PTR ds:0xc002e110,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 1c e1 02 c0       	mov    ds:0xc002e11c,eax
c000121e:	a3 20 e1 02 c0       	mov    ds:0xc002e120,eax
c0001223:	a3 10 e1 02 c0       	mov    ds:0xc002e110,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 14 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e114
c0001231:	c7 40 0c 14 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e114
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 20 e1 02 c0       	mov    ds:0xc002e120,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 14 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e114
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 d8 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1f28]
c0001282:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 e0 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1f20]
c000129d:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 14 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1bec],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 14 e1 02 c0 	lea    eax,[eax*8-0x3ffd1eec]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 1c e1 02 c0    	mov    DWORD PTR ds:0xc002e11c,ecx
c0001357:	89 0d 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,ecx
c000135d:	c7 41 08 14 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e114
c0001364:	c7 41 0c 14 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e114
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 0c e1 02 c0 	lea    edx,[ecx*8-0x3ffd1ef4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 14 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bec]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 14 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bec]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 0c e1 02 c0 	lea    edx,[eax*4-0x3ffd1ef4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 14 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1bec],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 1c e1 02 c0    	mov    DWORD PTR ds:0xc002e11c,edi
c000142a:	89 3d 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,edi
c0001430:	c7 47 08 14 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e114
c0001437:	c7 47 0c 14 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e114
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 10 e1 02 c0    	mov    DWORD PTR ds:0xc002e110,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 0c e1 02 c0       	mov    eax,ds:0xc002e10c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 0c e1 02 c0    	mov    DWORD PTR ds:0xc002e10c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba e0 e0 02 c0       	mov    edx,0xc002e0e0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d e0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0e0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 34 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e434
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 34 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e434,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 34 e4 02 c0    	mov    DWORD PTR ds:0xc002e434,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 0c e1 02 c0    	cmp    DWORD PTR ds:0xc002e10c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 0c e1 02 c0    	mov    DWORD PTR ds:0xc002e10c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d e0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0e0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 3c e4 02 c0    	push   DWORD PTR ds:0xc002e43c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d e0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0e0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 3c e4 02 c0       	mov    eax,ds:0xc002e43c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 0c e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e10c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 0c e1 02 c0       	mov    eax,ds:0xc002e10c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 e4 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f1c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 14 e1 02 c0       	mov    eax,0xc002e114
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 0c e4 02 c0       	cmp    eax,0xc002e40c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 30 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e430
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 44 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e444
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 54 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e454
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 a4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c5c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 24 e4 02 c0    	mov    DWORD PTR ds:0xc002e424,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 28 e4 02 c0    	mov    DWORD PTR ds:0xc002e428,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 2c e4 02 c0    	mov    DWORD PTR ds:0xc002e42c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 34 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e434,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 c0 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce440]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 10 f2 01 00       	jmp    c0020e3c <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce440]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 41 f2 01 00       	jmp    c0020e83 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 c0 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce440]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 69 f2 01 00       	jmp    c0020eca <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 f8 4a 02 00       	call   c0026a3c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 c0 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b40]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 c0 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b40]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 00 c9 02 c0       	mov    edx,0xc002c900
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ec 94 02 c0       	mov    edx,0xc00294ec
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 80 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1b80]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 60 e4 02 c0    	mov    ax,ds:0xc002e460
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 60 e4 02 c0    	mov    ds:0xc002e460,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 f5 38 02 00       	call   c0026a3c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 f2 94 02 c0       	mov    eax,0xc00294f2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 40 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6bc0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 fb 94 02 c0       	mov    eax,0xc00294fb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 c0 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b40]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 c0 22 02 00       	call   c0026a3c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 80 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1b80],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 87 0c 02 00       	call   c0026a3c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 6d 0c 02 00       	call   c0026a3c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 17 94 02 c0       	mov    eax,0xc0029417
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 10 94 02 c0       	mov    eax,0xc0029410
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 00 94 02 c0       	mov    esi,0xc0029400
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 b0 f3 01 00       	call   c0026a3c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 02 95 02 c0       	mov    edx,0xc0029502
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 0e 95 02 c0       	mov    edx,0xc002950e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 22 95 02 c0       	mov    edx,0xc0029522
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 40 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029840
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 40 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029840
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 40 96 02 c0       	mov    eax,0xc0029640
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 80 95 02 c0       	mov    eax,0xc0029580
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 04 fd 01 00       	call   c002850f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 c7 fc 01 00       	call   c00284f1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 9b fc 01 00       	call   c002850f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 4e f3 01 00       	call   c0027c14 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 c8 fd 01 00       	call   c00286a0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 15 fc 01 00       	call   c002850f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 57 fb 01 00       	call   c002850f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 24 fb 01 00       	call   c00284f1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 11 fa 01 00       	call   c002850f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 d9 f9 01 00       	call   c00284f1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 40 99 02 c0       	mov    eax,0xc0029940
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 e5 f7 01 00       	call   c002850f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 aa f7 01 00       	call   c00284f1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 a0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6260]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ba f4 01 00       	call   c00282a3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 38 ee 01 00       	call   c0027c40 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 f4 f6 01 00       	call   c0028513 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 e2 f7 01 00       	call   c0028637 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 cc ed 01 00       	call   c0027c40 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 77 f6 01 00       	call   c002850d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 58 f6 01 00       	call   c0028511 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 e6 f7 01 00       	call   c00286c0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 98 f3 01 00       	call   c00282a3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 16 ed 01 00       	call   c0027c40 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 d2 f5 01 00       	call   c0028513 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 c0 f6 01 00       	call   c0028637 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 aa ec 01 00       	call   c0027c40 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 55 f5 01 00       	call   c002850d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 35 f5 01 00       	call   c0028511 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 c2 f6 01 00       	call   c00286c0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 70 f4 01 00       	call   c002850f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 2e f4 01 00       	call   c00284f1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 16 f4 01 00       	call   c002850f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 88 f1 01 00       	call   c00282a3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 8a e4 01 00       	call   c00275c3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 ed ea 01 00       	call   c0027c40 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 3f f1 01 00       	call   c00282a3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 45 e4 01 00       	call   c00275c3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 14 f1 01 00       	call   c00282a3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 64 f3 01 00       	call   c002850d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 41 ea 01 00       	call   c0027c14 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 bb f4 01 00       	call   c00286a0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 ea f2 01 00       	call   c00284f1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 e5 e9 01 00       	call   c0027c14 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 63 f0 01 00       	call   c00282a3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 e6 e9 01 00       	call   c0027c40 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 38 f0 01 00       	call   c00282a3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 9f ec 01 00       	call   c0027f24 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 1e e3 01 00       	call   c00275c3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 7e dc 01 00       	call   c0026f58 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 55 f3 01 00       	call   c0028637 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 3e e9 01 00       	call   c0027c40 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 25 f3 01 00       	call   c0028637 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 97 e2 01 00       	call   c00275c3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 d0 f1 01 00       	call   c0028513 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 b8 eb 01 00       	call   c0027f24 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 3e e2 01 00       	call   c00275c3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 24 f3 01 00       	call   c00286c0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 fe ee 01 00       	call   c00282a3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 55 e8 01 00       	call   c0027c14 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 34 f1 01 00       	call   c002850f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 cd e1 01 00       	call   c00275c3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 f9 e7 01 00       	call   c0027c14 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 93 f2 01 00       	call   c00286c0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 4c ee 01 00       	call   c00282a3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 c9 e7 01 00       	call   c0027c40 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 1c ee 01 00       	call   c00282a3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 22 e1 01 00       	call   c00275c3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 f2 ed 01 00       	call   c00282a3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 44 f0 01 00       	call   c002850f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 1b e7 01 00       	call   c0027c14 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 95 f1 01 00       	call   c00286a0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 c4 ef 01 00       	call   c00284f1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 be e6 01 00       	call   c0027c14 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 3c ed 01 00       	call   c00282a3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 bf e6 01 00       	call   c0027c40 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 11 ed 01 00       	call   c00282a3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 78 e9 01 00       	call   c0027f24 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 f7 df 01 00       	call   c00275c3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 47 d9 01 00       	call   c0026f58 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 1e f0 01 00       	call   c0028637 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 07 e6 01 00       	call   c0027c40 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 ee ef 01 00       	call   c0028637 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 60 df 01 00       	call   c00275c3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 99 ee 01 00       	call   c0028513 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 80 e8 01 00       	call   c0027f24 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 ff de 01 00       	call   c00275c3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 e5 ef 01 00       	call   c00286c0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 bf eb 01 00       	call   c00282a3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 16 e5 01 00       	call   c0027c14 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 f5 ed 01 00       	call   c002850f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 8e de 01 00       	call   c00275c3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ba e4 01 00       	call   c0027c14 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 2f eb 01 00       	call   c00282a3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 35 de 01 00       	call   c00275c3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 00 9e 02 c0       	mov    eax,0xc0029e00
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 14 9e 02 c0       	mov    eax,0xc0029e14
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 aa e9 01 00       	call   c00282a3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 28 e3 01 00       	call   c0027c40 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ba d5 01 00       	call   c0026f58 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 91 ec 01 00       	call   c0028637 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 7a e2 01 00       	call   c0027c40 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 5d ec 01 00       	call   c0028637 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 cf db 01 00       	call   c00275c3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 2f ec 01 00       	call   c0028637 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 1e e2 01 00       	call   c0027c40 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 87 db 01 00       	call   c00275c3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 a8 d4 01 00       	call   c0026f58 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 7f eb 01 00       	call   c0028637 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 68 e1 01 00       	call   c0027c40 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 4b eb 01 00       	call   c0028637 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 bd da 01 00       	call   c00275c3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 1d eb 01 00       	call   c0028637 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 0c e1 01 00       	call   c0027c40 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 75 da 01 00       	call   c00275c3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 53 da 01 00       	call   c00275c3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 2f d3 01 00       	call   c0026f58 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 06 ea 01 00       	call   c0028637 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 ef df 01 00       	call   c0027c40 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 d2 e9 01 00       	call   c0028637 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 44 d9 01 00       	call   c00275c3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 a4 e9 01 00       	call   c0028637 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 8d df 01 00       	call   c0027c40 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 f6 d8 01 00       	call   c00275c3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 56 e9 01 00       	call   c0028637 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 3f df 01 00       	call   c0027c40 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 a8 d8 01 00       	call   c00275c3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 bd d1 01 00       	call   c0026f58 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 94 e8 01 00       	call   c0028637 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 7d de 01 00       	call   c0027c40 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 64 e8 01 00       	call   c0028637 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 d6 d7 01 00       	call   c00275c3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 36 e8 01 00       	call   c0028637 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 1f de 01 00       	call   c0027c40 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 88 d7 01 00       	call   c00275c3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 e8 e7 01 00       	call   c0028637 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 d1 dd 01 00       	call   c0027c40 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 3a d7 01 00       	call   c00275c3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 0e d7 01 00       	call   c00275c3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 6b dd 01 00       	call   c0027c40 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 27 e6 01 00       	call   c0028513 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 b6 d6 01 00       	call   c00275c3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 13 dd 01 00       	call   c0027c40 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 cf e5 01 00       	call   c0028513 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 49 cf 01 00       	call   c0026f58 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 20 e6 01 00       	call   c0028637 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 09 dc 01 00       	call   c0027c40 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 ec e5 01 00       	call   c0028637 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 5e d5 01 00       	call   c00275c3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 be e5 01 00       	call   c0028637 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 a7 db 01 00       	call   c0027c40 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 10 d5 01 00       	call   c00275c3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 70 e5 01 00       	call   c0028637 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 59 db 01 00       	call   c0027c40 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 c2 d4 01 00       	call   c00275c3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 22 e5 01 00       	call   c0028637 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 0b db 01 00       	call   c0027c40 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 74 d4 01 00       	call   c00275c3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 d4 e4 01 00       	call   c0028637 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 bd da 01 00       	call   c0027c40 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 26 d4 01 00       	call   c00275c3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 28 cd 01 00       	call   c0026f58 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 ff e3 01 00       	call   c0028637 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 e8 d9 01 00       	call   c0027c40 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 cf e3 01 00       	call   c0028637 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 41 d3 01 00       	call   c00275c3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 a1 e3 01 00       	call   c0028637 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 8a d9 01 00       	call   c0027c40 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 f3 d2 01 00       	call   c00275c3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 53 e3 01 00       	call   c0028637 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 3c d9 01 00       	call   c0027c40 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 a5 d2 01 00       	call   c00275c3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 05 e3 01 00       	call   c0028637 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 ee d8 01 00       	call   c0027c40 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 57 d2 01 00       	call   c00275c3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 b7 e2 01 00       	call   c0028637 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 a0 d8 01 00       	call   c0027c40 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 09 d2 01 00       	call   c00275c3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 dd d1 01 00       	call   c00275c3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 3a d8 01 00       	call   c0027c40 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 f6 e0 01 00       	call   c0028513 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 85 d1 01 00       	call   c00275c3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 e2 d7 01 00       	call   c0027c40 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 9e e0 01 00       	call   c0028513 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 2c d1 01 00       	call   c00275c3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 89 d7 01 00       	call   c0027c40 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 45 e0 01 00       	call   c0028513 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 d3 d0 01 00       	call   c00275c3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 30 d7 01 00       	call   c0027c40 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 ec df 01 00       	call   c0028513 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 4a c9 01 00       	call   c0026f58 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 21 e0 01 00       	call   c0028637 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 0a d6 01 00       	call   c0027c40 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 ed df 01 00       	call   c0028637 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 5f cf 01 00       	call   c00275c3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 bf df 01 00       	call   c0028637 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 a8 d5 01 00       	call   c0027c40 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 11 cf 01 00       	call   c00275c3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 71 df 01 00       	call   c0028637 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 5a d5 01 00       	call   c0027c40 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 c3 ce 01 00       	call   c00275c3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 23 df 01 00       	call   c0028637 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 0c d5 01 00       	call   c0027c40 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 75 ce 01 00       	call   c00275c3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 d5 de 01 00       	call   c0028637 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 be d4 01 00       	call   c0027c40 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 27 ce 01 00       	call   c00275c3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 87 de 01 00       	call   c0028637 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 70 d4 01 00       	call   c0027c40 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 d6 cd 01 00       	call   c00275c3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 36 de 01 00       	call   c0028637 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 1f d4 01 00       	call   c0027c40 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 88 cd 01 00       	call   c00275c3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 82 c6 01 00       	call   c0026f58 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 59 dd 01 00       	call   c0028637 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 42 d3 01 00       	call   c0027c40 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 22 dd 01 00       	call   c0028637 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 94 cc 01 00       	call   c00275c3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 f4 dc 01 00       	call   c0028637 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 dd d2 01 00       	call   c0027c40 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 46 cc 01 00       	call   c00275c3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 a6 dc 01 00       	call   c0028637 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 8f d2 01 00       	call   c0027c40 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 f8 cb 01 00       	call   c00275c3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 58 dc 01 00       	call   c0028637 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 41 d2 01 00       	call   c0027c40 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 aa cb 01 00       	call   c00275c3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 0a dc 01 00       	call   c0028637 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 f3 d1 01 00       	call   c0027c40 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 5c cb 01 00       	call   c00275c3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 bc db 01 00       	call   c0028637 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 a5 d1 01 00       	call   c0027c40 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 0b cb 01 00       	call   c00275c3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 6b db 01 00       	call   c0028637 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 54 d1 01 00       	call   c0027c40 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 c3 ca 01 00       	call   c00275c3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 9c ca 01 00       	call   c00275c3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 fa d0 01 00       	call   c0027c40 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 b6 d9 01 00       	call   c0028513 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 45 ca 01 00       	call   c00275c3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 a3 d0 01 00       	call   c0027c40 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 5f d9 01 00       	call   c0028513 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 ed c9 01 00       	call   c00275c3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 4b d0 01 00       	call   c0027c40 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 07 d9 01 00       	call   c0028513 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 95 c9 01 00       	call   c00275c3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 f3 cf 01 00       	call   c0027c40 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 af d8 01 00       	call   c0028513 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 3d c9 01 00       	call   c00275c3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 9b cf 01 00       	call   c0027c40 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 57 d8 01 00       	call   c0028513 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 eb c8 01 00       	call   c00275c3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 49 cf 01 00       	call   c0027c40 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 05 d8 01 00       	call   c0028513 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 19 c1 01 00       	call   c0026f58 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 f0 d7 01 00       	call   c0028637 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 d9 cd 01 00       	call   c0027c40 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 c0 d7 01 00       	call   c0028637 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 32 c7 01 00       	call   c00275c3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 44 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61bc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 66 d7 01 00       	call   c0028637 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 4f cd 01 00       	call   c0027c40 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ba c6 01 00       	call   c00275c3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 07 d7 01 00       	call   c0028637 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 f0 cc 01 00       	call   c0027c40 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 5b c6 01 00       	call   c00275c3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 a8 d6 01 00       	call   c0028637 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 91 cc 01 00       	call   c0027c40 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 fc c5 01 00       	call   c00275c3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 49 d6 01 00       	call   c0028637 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 32 cc 01 00       	call   c0027c40 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 9d c5 01 00       	call   c00275c3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 ea d5 01 00       	call   c0028637 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 d3 cb 01 00       	call   c0027c40 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 3e c5 01 00       	call   c00275c3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 8b d5 01 00       	call   c0028637 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 74 cb 01 00       	call   c0027c40 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 df c4 01 00       	call   c00275c3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 2c d5 01 00       	call   c0028637 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 15 cb 01 00       	call   c0027c40 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 80 c4 01 00       	call   c00275c3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 cd d4 01 00       	call   c0028637 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 b6 ca 01 00       	call   c0027c40 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 21 c4 01 00       	call   c00275c3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 2b bd 01 00       	call   c0026f58 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 02 d4 01 00       	call   c0028637 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 eb c9 01 00       	call   c0027c40 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 d2 d3 01 00       	call   c0028637 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 44 c3 01 00       	call   c00275c3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 60 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61a0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 77 d3 01 00       	call   c0028637 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 60 c9 01 00       	call   c0027c40 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 cb c2 01 00       	call   c00275c3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 17 d3 01 00       	call   c0028637 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 00 c9 01 00       	call   c0027c40 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 6b c2 01 00       	call   c00275c3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 b7 d2 01 00       	call   c0028637 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 a0 c8 01 00       	call   c0027c40 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 0b c2 01 00       	call   c00275c3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 57 d2 01 00       	call   c0028637 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 40 c8 01 00       	call   c0027c40 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 ab c1 01 00       	call   c00275c3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 f7 d1 01 00       	call   c0028637 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 e0 c7 01 00       	call   c0027c40 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 4b c1 01 00       	call   c00275c3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 97 d1 01 00       	call   c0028637 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 80 c7 01 00       	call   c0027c40 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 eb c0 01 00       	call   c00275c3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 37 d1 01 00       	call   c0028637 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 20 c7 01 00       	call   c0027c40 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 8b c0 01 00       	call   c00275c3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 d7 d0 01 00       	call   c0028637 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 c0 c6 01 00       	call   c0027c40 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 2b c0 01 00       	call   c00275c3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 7c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6184]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 d0 bf 01 00       	call   c00275c3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 2d c6 01 00       	call   c0027c40 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 e9 ce 01 00       	call   c0028513 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 73 bf 01 00       	call   c00275c3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 d0 c5 01 00       	call   c0027c40 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 8c ce 01 00       	call   c0028513 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 16 bf 01 00       	call   c00275c3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 73 c5 01 00       	call   c0027c40 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 2f ce 01 00       	call   c0028513 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 b9 be 01 00       	call   c00275c3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 16 c5 01 00       	call   c0027c40 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 d2 cd 01 00       	call   c0028513 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 5c be 01 00       	call   c00275c3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 b9 c4 01 00       	call   c0027c40 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 75 cd 01 00       	call   c0028513 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 ff bd 01 00       	call   c00275c3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 5c c4 01 00       	call   c0027c40 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 18 cd 01 00       	call   c0028513 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 a2 bd 01 00       	call   c00275c3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 ff c3 01 00       	call   c0027c40 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 bb cc 01 00       	call   c0028513 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 45 bd 01 00       	call   c00275c3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 a2 c3 01 00       	call   c0027c40 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 5e cc 01 00       	call   c0028513 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 5a c3 01 00       	call   c0027c40 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ca cd 01 00       	jmp    c00286c0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 3c ca 01 00       	call   c002850f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 fa c9 01 00       	call   c00284f1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 91 c7 01 00       	call   c00282a3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 92 ba 01 00       	call   c00275c3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 61 c7 01 00       	call   c00282a3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 c8 c3 01 00       	call   c0027f24 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 67 c9 01 00       	call   c00284f1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 6a c9 01 00       	call   c002850f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 3d c9 01 00       	call   c002850f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 36 c3 01 00       	call   c0027f24 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 b8 ca 01 00       	call   c00286c0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 93 ca 01 00       	call   c00286c0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 6d c6 01 00       	call   c00282a3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 c4 bf 01 00       	call   c0027c14 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 a3 c8 01 00       	call   c002850f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 3c b9 01 00       	call   c00275c3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 60 bf 01 00       	call   c0027c14 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 fa c9 01 00       	call   c00286c0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 3a c2 01 00       	call   c0027f24 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 b7 b8 01 00       	call   c00275c3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 e3 c4 01 00       	call   c00282a3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 e3 b7 01 00       	call   c00275c3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 c3 b7 01 00       	call   c00275c3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 93 c4 01 00       	call   c00282a3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 e3 c6 01 00       	call   c002850d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 c2 bd 01 00       	call   c0027c14 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 3c c8 01 00       	call   c00286a0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 6b c6 01 00       	call   c00284f1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 69 bd 01 00       	call   c0027c14 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 e7 c3 01 00       	call   c00282a3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 6a bd 01 00       	call   c0027c40 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 bc c3 01 00       	call   c00282a3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 23 c0 01 00       	call   c0027f24 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 a2 b6 01 00       	call   c00275c3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 6c c3 01 00       	call   c00282a3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 b8 c5 01 00       	call   c002850f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ad bc 01 00       	call   c0027c40 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 7f bc 01 00       	call   c0027c40 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 b8 c2 01 00       	call   c00282a3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 1c bf 01 00       	call   c0027f24 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 e4 be 01 00       	call   c0027f24 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 63 b5 01 00       	call   c00275c3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 48 c6 01 00       	call   c00286c0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 22 c2 01 00       	call   c00282a3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 79 bb 01 00       	call   c0027c14 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 58 c4 01 00       	call   c002850f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 f0 b4 01 00       	call   c00275c3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 14 bb 01 00       	call   c0027c14 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ae c5 01 00       	call   c00286c0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 77 c3 01 00       	call   c002850f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 35 c3 01 00       	call   c00284f1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 cc c0 01 00       	call   c00282a3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 cd b3 01 00       	call   c00275c3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 9c c0 01 00       	call   c00282a3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 03 bd 01 00       	call   c0027f24 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 a2 c2 01 00       	call   c00284f1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 a5 c2 01 00       	call   c002850f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 78 c2 01 00       	call   c002850f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 71 bc 01 00       	call   c0027f24 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 f3 c3 01 00       	call   c00286c0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ce c3 01 00       	call   c00286c0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 a8 bf 01 00       	call   c00282a3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 ff b8 01 00       	call   c0027c14 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 de c1 01 00       	call   c002850f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 77 b2 01 00       	call   c00275c3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 9b b8 01 00       	call   c0027c14 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 35 c3 01 00       	call   c00286c0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 75 bb 01 00       	call   c0027f24 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 f2 b1 01 00       	call   c00275c3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 1d be 01 00       	call   c00282a3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 1d b1 01 00       	call   c00275c3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 fd b0 01 00       	call   c00275c3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 cd bd 01 00       	call   c00282a3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 1d c0 01 00       	call   c002850d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 fb b6 01 00       	call   c0027c14 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 75 c1 01 00       	call   c00286a0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 a4 bf 01 00       	call   c00284f1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 a1 b6 01 00       	call   c0027c14 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 1f bd 01 00       	call   c00282a3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 a2 b6 01 00       	call   c0027c40 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 f4 bc 01 00       	call   c00282a3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 5b b9 01 00       	call   c0027f24 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 da af 01 00       	call   c00275c3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 a4 bc 01 00       	call   c00282a3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 f0 be 01 00       	call   c002850f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 e5 b5 01 00       	call   c0027c40 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 b7 b5 01 00       	call   c0027c40 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 ee bb 01 00       	call   c00282a3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 52 b8 01 00       	call   c0027f24 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 1f b8 01 00       	call   c0027f24 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 9e ae 01 00       	call   c00275c3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 83 bf 01 00       	call   c00286c0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 5d bb 01 00       	call   c00282a3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 b4 b4 01 00       	call   c0027c14 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 93 bd 01 00       	call   c002850f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 2b ae 01 00       	call   c00275c3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 4f b4 01 00       	call   c0027c14 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 e9 be 01 00       	call   c00286c0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 b2 bc 01 00       	call   c002850f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 70 bc 01 00       	call   c00284f1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 07 ba 01 00       	call   c00282a3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 08 ad 01 00       	call   c00275c3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 d7 b9 01 00       	call   c00282a3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 3e b6 01 00       	call   c0027f24 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 dd bb 01 00       	call   c00284f1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 e0 bb 01 00       	call   c002850f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 b3 bb 01 00       	call   c002850f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ac b5 01 00       	call   c0027f24 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 2e bd 01 00       	call   c00286c0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 09 bd 01 00       	call   c00286c0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 e3 b8 01 00       	call   c00282a3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 3a b2 01 00       	call   c0027c14 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 19 bb 01 00       	call   c002850f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 b2 ab 01 00       	call   c00275c3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 d6 b1 01 00       	call   c0027c14 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 70 bc 01 00       	call   c00286c0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 b0 b4 01 00       	call   c0027f24 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 2d ab 01 00       	call   c00275c3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 58 b7 01 00       	call   c00282a3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 58 aa 01 00       	call   c00275c3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 38 aa 01 00       	call   c00275c3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 08 b7 01 00       	call   c00282a3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 58 b9 01 00       	call   c002850d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 36 b0 01 00       	call   c0027c14 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 b0 ba 01 00       	call   c00286a0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 df b8 01 00       	call   c00284f1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 dc af 01 00       	call   c0027c14 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 5a b6 01 00       	call   c00282a3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 dd af 01 00       	call   c0027c40 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 2f b6 01 00       	call   c00282a3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 96 b2 01 00       	call   c0027f24 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 15 a9 01 00       	call   c00275c3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 df b5 01 00       	call   c00282a3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 2b b8 01 00       	call   c002850f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 20 af 01 00       	call   c0027c40 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 f2 ae 01 00       	call   c0027c40 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 29 b5 01 00       	call   c00282a3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 8d b1 01 00       	call   c0027f24 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 5a b1 01 00       	call   c0027f24 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 d9 a7 01 00       	call   c00275c3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 be b8 01 00       	call   c00286c0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 98 b4 01 00       	call   c00282a3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 ef ad 01 00       	call   c0027c14 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ce b6 01 00       	call   c002850f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 66 a7 01 00       	call   c00275c3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 8a ad 01 00       	call   c0027c14 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 24 b8 01 00       	call   c00286c0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 ed b5 01 00       	call   c002850f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 ab b5 01 00       	call   c00284f1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 42 b3 01 00       	call   c00282a3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 43 a6 01 00       	call   c00275c3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 12 b3 01 00       	call   c00282a3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 79 af 01 00       	call   c0027f24 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 18 b5 01 00       	call   c00284f1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 1b b5 01 00       	call   c002850f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 ee b4 01 00       	call   c002850f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 e7 ae 01 00       	call   c0027f24 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 69 b6 01 00       	call   c00286c0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 44 b6 01 00       	call   c00286c0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 1e b2 01 00       	call   c00282a3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 75 ab 01 00       	call   c0027c14 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 54 b4 01 00       	call   c002850f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 ed a4 01 00       	call   c00275c3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 11 ab 01 00       	call   c0027c14 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 ab b5 01 00       	call   c00286c0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 eb ad 01 00       	call   c0027f24 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 68 a4 01 00       	call   c00275c3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 93 b0 01 00       	call   c00282a3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 93 a3 01 00       	call   c00275c3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 73 a3 01 00       	call   c00275c3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 43 b0 01 00       	call   c00282a3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 93 b2 01 00       	call   c002850d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 71 a9 01 00       	call   c0027c14 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 eb b3 01 00       	call   c00286a0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 1a b2 01 00       	call   c00284f1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 17 a9 01 00       	call   c0027c14 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 95 af 01 00       	call   c00282a3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 18 a9 01 00       	call   c0027c40 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 6a af 01 00       	call   c00282a3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 d1 ab 01 00       	call   c0027f24 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 50 a2 01 00       	call   c00275c3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 1a af 01 00       	call   c00282a3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 66 b1 01 00       	call   c002850f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 5b a8 01 00       	call   c0027c40 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 2d a8 01 00       	call   c0027c40 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 64 ae 01 00       	call   c00282a3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 c8 aa 01 00       	call   c0027f24 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 95 aa 01 00       	call   c0027f24 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 14 a1 01 00       	call   c00275c3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 f9 b1 01 00       	call   c00286c0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 d3 ad 01 00       	call   c00282a3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 2a a7 01 00       	call   c0027c14 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 09 b0 01 00       	call   c002850f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 a1 a0 01 00       	call   c00275c3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 c5 a6 01 00       	call   c0027c14 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 5f b1 01 00       	call   c00286c0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 25 af 01 00       	call   c002850f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 e3 ae 01 00       	call   c00284f1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 7a ac 01 00       	call   c00282a3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 7b 9f 01 00       	call   c00275c3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 4a ac 01 00       	call   c00282a3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 b1 a8 01 00       	call   c0027f24 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 50 ae 01 00       	call   c00284f1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 53 ae 01 00       	call   c002850f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 26 ae 01 00       	call   c002850f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 1f a8 01 00       	call   c0027f24 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 a1 af 01 00       	call   c00286c0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 78 af 01 00       	call   c00286c0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 52 ab 01 00       	call   c00282a3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 a9 a4 01 00       	call   c0027c14 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 88 ad 01 00       	call   c002850f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 21 9e 01 00       	call   c00275c3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 49 a4 01 00       	call   c0027c14 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 e3 ae 01 00       	call   c00286c0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 24 a7 01 00       	call   c0027f24 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 a1 9d 01 00       	call   c00275c3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 cd a9 01 00       	call   c00282a3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 cd 9c 01 00       	call   c00275c3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ad 9c 01 00       	call   c00275c3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 7d a9 01 00       	call   c00282a3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 b1 ab 01 00       	call   c00284f1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 a8 a2 01 00       	call   c0027c14 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 22 ad 01 00       	call   c00286a0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 51 ab 01 00       	call   c00284f1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 4b a2 01 00       	call   c0027c14 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 c9 a8 01 00       	call   c00282a3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 4c a2 01 00       	call   c0027c40 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 9e a8 01 00       	call   c00282a3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 05 a5 01 00       	call   c0027f24 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 84 9b 01 00       	call   c00275c3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 4e a8 01 00       	call   c00282a3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 9a aa 01 00       	call   c002850f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 8f a1 01 00       	call   c0027c40 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 61 a1 01 00       	call   c0027c40 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 a5 a7 01 00       	call   c00282a3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 0c a4 01 00       	call   c0027f24 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 f5 a0 01 00       	call   c0027c40 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 b1 a9 01 00       	call   c0028513 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 a4 a3 01 00       	call   c0027f24 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 23 9a 01 00       	call   c00275c3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 08 ab 01 00       	call   c00286c0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 e2 a6 01 00       	call   c00282a3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 39 a0 01 00       	call   c0027c14 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 18 a9 01 00       	call   c002850f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 b0 99 01 00       	call   c00275c3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 d8 9f 01 00       	call   c0027c14 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 72 aa 01 00       	call   c00286c0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 a4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd615c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 98 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6168]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 2d a7 01 00       	call   c002850f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 eb a6 01 00       	call   c00284f1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 d7 a6 01 00       	call   c002850f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 49 a4 01 00       	call   c00282a3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 c7 9d 01 00       	call   c0027c40 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 19 a4 01 00       	call   c00282a3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 1f 97 01 00       	call   c00275c3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 ee a3 01 00       	call   c00282a3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 3e a6 01 00       	call   c002850d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 1f 9d 01 00       	call   c0027c14 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 99 a7 01 00       	call   c00286a0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 c8 a5 01 00       	call   c00284f1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 c7 9c 01 00       	call   c0027c14 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 45 a3 01 00       	call   c00282a3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 c8 9c 01 00       	call   c0027c40 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 1a a3 01 00       	call   c00282a3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 81 9f 01 00       	call   c0027f24 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 00 96 01 00       	call   c00275c3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 28 9f 01 00       	call   c0027f24 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ae 95 01 00       	call   c00275c3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 94 a6 01 00       	call   c00286c0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 6e a2 01 00       	call   c00282a3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 c5 9b 01 00       	call   c0027c14 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 a4 a4 01 00       	call   c002850f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 3d 95 01 00       	call   c00275c3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 69 9b 01 00       	call   c0027c14 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 03 a6 01 00       	call   c00286c0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 b8 a1 01 00       	call   c00282a3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 35 9b 01 00       	call   c0027c40 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 86 a1 01 00       	call   c00282a3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 8c 94 01 00       	call   c00275c3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 5c a1 01 00       	call   c00282a3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 b0 a3 01 00       	call   c0028511 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 89 9a 01 00       	call   c0027c14 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 03 a5 01 00       	call   c00286a0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 32 a3 01 00       	call   c00284f1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 30 9a 01 00       	call   c0027c14 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ae a0 01 00       	call   c00282a3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 31 9a 01 00       	call   c0027c40 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 83 a0 01 00       	call   c00282a3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 ea 9c 01 00       	call   c0027f24 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 69 93 01 00       	call   c00275c3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 85 9c 01 00       	call   c0027f24 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 04 93 01 00       	call   c00275c3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 ea a3 01 00       	call   c00286c0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 c4 9f 01 00       	call   c00282a3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 1b 99 01 00       	call   c0027c14 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 fa a1 01 00       	call   c002850f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 93 92 01 00       	call   c00275c3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 bf 98 01 00       	call   c0027c14 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 30 9f 01 00       	call   c00282a3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 36 92 01 00       	call   c00275c3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 be 9f 02 c0       	mov    eax,0xc0029fbe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 cf 9f 02 c0       	mov    eax,0xc0029fcf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 06 a0 02 c0       	push   0xc002a006
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 e8 e4 02 c0       	mov    eax,0xc002e4e8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 0f a0 02 c0       	push   0xc002a00f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 3c 6a 02 c0       	mov    eax,0xc0026a3c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 19 a0 02 c0       	push   0xc002a019
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 70 67 02 c0       	mov    eax,0xc0026770
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 22 a0 02 c0       	push   0xc002a022
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 2c a0 02 c0       	push   0xc002a02c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 bc 68 02 c0       	mov    eax,0xc00268bc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 35 a0 02 c0       	push   0xc002a035
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ec e4 02 c0       	mov    eax,0xc002e4ec
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 42 a0 02 c0       	push   0xc002a042
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ed e4 02 c0       	mov    eax,0xc002e4ed
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 31 5f 00 00       	call   c0014554 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c000e668:	68 4f a0 02 c0       	push   0xc002a04f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 19 f6 00 00       	call   c001dc8e <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 02 f9 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 ea e7 01 c0       	push   0xc001e7ea
c000e693:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c000e699:	e8 ee f8 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 08 1a 03 c0       	mov    ds:0xc0031a08,eax
c000e6a6:	c6 05 ed e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4ed,0x1
c000e6ad:	e8 b9 04 01 00       	call   c001eb6b <Vm::initialise8086()>
c000e6b2:	e8 85 4c 00 00       	call   c001333c <Fs::initVFS()>
c000e6b7:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 31 df 00 00       	call   c001c604 <Sys::loadSyscalls()>
c000e6d3:	e8 54 be 00 00       	call   c001a52c <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 5c a0 02 c0       	push   0xc002a05c
c000e6e2:	68 65 a0 02 c0       	push   0xc002a065
c000e6e7:	e8 66 cb 00 00       	call   c001b252 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 30 57 00 00       	call   c0013e24 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 23 5e 00 00       	call   c0014528 <Device::loadDriversForAll()>
c000e705:	e8 68 b9 00 00       	call   c001a072 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 6d a0 02 c0       	push   0xc002a06d
c000e719:	e8 7a f0 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 c0 f2 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 bc fb 00 00       	call   c001e2f0 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 89 a0 02 c0       	push   0xc002a089
c000e749:	50                   	push   eax
c000e74a:	e8 7f 5e 00 00       	call   c00145ce <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 01 e5 02 c0 04 	test   BYTE PTR ds:0xc002e501,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 23 7e 01 00       	call   c0026706 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 66 a4 00 00       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 3f a4 00 00       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 1d a4 00 00       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 fb a3 00 00       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 00 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e500,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 09 a3 00 00       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 e4 a2 00 00       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 8d 7c 01 00       	call   c00266c0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 4a 7c 01 00       	call   c00266a0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 00 a3 00 00       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 99 a0 02 c0       	push   0xc002a099
c000eaaf:	e8 03 45 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ac a0 02 c0       	push   0xc002a0ac
c000ead2:	e8 e0 44 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 bd a0 02 c0       	push   0xc002a0bd
c000eaf5:	e8 bd 44 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ce a0 02 c0       	push   0xc002a0ce
c000eb18:	e8 9a 44 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 df a0 02 c0       	push   0xc002a0df
c000eb3b:	e8 77 44 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 f0 a0 02 c0       	push   0xc002a0f0
c000eb5e:	e8 54 44 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 01 a1 02 c0       	push   0xc002a101
c000eb81:	e8 31 44 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 12 a1 02 c0       	push   0xc002a112
c000eba4:	e8 0e 44 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 23 a1 02 c0       	push   0xc002a123
c000ebc7:	e8 eb 43 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 34 a1 02 c0       	push   0xc002a134
c000ebea:	e8 c8 43 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 45 a1 02 c0       	push   0xc002a145
c000ec0d:	e8 a5 43 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 56 a1 02 c0       	push   0xc002a156
c000ec30:	e8 82 43 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 67 a1 02 c0       	push   0xc002a167
c000ec53:	e8 5f 43 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 78 a1 02 c0       	push   0xc002a178
c000ec76:	e8 3c 43 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 89 a1 02 c0       	push   0xc002a189
c000ec99:	e8 19 43 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 9a a1 02 c0       	push   0xc002a19a
c000ecbc:	e8 f6 42 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 ab a1 02 c0       	push   0xc002a1ab
c000ecdf:	e8 d3 42 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 bc a1 02 c0       	push   0xc002a1bc
c000ed02:	e8 b0 42 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 cd a1 02 c0       	push   0xc002a1cd
c000ed21:	e8 91 42 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 cc bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bbcc
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 80 42 00 00       	jmp    c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 de a1 02 c0       	push   0xc002a1de
c000ee0a:	e8 56 b8 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 e4 a1 02 c0       	push   0xc002a1e4
c000ee42:	e8 1e b8 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 00 e5 02 c0 04 	test   BYTE PTR ds:0xc002e500,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 24 d4 02 c0 	sete   BYTE PTR ds:0xc002d424
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 9f 93 00 00       	call   c0018254 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 1a 55 00 00       	call   c00143de <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 48 9f 00 00       	call   c0018e3c <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 db 54 00 00       	call   c00143de <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 45 5a 00 00       	call   c0014964 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 ab 54 00 00       	call   c00143de <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 37 f1 00 00       	call   c001e08c <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ea a1 02 c0       	push   0xc002a1ea
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 14 40 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 fb a1 02 c0       	push   0xc002a1fb
c000efc0:	e8 a0 b6 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 08 a2 02 c0       	push   0xc002a208
c000efd5:	e8 8b b6 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 12 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a212
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 74 b6 00 00       	jmp    c001a665 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 4c a2 02 c0       	push   0xc002a24c
c000f086:	e8 2c 3f 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 f2 e4 02 c0       	mov    ds:0xc002e4f2,eax
c000f0c7:	66 89 15 f0 e4 02 c0 	mov    WORD PTR ds:0xc002e4f0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 7e ec 00 00       	call   c001de5c <unlockScheduler()>
c000f1de:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 14 95 01 00       	call   c0028740 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 0b 95 01 00       	call   c0028740 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 f8 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e4f8,0x7ff
c000f323:	a3 fa e4 02 c0       	mov    ds:0xc002e4fa,eax
c000f328:	0f 01 1d f8 e4 02 c0 	lidtd  ds:0xc002e4f8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 05 28 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 4c 2e 00 00       	call   c001246c <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 72 1e 00 00       	call   c00114b0 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 a3 1e 00 00       	call   c00114f0 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 e8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 14 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d414
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 14 d4 02 c0       	mov    eax,ds:0xc002d414
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 68 a2 02 c0       	push   0xc002a268
c000f6f4:	e8 be 38 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 14 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d414,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 fb 26 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 14 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d414
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 33 2c 00 00       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 14 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d414
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 98 a2 02 c0       	push   0xc002a298
c000f7ad:	e8 b3 ae 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 9d a2 02 c0       	push   0xc002a29d
c000f7c3:	e8 9d ae 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 81 e6 00 00       	call   c001de5a <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 72 e6 00 00       	call   c001de5c <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 1f 26 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 5f 2c 00 00       	call   c001246c <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 01 26 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 02 29 00 00       	call   c0012128 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 20 d4 02 c0       	mov    eax,ds:0xc002d420
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 80 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e580,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 20 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d420
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 80 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e580,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 80 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e580,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 80 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e580,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 80 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e580,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 20 d4 02 c0       	mov    eax,ds:0xc002d420
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 8f 0c 00 00       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 80 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e580,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 51 0c 00 00       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 e8 0c 00 00       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 20 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d420
c000fb49:	80 3d 80 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e580,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d 20 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d420,0x8000
c000fba3:	c6 05 80 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e580,0x1
c000fbaa:	c7 05 b8 e5 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e5b8,0xc000fa16
c000fbb4:	c7 05 a4 e5 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e5a4,0xc000f89d
c000fbbe:	c7 05 a0 e5 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e5a0,0xc000f8e8
c000fbc8:	c7 05 ac e5 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e5ac,0xc000fa5c
c000fbd2:	c7 05 b4 e5 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e5b4,0xc000f966
c000fbdc:	c7 05 a8 e5 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e5a8,0xc000f9c4
c000fbe6:	c7 05 b0 e5 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e5b0,0xc000f9c5
c000fbf0:	c7 05 bc e5 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e5bc,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 cf 09 00 00       	call   c00105dc <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 a4 a2 02 c0       	push   0xc002a2a4
c000fc4d:	e8 65 33 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 2f 04 00 00       	call   c0010098 <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 d0 20 00 00       	call   c0011d3e <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 cd bb 02 c0       	push   0xc002bbcd
c000fc95:	e8 cb a9 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 00 e5 02 c0    	mov    DWORD PTR ds:0xc002e500,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 a0 22 00 00       	call   c0011f50 <VAS::VAS()>
c000fcb0:	89 1d 6c e6 02 c0    	mov    DWORD PTR ds:0xc002e66c,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 bb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2bb
c000fcc2:	e8 f0 32 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 f1 20 00 00       	call   c0011dbd <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 d8 a2 02 c0       	push   0xc002a2d8
c000fcf0:	e8 c2 32 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 f1 24 00 00       	call   c0012200 <VAS::~VAS()>
c000fd0f:	c7 04 24 eb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2eb
c000fd16:	e8 4a a9 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000fd1b:	83 c4 30             	add    esp,0x30
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba 40 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1ac0],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be 40 e5 02 c0       	mov    esi,0xc002e540
c000fd8c:	8d 90 40 e5 02 c0    	lea    edx,[eax-0x3ffd1ac0]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 40 e5 02 c0    	lea    eax,[edx-0x3ffd1ac0]
c000fdf2:	8d 94 11 40 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1ac0]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 18 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d418
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 18 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d418
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 18 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d418
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 30 e5 02 c0       	mov    eax,ds:0xc002e530
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 30 e5 02 c0       	mov    ds:0xc002e530,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d 34 e5 02 c0    	idiv   DWORD PTR ds:0xc002e534
c000fe94:	39 05 2c e5 02 c0    	cmp    DWORD PTR ds:0xc002e52c,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 2c e5 02 c0       	mov    ds:0xc002e52c,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 b3 0a 00 00       	call   c0010970 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 06 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a306
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 80 a7 00 00       	jmp    c001a665 <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 14             	sub    esp,0x14
c000feea:	8b 35 24 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e524
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x19>
c000fef4:	89 1d 24 e5 02 c0    	mov    DWORD PTR ds:0xc002e524,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x3d>
c000fefe:	53                   	push   ebx
c000feff:	e8 3b ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 7b                	je     c000ff84 <Phys::allocatePage()+0x9f>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0xf>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 24 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e524,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x19>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff2d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff33:	e8 86 2d 00 00       	call   c0012cbe <VAS::scanForEviction()>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a8 00 00 00    	jne    c000ffeb <Phys::allocatePage()+0x106>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 2b a3 02 c0       	push   0xc002a32b
c000ff4b:	e8 67 30 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ff50:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff57:	e8 c6 fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff5c:	83 c4 10             	add    esp,0x10
c000ff5f:	85 c0                	test   eax,eax
c000ff61:	75 6f                	jne    c000ffd2 <Phys::allocatePage()+0xed>
c000ff63:	83 ec 0c             	sub    esp,0xc
c000ff66:	68 3c a3 02 c0       	push   0xc002a33c
c000ff6b:	e8 f5 a6 00 00       	call   c001a665 <Krnl::panic(char const*)>
c000ff70:	83 c4 10             	add    esp,0x10
c000ff73:	8b 1d 24 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e524
c000ff79:	53                   	push   ebx
c000ff7a:	e8 c0 fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff7f:	5a                   	pop    edx
c000ff80:	84 c0                	test   al,al
c000ff82:	75 85                	jne    c000ff09 <Phys::allocatePage()+0x24>
c000ff84:	6a 01                	push   0x1
c000ff86:	53                   	push   ebx
c000ff87:	e8 81 fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff8c:	a1 30 e5 02 c0       	mov    eax,ds:0xc002e530
c000ff91:	40                   	inc    eax
c000ff92:	a3 30 e5 02 c0       	mov    ds:0xc002e530,eax
c000ff97:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9d:	c1 e0 02             	shl    eax,0x2
c000ffa0:	99                   	cdq    
c000ffa1:	f7 3d 34 e5 02 c0    	idiv   DWORD PTR ds:0xc002e534
c000ffa7:	5a                   	pop    edx
c000ffa8:	39 05 2c e5 02 c0    	cmp    DWORD PTR ds:0xc002e52c,eax
c000ffae:	59                   	pop    ecx
c000ffaf:	75 27                	jne    c000ffd8 <Phys::allocatePage()+0xf3>
c000ffb1:	83 ec 08             	sub    esp,0x8
c000ffb4:	a1 24 e5 02 c0       	mov    eax,ds:0xc002e524
c000ffb9:	c1 e0 0c             	shl    eax,0xc
c000ffbc:	50                   	push   eax
c000ffbd:	68 1c a3 02 c0       	push   0xc002a31c
c000ffc2:	e8 f0 2f 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000ffc7:	a1 24 e5 02 c0       	mov    eax,ds:0xc002e524
c000ffcc:	83 c4 10             	add    esp,0x10
c000ffcf:	c1 e0 0c             	shl    eax,0xc
c000ffd2:	83 c4 14             	add    esp,0x14
c000ffd5:	5b                   	pop    ebx
c000ffd6:	5e                   	pop    esi
c000ffd7:	c3                   	ret    
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	a3 2c e5 02 c0       	mov    ds:0xc002e52c,eax
c000ffe0:	50                   	push   eax
c000ffe1:	e8 8a 09 00 00       	call   c0010970 <VgaText::updateRAMUsageDisplay(int)>
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	eb c6                	jmp    c000ffb1 <Phys::allocatePage()+0xcc>
c000ffeb:	83 ec 08             	sub    esp,0x8
c000ffee:	50                   	push   eax
c000ffef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff3:	68 1c a3 02 c0       	push   0xc002a31c
c000fff8:	e8 ba 2f 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010004:	eb cc                	jmp    c000ffd2 <Phys::allocatePage()+0xed>

c0010006 <Phys::allocateContiguousPages(int)>:
c0010006:	57                   	push   edi
c0010007:	56                   	push   esi
c0010008:	53                   	push   ebx
c0010009:	31 db                	xor    ebx,ebx
c001000b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001000f:	e8 46 de 00 00       	call   c001de5a <lockScheduler()>
c0010014:	85 db                	test   ebx,ebx
c0010016:	75 11                	jne    c0010029 <Phys::allocateContiguousPages(int)+0x23>
c0010018:	e8 c8 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c001001d:	83 ff 01             	cmp    edi,0x1
c0010020:	89 c6                	mov    esi,eax
c0010022:	74 21                	je     c0010045 <Phys::allocateContiguousPages(int)+0x3f>
c0010024:	bb 01 00 00 00       	mov    ebx,0x1
c0010029:	e8 b7 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c001002e:	89 da                	mov    edx,ebx
c0010030:	c1 e2 0c             	shl    edx,0xc
c0010033:	01 f2                	add    edx,esi
c0010035:	39 c2                	cmp    edx,eax
c0010037:	74 17                	je     c0010050 <Phys::allocateContiguousPages(int)+0x4a>
c0010039:	bb 01 00 00 00       	mov    ebx,0x1
c001003e:	89 c6                	mov    esi,eax
c0010040:	83 ff 01             	cmp    edi,0x1
c0010043:	75 e4                	jne    c0010029 <Phys::allocateContiguousPages(int)+0x23>
c0010045:	e8 12 de 00 00       	call   c001de5c <unlockScheduler()>
c001004a:	89 f0                	mov    eax,esi
c001004c:	5b                   	pop    ebx
c001004d:	5e                   	pop    esi
c001004e:	5f                   	pop    edi
c001004f:	c3                   	ret    
c0010050:	43                   	inc    ebx
c0010051:	39 fb                	cmp    ebx,edi
c0010053:	75 bf                	jne    c0010014 <Phys::allocateContiguousPages(int)+0xe>
c0010055:	e8 02 de 00 00       	call   c001de5c <unlockScheduler()>
c001005a:	89 f0                	mov    eax,esi
c001005c:	5b                   	pop    ebx
c001005d:	5e                   	pop    esi
c001005e:	5f                   	pop    edi
c001005f:	c3                   	ret    

c0010060 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010060:	56                   	push   esi
c0010061:	53                   	push   ebx
c0010062:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010066:	39 1d 28 e5 02 c0    	cmp    DWORD PTR ds:0xc002e528,ebx
c001006c:	73 06                	jae    c0010074 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001006e:	89 1d 28 e5 02 c0    	mov    DWORD PTR ds:0xc002e528,ebx
c0010074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010078:	c1 eb 0c             	shr    ebx,0xc
c001007b:	c1 e8 0c             	shr    eax,0xc
c001007e:	39 d8                	cmp    eax,ebx
c0010080:	73 13                	jae    c0010095 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010082:	6a 00                	push   0x0
c0010084:	8d 70 01             	lea    esi,[eax+0x1]
c0010087:	50                   	push   eax
c0010088:	e8 80 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c001008d:	5a                   	pop    edx
c001008e:	89 f0                	mov    eax,esi
c0010090:	59                   	pop    ecx
c0010091:	39 f3                	cmp    ebx,esi
c0010093:	75 ed                	jne    c0010082 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010095:	5b                   	pop    ebx
c0010096:	5e                   	pop    esi
c0010097:	c3                   	ret    

c0010098 <Phys::physicalMemorySetup(unsigned int)>:
c0010098:	55                   	push   ebp
c0010099:	57                   	push   edi
c001009a:	56                   	push   esi
c001009b:	53                   	push   ebx
c001009c:	31 db                	xor    ebx,ebx
c001009e:	83 ec 40             	sub    esp,0x40
c00100a1:	6a 30                	push   0x30
c00100a3:	6a 00                	push   0x0
c00100a5:	68 40 e5 02 c0       	push   0xc002e540
c00100aa:	e8 c9 06 ff ff       	call   c0000778 <memset>
c00100af:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b8:	05 00 10 00 00       	add    eax,0x1000
c00100bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	83 ec 08             	sub    esp,0x8
c00100c7:	6a 01                	push   0x1
c00100c9:	53                   	push   ebx
c00100ca:	43                   	inc    ebx
c00100cb:	e8 3d fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100d0:	83 c4 10             	add    esp,0x10
c00100d3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100d9:	75 e9                	jne    c00100c4 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100db:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100e2:	66 85 c0             	test   ax,ax
c00100e5:	0f 84 8e 01 00 00    	je     c0010279 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100fb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010104:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001010c:	eb 15                	jmp    c0010123 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001010e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010112:	83 c3 18             	add    ebx,0x18
c0010115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010119:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001011d:	0f 84 66 01 00 00    	je     c0010289 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010123:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010126:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010129:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001012c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010130:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010134:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010136:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010139:	01 f0                	add    eax,esi
c001013b:	55                   	push   ebp
c001013c:	11 fa                	adc    edx,edi
c001013e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010142:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001014a:	56                   	push   esi
c001014b:	68 74 a3 02 c0       	push   0xc002a374
c0010150:	e8 62 2e 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0010155:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010159:	83 c4 10             	add    esp,0x10
c001015c:	09 f8                	or     eax,edi
c001015e:	0f 85 25 01 00 00    	jne    c0010289 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010164:	4d                   	dec    ebp
c0010165:	75 a7                	jne    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010167:	ba 00 00 08 00       	mov    edx,0x80000
c001016c:	89 c1                	mov    ecx,eax
c001016e:	39 f2                	cmp    edx,esi
c0010170:	19 f9                	sbb    ecx,edi
c0010172:	0f 82 a7 00 00 00    	jb     c001021f <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010178:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001017c:	89 c1                	mov    ecx,eax
c001017e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010182:	0f 83 97 00 00 00    	jae    c001021f <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010188:	ba 00 00 0a 00       	mov    edx,0xa0000
c001018d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010191:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010195:	39 fa                	cmp    edx,edi
c0010197:	19 e8                	sbb    eax,ebp
c0010199:	0f 82 14 01 00 00    	jb     c00102b3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001019f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101a3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101ad:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101b2:	83 d5 ff             	adc    ebp,0xffffffff
c00101b5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101b9:	31 c0                	xor    eax,eax
c00101bb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101bf:	39 fa                	cmp    edx,edi
c00101c1:	89 c1                	mov    ecx,eax
c00101c3:	19 e9                	sbb    ecx,ebp
c00101c5:	0f 83 43 ff ff ff    	jae    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cb:	be 00 00 08 00       	mov    esi,0x80000
c00101d0:	50                   	push   eax
c00101d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101d5:	57                   	push   edi
c00101d6:	56                   	push   esi
c00101d7:	68 98 a3 02 c0       	push   0xc002a398
c00101dc:	e8 d6 2d 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00101e1:	5a                   	pop    edx
c00101e2:	59                   	pop    ecx
c00101e3:	57                   	push   edi
c00101e4:	56                   	push   esi
c00101e5:	e8 76 fe ff ff       	call   c0010060 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101f2:	83 c4 0c             	add    esp,0xc
c00101f5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f9:	03 05 34 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e534
c00101ff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010206:	a3 34 e5 02 c0       	mov    ds:0xc002e534,eax
c001020b:	52                   	push   edx
c001020c:	50                   	push   eax
c001020d:	68 58 a3 02 c0       	push   0xc002a358
c0010212:	e8 a0 2d 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0010217:	83 c4 10             	add    esp,0x10
c001021a:	e9 ef fe ff ff       	jmp    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c001021f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010223:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010227:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001022b:	39 ea                	cmp    edx,ebp
c001022d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010231:	0f 82 d7 fe ff ff    	jb     c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010237:	ba ff 1f 00 00       	mov    edx,0x1fff
c001023c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010240:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010244:	0f 83 c4 fe ff ff    	jae    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024a:	39 ee                	cmp    esi,ebp
c001024c:	89 f8                	mov    eax,edi
c001024e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010252:	0f 83 78 ff ff ff    	jae    c00101d0 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001025c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010260:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010264:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010268:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001026c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010270:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010274:	e9 57 ff ff ff       	jmp    c00101d0 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010279:	83 ec 0c             	sub    esp,0xc
c001027c:	68 4a a3 02 c0       	push   0xc002a34a
c0010281:	e8 df a3 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0010286:	83 c4 10             	add    esp,0x10
c0010289:	bb 40 01 00 00       	mov    ebx,0x140
c001028e:	83 ec 08             	sub    esp,0x8
c0010291:	6a 00                	push   0x0
c0010293:	53                   	push   ebx
c0010294:	43                   	inc    ebx
c0010295:	e8 73 fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c001029a:	ff 05 34 e5 02 c0    	inc    DWORD PTR ds:0xc002e534
c00102a0:	83 c4 10             	add    esp,0x10
c00102a3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102a9:	75 e3                	jne    c001028e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ab:	83 c4 3c             	add    esp,0x3c
c00102ae:	5b                   	pop    ebx
c00102af:	5e                   	pop    esi
c00102b0:	5f                   	pop    edi
c00102b1:	5d                   	pop    ebp
c00102b2:	c3                   	ret    
c00102b3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102c3:	e9 d7 fe ff ff       	jmp    c001019f <Phys::physicalMemorySetup(unsigned int)+0x107>

c00102c8 <Pipe::isAtty()>:
c00102c8:	31 c0                	xor    eax,eax
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <Pipe::~Pipe()>:
c00102cc:	83 ec 0c             	sub    esp,0xc
c00102cf:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c00102d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d8:	89 10                	mov    DWORD PTR [eax],edx
c00102da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102de:	83 ec 0c             	sub    esp,0xc
c00102e1:	50                   	push   eax
c00102e2:	e8 37 16 00 00       	call   c001191e <UnixFile::~UnixFile()>
c00102e7:	83 c4 10             	add    esp,0x10
c00102ea:	90                   	nop
c00102eb:	83 c4 0c             	add    esp,0xc
c00102ee:	c3                   	ret    
c00102ef:	90                   	nop

c00102f0 <Pipe::~Pipe()>:
c00102f0:	83 ec 0c             	sub    esp,0xc
c00102f3:	83 ec 0c             	sub    esp,0xc
c00102f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fa:	e8 cd ff ff ff       	call   c00102cc <Pipe::~Pipe()>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	83 ec 08             	sub    esp,0x8
c0010305:	6a 20                	push   0x20
c0010307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030b:	e8 c7 2b 00 00       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0010310:	83 c4 10             	add    esp,0x10
c0010313:	83 c4 0c             	add    esp,0xc
c0010316:	c3                   	ret    
c0010317:	90                   	nop

c0010318 <Pipe::read(unsigned long long, void*, int*)>:
c0010318:	55                   	push   ebp
c0010319:	57                   	push   edi
c001031a:	56                   	push   esi
c001031b:	53                   	push   ebx
c001031c:	83 ec 1c             	sub    esp,0x1c
c001031f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010323:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010327:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001032b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001032e:	89 c8                	mov    eax,ecx
c0010330:	99                   	cdq    
c0010331:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010335:	74 19                	je     c0010350 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010337:	39 f9                	cmp    ecx,edi
c0010339:	89 d1                	mov    ecx,edx
c001033b:	19 f1                	sbb    ecx,esi
c001033d:	73 11                	jae    c0010350 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001033f:	e8 16 db 00 00       	call   c001de5a <lockScheduler()>
c0010344:	e8 4d de 00 00       	call   c001e196 <schedule()>
c0010349:	e8 0e db 00 00       	call   c001de5c <unlockScheduler()>
c001034e:	eb db                	jmp    c001032b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010350:	39 f8                	cmp    eax,edi
c0010352:	89 d1                	mov    ecx,edx
c0010354:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010358:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001035c:	19 f1                	sbb    ecx,esi
c001035e:	73 08                	jae    c0010368 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010364:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010368:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001036b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001036e:	29 c6                	sub    esi,eax
c0010370:	89 f1                	mov    ecx,esi
c0010372:	c1 f9 1f             	sar    ecx,0x1f
c0010375:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010379:	89 ca                	mov    edx,ecx
c001037b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001037f:	19 d1                	sbb    ecx,edx
c0010381:	73 04                	jae    c0010387 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010383:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010387:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001038b:	89 fd                	mov    ebp,edi
c001038d:	29 f5                	sub    ebp,esi
c001038f:	85 f6                	test   esi,esi
c0010391:	74 12                	je     c00103a5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010393:	52                   	push   edx
c0010394:	56                   	push   esi
c0010395:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010398:	50                   	push   eax
c0010399:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001039d:	e8 a2 03 ff ff       	call   c0000744 <memcpy>
c00103a2:	83 c4 10             	add    esp,0x10
c00103a5:	85 ed                	test   ebp,ebp
c00103a7:	74 12                	je     c00103bb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103a9:	50                   	push   eax
c00103aa:	55                   	push   ebp
c00103ab:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ae:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103b2:	56                   	push   esi
c00103b3:	e8 8c 03 ff ff       	call   c0000744 <memcpy>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103c1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c4:	99                   	cdq    
c00103c5:	89 f7                	mov    edi,esi
c00103c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103cf:	c1 ff 1f             	sar    edi,0x1f
c00103d2:	57                   	push   edi
c00103d3:	56                   	push   esi
c00103d4:	52                   	push   edx
c00103d5:	50                   	push   eax
c00103d6:	e8 61 67 01 00       	call   c0026b3c <__umoddi3>
c00103db:	83 c4 10             	add    esp,0x10
c00103de:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103e1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103e6:	75 10                	jne    c00103f8 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103e8:	83 ec 0c             	sub    esp,0xc
c00103eb:	68 c1 a3 02 c0       	push   0xc002a3c1
c00103f0:	e8 70 a2 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00103f5:	83 c4 10             	add    esp,0x10
c00103f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010400:	89 10                	mov    DWORD PTR [eax],edx
c0010402:	83 c4 1c             	add    esp,0x1c
c0010405:	31 c0                	xor    eax,eax
c0010407:	5b                   	pop    ebx
c0010408:	5e                   	pop    esi
c0010409:	5f                   	pop    edi
c001040a:	5d                   	pop    ebp
c001040b:	c3                   	ret    

c001040c <Pipe::write(unsigned long long, void*, int*)>:
c001040c:	55                   	push   ebp
c001040d:	57                   	push   edi
c001040e:	56                   	push   esi
c001040f:	53                   	push   ebx
c0010410:	83 ec 1c             	sub    esp,0x1c
c0010413:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010417:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001041b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001041f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010422:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010425:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010428:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001042c:	89 de                	mov    esi,ebx
c001042e:	89 df                	mov    edi,ebx
c0010430:	c1 ff 1f             	sar    edi,0x1f
c0010433:	01 c6                	add    esi,eax
c0010435:	89 c8                	mov    eax,ecx
c0010437:	11 d7                	adc    edi,edx
c0010439:	99                   	cdq    
c001043a:	39 f1                	cmp    ecx,esi
c001043c:	89 d0                	mov    eax,edx
c001043e:	19 f8                	sbb    eax,edi
c0010440:	b8 01 00 00 00       	mov    eax,0x1
c0010445:	0f 82 80 00 00 00    	jb     c00104cb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001044b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001044e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010451:	01 d8                	add    eax,ebx
c0010453:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010457:	99                   	cdq    
c0010458:	f7 f9                	idiv   ecx
c001045a:	29 d1                	sub    ecx,edx
c001045c:	89 d7                	mov    edi,edx
c001045e:	89 c8                	mov    eax,ecx
c0010460:	99                   	cdq    
c0010461:	39 ce                	cmp    esi,ecx
c0010463:	19 d3                	sbb    ebx,edx
c0010465:	bb 00 00 00 00       	mov    ebx,0x0
c001046a:	72 04                	jb     c0010470 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001046c:	89 f3                	mov    ebx,esi
c001046e:	29 cb                	sub    ebx,ecx
c0010470:	89 f1                	mov    ecx,esi
c0010472:	29 d9                	sub    ecx,ebx
c0010474:	74 1a                	je     c0010490 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010476:	52                   	push   edx
c0010477:	51                   	push   ecx
c0010478:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001047c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010480:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010483:	57                   	push   edi
c0010484:	e8 bb 02 ff ff       	call   c0000744 <memcpy>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010490:	85 db                	test   ebx,ebx
c0010492:	74 12                	je     c00104a6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010494:	50                   	push   eax
c0010495:	53                   	push   ebx
c0010496:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001049a:	51                   	push   ecx
c001049b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001049e:	e8 a1 02 ff ff       	call   c0000744 <memcpy>
c00104a3:	83 c4 10             	add    esp,0x10
c00104a6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104a9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ae:	75 10                	jne    c00104c0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104b0:	83 ec 0c             	sub    esp,0xc
c00104b3:	68 dd a3 02 c0       	push   0xc002a3dd
c00104b8:	e8 a8 a1 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00104bd:	83 c4 10             	add    esp,0x10
c00104c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104c7:	89 38                	mov    DWORD PTR [eax],edi
c00104c9:	31 c0                	xor    eax,eax
c00104cb:	83 c4 1c             	add    esp,0x1c
c00104ce:	5b                   	pop    ebx
c00104cf:	5e                   	pop    esi
c00104d0:	5f                   	pop    edi
c00104d1:	5d                   	pop    ebp
c00104d2:	c3                   	ret    
c00104d3:	90                   	nop

c00104d4 <Pipe::Pipe(int)>:
c00104d4:	83 ec 0c             	sub    esp,0xc
c00104d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104db:	83 ec 08             	sub    esp,0x8
c00104de:	6a 00                	push   0x0
c00104e0:	50                   	push   eax
c00104e1:	e8 56 12 00 00       	call   c001173c <UnixFile::UnixFile(int)>
c00104e6:	83 c4 10             	add    esp,0x10
c00104e9:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	89 10                	mov    DWORD PTR [eax],edx
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010503:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010515:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010519:	83 ec 0c             	sub    esp,0xc
c001051c:	50                   	push   eax
c001051d:	e8 21 f3 ff ff       	call   c000f843 <malloc>
c0010522:	83 c4 10             	add    esp,0x10
c0010525:	89 c2                	mov    edx,eax
c0010527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010532:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010536:	90                   	nop
c0010537:	83 c4 0c             	add    esp,0xc
c001053a:	c3                   	ret    
c001053b:	90                   	nop

c001053c <VgaText::isAtty()>:
c001053c:	b0 01                	mov    al,0x1
c001053e:	c3                   	ret    
c001053f:	90                   	nop

c0010540 <VgaText::~VgaText()>:
c0010540:	83 ec 0c             	sub    esp,0xc
c0010543:	ba c0 a4 02 c0       	mov    edx,0xc002a4c0
c0010548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054c:	89 10                	mov    DWORD PTR [eax],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	83 ec 0c             	sub    esp,0xc
c0010555:	50                   	push   eax
c0010556:	e8 c3 13 00 00       	call   c001191e <UnixFile::~UnixFile()>
c001055b:	83 c4 10             	add    esp,0x10
c001055e:	90                   	nop
c001055f:	83 c4 0c             	add    esp,0xc
c0010562:	c3                   	ret    
c0010563:	90                   	nop

c0010564 <VgaText::~VgaText()>:
c0010564:	83 ec 0c             	sub    esp,0xc
c0010567:	83 ec 0c             	sub    esp,0xc
c001056a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056e:	e8 cd ff ff ff       	call   c0010540 <VgaText::~VgaText()>
c0010573:	83 c4 10             	add    esp,0x10
c0010576:	83 ec 08             	sub    esp,0x8
c0010579:	68 60 12 00 00       	push   0x1260
c001057e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010582:	e8 50 29 00 00       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0010587:	83 c4 10             	add    esp,0x10
c001058a:	83 c4 0c             	add    esp,0xc
c001058d:	c3                   	ret    

c001058e <VgaText::read(unsigned long long, void*, int*)>:
c001058e:	83 ec 10             	sub    esp,0x10
c0010591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010595:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059d:	e8 c4 5d 00 00       	call   c0016366 <readKeyboard(VgaText*, char*, unsigned long)>
c00105a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105a6:	89 02                	mov    DWORD PTR [edx],eax
c00105a8:	31 c0                	xor    eax,eax
c00105aa:	83 c4 1c             	add    esp,0x1c
c00105ad:	c3                   	ret    

c00105ae <setTerminalScrollLock(bool)>:
c00105ae:	c3                   	ret    

c00105af <addToTerminalCycle(VgaText*)>:
c00105af:	8b 15 c0 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c0
c00105b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b9:	85 d2                	test   edx,edx
c00105bb:	75 0c                	jne    c00105c9 <addToTerminalCycle(VgaText*)+0x1a>
c00105bd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105c3:	a3 c0 e5 02 c0       	mov    ds:0xc002e5c0,eax
c00105c8:	c3                   	ret    
c00105c9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105cf:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105d5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105db:	c3                   	ret    

c00105dc <installVgaTextImplementation()>:
c00105dc:	83 ec 10             	sub    esp,0x10
c00105df:	6a 20                	push   0x20
c00105e1:	6a 00                	push   0x0
c00105e3:	68 a0 e5 02 c0       	push   0xc002e5a0
c00105e8:	e8 8b 01 ff ff       	call   c0000778 <memset>
c00105ed:	83 c4 1c             	add    esp,0x1c
c00105f0:	c3                   	ret    

c00105f1 <scrollTerminalScrollLock(int)>:
c00105f1:	c3                   	ret    

c00105f2 <VgaText::load()>:
c00105f2:	53                   	push   ebx
c00105f3:	31 c0                	xor    eax,eax
c00105f5:	83 ec 58             	sub    esp,0x58
c00105f8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105fc:	89 e2                	mov    edx,esp
c00105fe:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010602:	40                   	inc    eax
c0010603:	83 f8 50             	cmp    eax,0x50
c0010606:	75 f6                	jne    c00105fe <VgaText::load()+0xc>
c0010608:	31 c0                	xor    eax,eax
c001060a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010611:	84 c9                	test   cl,cl
c0010613:	74 06                	je     c001061b <VgaText::load()+0x29>
c0010615:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010618:	40                   	inc    eax
c0010619:	eb ef                	jmp    c001060a <VgaText::load()+0x18>
c001061b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010621:	85 c0                	test   eax,eax
c0010623:	74 09                	je     c001062e <VgaText::load()+0x3c>
c0010625:	51                   	push   ecx
c0010626:	51                   	push   ecx
c0010627:	52                   	push   edx
c0010628:	53                   	push   ebx
c0010629:	ff d0                	call   eax
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010634:	85 c0                	test   eax,eax
c0010636:	74 09                	je     c0010641 <VgaText::load()+0x4f>
c0010638:	83 ec 0c             	sub    esp,0xc
c001063b:	53                   	push   ebx
c001063c:	ff d0                	call   eax
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	83 c4 58             	add    esp,0x58
c0010644:	5b                   	pop    ebx
c0010645:	c3                   	ret    

c0010646 <VgaText::updateCursor()>:
c0010646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064a:	39 05 c4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c4,eax
c0010650:	75 0c                	jne    c001065e <VgaText::updateCursor()+0x18>
c0010652:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010658:	85 c0                	test   eax,eax
c001065a:	74 02                	je     c001065e <VgaText::updateCursor()+0x18>
c001065c:	ff e0                	jmp    eax
c001065e:	c3                   	ret    
c001065f:	90                   	nop

c0010660 <VgaText::showCursor(bool)>:
c0010660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010668:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001066e:	c3                   	ret    
c001066f:	90                   	nop

c0010670 <VgaText::disableBlink(bool)>:
c0010670:	56                   	push   esi
c0010671:	53                   	push   ebx
c0010672:	51                   	push   ecx
c0010673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010677:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001067b:	39 1d c4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c4,ebx
c0010681:	75 18                	jne    c001069b <VgaText::disableBlink(bool)+0x2b>
c0010683:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010689:	85 c0                	test   eax,eax
c001068b:	74 0e                	je     c001069b <VgaText::disableBlink(bool)+0x2b>
c001068d:	89 f1                	mov    ecx,esi
c001068f:	52                   	push   edx
c0010690:	52                   	push   edx
c0010691:	0f b6 d1             	movzx  edx,cl
c0010694:	52                   	push   edx
c0010695:	53                   	push   ebx
c0010696:	ff d0                	call   eax
c0010698:	83 c4 10             	add    esp,0x10
c001069b:	89 f0                	mov    eax,esi
c001069d:	83 f0 01             	xor    eax,0x1
c00106a0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106a6:	58                   	pop    eax
c00106a7:	5b                   	pop    ebx
c00106a8:	5e                   	pop    esi
c00106a9:	c3                   	ret    

c00106aa <VgaText::doANSI_SGR(int)>:
c00106aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b2:	85 d2                	test   edx,edx
c00106b4:	75 14                	jne    c00106ca <VgaText::doANSI_SGR(int)+0x20>
c00106b6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106bc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106c2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106c8:	eb 65                	jmp    c001072f <VgaText::doANSI_SGR(int)+0x85>
c00106ca:	83 fa 07             	cmp    edx,0x7
c00106cd:	75 14                	jne    c00106e3 <VgaText::doANSI_SGR(int)+0x39>
c00106cf:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106d5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106db:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106e1:	eb 4c                	jmp    c001072f <VgaText::doANSI_SGR(int)+0x85>
c00106e3:	83 fa 1b             	cmp    edx,0x1b
c00106e6:	74 ce                	je     c00106b6 <VgaText::doANSI_SGR(int)+0xc>
c00106e8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106eb:	83 f9 07             	cmp    ecx,0x7
c00106ee:	77 09                	ja     c00106f9 <VgaText::doANSI_SGR(int)+0x4f>
c00106f0:	8b 14 8d 40 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2bc0]
c00106f7:	eb 20                	jmp    c0010719 <VgaText::doANSI_SGR(int)+0x6f>
c00106f9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106fc:	83 f9 07             	cmp    ecx,0x7
c00106ff:	77 09                	ja     c001070a <VgaText::doANSI_SGR(int)+0x60>
c0010701:	8b 14 8d 40 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2bc0]
c0010708:	eb 25                	jmp    c001072f <VgaText::doANSI_SGR(int)+0x85>
c001070a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001070d:	83 f9 07             	cmp    ecx,0x7
c0010710:	77 0e                	ja     c0010720 <VgaText::doANSI_SGR(int)+0x76>
c0010712:	8b 14 95 f8 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d08]
c0010719:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071f:	c3                   	ret    
c0010720:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010723:	83 f9 07             	cmp    ecx,0x7
c0010726:	77 0d                	ja     c0010735 <VgaText::doANSI_SGR(int)+0x8b>
c0010728:	8b 14 95 d0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d30]
c001072f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010735:	c3                   	ret    

c0010736 <VgaText::setDefaultBgColour(VgaColour)>:
c0010736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001073a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001073e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010744:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001074a:	c3                   	ret    
c001074b:	90                   	nop

c001074c <VgaText::setDefaultFgColour(VgaColour)>:
c001074c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010754:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001075a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010760:	c3                   	ret    
c0010761:	90                   	nop

c0010762 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010762:	53                   	push   ebx
c0010763:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010767:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001076b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001076f:	51                   	push   ecx
c0010770:	e8 c1 ff ff ff       	call   c0010736 <VgaText::setDefaultBgColour(VgaColour)>
c0010775:	58                   	pop    eax
c0010776:	5a                   	pop    edx
c0010777:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001077b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001077f:	5b                   	pop    ebx
c0010780:	eb ca                	jmp    c001074c <VgaText::setDefaultFgColour(VgaColour)>

c0010782 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010782:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010786:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001078b:	83 e0 0f             	and    eax,0xf
c001078e:	c1 e2 04             	shl    edx,0x4
c0010791:	09 d0                	or     eax,edx
c0010793:	c3                   	ret    

c0010794 <VgaText::scrollScreen()>:
c0010794:	57                   	push   edi
c0010795:	56                   	push   esi
c0010796:	be 01 00 00 00       	mov    esi,0x1
c001079b:	53                   	push   ebx
c001079c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107a6:	31 ff                	xor    edi,edi
c00107a8:	01 d9                	add    ecx,ebx
c00107aa:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107ad:	83 fe 17             	cmp    esi,0x17
c00107b0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107b6:	75 28                	jne    c00107e0 <VgaText::scrollScreen()+0x4c>
c00107b8:	f7 c7 01 00 00 00    	test   edi,0x1
c00107be:	74 1c                	je     c00107dc <VgaText::scrollScreen()+0x48>
c00107c0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107c7:	50                   	push   eax
c00107c8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107cf:	50                   	push   eax
c00107d0:	e8 ad ff ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c00107d5:	5a                   	pop    edx
c00107d6:	5a                   	pop    edx
c00107d7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107da:	eb 04                	jmp    c00107e0 <VgaText::scrollScreen()+0x4c>
c00107dc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107e0:	47                   	inc    edi
c00107e1:	41                   	inc    ecx
c00107e2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107e8:	75 c0                	jne    c00107aa <VgaText::scrollScreen()+0x16>
c00107ea:	46                   	inc    esi
c00107eb:	83 fe 18             	cmp    esi,0x18
c00107ee:	75 b0                	jne    c00107a0 <VgaText::scrollScreen()+0xc>
c00107f0:	39 1d c4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c4,ebx
c00107f6:	75 24                	jne    c001081c <VgaText::scrollScreen()+0x88>
c00107f8:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107ff:	74 08                	je     c0010809 <VgaText::scrollScreen()+0x75>
c0010801:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010807:	eb 13                	jmp    c001081c <VgaText::scrollScreen()+0x88>
c0010809:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001080f:	85 c0                	test   eax,eax
c0010811:	74 09                	je     c001081c <VgaText::scrollScreen()+0x88>
c0010813:	83 ec 0c             	sub    esp,0xc
c0010816:	53                   	push   ebx
c0010817:	ff d0                	call   eax
c0010819:	83 c4 10             	add    esp,0x10
c001081c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010820:	5b                   	pop    ebx
c0010821:	5e                   	pop    esi
c0010822:	5f                   	pop    edi
c0010823:	e9 1e fe ff ff       	jmp    c0010646 <VgaText::updateCursor()>

c0010828 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010828:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001082d:	c1 e0 08             	shl    eax,0x8
c0010830:	89 c2                	mov    edx,eax
c0010832:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010837:	09 d0                	or     eax,edx
c0010839:	c3                   	ret    

c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001083a:	53                   	push   ebx
c001083b:	83 ec 08             	sub    esp,0x8
c001083e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010842:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010847:	50                   	push   eax
c0010848:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001084d:	50                   	push   eax
c001084e:	e8 2f ff ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c0010853:	5a                   	pop    edx
c0010854:	0f b6 c0             	movzx  eax,al
c0010857:	5b                   	pop    ebx
c0010858:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001085d:	50                   	push   eax
c001085e:	53                   	push   ebx
c001085f:	e8 c4 ff ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010864:	5a                   	pop    edx
c0010865:	5a                   	pop    edx
c0010866:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001086c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010870:	0f b7 d2             	movzx  edx,dx
c0010873:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010878:	39 0d c4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c4,ecx
c001087e:	75 14                	jne    c0010894 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010880:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010886:	85 c0                	test   eax,eax
c0010888:	74 0a                	je     c0010894 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001088e:	83 c4 08             	add    esp,0x8
c0010891:	5b                   	pop    ebx
c0010892:	ff e0                	jmp    eax
c0010894:	83 c4 08             	add    esp,0x8
c0010897:	5b                   	pop    ebx
c0010898:	c3                   	ret    
c0010899:	90                   	nop

c001089a <VgaText::getCursorX()>:
c001089a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001089e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108a4:	c3                   	ret    
c00108a5:	90                   	nop

c00108a6 <VgaText::getCursorY()>:
c00108a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108aa:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::setCursor(int, int)>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108ba:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108c4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ca:	e9 77 fd ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c00108cf:	90                   	nop

c00108d0 <VgaText::setCursorX(int)>:
c00108d0:	83 ec 10             	sub    esp,0x10
c00108d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e1:	50                   	push   eax
c00108e2:	e8 cb ff ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c00108e7:	83 c4 1c             	add    esp,0x1c
c00108ea:	c3                   	ret    
c00108eb:	90                   	nop

c00108ec <VgaText::setCursorY(int)>:
c00108ec:	83 ec 10             	sub    esp,0x10
c00108ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f7:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108fd:	50                   	push   eax
c00108fe:	e8 af ff ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0010903:	83 c4 1c             	add    esp,0x1c
c0010906:	c3                   	ret    
c0010907:	90                   	nop

c0010908 <VgaText::incrementCursor(bool)>:
c0010908:	56                   	push   esi
c0010909:	53                   	push   ebx
c001090a:	51                   	push   ecx
c001090b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001090f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010913:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010919:	40                   	inc    eax
c001091a:	83 f8 50             	cmp    eax,0x50
c001091d:	74 08                	je     c0010927 <VgaText::incrementCursor(bool)+0x1f>
c001091f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010925:	eb 33                	jmp    c001095a <VgaText::incrementCursor(bool)+0x52>
c0010927:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001092d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010937:	8d 50 01             	lea    edx,[eax+0x1]
c001093a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010940:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010946:	75 12                	jne    c001095a <VgaText::incrementCursor(bool)+0x52>
c0010948:	83 ec 0c             	sub    esp,0xc
c001094b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010951:	53                   	push   ebx
c0010952:	e8 3d fe ff ff       	call   c0010794 <VgaText::scrollScreen()>
c0010957:	83 c4 10             	add    esp,0x10
c001095a:	89 f0                	mov    eax,esi
c001095c:	84 c0                	test   al,al
c001095e:	74 0c                	je     c001096c <VgaText::incrementCursor(bool)+0x64>
c0010960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010964:	5a                   	pop    edx
c0010965:	5b                   	pop    ebx
c0010966:	5e                   	pop    esi
c0010967:	e9 da fc ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c001096c:	58                   	pop    eax
c001096d:	5b                   	pop    ebx
c001096e:	5e                   	pop    esi
c001096f:	c3                   	ret    

c0010970 <VgaText::updateRAMUsageDisplay(int)>:
c0010970:	56                   	push   esi
c0010971:	8b 35 20 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d420
c0010977:	53                   	push   ebx
c0010978:	bb 0a 00 00 00       	mov    ebx,0xa
c001097d:	6a 0f                	push   0xf
c001097f:	6a 00                	push   0x0
c0010981:	e8 fc fd ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c0010986:	5a                   	pop    edx
c0010987:	59                   	pop    ecx
c0010988:	0f b6 c8             	movzx  ecx,al
c001098b:	51                   	push   ecx
c001098c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010990:	99                   	cdq    
c0010991:	f7 fb                	idiv   ebx
c0010993:	89 d3                	mov    ebx,edx
c0010995:	83 c0 30             	add    eax,0x30
c0010998:	83 c3 30             	add    ebx,0x30
c001099b:	0f be c0             	movsx  eax,al
c001099e:	0f b6 db             	movzx  ebx,bl
c00109a1:	50                   	push   eax
c00109a2:	e8 81 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a7:	5a                   	pop    edx
c00109a8:	5a                   	pop    edx
c00109a9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109b0:	51                   	push   ecx
c00109b1:	53                   	push   ebx
c00109b2:	e8 71 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b7:	5b                   	pop    ebx
c00109b8:	5a                   	pop    edx
c00109b9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109c0:	51                   	push   ecx
c00109c1:	6a 25                	push   0x25
c00109c3:	e8 60 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c8:	59                   	pop    ecx
c00109c9:	5b                   	pop    ebx
c00109ca:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109d1:	5b                   	pop    ebx
c00109d2:	5e                   	pop    esi
c00109d3:	c3                   	ret    

c00109d4 <VgaText::updateDiskUsage()>:
c00109d4:	55                   	push   ebp
c00109d5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109da:	57                   	push   edi
c00109db:	8b 3d 20 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d420
c00109e1:	56                   	push   esi
c00109e2:	53                   	push   ebx
c00109e3:	6a 0f                	push   0xf
c00109e5:	6a 00                	push   0x0
c00109e7:	e8 96 fd ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ec:	5a                   	pop    edx
c00109ed:	0f b6 d8             	movzx  ebx,al
c00109f0:	59                   	pop    ecx
c00109f1:	8b 35 48 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032848
c00109f7:	53                   	push   ebx
c00109f8:	b9 0a 00 00 00       	mov    ecx,0xa
c00109fd:	89 f0                	mov    eax,esi
c00109ff:	99                   	cdq    
c0010a00:	f7 fd                	idiv   ebp
c0010a02:	99                   	cdq    
c0010a03:	f7 f9                	idiv   ecx
c0010a05:	8d 42 30             	lea    eax,[edx+0x30]
c0010a08:	0f b6 c0             	movzx  eax,al
c0010a0b:	50                   	push   eax
c0010a0c:	e8 17 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a11:	5d                   	pop    ebp
c0010a12:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a17:	5a                   	pop    edx
c0010a18:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a1c:	53                   	push   ebx
c0010a1d:	89 f0                	mov    eax,esi
c0010a1f:	99                   	cdq    
c0010a20:	f7 fd                	idiv   ebp
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 f7 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5d                   	pop    ebp
c0010a32:	bd 64 00 00 00       	mov    ebp,0x64
c0010a37:	5a                   	pop    edx
c0010a38:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a3f:	53                   	push   ebx
c0010a40:	89 f0                	mov    eax,esi
c0010a42:	99                   	cdq    
c0010a43:	f7 fd                	idiv   ebp
c0010a45:	99                   	cdq    
c0010a46:	f7 f9                	idiv   ecx
c0010a48:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4b:	0f b6 c0             	movzx  eax,al
c0010a4e:	50                   	push   eax
c0010a4f:	e8 d4 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a54:	5d                   	pop    ebp
c0010a55:	5a                   	pop    edx
c0010a56:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a5d:	53                   	push   ebx
c0010a5e:	89 f0                	mov    eax,esi
c0010a60:	99                   	cdq    
c0010a61:	f7 f9                	idiv   ecx
c0010a63:	89 d6                	mov    esi,edx
c0010a65:	99                   	cdq    
c0010a66:	f7 f9                	idiv   ecx
c0010a68:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6b:	0f b6 c0             	movzx  eax,al
c0010a6e:	50                   	push   eax
c0010a6f:	e8 b4 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a74:	5d                   	pop    ebp
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a81:	0f b6 f0             	movzx  esi,al
c0010a84:	56                   	push   esi
c0010a85:	e8 9e fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8a:	5e                   	pop    esi
c0010a8b:	8b 35 44 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032844
c0010a91:	5d                   	pop    ebp
c0010a92:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a99:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a9e:	53                   	push   ebx
c0010a9f:	89 f0                	mov    eax,esi
c0010aa1:	99                   	cdq    
c0010aa2:	f7 fd                	idiv   ebp
c0010aa4:	99                   	cdq    
c0010aa5:	f7 f9                	idiv   ecx
c0010aa7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aaa:	0f b6 c0             	movzx  eax,al
c0010aad:	50                   	push   eax
c0010aae:	e8 75 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab3:	5a                   	pop    edx
c0010ab4:	5d                   	pop    ebp
c0010ab5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010abc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ac1:	53                   	push   ebx
c0010ac2:	89 f0                	mov    eax,esi
c0010ac4:	99                   	cdq    
c0010ac5:	f7 fd                	idiv   ebp
c0010ac7:	99                   	cdq    
c0010ac8:	f7 f9                	idiv   ecx
c0010aca:	8d 42 30             	lea    eax,[edx+0x30]
c0010acd:	0f b6 c0             	movzx  eax,al
c0010ad0:	50                   	push   eax
c0010ad1:	e8 52 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad6:	5a                   	pop    edx
c0010ad7:	5d                   	pop    ebp
c0010ad8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010adf:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae4:	53                   	push   ebx
c0010ae5:	89 f0                	mov    eax,esi
c0010ae7:	99                   	cdq    
c0010ae8:	f7 fd                	idiv   ebp
c0010aea:	99                   	cdq    
c0010aeb:	f7 f9                	idiv   ecx
c0010aed:	83 c2 30             	add    edx,0x30
c0010af0:	0f b6 d2             	movzx  edx,dl
c0010af3:	52                   	push   edx
c0010af4:	e8 2f fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af9:	5a                   	pop    edx
c0010afa:	5d                   	pop    ebp
c0010afb:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b02:	53                   	push   ebx
c0010b03:	89 f0                	mov    eax,esi
c0010b05:	99                   	cdq    
c0010b06:	f7 f9                	idiv   ecx
c0010b08:	89 d6                	mov    esi,edx
c0010b0a:	99                   	cdq    
c0010b0b:	f7 f9                	idiv   ecx
c0010b0d:	8d 42 30             	lea    eax,[edx+0x30]
c0010b10:	0f b6 c0             	movzx  eax,al
c0010b13:	50                   	push   eax
c0010b14:	e8 0f fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b19:	5a                   	pop    edx
c0010b1a:	59                   	pop    ecx
c0010b1b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b22:	53                   	push   ebx
c0010b23:	8d 46 30             	lea    eax,[esi+0x30]
c0010b26:	0f b6 f0             	movzx  esi,al
c0010b29:	56                   	push   esi
c0010b2a:	e8 f9 fc ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2f:	5b                   	pop    ebx
c0010b30:	5e                   	pop    esi
c0010b31:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b38:	5b                   	pop    ebx
c0010b39:	5e                   	pop    esi
c0010b3a:	5f                   	pop    edi
c0010b3b:	5d                   	pop    ebp
c0010b3c:	c3                   	ret    
c0010b3d:	90                   	nop

c0010b3e <VgaText::updateTitle()>:
c0010b3e:	53                   	push   ebx
c0010b3f:	31 c0                	xor    eax,eax
c0010b41:	83 ec 58             	sub    esp,0x58
c0010b44:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b48:	89 e1                	mov    ecx,esp
c0010b4a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b4e:	40                   	inc    eax
c0010b4f:	83 f8 50             	cmp    eax,0x50
c0010b52:	75 f6                	jne    c0010b4a <VgaText::updateTitle()+0xc>
c0010b54:	31 c0                	xor    eax,eax
c0010b56:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b5d:	84 db                	test   bl,bl
c0010b5f:	74 06                	je     c0010b67 <VgaText::updateTitle()+0x29>
c0010b61:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b64:	40                   	inc    eax
c0010b65:	eb ef                	jmp    c0010b56 <VgaText::updateTitle()+0x18>
c0010b67:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b6d:	85 c0                	test   eax,eax
c0010b6f:	74 09                	je     c0010b7a <VgaText::updateTitle()+0x3c>
c0010b71:	53                   	push   ebx
c0010b72:	53                   	push   ebx
c0010b73:	51                   	push   ecx
c0010b74:	52                   	push   edx
c0010b75:	ff d0                	call   eax
c0010b77:	83 c4 10             	add    esp,0x10
c0010b7a:	e8 55 fe ff ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c0010b7f:	83 c4 58             	add    esp,0x58
c0010b82:	5b                   	pop    ebx
c0010b83:	c3                   	ret    

c0010b84 <VgaText::setTitleTextColour(VgaColour)>:
c0010b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b8c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b92:	eb aa                	jmp    c0010b3e <VgaText::updateTitle()>

c0010b94 <VgaText::setTitleColour(VgaColour)>:
c0010b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b9c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010ba2:	eb 9a                	jmp    c0010b3e <VgaText::updateTitle()>

c0010ba4 <VgaText::setTitle(char*)>:
c0010ba4:	53                   	push   ebx
c0010ba5:	83 ec 10             	sub    esp,0x10
c0010ba8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bb6:	50                   	push   eax
c0010bb7:	e8 78 fc fe ff       	call   c0000834 <strcpy>
c0010bbc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bc0:	83 c4 18             	add    esp,0x18
c0010bc3:	5b                   	pop    ebx
c0010bc4:	e9 75 ff ff ff       	jmp    c0010b3e <VgaText::updateTitle()>
c0010bc9:	90                   	nop

c0010bca <VgaText::decrementCursor(bool)>:
c0010bca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bd2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	74 07                	je     c0010be3 <VgaText::decrementCursor(bool)+0x19>
c0010bdc:	48                   	dec    eax
c0010bdd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010be3:	84 c9                	test   cl,cl
c0010be5:	74 09                	je     c0010bf0 <VgaText::decrementCursor(bool)+0x26>
c0010be7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010beb:	e9 56 fa ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c0010bf0:	c3                   	ret    
c0010bf1:	90                   	nop

c0010bf2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bf2:	53                   	push   ebx
c0010bf3:	83 ec 08             	sub    esp,0x8
c0010bf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bfa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c02:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c06:	3c 07                	cmp    al,0x7
c0010c08:	75 2a                	jne    c0010c34 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c0a:	a1 74 e6 02 c0       	mov    eax,ds:0xc002e674
c0010c0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c17:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c1f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c2b:	83 c4 08             	add    esp,0x8
c0010c2e:	5b                   	pop    ebx
c0010c2f:	e9 82 31 00 00       	jmp    c0013db6 <Buzzer::beep(int, int, bool)>
c0010c34:	3c 0d                	cmp    al,0xd
c0010c36:	75 0c                	jne    c0010c44 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c38:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c42:	eb 3b                	jmp    c0010c7f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c44:	3c 0a                	cmp    al,0xa
c0010c46:	75 40                	jne    c0010c88 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c48:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c4e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c58:	8d 50 01             	lea    edx,[eax+0x1]
c0010c5b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c61:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c67:	75 12                	jne    c0010c7b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c69:	83 ec 0c             	sub    esp,0xc
c0010c6c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c72:	53                   	push   ebx
c0010c73:	e8 1c fb ff ff       	call   c0010794 <VgaText::scrollScreen()>
c0010c78:	83 c4 10             	add    esp,0x10
c0010c7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c7f:	83 c4 08             	add    esp,0x8
c0010c82:	5b                   	pop    ebx
c0010c83:	e9 be f9 ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c0010c88:	3c 08                	cmp    al,0x8
c0010c8a:	75 31                	jne    c0010cbd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c8c:	50                   	push   eax
c0010c8d:	50                   	push   eax
c0010c8e:	6a 01                	push   0x1
c0010c90:	53                   	push   ebx
c0010c91:	e8 34 ff ff ff       	call   c0010bca <VgaText::decrementCursor(bool)>
c0010c96:	5a                   	pop    edx
c0010c97:	59                   	pop    ecx
c0010c98:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c9e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ca4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010caa:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cb0:	6a 20                	push   0x20
c0010cb2:	53                   	push   ebx
c0010cb3:	e8 82 fb ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cb8:	83 c4 28             	add    esp,0x28
c0010cbb:	5b                   	pop    ebx
c0010cbc:	c3                   	ret    
c0010cbd:	83 ec 08             	sub    esp,0x8
c0010cc0:	0f be c0             	movsx  eax,al
c0010cc3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ccf:	51                   	push   ecx
c0010cd0:	52                   	push   edx
c0010cd1:	50                   	push   eax
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 62 fb ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cdc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ce4:	83 c4 28             	add    esp,0x28
c0010ce7:	5b                   	pop    ebx
c0010ce8:	e9 1b fc ff ff       	jmp    c0010908 <VgaText::incrementCursor(bool)>
c0010ced:	90                   	nop

c0010cee <VgaText::isShowingCursor()>:
c0010cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf2:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cf8:	c3                   	ret    
c0010cf9:	90                   	nop

c0010cfa <VgaText::isBlinkDisabled()>:
c0010cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfe:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d04:	83 f0 01             	xor    eax,0x1
c0010d07:	c3                   	ret    

c0010d08 <VgaText::setCursorHeight(int)>:
c0010d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d10:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d16:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d21:	e9 3a f9 ff ff       	jmp    c0010660 <VgaText::showCursor(bool)>

c0010d26 <VgaText::getCursorHeight()>:
c0010d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d30:	c3                   	ret    

c0010d31 <setActiveTerminal(VgaText*)>:
c0010d31:	53                   	push   ebx
c0010d32:	83 ec 08             	sub    esp,0x8
c0010d35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d39:	85 db                	test   ebx,ebx
c0010d3b:	75 11                	jne    c0010d4e <setActiveTerminal(VgaText*)+0x1d>
c0010d3d:	c7 44 24 10 18 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a418
c0010d45:	83 c4 08             	add    esp,0x8
c0010d48:	5b                   	pop    ebx
c0010d49:	e9 17 99 00 00       	jmp    c001a665 <Krnl::panic(char const*)>
c0010d4e:	50                   	push   eax
c0010d4f:	50                   	push   eax
c0010d50:	53                   	push   ebx
c0010d51:	68 26 a4 02 c0       	push   0xc002a426
c0010d56:	e8 5c 22 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0010d5b:	a1 c4 e5 02 c0       	mov    eax,ds:0xc002e5c4
c0010d60:	83 c4 10             	add    esp,0x10
c0010d63:	85 c0                	test   eax,eax
c0010d65:	74 0c                	je     c0010d73 <setActiveTerminal(VgaText*)+0x42>
c0010d67:	83 ec 0c             	sub    esp,0xc
c0010d6a:	50                   	push   eax
c0010d6b:	e8 d6 f8 ff ff       	call   c0010646 <VgaText::updateCursor()>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	89 1d c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,ebx
c0010d79:	51                   	push   ecx
c0010d7a:	51                   	push   ecx
c0010d7b:	53                   	push   ebx
c0010d7c:	68 3e a4 02 c0       	push   0xc002a43e
c0010d81:	e8 31 22 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0010d86:	83 c4 0c             	add    esp,0xc
c0010d89:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d8f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d95:	53                   	push   ebx
c0010d96:	e8 17 fb ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0010d9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d9e:	e8 57 ff ff ff       	call   c0010cfa <VgaText::isBlinkDisabled()>
c0010da3:	5a                   	pop    edx
c0010da4:	0f b6 c0             	movzx  eax,al
c0010da7:	59                   	pop    ecx
c0010da8:	50                   	push   eax
c0010da9:	53                   	push   ebx
c0010daa:	e8 c1 f8 ff ff       	call   c0010670 <VgaText::disableBlink(bool)>
c0010daf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db2:	e8 6f ff ff ff       	call   c0010d26 <VgaText::getCursorHeight()>
c0010db7:	5a                   	pop    edx
c0010db8:	59                   	pop    ecx
c0010db9:	50                   	push   eax
c0010dba:	53                   	push   ebx
c0010dbb:	e8 48 ff ff ff       	call   c0010d08 <VgaText::setCursorHeight(int)>
c0010dc0:	83 c4 10             	add    esp,0x10
c0010dc3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dca:	75 0a                	jne    c0010dd6 <setActiveTerminal(VgaText*)+0xa5>
c0010dcc:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dd6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dda:	83 c4 08             	add    esp,0x8
c0010ddd:	5b                   	pop    ebx
c0010dde:	e9 0f f8 ff ff       	jmp    c00105f2 <VgaText::load()>

c0010de3 <doTerminalCycle()>:
c0010de3:	83 ec 18             	sub    esp,0x18
c0010de6:	a1 c0 e5 02 c0       	mov    eax,ds:0xc002e5c0
c0010deb:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010df1:	50                   	push   eax
c0010df2:	a3 c0 e5 02 c0       	mov    ds:0xc002e5c0,eax
c0010df7:	e8 35 ff ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c0010dfc:	83 c4 1c             	add    esp,0x1c
c0010dff:	c3                   	ret    

c0010e00 <VgaText::doUpdate()>:
c0010e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e04:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e0a:	85 c0                	test   eax,eax
c0010e0c:	74 02                	je     c0010e10 <VgaText::doUpdate()+0x10>
c0010e0e:	ff e0                	jmp    eax
c0010e10:	c3                   	ret    
c0010e11:	90                   	nop

c0010e12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e12:	55                   	push   ebp
c0010e13:	57                   	push   edi
c0010e14:	56                   	push   esi
c0010e15:	53                   	push   ebx
c0010e16:	83 ec 1c             	sub    esp,0x1c
c0010e19:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e1d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e22:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e29:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e2c:	50                   	push   eax
c0010e2d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e32:	50                   	push   eax
c0010e33:	e8 4a f9 ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e38:	59                   	pop    ecx
c0010e39:	0f b6 c0             	movzx  eax,al
c0010e3c:	5b                   	pop    ebx
c0010e3d:	31 c9                	xor    ecx,ecx
c0010e3f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e4b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e55:	0f b7 db             	movzx  ebx,bx
c0010e58:	01 db                	add    ebx,ebx
c0010e5a:	01 fb                	add    ebx,edi
c0010e5c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e5f:	84 c0                	test   al,al
c0010e61:	0f 84 38 01 00 00    	je     c0010f9f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e67:	3c 0d                	cmp    al,0xd
c0010e69:	75 0f                	jne    c0010e7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e6b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e75:	e9 1f 01 00 00       	jmp    c0010f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e7a:	3c 0a                	cmp    al,0xa
c0010e7c:	75 5b                	jne    c0010ed9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e7e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e84:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e8e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e91:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e97:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e9d:	75 12                	jne    c0010eb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ea8:	55                   	push   ebp
c0010ea9:	e8 e6 f8 ff ff       	call   c0010794 <VgaText::scrollScreen()>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	83 ec 0c             	sub    esp,0xc
c0010eb4:	55                   	push   ebp
c0010eb5:	e8 8c f7 ff ff       	call   c0010646 <VgaText::updateCursor()>
c0010eba:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ecb:	31 c9                	xor    ecx,ecx
c0010ecd:	0f b7 db             	movzx  ebx,bx
c0010ed0:	01 db                	add    ebx,ebx
c0010ed2:	01 fb                	add    ebx,edi
c0010ed4:	e9 c0 00 00 00       	jmp    c0010f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed9:	3c 08                	cmp    al,0x8
c0010edb:	75 4e                	jne    c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010edd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ee1:	53                   	push   ebx
c0010ee2:	53                   	push   ebx
c0010ee3:	6a 01                	push   0x1
c0010ee5:	55                   	push   ebp
c0010ee6:	e8 df fc ff ff       	call   c0010bca <VgaText::decrementCursor(bool)>
c0010eeb:	58                   	pop    eax
c0010eec:	5a                   	pop    edx
c0010eed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef9:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010eff:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f05:	6a 20                	push   0x20
c0010f07:	55                   	push   ebp
c0010f08:	e8 2d f9 ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f0d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f15:	83 c4 20             	add    esp,0x20
c0010f18:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f1e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f22:	0f b7 db             	movzx  ebx,bx
c0010f25:	01 db                	add    ebx,ebx
c0010f27:	01 fb                	add    ebx,edi
c0010f29:	eb 6e                	jmp    c0010f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f2b:	51                   	push   ecx
c0010f2c:	51                   	push   ecx
c0010f2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f31:	50                   	push   eax
c0010f32:	e8 f1 f8 ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f3d:	39 2d c4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c4,ebp
c0010f43:	75 2a                	jne    c0010f6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f45:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f4b:	85 c0                	test   eax,eax
c0010f4d:	74 20                	je     c0010f6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f4f:	52                   	push   edx
c0010f50:	52                   	push   edx
c0010f51:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f57:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f65:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f68:	51                   	push   ecx
c0010f69:	55                   	push   ebp
c0010f6a:	ff d0                	call   eax
c0010f6c:	83 c4 20             	add    esp,0x20
c0010f6f:	83 c3 02             	add    ebx,0x2
c0010f72:	50                   	push   eax
c0010f73:	50                   	push   eax
c0010f74:	6a 00                	push   0x0
c0010f76:	55                   	push   ebp
c0010f77:	e8 8c f9 ff ff       	call   c0010908 <VgaText::incrementCursor(bool)>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f86:	75 0f                	jne    c0010f97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f88:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f90:	0f b7 db             	movzx  ebx,bx
c0010f93:	01 db                	add    ebx,ebx
c0010f95:	01 fb                	add    ebx,edi
c0010f97:	b1 01                	mov    cl,0x1
c0010f99:	46                   	inc    esi
c0010f9a:	e9 bd fe ff ff       	jmp    c0010e5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f9f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fa3:	83 ec 0c             	sub    esp,0xc
c0010fa6:	55                   	push   ebp
c0010fa7:	e8 9a f6 ff ff       	call   c0010646 <VgaText::updateCursor()>
c0010fac:	83 c4 10             	add    esp,0x10
c0010faf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fb3:	84 c9                	test   cl,cl
c0010fb5:	74 0c                	je     c0010fc3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fb7:	83 ec 0c             	sub    esp,0xc
c0010fba:	55                   	push   ebp
c0010fbb:	e8 40 fe ff ff       	call   c0010e00 <VgaText::doUpdate()>
c0010fc0:	83 c4 10             	add    esp,0x10
c0010fc3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fca:	83 c4 1c             	add    esp,0x1c
c0010fcd:	5b                   	pop    ebx
c0010fce:	5e                   	pop    esi
c0010fcf:	5f                   	pop    edi
c0010fd0:	5d                   	pop    ebp
c0010fd1:	c3                   	ret    

c0010fd2 <VgaText::clearScreen()>:
c0010fd2:	57                   	push   edi
c0010fd3:	56                   	push   esi
c0010fd4:	31 f6                	xor    esi,esi
c0010fd6:	53                   	push   ebx
c0010fd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fdb:	52                   	push   edx
c0010fdc:	6a 00                	push   0x0
c0010fde:	6a 00                	push   0x0
c0010fe0:	53                   	push   ebx
c0010fe1:	e8 cc f8 ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0010fe6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ff6:	7e 26                	jle    c001101e <VgaText::clearScreen()+0x4c>
c0010ff8:	31 ff                	xor    edi,edi
c0010ffa:	50                   	push   eax
c0010ffb:	50                   	push   eax
c0010ffc:	56                   	push   esi
c0010ffd:	57                   	push   edi
c0010ffe:	47                   	inc    edi
c0010fff:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011005:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001100b:	6a 20                	push   0x20
c001100d:	53                   	push   ebx
c001100e:	e8 27 f8 ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011013:	83 c4 20             	add    esp,0x20
c0011016:	83 ff 50             	cmp    edi,0x50
c0011019:	75 df                	jne    c0010ffa <VgaText::clearScreen()+0x28>
c001101b:	46                   	inc    esi
c001101c:	eb d2                	jmp    c0010ff0 <VgaText::clearScreen()+0x1e>
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	53                   	push   ebx
c0011022:	e8 d9 fd ff ff       	call   c0010e00 <VgaText::doUpdate()>
c0011027:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	5b                   	pop    ebx
c0011032:	5e                   	pop    esi
c0011033:	5f                   	pop    edi
c0011034:	c3                   	ret    
c0011035:	90                   	nop

c0011036 <VgaText::putchar(char)>:
c0011036:	56                   	push   esi
c0011037:	53                   	push   ebx
c0011038:	83 ec 14             	sub    esp,0x14
c001103b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001103f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011043:	3c 5b                	cmp    al,0x5b
c0011045:	75 21                	jne    c0011068 <VgaText::putchar(char)+0x32>
c0011047:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001104e:	74 28                	je     c0011078 <VgaText::putchar(char)+0x42>
c0011050:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011059:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011063:	e9 e2 00 00 00       	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011068:	3c 1b                	cmp    al,0x1b
c001106a:	75 0c                	jne    c0011078 <VgaText::putchar(char)+0x42>
c001106c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011073:	e9 d2 00 00 00       	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011078:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001107e:	84 c9                	test   cl,cl
c0011080:	0f 84 ab 00 00 00    	je     c0011131 <VgaText::putchar(char)+0xfb>
c0011086:	8d 50 c0             	lea    edx,[eax-0x40]
c0011089:	80 fa 3e             	cmp    dl,0x3e
c001108c:	0f 87 82 00 00 00    	ja     c0011114 <VgaText::putchar(char)+0xde>
c0011092:	3c 6d                	cmp    al,0x6d
c0011094:	75 4d                	jne    c00110e3 <VgaText::putchar(char)+0xad>
c0011096:	31 f6                	xor    esi,esi
c0011098:	31 d2                	xor    edx,edx
c001109a:	31 c0                	xor    eax,eax
c001109c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110a2:	7e 30                	jle    c00110d4 <VgaText::putchar(char)+0x9e>
c00110a4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110ac:	80 fa 3b             	cmp    dl,0x3b
c00110af:	75 17                	jne    c00110c8 <VgaText::putchar(char)+0x92>
c00110b1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110b5:	50                   	push   eax
c00110b6:	53                   	push   ebx
c00110b7:	e8 ee f5 ff ff       	call   c00106aa <VgaText::doANSI_SGR(int)>
c00110bc:	59                   	pop    ecx
c00110bd:	31 d2                	xor    edx,edx
c00110bf:	58                   	pop    eax
c00110c0:	31 c0                	xor    eax,eax
c00110c2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110c6:	eb 09                	jmp    c00110d1 <VgaText::putchar(char)+0x9b>
c00110c8:	6b c0 0a             	imul   eax,eax,0xa
c00110cb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110cf:	88 ca                	mov    dl,cl
c00110d1:	46                   	inc    esi
c00110d2:	eb c8                	jmp    c001109c <VgaText::putchar(char)+0x66>
c00110d4:	84 d2                	test   dl,dl
c00110d6:	74 31                	je     c0011109 <VgaText::putchar(char)+0xd3>
c00110d8:	50                   	push   eax
c00110d9:	53                   	push   ebx
c00110da:	e8 cb f5 ff ff       	call   c00106aa <VgaText::doANSI_SGR(int)>
c00110df:	58                   	pop    eax
c00110e0:	5a                   	pop    edx
c00110e1:	eb 26                	jmp    c0011109 <VgaText::putchar(char)+0xd3>
c00110e3:	3c 4a                	cmp    al,0x4a
c00110e5:	75 22                	jne    c0011109 <VgaText::putchar(char)+0xd3>
c00110e7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ee:	75 19                	jne    c0011109 <VgaText::putchar(char)+0xd3>
c00110f0:	83 ec 0c             	sub    esp,0xc
c00110f3:	53                   	push   ebx
c00110f4:	e8 d9 fe ff ff       	call   c0010fd2 <VgaText::clearScreen()>
c00110f9:	83 c4 0c             	add    esp,0xc
c00110fc:	6a 00                	push   0x0
c00110fe:	6a 00                	push   0x0
c0011100:	53                   	push   ebx
c0011101:	e8 ac f7 ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011112:	eb 36                	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011114:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001111a:	83 fa 0e             	cmp    edx,0xe
c001111d:	7f 2b                	jg     c001114a <VgaText::putchar(char)+0x114>
c001111f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011122:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011128:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001112f:	eb 19                	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011131:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011137:	0f be c0             	movsx  eax,al
c001113a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011140:	50                   	push   eax
c0011141:	53                   	push   ebx
c0011142:	e8 ab fa ff ff       	call   c0010bf2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011147:	83 c4 10             	add    esp,0x10
c001114a:	83 c4 14             	add    esp,0x14
c001114d:	5b                   	pop    ebx
c001114e:	5e                   	pop    esi
c001114f:	c3                   	ret    

c0011150 <VgaText::puts(char const*)>:
c0011150:	53                   	push   ebx
c0011151:	83 ec 08             	sub    esp,0x8
c0011154:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011158:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001115b:	84 c0                	test   al,al
c001115d:	74 12                	je     c0011171 <VgaText::puts(char const*)+0x21>
c001115f:	43                   	inc    ebx
c0011160:	51                   	push   ecx
c0011161:	51                   	push   ecx
c0011162:	50                   	push   eax
c0011163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011167:	e8 ca fe ff ff       	call   c0011036 <VgaText::putchar(char)>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	eb e7                	jmp    c0011158 <VgaText::puts(char const*)+0x8>
c0011171:	83 c4 08             	add    esp,0x8
c0011174:	5b                   	pop    ebx
c0011175:	c3                   	ret    

c0011176 <VgaText::putx(unsigned int)>:
c0011176:	57                   	push   edi
c0011177:	b9 11 00 00 00       	mov    ecx,0x11
c001117c:	56                   	push   esi
c001117d:	be 5a a4 02 c0       	mov    esi,0xc002a45a
c0011182:	53                   	push   ebx
c0011183:	83 ec 20             	sub    esp,0x20
c0011186:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001118a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001118e:	fc                   	cld    
c001118f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011191:	be 08 00 00 00       	mov    esi,0x8
c0011196:	50                   	push   eax
c0011197:	50                   	push   eax
c0011198:	89 d8                	mov    eax,ebx
c001119a:	c1 e3 04             	shl    ebx,0x4
c001119d:	c1 e8 1c             	shr    eax,0x1c
c00111a0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111a5:	50                   	push   eax
c00111a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111aa:	e8 87 fe ff ff       	call   c0011036 <VgaText::putchar(char)>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	4e                   	dec    esi
c00111b3:	75 e1                	jne    c0011196 <VgaText::putx(unsigned int)+0x20>
c00111b5:	83 c4 20             	add    esp,0x20
c00111b8:	5b                   	pop    ebx
c00111b9:	5e                   	pop    esi
c00111ba:	5f                   	pop    edi
c00111bb:	c3                   	ret    

c00111bc <VgaText::VgaText(char const*)>:
c00111bc:	57                   	push   edi
c00111bd:	56                   	push   esi
c00111be:	53                   	push   ebx
c00111bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c3:	83 ec 08             	sub    esp,0x8
c00111c6:	6a 00                	push   0x0
c00111c8:	50                   	push   eax
c00111c9:	e8 6e 05 00 00       	call   c001173c <UnixFile::UnixFile(int)>
c00111ce:	83 c4 10             	add    esp,0x10
c00111d1:	ba c0 a4 02 c0       	mov    edx,0xc002a4c0
c00111d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111da:	89 10                	mov    DWORD PTR [eax],edx
c00111dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ee:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fc:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011207:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001120e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011212:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001121c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011220:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001122a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011239:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001124a:	bb a0 e5 02 c0       	mov    ebx,0xc002e5a0
c001124f:	b8 08 00 00 00       	mov    eax,0x8
c0011254:	fc                   	cld    
c0011255:	89 d7                	mov    edi,edx
c0011257:	89 de                	mov    esi,ebx
c0011259:	89 c1                	mov    ecx,eax
c001125b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001125d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011261:	05 1e 10 00 00       	add    eax,0x101e
c0011266:	83 ec 08             	sub    esp,0x8
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	50                   	push   eax
c001126e:	e8 c1 f5 fe ff       	call   c0000834 <strcpy>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011288:	83 c0 0c             	add    eax,0xc
c001128b:	83 ec 04             	sub    esp,0x4
c001128e:	68 00 0f 00 00       	push   0xf00
c0011293:	6a 00                	push   0x0
c0011295:	50                   	push   eax
c0011296:	e8 dd f4 fe ff       	call   c0000778 <memset>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 ec 04             	sub    esp,0x4
c00112a1:	6a 00                	push   0x0
c00112a3:	6a 07                	push   0x7
c00112a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a9:	e8 b4 f4 ff ff       	call   c0010762 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ae:	83 c4 10             	add    esp,0x10
c00112b1:	83 ec 08             	sub    esp,0x8
c00112b4:	6a 02                	push   0x2
c00112b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ba:	e8 49 fa ff ff       	call   c0010d08 <VgaText::setCursorHeight(int)>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	83 ec 04             	sub    esp,0x4
c00112c5:	6a 00                	push   0x0
c00112c7:	6a 00                	push   0x0
c00112c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cd:	e8 e0 f5 ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c00112d2:	83 c4 10             	add    esp,0x10
c00112d5:	83 ec 08             	sub    esp,0x8
c00112d8:	6a 01                	push   0x1
c00112da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112de:	e8 7d f3 ff ff       	call   c0010660 <VgaText::showCursor(bool)>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	83 ec 08             	sub    esp,0x8
c00112e9:	6a 01                	push   0x1
c00112eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ef:	e8 7c f3 ff ff       	call   c0010670 <VgaText::disableBlink(bool)>
c00112f4:	83 c4 10             	add    esp,0x10
c00112f7:	83 ec 0c             	sub    esp,0xc
c00112fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fe:	e8 cf fc ff ff       	call   c0010fd2 <VgaText::clearScreen()>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011315:	05 9e 10 00 00       	add    eax,0x109e
c001131a:	83 ec 04             	sub    esp,0x4
c001131d:	68 96 00 00 00       	push   0x96
c0011322:	6a 00                	push   0x0
c0011324:	50                   	push   eax
c0011325:	e8 4e f4 fe ff       	call   c0000778 <memset>
c001132a:	83 c4 10             	add    esp,0x10
c001132d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011331:	05 34 11 00 00       	add    eax,0x1134
c0011336:	83 ec 04             	sub    esp,0x4
c0011339:	68 2c 01 00 00       	push   0x12c
c001133e:	6a 00                	push   0x0
c0011340:	50                   	push   eax
c0011341:	e8 32 f4 fe ff       	call   c0000778 <memset>
c0011346:	83 c4 10             	add    esp,0x10
c0011349:	90                   	nop
c001134a:	5b                   	pop    ebx
c001134b:	5e                   	pop    esi
c001134c:	5f                   	pop    edi
c001134d:	c3                   	ret    

c001134e <VgaText::receiveKey(unsigned char)>:
c001134e:	55                   	push   ebp
c001134f:	57                   	push   edi
c0011350:	56                   	push   esi
c0011351:	53                   	push   ebx
c0011352:	83 ec 1c             	sub    esp,0x1c
c0011355:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011359:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001135d:	84 db                	test   bl,bl
c001135f:	0f 84 c9 00 00 00    	je     c001142e <VgaText::receiveKey(unsigned char)+0xe0>
c0011365:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001136b:	80 fb 08             	cmp    bl,0x8
c001136e:	75 2c                	jne    c001139c <VgaText::receiveKey(unsigned char)+0x4e>
c0011370:	83 ec 0c             	sub    esp,0xc
c0011373:	57                   	push   edi
c0011374:	e8 1b f4 fe ff       	call   c0000794 <strlen>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	85 c0                	test   eax,eax
c001137e:	74 41                	je     c00113c1 <VgaText::receiveKey(unsigned char)+0x73>
c0011380:	50                   	push   eax
c0011381:	50                   	push   eax
c0011382:	6a 08                	push   0x8
c0011384:	56                   	push   esi
c0011385:	e8 ac fc ff ff       	call   c0011036 <VgaText::putchar(char)>
c001138a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001138d:	e8 02 f4 fe ff       	call   c0000794 <strlen>
c0011392:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001139a:	eb 22                	jmp    c00113be <VgaText::receiveKey(unsigned char)+0x70>
c001139c:	0f be c3             	movsx  eax,bl
c001139f:	52                   	push   edx
c00113a0:	52                   	push   edx
c00113a1:	50                   	push   eax
c00113a2:	56                   	push   esi
c00113a3:	e8 8e fc ff ff       	call   c0011036 <VgaText::putchar(char)>
c00113a8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113b1:	59                   	pop    ecx
c00113b2:	5d                   	pop    ebp
c00113b3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113b7:	50                   	push   eax
c00113b8:	57                   	push   edi
c00113b9:	e8 b6 f5 fe ff       	call   c0000974 <strcat>
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113c8:	75 05                	jne    c00113cf <VgaText::receiveKey(unsigned char)+0x81>
c00113ca:	80 fb 0a             	cmp    bl,0xa
c00113cd:	75 53                	jne    c0011422 <VgaText::receiveKey(unsigned char)+0xd4>
c00113cf:	83 ec 0c             	sub    esp,0xc
c00113d2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113d8:	53                   	push   ebx
c00113d9:	e8 b6 f3 fe ff       	call   c0000794 <strlen>
c00113de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113e1:	89 c5                	mov    ebp,eax
c00113e3:	e8 ac f3 fe ff       	call   c0000794 <strlen>
c00113e8:	83 c4 10             	add    esp,0x10
c00113eb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113ef:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113f4:	76 10                	jbe    c0011406 <VgaText::receiveKey(unsigned char)+0xb8>
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	68 6b a4 02 c0       	push   0xc002a46b
c00113fe:	e8 62 92 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0011403:	83 c4 10             	add    esp,0x10
c0011406:	50                   	push   eax
c0011407:	50                   	push   eax
c0011408:	57                   	push   edi
c0011409:	53                   	push   ebx
c001140a:	e8 65 f5 fe ff       	call   c0000974 <strcat>
c001140f:	83 c4 0c             	add    esp,0xc
c0011412:	68 96 00 00 00       	push   0x96
c0011417:	6a 00                	push   0x0
c0011419:	57                   	push   edi
c001141a:	e8 59 f3 fe ff       	call   c0000778 <memset>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	83 ec 0c             	sub    esp,0xc
c0011425:	56                   	push   esi
c0011426:	e8 d5 f9 ff ff       	call   c0010e00 <VgaText::doUpdate()>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 c4 1c             	add    esp,0x1c
c0011431:	5b                   	pop    ebx
c0011432:	5e                   	pop    esi
c0011433:	5f                   	pop    edi
c0011434:	5d                   	pop    ebp
c0011435:	c3                   	ret    

c0011436 <VgaText::write(unsigned long long, void*, int*)>:
c0011436:	55                   	push   ebp
c0011437:	57                   	push   edi
c0011438:	56                   	push   esi
c0011439:	53                   	push   ebx
c001143a:	83 ec 0c             	sub    esp,0xc
c001143d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011441:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011445:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011449:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011450:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011453:	39 eb                	cmp    ebx,ebp
c0011455:	74 13                	je     c001146a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011457:	43                   	inc    ebx
c0011458:	50                   	push   eax
c0011459:	50                   	push   eax
c001145a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001145e:	50                   	push   eax
c001145f:	56                   	push   esi
c0011460:	e8 d1 fb ff ff       	call   c0011036 <VgaText::putchar(char)>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	eb e9                	jmp    c0011453 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001146a:	83 ec 0c             	sub    esp,0xc
c001146d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011474:	56                   	push   esi
c0011475:	e8 86 f9 ff ff       	call   c0010e00 <VgaText::doUpdate()>
c001147a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001147e:	89 38                	mov    DWORD PTR [eax],edi
c0011480:	83 c4 1c             	add    esp,0x1c
c0011483:	31 c0                	xor    eax,eax
c0011485:	5b                   	pop    ebx
c0011486:	5e                   	pop    esi
c0011487:	5f                   	pop    edi
c0011488:	5d                   	pop    ebp
c0011489:	c3                   	ret    

c001148a <newTerminal(char*)>:
c001148a:	83 ec 28             	sub    esp,0x28
c001148d:	68 60 12 00 00       	push   0x1260
c0011492:	e8 ac e3 ff ff       	call   c000f843 <malloc>
c0011497:	5a                   	pop    edx
c0011498:	59                   	pop    ecx
c0011499:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001149d:	50                   	push   eax
c001149e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114a2:	e8 15 fd ff ff       	call   c00111bc <VgaText::VgaText(char const*)>
c00114a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ab:	83 c4 2c             	add    esp,0x2c
c00114ae:	c3                   	ret    
c00114af:	90                   	nop

c00114b0 <TSS::TSS()>:
c00114b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114bb:	90                   	nop
c00114bc:	c3                   	ret    
c00114bd:	90                   	nop

c00114be <TSS::setESP(unsigned long)>:
c00114be:	55                   	push   ebp
c00114bf:	89 e5                	mov    ebp,esp
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cd:	90                   	nop
c00114ce:	5d                   	pop    ebp
c00114cf:	c3                   	ret    

c00114d0 <TSS::flush()>:
c00114d0:	55                   	push   ebp
c00114d1:	89 e5                	mov    ebp,esp
c00114d3:	83 ec 10             	sub    esp,0x10
c00114d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114db:	83 c8 03             	or     eax,0x3
c00114de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114e6:	66 89 d0             	mov    ax,dx
c00114e9:	0f 00 d8             	ltr    ax
c00114ec:	90                   	nop
c00114ed:	c9                   	leave  
c00114ee:	c3                   	ret    
c00114ef:	90                   	nop

c00114f0 <TSS::setup(unsigned long, unsigned long)>:
c00114f0:	55                   	push   ebp
c00114f1:	89 e5                	mov    ebp,esp
c00114f3:	83 ec 18             	sub    esp,0x18
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	6a 68                	push   0x68
c00114fb:	e8 43 e3 ff ff       	call   c000f843 <malloc>
c0011500:	83 c4 10             	add    esp,0x10
c0011503:	89 c2                	mov    edx,eax
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001150b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011511:	83 ec 04             	sub    esp,0x4
c0011514:	6a 68                	push   0x68
c0011516:	6a 00                	push   0x0
c0011518:	50                   	push   eax
c0011519:	e8 5a f2 fe ff       	call   c0000778 <memset>
c001151e:	83 c4 10             	add    esp,0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011542:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011596:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b8:	0f 20 da             	mov    edx,cr3
c00115bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ca:	83 ec 08             	sub    esp,0x8
c00115cd:	50                   	push   eax
c00115ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115d1:	50                   	push   eax
c00115d2:	e8 47 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	83 ec 08             	sub    esp,0x8
c00115dd:	6a 68                	push   0x68
c00115df:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115e2:	50                   	push   eax
c00115e3:	e8 52 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f2:	83 e0 0f             	and    eax,0xf
c00115f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fb:	83 c8 40             	or     eax,0x40
c00115fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011601:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0011606:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001160c:	05 78 01 00 00       	add    eax,0x178
c0011611:	83 ec 04             	sub    esp,0x4
c0011614:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011617:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001161a:	50                   	push   eax
c001161b:	e8 4e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	89 c2                	mov    edx,eax
c0011625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011628:	89 10                	mov    DWORD PTR [eax],edx
c001162a:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001162f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011635:	05 78 01 00 00       	add    eax,0x178
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 6f da ff ff       	call   c000f0b2 <GDT::flush()>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011649:	8b 00                	mov    eax,DWORD PTR [eax]
c001164b:	83 ec 08             	sub    esp,0x8
c001164e:	50                   	push   eax
c001164f:	68 d4 a4 02 c0       	push   0xc002a4d4
c0011654:	e8 5e 19 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011661:	c9                   	leave  
c0011662:	c3                   	ret    
c0011663:	90                   	nop

c0011664 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001166c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001166f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011674:	75 08                	jne    c001167e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011676:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001167c:	eb 38                	jmp    c00116b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001167e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011683:	75 17                	jne    c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011685:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001168a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001168d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011693:	8b 10                	mov    edx,DWORD PTR [eax]
c0011695:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011699:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001169c:	89 c1                	mov    ecx,eax
c001169e:	83 e1 fd             	and    ecx,0xfffffffd
c00116a1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116a7:	74 cd                	je     c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116a9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ae:	83 e0 ef             	and    eax,0xffffffef
c00116b1:	83 f8 08             	cmp    eax,0x8
c00116b4:	76 c0                	jbe    c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b6:	31 c0                	xor    eax,eax
c00116b8:	c3                   	ret    
c00116b9:	90                   	nop

c00116ba <ReservedFilename::isAtty()>:
c00116ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116c1:	31 c0                	xor    eax,eax
c00116c3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116c9:	74 09                	je     c00116d4 <ReservedFilename::isAtty()+0x1a>
c00116cb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116d1:	0f 94 c0             	sete   al
c00116d4:	c3                   	ret    
c00116d5:	90                   	nop

c00116d6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116ea:	75 08                	jne    c00116f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116f2:	eb 3d                	jmp    c0011731 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116f9:	75 17                	jne    c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011700:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011703:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011709:	8b 10                	mov    edx,DWORD PTR [eax]
c001170b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001170f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011712:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011717:	75 04                	jne    c001171d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011719:	89 0a                	mov    DWORD PTR [edx],ecx
c001171b:	eb 14                	jmp    c0011731 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001171d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011722:	74 c8                	je     c00116ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011724:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011729:	83 e0 ef             	and    eax,0xffffffef
c001172c:	83 f8 08             	cmp    eax,0x8
c001172f:	76 bb                	jbe    c00116ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011731:	31 c0                	xor    eax,eax
c0011733:	c3                   	ret    

c0011734 <UnixFile::getFileDescriptor()>:
c0011734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001173b:	c3                   	ret    

c001173c <UnixFile::UnixFile(int)>:
c001173c:	53                   	push   ebx
c001173d:	83 ec 28             	sub    esp,0x28
c0011740:	ba c0 a5 02 c0       	mov    edx,0xc002a5c0
c0011745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011749:	89 10                	mov    DWORD PTR [eax],edx
c001174b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011753:	0f 8f 8c 01 00 00    	jg     c00118e5 <UnixFile::UnixFile(int)+0x1a9>
c0011759:	a1 80 d4 02 c0       	mov    eax,ds:0xc002d480
c001175e:	8d 50 01             	lea    edx,[eax+0x1]
c0011761:	89 15 80 d4 02 c0    	mov    DWORD PTR ds:0xc002d480,edx
c0011767:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001176b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011775:	68 58 e6 02 c0       	push   0xc002e658
c001177a:	e8 31 70 01 00       	call   c00287b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	a0 54 e6 02 c0       	mov    al,ds:0xc002e654
c0011787:	83 f0 01             	xor    eax,0x1
c001178a:	84 c0                	test   al,al
c001178c:	0f 84 54 01 00 00    	je     c00118e6 <UnixFile::UnixFile(int)+0x1aa>
c0011792:	c6 05 54 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e654,0x1
c0011799:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117a1:	83 ec 0c             	sub    esp,0xc
c00117a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a8:	e8 96 e0 ff ff       	call   c000f843 <malloc>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	89 c3                	mov    ebx,eax
c00117b2:	83 ec 08             	sub    esp,0x8
c00117b5:	68 03 ff ff 0f       	push   0xfffff03
c00117ba:	53                   	push   ebx
c00117bb:	e8 2c 01 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	89 1d 4c e6 02 c0    	mov    DWORD PTR ds:0xc002e64c,ebx
c00117c9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117d1:	83 ec 0c             	sub    esp,0xc
c00117d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d8:	e8 66 e0 ff ff       	call   c000f843 <malloc>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	89 c3                	mov    ebx,eax
c00117e2:	83 ec 08             	sub    esp,0x8
c00117e5:	68 01 ff ff 0f       	push   0xfffff01
c00117ea:	53                   	push   ebx
c00117eb:	e8 fc 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	89 1d 50 e6 02 c0    	mov    DWORD PTR ds:0xc002e650,ebx
c00117f9:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011808:	e8 36 e0 ff ff       	call   c000f843 <malloc>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	89 c3                	mov    ebx,eax
c0011812:	83 ec 08             	sub    esp,0x8
c0011815:	68 00 ff ff 0f       	push   0xfffff00
c001181a:	53                   	push   ebx
c001181b:	e8 cc 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c0011820:	83 c4 10             	add    esp,0x10
c0011823:	89 1d 44 e6 02 c0    	mov    DWORD PTR ds:0xc002e644,ebx
c0011829:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011831:	83 ec 0c             	sub    esp,0xc
c0011834:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011838:	e8 06 e0 ff ff       	call   c000f843 <malloc>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	89 c3                	mov    ebx,eax
c0011842:	83 ec 08             	sub    esp,0x8
c0011845:	68 02 ff ff 0f       	push   0xfffff02
c001184a:	53                   	push   ebx
c001184b:	e8 9c 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	89 1d 48 e6 02 c0    	mov    DWORD PTR ds:0xc002e648,ebx
c0011859:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011861:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011866:	7f 7e                	jg     c00118e6 <UnixFile::UnixFile(int)+0x1aa>
c0011868:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011870:	83 ec 0c             	sub    esp,0xc
c0011873:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011877:	e8 c7 df ff ff       	call   c000f843 <malloc>
c001187c:	83 c4 10             	add    esp,0x10
c001187f:	89 c3                	mov    ebx,eax
c0011881:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011885:	05 10 ff ff 0f       	add    eax,0xfffff10
c001188a:	83 ec 08             	sub    esp,0x8
c001188d:	50                   	push   eax
c001188e:	53                   	push   ebx
c001188f:	e8 58 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001189b:	89 1c 85 20 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19e0],ebx
c00118a2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118aa:	83 ec 0c             	sub    esp,0xc
c00118ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118b1:	e8 8d df ff ff       	call   c000f843 <malloc>
c00118b6:	83 c4 10             	add    esp,0x10
c00118b9:	89 c3                	mov    ebx,eax
c00118bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bf:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118c4:	83 ec 08             	sub    esp,0x8
c00118c7:	50                   	push   eax
c00118c8:	53                   	push   ebx
c00118c9:	e8 1e 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d5:	89 1c 85 e0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a20],ebx
c00118dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118e0:	e9 7c ff ff ff       	jmp    c0011861 <UnixFile::UnixFile(int)+0x125>
c00118e5:	90                   	nop
c00118e6:	83 c4 28             	add    esp,0x28
c00118e9:	5b                   	pop    ebx
c00118ea:	c3                   	ret    
c00118eb:	90                   	nop

c00118ec <ReservedFilename::ReservedFilename(int)>:
c00118ec:	83 ec 0c             	sub    esp,0xc
c00118ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f3:	83 ec 08             	sub    esp,0x8
c00118f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118fa:	50                   	push   eax
c00118fb:	e8 3c fe ff ff       	call   c001173c <UnixFile::UnixFile(int)>
c0011900:	83 c4 10             	add    esp,0x10
c0011903:	ba dc a5 02 c0       	mov    edx,0xc002a5dc
c0011908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190c:	89 10                	mov    DWORD PTR [eax],edx
c001190e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011912:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011916:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011919:	90                   	nop
c001191a:	83 c4 0c             	add    esp,0xc
c001191d:	c3                   	ret    

c001191e <UnixFile::~UnixFile()>:
c001191e:	83 ec 1c             	sub    esp,0x1c
c0011921:	ba c0 a5 02 c0       	mov    edx,0xc002a5c0
c0011926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001192a:	89 10                	mov    DWORD PTR [eax],edx
c001192c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011930:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011933:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011938:	7f 73                	jg     c00119ad <UnixFile::~UnixFile()+0x8f>
c001193a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011942:	83 ec 0c             	sub    esp,0xc
c0011945:	68 58 e6 02 c0       	push   0xc002e658
c001194a:	e8 35 6f 01 00       	call   c0028884 <LinkedList<UnixFile>::getFirstElement()>
c001194f:	83 c4 10             	add    esp,0x10
c0011952:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011956:	83 ec 0c             	sub    esp,0xc
c0011959:	68 58 e6 02 c0       	push   0xc002e658
c001195e:	e8 29 6f 01 00       	call   c002888c <LinkedList<UnixFile>::removeFirst()>
c0011963:	83 c4 10             	add    esp,0x10
c0011966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001196a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001196e:	74 40                	je     c00119b0 <UnixFile::~UnixFile()+0x92>
c0011970:	83 ec 08             	sub    esp,0x8
c0011973:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011977:	68 58 e6 02 c0       	push   0xc002e658
c001197c:	e8 2f 6e 01 00       	call   c00287b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011988:	8d 50 01             	lea    edx,[eax+0x1]
c001198b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001198f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011994:	0f 94 c0             	sete   al
c0011997:	84 c0                	test   al,al
c0011999:	74 a7                	je     c0011942 <UnixFile::~UnixFile()+0x24>
c001199b:	83 ec 0c             	sub    esp,0xc
c001199e:	68 98 a5 02 c0       	push   0xc002a598
c00119a3:	e8 bd 8c 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	eb 95                	jmp    c0011942 <UnixFile::~UnixFile()+0x24>
c00119ad:	90                   	nop
c00119ae:	eb 01                	jmp    c00119b1 <UnixFile::~UnixFile()+0x93>
c00119b0:	90                   	nop
c00119b1:	90                   	nop
c00119b2:	83 c4 1c             	add    esp,0x1c
c00119b5:	c3                   	ret    

c00119b6 <UnixFile::~UnixFile()>:
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	83 ec 0c             	sub    esp,0xc
c00119bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c0:	e8 59 ff ff ff       	call   c001191e <UnixFile::~UnixFile()>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	83 ec 08             	sub    esp,0x8
c00119cb:	6a 0c                	push   0xc
c00119cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d1:	e8 01 15 00 00       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00119d6:	83 c4 10             	add    esp,0x10
c00119d9:	83 c4 0c             	add    esp,0xc
c00119dc:	c3                   	ret    
c00119dd:	90                   	nop

c00119de <ReservedFilename::~ReservedFilename()>:
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	ba dc a5 02 c0       	mov    edx,0xc002a5dc
c00119e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ea:	89 10                	mov    DWORD PTR [eax],edx
c00119ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f0:	83 ec 0c             	sub    esp,0xc
c00119f3:	50                   	push   eax
c00119f4:	e8 25 ff ff ff       	call   c001191e <UnixFile::~UnixFile()>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	90                   	nop
c00119fd:	83 c4 0c             	add    esp,0xc
c0011a00:	c3                   	ret    
c0011a01:	90                   	nop

c0011a02 <ReservedFilename::~ReservedFilename()>:
c0011a02:	83 ec 0c             	sub    esp,0xc
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a0c:	e8 cd ff ff ff       	call   c00119de <ReservedFilename::~ReservedFilename()>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	83 ec 08             	sub    esp,0x8
c0011a17:	6a 0c                	push   0xc
c0011a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1d:	e8 b5 14 00 00       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0011a22:	83 c4 10             	add    esp,0x10
c0011a25:	83 c4 0c             	add    esp,0xc
c0011a28:	c3                   	ret    

c0011a29 <getFromFileDescriptor(int)>:
c0011a29:	53                   	push   ebx
c0011a2a:	83 ec 08             	sub    esp,0x8
c0011a2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a31:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a37:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a3d:	7f 2c                	jg     c0011a6b <getFromFileDescriptor(int)+0x42>
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	68 58 e6 02 c0       	push   0xc002e658
c0011a47:	e8 38 6e 01 00       	call   c0028884 <LinkedList<UnixFile>::getFirstElement()>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	85 c0                	test   eax,eax
c0011a51:	75 04                	jne    c0011a57 <getFromFileDescriptor(int)+0x2e>
c0011a53:	31 c0                	xor    eax,eax
c0011a55:	eb 6e                	jmp    c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a57:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a5a:	74 69                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a5c:	52                   	push   edx
c0011a5d:	52                   	push   edx
c0011a5e:	50                   	push   eax
c0011a5f:	68 58 e6 02 c0       	push   0xc002e658
c0011a64:	e8 c5 6e 01 00       	call   c002892e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a69:	eb e1                	jmp    c0011a4c <getFromFileDescriptor(int)+0x23>
c0011a6b:	a1 4c e6 02 c0       	mov    eax,ds:0xc002e64c
c0011a70:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a76:	74 4d                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a78:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c0011a7d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a83:	74 40                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a85:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0011a8a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a90:	74 33                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a92:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c0011a97:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a9d:	74 26                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a9f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011aa5:	83 f8 08             	cmp    eax,0x8
c0011aa8:	77 09                	ja     c0011ab3 <getFromFileDescriptor(int)+0x8a>
c0011aaa:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0011ab1:	eb 12                	jmp    c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011ab3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ab9:	83 fb 08             	cmp    ebx,0x8
c0011abc:	77 95                	ja     c0011a53 <getFromFileDescriptor(int)+0x2a>
c0011abe:	8b 04 9d e0 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1a20]
c0011ac5:	83 c4 08             	add    esp,0x8
c0011ac8:	5b                   	pop    ebx
c0011ac9:	c3                   	ret    

c0011aca <__static_initialization_and_destruction_0(int, int)>:
c0011aca:	83 ec 0c             	sub    esp,0xc
c0011acd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ad2:	75 34                	jne    c0011b08 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011adc:	75 2a                	jne    c0011b08 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	68 58 e6 02 c0       	push   0xc002e658
c0011ae6:	e8 6d 6c 01 00       	call   c0028758 <LinkedList<UnixFile>::LinkedList()>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 ec 04             	sub    esp,0x4
c0011af1:	68 10 d4 02 c0       	push   0xc002d410
c0011af6:	68 58 e6 02 c0       	push   0xc002e658
c0011afb:	68 56 87 02 c0       	push   0xc0028756
c0011b00:	e8 4c 13 00 00       	call   c0012e51 <__cxa_atexit>
c0011b05:	83 c4 10             	add    esp,0x10
c0011b08:	90                   	nop
c0011b09:	83 c4 0c             	add    esp,0xc
c0011b0c:	c3                   	ret    

c0011b0d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b0d:	83 ec 0c             	sub    esp,0xc
c0011b10:	83 ec 08             	sub    esp,0x8
c0011b13:	68 ff ff 00 00       	push   0xffff
c0011b18:	6a 01                	push   0x1
c0011b1a:	e8 ab ff ff ff       	call   c0011aca <__static_initialization_and_destruction_0(int, int)>
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	83 c4 0c             	add    esp,0xc
c0011b25:	c3                   	ret    

c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b26:	53                   	push   ebx
c0011b27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b2f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b35:	89 c8                	mov    eax,ecx
c0011b37:	d1 e8                	shr    eax,1
c0011b39:	03 05 88 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d488
c0011b3f:	83 e1 01             	and    ecx,0x1
c0011b42:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b44:	75 09                	jne    c0011b4f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b46:	83 e2 f0             	and    edx,0xfffffff0
c0011b49:	09 da                	or     edx,ebx
c0011b4b:	88 10                	mov    BYTE PTR [eax],dl
c0011b4d:	5b                   	pop    ebx
c0011b4e:	c3                   	ret    
c0011b4f:	c1 e3 04             	shl    ebx,0x4
c0011b52:	83 e2 0f             	and    edx,0xf
c0011b55:	09 da                	or     edx,ebx
c0011b57:	88 10                	mov    BYTE PTR [eax],dl
c0011b59:	5b                   	pop    ebx
c0011b5a:	c3                   	ret    

c0011b5b <Virt::getPageState(unsigned long)>:
c0011b5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b5f:	8b 0d 88 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d488
c0011b65:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b6b:	89 d0                	mov    eax,edx
c0011b6d:	d1 e8                	shr    eax,1
c0011b6f:	83 e2 01             	and    edx,0x1
c0011b72:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b75:	75 04                	jne    c0011b7b <Virt::getPageState(unsigned long)+0x20>
c0011b77:	83 e0 0f             	and    eax,0xf
c0011b7a:	c3                   	ret    
c0011b7b:	c0 e8 04             	shr    al,0x4
c0011b7e:	c3                   	ret    

c0011b7f <Virt::allocateKernelVirtualPages(int)>:
c0011b7f:	55                   	push   ebp
c0011b80:	31 ed                	xor    ebp,ebp
c0011b82:	57                   	push   edi
c0011b83:	56                   	push   esi
c0011b84:	53                   	push   ebx
c0011b85:	31 db                	xor    ebx,ebx
c0011b87:	83 ec 1c             	sub    esp,0x1c
c0011b8a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b8e:	8b 3d 84 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d484
c0011b94:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b99:	57                   	push   edi
c0011b9a:	e8 bc ff ff ff       	call   c0011b5b <Virt::getPageState(unsigned long)>
c0011b9f:	5a                   	pop    edx
c0011ba0:	84 c0                	test   al,al
c0011ba2:	75 3a                	jne    c0011bde <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011ba4:	85 db                	test   ebx,ebx
c0011ba6:	75 02                	jne    c0011baa <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ba8:	89 fd                	mov    ebp,edi
c0011baa:	43                   	inc    ebx
c0011bab:	39 f3                	cmp    ebx,esi
c0011bad:	74 5a                	je     c0011c09 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011baf:	47                   	inc    edi
c0011bb0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb6:	76 31                	jbe    c0011be9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bb8:	c7 05 84 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d484,0xc8000
c0011bc2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bc7:	75 28                	jne    c0011bf1 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bc9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bce:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bd3:	57                   	push   edi
c0011bd4:	e8 82 ff ff ff       	call   c0011b5b <Virt::getPageState(unsigned long)>
c0011bd9:	5a                   	pop    edx
c0011bda:	84 c0                	test   al,al
c0011bdc:	74 c6                	je     c0011ba4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bde:	31 db                	xor    ebx,ebx
c0011be0:	47                   	inc    edi
c0011be1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011be7:	77 cf                	ja     c0011bb8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011be9:	89 3d 84 d4 02 c0    	mov    DWORD PTR ds:0xc002d484,edi
c0011bef:	eb a8                	jmp    c0011b99 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bf1:	83 ec 0c             	sub    esp,0xc
c0011bf4:	68 f0 a5 02 c0       	push   0xc002a5f0
c0011bf9:	e8 67 8a 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0011bfe:	8b 3d 84 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d484
c0011c04:	83 c4 10             	add    esp,0x10
c0011c07:	eb 90                	jmp    c0011b99 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c09:	89 2d 84 d4 02 c0    	mov    DWORD PTR ds:0xc002d484,ebp
c0011c0f:	4b                   	dec    ebx
c0011c10:	74 5f                	je     c0011c71 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c12:	85 f6                	test   esi,esi
c0011c14:	74 3d                	je     c0011c53 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c16:	89 e8                	mov    eax,ebp
c0011c18:	31 db                	xor    ebx,ebx
c0011c1a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c1d:	eb 14                	jmp    c0011c33 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c1f:	6a 01                	push   0x1
c0011c21:	43                   	inc    ebx
c0011c22:	50                   	push   eax
c0011c23:	e8 fe fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c28:	58                   	pop    eax
c0011c29:	39 f3                	cmp    ebx,esi
c0011c2b:	5a                   	pop    edx
c0011c2c:	74 25                	je     c0011c53 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c2e:	a1 84 d4 02 c0       	mov    eax,ds:0xc002d484
c0011c33:	8d 50 01             	lea    edx,[eax+0x1]
c0011c36:	85 db                	test   ebx,ebx
c0011c38:	89 15 84 d4 02 c0    	mov    DWORD PTR ds:0xc002d484,edx
c0011c3e:	74 20                	je     c0011c60 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c40:	39 df                	cmp    edi,ebx
c0011c42:	75 db                	jne    c0011c1f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c44:	6a 03                	push   0x3
c0011c46:	43                   	inc    ebx
c0011c47:	50                   	push   eax
c0011c48:	e8 d9 fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4d:	59                   	pop    ecx
c0011c4e:	39 f3                	cmp    ebx,esi
c0011c50:	58                   	pop    eax
c0011c51:	75 db                	jne    c0011c2e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c53:	83 c4 1c             	add    esp,0x1c
c0011c56:	89 e8                	mov    eax,ebp
c0011c58:	5b                   	pop    ebx
c0011c59:	c1 e0 0c             	shl    eax,0xc
c0011c5c:	5e                   	pop    esi
c0011c5d:	5f                   	pop    edi
c0011c5e:	5d                   	pop    ebp
c0011c5f:	c3                   	ret    
c0011c60:	6a 02                	push   0x2
c0011c62:	bb 01 00 00 00       	mov    ebx,0x1
c0011c67:	50                   	push   eax
c0011c68:	e8 b9 fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6d:	58                   	pop    eax
c0011c6e:	5a                   	pop    edx
c0011c6f:	eb bd                	jmp    c0011c2e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c71:	6a 04                	push   0x4
c0011c73:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c76:	55                   	push   ebp
c0011c77:	a3 84 d4 02 c0       	mov    ds:0xc002d484,eax
c0011c7c:	e8 a5 fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c81:	59                   	pop    ecx
c0011c82:	89 e8                	mov    eax,ebp
c0011c84:	5b                   	pop    ebx
c0011c85:	c1 e0 0c             	shl    eax,0xc
c0011c88:	83 c4 1c             	add    esp,0x1c
c0011c8b:	5b                   	pop    ebx
c0011c8c:	5e                   	pop    esi
c0011c8d:	5f                   	pop    edi
c0011c8e:	5d                   	pop    ebp
c0011c8f:	c3                   	ret    

c0011c90 <Virt::freeSwapfilePage(unsigned long)>:
c0011c90:	53                   	push   ebx
c0011c91:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c0011c97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c9b:	b8 01 00 00 00       	mov    eax,0x1
c0011ca0:	89 cb                	mov    ebx,ecx
c0011ca2:	d3 e0                	shl    eax,cl
c0011ca4:	c1 eb 05             	shr    ebx,0x5
c0011ca7:	f7 d0                	not    eax
c0011ca9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cac:	5b                   	pop    ebx
c0011cad:	c3                   	ret    

c0011cae <Virt::swapIDToSector(unsigned long)>:
c0011cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb2:	0f af 05 8c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d48c
c0011cb9:	03 05 94 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d494
c0011cbf:	c3                   	ret    

c0011cc0 <Virt::allocateSwapfilePage()>:
c0011cc0:	55                   	push   ebp
c0011cc1:	31 d2                	xor    edx,edx
c0011cc3:	57                   	push   edi
c0011cc4:	56                   	push   esi
c0011cc5:	53                   	push   ebx
c0011cc6:	83 ec 0c             	sub    esp,0xc
c0011cc9:	8b 0d 8c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d48c
c0011ccf:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c0011cd4:	f7 f1                	div    ecx
c0011cd6:	39 0d 90 d4 02 c0    	cmp    DWORD PTR ds:0xc002d490,ecx
c0011cdc:	72 2d                	jb     c0011d0b <Virt::allocateSwapfilePage()+0x4b>
c0011cde:	8b 35 68 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e668
c0011ce4:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ce6:	f6 c2 01             	test   dl,0x1
c0011ce9:	74 3c                	je     c0011d27 <Virt::allocateSwapfilePage()+0x67>
c0011ceb:	31 c9                	xor    ecx,ecx
c0011ced:	bf 01 00 00 00       	mov    edi,0x1
c0011cf2:	eb 12                	jmp    c0011d06 <Virt::allocateSwapfilePage()+0x46>
c0011cf4:	89 fd                	mov    ebp,edi
c0011cf6:	89 ca                	mov    edx,ecx
c0011cf8:	d3 e5                	shl    ebp,cl
c0011cfa:	c1 ea 05             	shr    edx,0x5
c0011cfd:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d00:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d02:	85 ea                	test   edx,ebp
c0011d04:	74 2a                	je     c0011d30 <Virt::allocateSwapfilePage()+0x70>
c0011d06:	41                   	inc    ecx
c0011d07:	39 c8                	cmp    eax,ecx
c0011d09:	77 e9                	ja     c0011cf4 <Virt::allocateSwapfilePage()+0x34>
c0011d0b:	83 ec 0c             	sub    esp,0xc
c0011d0e:	68 9d a7 02 c0       	push   0xc002a79d
c0011d13:	e8 4d 89 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0011d18:	83 c4 10             	add    esp,0x10
c0011d1b:	31 c9                	xor    ecx,ecx
c0011d1d:	83 c4 0c             	add    esp,0xc
c0011d20:	89 c8                	mov    eax,ecx
c0011d22:	5b                   	pop    ebx
c0011d23:	5e                   	pop    esi
c0011d24:	5f                   	pop    edi
c0011d25:	5d                   	pop    ebp
c0011d26:	c3                   	ret    
c0011d27:	89 f3                	mov    ebx,esi
c0011d29:	bd 01 00 00 00       	mov    ebp,0x1
c0011d2e:	31 c9                	xor    ecx,ecx
c0011d30:	09 ea                	or     edx,ebp
c0011d32:	89 c8                	mov    eax,ecx
c0011d34:	89 13                	mov    DWORD PTR [ebx],edx
c0011d36:	83 c4 0c             	add    esp,0xc
c0011d39:	5b                   	pop    ebx
c0011d3a:	5e                   	pop    esi
c0011d3b:	5f                   	pop    edi
c0011d3c:	5d                   	pop    ebp
c0011d3d:	c3                   	ret    

c0011d3e <Virt::virtualMemorySetup()>:
c0011d3e:	53                   	push   ebx
c0011d3f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d44:	83 ec 08             	sub    esp,0x8
c0011d47:	6a 0f                	push   0xf
c0011d49:	53                   	push   ebx
c0011d4a:	43                   	inc    ebx
c0011d4b:	e8 d6 fd ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d50:	59                   	pop    ecx
c0011d51:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d57:	58                   	pop    eax
c0011d58:	75 ed                	jne    c0011d47 <Virt::virtualMemorySetup()+0x9>
c0011d5a:	83 ec 08             	sub    esp,0x8
c0011d5d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d62:	68 00 00 00 c8       	push   0xc8000000
c0011d67:	68 b4 a7 02 c0       	push   0xc002a7b4
c0011d6c:	e8 46 12 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0011d71:	58                   	pop    eax
c0011d72:	5a                   	pop    edx
c0011d73:	68 00 f0 ff ef       	push   0xeffff000
c0011d78:	68 c8 a7 02 c0       	push   0xc002a7c8
c0011d7d:	e8 35 12 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	83 ec 08             	sub    esp,0x8
c0011d88:	6a 00                	push   0x0
c0011d8a:	53                   	push   ebx
c0011d8b:	43                   	inc    ebx
c0011d8c:	e8 95 fd ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d9a:	75 e9                	jne    c0011d85 <Virt::virtualMemorySetup()+0x47>
c0011d9c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011da1:	83 ec 08             	sub    esp,0x8
c0011da4:	6a 0f                	push   0xf
c0011da6:	53                   	push   ebx
c0011da7:	43                   	inc    ebx
c0011da8:	e8 79 fd ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dad:	83 c4 10             	add    esp,0x10
c0011db0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011db6:	75 e9                	jne    c0011da1 <Virt::virtualMemorySetup()+0x63>
c0011db8:	83 c4 08             	add    esp,0x8
c0011dbb:	5b                   	pop    ebx
c0011dbc:	c3                   	ret    

c0011dbd <Virt::swappingSetup()>:
c0011dbd:	83 ec 14             	sub    esp,0x14
c0011dc0:	31 d2                	xor    edx,edx
c0011dc2:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c0011dc7:	f7 35 8c d4 02 c0    	div    DWORD PTR ds:0xc002d48c
c0011dcd:	c1 e8 05             	shr    eax,0x5
c0011dd0:	50                   	push   eax
c0011dd1:	68 dc a7 02 c0       	push   0xc002a7dc
c0011dd6:	e8 dc 11 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0011ddb:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	f7 35 8c d4 02 c0    	div    DWORD PTR ds:0xc002d48c
c0011de8:	c1 e8 05             	shr    eax,0x5
c0011deb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dee:	e8 50 da ff ff       	call   c000f843 <malloc>
c0011df3:	83 c4 0c             	add    esp,0xc
c0011df6:	89 c1                	mov    ecx,eax
c0011df8:	a3 68 e6 02 c0       	mov    ds:0xc002e668,eax
c0011dfd:	31 d2                	xor    edx,edx
c0011dff:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c0011e04:	f7 35 8c d4 02 c0    	div    DWORD PTR ds:0xc002d48c
c0011e0a:	c1 e8 05             	shr    eax,0x5
c0011e0d:	50                   	push   eax
c0011e0e:	6a 00                	push   0x0
c0011e10:	51                   	push   ecx
c0011e11:	e8 62 e9 fe ff       	call   c0000778 <memset>
c0011e16:	83 c4 1c             	add    esp,0x1c
c0011e19:	c3                   	ret    

c0011e1a <Virt::getAKernelVAS()>:
c0011e1a:	a1 6c e6 02 c0       	mov    eax,ds:0xc002e66c
c0011e1f:	c3                   	ret    

c0011e20 <Virt::setupPageSwapping(int)>:
c0011e20:	57                   	push   edi
c0011e21:	56                   	push   esi
c0011e22:	53                   	push   ebx
c0011e23:	83 ec 1c             	sub    esp,0x1c
c0011e26:	68 14 01 00 00       	push   0x114
c0011e2b:	e8 13 da ff ff       	call   c000f843 <malloc>
c0011e30:	83 c4 0c             	add    esp,0xc
c0011e33:	89 c6                	mov    esi,eax
c0011e35:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c0011e3b:	68 f7 a7 02 c0       	push   0xc002a7f7
c0011e40:	50                   	push   eax
c0011e41:	e8 ca 16 00 00       	call   c0013510 <File::File(char const*, Process*)>
c0011e46:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e49:	e8 9e 18 00 00       	call   c00136ec <File::unlink()>
c0011e4e:	58                   	pop    eax
c0011e4f:	5a                   	pop    edx
c0011e50:	6a 12                	push   0x12
c0011e52:	56                   	push   esi
c0011e53:	e8 1c 17 00 00       	call   c0013574 <File::open(FileOpenMode)>
c0011e58:	83 c4 10             	add    esp,0x10
c0011e5b:	85 c0                	test   eax,eax
c0011e5d:	0f 85 ca 00 00 00    	jne    c0011f2d <Virt::setupPageSwapping(int)+0x10d>
c0011e63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e6f:	c1 e3 08             	shl    ebx,0x8
c0011e72:	83 ec 0c             	sub    esp,0xc
c0011e75:	68 00 00 01 00       	push   0x10000
c0011e7a:	e8 c4 d9 ff ff       	call   c000f843 <malloc>
c0011e7f:	83 c4 0c             	add    esp,0xc
c0011e82:	89 c7                	mov    edi,eax
c0011e84:	68 00 00 01 00       	push   0x10000
c0011e89:	6a 00                	push   0x0
c0011e8b:	50                   	push   eax
c0011e8c:	e8 e7 e8 fe ff       	call   c0000778 <memset>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	85 db                	test   ebx,ebx
c0011e96:	79 03                	jns    c0011e9b <Virt::setupPageSwapping(int)+0x7b>
c0011e98:	83 c3 0f             	add    ebx,0xf
c0011e9b:	c1 fb 04             	sar    ebx,0x4
c0011e9e:	4b                   	dec    ebx
c0011e9f:	83 fb ff             	cmp    ebx,0xffffffff
c0011ea2:	74 4b                	je     c0011eef <Virt::setupPageSwapping(int)+0xcf>
c0011ea4:	83 ec 0c             	sub    esp,0xc
c0011ea7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ea9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ead:	52                   	push   edx
c0011eae:	57                   	push   edi
c0011eaf:	6a 00                	push   0x0
c0011eb1:	68 00 00 01 00       	push   0x10000
c0011eb6:	56                   	push   esi
c0011eb7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eba:	83 c4 20             	add    esp,0x20
c0011ebd:	85 c0                	test   eax,eax
c0011ebf:	75 59                	jne    c0011f1a <Virt::setupPageSwapping(int)+0xfa>
c0011ec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ec5:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eca:	74 d2                	je     c0011e9e <Virt::setupPageSwapping(int)+0x7e>
c0011ecc:	83 ec 08             	sub    esp,0x8
c0011ecf:	4b                   	dec    ebx
c0011ed0:	50                   	push   eax
c0011ed1:	68 4a a8 02 c0       	push   0xc002a84a
c0011ed6:	e8 dc 10 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0011edb:	c7 04 24 53 a8 02 c0 	mov    DWORD PTR [esp],0xc002a853
c0011ee2:	e8 7e 87 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	83 fb ff             	cmp    ebx,0xffffffff
c0011eed:	75 b5                	jne    c0011ea4 <Virt::setupPageSwapping(int)+0x84>
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	56                   	push   esi
c0011ef3:	e8 da 16 00 00       	call   c00135d2 <File::close()>
c0011ef8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011efb:	e8 63 d9 ff ff       	call   c000f863 <rfree>
c0011f00:	83 c4 10             	add    esp,0x10
c0011f03:	85 f6                	test   esi,esi
c0011f05:	74 0c                	je     c0011f13 <Virt::setupPageSwapping(int)+0xf3>
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f0c:	56                   	push   esi
c0011f0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f10:	83 c4 10             	add    esp,0x10
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	5b                   	pop    ebx
c0011f17:	5e                   	pop    esi
c0011f18:	5f                   	pop    edi
c0011f19:	c3                   	ret    
c0011f1a:	83 ec 08             	sub    esp,0x8
c0011f1d:	50                   	push   eax
c0011f1e:	68 32 a8 02 c0       	push   0xc002a832
c0011f23:	e8 8f 10 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0011f28:	83 c4 10             	add    esp,0x10
c0011f2b:	eb 94                	jmp    c0011ec1 <Virt::setupPageSwapping(int)+0xa1>
c0011f2d:	83 ec 08             	sub    esp,0x8
c0011f30:	50                   	push   eax
c0011f31:	68 0e a8 02 c0       	push   0xc002a80e
c0011f36:	e8 7c 10 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0011f3b:	c7 04 24 17 a8 02 c0 	mov    DWORD PTR [esp],0xc002a817
c0011f42:	e8 1e 87 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	e9 14 ff ff ff       	jmp    c0011e63 <Virt::setupPageSwapping(int)+0x43>
c0011f4f:	90                   	nop

c0011f50 <VAS::VAS()>:
c0011f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f5f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6a:	a3 6c e6 02 c0       	mov    ds:0xc002e66c,eax
c0011f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f73:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f82:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f89:	90                   	nop
c0011f8a:	c3                   	ret    
c0011f8b:	90                   	nop

c0011f8c <VAS::VAS(VAS*)>:
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f9e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011fa5:	83 ec 0c             	sub    esp,0xc
c0011fa8:	68 10 a6 02 c0       	push   0xc002a610
c0011fad:	e8 b3 86 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0011fb2:	83 c4 10             	add    esp,0x10
c0011fb5:	90                   	nop
c0011fb6:	83 c4 0c             	add    esp,0xc
c0011fb9:	c3                   	ret    

c0011fba <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fbe:	89 c2                	mov    edx,eax
c0011fc0:	c1 e8 0a             	shr    eax,0xa
c0011fc3:	c1 ea 16             	shr    edx,0x16
c0011fc6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fcb:	19 c9                	sbb    ecx,ecx
c0011fcd:	c1 e2 0c             	shl    edx,0xc
c0011fd0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fd6:	25 fc 0f 00 00       	and    eax,0xffc
c0011fdb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fe2:	01 d0                	add    eax,edx
c0011fe4:	c3                   	ret    
c0011fe5:	90                   	nop

c0011fe6 <VAS::getPageTableEntry(unsigned long)>:
c0011fe6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fea:	89 ca                	mov    edx,ecx
c0011fec:	c1 e9 0a             	shr    ecx,0xa
c0011fef:	c1 ea 16             	shr    edx,0x16
c0011ff2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ff8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ffe:	c1 e0 0c             	shl    eax,0xc
c0012001:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012004:	c3                   	ret    

c0012005 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012005:	57                   	push   edi
c0012006:	56                   	push   esi
c0012007:	be 01 00 00 00       	mov    esi,0x1
c001200c:	53                   	push   ebx
c001200d:	83 ec 10             	sub    esp,0x10
c0012010:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012014:	c1 eb 0c             	shr    ebx,0xc
c0012017:	eb 3f                	jmp    c0012058 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012019:	e8 fc fd ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001201e:	83 ec 08             	sub    esp,0x8
c0012021:	57                   	push   edi
c0012022:	50                   	push   eax
c0012023:	e8 be ff ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012028:	83 c4 10             	add    esp,0x10
c001202b:	8b 00                	mov    eax,DWORD PTR [eax]
c001202d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012031:	f6 c4 04             	test   ah,0x4
c0012034:	75 5f                	jne    c0012095 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012036:	80 fa 04             	cmp    dl,0x4
c0012039:	74 78                	je     c00120b3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001203b:	80 fa 02             	cmp    dl,0x2
c001203e:	0f 84 88 00 00 00    	je     c00120cc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012044:	80 fa 03             	cmp    dl,0x3
c0012047:	0f 84 ad 00 00 00    	je     c00120fa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001204d:	fe ca                	dec    dl
c001204f:	0f 84 92 00 00 00    	je     c00120e7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012055:	43                   	inc    ebx
c0012056:	31 f6                	xor    esi,esi
c0012058:	53                   	push   ebx
c0012059:	e8 fd fa ff ff       	call   c0011b5b <Virt::getPageState(unsigned long)>
c001205e:	5f                   	pop    edi
c001205f:	89 df                	mov    edi,ebx
c0012061:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012065:	c1 e7 0c             	shl    edi,0xc
c0012068:	84 c0                	test   al,al
c001206a:	75 ad                	jne    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001206c:	83 ec 0c             	sub    esp,0xc
c001206f:	68 59 a8 02 c0       	push   0xc002a859
c0012074:	e8 ec 85 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0012079:	e8 9c fd ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001207e:	5a                   	pop    edx
c001207f:	59                   	pop    ecx
c0012080:	57                   	push   edi
c0012081:	50                   	push   eax
c0012082:	e8 5f ff ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	8b 00                	mov    eax,DWORD PTR [eax]
c001208c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012090:	f6 c4 04             	test   ah,0x4
c0012093:	74 c0                	je     c0012055 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012095:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012099:	25 00 f0 ff ff       	and    eax,0xfffff000
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	50                   	push   eax
c00120a2:	e8 b4 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120ae:	80 fa 04             	cmp    dl,0x4
c00120b1:	75 88                	jne    c001203b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120b3:	89 f0                	mov    eax,esi
c00120b5:	84 c0                	test   al,al
c00120b7:	75 47                	jne    c0012100 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120b9:	c7 44 24 20 34 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a634
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	5b                   	pop    ebx
c00120c5:	5e                   	pop    esi
c00120c6:	5f                   	pop    edi
c00120c7:	e9 99 85 00 00       	jmp    c001a665 <Krnl::panic(char const*)>
c00120cc:	89 f0                	mov    eax,esi
c00120ce:	84 c0                	test   al,al
c00120d0:	75 15                	jne    c00120e7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120d2:	83 ec 0c             	sub    esp,0xc
c00120d5:	68 75 a8 02 c0       	push   0xc002a875
c00120da:	e8 86 85 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	e9 6e ff ff ff       	jmp    c0012055 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e7:	83 ec 08             	sub    esp,0x8
c00120ea:	6a 00                	push   0x0
c00120ec:	53                   	push   ebx
c00120ed:	e8 34 fa ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120f2:	83 c4 10             	add    esp,0x10
c00120f5:	e9 5b ff ff ff       	jmp    c0012055 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120fa:	89 f0                	mov    eax,esi
c00120fc:	84 c0                	test   al,al
c00120fe:	75 15                	jne    c0012115 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012100:	83 ec 08             	sub    esp,0x8
c0012103:	6a 00                	push   0x0
c0012105:	53                   	push   ebx
c0012106:	e8 1b fa ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001210b:	83 c4 10             	add    esp,0x10
c001210e:	83 c4 10             	add    esp,0x10
c0012111:	5b                   	pop    ebx
c0012112:	5e                   	pop    esi
c0012113:	5f                   	pop    edi
c0012114:	c3                   	ret    
c0012115:	c7 44 24 20 91 a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a891
c001211d:	83 c4 10             	add    esp,0x10
c0012120:	5b                   	pop    ebx
c0012121:	5e                   	pop    esi
c0012122:	5f                   	pop    edi
c0012123:	e9 3d 85 00 00       	jmp    c001a665 <Krnl::panic(char const*)>

c0012128 <VAS::freeAllocatedPages(unsigned long)>:
c0012128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001212c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012130:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012134:	74 09                	je     c001213f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012136:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001213a:	e9 c6 fe ff ff       	jmp    c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001213f:	c7 44 24 04 58 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a658
c0012147:	e9 6b 0e 00 00       	jmp    c0012fb7 <Dbg::kprintf(char const*, ...)>

c001214c <VAS::virtualToPhysical(unsigned long)>:
c001214c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012150:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012154:	e8 8d fe ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012159:	5a                   	pop    edx
c001215a:	8b 00                	mov    eax,DWORD PTR [eax]
c001215c:	59                   	pop    ecx
c001215d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012162:	c3                   	ret    
c0012163:	90                   	nop

c0012164 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012164:	55                   	push   ebp
c0012165:	57                   	push   edi
c0012166:	56                   	push   esi
c0012167:	53                   	push   ebx
c0012168:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001216c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012170:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012174:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012178:	85 db                	test   ebx,ebx
c001217a:	7e 22                	jle    c001219e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001217c:	c1 e3 0c             	shl    ebx,0xc
c001217f:	01 f3                	add    ebx,esi
c0012181:	56                   	push   esi
c0012182:	81 c6 00 10 00 00    	add    esi,0x1000
c0012188:	55                   	push   ebp
c0012189:	e8 58 fe ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c001218e:	5a                   	pop    edx
c001218f:	59                   	pop    ecx
c0012190:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012192:	21 f9                	and    ecx,edi
c0012194:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012198:	39 f3                	cmp    ebx,esi
c001219a:	89 08                	mov    DWORD PTR [eax],ecx
c001219c:	75 e3                	jne    c0012181 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001219e:	5b                   	pop    ebx
c001219f:	5e                   	pop    esi
c00121a0:	5f                   	pop    edi
c00121a1:	5d                   	pop    ebp
c00121a2:	c3                   	ret    
c00121a3:	90                   	nop

c00121a4 <VAS::setToWriteCombining(unsigned long, int)>:
c00121a4:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00121a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121af:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121b6:	75 01                	jne    c00121b9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121b8:	c3                   	ret    
c00121b9:	68 80 00 00 00       	push   0x80
c00121be:	6a ff                	push   0xffffffff
c00121c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121cc:	e8 93 ff ff ff       	call   c0012164 <VAS::reflagRange(unsigned long, int, int, int)>
c00121d1:	83 c4 14             	add    esp,0x14
c00121d4:	c3                   	ret    
c00121d5:	90                   	nop

c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121d6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121e9:	19 c0                	sbb    eax,eax
c00121eb:	83 ca 03             	or     edx,0x3
c00121ee:	83 e0 fc             	and    eax,0xfffffffc
c00121f1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121f8:	0f 20 d8             	mov    eax,cr3
c00121fb:	0f 22 d8             	mov    cr3,eax
c00121fe:	c3                   	ret    
c00121ff:	90                   	nop

c0012200 <VAS::~VAS()>:
c0012200:	83 ec 2c             	sub    esp,0x2c
c0012203:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001220b:	e8 4a bc 00 00       	call   c001de5a <lockScheduler()>
c0012210:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012215:	8b 00                	mov    eax,DWORD PTR [eax]
c0012217:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001221a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012220:	83 ec 04             	sub    esp,0x4
c0012223:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012227:	6a 01                	push   0x1
c0012229:	50                   	push   eax
c001222a:	e8 a7 ff ff ff       	call   c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001223a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012242:	0f 8f d7 00 00 00    	jg     c001231f <VAS::~VAS()+0x11f>
c0012248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001224f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012253:	c1 e2 02             	shl    edx,0x2
c0012256:	01 d0                	add    eax,edx
c0012258:	8b 00                	mov    eax,DWORD PTR [eax]
c001225a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001225e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012262:	83 e0 01             	and    eax,0x1
c0012265:	0f 84 ab 00 00 00    	je     c0012316 <VAS::~VAS()+0x116>
c001226b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012273:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001227b:	7f 75                	jg     c00122f2 <VAS::~VAS()+0xf2>
c001227d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012281:	c1 e0 0a             	shl    eax,0xa
c0012284:	89 c2                	mov    edx,eax
c0012286:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001228a:	01 d0                	add    eax,edx
c001228c:	c1 e0 0c             	shl    eax,0xc
c001228f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012293:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012298:	8b 00                	mov    eax,DWORD PTR [eax]
c001229a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001229d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122a3:	83 ec 04             	sub    esp,0x4
c00122a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122aa:	6a 01                	push   0x1
c00122ac:	50                   	push   eax
c00122ad:	e8 08 fd ff ff       	call   c0011fba <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00122bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c7:	25 01 04 00 00       	and    eax,0x401
c00122cc:	3d 01 04 00 00       	cmp    eax,0x401
c00122d1:	75 19                	jne    c00122ec <VAS::~VAS()+0xec>
c00122d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122dc:	83 ec 0c             	sub    esp,0xc
c00122df:	50                   	push   eax
c00122e0:	e8 76 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122ec:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122f0:	eb 81                	jmp    c0012273 <VAS::~VAS()+0x73>
c00122f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f6:	25 00 04 00 00       	and    eax,0x400
c00122fb:	74 19                	je     c0012316 <VAS::~VAS()+0x116>
c00122fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012301:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	50                   	push   eax
c001230a:	e8 4c db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001230f:	83 c4 10             	add    esp,0x10
c0012312:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012316:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001231a:	e9 1b ff ff ff       	jmp    c001223a <VAS::~VAS()+0x3a>
c001231f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012323:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012326:	83 ec 0c             	sub    esp,0xc
c0012329:	50                   	push   eax
c001232a:	e8 d6 fc ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001232f:	83 c4 10             	add    esp,0x10
c0012332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012336:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012339:	83 ec 0c             	sub    esp,0xc
c001233c:	50                   	push   eax
c001233d:	e8 19 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012342:	83 c4 10             	add    esp,0x10
c0012345:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012349:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001234d:	c1 e0 02             	shl    eax,0x2
c0012350:	83 ec 08             	sub    esp,0x8
c0012353:	50                   	push   eax
c0012354:	68 7c a6 02 c0       	push   0xc002a67c
c0012359:	e8 59 0c 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	e8 f6 ba 00 00       	call   c001de5c <unlockScheduler()>
c0012366:	90                   	nop
c0012367:	83 c4 2c             	add    esp,0x2c
c001236a:	c3                   	ret    
c001236b:	90                   	nop

c001236c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001236c:	55                   	push   ebp
c001236d:	57                   	push   edi
c001236e:	56                   	push   esi
c001236f:	53                   	push   ebx
c0012370:	83 ec 1c             	sub    esp,0x1c
c0012373:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012377:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001237b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012381:	77 08                	ja     c001238b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012383:	0f 20 d8             	mov    eax,cr3
c0012386:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012389:	75 47                	jne    c00123d2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001238b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001238f:	09 d8                	or     eax,ebx
c0012391:	a9 ff 0f 00 00       	test   eax,0xfff
c0012396:	75 57                	jne    c00123ef <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012398:	89 de                	mov    esi,ebx
c001239a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001239d:	c1 ee 16             	shr    esi,0x16
c00123a0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123a7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123ab:	74 54                	je     c0012401 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123b1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123b7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123bb:	c1 e6 0c             	shl    esi,0xc
c00123be:	c1 eb 0a             	shr    ebx,0xa
c00123c1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123c7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123ca:	83 c4 1c             	add    esp,0x1c
c00123cd:	5b                   	pop    ebx
c00123ce:	5e                   	pop    esi
c00123cf:	5f                   	pop    edi
c00123d0:	5d                   	pop    ebp
c00123d1:	c3                   	ret    
c00123d2:	83 ec 0c             	sub    esp,0xc
c00123d5:	68 9c a6 02 c0       	push   0xc002a69c
c00123da:	e8 d8 0b 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e6:	09 d8                	or     eax,ebx
c00123e8:	a9 ff 0f 00 00       	test   eax,0xfff
c00123ed:	74 a9                	je     c0012398 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123ef:	83 ec 0c             	sub    esp,0xc
c00123f2:	68 04 a7 02 c0       	push   0xc002a704
c00123f7:	e8 69 82 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00123fc:	83 c4 10             	add    esp,0x10
c00123ff:	eb 97                	jmp    c0012398 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012405:	e8 db da ff ff       	call   c000fee5 <Phys::allocatePage()>
c001240a:	89 c5                	mov    ebp,eax
c001240c:	e8 09 fa ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0012411:	83 ec 0c             	sub    esp,0xc
c0012414:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012418:	6a 01                	push   0x1
c001241a:	e8 60 f7 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c001241f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012426:	6a 01                	push   0x1
c0012428:	50                   	push   eax
c0012429:	55                   	push   ebp
c001242a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012430:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012434:	51                   	push   ecx
c0012435:	e8 26 02 00 00       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001243a:	83 c4 1c             	add    esp,0x1c
c001243d:	68 00 10 00 00       	push   0x1000
c0012442:	6a 00                	push   0x0
c0012444:	50                   	push   eax
c0012445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012449:	e8 2a e3 fe ff       	call   c0000778 <memset>
c001244e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012452:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012455:	e8 ab fb ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001245a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001245e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012461:	83 c4 10             	add    esp,0x10
c0012464:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012467:	e9 41 ff ff ff       	jmp    c00123ad <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001246c <VAS::allocatePages(int, int)>:
c001246c:	55                   	push   ebp
c001246d:	57                   	push   edi
c001246e:	56                   	push   esi
c001246f:	53                   	push   ebx
c0012470:	83 ec 1c             	sub    esp,0x1c
c0012473:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012477:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001247c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012482:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012488:	83 e0 01             	and    eax,0x1
c001248b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001248f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012493:	0f 85 cc 00 00 00    	jne    c0012565 <VAS::allocatePages(int, int)+0xf9>
c0012499:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001249c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a0:	85 c0                	test   eax,eax
c00124a2:	0f 84 a1 00 00 00    	je     c0012549 <VAS::allocatePages(int, int)+0xdd>
c00124a8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124b0:	c1 e6 0c             	shl    esi,0xc
c00124b3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124b7:	85 c0                	test   eax,eax
c00124b9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124bc:	7e 33                	jle    c00124f1 <VAS::allocatePages(int, int)+0x85>
c00124be:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c6:	81 cd 00 04 00 00    	or     ebp,0x400
c00124cc:	e8 14 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c00124d1:	55                   	push   ebp
c00124d2:	53                   	push   ebx
c00124d3:	50                   	push   eax
c00124d4:	57                   	push   edi
c00124d5:	e8 92 fe ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c00124da:	83 c4 10             	add    esp,0x10
c00124dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124e2:	74 03                	je     c00124e7 <VAS::allocatePages(int, int)+0x7b>
c00124e4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124ed:	39 de                	cmp    esi,ebx
c00124ef:	75 db                	jne    c00124cc <VAS::allocatePages(int, int)+0x60>
c00124f1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f6:	75 12                	jne    c001250a <VAS::allocatePages(int, int)+0x9e>
c00124f8:	0f 20 d8             	mov    eax,cr3
c00124fb:	0f 22 d8             	mov    cr3,eax
c00124fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012502:	83 c4 1c             	add    esp,0x1c
c0012505:	5b                   	pop    ebx
c0012506:	5e                   	pop    esi
c0012507:	5f                   	pop    edi
c0012508:	5d                   	pop    ebp
c0012509:	c3                   	ret    
c001250a:	c1 ee 0a             	shr    esi,0xa
c001250d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012511:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012517:	c1 eb 0a             	shr    ebx,0xa
c001251a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012520:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012526:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001252c:	39 c3                	cmp    ebx,eax
c001252e:	77 ce                	ja     c00124fe <VAS::allocatePages(int, int)+0x92>
c0012530:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012533:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012539:	39 d8                	cmp    eax,ebx
c001253b:	73 f3                	jae    c0012530 <VAS::allocatePages(int, int)+0xc4>
c001253d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012541:	83 c4 1c             	add    esp,0x1c
c0012544:	5b                   	pop    ebx
c0012545:	5e                   	pop    esi
c0012546:	5f                   	pop    edi
c0012547:	5d                   	pop    ebp
c0012548:	c3                   	ret    
c0012549:	83 ec 0c             	sub    esp,0xc
c001254c:	68 28 a7 02 c0       	push   0xc002a728
c0012551:	e8 0f 81 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0012556:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012559:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001255d:	83 c4 10             	add    esp,0x10
c0012560:	e9 43 ff ff ff       	jmp    c00124a8 <VAS::allocatePages(int, int)+0x3c>
c0012565:	83 ec 0c             	sub    esp,0xc
c0012568:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001256c:	e8 0e f6 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0012571:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001257d:	0f 87 9b 00 00 00    	ja     c001261e <VAS::allocatePages(int, int)+0x1b2>
c0012583:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012587:	85 d2                	test   edx,edx
c0012589:	7e 3c                	jle    c00125c7 <VAS::allocatePages(int, int)+0x15b>
c001258b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001258f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012593:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012597:	c1 e5 0c             	shl    ebp,0xc
c001259a:	81 ce 00 04 00 00    	or     esi,0x400
c00125a0:	01 dd                	add    ebp,ebx
c00125a2:	e8 3e d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00125a7:	56                   	push   esi
c00125a8:	53                   	push   ebx
c00125a9:	50                   	push   eax
c00125aa:	57                   	push   edi
c00125ab:	e8 bc fd ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b0:	83 c4 10             	add    esp,0x10
c00125b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b8:	74 03                	je     c00125bd <VAS::allocatePages(int, int)+0x151>
c00125ba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c3:	39 dd                	cmp    ebp,ebx
c00125c5:	75 db                	jne    c00125a2 <VAS::allocatePages(int, int)+0x136>
c00125c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125cc:	0f 84 26 ff ff ff    	je     c00124f8 <VAS::allocatePages(int, int)+0x8c>
c00125d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125da:	89 d3                	mov    ebx,edx
c00125dc:	c1 e0 0c             	shl    eax,0xc
c00125df:	c1 eb 0a             	shr    ebx,0xa
c00125e2:	01 d0                	add    eax,edx
c00125e4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ea:	c1 e8 0a             	shr    eax,0xa
c00125ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125f8:	2d 00 00 40 00       	sub    eax,0x400000
c00125fd:	39 c3                	cmp    ebx,eax
c00125ff:	0f 87 f9 fe ff ff    	ja     c00124fe <VAS::allocatePages(int, int)+0x92>
c0012605:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012608:	81 c3 00 10 00 00    	add    ebx,0x1000
c001260e:	39 d8                	cmp    eax,ebx
c0012610:	73 f3                	jae    c0012605 <VAS::allocatePages(int, int)+0x199>
c0012612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012616:	83 c4 1c             	add    esp,0x1c
c0012619:	5b                   	pop    ebx
c001261a:	5e                   	pop    esi
c001261b:	5f                   	pop    edi
c001261c:	5d                   	pop    ebp
c001261d:	c3                   	ret    
c001261e:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0012623:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012629:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012630:	0f 84 4d ff ff ff    	je     c0012583 <VAS::allocatePages(int, int)+0x117>
c0012636:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001263e:	e9 40 ff ff ff       	jmp    c0012583 <VAS::allocatePages(int, int)+0x117>
c0012643:	90                   	nop

c0012644 <VAS::setCPUSpecific(unsigned long)>:
c0012644:	83 ec 0c             	sub    esp,0xc
c0012647:	6a 05                	push   0x5
c0012649:	68 00 00 40 c2       	push   0xc2400000
c001264e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012656:	e8 11 fd ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c001265b:	83 c4 1c             	add    esp,0x1c
c001265e:	c3                   	ret    
c001265f:	90                   	nop

c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012660:	55                   	push   ebp
c0012661:	57                   	push   edi
c0012662:	56                   	push   esi
c0012663:	53                   	push   ebx
c0012664:	83 ec 1c             	sub    esp,0x1c
c0012667:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001266c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012670:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012676:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001267a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012680:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012684:	83 e0 01             	and    eax,0x1
c0012687:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001268b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268f:	85 c0                	test   eax,eax
c0012691:	7e 39                	jle    c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012693:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012697:	89 f3                	mov    ebx,esi
c0012699:	c1 e0 0c             	shl    eax,0xc
c001269c:	01 f0                	add    eax,esi
c001269e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126a2:	55                   	push   ebp
c00126a3:	53                   	push   ebx
c00126a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a8:	29 f0                	sub    eax,esi
c00126aa:	01 d8                	add    eax,ebx
c00126ac:	50                   	push   eax
c00126ad:	57                   	push   edi
c00126ae:	e8 b9 fc ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c00126b3:	83 c4 10             	add    esp,0x10
c00126b6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126bb:	74 03                	je     c00126c0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126bd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126c0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126c6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126ca:	75 d6                	jne    c00126a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126cc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126d1:	75 10                	jne    c00126e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126d3:	0f 20 d8             	mov    eax,cr3
c00126d6:	0f 22 d8             	mov    cr3,eax
c00126d9:	83 c4 1c             	add    esp,0x1c
c00126dc:	89 f0                	mov    eax,esi
c00126de:	5b                   	pop    ebx
c00126df:	5e                   	pop    esi
c00126e0:	5f                   	pop    edi
c00126e1:	5d                   	pop    ebp
c00126e2:	c3                   	ret    
c00126e3:	89 f3                	mov    ebx,esi
c00126e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126e9:	c1 eb 0a             	shr    ebx,0xa
c00126ec:	c1 e0 0c             	shl    eax,0xc
c00126ef:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126f5:	01 f0                	add    eax,esi
c00126f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126fd:	c1 e8 0a             	shr    eax,0xa
c0012700:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012705:	2d 00 00 40 00       	sub    eax,0x400000
c001270a:	39 c3                	cmp    ebx,eax
c001270c:	77 cb                	ja     c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001270e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012711:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012717:	39 d8                	cmp    eax,ebx
c0012719:	73 f3                	jae    c001270e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001271b:	83 c4 1c             	add    esp,0x1c
c001271e:	89 f0                	mov    eax,esi
c0012720:	5b                   	pop    ebx
c0012721:	5e                   	pop    esi
c0012722:	5f                   	pop    edi
c0012723:	5d                   	pop    ebp
c0012724:	c3                   	ret    
c0012725:	90                   	nop

c0012726 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012726:	55                   	push   ebp
c0012727:	57                   	push   edi
c0012728:	56                   	push   esi
c0012729:	53                   	push   ebx
c001272a:	83 ec 1c             	sub    esp,0x1c
c001272d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012731:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012735:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012739:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001273d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012742:	75 4a                	jne    c001278e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012744:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012748:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001274b:	c1 eb 16             	shr    ebx,0x16
c001274e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012755:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012759:	74 4d                	je     c00127a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001275b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001275f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012763:	c1 e8 0a             	shr    eax,0xa
c0012766:	80 fa 01             	cmp    dl,0x1
c0012769:	19 d2                	sbb    edx,edx
c001276b:	c1 e3 0c             	shl    ebx,0xc
c001276e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012772:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012778:	25 fc 0f 00 00       	and    eax,0xffc
c001277d:	01 d8                	add    eax,ebx
c001277f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012786:	83 c4 1c             	add    esp,0x1c
c0012789:	5b                   	pop    ebx
c001278a:	5e                   	pop    esi
c001278b:	5f                   	pop    edi
c001278c:	5d                   	pop    ebp
c001278d:	c3                   	ret    
c001278e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012792:	83 ec 0c             	sub    esp,0xc
c0012795:	68 54 a7 02 c0       	push   0xc002a754
c001279a:	e8 c6 7e 00 00       	call   c001a665 <Krnl::panic(char const*)>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127a6:	eb 9c                	jmp    c0012744 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ac:	e8 34 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00127b1:	89 c5                	mov    ebp,eax
c00127b3:	e8 62 f6 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c00127b8:	83 ec 0c             	sub    esp,0xc
c00127bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127bf:	6a 01                	push   0x1
c00127c1:	e8 b9 f3 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c00127c6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127cd:	6a 01                	push   0x1
c00127cf:	50                   	push   eax
c00127d0:	55                   	push   ebp
c00127d1:	81 cd 07 04 00 00    	or     ebp,0x407
c00127d7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127db:	51                   	push   ecx
c00127dc:	e8 7f fe ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127e1:	83 c4 1c             	add    esp,0x1c
c00127e4:	68 00 10 00 00       	push   0x1000
c00127e9:	6a 00                	push   0x0
c00127eb:	50                   	push   eax
c00127ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127f0:	e8 83 df fe ff       	call   c0000778 <memset>
c00127f5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127f9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127fc:	e8 04 f8 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c0012801:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012804:	83 c4 10             	add    esp,0x10
c0012807:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001280a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001280e:	e9 48 ff ff ff       	jmp    c001275b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012813:	90                   	nop

c0012814 <VAS::VAS(bool)>:
c0012814:	53                   	push   ebx
c0012815:	83 ec 28             	sub    esp,0x28
c0012818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001281c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012824:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001282b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0012836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012841:	e8 9f d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012846:	89 c2                	mov    edx,eax
c0012848:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284f:	e8 c6 f5 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0012854:	89 c3                	mov    ebx,eax
c0012856:	83 ec 0c             	sub    esp,0xc
c0012859:	6a 01                	push   0x1
c001285b:	e8 1f f3 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0012860:	83 c4 10             	add    esp,0x10
c0012863:	89 c2                	mov    edx,eax
c0012865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012869:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	6a 03                	push   0x3
c0012871:	6a 01                	push   0x1
c0012873:	52                   	push   edx
c0012874:	50                   	push   eax
c0012875:	53                   	push   ebx
c0012876:	e8 e5 fd ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287b:	83 c4 20             	add    esp,0x20
c001287e:	89 c2                	mov    edx,eax
c0012880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012884:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012887:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288f:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012897:	7f 1c                	jg     c00128b5 <VAS::VAS(bool)+0xa1>
c0012899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a4:	c1 e2 02             	shl    edx,0x2
c00128a7:	01 d0                	add    eax,edx
c00128a9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128af:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b3:	eb da                	jmp    c001288f <VAS::VAS(bool)+0x7b>
c00128b5:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128bd:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c5:	7f 7a                	jg     c0012941 <VAS::VAS(bool)+0x12d>
c00128c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128cb:	2d 00 02 00 00       	sub    eax,0x200
c00128d0:	c1 e0 0c             	shl    eax,0xc
c00128d3:	83 c8 03             	or     eax,0x3
c00128d6:	89 c2                	mov    edx,eax
c00128d8:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00128dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e9:	83 e0 10             	and    eax,0x10
c00128ec:	84 c0                	test   al,al
c00128ee:	74 07                	je     c00128f7 <VAS::VAS(bool)+0xe3>
c00128f0:	b8 00 01 00 00       	mov    eax,0x100
c00128f5:	eb 05                	jmp    c00128fc <VAS::VAS(bool)+0xe8>
c00128f7:	b8 00 00 00 00       	mov    eax,0x0
c00128fc:	09 d0                	or     eax,edx
c00128fe:	89 c1                	mov    ecx,eax
c0012900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012904:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290b:	c1 e2 02             	shl    edx,0x2
c001290e:	01 d0                	add    eax,edx
c0012910:	89 ca                	mov    edx,ecx
c0012912:	89 10                	mov    DWORD PTR [eax],edx
c0012914:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012918:	2d 40 03 00 00       	sub    eax,0x340
c001291d:	83 f8 7f             	cmp    eax,0x7f
c0012920:	77 16                	ja     c0012938 <VAS::VAS(bool)+0x124>
c0012922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012926:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292d:	c1 e2 02             	shl    edx,0x2
c0012930:	01 d0                	add    eax,edx
c0012932:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012938:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293c:	e9 7c ff ff ff       	jmp    c00128bd <VAS::VAS(bool)+0xa9>
c0012941:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0012946:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012952:	83 e0 10             	and    eax,0x10
c0012955:	84 c0                	test   al,al
c0012957:	74 07                	je     c0012960 <VAS::VAS(bool)+0x14c>
c0012959:	b8 03 41 00 00       	mov    eax,0x4103
c001295e:	eb 05                	jmp    c0012965 <VAS::VAS(bool)+0x151>
c0012960:	b8 03 40 00 00       	mov    eax,0x4003
c0012965:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012969:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296c:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012972:	89 02                	mov    DWORD PTR [edx],eax
c0012974:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0012979:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012985:	83 ec 08             	sub    esp,0x8
c0012988:	50                   	push   eax
c0012989:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298d:	e8 b2 fc ff ff       	call   c0012644 <VAS::setCPUSpecific(unsigned long)>
c0012992:	83 c4 10             	add    esp,0x10
c0012995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012999:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299c:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00129a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ad:	83 e0 10             	and    eax,0x10
c00129b0:	84 c0                	test   al,al
c00129b2:	74 07                	je     c00129bb <VAS::VAS(bool)+0x1a7>
c00129b4:	b8 00 01 00 00       	mov    eax,0x100
c00129b9:	eb 05                	jmp    c00129c0 <VAS::VAS(bool)+0x1ac>
c00129bb:	b8 00 00 00 00       	mov    eax,0x0
c00129c0:	09 c2                	or     edx,eax
c00129c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c9:	05 fc 0f 00 00       	add    eax,0xffc
c00129ce:	83 ca 03             	or     edx,0x3
c00129d1:	89 10                	mov    DWORD PTR [eax],edx
c00129d3:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00129d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129de:	83 ec 0c             	sub    esp,0xc
c00129e1:	50                   	push   eax
c00129e2:	e8 e3 1c 00 00       	call   c00146ca <Device::getName()>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	83 ec 08             	sub    esp,0x8
c00129ed:	68 ab a8 02 c0       	push   0xc002a8ab
c00129f2:	50                   	push   eax
c00129f3:	e8 c8 de fe ff       	call   c00008c0 <strcmp>
c00129f8:	83 c4 10             	add    esp,0x10
c00129fb:	85 c0                	test   eax,eax
c00129fd:	0f 94 c0             	sete   al
c0012a00:	84 c0                	test   al,al
c0012a02:	74 70                	je     c0012a74 <VAS::VAS(bool)+0x260>
c0012a04:	e8 34 b4 00 00       	call   c001de3d <disableIRQs()>
c0012a09:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0012a0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a14:	05 7c 09 00 00       	add    eax,0x97c
c0012a19:	83 ec 0c             	sub    esp,0xc
c0012a1c:	50                   	push   eax
c0012a1d:	e8 9a c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a22:	83 c4 10             	add    esp,0x10
c0012a25:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2a:	89 c3                	mov    ebx,eax
c0012a2c:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0012a31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a37:	05 7c 09 00 00       	add    eax,0x97c
c0012a3c:	83 ec 0c             	sub    esp,0xc
c0012a3f:	50                   	push   eax
c0012a40:	e8 77 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	83 ec 08             	sub    esp,0x8
c0012a4b:	50                   	push   eax
c0012a4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a50:	e8 91 f5 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012a55:	83 c4 10             	add    esp,0x10
c0012a58:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5f:	6a 11                	push   0x11
c0012a61:	53                   	push   ebx
c0012a62:	50                   	push   eax
c0012a63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a67:	e8 00 f9 ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	e8 d7 b3 00 00       	call   c001de4b <enableIRQs()>
c0012a74:	90                   	nop
c0012a75:	83 c4 28             	add    esp,0x28
c0012a78:	5b                   	pop    ebx
c0012a79:	c3                   	ret    

c0012a7a <VAS::evict(unsigned long)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 0c             	sub    esp,0xc
c0012a81:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a85:	e8 36 f2 ff ff       	call   c0011cc0 <Virt::allocateSwapfilePage()>
c0012a8a:	89 c7                	mov    edi,eax
c0012a8c:	a1 8c d4 02 c0       	mov    eax,ds:0xc002d48c
c0012a91:	85 c0                	test   eax,eax
c0012a93:	7e 3d                	jle    c0012ad2 <VAS::evict(unsigned long)+0x58>
c0012a95:	89 ee                	mov    esi,ebp
c0012a97:	31 db                	xor    ebx,ebx
c0012a99:	83 ec 0c             	sub    esp,0xc
c0012a9c:	57                   	push   edi
c0012a9d:	e8 0c f2 ff ff       	call   c0011cae <Virt::swapIDToSector(unsigned long)>
c0012aa2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa5:	01 d8                	add    eax,ebx
c0012aa7:	6a 01                	push   0x1
c0012aa9:	31 d2                	xor    edx,edx
c0012aab:	43                   	inc    ebx
c0012aac:	52                   	push   edx
c0012aad:	81 c6 00 02 00 00    	add    esi,0x200
c0012ab3:	50                   	push   eax
c0012ab4:	0f be 05 98 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d498
c0012abb:	ff 34 85 fc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1604]
c0012ac2:	e8 79 3d 00 00       	call   c0016840 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac7:	83 c4 20             	add    esp,0x20
c0012aca:	39 1d 8c d4 02 c0    	cmp    DWORD PTR ds:0xc002d48c,ebx
c0012ad0:	7f c7                	jg     c0012a99 <VAS::evict(unsigned long)+0x1f>
c0012ad2:	83 ec 08             	sub    esp,0x8
c0012ad5:	c1 e7 0b             	shl    edi,0xb
c0012ad8:	55                   	push   ebp
c0012ad9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012add:	e8 04 f5 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012ae2:	83 c4 0c             	add    esp,0xc
c0012ae5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ae7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aed:	09 d7                	or     edi,edx
c0012aef:	89 38                	mov    DWORD PTR [eax],edi
c0012af1:	a1 64 e6 02 c0       	mov    eax,ds:0xc002e664
c0012af6:	40                   	inc    eax
c0012af7:	a3 64 e6 02 c0       	mov    ds:0xc002e664,eax
c0012afc:	0f 20 da             	mov    edx,cr3
c0012aff:	0f 22 da             	mov    cr3,edx
c0012b02:	50                   	push   eax
c0012b03:	55                   	push   ebp
c0012b04:	68 b9 a8 02 c0       	push   0xc002a8b9
c0012b09:	e8 a9 04 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012b0e:	83 c4 1c             	add    esp,0x1c
c0012b11:	5b                   	pop    ebx
c0012b12:	5e                   	pop    esi
c0012b13:	5f                   	pop    edi
c0012b14:	5d                   	pop    ebp
c0012b15:	c3                   	ret    

c0012b16 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b16:	55                   	push   ebp
c0012b17:	57                   	push   edi
c0012b18:	56                   	push   esi
c0012b19:	53                   	push   ebx
c0012b1a:	83 ec 14             	sub    esp,0x14
c0012b1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b21:	68 ce a8 02 c0       	push   0xc002a8ce
c0012b26:	e8 8c 04 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012b2b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012b2f:	5b                   	pop    ebx
c0012b30:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b36:	5f                   	pop    edi
c0012b37:	56                   	push   esi
c0012b38:	68 dc c0 02 c0       	push   0xc002c0dc
c0012b3d:	e8 75 04 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012b42:	83 c4 10             	add    esp,0x10
c0012b45:	85 f6                	test   esi,esi
c0012b47:	74 42                	je     c0012b8b <VAS::tryLoadBackOffDisk(unsigned long)+0x75>
c0012b49:	83 ec 08             	sub    esp,0x8
c0012b4c:	56                   	push   esi
c0012b4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b51:	e8 90 f4 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012b56:	83 c4 10             	add    esp,0x10
c0012b59:	89 c3                	mov    ebx,eax
c0012b5b:	85 c0                	test   eax,eax
c0012b5d:	74 06                	je     c0012b65 <VAS::tryLoadBackOffDisk(unsigned long)+0x4f>
c0012b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b61:	a8 01                	test   al,0x1
c0012b63:	74 30                	je     c0012b95 <VAS::tryLoadBackOffDisk(unsigned long)+0x7f>
c0012b65:	83 ec 0c             	sub    esp,0xc
c0012b68:	68 4a a9 02 c0       	push   0xc002a94a
c0012b6d:	e8 45 04 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012b72:	c7 04 24 4e a9 02 c0 	mov    DWORD PTR [esp],0xc002a94e
c0012b79:	e8 39 04 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012b7e:	83 c4 10             	add    esp,0x10
c0012b81:	31 c0                	xor    eax,eax
c0012b83:	83 c4 0c             	add    esp,0xc
c0012b86:	5b                   	pop    ebx
c0012b87:	5e                   	pop    esi
c0012b88:	5f                   	pop    edi
c0012b89:	5d                   	pop    ebp
c0012b8a:	c3                   	ret    
c0012b8b:	83 c4 0c             	add    esp,0xc
c0012b8e:	31 c0                	xor    eax,eax
c0012b90:	5b                   	pop    ebx
c0012b91:	5e                   	pop    esi
c0012b92:	5f                   	pop    edi
c0012b93:	5d                   	pop    ebp
c0012b94:	c3                   	ret    
c0012b95:	83 ec 08             	sub    esp,0x8
c0012b98:	50                   	push   eax
c0012b99:	68 e5 a8 02 c0       	push   0xc002a8e5
c0012b9e:	e8 14 04 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012ba3:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012ba5:	e8 3b d3 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012baa:	c1 ed 0b             	shr    ebp,0xb
c0012bad:	89 c7                	mov    edi,eax
c0012baf:	58                   	pop    eax
c0012bb0:	5a                   	pop    edx
c0012bb1:	57                   	push   edi
c0012bb2:	68 f4 a8 02 c0       	push   0xc002a8f4
c0012bb7:	e8 fb 03 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012bbc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bbe:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bc4:	09 fa                	or     edx,edi
c0012bc6:	81 ca 01 08 00 00    	or     edx,0x801
c0012bcc:	89 13                	mov    DWORD PTR [ebx],edx
c0012bce:	c7 04 24 11 a9 02 c0 	mov    DWORD PTR [esp],0xc002a911
c0012bd5:	e8 dd 03 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012bda:	0f 20 d8             	mov    eax,cr3
c0012bdd:	0f 22 d8             	mov    cr3,eax
c0012be0:	8b 0d 8c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d48c
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	85 c9                	test   ecx,ecx
c0012beb:	7e 56                	jle    c0012c43 <VAS::tryLoadBackOffDisk(unsigned long)+0x12d>
c0012bed:	89 f7                	mov    edi,esi
c0012bef:	31 db                	xor    ebx,ebx
c0012bf1:	83 ec 0c             	sub    esp,0xc
c0012bf4:	55                   	push   ebp
c0012bf5:	e8 b4 f0 ff ff       	call   c0011cae <Virt::swapIDToSector(unsigned long)>
c0012bfa:	83 c4 0c             	add    esp,0xc
c0012bfd:	01 d8                	add    eax,ebx
c0012bff:	50                   	push   eax
c0012c00:	57                   	push   edi
c0012c01:	68 78 a7 02 c0       	push   0xc002a778
c0012c06:	e8 ac 03 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012c0b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c0e:	e8 9b f0 ff ff       	call   c0011cae <Virt::swapIDToSector(unsigned long)>
c0012c13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c16:	01 d8                	add    eax,ebx
c0012c18:	6a 01                	push   0x1
c0012c1a:	31 d2                	xor    edx,edx
c0012c1c:	43                   	inc    ebx
c0012c1d:	52                   	push   edx
c0012c1e:	81 c7 00 02 00 00    	add    edi,0x200
c0012c24:	50                   	push   eax
c0012c25:	0f be 05 98 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d498
c0012c2c:	ff 34 85 fc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1604]
c0012c33:	e8 9c 3b 00 00       	call   c00167d4 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c38:	83 c4 20             	add    esp,0x20
c0012c3b:	39 1d 8c d4 02 c0    	cmp    DWORD PTR ds:0xc002d48c,ebx
c0012c41:	7f ae                	jg     c0012bf1 <VAS::tryLoadBackOffDisk(unsigned long)+0xdb>
c0012c43:	83 ec 0c             	sub    esp,0xc
c0012c46:	68 15 a9 02 c0       	push   0xc002a915
c0012c4b:	e8 67 03 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012c50:	83 c4 0c             	add    esp,0xc
c0012c53:	a1 64 e6 02 c0       	mov    eax,ds:0xc002e664
c0012c58:	48                   	dec    eax
c0012c59:	50                   	push   eax
c0012c5a:	a3 64 e6 02 c0       	mov    ds:0xc002e664,eax
c0012c5f:	56                   	push   esi
c0012c60:	68 19 a9 02 c0       	push   0xc002a919
c0012c65:	e8 4d 03 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012c6a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c6d:	e8 1e f0 ff ff       	call   c0011c90 <Virt::freeSwapfilePage(unsigned long)>
c0012c72:	c7 04 24 2e a9 02 c0 	mov    DWORD PTR [esp],0xc002a92e
c0012c79:	e8 39 03 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012c7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c82:	83 c4 10             	add    esp,0x10
c0012c85:	25 ff 0f 00 00       	and    eax,0xfff
c0012c8a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012c8f:	77 1a                	ja     c0012cab <VAS::tryLoadBackOffDisk(unsigned long)+0x195>
c0012c91:	83 ec 0c             	sub    esp,0xc
c0012c94:	68 46 a9 02 c0       	push   0xc002a946
c0012c99:	e8 19 03 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012c9e:	83 c4 10             	add    esp,0x10
c0012ca1:	b0 01                	mov    al,0x1
c0012ca3:	83 c4 0c             	add    esp,0xc
c0012ca6:	5b                   	pop    ebx
c0012ca7:	5e                   	pop    esi
c0012ca8:	5f                   	pop    edi
c0012ca9:	5d                   	pop    ebp
c0012caa:	c3                   	ret    
c0012cab:	83 ec 0c             	sub    esp,0xc
c0012cae:	68 32 a9 02 c0       	push   0xc002a932
c0012cb3:	e8 ad 79 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0012cb8:	83 c4 10             	add    esp,0x10
c0012cbb:	eb d4                	jmp    c0012c91 <VAS::tryLoadBackOffDisk(unsigned long)+0x17b>
c0012cbd:	90                   	nop

c0012cbe <VAS::scanForEviction()>:
c0012cbe:	55                   	push   ebp
c0012cbf:	57                   	push   edi
c0012cc0:	31 ff                	xor    edi,edi
c0012cc2:	56                   	push   esi
c0012cc3:	53                   	push   ebx
c0012cc4:	83 ec 1c             	sub    esp,0x1c
c0012cc7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012ccb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0012cd0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0012cd3:	89 f3                	mov    ebx,esi
c0012cd5:	39 de                	cmp    esi,ebx
c0012cd7:	74 74                	je     c0012d4d <VAS::scanForEviction()+0x8f>
c0012cd9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012cdf:	75 0e                	jne    c0012cef <VAS::scanForEviction()+0x31>
c0012ce1:	89 d9                	mov    ecx,ebx
c0012ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ce6:	c1 e9 16             	shr    ecx,0x16
c0012ce9:	f6 04 88 01          	test   BYTE PTR [eax+ecx*4],0x1
c0012ced:	74 51                	je     c0012d40 <VAS::scanForEviction()+0x82>
c0012cef:	53                   	push   ebx
c0012cf0:	55                   	push   ebp
c0012cf1:	e8 f0 f2 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012cf6:	5a                   	pop    edx
c0012cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cf9:	59                   	pop    ecx
c0012cfa:	89 c1                	mov    ecx,eax
c0012cfc:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012d02:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012d08:	74 57                	je     c0012d61 <VAS::scanForEviction()+0xa3>
c0012d0a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012d10:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012d16:	76 41                	jbe    c0012d59 <VAS::scanForEviction()+0x9b>
c0012d18:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012d1f:	85 f6                	test   esi,esi
c0012d21:	74 6b                	je     c0012d8e <VAS::scanForEviction()+0xd0>
c0012d23:	31 db                	xor    ebx,ebx
c0012d25:	bf 01 00 00 00       	mov    edi,0x1
c0012d2a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012d30:	75 bd                	jne    c0012cef <VAS::scanForEviction()+0x31>
c0012d32:	89 d9                	mov    ecx,ebx
c0012d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d37:	c1 e9 16             	shr    ecx,0x16
c0012d3a:	f6 04 88 01          	test   BYTE PTR [eax+ecx*4],0x1
c0012d3e:	75 af                	jne    c0012cef <VAS::scanForEviction()+0x31>
c0012d40:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012d46:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
c0012d49:	39 de                	cmp    esi,ebx
c0012d4b:	75 8c                	jne    c0012cd9 <VAS::scanForEviction()+0x1b>
c0012d4d:	89 f8                	mov    eax,edi
c0012d4f:	84 c0                	test   al,al
c0012d51:	74 86                	je     c0012cd9 <VAS::scanForEviction()+0x1b>
c0012d53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012d57:	eb 80                	jmp    c0012cd9 <VAS::scanForEviction()+0x1b>
c0012d59:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
c0012d5c:	e9 74 ff ff ff       	jmp    c0012cd5 <VAS::scanForEviction()+0x17>
c0012d61:	a8 01                	test   al,0x1
c0012d63:	74 a5                	je     c0012d0a <VAS::scanForEviction()+0x4c>
c0012d65:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d6a:	75 04                	jne    c0012d70 <VAS::scanForEviction()+0xb2>
c0012d6c:	a8 40                	test   al,0x40
c0012d6e:	75 9a                	jne    c0012d0a <VAS::scanForEviction()+0x4c>
c0012d70:	83 ec 08             	sub    esp,0x8
c0012d73:	53                   	push   ebx
c0012d74:	55                   	push   ebp
c0012d75:	e8 00 fd ff ff       	call   c0012a7a <VAS::evict(unsigned long)>
c0012d7a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012d7d:	8d 88 00 10 00 00    	lea    ecx,[eax+0x1000]
c0012d83:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c0012d86:	83 c4 2c             	add    esp,0x2c
c0012d89:	5b                   	pop    ebx
c0012d8a:	5e                   	pop    esi
c0012d8b:	5f                   	pop    edi
c0012d8c:	5d                   	pop    ebp
c0012d8d:	c3                   	ret    
c0012d8e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0012d93:	eb 8e                	jmp    c0012d23 <VAS::scanForEviction()+0x65>

c0012d95 <mapVASFirstTime>:
c0012d95:	55                   	push   ebp
c0012d96:	57                   	push   edi
c0012d97:	56                   	push   esi
c0012d98:	53                   	push   ebx
c0012d99:	83 ec 0c             	sub    esp,0xc
c0012d9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012da1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012da4:	4a                   	dec    edx
c0012da5:	0f 84 8e 00 00 00    	je     c0012e39 <mapVASFirstTime+0xa4>
c0012dab:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012dae:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012db1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012db6:	c1 e5 15             	shl    ebp,0x15
c0012db9:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012dbe:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012dc4:	29 eb                	sub    ebx,ebp
c0012dc6:	29 ee                	sub    esi,ebp
c0012dc8:	e8 18 d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012dcd:	83 ec 0c             	sub    esp,0xc
c0012dd0:	68 03 04 00 00       	push   0x403
c0012dd5:	6a 01                	push   0x1
c0012dd7:	53                   	push   ebx
c0012dd8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012dde:	50                   	push   eax
c0012ddf:	57                   	push   edi
c0012de0:	e8 7b f8 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012de5:	83 c4 20             	add    esp,0x20
c0012de8:	39 f3                	cmp    ebx,esi
c0012dea:	75 dc                	jne    c0012dc8 <mapVASFirstTime+0x33>
c0012dec:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012df1:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012df6:	29 ee                	sub    esi,ebp
c0012df8:	29 e8                	sub    eax,ebp
c0012dfa:	89 c5                	mov    ebp,eax
c0012dfc:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e00:	19 db                	sbb    ebx,ebx
c0012e02:	e8 de d0 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012e07:	83 e3 04             	and    ebx,0x4
c0012e0a:	83 ec 0c             	sub    esp,0xc
c0012e0d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e13:	53                   	push   ebx
c0012e14:	6a 01                	push   0x1
c0012e16:	56                   	push   esi
c0012e17:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e1d:	50                   	push   eax
c0012e1e:	57                   	push   edi
c0012e1f:	e8 3c f8 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e24:	83 c4 20             	add    esp,0x20
c0012e27:	39 f5                	cmp    ebp,esi
c0012e29:	75 d1                	jne    c0012dfc <mapVASFirstTime+0x67>
c0012e2b:	0f 20 d8             	mov    eax,cr3
c0012e2e:	0f 22 d8             	mov    cr3,eax
c0012e31:	83 c4 0c             	add    esp,0xc
c0012e34:	5b                   	pop    ebx
c0012e35:	5e                   	pop    esi
c0012e36:	5f                   	pop    edi
c0012e37:	5d                   	pop    ebp
c0012e38:	c3                   	ret    
c0012e39:	83 ec 0c             	sub    esp,0xc
c0012e3c:	68 52 a9 02 c0       	push   0xc002a952
c0012e41:	e8 71 01 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012e46:	83 c4 10             	add    esp,0x10
c0012e49:	83 c4 0c             	add    esp,0xc
c0012e4c:	5b                   	pop    ebx
c0012e4d:	5e                   	pop    esi
c0012e4e:	5f                   	pop    edi
c0012e4f:	5d                   	pop    ebp
c0012e50:	c3                   	ret    

c0012e51 <__cxa_atexit>:
c0012e51:	31 c0                	xor    eax,eax
c0012e53:	c3                   	ret    

c0012e54 <__cxa_finalize>:
c0012e54:	c3                   	ret    

c0012e55 <__stack_chk_fail>:
c0012e55:	55                   	push   ebp
c0012e56:	89 e5                	mov    ebp,esp
c0012e58:	83 ec 14             	sub    esp,0x14
c0012e5b:	68 6b a9 02 c0       	push   0xc002a96b
c0012e60:	e8 52 01 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012e65:	58                   	pop    eax
c0012e66:	5a                   	pop    edx
c0012e67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e6a:	68 bb a9 02 c0       	push   0xc002a9bb
c0012e6f:	e8 43 01 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012e74:	59                   	pop    ecx
c0012e75:	58                   	pop    eax
c0012e76:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e7c:	68 bb a9 02 c0       	push   0xc002a9bb
c0012e81:	e8 31 01 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012e86:	5a                   	pop    edx
c0012e87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e8a:	59                   	pop    ecx
c0012e8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e8d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e90:	68 bb a9 02 c0       	push   0xc002a9bb
c0012e95:	e8 1d 01 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012e9a:	5a                   	pop    edx
c0012e9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e9e:	59                   	pop    ecx
c0012e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ea3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ea6:	68 bb a9 02 c0       	push   0xc002a9bb
c0012eab:	e8 07 01 00 00       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0012eb0:	c7 04 24 c3 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c3
c0012eb7:	e8 a9 77 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0012ebc:	83 c4 10             	add    esp,0x10
c0012ebf:	c9                   	leave  
c0012ec0:	c3                   	ret    

c0012ec1 <__cxa_pure_virtual>:
c0012ec1:	83 ec 18             	sub    esp,0x18
c0012ec4:	68 db a9 02 c0       	push   0xc002a9db
c0012ec9:	e8 97 77 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0012ece:	83 c4 1c             	add    esp,0x1c
c0012ed1:	c3                   	ret    

c0012ed2 <operator new[](unsigned long)>:
c0012ed2:	e9 6c c9 ff ff       	jmp    c000f843 <malloc>

c0012ed7 <operator delete(void*, unsigned long)>:
c0012ed7:	e9 87 c9 ff ff       	jmp    c000f863 <rfree>

c0012edc <operator delete[](void*)>:
c0012edc:	e9 82 c9 ff ff       	jmp    c000f863 <rfree>

c0012ee1 <operator delete[](void*, unsigned long)>:
c0012ee1:	e9 7d c9 ff ff       	jmp    c000f863 <rfree>

c0012ee6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012ee6:	57                   	push   edi
c0012ee7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012eec:	56                   	push   esi
c0012eed:	be f0 a9 02 c0       	mov    esi,0xc002a9f0
c0012ef2:	53                   	push   ebx
c0012ef3:	83 ec 40             	sub    esp,0x40
c0012ef6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012efa:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012efe:	fc                   	cld    
c0012eff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f01:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f05:	83 f9 3e             	cmp    ecx,0x3e
c0012f08:	7e 05                	jle    c0012f0f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f0a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f0f:	89 df                	mov    edi,ebx
c0012f11:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f15:	eb 02                	jmp    c0012f19 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f17:	89 c7                	mov    edi,eax
c0012f19:	31 d2                	xor    edx,edx
c0012f1b:	46                   	inc    esi
c0012f1c:	89 f8                	mov    eax,edi
c0012f1e:	f7 f1                	div    ecx
c0012f20:	39 cf                	cmp    edi,ecx
c0012f22:	73 f3                	jae    c0012f17 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f24:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f27:	eb 02                	jmp    c0012f2b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f29:	89 c3                	mov    ebx,eax
c0012f2b:	31 d2                	xor    edx,edx
c0012f2d:	4e                   	dec    esi
c0012f2e:	89 d8                	mov    eax,ebx
c0012f30:	f7 f1                	div    ecx
c0012f32:	39 cb                	cmp    ebx,ecx
c0012f34:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f38:	88 16                	mov    BYTE PTR [esi],dl
c0012f3a:	73 ed                	jae    c0012f29 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f3c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f40:	83 c4 40             	add    esp,0x40
c0012f43:	5b                   	pop    ebx
c0012f44:	5e                   	pop    esi
c0012f45:	5f                   	pop    edi
c0012f46:	c3                   	ret    

c0012f47 <Dbg::logc(char)>:
c0012f47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f4b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f50:	ec                   	in     al,dx
c0012f51:	a8 20                	test   al,0x20
c0012f53:	74 fb                	je     c0012f50 <Dbg::logc(char)+0x9>
c0012f55:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f5a:	88 c8                	mov    al,cl
c0012f5c:	ee                   	out    dx,al
c0012f5d:	c3                   	ret    

c0012f5e <Dbg::logs(char*)>:
c0012f5e:	53                   	push   ebx
c0012f5f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f63:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f66:	84 c0                	test   al,al
c0012f68:	74 0f                	je     c0012f79 <Dbg::logs(char*)+0x1b>
c0012f6a:	50                   	push   eax
c0012f6b:	43                   	inc    ebx
c0012f6c:	e8 d6 ff ff ff       	call   c0012f47 <Dbg::logc(char)>
c0012f71:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f74:	5a                   	pop    edx
c0012f75:	84 c0                	test   al,al
c0012f77:	75 f1                	jne    c0012f6a <Dbg::logs(char*)+0xc>
c0012f79:	5b                   	pop    ebx
c0012f7a:	c3                   	ret    

c0012f7b <Dbg::logWriteInt(unsigned int)>:
c0012f7b:	83 ec 10             	sub    esp,0x10
c0012f7e:	6a 0a                	push   0xa
c0012f80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f84:	50                   	push   eax
c0012f85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f89:	e8 58 ff ff ff       	call   c0012ee6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f8e:	50                   	push   eax
c0012f8f:	e8 ca ff ff ff       	call   c0012f5e <Dbg::logs(char*)>
c0012f94:	83 c4 20             	add    esp,0x20
c0012f97:	c3                   	ret    

c0012f98 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f98:	83 ec 10             	sub    esp,0x10
c0012f9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fa3:	50                   	push   eax
c0012fa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa8:	e8 39 ff ff ff       	call   c0012ee6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fad:	50                   	push   eax
c0012fae:	e8 ab ff ff ff       	call   c0012f5e <Dbg::logs(char*)>
c0012fb3:	83 c4 20             	add    esp,0x20
c0012fb6:	c3                   	ret    

c0012fb7 <Dbg::kprintf(char const*, ...)>:
c0012fb7:	55                   	push   ebp
c0012fb8:	57                   	push   edi
c0012fb9:	56                   	push   esi
c0012fba:	53                   	push   ebx
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fc2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012fc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012fcd:	84 c0                	test   al,al
c0012fcf:	74 4a                	je     c001301b <Dbg::kprintf(char const*, ...)+0x64>
c0012fd1:	31 db                	xor    ebx,ebx
c0012fd3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012fd6:	3c 25                	cmp    al,0x25
c0012fd8:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012fdb:	0f 85 e4 00 00 00    	jne    c00130c5 <Dbg::kprintf(char const*, ...)+0x10e>
c0012fe1:	83 c3 02             	add    ebx,0x2
c0012fe4:	8a 07                	mov    al,BYTE PTR [edi]
c0012fe6:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012fe9:	83 e8 25             	sub    eax,0x25
c0012fec:	3c 53                	cmp    al,0x53
c0012fee:	0f 87 ba 00 00 00    	ja     c00130ae <Dbg::kprintf(char const*, ...)+0xf7>
c0012ff4:	0f b6 c0             	movzx  eax,al
c0012ff7:	ff 24 85 30 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd55d0]
c0012ffe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013002:	89 c8                	mov    eax,ecx
c0013004:	83 c1 04             	add    ecx,0x4
c0013007:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001300b:	ff 30                	push   DWORD PTR [eax]
c001300d:	e8 4c ff ff ff       	call   c0012f5e <Dbg::logs(char*)>
c0013012:	58                   	pop    eax
c0013013:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0013017:	84 c0                	test   al,al
c0013019:	75 b8                	jne    c0012fd3 <Dbg::kprintf(char const*, ...)+0x1c>
c001301b:	83 c4 0c             	add    esp,0xc
c001301e:	5b                   	pop    ebx
c001301f:	5e                   	pop    esi
c0013020:	5f                   	pop    edi
c0013021:	5d                   	pop    ebp
c0013022:	c3                   	ret    
c0013023:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013027:	89 d0                	mov    eax,edx
c0013029:	83 c2 04             	add    edx,0x4
c001302c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013030:	ff 30                	push   DWORD PTR [eax]
c0013032:	e8 44 ff ff ff       	call   c0012f7b <Dbg::logWriteInt(unsigned int)>
c0013037:	58                   	pop    eax
c0013038:	eb d9                	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c001303a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001303e:	89 d0                	mov    eax,edx
c0013040:	83 c2 04             	add    edx,0x4
c0013043:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013046:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001304a:	50                   	push   eax
c001304b:	e8 f7 fe ff ff       	call   c0012f47 <Dbg::logc(char)>
c0013050:	58                   	pop    eax
c0013051:	eb c0                	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c0013053:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013057:	89 c8                	mov    eax,ecx
c0013059:	83 c1 04             	add    ecx,0x4
c001305c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013060:	ff 30                	push   DWORD PTR [eax]
c0013062:	e8 14 ff ff ff       	call   c0012f7b <Dbg::logWriteInt(unsigned int)>
c0013067:	5f                   	pop    edi
c0013068:	eb a9                	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c001306a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001306e:	89 c8                	mov    eax,ecx
c0013070:	83 c1 04             	add    ecx,0x4
c0013073:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013077:	6a 10                	push   0x10
c0013079:	ff 30                	push   DWORD PTR [eax]
c001307b:	e8 18 ff ff ff       	call   c0012f98 <Dbg::logWriteIntBase(unsigned int, int)>
c0013080:	59                   	pop    ecx
c0013081:	5f                   	pop    edi
c0013082:	eb 8f                	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c0013084:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013088:	89 d0                	mov    eax,edx
c001308a:	83 c2 08             	add    edx,0x8
c001308d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013091:	6a 10                	push   0x10
c0013093:	ff 30                	push   DWORD PTR [eax]
c0013095:	e8 fe fe ff ff       	call   c0012f98 <Dbg::logWriteIntBase(unsigned int, int)>
c001309a:	58                   	pop    eax
c001309b:	5a                   	pop    edx
c001309c:	e9 72 ff ff ff       	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c00130a1:	6a 25                	push   0x25
c00130a3:	e8 9f fe ff ff       	call   c0012f47 <Dbg::logc(char)>
c00130a8:	58                   	pop    eax
c00130a9:	e9 65 ff ff ff       	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c00130ae:	6a 25                	push   0x25
c00130b0:	e8 92 fe ff ff       	call   c0012f47 <Dbg::logc(char)>
c00130b5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00130b8:	50                   	push   eax
c00130b9:	e8 89 fe ff ff       	call   c0012f47 <Dbg::logc(char)>
c00130be:	5a                   	pop    edx
c00130bf:	59                   	pop    ecx
c00130c0:	e9 4e ff ff ff       	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c00130c5:	50                   	push   eax
c00130c6:	89 eb                	mov    ebx,ebp
c00130c8:	e8 7a fe ff ff       	call   c0012f47 <Dbg::logc(char)>
c00130cd:	89 fd                	mov    ebp,edi
c00130cf:	58                   	pop    eax
c00130d0:	e9 3e ff ff ff       	jmp    c0013013 <Dbg::kprintf(char const*, ...)+0x5c>
c00130d5:	90                   	nop

c00130d6 <File::read(unsigned long long, void*, int*)>:
c00130d6:	53                   	push   ebx
c00130d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130e6:	3c 19                	cmp    al,0x19
c00130e8:	77 35                	ja     c001311f <File::read(unsigned long long, void*, int*)+0x49>
c00130ea:	8b 04 85 00 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1500]
c00130f1:	85 c0                	test   eax,eax
c00130f3:	74 2a                	je     c001311f <File::read(unsigned long long, void*, int*)+0x49>
c00130f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130fb:	85 c0                	test   eax,eax
c00130fd:	74 20                	je     c001311f <File::read(unsigned long long, void*, int*)+0x49>
c00130ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013103:	74 21                	je     c0013126 <File::read(unsigned long long, void*, int*)+0x50>
c0013105:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013107:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001310b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013119:	5b                   	pop    ebx
c001311a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001311d:	ff e0                	jmp    eax
c001311f:	b8 0b 00 00 00       	mov    eax,0xb
c0013124:	eb 05                	jmp    c001312b <File::read(unsigned long long, void*, int*)+0x55>
c0013126:	b8 05 00 00 00       	mov    eax,0x5
c001312b:	5b                   	pop    ebx
c001312c:	c3                   	ret    
c001312d:	90                   	nop

c001312e <File::write(unsigned long long, void*, int*)>:
c001312e:	53                   	push   ebx
c001312f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013133:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013137:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001313e:	3c 19                	cmp    al,0x19
c0013140:	77 35                	ja     c0013177 <File::write(unsigned long long, void*, int*)+0x49>
c0013142:	8b 04 85 00 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1500]
c0013149:	85 c0                	test   eax,eax
c001314b:	74 2a                	je     c0013177 <File::write(unsigned long long, void*, int*)+0x49>
c001314d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013153:	85 c0                	test   eax,eax
c0013155:	74 20                	je     c0013177 <File::write(unsigned long long, void*, int*)+0x49>
c0013157:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001315b:	74 21                	je     c001317e <File::write(unsigned long long, void*, int*)+0x50>
c001315d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001315f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013163:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013169:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001316d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013171:	5b                   	pop    ebx
c0013172:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013175:	ff e0                	jmp    eax
c0013177:	b8 0b 00 00 00       	mov    eax,0xb
c001317c:	eb 05                	jmp    c0013183 <File::write(unsigned long long, void*, int*)+0x55>
c001317e:	b8 05 00 00 00       	mov    eax,0x5
c0013183:	5b                   	pop    ebx
c0013184:	c3                   	ret    
c0013185:	90                   	nop

c0013186 <Directory::read(unsigned long long, void*, int*)>:
c0013186:	53                   	push   ebx
c0013187:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001318b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001318f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013196:	3c 19                	cmp    al,0x19
c0013198:	77 35                	ja     c00131cf <Directory::read(unsigned long long, void*, int*)+0x49>
c001319a:	8b 04 85 00 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1500]
c00131a1:	85 c0                	test   eax,eax
c00131a3:	74 2a                	je     c00131cf <Directory::read(unsigned long long, void*, int*)+0x49>
c00131a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131ab:	85 c0                	test   eax,eax
c00131ad:	74 20                	je     c00131cf <Directory::read(unsigned long long, void*, int*)+0x49>
c00131af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131b3:	74 21                	je     c00131d6 <Directory::read(unsigned long long, void*, int*)+0x50>
c00131b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131bb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131c9:	5b                   	pop    ebx
c00131ca:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00131cd:	ff e0                	jmp    eax
c00131cf:	b8 0b 00 00 00       	mov    eax,0xb
c00131d4:	eb 05                	jmp    c00131db <Directory::read(unsigned long long, void*, int*)+0x55>
c00131d6:	b8 05 00 00 00       	mov    eax,0x5
c00131db:	5b                   	pop    ebx
c00131dc:	c3                   	ret    
c00131dd:	90                   	nop

c00131de <Directory::write(unsigned long long, void*, int*)>:
c00131de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131e2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00131e9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ee:	80 fa 19             	cmp    dl,0x19
c00131f1:	77 18                	ja     c001320b <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131f3:	8b 14 95 00 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1500]
c00131fa:	85 d2                	test   edx,edx
c00131fc:	74 0d                	je     c001320b <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131fe:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013205:	19 c0                	sbb    eax,eax
c0013207:	83 e0 0a             	and    eax,0xa
c001320a:	40                   	inc    eax
c001320b:	c3                   	ret    

c001320c <File::isAtty()>:
c001320c:	31 c0                	xor    eax,eax
c001320e:	c3                   	ret    
c001320f:	90                   	nop

c0013210 <Directory::isAtty()>:
c0013210:	31 c0                	xor    eax,eax
c0013212:	c3                   	ret    
c0013213:	90                   	nop

c0013214 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013214:	b8 0a 00 00 00       	mov    eax,0xa
c0013219:	c3                   	ret    

c001321a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001321a:	b8 0a 00 00 00       	mov    eax,0xa
c001321f:	c3                   	ret    

c0013220 <File::~File()>:
c0013220:	83 ec 0c             	sub    esp,0xc
c0013223:	ba ec ab 02 c0       	mov    edx,0xc002abec
c0013228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001322c:	89 10                	mov    DWORD PTR [eax],edx
c001322e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013232:	83 ec 0c             	sub    esp,0xc
c0013235:	50                   	push   eax
c0013236:	e8 e3 e6 ff ff       	call   c001191e <UnixFile::~UnixFile()>
c001323b:	83 c4 10             	add    esp,0x10
c001323e:	90                   	nop
c001323f:	83 c4 0c             	add    esp,0xc
c0013242:	c3                   	ret    
c0013243:	90                   	nop

c0013244 <File::~File()>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	83 ec 0c             	sub    esp,0xc
c001324a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001324e:	e8 cd ff ff ff       	call   c0013220 <File::~File()>
c0013253:	83 c4 10             	add    esp,0x10
c0013256:	83 ec 08             	sub    esp,0x8
c0013259:	68 14 01 00 00       	push   0x114
c001325e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013262:	e8 70 fc ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	83 c4 0c             	add    esp,0xc
c001326d:	c3                   	ret    

c001326e <Directory::~Directory()>:
c001326e:	83 ec 0c             	sub    esp,0xc
c0013271:	ba 08 ac 02 c0       	mov    edx,0xc002ac08
c0013276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001327a:	89 10                	mov    DWORD PTR [eax],edx
c001327c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013280:	83 ec 0c             	sub    esp,0xc
c0013283:	50                   	push   eax
c0013284:	e8 95 e6 ff ff       	call   c001191e <UnixFile::~UnixFile()>
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	90                   	nop
c001328d:	83 c4 0c             	add    esp,0xc
c0013290:	c3                   	ret    
c0013291:	90                   	nop

c0013292 <Directory::~Directory()>:
c0013292:	83 ec 0c             	sub    esp,0xc
c0013295:	83 ec 0c             	sub    esp,0xc
c0013298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329c:	e8 cd ff ff ff       	call   c001326e <Directory::~Directory()>
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	83 ec 08             	sub    esp,0x8
c00132a7:	68 14 01 00 00       	push   0x114
c00132ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b0:	e8 22 fc ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	83 c4 0c             	add    esp,0xc
c00132bb:	c3                   	ret    

c00132bc <Filesystem::Filesystem()>:
c00132bc:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c00132c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132c5:	89 10                	mov    DWORD PTR [eax],edx
c00132c7:	8b 15 70 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e670
c00132cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00132d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132d8:	a3 70 e6 02 c0       	mov    ds:0xc002e670,eax
c00132dd:	90                   	nop
c00132de:	c3                   	ret    
c00132df:	90                   	nop

c00132e0 <Filesystem::~Filesystem()>:
c00132e0:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c00132e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132e9:	89 10                	mov    DWORD PTR [eax],edx
c00132eb:	90                   	nop
c00132ec:	c3                   	ret    
c00132ed:	90                   	nop

c00132ee <Filesystem::~Filesystem()>:
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132f5:	e8 e6 ff ff ff       	call   c00132e0 <Filesystem::~Filesystem()>
c00132fa:	83 c4 04             	add    esp,0x4
c00132fd:	83 ec 08             	sub    esp,0x8
c0013300:	6a 08                	push   0x8
c0013302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013306:	e8 cc fb ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	83 c4 0c             	add    esp,0xc
c0013311:	c3                   	ret    

c0013312 <Fs::getcwd(Process*, char*, int)>:
c0013312:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013316:	31 c0                	xor    eax,eax
c0013318:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001331b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001331f:	7d 15                	jge    c0013336 <Fs::getcwd(Process*, char*, int)+0x24>
c0013321:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013325:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001332c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001332f:	84 c9                	test   cl,cl
c0013331:	74 06                	je     c0013339 <Fs::getcwd(Process*, char*, int)+0x27>
c0013333:	40                   	inc    eax
c0013334:	eb e2                	jmp    c0013318 <Fs::getcwd(Process*, char*, int)+0x6>
c0013336:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013339:	31 c0                	xor    eax,eax
c001333b:	c3                   	ret    

c001333c <Fs::initVFS()>:
c001333c:	83 ec 18             	sub    esp,0x18
c001333f:	6a 08                	push   0x8
c0013341:	e8 fd c4 ff ff       	call   c000f843 <malloc>
c0013346:	89 04 24             	mov    DWORD PTR [esp],eax
c0013349:	e8 80 dc 00 00       	call   c0020fce <FAT::FAT()>
c001334e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013355:	e8 e9 c4 ff ff       	call   c000f843 <malloc>
c001335a:	89 04 24             	mov    DWORD PTR [esp],eax
c001335d:	e8 c4 ee 00 00       	call   c0022226 <ISO9660::ISO9660()>
c0013362:	83 c4 1c             	add    esp,0x1c
c0013365:	c3                   	ret    

c0013366 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013366:	55                   	push   ebp
c0013367:	57                   	push   edi
c0013368:	56                   	push   esi
c0013369:	53                   	push   ebx
c001336a:	81 ec 10 04 00 00    	sub    esp,0x410
c0013370:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013377:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001337e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013385:	68 00 04 00 00       	push   0x400
c001338a:	6a 00                	push   0x0
c001338c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013390:	56                   	push   esi
c0013391:	e8 e2 d3 fe ff       	call   c0000778 <memset>
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001339d:	75 0b                	jne    c00133aa <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001339f:	50                   	push   eax
c00133a0:	50                   	push   eax
c00133a1:	57                   	push   edi
c00133a2:	56                   	push   esi
c00133a3:	e8 8c d4 fe ff       	call   c0000834 <strcpy>
c00133a8:	eb 41                	jmp    c00133eb <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133aa:	8a 07                	mov    al,BYTE PTR [edi]
c00133ac:	3c 5c                	cmp    al,0x5c
c00133ae:	74 04                	je     c00133b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00133b0:	3c 2f                	cmp    al,0x2f
c00133b2:	75 18                	jne    c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00133b4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00133b7:	3c 60                	cmp    al,0x60
c00133b9:	7e 03                	jle    c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00133bb:	83 e8 20             	sub    eax,0x20
c00133be:	88 04 24             	mov    BYTE PTR [esp],al
c00133c1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133c8:	50                   	push   eax
c00133c9:	50                   	push   eax
c00133ca:	eb 18                	jmp    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00133cc:	50                   	push   eax
c00133cd:	50                   	push   eax
c00133ce:	55                   	push   ebp
c00133cf:	56                   	push   esi
c00133d0:	e8 5f d4 fe ff       	call   c0000834 <strcpy>
c00133d5:	5a                   	pop    edx
c00133d6:	59                   	pop    ecx
c00133d7:	68 d4 c2 02 c0       	push   0xc002c2d4
c00133dc:	56                   	push   esi
c00133dd:	e8 92 d5 fe ff       	call   c0000974 <strcat>
c00133e2:	5d                   	pop    ebp
c00133e3:	58                   	pop    eax
c00133e4:	57                   	push   edi
c00133e5:	56                   	push   esi
c00133e6:	e8 89 d5 fe ff       	call   c0000974 <strcat>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	8a 04 24             	mov    al,BYTE PTR [esp]
c00133f1:	3c 60                	cmp    al,0x60
c00133f3:	7e 03                	jle    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00133f5:	83 e8 20             	sub    eax,0x20
c00133f8:	88 04 24             	mov    BYTE PTR [esp],al
c00133fb:	88 03                	mov    BYTE PTR [ebx],al
c00133fd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013404:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001340a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001340e:	bf 03 00 00 00       	mov    edi,0x3
c0013413:	b8 03 00 00 00       	mov    eax,0x3
c0013418:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001341b:	84 d2                	test   dl,dl
c001341d:	0f 84 91 00 00 00    	je     c00134b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013423:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013426:	80 fa 5c             	cmp    dl,0x5c
c0013429:	74 05                	je     c0013430 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001342b:	80 fa 2f             	cmp    dl,0x2f
c001342e:	75 12                	jne    c0013442 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013430:	89 c5                	mov    ebp,eax
c0013432:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013437:	74 09                	je     c0013442 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013439:	40                   	inc    eax
c001343a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001343e:	89 cf                	mov    edi,ecx
c0013440:	eb d6                	jmp    c0013418 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013442:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013447:	75 5b                	jne    c00134a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013449:	80 fa 2e             	cmp    dl,0x2e
c001344c:	75 56                	jne    c00134a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001344e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013452:	74 19                	je     c001346d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013454:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013459:	74 53                	je     c00134ae <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001345b:	89 f9                	mov    ecx,edi
c001345d:	41                   	inc    ecx
c001345e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013461:	80 fa 2f             	cmp    dl,0x2f
c0013464:	74 f7                	je     c001345d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013466:	80 fa 5c             	cmp    dl,0x5c
c0013469:	74 f2                	je     c001345d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001346b:	eb d1                	jmp    c001343e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001346d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013472:	74 3a                	je     c00134ae <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013474:	83 f8 03             	cmp    eax,0x3
c0013477:	74 c5                	je     c001343e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013479:	41                   	inc    ecx
c001347a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001347d:	80 fa 2f             	cmp    dl,0x2f
c0013480:	74 f7                	je     c0013479 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013482:	80 fa 5c             	cmp    dl,0x5c
c0013485:	74 f2                	je     c0013479 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013487:	48                   	dec    eax
c0013488:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001348c:	75 06                	jne    c0013494 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001348e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013492:	eb f3                	jmp    c0013487 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013494:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013498:	74 07                	je     c00134a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001349a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001349e:	48                   	dec    eax
c001349f:	eb f3                	jmp    c0013494 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134a1:	40                   	inc    eax
c00134a2:	eb 9a                	jmp    c001343e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134a4:	80 fa 2f             	cmp    dl,0x2f
c00134a7:	74 95                	je     c001343e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134a9:	80 fa 5c             	cmp    dl,0x5c
c00134ac:	74 90                	je     c001343e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ae:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00134b1:	40                   	inc    eax
c00134b2:	eb 8a                	jmp    c001343e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134b4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134b8:	83 ec 0c             	sub    esp,0xc
c00134bb:	53                   	push   ebx
c00134bc:	e8 d3 d2 fe ff       	call   c0000794 <strlen>
c00134c1:	83 c4 10             	add    esp,0x10
c00134c4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00134c9:	75 26                	jne    c00134f1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00134cb:	83 ec 0c             	sub    esp,0xc
c00134ce:	53                   	push   ebx
c00134cf:	e8 c0 d2 fe ff       	call   c0000794 <strlen>
c00134d4:	83 c4 10             	add    esp,0x10
c00134d7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00134dc:	74 26                	je     c0013504 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	53                   	push   ebx
c00134e2:	e8 ad d2 fe ff       	call   c0000794 <strlen>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00134ef:	eb c7                	jmp    c00134b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00134f1:	83 ec 0c             	sub    esp,0xc
c00134f4:	53                   	push   ebx
c00134f5:	e8 9a d2 fe ff       	call   c0000794 <strlen>
c00134fa:	83 c4 10             	add    esp,0x10
c00134fd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013502:	74 c7                	je     c00134cb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013504:	81 c4 0c 04 00 00    	add    esp,0x40c
c001350a:	5b                   	pop    ebx
c001350b:	5e                   	pop    esi
c001350c:	5f                   	pop    edi
c001350d:	5d                   	pop    ebp
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <File::File(char const*, Process*)>:
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013517:	83 ec 08             	sub    esp,0x8
c001351a:	6a 00                	push   0x0
c001351c:	50                   	push   eax
c001351d:	e8 1a e2 ff ff       	call   c001173c <UnixFile::UnixFile(int)>
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	ba ec ab 02 c0       	mov    edx,0xc002abec
c001352a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352e:	89 10                	mov    DWORD PTR [eax],edx
c0013530:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013534:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001353a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353e:	83 c0 0d             	add    eax,0xd
c0013541:	83 ec 04             	sub    esp,0x4
c0013544:	52                   	push   edx
c0013545:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013549:	50                   	push   eax
c001354a:	e8 17 fe ff ff       	call   c0013366 <Fs::standardiseFiles(char*, char const*, char const*)>
c001354f:	83 c4 10             	add    esp,0x10
c0013552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013556:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013559:	8d 50 bf             	lea    edx,[eax-0x41]
c001355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013560:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001356e:	90                   	nop
c001356f:	83 c4 0c             	add    esp,0xc
c0013572:	c3                   	ret    
c0013573:	90                   	nop

c0013574 <File::open(FileOpenMode)>:
c0013574:	53                   	push   ebx
c0013575:	b8 0b 00 00 00       	mov    eax,0xb
c001357a:	83 ec 08             	sub    esp,0x8
c001357d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013581:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013588:	80 fa 19             	cmp    dl,0x19
c001358b:	77 40                	ja     c00135cd <File::open(FileOpenMode)+0x59>
c001358d:	8b 14 95 00 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1500]
c0013594:	85 d2                	test   edx,edx
c0013596:	74 35                	je     c00135cd <File::open(FileOpenMode)+0x59>
c0013598:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001359e:	85 d2                	test   edx,edx
c00135a0:	74 2b                	je     c00135cd <File::open(FileOpenMode)+0x59>
c00135a2:	b8 06 00 00 00       	mov    eax,0x6
c00135a7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135ab:	75 20                	jne    c00135cd <File::open(FileOpenMode)+0x59>
c00135ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00135af:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135b9:	51                   	push   ecx
c00135ba:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135bd:	51                   	push   ecx
c00135be:	52                   	push   edx
c00135bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	85 c0                	test   eax,eax
c00135c7:	75 04                	jne    c00135cd <File::open(FileOpenMode)+0x59>
c00135c9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135cd:	83 c4 08             	add    esp,0x8
c00135d0:	5b                   	pop    ebx
c00135d1:	c3                   	ret    

c00135d2 <File::close()>:
c00135d2:	53                   	push   ebx
c00135d3:	b8 0b 00 00 00       	mov    eax,0xb
c00135d8:	83 ec 08             	sub    esp,0x8
c00135db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135df:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135e6:	80 fa 19             	cmp    dl,0x19
c00135e9:	77 41                	ja     c001362c <File::close()+0x5a>
c00135eb:	8b 1c 95 00 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1500]
c00135f2:	85 db                	test   ebx,ebx
c00135f4:	74 36                	je     c001362c <File::close()+0x5a>
c00135f6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135fd:	74 2d                	je     c001362c <File::close()+0x5a>
c00135ff:	b8 05 00 00 00       	mov    eax,0x5
c0013604:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013608:	74 22                	je     c001362c <File::close()+0x5a>
c001360a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001360e:	8b 04 95 00 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1500]
c0013615:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001361b:	53                   	push   ebx
c001361c:	53                   	push   ebx
c001361d:	8b 10                	mov    edx,DWORD PTR [eax]
c001361f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013625:	50                   	push   eax
c0013626:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	83 c4 08             	add    esp,0x8
c001362f:	5b                   	pop    ebx
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <File::seek(unsigned long long)>:
c0013632:	56                   	push   esi
c0013633:	53                   	push   ebx
c0013634:	b8 0b 00 00 00       	mov    eax,0xb
c0013639:	51                   	push   ecx
c001363a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001363e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013642:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013649:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001364d:	80 fa 19             	cmp    dl,0x19
c0013650:	77 31                	ja     c0013683 <File::seek(unsigned long long)+0x51>
c0013652:	8b 14 95 00 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1500]
c0013659:	85 d2                	test   edx,edx
c001365b:	74 26                	je     c0013683 <File::seek(unsigned long long)+0x51>
c001365d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013663:	85 d2                	test   edx,edx
c0013665:	74 1c                	je     c0013683 <File::seek(unsigned long long)+0x51>
c0013667:	b8 05 00 00 00       	mov    eax,0x5
c001366c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013670:	74 11                	je     c0013683 <File::seek(unsigned long long)+0x51>
c0013672:	8b 02                	mov    eax,DWORD PTR [edx]
c0013674:	53                   	push   ebx
c0013675:	51                   	push   ecx
c0013676:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001367c:	52                   	push   edx
c001367d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	5a                   	pop    edx
c0013684:	5b                   	pop    ebx
c0013685:	5e                   	pop    esi
c0013686:	c3                   	ret    
c0013687:	90                   	nop

c0013688 <File::tell(unsigned long long*)>:
c0013688:	83 ec 0c             	sub    esp,0xc
c001368b:	b8 0b 00 00 00       	mov    eax,0xb
c0013690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013694:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001369b:	80 fa 19             	cmp    dl,0x19
c001369e:	77 34                	ja     c00136d4 <File::tell(unsigned long long*)+0x4c>
c00136a0:	8b 14 95 00 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1500]
c00136a7:	85 d2                	test   edx,edx
c00136a9:	74 29                	je     c00136d4 <File::tell(unsigned long long*)+0x4c>
c00136ab:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136b1:	85 d2                	test   edx,edx
c00136b3:	74 1f                	je     c00136d4 <File::tell(unsigned long long*)+0x4c>
c00136b5:	b8 05 00 00 00       	mov    eax,0x5
c00136ba:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136be:	74 14                	je     c00136d4 <File::tell(unsigned long long*)+0x4c>
c00136c0:	50                   	push   eax
c00136c1:	8b 02                	mov    eax,DWORD PTR [edx]
c00136c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136cd:	52                   	push   edx
c00136ce:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00136d1:	83 c4 10             	add    esp,0x10
c00136d4:	83 c4 0c             	add    esp,0xc
c00136d7:	c3                   	ret    

c00136d8 <File::rewind()>:
c00136d8:	83 ec 10             	sub    esp,0x10
c00136db:	6a 00                	push   0x0
c00136dd:	6a 00                	push   0x0
c00136df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136e3:	e8 4a ff ff ff       	call   c0013632 <File::seek(unsigned long long)>
c00136e8:	83 c4 1c             	add    esp,0x1c
c00136eb:	c3                   	ret    

c00136ec <File::unlink()>:
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	b8 0b 00 00 00       	mov    eax,0xb
c00136f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136ff:	80 f9 19             	cmp    cl,0x19
c0013702:	77 2f                	ja     c0013733 <File::unlink()+0x47>
c0013704:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c001370b:	85 c9                	test   ecx,ecx
c001370d:	74 24                	je     c0013733 <File::unlink()+0x47>
c001370f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013715:	85 c9                	test   ecx,ecx
c0013717:	74 1a                	je     c0013733 <File::unlink()+0x47>
c0013719:	b8 06 00 00 00       	mov    eax,0x6
c001371e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013722:	75 0f                	jne    c0013733 <File::unlink()+0x47>
c0013724:	83 c2 0d             	add    edx,0xd
c0013727:	50                   	push   eax
c0013728:	50                   	push   eax
c0013729:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372b:	52                   	push   edx
c001372c:	51                   	push   ecx
c001372d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013730:	83 c4 10             	add    esp,0x10
c0013733:	83 c4 0c             	add    esp,0xc
c0013736:	c3                   	ret    
c0013737:	90                   	nop

c0013738 <File::rename(char const*)>:
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	b8 0b 00 00 00       	mov    eax,0xb
c0013740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013744:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001374b:	80 f9 19             	cmp    cl,0x19
c001374e:	77 32                	ja     c0013782 <File::rename(char const*)+0x4a>
c0013750:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c0013757:	85 c9                	test   ecx,ecx
c0013759:	74 27                	je     c0013782 <File::rename(char const*)+0x4a>
c001375b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013761:	85 c9                	test   ecx,ecx
c0013763:	74 1d                	je     c0013782 <File::rename(char const*)+0x4a>
c0013765:	b8 06 00 00 00       	mov    eax,0x6
c001376a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001376e:	75 12                	jne    c0013782 <File::rename(char const*)+0x4a>
c0013770:	83 c2 0d             	add    edx,0xd
c0013773:	50                   	push   eax
c0013774:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013776:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001377a:	52                   	push   edx
c001377b:	51                   	push   ecx
c001377c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001377f:	83 c4 10             	add    esp,0x10
c0013782:	83 c4 0c             	add    esp,0xc
c0013785:	c3                   	ret    

c0013786 <File::chfatattr(unsigned char, unsigned char)>:
c0013786:	57                   	push   edi
c0013787:	b8 0b 00 00 00       	mov    eax,0xb
c001378c:	56                   	push   esi
c001378d:	53                   	push   ebx
c001378e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013792:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013796:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001379d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137a1:	80 f9 19             	cmp    cl,0x19
c00137a4:	77 37                	ja     c00137dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137a6:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c00137ad:	85 c9                	test   ecx,ecx
c00137af:	74 2c                	je     c00137dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137b7:	85 c9                	test   ecx,ecx
c00137b9:	74 22                	je     c00137dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137bb:	b8 06 00 00 00       	mov    eax,0x6
c00137c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137c4:	75 17                	jne    c00137dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137c6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00137c8:	89 f0                	mov    eax,esi
c00137ca:	83 c2 0d             	add    edx,0xd
c00137cd:	0f b6 f0             	movzx  esi,al
c00137d0:	0f b6 db             	movzx  ebx,bl
c00137d3:	56                   	push   esi
c00137d4:	53                   	push   ebx
c00137d5:	52                   	push   edx
c00137d6:	51                   	push   ecx
c00137d7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00137da:	83 c4 10             	add    esp,0x10
c00137dd:	5b                   	pop    ebx
c00137de:	5e                   	pop    esi
c00137df:	5f                   	pop    edi
c00137e0:	c3                   	ret    
c00137e1:	90                   	nop

c00137e2 <File::exists()>:
c00137e2:	83 ec 0c             	sub    esp,0xc
c00137e5:	31 c0                	xor    eax,eax
c00137e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137eb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137f2:	80 f9 19             	cmp    cl,0x19
c00137f5:	77 24                	ja     c001381b <File::exists()+0x39>
c00137f7:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c00137fe:	85 c9                	test   ecx,ecx
c0013800:	74 19                	je     c001381b <File::exists()+0x39>
c0013802:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013808:	85 c9                	test   ecx,ecx
c001380a:	74 0f                	je     c001381b <File::exists()+0x39>
c001380c:	83 c2 0d             	add    edx,0xd
c001380f:	50                   	push   eax
c0013810:	50                   	push   eax
c0013811:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013813:	52                   	push   edx
c0013814:	51                   	push   ecx
c0013815:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013818:	83 c4 10             	add    esp,0x10
c001381b:	83 c4 0c             	add    esp,0xc
c001381e:	c3                   	ret    
c001381f:	90                   	nop

c0013820 <File::stat(unsigned long long*, bool*)>:
c0013820:	56                   	push   esi
c0013821:	53                   	push   ebx
c0013822:	50                   	push   eax
c0013823:	b8 0b 00 00 00       	mov    eax,0xb
c0013828:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001382c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013830:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013837:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001383b:	80 f9 19             	cmp    cl,0x19
c001383e:	77 3d                	ja     c001387d <File::stat(unsigned long long*, bool*)+0x5d>
c0013840:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c0013847:	85 c9                	test   ecx,ecx
c0013849:	74 32                	je     c001387d <File::stat(unsigned long long*, bool*)+0x5d>
c001384b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013851:	85 c9                	test   ecx,ecx
c0013853:	74 28                	je     c001387d <File::stat(unsigned long long*, bool*)+0x5d>
c0013855:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013857:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001385b:	74 13                	je     c0013870 <File::stat(unsigned long long*, bool*)+0x50>
c001385d:	83 ec 04             	sub    esp,0x4
c0013860:	56                   	push   esi
c0013861:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013867:	51                   	push   ecx
c0013868:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001386b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001386e:	eb 0a                	jmp    c001387a <File::stat(unsigned long long*, bool*)+0x5a>
c0013870:	53                   	push   ebx
c0013871:	83 c2 0d             	add    edx,0xd
c0013874:	56                   	push   esi
c0013875:	52                   	push   edx
c0013876:	51                   	push   ecx
c0013877:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	5a                   	pop    edx
c001387e:	5b                   	pop    ebx
c001387f:	5e                   	pop    esi
c0013880:	c3                   	ret    

c0013881 <Fs::setcwd(Process*, char*)>:
c0013881:	55                   	push   ebp
c0013882:	57                   	push   edi
c0013883:	56                   	push   esi
c0013884:	53                   	push   ebx
c0013885:	81 ec 20 02 00 00    	sub    esp,0x220
c001388b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013892:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013898:	57                   	push   edi
c0013899:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138a0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138a4:	56                   	push   esi
c00138a5:	e8 bc fa ff ff       	call   c0013366 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00138ad:	e8 e2 ce fe ff       	call   c0000794 <strlen>
c00138b2:	83 c4 10             	add    esp,0x10
c00138b5:	83 f8 02             	cmp    eax,0x2
c00138b8:	77 17                	ja     c00138d1 <Fs::setcwd(Process*, char*)+0x50>
c00138ba:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00138bf:	83 e8 41             	sub    eax,0x41
c00138c2:	83 f8 19             	cmp    eax,0x19
c00138c5:	76 24                	jbe    c00138eb <Fs::setcwd(Process*, char*)+0x6a>
c00138c7:	b8 03 00 00 00       	mov    eax,0x3
c00138cc:	e9 e0 00 00 00       	jmp    c00139b1 <Fs::setcwd(Process*, char*)+0x130>
c00138d1:	83 ec 0c             	sub    esp,0xc
c00138d4:	56                   	push   esi
c00138d5:	e8 ba ce fe ff       	call   c0000794 <strlen>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	83 f8 03             	cmp    eax,0x3
c00138e0:	75 34                	jne    c0013916 <Fs::setcwd(Process*, char*)+0x95>
c00138e2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00138e7:	75 2d                	jne    c0013916 <Fs::setcwd(Process*, char*)+0x95>
c00138e9:	eb cf                	jmp    c00138ba <Fs::setcwd(Process*, char*)+0x39>
c00138eb:	8b 14 85 00 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1500]
c00138f2:	b8 05 00 00 00       	mov    eax,0x5
c00138f7:	85 d2                	test   edx,edx
c00138f9:	0f 84 b2 00 00 00    	je     c00139b1 <Fs::setcwd(Process*, char*)+0x130>
c00138ff:	b8 06 00 00 00       	mov    eax,0x6
c0013904:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001390b:	0f 85 92 00 00 00    	jne    c00139a3 <Fs::setcwd(Process*, char*)+0x122>
c0013911:	e9 9b 00 00 00       	jmp    c00139b1 <Fs::setcwd(Process*, char*)+0x130>
c0013916:	83 ec 0c             	sub    esp,0xc
c0013919:	68 14 01 00 00       	push   0x114
c001391e:	e8 20 bf ff ff       	call   c000f843 <malloc>
c0013923:	83 c4 0c             	add    esp,0xc
c0013926:	89 c3                	mov    ebx,eax
c0013928:	55                   	push   ebp
c0013929:	56                   	push   esi
c001392a:	50                   	push   eax
c001392b:	e8 e0 fb ff ff       	call   c0013510 <File::File(char const*, Process*)>
c0013930:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013935:	83 c4 0c             	add    esp,0xc
c0013938:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001393c:	50                   	push   eax
c001393d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013941:	50                   	push   eax
c0013942:	53                   	push   ebx
c0013943:	e8 d8 fe ff ff       	call   c0013820 <File::stat(unsigned long long*, bool*)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	83 f8 02             	cmp    eax,0x2
c001394e:	74 04                	je     c0013954 <Fs::setcwd(Process*, char*)+0xd3>
c0013950:	85 c0                	test   eax,eax
c0013952:	74 1c                	je     c0013970 <Fs::setcwd(Process*, char*)+0xef>
c0013954:	b8 01 00 00 00       	mov    eax,0x1
c0013959:	85 db                	test   ebx,ebx
c001395b:	74 54                	je     c00139b1 <Fs::setcwd(Process*, char*)+0x130>
c001395d:	83 ec 0c             	sub    esp,0xc
c0013960:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013962:	53                   	push   ebx
c0013963:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013966:	83 c4 10             	add    esp,0x10
c0013969:	b8 01 00 00 00       	mov    eax,0x1
c001396e:	eb 41                	jmp    c00139b1 <Fs::setcwd(Process*, char*)+0x130>
c0013970:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013975:	75 1c                	jne    c0013993 <Fs::setcwd(Process*, char*)+0x112>
c0013977:	b8 02 00 00 00       	mov    eax,0x2
c001397c:	85 db                	test   ebx,ebx
c001397e:	74 31                	je     c00139b1 <Fs::setcwd(Process*, char*)+0x130>
c0013980:	83 ec 0c             	sub    esp,0xc
c0013983:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013985:	53                   	push   ebx
c0013986:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013989:	83 c4 10             	add    esp,0x10
c001398c:	b8 02 00 00 00       	mov    eax,0x2
c0013991:	eb 1e                	jmp    c00139b1 <Fs::setcwd(Process*, char*)+0x130>
c0013993:	85 db                	test   ebx,ebx
c0013995:	74 0c                	je     c00139a3 <Fs::setcwd(Process*, char*)+0x122>
c0013997:	83 ec 0c             	sub    esp,0xc
c001399a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001399c:	53                   	push   ebx
c001399d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139a0:	83 c4 10             	add    esp,0x10
c00139a3:	50                   	push   eax
c00139a4:	50                   	push   eax
c00139a5:	56                   	push   esi
c00139a6:	57                   	push   edi
c00139a7:	e8 88 ce fe ff       	call   c0000834 <strcpy>
c00139ac:	83 c4 10             	add    esp,0x10
c00139af:	31 c0                	xor    eax,eax
c00139b1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00139b7:	5b                   	pop    ebx
c00139b8:	5e                   	pop    esi
c00139b9:	5f                   	pop    edi
c00139ba:	5d                   	pop    ebp
c00139bb:	c3                   	ret    

c00139bc <Directory::Directory(char const*, Process*)>:
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c3:	83 ec 08             	sub    esp,0x8
c00139c6:	6a 00                	push   0x0
c00139c8:	50                   	push   eax
c00139c9:	e8 6e dd ff ff       	call   c001173c <UnixFile::UnixFile(int)>
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	ba 08 ac 02 c0       	mov    edx,0xc002ac08
c00139d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139da:	89 10                	mov    DWORD PTR [eax],edx
c00139dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139e0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00139e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ea:	83 c0 0d             	add    eax,0xd
c00139ed:	83 ec 04             	sub    esp,0x4
c00139f0:	52                   	push   edx
c00139f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f5:	50                   	push   eax
c00139f6:	e8 6b f9 ff ff       	call   c0013366 <Fs::standardiseFiles(char*, char const*, char const*)>
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a02:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a05:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a1a:	90                   	nop
c0013a1b:	83 c4 0c             	add    esp,0xc
c0013a1e:	c3                   	ret    
c0013a1f:	90                   	nop

c0013a20 <Directory::open()>:
c0013a20:	53                   	push   ebx
c0013a21:	b8 0b 00 00 00       	mov    eax,0xb
c0013a26:	83 ec 08             	sub    esp,0x8
c0013a29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a2d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a34:	80 fa 19             	cmp    dl,0x19
c0013a37:	77 3d                	ja     c0013a76 <Directory::open()+0x56>
c0013a39:	8b 14 95 00 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1500]
c0013a40:	85 d2                	test   edx,edx
c0013a42:	74 32                	je     c0013a76 <Directory::open()+0x56>
c0013a44:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a4a:	85 d2                	test   edx,edx
c0013a4c:	74 28                	je     c0013a76 <Directory::open()+0x56>
c0013a4e:	b8 06 00 00 00       	mov    eax,0x6
c0013a53:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a57:	75 1d                	jne    c0013a76 <Directory::open()+0x56>
c0013a59:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a5f:	50                   	push   eax
c0013a60:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a62:	51                   	push   ecx
c0013a63:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a66:	51                   	push   ecx
c0013a67:	52                   	push   edx
c0013a68:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	85 c0                	test   eax,eax
c0013a70:	75 04                	jne    c0013a76 <Directory::open()+0x56>
c0013a72:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a76:	83 c4 08             	add    esp,0x8
c0013a79:	5b                   	pop    ebx
c0013a7a:	c3                   	ret    
c0013a7b:	90                   	nop

c0013a7c <Directory::close()>:
c0013a7c:	53                   	push   ebx
c0013a7d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a82:	83 ec 08             	sub    esp,0x8
c0013a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a89:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a90:	80 fa 19             	cmp    dl,0x19
c0013a93:	77 41                	ja     c0013ad6 <Directory::close()+0x5a>
c0013a95:	8b 1c 95 00 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1500]
c0013a9c:	85 db                	test   ebx,ebx
c0013a9e:	74 36                	je     c0013ad6 <Directory::close()+0x5a>
c0013aa0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013aa7:	74 2d                	je     c0013ad6 <Directory::close()+0x5a>
c0013aa9:	b8 05 00 00 00       	mov    eax,0x5
c0013aae:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013ab2:	74 22                	je     c0013ad6 <Directory::close()+0x5a>
c0013ab4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013ab8:	8b 04 95 00 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1500]
c0013abf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013ac5:	53                   	push   ebx
c0013ac6:	53                   	push   ebx
c0013ac7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ac9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013acf:	50                   	push   eax
c0013ad0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013ad3:	83 c4 10             	add    esp,0x10
c0013ad6:	83 c4 08             	add    esp,0x8
c0013ad9:	5b                   	pop    ebx
c0013ada:	c3                   	ret    
c0013adb:	90                   	nop

c0013adc <Directory::unlink()>:
c0013adc:	83 ec 0c             	sub    esp,0xc
c0013adf:	b8 0b 00 00 00       	mov    eax,0xb
c0013ae4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ae8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aef:	80 f9 19             	cmp    cl,0x19
c0013af2:	77 2f                	ja     c0013b23 <Directory::unlink()+0x47>
c0013af4:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c0013afb:	85 c9                	test   ecx,ecx
c0013afd:	74 24                	je     c0013b23 <Directory::unlink()+0x47>
c0013aff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b05:	85 c9                	test   ecx,ecx
c0013b07:	74 1a                	je     c0013b23 <Directory::unlink()+0x47>
c0013b09:	b8 06 00 00 00       	mov    eax,0x6
c0013b0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b12:	75 0f                	jne    c0013b23 <Directory::unlink()+0x47>
c0013b14:	83 c2 0d             	add    edx,0xd
c0013b17:	50                   	push   eax
c0013b18:	50                   	push   eax
c0013b19:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b1b:	52                   	push   edx
c0013b1c:	51                   	push   ecx
c0013b1d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b20:	83 c4 10             	add    esp,0x10
c0013b23:	83 c4 0c             	add    esp,0xc
c0013b26:	c3                   	ret    
c0013b27:	90                   	nop

c0013b28 <Directory::rename(char const*)>:
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b3b:	80 f9 19             	cmp    cl,0x19
c0013b3e:	77 32                	ja     c0013b72 <Directory::rename(char const*)+0x4a>
c0013b40:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c0013b47:	85 c9                	test   ecx,ecx
c0013b49:	74 27                	je     c0013b72 <Directory::rename(char const*)+0x4a>
c0013b4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b51:	85 c9                	test   ecx,ecx
c0013b53:	74 1d                	je     c0013b72 <Directory::rename(char const*)+0x4a>
c0013b55:	b8 06 00 00 00       	mov    eax,0x6
c0013b5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b5e:	75 12                	jne    c0013b72 <Directory::rename(char const*)+0x4a>
c0013b60:	83 c2 0d             	add    edx,0xd
c0013b63:	50                   	push   eax
c0013b64:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b6a:	52                   	push   edx
c0013b6b:	51                   	push   ecx
c0013b6c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b6f:	83 c4 10             	add    esp,0x10
c0013b72:	83 c4 0c             	add    esp,0xc
c0013b75:	c3                   	ret    

c0013b76 <Directory::exists()>:
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	31 c0                	xor    eax,eax
c0013b7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b7f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b86:	80 f9 19             	cmp    cl,0x19
c0013b89:	77 24                	ja     c0013baf <Directory::exists()+0x39>
c0013b8b:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c0013b92:	85 c9                	test   ecx,ecx
c0013b94:	74 19                	je     c0013baf <Directory::exists()+0x39>
c0013b96:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b9c:	85 c9                	test   ecx,ecx
c0013b9e:	74 0f                	je     c0013baf <Directory::exists()+0x39>
c0013ba0:	83 c2 0d             	add    edx,0xd
c0013ba3:	50                   	push   eax
c0013ba4:	50                   	push   eax
c0013ba5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ba7:	52                   	push   edx
c0013ba8:	51                   	push   ecx
c0013ba9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013bac:	83 c4 10             	add    esp,0x10
c0013baf:	83 c4 0c             	add    esp,0xc
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <Directory::read(dirent*)>:
c0013bb4:	83 ec 1c             	sub    esp,0x1c
c0013bb7:	b8 0b 00 00 00       	mov    eax,0xb
c0013bbc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013bc0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013bc7:	80 fa 19             	cmp    dl,0x19
c0013bca:	77 30                	ja     c0013bfc <Directory::read(dirent*)+0x48>
c0013bcc:	8b 14 95 00 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1500]
c0013bd3:	85 d2                	test   edx,edx
c0013bd5:	74 25                	je     c0013bfc <Directory::read(dirent*)+0x48>
c0013bd7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013bde:	74 1c                	je     c0013bfc <Directory::read(dirent*)+0x48>
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013be5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013be9:	52                   	push   edx
c0013bea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013bee:	6a 00                	push   0x0
c0013bf0:	68 10 01 00 00       	push   0x110
c0013bf5:	51                   	push   ecx
c0013bf6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bf9:	83 c4 20             	add    esp,0x20
c0013bfc:	83 c4 1c             	add    esp,0x1c
c0013bff:	c3                   	ret    

c0013c00 <Directory::create()>:
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	b8 0b 00 00 00       	mov    eax,0xb
c0013c08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c13:	80 f9 19             	cmp    cl,0x19
c0013c16:	77 2f                	ja     c0013c47 <Directory::create()+0x47>
c0013c18:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c0013c1f:	85 c9                	test   ecx,ecx
c0013c21:	74 24                	je     c0013c47 <Directory::create()+0x47>
c0013c23:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c29:	85 c9                	test   ecx,ecx
c0013c2b:	74 1a                	je     c0013c47 <Directory::create()+0x47>
c0013c2d:	b8 06 00 00 00       	mov    eax,0x6
c0013c32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c36:	75 0f                	jne    c0013c47 <Directory::create()+0x47>
c0013c38:	83 c2 0d             	add    edx,0xd
c0013c3b:	50                   	push   eax
c0013c3c:	50                   	push   eax
c0013c3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c3f:	52                   	push   edx
c0013c40:	51                   	push   ecx
c0013c41:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	83 c4 0c             	add    esp,0xc
c0013c4a:	c3                   	ret    
c0013c4b:	90                   	nop

c0013c4c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c4c:	b8 0a 00 00 00       	mov    eax,0xa
c0013c51:	c3                   	ret    

c0013c52 <Bus::Bus(char const*)>:
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c59:	83 ec 08             	sub    esp,0x8
c0013c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c60:	50                   	push   eax
c0013c61:	e8 68 09 00 00       	call   c00145ce <Device::Device(char const*)>
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c0013c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c72:	89 10                	mov    DWORD PTR [eax],edx
c0013c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c78:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c82:	90                   	nop
c0013c83:	83 c4 0c             	add    esp,0xc
c0013c86:	c3                   	ret    
c0013c87:	90                   	nop

c0013c88 <Bus::~Bus()>:
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c0013c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c94:	89 10                	mov    DWORD PTR [eax],edx
c0013c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9a:	83 ec 0c             	sub    esp,0xc
c0013c9d:	50                   	push   eax
c0013c9e:	e8 0d 06 00 00       	call   c00142b0 <Device::~Device()>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	90                   	nop
c0013ca7:	83 c4 0c             	add    esp,0xc
c0013caa:	c3                   	ret    
c0013cab:	90                   	nop

c0013cac <Bus::~Bus()>:
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	83 ec 0c             	sub    esp,0xc
c0013cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb6:	e8 cd ff ff ff       	call   c0013c88 <Bus::~Bus()>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	83 ec 08             	sub    esp,0x8
c0013cc1:	68 58 01 00 00       	push   0x158
c0013cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cca:	e8 08 f2 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	83 c4 0c             	add    esp,0xc
c0013cd5:	c3                   	ret    

c0013cd6 <Buzzer::Buzzer(char const*)>:
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cdd:	83 ec 08             	sub    esp,0x8
c0013ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce4:	50                   	push   eax
c0013ce5:	e8 e4 08 00 00       	call   c00145ce <Device::Device(char const*)>
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c0013cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf6:	89 10                	mov    DWORD PTR [eax],edx
c0013cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cfc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d14:	90                   	nop
c0013d15:	83 c4 0c             	add    esp,0xc
c0013d18:	c3                   	ret    
c0013d19:	90                   	nop

c0013d1a <Buzzer::~Buzzer()>:
c0013d1a:	83 ec 0c             	sub    esp,0xc
c0013d1d:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c0013d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d26:	89 10                	mov    DWORD PTR [eax],edx
c0013d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2c:	83 ec 0c             	sub    esp,0xc
c0013d2f:	50                   	push   eax
c0013d30:	e8 7b 05 00 00       	call   c00142b0 <Device::~Device()>
c0013d35:	83 c4 10             	add    esp,0x10
c0013d38:	90                   	nop
c0013d39:	83 c4 0c             	add    esp,0xc
c0013d3c:	c3                   	ret    
c0013d3d:	90                   	nop

c0013d3e <Buzzer::~Buzzer()>:
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	83 ec 0c             	sub    esp,0xc
c0013d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d48:	e8 cd ff ff ff       	call   c0013d1a <Buzzer::~Buzzer()>
c0013d4d:	83 c4 10             	add    esp,0x10
c0013d50:	83 ec 08             	sub    esp,0x8
c0013d53:	68 5c 01 00 00       	push   0x15c
c0013d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d5c:	e8 76 f1 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	83 c4 0c             	add    esp,0xc
c0013d67:	c3                   	ret    

c0013d68 <Buzzer::stop()>:
c0013d68:	83 ec 14             	sub    esp,0x14
c0013d6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d71:	6a 00                	push   0x0
c0013d73:	50                   	push   eax
c0013d74:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d77:	83 c4 1c             	add    esp,0x1c
c0013d7a:	c3                   	ret    

c0013d7b <beepThread(void*)>:
c0013d7b:	53                   	push   ebx
c0013d7c:	83 ec 08             	sub    esp,0x8
c0013d7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d83:	e8 d4 a0 00 00       	call   c001de5c <unlockScheduler()>
c0013d88:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d8d:	52                   	push   edx
c0013d8e:	52                   	push   edx
c0013d8f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d95:	52                   	push   edx
c0013d96:	50                   	push   eax
c0013d97:	e8 0e a6 00 00       	call   c001e3aa <nanoSleep(unsigned long long)>
c0013d9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d9f:	e8 c4 ff ff ff       	call   c0013d68 <Buzzer::stop()>
c0013da4:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013dac:	83 c4 18             	add    esp,0x18
c0013daf:	5b                   	pop    ebx
c0013db0:	e9 3b a5 00 00       	jmp    c001e2f0 <blockTask(TaskState)>
c0013db5:	90                   	nop

c0013db6 <Buzzer::beep(int, int, bool)>:
c0013db6:	57                   	push   edi
c0013db7:	56                   	push   esi
c0013db8:	53                   	push   ebx
c0013db9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013dbd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013dc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013dc5:	52                   	push   edx
c0013dc6:	52                   	push   edx
c0013dc7:	8b 06                	mov    eax,DWORD PTR [esi]
c0013dc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dcd:	56                   	push   esi
c0013dce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	89 f8                	mov    eax,edi
c0013dd6:	84 c0                	test   al,al
c0013dd8:	74 1f                	je     c0013df9 <Buzzer::beep(int, int, bool)+0x43>
c0013dda:	50                   	push   eax
c0013ddb:	50                   	push   eax
c0013ddc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013de2:	99                   	cdq    
c0013de3:	52                   	push   edx
c0013de4:	50                   	push   eax
c0013de5:	e8 c0 a5 00 00       	call   c001e3aa <nanoSleep(unsigned long long)>
c0013dea:	83 c4 10             	add    esp,0x10
c0013ded:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013df1:	5b                   	pop    ebx
c0013df2:	5e                   	pop    esi
c0013df3:	5f                   	pop    edi
c0013df4:	e9 6f ff ff ff       	jmp    c0013d68 <Buzzer::stop()>
c0013df9:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013dff:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0013e04:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e0c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e10:	c7 44 24 14 7b 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d7b
c0013e18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e1c:	5b                   	pop    ebx
c0013e1d:	5e                   	pop    esi
c0013e1e:	5f                   	pop    edi
c0013e1f:	e9 68 a1 00 00       	jmp    c001df8c <Process::createThread(void (*)(void*), void*, int)>

c0013e24 <User::loadClockSettings(int)>:
c0013e24:	53                   	push   ebx
c0013e25:	83 ec 14             	sub    esp,0x14
c0013e28:	68 14 01 00 00       	push   0x114
c0013e2d:	e8 11 ba ff ff       	call   c000f843 <malloc>
c0013e32:	83 c4 0c             	add    esp,0xc
c0013e35:	89 c3                	mov    ebx,eax
c0013e37:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c0013e3d:	68 78 ac 02 c0       	push   0xc002ac78
c0013e42:	50                   	push   eax
c0013e43:	e8 c8 f6 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c0013e48:	58                   	pop    eax
c0013e49:	5a                   	pop    edx
c0013e4a:	6a 01                	push   0x1
c0013e4c:	53                   	push   ebx
c0013e4d:	e8 22 f7 ff ff       	call   c0013574 <File::open(FileOpenMode)>
c0013e52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e55:	e8 78 f7 ff ff       	call   c00135d2 <File::close()>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	85 db                	test   ebx,ebx
c0013e5f:	74 0f                	je     c0013e70 <User::loadClockSettings(int)+0x4c>
c0013e61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e63:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e6a:	83 c4 08             	add    esp,0x8
c0013e6d:	5b                   	pop    ebx
c0013e6e:	ff e0                	jmp    eax
c0013e70:	83 c4 08             	add    esp,0x8
c0013e73:	5b                   	pop    ebx
c0013e74:	c3                   	ret    
c0013e75:	90                   	nop

c0013e76 <Clock::Clock(char const*)>:
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7d:	83 ec 08             	sub    esp,0x8
c0013e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e84:	50                   	push   eax
c0013e85:	e8 44 07 00 00       	call   c00145ce <Device::Device(char const*)>
c0013e8a:	83 c4 10             	add    esp,0x10
c0013e8d:	ba a0 ac 02 c0       	mov    edx,0xc002aca0
c0013e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e96:	89 10                	mov    DWORD PTR [eax],edx
c0013e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ea6:	90                   	nop
c0013ea7:	83 c4 0c             	add    esp,0xc
c0013eaa:	c3                   	ret    
c0013eab:	90                   	nop

c0013eac <Clock::~Clock()>:
c0013eac:	83 ec 0c             	sub    esp,0xc
c0013eaf:	ba a0 ac 02 c0       	mov    edx,0xc002aca0
c0013eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb8:	89 10                	mov    DWORD PTR [eax],edx
c0013eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ebe:	83 ec 0c             	sub    esp,0xc
c0013ec1:	50                   	push   eax
c0013ec2:	e8 e9 03 00 00       	call   c00142b0 <Device::~Device()>
c0013ec7:	83 c4 10             	add    esp,0x10
c0013eca:	90                   	nop
c0013ecb:	83 c4 0c             	add    esp,0xc
c0013ece:	c3                   	ret    
c0013ecf:	90                   	nop

c0013ed0 <Clock::~Clock()>:
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	83 ec 0c             	sub    esp,0xc
c0013ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eda:	e8 cd ff ff ff       	call   c0013eac <Clock::~Clock()>
c0013edf:	83 c4 10             	add    esp,0x10
c0013ee2:	83 ec 08             	sub    esp,0x8
c0013ee5:	68 58 01 00 00       	push   0x158
c0013eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eee:	e8 e4 ef ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0013ef3:	83 c4 10             	add    esp,0x10
c0013ef6:	83 c4 0c             	add    esp,0xc
c0013ef9:	c3                   	ret    

c0013efa <Clock::timeInSecondsLocal()>:
c0013efa:	53                   	push   ebx
c0013efb:	83 ec 14             	sub    esp,0x14
c0013efe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f02:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f04:	50                   	push   eax
c0013f05:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f08:	0f b6 0d 78 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e678
c0013f0f:	03 0d 7c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e67c
c0013f15:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f1b:	89 cb                	mov    ebx,ecx
c0013f1d:	c1 fb 1f             	sar    ebx,0x1f
c0013f20:	01 c8                	add    eax,ecx
c0013f22:	11 da                	adc    edx,ebx
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	31 c9                	xor    ecx,ecx
c0013f29:	80 3d 79 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e679,0x0
c0013f30:	74 05                	je     c0013f37 <Clock::timeInSecondsLocal()+0x3d>
c0013f32:	b9 08 07 00 00       	mov    ecx,0x708
c0013f37:	31 db                	xor    ebx,ebx
c0013f39:	01 c8                	add    eax,ecx
c0013f3b:	11 da                	adc    edx,ebx
c0013f3d:	83 c4 08             	add    esp,0x8
c0013f40:	5b                   	pop    ebx
c0013f41:	c3                   	ret    

c0013f42 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f42:	57                   	push   edi
c0013f43:	56                   	push   esi
c0013f44:	53                   	push   ebx
c0013f45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f4d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f4f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f53:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f56:	0f b6 05 78 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e678
c0013f5d:	03 05 7c e6 02 c0    	add    eax,DWORD PTR ds:0xc002e67c
c0013f63:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f69:	99                   	cdq    
c0013f6a:	29 c6                	sub    esi,eax
c0013f6c:	19 d7                	sbb    edi,edx
c0013f6e:	89 f0                	mov    eax,esi
c0013f70:	89 fa                	mov    edx,edi
c0013f72:	31 f6                	xor    esi,esi
c0013f74:	80 3d 79 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e679,0x0
c0013f7b:	74 05                	je     c0013f82 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f7d:	be 08 07 00 00       	mov    esi,0x708
c0013f82:	31 ff                	xor    edi,edi
c0013f84:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f88:	29 f0                	sub    eax,esi
c0013f8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f8e:	19 fa                	sbb    edx,edi
c0013f90:	89 d8                	mov    eax,ebx
c0013f92:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f96:	5b                   	pop    ebx
c0013f97:	5e                   	pop    esi
c0013f98:	5f                   	pop    edi
c0013f99:	ff e0                	jmp    eax

c0013f9b <datetimeToSeconds(datetime_t)>:
c0013f9b:	55                   	push   ebp
c0013f9c:	57                   	push   edi
c0013f9d:	56                   	push   esi
c0013f9e:	53                   	push   ebx
c0013f9f:	83 ec 14             	sub    esp,0x14
c0013fa2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013fa6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013faa:	89 d3                	mov    ebx,edx
c0013fac:	0f b6 c6             	movzx  eax,dh
c0013faf:	c1 eb 10             	shr    ebx,0x10
c0013fb2:	48                   	dec    eax
c0013fb3:	66 81 eb 6c 07       	sub    bx,0x76c
c0013fb8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013fbc:	0f b6 f5             	movzx  esi,ch
c0013fbf:	89 cf                	mov    edi,ecx
c0013fc1:	6b f6 3c             	imul   esi,esi,0x3c
c0013fc4:	c1 ef 10             	shr    edi,0x10
c0013fc7:	0f b6 c9             	movzx  ecx,cl
c0013fca:	89 f8                	mov    eax,edi
c0013fcc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fd2:	0f b6 f8             	movzx  edi,al
c0013fd5:	0f b6 d2             	movzx  edx,dl
c0013fd8:	01 fe                	add    esi,edi
c0013fda:	01 f1                	add    ecx,esi
c0013fdc:	0f b7 f3             	movzx  esi,bx
c0013fdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013fe3:	c1 f9 1f             	sar    ecx,0x1f
c0013fe6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013feb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fef:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ff4:	8b 0c 8d e0 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5320]
c0013ffb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fff:	76 29                	jbe    c001402a <datetimeToSeconds(datetime_t)+0x8f>
c0014001:	f6 c3 03             	test   bl,0x3
c0014004:	75 24                	jne    c001402a <datetimeToSeconds(datetime_t)+0x8f>
c0014006:	31 d2                	xor    edx,edx
c0014008:	bf 64 00 00 00       	mov    edi,0x64
c001400d:	89 d8                	mov    eax,ebx
c001400f:	66 f7 f7             	div    di
c0014012:	66 85 d2             	test   dx,dx
c0014015:	75 12                	jne    c0014029 <datetimeToSeconds(datetime_t)+0x8e>
c0014017:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001401d:	bf 90 01 00 00       	mov    edi,0x190
c0014022:	99                   	cdq    
c0014023:	f7 ff                	idiv   edi
c0014025:	85 d2                	test   edx,edx
c0014027:	75 01                	jne    c001402a <datetimeToSeconds(datetime_t)+0x8f>
c0014029:	41                   	inc    ecx
c001402a:	66 83 fb 46          	cmp    bx,0x46
c001402e:	76 45                	jbe    c0014075 <datetimeToSeconds(datetime_t)+0xda>
c0014030:	bb 46 00 00 00       	mov    ebx,0x46
c0014035:	bf 64 00 00 00       	mov    edi,0x64
c001403a:	bd 90 01 00 00       	mov    ebp,0x190
c001403f:	b8 6d 01 00 00       	mov    eax,0x16d
c0014044:	f6 c3 03             	test   bl,0x3
c0014047:	75 23                	jne    c001406c <datetimeToSeconds(datetime_t)+0xd1>
c0014049:	89 d8                	mov    eax,ebx
c001404b:	99                   	cdq    
c001404c:	f7 ff                	idiv   edi
c001404e:	b8 6e 01 00 00       	mov    eax,0x16e
c0014053:	85 d2                	test   edx,edx
c0014055:	75 15                	jne    c001406c <datetimeToSeconds(datetime_t)+0xd1>
c0014057:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001405d:	99                   	cdq    
c001405e:	f7 fd                	idiv   ebp
c0014060:	83 fa 01             	cmp    edx,0x1
c0014063:	19 c0                	sbb    eax,eax
c0014065:	f7 d0                	not    eax
c0014067:	05 6e 01 00 00       	add    eax,0x16e
c001406c:	01 c1                	add    ecx,eax
c001406e:	43                   	inc    ebx
c001406f:	39 f3                	cmp    ebx,esi
c0014071:	7c cc                	jl     c001403f <datetimeToSeconds(datetime_t)+0xa4>
c0014073:	eb 35                	jmp    c00140aa <datetimeToSeconds(datetime_t)+0x10f>
c0014075:	74 33                	je     c00140aa <datetimeToSeconds(datetime_t)+0x10f>
c0014077:	b8 45 00 00 00       	mov    eax,0x45
c001407c:	89 c2                	mov    edx,eax
c001407e:	83 e2 03             	and    edx,0x3
c0014081:	39 f0                	cmp    eax,esi
c0014083:	7e 0f                	jle    c0014094 <datetimeToSeconds(datetime_t)+0xf9>
c0014085:	83 fa 01             	cmp    edx,0x1
c0014088:	19 d2                	sbb    edx,edx
c001408a:	48                   	dec    eax
c001408b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014092:	eb e8                	jmp    c001407c <datetimeToSeconds(datetime_t)+0xe1>
c0014094:	b8 6d 01 00 00       	mov    eax,0x16d
c0014099:	85 d2                	test   edx,edx
c001409b:	75 0b                	jne    c00140a8 <datetimeToSeconds(datetime_t)+0x10d>
c001409d:	66 83 fb 01          	cmp    bx,0x1
c00140a1:	19 c0                	sbb    eax,eax
c00140a3:	05 6e 01 00 00       	add    eax,0x16e
c00140a8:	29 c1                	sub    ecx,eax
c00140aa:	b8 80 51 01 00       	mov    eax,0x15180
c00140af:	f7 e9                	imul   ecx
c00140b1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00140b5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00140b9:	83 c4 14             	add    esp,0x14
c00140bc:	5b                   	pop    ebx
c00140bd:	5e                   	pop    esi
c00140be:	5f                   	pop    edi
c00140bf:	5d                   	pop    ebp
c00140c0:	c3                   	ret    
c00140c1:	90                   	nop

c00140c2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140c2:	57                   	push   edi
c00140c3:	56                   	push   esi
c00140c4:	53                   	push   ebx
c00140c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00140cb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00140ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140d6:	e8 c0 fe ff ff       	call   c0013f9b <datetimeToSeconds(datetime_t)>
c00140db:	59                   	pop    ecx
c00140dc:	0f b6 0d 78 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e678
c00140e3:	5b                   	pop    ebx
c00140e4:	03 0d 7c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e67c
c00140ea:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00140f0:	89 cb                	mov    ebx,ecx
c00140f2:	c1 fb 1f             	sar    ebx,0x1f
c00140f5:	29 c8                	sub    eax,ecx
c00140f7:	19 da                	sbb    edx,ebx
c00140f9:	31 c9                	xor    ecx,ecx
c00140fb:	80 3d 79 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e679,0x0
c0014102:	74 05                	je     c0014109 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014104:	b9 08 07 00 00       	mov    ecx,0x708
c0014109:	31 db                	xor    ebx,ebx
c001410b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001410f:	29 c8                	sub    eax,ecx
c0014111:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014115:	19 da                	sbb    edx,ebx
c0014117:	89 f8                	mov    eax,edi
c0014119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001411d:	5b                   	pop    ebx
c001411e:	5e                   	pop    esi
c001411f:	5f                   	pop    edi
c0014120:	ff e0                	jmp    eax

c0014122 <secondsToDatetime(unsigned long long)>:
c0014122:	55                   	push   ebp
c0014123:	57                   	push   edi
c0014124:	56                   	push   esi
c0014125:	53                   	push   ebx
c0014126:	83 ec 1c             	sub    esp,0x1c
c0014129:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001412d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014131:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014135:	6a 00                	push   0x0
c0014137:	68 80 51 01 00       	push   0x15180
c001413c:	55                   	push   ebp
c001413d:	57                   	push   edi
c001413e:	e8 f9 28 01 00       	call   c0026a3c <__udivdi3>
c0014143:	83 c4 10             	add    esp,0x10
c0014146:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001414c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014150:	6a 00                	push   0x0
c0014152:	68 80 51 01 00       	push   0x15180
c0014157:	55                   	push   ebp
c0014158:	57                   	push   edi
c0014159:	bf 10 0e 00 00       	mov    edi,0xe10
c001415e:	e8 d9 29 01 00       	call   c0026b3c <__umoddi3>
c0014163:	83 c4 10             	add    esp,0x10
c0014166:	99                   	cdq    
c0014167:	f7 ff                	idiv   edi
c0014169:	bf 3c 00 00 00       	mov    edi,0x3c
c001416e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014171:	89 d0                	mov    eax,edx
c0014173:	99                   	cdq    
c0014174:	f7 ff                	idiv   edi
c0014176:	85 db                	test   ebx,ebx
c0014178:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001417b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001417e:	79 11                	jns    c0014191 <secondsToDatetime(unsigned long long)+0x6f>
c0014180:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014184:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001418a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001418f:	eb 07                	jmp    c0014198 <secondsToDatetime(unsigned long long)+0x76>
c0014191:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014196:	89 d8                	mov    eax,ebx
c0014198:	bf b4 05 00 00       	mov    edi,0x5b4
c001419d:	99                   	cdq    
c001419e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141a3:	f7 f9                	idiv   ecx
c00141a5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141ae:	31 d2                	xor    edx,edx
c00141b0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00141b8:	01 c3                	add    ebx,eax
c00141ba:	89 d8                	mov    eax,ebx
c00141bc:	f7 f1                	div    ecx
c00141be:	31 d2                	xor    edx,edx
c00141c0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141c3:	89 d8                	mov    eax,ebx
c00141c5:	f7 f7                	div    edi
c00141c7:	31 d2                	xor    edx,edx
c00141c9:	29 c1                	sub    ecx,eax
c00141cb:	89 d8                	mov    eax,ebx
c00141cd:	f7 f5                	div    ebp
c00141cf:	bd 6d 01 00 00       	mov    ebp,0x16d
c00141d4:	29 c1                	sub    ecx,eax
c00141d6:	31 d2                	xor    edx,edx
c00141d8:	89 c8                	mov    eax,ecx
c00141da:	f7 f5                	div    ebp
c00141dc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00141e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141e5:	31 d2                	xor    edx,edx
c00141e7:	89 c8                	mov    eax,ecx
c00141e9:	f7 f5                	div    ebp
c00141eb:	31 d2                	xor    edx,edx
c00141ed:	01 c3                	add    ebx,eax
c00141ef:	89 c8                	mov    eax,ecx
c00141f1:	f7 f7                	div    edi
c00141f3:	bf 99 00 00 00       	mov    edi,0x99
c00141f8:	29 c3                	sub    ebx,eax
c00141fa:	31 d2                	xor    edx,edx
c00141fc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014204:	29 c3                	sub    ebx,eax
c0014206:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014209:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001420c:	bb 05 00 00 00       	mov    ebx,0x5
c0014211:	83 c1 02             	add    ecx,0x2
c0014214:	89 c8                	mov    eax,ecx
c0014216:	f7 f7                	div    edi
c0014218:	31 d2                	xor    edx,edx
c001421a:	89 c7                	mov    edi,eax
c001421c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014222:	83 c0 02             	add    eax,0x2
c0014225:	f7 f3                	div    ebx
c0014227:	89 eb                	mov    ebx,ebp
c0014229:	29 c3                	sub    ebx,eax
c001422b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014231:	88 1e                	mov    BYTE PTR [esi],bl
c0014233:	19 c0                	sbb    eax,eax
c0014235:	31 d2                	xor    edx,edx
c0014237:	83 e0 0c             	and    eax,0xc
c001423a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001423e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014246:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001424a:	83 f9 01             	cmp    ecx,0x1
c001424d:	0f 96 c2             	setbe  dl
c0014250:	41                   	inc    ecx
c0014251:	01 d0                	add    eax,edx
c0014253:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014256:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001425a:	83 c4 1c             	add    esp,0x1c
c001425d:	89 f0                	mov    eax,esi
c001425f:	5b                   	pop    ebx
c0014260:	5e                   	pop    esi
c0014261:	5f                   	pop    edi
c0014262:	5d                   	pop    ebp
c0014263:	c2 04 00             	ret    0x4

c0014266 <Clock::timeInDatetimeLocal()>:
c0014266:	53                   	push   ebx
c0014267:	83 ec 14             	sub    esp,0x14
c001426a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001426e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014272:	e8 83 fc ff ff       	call   c0013efa <Clock::timeInSecondsLocal()>
c0014277:	83 c4 0c             	add    esp,0xc
c001427a:	52                   	push   edx
c001427b:	50                   	push   eax
c001427c:	53                   	push   ebx
c001427d:	e8 a0 fe ff ff       	call   c0014122 <secondsToDatetime(unsigned long long)>
c0014282:	89 d8                	mov    eax,ebx
c0014284:	83 c4 14             	add    esp,0x14
c0014287:	5b                   	pop    ebx
c0014288:	c2 04 00             	ret    0x4
c001428b:	90                   	nop

c001428c <Device::hibernate()>:
c001428c:	c3                   	ret    
c001428d:	90                   	nop

c001428e <Device::wake()>:
c001428e:	c3                   	ret    
c001428f:	90                   	nop

c0014290 <Device::detect()>:
c0014290:	c3                   	ret    
c0014291:	90                   	nop

c0014292 <Device::disableLegacy()>:
c0014292:	c3                   	ret    
c0014293:	90                   	nop

c0014294 <Device::powerSaving(PowerSavingLevel)>:
c0014294:	c3                   	ret    
c0014295:	90                   	nop

c0014296 <DriverlessDevice::close(int, int, void*)>:
c0014296:	31 c0                	xor    eax,eax
c0014298:	c3                   	ret    
c0014299:	90                   	nop

c001429a <DriverlessDevice::detect()>:
c001429a:	c3                   	ret    
c001429b:	90                   	nop

c001429c <DriverlessDevice::open(int, int, void*)>:
c001429c:	83 ec 18             	sub    esp,0x18
c001429f:	68 10 ad 02 c0       	push   0xc002ad10
c00142a4:	e8 bc 63 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00142a9:	83 c8 ff             	or     eax,0xffffffff
c00142ac:	83 c4 1c             	add    esp,0x1c
c00142af:	c3                   	ret    

c00142b0 <Device::~Device()>:
c00142b0:	ba 38 ad 02 c0       	mov    edx,0xc002ad38
c00142b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142b9:	89 10                	mov    DWORD PTR [eax],edx
c00142bb:	90                   	nop
c00142bc:	c3                   	ret    
c00142bd:	90                   	nop

c00142be <Device::~Device()>:
c00142be:	83 ec 0c             	sub    esp,0xc
c00142c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142c5:	e8 e6 ff ff ff       	call   c00142b0 <Device::~Device()>
c00142ca:	83 c4 04             	add    esp,0x4
c00142cd:	83 ec 08             	sub    esp,0x8
c00142d0:	68 58 01 00 00       	push   0x158
c00142d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d9:	e8 f9 eb ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00142de:	83 c4 10             	add    esp,0x10
c00142e1:	83 c4 0c             	add    esp,0xc
c00142e4:	c3                   	ret    
c00142e5:	90                   	nop

c00142e6 <Device::findAndLoadDriver()>:
c00142e6:	c3                   	ret    
c00142e7:	90                   	nop

c00142e8 <Device::preOpenPCI(PCIDeviceInfo)>:
c00142e8:	57                   	push   edi
c00142e9:	b9 09 00 00 00       	mov    ecx,0x9
c00142ee:	56                   	push   esi
c00142ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142f3:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142f7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014301:	81 c7 18 01 00 00    	add    edi,0x118
c0014307:	fc                   	cld    
c0014308:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001430a:	5e                   	pop    esi
c001430b:	5f                   	pop    edi
c001430c:	c3                   	ret    
c001430d:	90                   	nop

c001430e <Device::preOpenACPI(void*, char*, char*)>:
c001430e:	56                   	push   esi
c001430f:	53                   	push   ebx
c0014310:	83 ec 08             	sub    esp,0x8
c0014313:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014317:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001431b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014325:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014329:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001432f:	6a 1e                	push   0x1e
c0014331:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014337:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001433b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014341:	50                   	push   eax
c0014342:	e8 fd c3 fe ff       	call   c0000744 <memcpy>
c0014347:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001434b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001434f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014357:	83 c4 14             	add    esp,0x14
c001435a:	5b                   	pop    ebx
c001435b:	5e                   	pop    esi
c001435c:	e9 e3 c3 fe ff       	jmp    c0000744 <memcpy>
c0014361:	90                   	nop

c0014362 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014366:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001436b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014372:	75 0b                	jne    c001437f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014374:	8b 00                	mov    eax,DWORD PTR [eax]
c0014376:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001437a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001437d:	eb 1e                	jmp    c001439d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001437f:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0014384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001438a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014390:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014392:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014396:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001439a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001439d:	ff e0                	jmp    eax
c001439f:	90                   	nop

c00143a0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143a4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143a9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143b0:	75 0b                	jne    c00143bd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00143b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00143b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143b8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00143bb:	eb 1e                	jmp    c00143db <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00143bd:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00143c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143c8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143d8:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00143db:	ff e0                	jmp    eax
c00143dd:	90                   	nop

c00143de <Device::addChild(Device*)>:
c00143de:	53                   	push   ebx
c00143df:	83 ec 08             	sub    esp,0x8
c00143e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ea:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00143f0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00143f6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00143f8:	85 d2                	test   edx,edx
c00143fa:	74 04                	je     c0014400 <Device::addChild(Device*)+0x22>
c00143fc:	89 d3                	mov    ebx,edx
c00143fe:	eb f6                	jmp    c00143f6 <Device::addChild(Device*)+0x18>
c0014400:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014403:	83 ec 0c             	sub    esp,0xc
c0014406:	6a 08                	push   0x8
c0014408:	e8 36 b4 ff ff       	call   c000f843 <malloc>
c001440d:	89 03                	mov    DWORD PTR [ebx],eax
c001440f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014415:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001441c:	83 c4 18             	add    esp,0x18
c001441f:	5b                   	pop    ebx
c0014420:	c3                   	ret    
c0014421:	90                   	nop

c0014422 <Device::removeAllChildren()>:
c0014422:	56                   	push   esi
c0014423:	53                   	push   ebx
c0014424:	52                   	push   edx
c0014425:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014429:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001442f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014432:	74 17                	je     c001444b <Device::removeAllChildren()+0x29>
c0014434:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014437:	85 c0                	test   eax,eax
c0014439:	74 0c                	je     c0014447 <Device::removeAllChildren()+0x25>
c001443b:	83 ec 0c             	sub    esp,0xc
c001443e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014440:	50                   	push   eax
c0014441:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014444:	83 c4 10             	add    esp,0x10
c0014447:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014449:	eb e4                	jmp    c001442f <Device::removeAllChildren()+0xd>
c001444b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014451:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014457:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001445d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014464:	58                   	pop    eax
c0014465:	5b                   	pop    ebx
c0014466:	5e                   	pop    esi
c0014467:	c3                   	ret    

c0014468 <Device::hibernateAll()>:
c0014468:	53                   	push   ebx
c0014469:	83 ec 14             	sub    esp,0x14
c001446c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014470:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014472:	53                   	push   ebx
c0014473:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014476:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001447c:	83 c4 10             	add    esp,0x10
c001447f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014482:	74 0f                	je     c0014493 <Device::hibernateAll()+0x2b>
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448a:	e8 d9 ff ff ff       	call   c0014468 <Device::hibernateAll()>
c001448f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014491:	eb e9                	jmp    c001447c <Device::hibernateAll()+0x14>
c0014493:	83 c4 08             	add    esp,0x8
c0014496:	5b                   	pop    ebx
c0014497:	c3                   	ret    

c0014498 <Device::wakeAll()>:
c0014498:	53                   	push   ebx
c0014499:	83 ec 14             	sub    esp,0x14
c001449c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a2:	53                   	push   ebx
c00144a3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b2:	74 0f                	je     c00144c3 <Device::wakeAll()+0x2b>
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ba:	e8 d9 ff ff ff       	call   c0014498 <Device::wakeAll()>
c00144bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c1:	eb e9                	jmp    c00144ac <Device::wakeAll()+0x14>
c00144c3:	83 c4 08             	add    esp,0x8
c00144c6:	5b                   	pop    ebx
c00144c7:	c3                   	ret    

c00144c8 <Device::detectAll()>:
c00144c8:	53                   	push   ebx
c00144c9:	83 ec 14             	sub    esp,0x14
c00144cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d2:	53                   	push   ebx
c00144d3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00144d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144dc:	83 c4 10             	add    esp,0x10
c00144df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144e2:	74 0f                	je     c00144f3 <Device::detectAll()+0x2b>
c00144e4:	83 ec 0c             	sub    esp,0xc
c00144e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ea:	e8 d9 ff ff ff       	call   c00144c8 <Device::detectAll()>
c00144ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f1:	eb e9                	jmp    c00144dc <Device::detectAll()+0x14>
c00144f3:	83 c4 08             	add    esp,0x8
c00144f6:	5b                   	pop    ebx
c00144f7:	c3                   	ret    

c00144f8 <Device::disableLegacyAll()>:
c00144f8:	53                   	push   ebx
c00144f9:	83 ec 14             	sub    esp,0x14
c00144fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014500:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014502:	53                   	push   ebx
c0014503:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014506:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001450c:	83 c4 10             	add    esp,0x10
c001450f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014512:	74 0f                	je     c0014523 <Device::disableLegacyAll()+0x2b>
c0014514:	83 ec 0c             	sub    esp,0xc
c0014517:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001451a:	e8 d9 ff ff ff       	call   c00144f8 <Device::disableLegacyAll()>
c001451f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014521:	eb e9                	jmp    c001450c <Device::disableLegacyAll()+0x14>
c0014523:	83 c4 08             	add    esp,0x8
c0014526:	5b                   	pop    ebx
c0014527:	c3                   	ret    

c0014528 <Device::loadDriversForAll()>:
c0014528:	53                   	push   ebx
c0014529:	83 ec 08             	sub    esp,0x8
c001452c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014530:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014536:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014538:	85 db                	test   ebx,ebx
c001453a:	74 12                	je     c001454e <Device::loadDriversForAll()+0x26>
c001453c:	83 ec 0c             	sub    esp,0xc
c001453f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014542:	e8 e1 ff ff ff       	call   c0014528 <Device::loadDriversForAll()>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	89 d8                	mov    eax,ebx
c001454c:	eb e8                	jmp    c0014536 <Device::loadDriversForAll()+0xe>
c001454e:	83 c4 08             	add    esp,0x8
c0014551:	5b                   	pop    ebx
c0014552:	c3                   	ret    
c0014553:	90                   	nop

c0014554 <Device::closeAll()>:
c0014554:	53                   	push   ebx
c0014555:	83 ec 08             	sub    esp,0x8
c0014558:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001455c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001455e:	6a 00                	push   0x0
c0014560:	6a 00                	push   0x0
c0014562:	6a 00                	push   0x0
c0014564:	53                   	push   ebx
c0014565:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014568:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001456e:	83 c4 10             	add    esp,0x10
c0014571:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014574:	74 0f                	je     c0014585 <Device::closeAll()+0x31>
c0014576:	83 ec 0c             	sub    esp,0xc
c0014579:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001457c:	e8 d3 ff ff ff       	call   c0014554 <Device::closeAll()>
c0014581:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014583:	eb e9                	jmp    c001456e <Device::closeAll()+0x1a>
c0014585:	83 c4 08             	add    esp,0x8
c0014588:	5b                   	pop    ebx
c0014589:	c3                   	ret    

c001458a <Device::powerSavingAll(PowerSavingLevel)>:
c001458a:	56                   	push   esi
c001458b:	53                   	push   ebx
c001458c:	83 ec 0c             	sub    esp,0xc
c001458f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014593:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014597:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014599:	56                   	push   esi
c001459a:	53                   	push   ebx
c001459b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001459e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145a4:	83 c4 10             	add    esp,0x10
c00145a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145aa:	74 0f                	je     c00145bb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145ac:	52                   	push   edx
c00145ad:	52                   	push   edx
c00145ae:	56                   	push   esi
c00145af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145b2:	e8 d3 ff ff ff       	call   c001458a <Device::powerSavingAll(PowerSavingLevel)>
c00145b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145b9:	eb e9                	jmp    c00145a4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00145bb:	58                   	pop    eax
c00145bc:	5b                   	pop    ebx
c00145bd:	5e                   	pop    esi
c00145be:	c3                   	ret    
c00145bf:	90                   	nop

c00145c0 <Device::setName(char const*)>:
c00145c0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00145c8:	e9 67 c2 fe ff       	jmp    c0000834 <strcpy>
c00145cd:	90                   	nop

c00145ce <Device::Device(char const*)>:
c00145ce:	83 ec 1c             	sub    esp,0x1c
c00145d1:	ba 38 ad 02 c0       	mov    edx,0xc002ad38
c00145d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145da:	89 10                	mov    DWORD PTR [eax],edx
c00145dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00145ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ee:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014614:	83 ec 08             	sub    esp,0x8
c0014617:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001461b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001461f:	e8 9c ff ff ff       	call   c00145c0 <Device::setName(char const*)>
c0014624:	83 c4 10             	add    esp,0x10
c0014627:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001462f:	83 ec 0c             	sub    esp,0xc
c0014632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014636:	e8 08 b2 ff ff       	call   c000f843 <malloc>
c001463b:	83 c4 10             	add    esp,0x10
c001463e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014644:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001464b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001464f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014659:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001465f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014669:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001466f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014685:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001468c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014690:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001469a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ac:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00146b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ba:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146c4:	90                   	nop
c00146c5:	83 c4 1c             	add    esp,0x1c
c00146c8:	c3                   	ret    
c00146c9:	90                   	nop

c00146ca <Device::getName()>:
c00146ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146ce:	05 d0 00 00 00       	add    eax,0xd0
c00146d3:	c3                   	ret    

c00146d4 <DriverlessDevice::DriverlessDevice(char const*)>:
c00146d4:	83 ec 0c             	sub    esp,0xc
c00146d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146db:	83 ec 08             	sub    esp,0x8
c00146de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e2:	50                   	push   eax
c00146e3:	e8 e6 fe ff ff       	call   c00145ce <Device::Device(char const*)>
c00146e8:	83 c4 10             	add    esp,0x10
c00146eb:	ba 64 ad 02 c0       	mov    edx,0xc002ad64
c00146f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f4:	89 10                	mov    DWORD PTR [eax],edx
c00146f6:	90                   	nop
c00146f7:	83 c4 0c             	add    esp,0xc
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00146fc:	57                   	push   edi
c00146fd:	56                   	push   esi
c00146fe:	53                   	push   ebx
c00146ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014703:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014707:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001470b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014711:	75 0c                	jne    c001471f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014713:	52                   	push   edx
c0014714:	52                   	push   edx
c0014715:	53                   	push   ebx
c0014716:	56                   	push   esi
c0014717:	e8 5e 42 01 00       	call   c002897a <LinkedList<Device>::addElement(Device*)>
c001471c:	83 c4 10             	add    esp,0x10
c001471f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014725:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014728:	74 12                	je     c001473c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001472a:	50                   	push   eax
c001472b:	57                   	push   edi
c001472c:	56                   	push   esi
c001472d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014730:	e8 c7 ff ff ff       	call   c00146fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014735:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	eb e9                	jmp    c0014725 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001473c:	5b                   	pop    ebx
c001473d:	5e                   	pop    esi
c001473e:	5f                   	pop    edi
c001473f:	c3                   	ret    

c0014740 <getDevicesOfType(DeviceType)>:
c0014740:	53                   	push   ebx
c0014741:	83 ec 14             	sub    esp,0x14
c0014744:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014748:	53                   	push   ebx
c0014749:	e8 08 43 01 00       	call   c0028a56 <LinkedList<Device>::LinkedList()>
c001474e:	83 c4 0c             	add    esp,0xc
c0014751:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014755:	53                   	push   ebx
c0014756:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c001475c:	e8 9b ff ff ff       	call   c00146fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014761:	89 d8                	mov    eax,ebx
c0014763:	83 c4 18             	add    esp,0x18
c0014766:	5b                   	pop    ebx
c0014767:	c2 04 00             	ret    0x4

c001476a <HardDiskController::HardDiskController(char const*)>:
c001476a:	83 ec 0c             	sub    esp,0xc
c001476d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014771:	83 ec 08             	sub    esp,0x8
c0014774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014778:	50                   	push   eax
c0014779:	e8 50 fe ff ff       	call   c00145ce <Device::Device(char const*)>
c001477e:	83 c4 10             	add    esp,0x10
c0014781:	ba 90 ad 02 c0       	mov    edx,0xc002ad90
c0014786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478a:	89 10                	mov    DWORD PTR [eax],edx
c001478c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014790:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001479a:	90                   	nop
c001479b:	83 c4 0c             	add    esp,0xc
c001479e:	c3                   	ret    
c001479f:	90                   	nop

c00147a0 <HardDiskController::~HardDiskController()>:
c00147a0:	83 ec 0c             	sub    esp,0xc
c00147a3:	ba 90 ad 02 c0       	mov    edx,0xc002ad90
c00147a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ac:	89 10                	mov    DWORD PTR [eax],edx
c00147ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b2:	83 ec 0c             	sub    esp,0xc
c00147b5:	50                   	push   eax
c00147b6:	e8 f5 fa ff ff       	call   c00142b0 <Device::~Device()>
c00147bb:	83 c4 10             	add    esp,0x10
c00147be:	90                   	nop
c00147bf:	83 c4 0c             	add    esp,0xc
c00147c2:	c3                   	ret    
c00147c3:	90                   	nop

c00147c4 <HardDiskController::~HardDiskController()>:
c00147c4:	83 ec 0c             	sub    esp,0xc
c00147c7:	83 ec 0c             	sub    esp,0xc
c00147ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ce:	e8 cd ff ff ff       	call   c00147a0 <HardDiskController::~HardDiskController()>
c00147d3:	83 c4 10             	add    esp,0x10
c00147d6:	83 ec 08             	sub    esp,0x8
c00147d9:	68 58 01 00 00       	push   0x158
c00147de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e2:	e8 f0 e6 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	83 c4 0c             	add    esp,0xc
c00147ed:	c3                   	ret    

c00147ee <PhysicalDisk::eject()>:
c00147ee:	83 ec 18             	sub    esp,0x18
c00147f1:	68 b4 ad 02 c0       	push   0xc002adb4
c00147f6:	e8 bc e7 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00147fb:	83 c8 ff             	or     eax,0xffffffff
c00147fe:	83 c4 1c             	add    esp,0x1c
c0014801:	c3                   	ret    

c0014802 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014802:	83 ec 0c             	sub    esp,0xc
c0014805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014809:	83 ec 08             	sub    esp,0x8
c001480c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014810:	50                   	push   eax
c0014811:	e8 b8 fd ff ff       	call   c00145ce <Device::Device(char const*)>
c0014816:	83 c4 10             	add    esp,0x10
c0014819:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c001481e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014822:	89 10                	mov    DWORD PTR [eax],edx
c0014824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014828:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001482f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014833:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001483a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014850:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014864:	90                   	nop
c0014865:	83 c4 0c             	add    esp,0xc
c0014868:	c3                   	ret    
c0014869:	90                   	nop

c001486a <PhysicalDisk::startCache()>:
c001486a:	56                   	push   esi
c001486b:	53                   	push   ebx
c001486c:	83 ec 10             	sub    esp,0x10
c001486f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014873:	6a 44                	push   0x44
c0014875:	e8 c9 af ff ff       	call   c000f843 <malloc>
c001487a:	89 c6                	mov    esi,eax
c001487c:	58                   	pop    eax
c001487d:	5a                   	pop    edx
c001487e:	53                   	push   ebx
c001487f:	56                   	push   esi
c0014880:	e8 35 27 00 00       	call   c0016fba <VCache::VCache(PhysicalDisk*)>
c0014885:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001488b:	83 c4 14             	add    esp,0x14
c001488e:	5b                   	pop    ebx
c001488f:	5e                   	pop    esi
c0014890:	c3                   	ret    
c0014891:	90                   	nop

c0014892 <PhysicalDisk::~PhysicalDisk()>:
c0014892:	83 ec 0c             	sub    esp,0xc
c0014895:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c001489a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489e:	89 10                	mov    DWORD PTR [eax],edx
c00148a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a4:	83 ec 0c             	sub    esp,0xc
c00148a7:	50                   	push   eax
c00148a8:	e8 03 fa ff ff       	call   c00142b0 <Device::~Device()>
c00148ad:	83 c4 10             	add    esp,0x10
c00148b0:	90                   	nop
c00148b1:	83 c4 0c             	add    esp,0xc
c00148b4:	c3                   	ret    
c00148b5:	90                   	nop

c00148b6 <PhysicalDisk::~PhysicalDisk()>:
c00148b6:	83 ec 0c             	sub    esp,0xc
c00148b9:	83 ec 0c             	sub    esp,0xc
c00148bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148c0:	e8 cd ff ff ff       	call   c0014892 <PhysicalDisk::~PhysicalDisk()>
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	83 ec 08             	sub    esp,0x8
c00148cb:	68 6c 01 00 00       	push   0x16c
c00148d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148d4:	e8 fe e5 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	83 c4 0c             	add    esp,0xc
c00148df:	c3                   	ret    

c00148e0 <FPU::FPU(char const*)>:
c00148e0:	83 ec 0c             	sub    esp,0xc
c00148e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e7:	83 ec 08             	sub    esp,0x8
c00148ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ee:	50                   	push   eax
c00148ef:	e8 da fc ff ff       	call   c00145ce <Device::Device(char const*)>
c00148f4:	83 c4 10             	add    esp,0x10
c00148f7:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c00148fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014900:	89 10                	mov    DWORD PTR [eax],edx
c0014902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014906:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014910:	90                   	nop
c0014911:	83 c4 0c             	add    esp,0xc
c0014914:	c3                   	ret    
c0014915:	90                   	nop

c0014916 <FPU::~FPU()>:
c0014916:	83 ec 0c             	sub    esp,0xc
c0014919:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c001491e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014922:	89 10                	mov    DWORD PTR [eax],edx
c0014924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014928:	83 ec 0c             	sub    esp,0xc
c001492b:	50                   	push   eax
c001492c:	e8 7f f9 ff ff       	call   c00142b0 <Device::~Device()>
c0014931:	83 c4 10             	add    esp,0x10
c0014934:	90                   	nop
c0014935:	83 c4 0c             	add    esp,0xc
c0014938:	c3                   	ret    
c0014939:	90                   	nop

c001493a <FPU::~FPU()>:
c001493a:	83 ec 0c             	sub    esp,0xc
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014944:	e8 cd ff ff ff       	call   c0014916 <FPU::~FPU()>
c0014949:	83 c4 10             	add    esp,0x10
c001494c:	83 ec 08             	sub    esp,0x8
c001494f:	68 58 01 00 00       	push   0x158
c0014954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014958:	e8 7a e5 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	83 c4 0c             	add    esp,0xc
c0014963:	c3                   	ret    

c0014964 <setupFPU()>:
c0014964:	53                   	push   ebx
c0014965:	83 ec 08             	sub    esp,0x8
c0014968:	8b 15 e8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e8
c001496e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014975:	74 19                	je     c0014990 <setupFPU()+0x2c>
c0014977:	83 ec 0c             	sub    esp,0xc
c001497a:	68 58 01 00 00       	push   0x158
c001497f:	e8 bf ae ff ff       	call   c000f843 <malloc>
c0014984:	89 c3                	mov    ebx,eax
c0014986:	89 04 24             	mov    DWORD PTR [esp],eax
c0014989:	e8 32 0c 01 00       	call   c00255c0 <AVX::AVX()>
c001498e:	eb 5b                	jmp    c00149eb <setupFPU()+0x87>
c0014990:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014996:	84 c0                	test   al,al
c0014998:	79 19                	jns    c00149b3 <setupFPU()+0x4f>
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	68 58 01 00 00       	push   0x158
c00149a2:	e8 9c ae ff ff       	call   c000f843 <malloc>
c00149a7:	89 c3                	mov    ebx,eax
c00149a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00149ac:	e8 35 0d 01 00       	call   c00256e6 <SSE::SSE()>
c00149b1:	eb 38                	jmp    c00149eb <setupFPU()+0x87>
c00149b3:	a8 20                	test   al,0x20
c00149b5:	74 19                	je     c00149d0 <setupFPU()+0x6c>
c00149b7:	83 ec 0c             	sub    esp,0xc
c00149ba:	68 58 01 00 00       	push   0x158
c00149bf:	e8 7f ae ff ff       	call   c000f843 <malloc>
c00149c4:	89 c3                	mov    ebx,eax
c00149c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00149c9:	e8 82 0c 01 00       	call   c0025650 <MMX::MMX()>
c00149ce:	eb 1b                	jmp    c00149eb <setupFPU()+0x87>
c00149d0:	a8 10                	test   al,0x10
c00149d2:	74 1c                	je     c00149f0 <setupFPU()+0x8c>
c00149d4:	83 ec 0c             	sub    esp,0xc
c00149d7:	68 58 01 00 00       	push   0x158
c00149dc:	e8 62 ae ff ff       	call   c000f843 <malloc>
c00149e1:	89 c3                	mov    ebx,eax
c00149e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00149e6:	e8 89 0d 01 00       	call   c0025774 <x87::x87()>
c00149eb:	83 c4 10             	add    esp,0x10
c00149ee:	eb 24                	jmp    c0014a14 <setupFPU()+0xb0>
c00149f0:	83 e0 ef             	and    eax,0xffffffef
c00149f3:	83 ec 0c             	sub    esp,0xc
c00149f6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00149fc:	68 14 ae 02 c0       	push   0xc002ae14
c0014a01:	e8 b1 e5 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014a06:	0f 20 c0             	mov    eax,cr0
c0014a09:	83 c8 04             	or     eax,0x4
c0014a0c:	0f 22 c0             	mov    cr0,eax
c0014a0f:	31 db                	xor    ebx,ebx
c0014a11:	83 c4 10             	add    esp,0x10
c0014a14:	89 d8                	mov    eax,ebx
c0014a16:	83 c4 08             	add    esp,0x8
c0014a19:	5b                   	pop    ebx
c0014a1a:	c3                   	ret    
c0014a1b:	90                   	nop

c0014a1c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a24:	c1 e0 04             	shl    eax,0x4
c0014a27:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a2b:	8d 50 10             	lea    edx,[eax+0x10]
c0014a2e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a34:	74 08                	je     c0014a3e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a36:	83 c0 04             	add    eax,0x4
c0014a39:	39 d0                	cmp    eax,edx
c0014a3b:	75 f1                	jne    c0014a2e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a3d:	c3                   	ret    
c0014a3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a48:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a52:	eb e2                	jmp    c0014a36 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a54 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a54:	57                   	push   edi
c0014a55:	31 c0                	xor    eax,eax
c0014a57:	56                   	push   esi
c0014a58:	53                   	push   ebx
c0014a59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a61:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a65:	89 da                	mov    edx,ebx
c0014a67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a6b:	c1 e2 04             	shl    edx,0x4
c0014a6e:	01 ca                	add    edx,ecx
c0014a70:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a78:	74 16                	je     c0014a90 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a7a:	40                   	inc    eax
c0014a7b:	83 f8 04             	cmp    eax,0x4
c0014a7e:	75 f0                	jne    c0014a70 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a80:	c7 44 24 10 58 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae58
c0014a88:	5b                   	pop    ebx
c0014a89:	5e                   	pop    esi
c0014a8a:	5f                   	pop    edi
c0014a8b:	e9 d5 5b 00 00       	jmp    c001a665 <Krnl::panic(char const*)>
c0014a90:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a93:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a96:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a9c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014aa2:	5b                   	pop    ebx
c0014aa3:	5e                   	pop    esi
c0014aa4:	5f                   	pop    edi
c0014aa5:	c3                   	ret    

c0014aa6 <doubleFault(regs*, void*)>:
c0014aa6:	55                   	push   ebp
c0014aa7:	89 e5                	mov    ebp,esp
c0014aa9:	83 ec 08             	sub    esp,0x8
c0014aac:	83 ec 0c             	sub    esp,0xc
c0014aaf:	68 93 ae 02 c0       	push   0xc002ae93
c0014ab4:	e8 ac 5b 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0014ab9:	83 c4 10             	add    esp,0x10
c0014abc:	90                   	nop
c0014abd:	c9                   	leave  
c0014abe:	c3                   	ret    
c0014abf:	90                   	nop

c0014ac0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014ac0:	56                   	push   esi
c0014ac1:	53                   	push   ebx
c0014ac2:	50                   	push   eax
c0014ac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ac7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014acb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ad0:	75 35                	jne    c0014b07 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014ad2:	8d 43 20             	lea    eax,[ebx+0x20]
c0014ad5:	31 d2                	xor    edx,edx
c0014ad7:	89 c1                	mov    ecx,eax
c0014ad9:	c1 e1 04             	shl    ecx,0x4
c0014adc:	01 f1                	add    ecx,esi
c0014ade:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014ae6:	74 3e                	je     c0014b26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014ae8:	42                   	inc    edx
c0014ae9:	83 fa 04             	cmp    edx,0x4
c0014aec:	75 f0                	jne    c0014ade <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014aee:	83 ec 0c             	sub    esp,0xc
c0014af1:	68 d8 ae 02 c0       	push   0xc002aed8
c0014af6:	e8 6a 5b 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0014afb:	83 c4 10             	add    esp,0x10
c0014afe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b03:	5a                   	pop    edx
c0014b04:	5b                   	pop    ebx
c0014b05:	5e                   	pop    esi
c0014b06:	c3                   	ret    
c0014b07:	83 ec 0c             	sub    esp,0xc
c0014b0a:	56                   	push   esi
c0014b0b:	e8 ba fb ff ff       	call   c00146ca <Device::getName()>
c0014b10:	83 c4 10             	add    esp,0x10
c0014b13:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b16:	75 ba                	jne    c0014ad2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b18:	83 fb 0f             	cmp    ebx,0xf
c0014b1b:	7f 29                	jg     c0014b46 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b1d:	0f b6 9b 40 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd28c0]
c0014b24:	eb ac                	jmp    c0014ad2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b26:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b2d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b30:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b3a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b40:	89 d8                	mov    eax,ebx
c0014b42:	5a                   	pop    edx
c0014b43:	5b                   	pop    ebx
c0014b44:	5e                   	pop    esi
c0014b45:	c3                   	ret    
c0014b46:	83 ec 0c             	sub    esp,0xc
c0014b49:	68 a0 ae 02 c0       	push   0xc002aea0
c0014b4e:	e8 12 5b 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	e9 77 ff ff ff       	jmp    c0014ad2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b5b:	90                   	nop

c0014b5c <InterruptController::clearAllHandlers(int, bool)>:
c0014b5c:	56                   	push   esi
c0014b5d:	53                   	push   ebx
c0014b5e:	52                   	push   edx
c0014b5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b63:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b67:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b6c:	75 61                	jne    c0014bcf <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b6e:	8d 46 20             	lea    eax,[esi+0x20]
c0014b71:	c1 e6 04             	shl    esi,0x4
c0014b74:	c1 e0 04             	shl    eax,0x4
c0014b77:	01 de                	add    esi,ebx
c0014b79:	01 d8                	add    eax,ebx
c0014b7b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b85:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b8f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b99:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014ba3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014bad:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014bb7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014bc1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014bcb:	58                   	pop    eax
c0014bcc:	5b                   	pop    ebx
c0014bcd:	5e                   	pop    esi
c0014bce:	c3                   	ret    
c0014bcf:	83 ec 0c             	sub    esp,0xc
c0014bd2:	53                   	push   ebx
c0014bd3:	e8 f2 fa ff ff       	call   c00146ca <Device::getName()>
c0014bd8:	83 c4 10             	add    esp,0x10
c0014bdb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bde:	75 8e                	jne    c0014b6e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014be0:	83 fe 0f             	cmp    esi,0xf
c0014be3:	7f 09                	jg     c0014bee <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014be5:	0f b6 b6 40 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd28c0]
c0014bec:	eb 80                	jmp    c0014b6e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bee:	83 ec 0c             	sub    esp,0xc
c0014bf1:	68 14 af 02 c0       	push   0xc002af14
c0014bf6:	e8 6a 5a 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	e9 6b ff ff ff       	jmp    c0014b6e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c03:	90                   	nop

c0014c04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c04:	56                   	push   esi
c0014c05:	53                   	push   ebx
c0014c06:	52                   	push   edx
c0014c07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c0f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c14:	75 3a                	jne    c0014c50 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c1a:	8d 50 20             	lea    edx,[eax+0x20]
c0014c1d:	c1 e2 04             	shl    edx,0x4
c0014c20:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c23:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c27:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c2d:	74 0b                	je     c0014c3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c2f:	83 c0 04             	add    eax,0x4
c0014c32:	39 d0                	cmp    eax,edx
c0014c34:	75 f1                	jne    c0014c27 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c36:	58                   	pop    eax
c0014c37:	5b                   	pop    ebx
c0014c38:	5e                   	pop    esi
c0014c39:	c3                   	ret    
c0014c3a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c44:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c4e:	eb df                	jmp    c0014c2f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c50:	83 ec 0c             	sub    esp,0xc
c0014c53:	56                   	push   esi
c0014c54:	e8 71 fa ff ff       	call   c00146ca <Device::getName()>
c0014c59:	83 c4 10             	add    esp,0x10
c0014c5c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c5f:	75 b5                	jne    c0014c16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c61:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c66:	7f 11                	jg     c0014c79 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c6c:	0f b6 80 40 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd28c0]
c0014c73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c77:	eb 9d                	jmp    c0014c16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c79:	83 ec 0c             	sub    esp,0xc
c0014c7c:	68 14 af 02 c0       	push   0xc002af14
c0014c81:	e8 df 59 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	eb 8b                	jmp    c0014c16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c8b <nmiHandler(regs*, void*)>:
c0014c8b:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0014c90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c94:	e9 f3 a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c99 <int_handler>:
c0014c99:	55                   	push   ebp
c0014c9a:	57                   	push   edi
c0014c9b:	56                   	push   esi
c0014c9c:	53                   	push   ebx
c0014c9d:	83 ec 0c             	sub    esp,0xc
c0014ca0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014ca4:	80 3d 44 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031044,0x0
c0014cab:	74 0b                	je     c0014cb8 <int_handler+0x1f>
c0014cad:	fa                   	cli    
c0014cae:	f4                   	hlt    
c0014caf:	80 3d 44 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031044,0x0
c0014cb6:	75 f5                	jne    c0014cad <int_handler+0x14>
c0014cb8:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0014cbd:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cc6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ccc:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ccf:	83 f8 17             	cmp    eax,0x17
c0014cd2:	77 13                	ja     c0014ce7 <int_handler+0x4e>
c0014cd4:	83 ec 08             	sub    esp,0x8
c0014cd7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014cd9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014cdc:	0f b6 c0             	movzx  eax,al
c0014cdf:	50                   	push   eax
c0014ce0:	57                   	push   edi
c0014ce1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	83 c3 15             	add    ebx,0x15
c0014cea:	c1 e3 04             	shl    ebx,0x4
c0014ced:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014cf1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014cf8:	31 db                	xor    ebx,ebx
c0014cfa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014cfe:	85 c0                	test   eax,eax
c0014d00:	74 13                	je     c0014d15 <int_handler+0x7c>
c0014d02:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d05:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d09:	74 1c                	je     c0014d27 <int_handler+0x8e>
c0014d0b:	83 ec 08             	sub    esp,0x8
c0014d0e:	52                   	push   edx
c0014d0f:	56                   	push   esi
c0014d10:	ff d0                	call   eax
c0014d12:	83 c4 10             	add    esp,0x10
c0014d15:	43                   	inc    ebx
c0014d16:	83 fb 04             	cmp    ebx,0x4
c0014d19:	75 df                	jne    c0014cfa <int_handler+0x61>
c0014d1b:	83 c4 0c             	add    esp,0xc
c0014d1e:	31 c0                	xor    eax,eax
c0014d20:	5b                   	pop    ebx
c0014d21:	31 d2                	xor    edx,edx
c0014d23:	5e                   	pop    esi
c0014d24:	5f                   	pop    edi
c0014d25:	5d                   	pop    ebp
c0014d26:	c3                   	ret    
c0014d27:	83 ec 08             	sub    esp,0x8
c0014d2a:	52                   	push   edx
c0014d2b:	56                   	push   esi
c0014d2c:	ff d0                	call   eax
c0014d2e:	83 c4 10             	add    esp,0x10
c0014d31:	83 c4 0c             	add    esp,0xc
c0014d34:	5b                   	pop    ebx
c0014d35:	5e                   	pop    esi
c0014d36:	5f                   	pop    edi
c0014d37:	5d                   	pop    ebp
c0014d38:	c3                   	ret    
c0014d39:	90                   	nop

c0014d3a <InterruptController::InterruptController(char const*)>:
c0014d3a:	83 ec 1c             	sub    esp,0x1c
c0014d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d41:	83 ec 08             	sub    esp,0x8
c0014d44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d48:	50                   	push   eax
c0014d49:	e8 80 f8 ff ff       	call   c00145ce <Device::Device(char const*)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	ba cc b1 02 c0       	mov    edx,0xc002b1cc
c0014d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d5a:	89 10                	mov    DWORD PTR [eax],edx
c0014d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d60:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d6a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d72:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d7a:	7f 5e                	jg     c0014dda <InterruptController::InterruptController(char const*)+0xa0>
c0014d7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d84:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d89:	7f 49                	jg     c0014dd4 <InterruptController::InterruptController(char const*)+0x9a>
c0014d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d93:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d9e:	01 ca                	add    edx,ecx
c0014da0:	83 c2 54             	add    edx,0x54
c0014da3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014daf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014db3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dbe:	01 ca                	add    edx,ecx
c0014dc0:	81 c2 54 04 00 00    	add    edx,0x454
c0014dc6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dce:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014dd2:	eb b0                	jmp    c0014d84 <InterruptController::InterruptController(char const*)+0x4a>
c0014dd4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014dd8:	eb 98                	jmp    c0014d72 <InterruptController::InterruptController(char const*)+0x38>
c0014dda:	90                   	nop
c0014ddb:	83 c4 1c             	add    esp,0x1c
c0014dde:	c3                   	ret    
c0014ddf:	90                   	nop

c0014de0 <InterruptController::~InterruptController()>:
c0014de0:	83 ec 0c             	sub    esp,0xc
c0014de3:	ba cc b1 02 c0       	mov    edx,0xc002b1cc
c0014de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dec:	89 10                	mov    DWORD PTR [eax],edx
c0014dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014df2:	83 ec 0c             	sub    esp,0xc
c0014df5:	50                   	push   eax
c0014df6:	e8 b5 f4 ff ff       	call   c00142b0 <Device::~Device()>
c0014dfb:	83 c4 10             	add    esp,0x10
c0014dfe:	90                   	nop
c0014dff:	83 c4 0c             	add    esp,0xc
c0014e02:	c3                   	ret    
c0014e03:	90                   	nop

c0014e04 <InterruptController::~InterruptController()>:
c0014e04:	83 ec 0c             	sub    esp,0xc
c0014e07:	83 ec 0c             	sub    esp,0xc
c0014e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e0e:	e8 cd ff ff ff       	call   c0014de0 <InterruptController::~InterruptController()>
c0014e13:	83 c4 10             	add    esp,0x10
c0014e16:	83 ec 08             	sub    esp,0x8
c0014e19:	68 58 21 00 00       	push   0x2158
c0014e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e22:	e8 b0 e0 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	83 c4 0c             	add    esp,0xc
c0014e2d:	c3                   	ret    

c0014e2e <displayDebugInfo(regs*)>:
c0014e2e:	55                   	push   ebp
c0014e2f:	57                   	push   edi
c0014e30:	56                   	push   esi
c0014e31:	53                   	push   ebx
c0014e32:	83 ec 24             	sub    esp,0x24
c0014e35:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e39:	0f 20 c2             	mov    edx,cr0
c0014e3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e40:	0f 20 d7             	mov    edi,cr2
c0014e43:	0f 20 de             	mov    esi,cr3
c0014e46:	0f 20 e5             	mov    ebp,cr4
c0014e49:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e4c:	68 4e af 02 c0       	push   0xc002af4e
c0014e51:	e8 61 e1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014e56:	59                   	pop    ecx
c0014e57:	58                   	pop    eax
c0014e58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e5b:	68 59 af 02 c0       	push   0xc002af59
c0014e60:	e8 52 e1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014e65:	58                   	pop    eax
c0014e66:	5a                   	pop    edx
c0014e67:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e6a:	68 64 af 02 c0       	push   0xc002af64
c0014e6f:	e8 43 e1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014e74:	59                   	pop    ecx
c0014e75:	58                   	pop    eax
c0014e76:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e79:	68 6f af 02 c0       	push   0xc002af6f
c0014e7e:	e8 34 e1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014e83:	58                   	pop    eax
c0014e84:	5a                   	pop    edx
c0014e85:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e88:	68 7a af 02 c0       	push   0xc002af7a
c0014e8d:	e8 25 e1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014e92:	59                   	pop    ecx
c0014e93:	58                   	pop    eax
c0014e94:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e97:	68 85 af 02 c0       	push   0xc002af85
c0014e9c:	e8 16 e1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014ea1:	58                   	pop    eax
c0014ea2:	5a                   	pop    edx
c0014ea3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ea6:	68 90 af 02 c0       	push   0xc002af90
c0014eab:	e8 07 e1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014eb0:	59                   	pop    ecx
c0014eb1:	58                   	pop    eax
c0014eb2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014eb5:	68 9b af 02 c0       	push   0xc002af9b
c0014eba:	e8 f8 e0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014ebf:	58                   	pop    eax
c0014ec0:	5a                   	pop    edx
c0014ec1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ec4:	68 a6 af 02 c0       	push   0xc002afa6
c0014ec9:	e8 e9 e0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014ece:	59                   	pop    ecx
c0014ecf:	58                   	pop    eax
c0014ed0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ed3:	68 b5 af 02 c0       	push   0xc002afb5
c0014ed8:	e8 da e0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014edd:	58                   	pop    eax
c0014ede:	5a                   	pop    edx
c0014edf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ee2:	68 c0 af 02 c0       	push   0xc002afc0
c0014ee7:	e8 cb e0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014eec:	59                   	pop    ecx
c0014eed:	58                   	pop    eax
c0014eee:	57                   	push   edi
c0014eef:	68 cb af 02 c0       	push   0xc002afcb
c0014ef4:	e8 be e0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014ef9:	58                   	pop    eax
c0014efa:	5a                   	pop    edx
c0014efb:	56                   	push   esi
c0014efc:	68 d6 af 02 c0       	push   0xc002afd6
c0014f01:	e8 b1 e0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0014f06:	59                   	pop    ecx
c0014f07:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014f0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f12:	e8 1a be ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c0014f17:	58                   	pop    eax
c0014f18:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f1b:	5a                   	pop    edx
c0014f1c:	c1 e0 05             	shl    eax,0x5
c0014f1f:	05 a0 d4 02 c0       	add    eax,0xc002d4a0
c0014f24:	50                   	push   eax
c0014f25:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014f2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f30:	e8 1b c2 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014f35:	59                   	pop    ecx
c0014f36:	58                   	pop    eax
c0014f37:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014f3c:	68 e1 af 02 c0       	push   0xc002afe1
c0014f41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f47:	e8 04 c2 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014f4c:	58                   	pop    eax
c0014f4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f52:	5a                   	pop    edx
c0014f53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f56:	83 c0 0c             	add    eax,0xc
c0014f59:	50                   	push   eax
c0014f5a:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014f5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f65:	e8 e6 c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014f6a:	59                   	pop    ecx
c0014f6b:	58                   	pop    eax
c0014f6c:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014f71:	68 ea af 02 c0       	push   0xc002afea
c0014f76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7c:	e8 cf c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014f81:	58                   	pop    eax
c0014f82:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014f87:	5a                   	pop    edx
c0014f88:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f91:	e8 e0 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0014f96:	59                   	pop    ecx
c0014f97:	58                   	pop    eax
c0014f98:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014f9d:	68 f2 af 02 c0       	push   0xc002aff2
c0014fa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa8:	e8 a3 c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014fad:	58                   	pop    eax
c0014fae:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014fb3:	5a                   	pop    edx
c0014fb4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbd:	e8 b4 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0014fc2:	59                   	pop    ecx
c0014fc3:	58                   	pop    eax
c0014fc4:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014fc9:	68 fa af 02 c0       	push   0xc002affa
c0014fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd4:	e8 77 c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014fd9:	58                   	pop    eax
c0014fda:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014fdf:	5a                   	pop    edx
c0014fe0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014fe3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe9:	e8 88 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0014fee:	59                   	pop    ecx
c0014fef:	58                   	pop    eax
c0014ff0:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0014ff5:	68 02 b0 02 c0       	push   0xc002b002
c0014ffa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015000:	e8 4b c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015005:	58                   	pop    eax
c0015006:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001500b:	5a                   	pop    edx
c001500c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001500f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015015:	e8 5c c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001501a:	59                   	pop    ecx
c001501b:	58                   	pop    eax
c001501c:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015021:	68 0a b0 02 c0       	push   0xc002b00a
c0015026:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502c:	e8 1f c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015031:	58                   	pop    eax
c0015032:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015037:	5a                   	pop    edx
c0015038:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001503b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015041:	e8 30 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015046:	59                   	pop    ecx
c0015047:	58                   	pop    eax
c0015048:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001504d:	68 12 b0 02 c0       	push   0xc002b012
c0015052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015058:	e8 f3 c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001505d:	58                   	pop    eax
c001505e:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015063:	5a                   	pop    edx
c0015064:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015067:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506d:	e8 04 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015072:	59                   	pop    ecx
c0015073:	58                   	pop    eax
c0015074:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015079:	68 1a b0 02 c0       	push   0xc002b01a
c001507e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015084:	e8 c7 c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015089:	58                   	pop    eax
c001508a:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001508f:	5a                   	pop    edx
c0015090:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015094:	52                   	push   edx
c0015095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509b:	e8 d6 c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00150a0:	59                   	pop    ecx
c00150a1:	58                   	pop    eax
c00150a2:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00150a7:	68 23 b0 02 c0       	push   0xc002b023
c00150ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b2:	e8 99 c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00150b7:	58                   	pop    eax
c00150b8:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00150bd:	5a                   	pop    edx
c00150be:	57                   	push   edi
c00150bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c5:	e8 ac c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00150ca:	59                   	pop    ecx
c00150cb:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00150d0:	5f                   	pop    edi
c00150d1:	68 2b b0 02 c0       	push   0xc002b02b
c00150d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150dc:	e8 6f c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00150e1:	58                   	pop    eax
c00150e2:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00150e7:	5a                   	pop    edx
c00150e8:	56                   	push   esi
c00150e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ef:	e8 82 c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00150f4:	59                   	pop    ecx
c00150f5:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00150fa:	5e                   	pop    esi
c00150fb:	68 33 b0 02 c0       	push   0xc002b033
c0015100:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015106:	e8 45 c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001510b:	5f                   	pop    edi
c001510c:	58                   	pop    eax
c001510d:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015112:	55                   	push   ebp
c0015113:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015119:	e8 58 c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001511e:	58                   	pop    eax
c001511f:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015124:	5a                   	pop    edx
c0015125:	68 3b b0 02 c0       	push   0xc002b03b
c001512a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015130:	e8 1b c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015135:	0f 21 c0             	mov    eax,db0
c0015138:	59                   	pop    ecx
c0015139:	5e                   	pop    esi
c001513a:	50                   	push   eax
c001513b:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015146:	e8 2b c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001514b:	5f                   	pop    edi
c001514c:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015151:	5d                   	pop    ebp
c0015152:	68 44 b0 02 c0       	push   0xc002b044
c0015157:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515d:	e8 ee bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015162:	0f 21 c8             	mov    eax,db1
c0015165:	5a                   	pop    edx
c0015166:	59                   	pop    ecx
c0015167:	50                   	push   eax
c0015168:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001516d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015173:	e8 fe bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015178:	5e                   	pop    esi
c0015179:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001517e:	5f                   	pop    edi
c001517f:	68 4c b0 02 c0       	push   0xc002b04c
c0015184:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518a:	e8 c1 bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001518f:	0f 21 d0             	mov    eax,db2
c0015192:	5d                   	pop    ebp
c0015193:	5a                   	pop    edx
c0015194:	50                   	push   eax
c0015195:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001519a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a0:	e8 d1 bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00151a5:	59                   	pop    ecx
c00151a6:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00151ab:	5e                   	pop    esi
c00151ac:	68 54 b0 02 c0       	push   0xc002b054
c00151b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b7:	e8 94 bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00151bc:	0f 21 d8             	mov    eax,db3
c00151bf:	5f                   	pop    edi
c00151c0:	5d                   	pop    ebp
c00151c1:	50                   	push   eax
c00151c2:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00151c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cd:	e8 a4 bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00151d2:	58                   	pop    eax
c00151d3:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00151d8:	5a                   	pop    edx
c00151d9:	68 5c b0 02 c0       	push   0xc002b05c
c00151de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e4:	e8 67 bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00151e9:	0f 21 f0             	mov    eax,db6
c00151ec:	59                   	pop    ecx
c00151ed:	5e                   	pop    esi
c00151ee:	50                   	push   eax
c00151ef:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c00151f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151fa:	e8 77 bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00151ff:	5f                   	pop    edi
c0015200:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015205:	5d                   	pop    ebp
c0015206:	68 64 b0 02 c0       	push   0xc002b064
c001520b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015211:	e8 3a bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015216:	0f 21 f8             	mov    eax,db7
c0015219:	5a                   	pop    edx
c001521a:	59                   	pop    ecx
c001521b:	50                   	push   eax
c001521c:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015221:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015227:	e8 4a bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001522c:	5e                   	pop    esi
c001522d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015230:	e8 12 85 00 00       	call   c001d747 <Thr::getDriverNameFromAddress(unsigned long)>
c0015235:	83 c4 10             	add    esp,0x10
c0015238:	85 c0                	test   eax,eax
c001523a:	74 7d                	je     c00152b9 <displayDebugInfo(regs*)+0x48b>
c001523c:	89 c6                	mov    esi,eax
c001523e:	50                   	push   eax
c001523f:	50                   	push   eax
c0015240:	56                   	push   esi
c0015241:	68 6c b0 02 c0       	push   0xc002b06c
c0015246:	e8 6c dd ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001524b:	5a                   	pop    edx
c001524c:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015251:	59                   	pop    ecx
c0015252:	68 7a b0 02 c0       	push   0xc002b07a
c0015257:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001525d:	e8 ee be ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015262:	5f                   	pop    edi
c0015263:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015268:	5d                   	pop    ebp
c0015269:	56                   	push   esi
c001526a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015270:	e8 db be ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015275:	58                   	pop    eax
c0015276:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001527b:	5a                   	pop    edx
c001527c:	68 86 b0 02 c0       	push   0xc002b086
c0015281:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015287:	e8 c4 be ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001528c:	59                   	pop    ecx
c001528d:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0015292:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015298:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001529b:	e8 de 84 00 00       	call   c001d77e <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152a0:	5b                   	pop    ebx
c00152a1:	5d                   	pop    ebp
c00152a2:	50                   	push   eax
c00152a3:	57                   	push   edi
c00152a4:	e8 cd be ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00152a9:	58                   	pop    eax
c00152aa:	5a                   	pop    edx
c00152ab:	56                   	push   esi
c00152ac:	68 92 b0 02 c0       	push   0xc002b092
c00152b1:	e8 01 dd ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00152b6:	83 c4 10             	add    esp,0x10
c00152b9:	fa                   	cli    
c00152ba:	f4                   	hlt    
c00152bb:	eb fe                	jmp    c00152bb <displayDebugInfo(regs*)+0x48d>

c00152bd <x87EmulHandler(regs*, void*)>:
c00152bd:	53                   	push   ebx
c00152be:	83 ec 14             	sub    esp,0x14
c00152c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152c5:	53                   	push   ebx
c00152c6:	e8 23 a8 00 00       	call   c001faee <Vm::x87Handler(regs*)>
c00152cb:	83 c4 10             	add    esp,0x10
c00152ce:	84 c0                	test   al,al
c00152d0:	74 05                	je     c00152d7 <x87EmulHandler(regs*, void*)+0x1a>
c00152d2:	83 c4 08             	add    esp,0x8
c00152d5:	5b                   	pop    ebx
c00152d6:	c3                   	ret    
c00152d7:	83 ec 0c             	sub    esp,0xc
c00152da:	68 a2 b0 02 c0       	push   0xc002b0a2
c00152df:	e8 d3 dc ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00152e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152e7:	e8 42 fb ff ff       	call   c0014e2e <displayDebugInfo(regs*)>

c00152ec <gpFault(regs*, void*)>:
c00152ec:	53                   	push   ebx
c00152ed:	83 ec 14             	sub    esp,0x14
c00152f0:	c7 05 98 e6 02 c0 6b ee 01 c0 	mov    DWORD PTR ds:0xc002e698,0xc001ee6b
c00152fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152fe:	53                   	push   ebx
c00152ff:	e8 67 9b 00 00       	call   c001ee6b <Vm::faultHandler(regs*)>
c0015304:	83 c4 10             	add    esp,0x10
c0015307:	84 c0                	test   al,al
c0015309:	74 05                	je     c0015310 <gpFault(regs*, void*)+0x24>
c001530b:	83 c4 08             	add    esp,0x8
c001530e:	5b                   	pop    ebx
c001530f:	c3                   	ret    
c0015310:	83 ec 0c             	sub    esp,0xc
c0015313:	68 b8 b0 02 c0       	push   0xc002b0b8
c0015318:	e8 9a dc ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001531d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015320:	e8 09 fb ff ff       	call   c0014e2e <displayDebugInfo(regs*)>

c0015325 <pgFault(regs*, void*)>:
c0015325:	83 ec 18             	sub    esp,0x18
c0015328:	68 d3 b0 02 c0       	push   0xc002b0d3
c001532d:	e8 85 dc ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0015332:	0f 20 d0             	mov    eax,cr2
c0015335:	5a                   	pop    edx
c0015336:	59                   	pop    ecx
c0015337:	50                   	push   eax
c0015338:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001533d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015340:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015346:	e8 cb d7 ff ff       	call   c0012b16 <VAS::tryLoadBackOffDisk(unsigned long)>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	84 c0                	test   al,al
c0015350:	74 04                	je     c0015356 <pgFault(regs*, void*)+0x31>
c0015352:	83 c4 0c             	add    esp,0xc
c0015355:	c3                   	ret    
c0015356:	83 ec 0c             	sub    esp,0xc
c0015359:	68 e0 b0 02 c0       	push   0xc002b0e0
c001535e:	e8 54 dc ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0015363:	58                   	pop    eax
c0015364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015368:	e8 c1 fa ff ff       	call   c0014e2e <displayDebugInfo(regs*)>

c001536d <otherISRHandler(regs*, void*)>:
c001536d:	53                   	push   ebx
c001536e:	83 ec 0c             	sub    esp,0xc
c0015371:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015375:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015378:	50                   	push   eax
c0015379:	50                   	push   eax
c001537a:	68 fe b0 02 c0       	push   0xc002b0fe
c001537f:	e8 33 dc ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0015384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015387:	e8 a2 fa ff ff       	call   c0014e2e <displayDebugInfo(regs*)>

c001538c <opcodeFault(regs*, void*)>:
c001538c:	55                   	push   ebp
c001538d:	89 e5                	mov    ebp,esp
c001538f:	56                   	push   esi
c0015390:	53                   	push   ebx
c0015391:	83 ec 40             	sub    esp,0x40
c0015394:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0015399:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001539f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153a5:	84 c0                	test   al,al
c00153a7:	74 24                	je     c00153cd <opcodeFault(regs*, void*)+0x41>
c00153a9:	83 ec 0c             	sub    esp,0xc
c00153ac:	68 1c b1 02 c0       	push   0xc002b11c
c00153b1:	e8 01 dc ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00153b6:	83 c4 10             	add    esp,0x10
c00153b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153bf:	8d 50 19             	lea    edx,[eax+0x19]
c00153c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c8:	e9 be 05 00 00       	jmp    c001598b <opcodeFault(regs*, void*)+0x5ff>
c00153cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153d6:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00153da:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00153de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ea:	8a 00                	mov    al,BYTE PTR [eax]
c00153ec:	3c f0                	cmp    al,0xf0
c00153ee:	75 17                	jne    c0015407 <opcodeFault(regs*, void*)+0x7b>
c00153f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f9:	8d 50 01             	lea    edx,[eax+0x1]
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015402:	e9 da 00 00 00       	jmp    c00154e1 <opcodeFault(regs*, void*)+0x155>
c0015407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540a:	8a 00                	mov    al,BYTE PTR [eax]
c001540c:	3c f2                	cmp    al,0xf2
c001540e:	74 09                	je     c0015419 <opcodeFault(regs*, void*)+0x8d>
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	8a 00                	mov    al,BYTE PTR [eax]
c0015415:	3c f3                	cmp    al,0xf3
c0015417:	75 1b                	jne    c0015434 <opcodeFault(regs*, void*)+0xa8>
c0015419:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001541d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015423:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015426:	8d 50 01             	lea    edx,[eax+0x1]
c0015429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001542f:	e9 ad 00 00 00       	jmp    c00154e1 <opcodeFault(regs*, void*)+0x155>
c0015434:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015437:	8a 00                	mov    al,BYTE PTR [eax]
c0015439:	3c 66                	cmp    al,0x66
c001543b:	75 1f                	jne    c001545c <opcodeFault(regs*, void*)+0xd0>
c001543d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015441:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015445:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001544e:	8d 50 01             	lea    edx,[eax+0x1]
c0015451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015454:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015457:	e9 85 00 00 00       	jmp    c00154e1 <opcodeFault(regs*, void*)+0x155>
c001545c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545f:	8a 00                	mov    al,BYTE PTR [eax]
c0015461:	3c 67                	cmp    al,0x67
c0015463:	75 18                	jne    c001547d <opcodeFault(regs*, void*)+0xf1>
c0015465:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015469:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001546c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015472:	8d 50 01             	lea    edx,[eax+0x1]
c0015475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015478:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001547b:	eb 64                	jmp    c00154e1 <opcodeFault(regs*, void*)+0x155>
c001547d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015480:	8a 00                	mov    al,BYTE PTR [eax]
c0015482:	3c 2e                	cmp    al,0x2e
c0015484:	74 09                	je     c001548f <opcodeFault(regs*, void*)+0x103>
c0015486:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015489:	8a 00                	mov    al,BYTE PTR [eax]
c001548b:	3c 3e                	cmp    al,0x3e
c001548d:	75 18                	jne    c00154a7 <opcodeFault(regs*, void*)+0x11b>
c001548f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015493:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015499:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001549c:	8d 50 01             	lea    edx,[eax+0x1]
c001549f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154a5:	eb 3a                	jmp    c00154e1 <opcodeFault(regs*, void*)+0x155>
c00154a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154aa:	8a 00                	mov    al,BYTE PTR [eax]
c00154ac:	3c 36                	cmp    al,0x36
c00154ae:	74 1b                	je     c00154cb <opcodeFault(regs*, void*)+0x13f>
c00154b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b3:	8a 00                	mov    al,BYTE PTR [eax]
c00154b5:	3c 26                	cmp    al,0x26
c00154b7:	74 12                	je     c00154cb <opcodeFault(regs*, void*)+0x13f>
c00154b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bc:	8a 00                	mov    al,BYTE PTR [eax]
c00154be:	3c 64                	cmp    al,0x64
c00154c0:	74 09                	je     c00154cb <opcodeFault(regs*, void*)+0x13f>
c00154c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c5:	8a 00                	mov    al,BYTE PTR [eax]
c00154c7:	3c 65                	cmp    al,0x65
c00154c9:	75 16                	jne    c00154e1 <opcodeFault(regs*, void*)+0x155>
c00154cb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154cf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d8:	8d 50 01             	lea    edx,[eax+0x1]
c00154db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e4:	8a 00                	mov    al,BYTE PTR [eax]
c00154e6:	3c 0f                	cmp    al,0xf
c00154e8:	0f 85 ad 00 00 00    	jne    c001559b <opcodeFault(regs*, void*)+0x20f>
c00154ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f1:	40                   	inc    eax
c00154f2:	8a 00                	mov    al,BYTE PTR [eax]
c00154f4:	3c c2                	cmp    al,0xc2
c00154f6:	74 0e                	je     c0015506 <opcodeFault(regs*, void*)+0x17a>
c00154f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fb:	40                   	inc    eax
c00154fc:	8a 00                	mov    al,BYTE PTR [eax]
c00154fe:	3c c3                	cmp    al,0xc3
c0015500:	0f 85 95 00 00 00    	jne    c001559b <opcodeFault(regs*, void*)+0x20f>
c0015506:	83 ec 0c             	sub    esp,0xc
c0015509:	68 3f b1 02 c0       	push   0xc002b13f
c001550e:	e8 a4 da ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0015513:	83 c4 10             	add    esp,0x10
c0015516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015519:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001551c:	8d 50 01             	lea    edx,[eax+0x1]
c001551f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015522:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015525:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015528:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552b:	8a 00                	mov    al,BYTE PTR [eax]
c001552d:	8d 50 fe             	lea    edx,[eax-0x2]
c0015530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015533:	88 10                	mov    BYTE PTR [eax],dl
c0015535:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015538:	50                   	push   eax
c0015539:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001553c:	50                   	push   eax
c001553d:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015540:	50                   	push   eax
c0015541:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015544:	e8 e3 47 00 00       	call   c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015552:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015555:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015558:	01 d0                	add    eax,edx
c001555a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001555d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015560:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015563:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015566:	48                   	dec    eax
c0015567:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001556a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015570:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015576:	83 ec 04             	sub    esp,0x4
c0015579:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001557c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001557f:	50                   	push   eax
c0015580:	e8 2f ac fe ff       	call   c00001b4 <voodooXADD>
c0015585:	83 c4 10             	add    esp,0x10
c0015588:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001558b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001558e:	01 c2                	add    edx,eax
c0015590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015593:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015596:	e9 f0 03 00 00       	jmp    c001598b <opcodeFault(regs*, void*)+0x5ff>
c001559b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559e:	8a 00                	mov    al,BYTE PTR [eax]
c00155a0:	3c 0f                	cmp    al,0xf
c00155a2:	0f 85 8b 01 00 00    	jne    c0015733 <opcodeFault(regs*, void*)+0x3a7>
c00155a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ab:	40                   	inc    eax
c00155ac:	8a 00                	mov    al,BYTE PTR [eax]
c00155ae:	3c c7                	cmp    al,0xc7
c00155b0:	0f 86 7d 01 00 00    	jbe    c0015733 <opcodeFault(regs*, void*)+0x3a7>
c00155b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b9:	40                   	inc    eax
c00155ba:	8a 00                	mov    al,BYTE PTR [eax]
c00155bc:	3c cf                	cmp    al,0xcf
c00155be:	0f 87 6f 01 00 00    	ja     c0015733 <opcodeFault(regs*, void*)+0x3a7>
c00155c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c7:	40                   	inc    eax
c00155c8:	8a 00                	mov    al,BYTE PTR [eax]
c00155ca:	83 c0 38             	add    eax,0x38
c00155cd:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00155d0:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155d4:	75 0b                	jne    c00155e1 <opcodeFault(regs*, void*)+0x255>
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155df:	eb 75                	jmp    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c00155e1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155e5:	75 0b                	jne    c00155f2 <opcodeFault(regs*, void*)+0x266>
c00155e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f0:	eb 64                	jmp    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c00155f2:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155f6:	75 0b                	jne    c0015603 <opcodeFault(regs*, void*)+0x277>
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015601:	eb 53                	jmp    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c0015603:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015607:	75 0b                	jne    c0015614 <opcodeFault(regs*, void*)+0x288>
c0015609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001560f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015612:	eb 42                	jmp    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c0015614:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015618:	75 0b                	jne    c0015625 <opcodeFault(regs*, void*)+0x299>
c001561a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015620:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015623:	eb 31                	jmp    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c0015625:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015629:	75 0b                	jne    c0015636 <opcodeFault(regs*, void*)+0x2aa>
c001562b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015631:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015634:	eb 20                	jmp    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c0015636:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001563a:	75 0b                	jne    c0015647 <opcodeFault(regs*, void*)+0x2bb>
c001563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015642:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015645:	eb 0f                	jmp    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c0015647:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001564b:	75 09                	jne    c0015656 <opcodeFault(regs*, void*)+0x2ca>
c001564d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015650:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015653:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015656:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001565a:	74 10                	je     c001566c <opcodeFault(regs*, void*)+0x2e0>
c001565c:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015663:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001566a:	eb 2d                	jmp    c0015699 <opcodeFault(regs*, void*)+0x30d>
c001566c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001566f:	c1 e0 18             	shl    eax,0x18
c0015672:	89 c2                	mov    edx,eax
c0015674:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015677:	c1 e0 08             	shl    eax,0x8
c001567a:	25 00 00 ff 00       	and    eax,0xff0000
c001567f:	09 c2                	or     edx,eax
c0015681:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015684:	c1 e8 08             	shr    eax,0x8
c0015687:	25 00 ff 00 00       	and    eax,0xff00
c001568c:	09 c2                	or     edx,eax
c001568e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015691:	c1 e8 18             	shr    eax,0x18
c0015694:	09 d0                	or     eax,edx
c0015696:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015699:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001569d:	75 0b                	jne    c00156aa <opcodeFault(regs*, void*)+0x31e>
c001569f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156a8:	eb 75                	jmp    c001571f <opcodeFault(regs*, void*)+0x393>
c00156aa:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00156ae:	75 0b                	jne    c00156bb <opcodeFault(regs*, void*)+0x32f>
c00156b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156b9:	eb 64                	jmp    c001571f <opcodeFault(regs*, void*)+0x393>
c00156bb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156bf:	75 0b                	jne    c00156cc <opcodeFault(regs*, void*)+0x340>
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156c7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156ca:	eb 53                	jmp    c001571f <opcodeFault(regs*, void*)+0x393>
c00156cc:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00156d0:	75 0b                	jne    c00156dd <opcodeFault(regs*, void*)+0x351>
c00156d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156d8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00156db:	eb 42                	jmp    c001571f <opcodeFault(regs*, void*)+0x393>
c00156dd:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00156e1:	75 0b                	jne    c00156ee <opcodeFault(regs*, void*)+0x362>
c00156e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156e9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156ec:	eb 31                	jmp    c001571f <opcodeFault(regs*, void*)+0x393>
c00156ee:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156f2:	75 0b                	jne    c00156ff <opcodeFault(regs*, void*)+0x373>
c00156f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156fd:	eb 20                	jmp    c001571f <opcodeFault(regs*, void*)+0x393>
c00156ff:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015703:	75 0b                	jne    c0015710 <opcodeFault(regs*, void*)+0x384>
c0015705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015708:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001570b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001570e:	eb 0f                	jmp    c001571f <opcodeFault(regs*, void*)+0x393>
c0015710:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015714:	75 09                	jne    c001571f <opcodeFault(regs*, void*)+0x393>
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001571c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015725:	8d 50 02             	lea    edx,[eax+0x2]
c0015728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001572e:	e9 58 02 00 00       	jmp    c001598b <opcodeFault(regs*, void*)+0x5ff>
c0015733:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015736:	8a 00                	mov    al,BYTE PTR [eax]
c0015738:	3c 0f                	cmp    al,0xf
c001573a:	0f 85 76 01 00 00    	jne    c00158b6 <opcodeFault(regs*, void*)+0x52a>
c0015740:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015743:	40                   	inc    eax
c0015744:	8a 00                	mov    al,BYTE PTR [eax]
c0015746:	3c c7                	cmp    al,0xc7
c0015748:	0f 85 68 01 00 00    	jne    c00158b6 <opcodeFault(regs*, void*)+0x52a>
c001574e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015754:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015757:	8d 50 01             	lea    edx,[eax+0x1]
c001575a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015760:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015763:	50                   	push   eax
c0015764:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015767:	50                   	push   eax
c0015768:	8d 45 bc             	lea    eax,[ebp-0x44]
c001576b:	50                   	push   eax
c001576c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001576f:	e8 b8 45 00 00       	call   c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015774:	83 c4 10             	add    esp,0x10
c0015777:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001577a:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001577d:	83 f0 01             	xor    eax,0x1
c0015780:	84 c0                	test   al,al
c0015782:	0f 84 2e 01 00 00    	je     c00158b6 <opcodeFault(regs*, void*)+0x52a>
c0015788:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001578b:	3c 01                	cmp    al,0x1
c001578d:	0f 85 23 01 00 00    	jne    c00158b6 <opcodeFault(regs*, void*)+0x52a>
c0015793:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015796:	83 f0 01             	xor    eax,0x1
c0015799:	84 c0                	test   al,al
c001579b:	0f 84 15 01 00 00    	je     c00158b6 <opcodeFault(regs*, void*)+0x52a>
c00157a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157a7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157aa:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00157b1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157b4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157b7:	89 c2                	mov    edx,eax
c00157b9:	b8 00 00 00 00       	mov    eax,0x0
c00157be:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157c1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00157ca:	ba 00 00 00 00       	mov    edx,0x0
c00157cf:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00157d2:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157db:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157de:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157e5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157e8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157eb:	89 c2                	mov    edx,eax
c00157ed:	b8 00 00 00 00       	mov    eax,0x0
c00157f2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157f5:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00157f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157fe:	ba 00 00 00 00       	mov    edx,0x0
c0015803:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015806:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015809:	e8 4c 86 00 00       	call   c001de5a <lockScheduler()>
c001580e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015811:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015814:	8b 00                	mov    eax,DWORD PTR [eax]
c0015816:	89 c1                	mov    ecx,eax
c0015818:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001581b:	89 cb                	mov    ebx,ecx
c001581d:	89 d0                	mov    eax,edx
c001581f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015822:	89 c6                	mov    esi,eax
c0015824:	89 f0                	mov    eax,esi
c0015826:	09 d8                	or     eax,ebx
c0015828:	85 c0                	test   eax,eax
c001582a:	75 21                	jne    c001584d <opcodeFault(regs*, void*)+0x4c1>
c001582c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001582f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015832:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015835:	89 01                	mov    DWORD PTR [ecx],eax
c0015837:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015840:	83 c8 40             	or     eax,0x40
c0015843:	89 c2                	mov    edx,eax
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001584b:	eb 3e                	jmp    c001588b <opcodeFault(regs*, void*)+0x4ff>
c001584d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015850:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015853:	8b 00                	mov    eax,DWORD PTR [eax]
c0015855:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015858:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001585b:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015864:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015867:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001586a:	89 d0                	mov    eax,edx
c001586c:	31 d2                	xor    edx,edx
c001586e:	89 c3                	mov    ebx,eax
c0015870:	89 d6                	mov    esi,edx
c0015872:	89 da                	mov    edx,ebx
c0015874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015877:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001587a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015880:	83 e0 bf             	and    eax,0xffffffbf
c0015883:	89 c2                	mov    edx,eax
c0015885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015888:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001588b:	e8 cc 85 00 00       	call   c001de5c <unlockScheduler()>
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015896:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015899:	01 c2                	add    edx,eax
c001589b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158a1:	83 ec 0c             	sub    esp,0xc
c00158a4:	68 4e b1 02 c0       	push   0xc002b14e
c00158a9:	e8 09 d7 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	e9 d5 00 00 00       	jmp    c001598b <opcodeFault(regs*, void*)+0x5ff>
c00158b6:	83 ec 0c             	sub    esp,0xc
c00158b9:	68 61 b1 02 c0       	push   0xc002b161
c00158be:	e8 f4 d6 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158d2:	c1 e0 04             	shl    eax,0x4
c00158d5:	01 d0                	add    eax,edx
c00158d7:	83 c0 03             	add    eax,0x3
c00158da:	8a 00                	mov    al,BYTE PTR [eax]
c00158dc:	0f b6 d8             	movzx  ebx,al
c00158df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158eb:	c1 e0 04             	shl    eax,0x4
c00158ee:	01 d0                	add    eax,edx
c00158f0:	83 c0 02             	add    eax,0x2
c00158f3:	8a 00                	mov    al,BYTE PTR [eax]
c00158f5:	0f b6 c8             	movzx  ecx,al
c00158f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015901:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015904:	c1 e0 04             	shl    eax,0x4
c0015907:	01 d0                	add    eax,edx
c0015909:	40                   	inc    eax
c001590a:	8a 00                	mov    al,BYTE PTR [eax]
c001590c:	0f b6 d0             	movzx  edx,al
c001590f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015912:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015918:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001591b:	c1 e0 04             	shl    eax,0x4
c001591e:	01 f0                	add    eax,esi
c0015920:	8a 00                	mov    al,BYTE PTR [eax]
c0015922:	0f b6 c0             	movzx  eax,al
c0015925:	83 ec 0c             	sub    esp,0xc
c0015928:	53                   	push   ebx
c0015929:	51                   	push   ecx
c001592a:	52                   	push   edx
c001592b:	50                   	push   eax
c001592c:	68 74 b1 02 c0       	push   0xc002b174
c0015931:	e8 81 d6 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0015936:	83 c4 20             	add    esp,0x20
c0015939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001593f:	83 c0 03             	add    eax,0x3
c0015942:	8a 00                	mov    al,BYTE PTR [eax]
c0015944:	0f b6 d8             	movzx  ebx,al
c0015947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001594d:	83 c0 02             	add    eax,0x2
c0015950:	8a 00                	mov    al,BYTE PTR [eax]
c0015952:	0f b6 c8             	movzx  ecx,al
c0015955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015958:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001595b:	40                   	inc    eax
c001595c:	8a 00                	mov    al,BYTE PTR [eax]
c001595e:	0f b6 d0             	movzx  edx,al
c0015961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015964:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015967:	8a 00                	mov    al,BYTE PTR [eax]
c0015969:	0f b6 c0             	movzx  eax,al
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	53                   	push   ebx
c0015970:	51                   	push   ecx
c0015971:	52                   	push   edx
c0015972:	50                   	push   eax
c0015973:	68 9c b1 02 c0       	push   0xc002b19c
c0015978:	e8 3a d6 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001597d:	83 c4 20             	add    esp,0x20
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015986:	e8 a3 f4 ff ff       	call   c0014e2e <displayDebugInfo(regs*)>
c001598b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001598e:	5b                   	pop    ebx
c001598f:	5e                   	pop    esi
c0015990:	5d                   	pop    ebp
c0015991:	c3                   	ret    

c0015992 <displayProgramFault(char const*)>:
c0015992:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015997:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001599a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159a0:	85 c0                	test   eax,eax
c00159a2:	74 15                	je     c00159b9 <displayProgramFault(char const*)+0x27>
c00159a4:	83 ec 0c             	sub    esp,0xc
c00159a7:	6a 04                	push   0x4
c00159a9:	6a 0f                	push   0xf
c00159ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159af:	50                   	push   eax
c00159b0:	e8 5d b4 ff ff       	call   c0010e12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00159b5:	83 c4 1c             	add    esp,0x1c
c00159b8:	c3                   	ret    
c00159b9:	c3                   	ret    

c00159ba <setupInterruptController()>:
c00159ba:	55                   	push   ebp
c00159bb:	89 e5                	mov    ebp,esp
c00159bd:	53                   	push   ebx
c00159be:	83 ec 24             	sub    esp,0x24
c00159c1:	b8 00 00 00 00       	mov    eax,0x0
c00159c6:	85 c0                	test   eax,eax
c00159c8:	0f 95 c0             	setne  al
c00159cb:	84 c0                	test   al,al
c00159cd:	74 5b                	je     c0015a2a <setupInterruptController()+0x70>
c00159cf:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00159d6:	83 ec 0c             	sub    esp,0xc
c00159d9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00159dc:	e8 62 9e ff ff       	call   c000f843 <malloc>
c00159e1:	83 c4 10             	add    esp,0x10
c00159e4:	89 c3                	mov    ebx,eax
c00159e6:	83 ec 0c             	sub    esp,0xc
c00159e9:	53                   	push   ebx
c00159ea:	e8 c3 ff 00 00       	call   c00259b2 <APIC::APIC()>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00159f5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00159f8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fd:	83 c0 08             	add    eax,0x8
c0015a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a02:	6a 00                	push   0x0
c0015a04:	6a 00                	push   0x0
c0015a06:	6a 00                	push   0x0
c0015a08:	52                   	push   edx
c0015a09:	ff d0                	call   eax
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0015a13:	83 ec 08             	sub    esp,0x8
c0015a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a19:	50                   	push   eax
c0015a1a:	e8 bf e9 ff ff       	call   c00143de <Device::addChild(Device*)>
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a25:	e9 52 03 00 00       	jmp    c0015d7c <setupInterruptController()+0x3c2>
c0015a2a:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0015a2f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a35:	83 e0 01             	and    eax,0x1
c0015a38:	84 c0                	test   al,al
c0015a3a:	0f 95 c0             	setne  al
c0015a3d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a40:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a47:	83 ec 0c             	sub    esp,0xc
c0015a4a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a4d:	e8 f1 9d ff ff       	call   c000f843 <malloc>
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	89 c3                	mov    ebx,eax
c0015a57:	83 ec 0c             	sub    esp,0xc
c0015a5a:	53                   	push   ebx
c0015a5b:	e8 aa 04 01 00       	call   c0025f0a <PIC::PIC()>
c0015a60:	83 c4 10             	add    esp,0x10
c0015a63:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6e:	83 c0 08             	add    eax,0x8
c0015a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a73:	6a 00                	push   0x0
c0015a75:	6a 00                	push   0x0
c0015a77:	6a 00                	push   0x0
c0015a79:	52                   	push   edx
c0015a7a:	ff d0                	call   eax
c0015a7c:	83 c4 10             	add    esp,0x10
c0015a7f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a83:	74 73                	je     c0015af8 <setupInterruptController()+0x13e>
c0015a85:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8d:	83 c0 0c             	add    eax,0xc
c0015a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a92:	6a 00                	push   0x0
c0015a94:	6a 00                	push   0x0
c0015a96:	6a 00                	push   0x0
c0015a98:	52                   	push   edx
c0015a99:	ff d0                	call   eax
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015aa2:	74 15                	je     c0015ab9 <setupInterruptController()+0xff>
c0015aa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa9:	83 c0 04             	add    eax,0x4
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	83 ec 0c             	sub    esp,0xc
c0015ab1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab4:	ff d0                	call   eax
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015ac0:	83 ec 0c             	sub    esp,0xc
c0015ac3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015ac6:	e8 78 9d ff ff       	call   c000f843 <malloc>
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	89 c3                	mov    ebx,eax
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	53                   	push   ebx
c0015ad4:	e8 d9 fe 00 00       	call   c00259b2 <APIC::APIC()>
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015adf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae7:	83 c0 08             	add    eax,0x8
c0015aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aec:	6a 00                	push   0x0
c0015aee:	6a 00                	push   0x0
c0015af0:	6a 00                	push   0x0
c0015af2:	52                   	push   edx
c0015af3:	ff d0                	call   eax
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0015afd:	83 ec 08             	sub    esp,0x8
c0015b00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b03:	50                   	push   eax
c0015b04:	e8 d5 e8 ff ff       	call   c00143de <Device::addChild(Device*)>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b11:	83 c0 24             	add    eax,0x24
c0015b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b16:	6a 00                	push   0x0
c0015b18:	68 6d 53 01 c0       	push   0xc001536d
c0015b1d:	6a 00                	push   0x0
c0015b1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b22:	ff d0                	call   eax
c0015b24:	83 c4 10             	add    esp,0x10
c0015b27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2c:	83 c0 24             	add    eax,0x24
c0015b2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b31:	6a 00                	push   0x0
c0015b33:	68 6d 53 01 c0       	push   0xc001536d
c0015b38:	6a 01                	push   0x1
c0015b3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3d:	ff d0                	call   eax
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b47:	83 c0 24             	add    eax,0x24
c0015b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4c:	6a 00                	push   0x0
c0015b4e:	68 8b 4c 01 c0       	push   0xc0014c8b
c0015b53:	6a 02                	push   0x2
c0015b55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b58:	ff d0                	call   eax
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b62:	83 c0 24             	add    eax,0x24
c0015b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b67:	6a 00                	push   0x0
c0015b69:	68 6d 53 01 c0       	push   0xc001536d
c0015b6e:	6a 03                	push   0x3
c0015b70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b73:	ff d0                	call   eax
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7d:	83 c0 24             	add    eax,0x24
c0015b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b82:	6a 00                	push   0x0
c0015b84:	68 6d 53 01 c0       	push   0xc001536d
c0015b89:	6a 04                	push   0x4
c0015b8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8e:	ff d0                	call   eax
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	83 c0 24             	add    eax,0x24
c0015b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9d:	6a 00                	push   0x0
c0015b9f:	68 6d 53 01 c0       	push   0xc001536d
c0015ba4:	6a 05                	push   0x5
c0015ba6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba9:	ff d0                	call   eax
c0015bab:	83 c4 10             	add    esp,0x10
c0015bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	83 c0 24             	add    eax,0x24
c0015bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb8:	6a 00                	push   0x0
c0015bba:	68 8c 53 01 c0       	push   0xc001538c
c0015bbf:	6a 06                	push   0x6
c0015bc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc4:	ff d0                	call   eax
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	83 c0 24             	add    eax,0x24
c0015bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd3:	6a 00                	push   0x0
c0015bd5:	68 bd 52 01 c0       	push   0xc00152bd
c0015bda:	6a 07                	push   0x7
c0015bdc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdf:	ff d0                	call   eax
c0015be1:	83 c4 10             	add    esp,0x10
c0015be4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	83 c0 24             	add    eax,0x24
c0015bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bee:	6a 00                	push   0x0
c0015bf0:	68 a6 4a 01 c0       	push   0xc0014aa6
c0015bf5:	6a 08                	push   0x8
c0015bf7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfa:	ff d0                	call   eax
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c04:	83 c0 24             	add    eax,0x24
c0015c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c09:	6a 00                	push   0x0
c0015c0b:	68 6d 53 01 c0       	push   0xc001536d
c0015c10:	6a 09                	push   0x9
c0015c12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c15:	ff d0                	call   eax
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1f:	83 c0 24             	add    eax,0x24
c0015c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c24:	6a 00                	push   0x0
c0015c26:	68 6d 53 01 c0       	push   0xc001536d
c0015c2b:	6a 0a                	push   0xa
c0015c2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c30:	ff d0                	call   eax
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3a:	83 c0 24             	add    eax,0x24
c0015c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3f:	6a 00                	push   0x0
c0015c41:	68 6d 53 01 c0       	push   0xc001536d
c0015c46:	6a 0b                	push   0xb
c0015c48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4b:	ff d0                	call   eax
c0015c4d:	83 c4 10             	add    esp,0x10
c0015c50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c55:	83 c0 24             	add    eax,0x24
c0015c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5a:	6a 00                	push   0x0
c0015c5c:	68 6d 53 01 c0       	push   0xc001536d
c0015c61:	6a 0c                	push   0xc
c0015c63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c66:	ff d0                	call   eax
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c70:	83 c0 24             	add    eax,0x24
c0015c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c75:	6a 00                	push   0x0
c0015c77:	68 ec 52 01 c0       	push   0xc00152ec
c0015c7c:	6a 0d                	push   0xd
c0015c7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c81:	ff d0                	call   eax
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8b:	83 c0 24             	add    eax,0x24
c0015c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c90:	6a 00                	push   0x0
c0015c92:	68 25 53 01 c0       	push   0xc0015325
c0015c97:	6a 0e                	push   0xe
c0015c99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9c:	ff d0                	call   eax
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca6:	83 c0 24             	add    eax,0x24
c0015ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cab:	6a 00                	push   0x0
c0015cad:	68 6d 53 01 c0       	push   0xc001536d
c0015cb2:	6a 0f                	push   0xf
c0015cb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb7:	ff d0                	call   eax
c0015cb9:	83 c4 10             	add    esp,0x10
c0015cbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc1:	83 c0 24             	add    eax,0x24
c0015cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc6:	6a 00                	push   0x0
c0015cc8:	68 6d 53 01 c0       	push   0xc001536d
c0015ccd:	6a 10                	push   0x10
c0015ccf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd2:	ff d0                	call   eax
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdc:	83 c0 24             	add    eax,0x24
c0015cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce1:	6a 00                	push   0x0
c0015ce3:	68 6d 53 01 c0       	push   0xc001536d
c0015ce8:	6a 11                	push   0x11
c0015cea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ced:	ff d0                	call   eax
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf7:	83 c0 24             	add    eax,0x24
c0015cfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfc:	6a 00                	push   0x0
c0015cfe:	68 6d 53 01 c0       	push   0xc001536d
c0015d03:	6a 12                	push   0x12
c0015d05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d08:	ff d0                	call   eax
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d12:	83 c0 24             	add    eax,0x24
c0015d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d17:	6a 00                	push   0x0
c0015d19:	68 6d 53 01 c0       	push   0xc001536d
c0015d1e:	6a 13                	push   0x13
c0015d20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d23:	ff d0                	call   eax
c0015d25:	83 c4 10             	add    esp,0x10
c0015d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2d:	83 c0 24             	add    eax,0x24
c0015d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d32:	6a 00                	push   0x0
c0015d34:	68 6d 53 01 c0       	push   0xc001536d
c0015d39:	6a 14                	push   0x14
c0015d3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d3e:	ff d0                	call   eax
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d48:	83 c0 24             	add    eax,0x24
c0015d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d4d:	6a 00                	push   0x0
c0015d4f:	68 6d 53 01 c0       	push   0xc001536d
c0015d54:	6a 1e                	push   0x1e
c0015d56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d59:	ff d0                	call   eax
c0015d5b:	83 c4 10             	add    esp,0x10
c0015d5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d63:	83 c0 24             	add    eax,0x24
c0015d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d68:	6a 00                	push   0x0
c0015d6a:	68 ef c7 01 c0       	push   0xc001c7ef
c0015d6f:	6a 60                	push   0x60
c0015d71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d74:	ff d0                	call   eax
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d7f:	c9                   	leave  
c0015d80:	c3                   	ret    
c0015d81:	90                   	nop

c0015d82 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d82:	55                   	push   ebp
c0015d83:	89 e5                	mov    ebp,esp
c0015d85:	83 ec 08             	sub    esp,0x8
c0015d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8b:	83 ec 0c             	sub    esp,0xc
c0015d8e:	50                   	push   eax
c0015d8f:	e8 36 e9 ff ff       	call   c00146ca <Device::getName()>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	8a 00                	mov    al,BYTE PTR [eax]
c0015d99:	3c 41                	cmp    al,0x41
c0015d9b:	0f 94 c0             	sete   al
c0015d9e:	84 c0                	test   al,al
c0015da0:	74 28                	je     c0015dca <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015da2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015da6:	7f 12                	jg     c0015dba <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015da8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dab:	05 40 d7 02 c0       	add    eax,0xc002d740
c0015db0:	8a 00                	mov    al,BYTE PTR [eax]
c0015db2:	0f b6 c0             	movzx  eax,al
c0015db5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015db8:	eb 10                	jmp    c0015dca <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dba:	83 ec 0c             	sub    esp,0xc
c0015dbd:	68 a0 ae 02 c0       	push   0xc002aea0
c0015dc2:	e8 9e 48 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0015dc7:	83 c4 10             	add    esp,0x10
c0015dca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dcd:	c9                   	leave  
c0015dce:	c3                   	ret    
c0015dcf:	90                   	nop

c0015dd0 <startGUI(void*)>:
c0015dd0:	55                   	push   ebp
c0015dd1:	89 e5                	mov    ebp,esp
c0015dd3:	53                   	push   ebx
c0015dd4:	83 ec 04             	sub    esp,0x4
c0015dd7:	e8 80 80 00 00       	call   c001de5c <unlockScheduler()>
c0015ddc:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c0015de2:	83 ec 08             	sub    esp,0x8
c0015de5:	6a 01                	push   0x1
c0015de7:	68 0c b2 02 c0       	push   0xc002b20c
c0015dec:	e8 a7 79 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	83 ec 08             	sub    esp,0x8
c0015df7:	53                   	push   ebx
c0015df8:	50                   	push   eax
c0015df9:	e8 e9 7b 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c0015dfe:	83 c4 10             	add    esp,0x10
c0015e01:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c0015e07:	83 ec 08             	sub    esp,0x8
c0015e0a:	6a 01                	push   0x1
c0015e0c:	68 26 b2 02 c0       	push   0xc002b226
c0015e11:	e8 82 79 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c0015e16:	83 c4 10             	add    esp,0x10
c0015e19:	83 ec 08             	sub    esp,0x8
c0015e1c:	53                   	push   ebx
c0015e1d:	50                   	push   eax
c0015e1e:	e8 c4 7b 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	90                   	nop
c0015e27:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e2a:	c9                   	leave  
c0015e2b:	c3                   	ret    

c0015e2c <startGUIVESA(void*)>:
c0015e2c:	55                   	push   ebp
c0015e2d:	89 e5                	mov    ebp,esp
c0015e2f:	53                   	push   ebx
c0015e30:	83 ec 04             	sub    esp,0x4
c0015e33:	e8 24 80 00 00       	call   c001de5c <unlockScheduler()>
c0015e38:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c0015e3e:	83 ec 08             	sub    esp,0x8
c0015e41:	6a 01                	push   0x1
c0015e43:	68 40 b2 02 c0       	push   0xc002b240
c0015e48:	e8 4b 79 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c0015e4d:	83 c4 10             	add    esp,0x10
c0015e50:	83 ec 08             	sub    esp,0x8
c0015e53:	53                   	push   ebx
c0015e54:	50                   	push   eax
c0015e55:	e8 8d 7b 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c0015e5a:	83 c4 10             	add    esp,0x10
c0015e5d:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c0015e63:	83 ec 08             	sub    esp,0x8
c0015e66:	6a 01                	push   0x1
c0015e68:	68 26 b2 02 c0       	push   0xc002b226
c0015e6d:	e8 26 79 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c0015e72:	83 c4 10             	add    esp,0x10
c0015e75:	83 ec 08             	sub    esp,0x8
c0015e78:	53                   	push   ebx
c0015e79:	50                   	push   eax
c0015e7a:	e8 68 7b 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c0015e7f:	83 c4 10             	add    esp,0x10
c0015e82:	90                   	nop
c0015e83:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e86:	c9                   	leave  
c0015e87:	c3                   	ret    

c0015e88 <sendKeyToTerminal(unsigned char)>:
c0015e88:	55                   	push   ebp
c0015e89:	89 e5                	mov    ebp,esp
c0015e8b:	83 ec 28             	sub    esp,0x28
c0015e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e91:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e94:	a1 c4 e5 02 c0       	mov    eax,ds:0xc002e5c4
c0015e99:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e9d:	83 ec 08             	sub    esp,0x8
c0015ea0:	52                   	push   edx
c0015ea1:	50                   	push   eax
c0015ea2:	e8 a7 b4 ff ff       	call   c001134e <VgaText::receiveKey(unsigned char)>
c0015ea7:	83 c4 10             	add    esp,0x10
c0015eaa:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015eae:	75 41                	jne    c0015ef1 <sendKeyToTerminal(unsigned char)+0x69>
c0015eb0:	e8 cc 7f 00 00       	call   c001de81 <lockStuff()>
c0015eb5:	a1 a0 e6 02 c0       	mov    eax,ds:0xc002e6a0
c0015eba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ebd:	c7 05 a0 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6a0,0x0
c0015ec7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ecb:	74 1f                	je     c0015eec <sendKeyToTerminal(unsigned char)+0x64>
c0015ecd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ed0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ed3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ed6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ed9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ee2:	e8 8b 85 00 00       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c0015ee7:	83 c4 10             	add    esp,0x10
c0015eea:	eb db                	jmp    c0015ec7 <sendKeyToTerminal(unsigned char)+0x3f>
c0015eec:	e8 2a 83 00 00       	call   c001e21b <unlockStuff()>
c0015ef1:	90                   	nop
c0015ef2:	c9                   	leave  
c0015ef3:	c3                   	ret    

c0015ef4 <sendKeyboardToken(KeyboardToken)>:
c0015ef4:	55                   	push   ebp
c0015ef5:	89 e5                	mov    ebp,esp
c0015ef7:	83 ec 18             	sub    esp,0x18
c0015efa:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f00:	0f b7 c0             	movzx  eax,ax
c0015f03:	83 f2 01             	xor    edx,0x1
c0015f06:	88 90 c0 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd1940],dl
c0015f0c:	a1 a8 e6 02 c0       	mov    eax,ds:0xc002e6a8
c0015f11:	85 c0                	test   eax,eax
c0015f13:	74 24                	je     c0015f39 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f15:	8b 0d a8 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6a8
c0015f1b:	83 ec 04             	sub    esp,0x4
c0015f1e:	68 c0 e6 02 c0       	push   0xc002e6c0
c0015f23:	83 ec 08             	sub    esp,0x8
c0015f26:	89 e2                	mov    edx,esp
c0015f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2b:	89 02                	mov    DWORD PTR [edx],eax
c0015f2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f30:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f34:	ff d1                	call   ecx
c0015f36:	83 c4 10             	add    esp,0x10
c0015f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3c:	66 3d 03 02          	cmp    ax,0x203
c0015f40:	75 07                	jne    c0015f49 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f42:	a0 c0 e7 02 c0       	mov    al,ds:0xc002e7c0
c0015f47:	84 c0                	test   al,al
c0015f49:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f4d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f50:	a0 c8 ea 02 c0       	mov    al,ds:0xc002eac8
c0015f55:	38 c2                	cmp    dl,al
c0015f57:	74 1c                	je     c0015f75 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f59:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f5c:	a2 c8 ea 02 c0       	mov    ds:0xc002eac8,al
c0015f61:	a0 c8 ea 02 c0       	mov    al,ds:0xc002eac8
c0015f66:	0f b6 c0             	movzx  eax,al
c0015f69:	83 ec 0c             	sub    esp,0xc
c0015f6c:	50                   	push   eax
c0015f6d:	e8 3c a6 ff ff       	call   c00105ae <setTerminalScrollLock(bool)>
c0015f72:	83 c4 10             	add    esp,0x10
c0015f75:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f78:	84 c0                	test   al,al
c0015f7a:	0f 84 ae 00 00 00    	je     c001602e <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f83:	66 3d 10 03          	cmp    ax,0x310
c0015f87:	75 06                	jne    c0015f8f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f89:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f92:	66 3d 11 03          	cmp    ax,0x311
c0015f96:	75 06                	jne    c0015f9e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f98:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa1:	66 3d 12 03          	cmp    ax,0x312
c0015fa5:	75 06                	jne    c0015fad <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fa7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb0:	66 3d 13 03          	cmp    ax,0x313
c0015fb4:	75 06                	jne    c0015fbc <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fb6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbf:	66 3d 14 03          	cmp    ax,0x314
c0015fc3:	75 06                	jne    c0015fcb <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fc5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fce:	66 3d 15 03          	cmp    ax,0x315
c0015fd2:	75 06                	jne    c0015fda <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fd4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdd:	66 3d 16 03          	cmp    ax,0x316
c0015fe1:	75 06                	jne    c0015fe9 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fe3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fec:	66 3d 17 03          	cmp    ax,0x317
c0015ff0:	75 06                	jne    c0015ff8 <sendKeyboardToken(KeyboardToken)+0x104>
c0015ff2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffb:	66 3d 18 03          	cmp    ax,0x318
c0015fff:	75 06                	jne    c0016007 <sendKeyboardToken(KeyboardToken)+0x113>
c0016001:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600a:	66 3d 19 03          	cmp    ax,0x319
c001600e:	75 06                	jne    c0016016 <sendKeyboardToken(KeyboardToken)+0x122>
c0016010:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016019:	66 3d 1a 03          	cmp    ax,0x31a
c001601d:	0f 85 c9 00 00 00    	jne    c00160ec <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016023:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016029:	e9 be 00 00 00       	jmp    c00160ec <sendKeyboardToken(KeyboardToken)+0x1f8>
c001602e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016031:	66 3d 10 03          	cmp    ax,0x310
c0016035:	75 0a                	jne    c0016041 <sendKeyboardToken(KeyboardToken)+0x14d>
c0016037:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001603d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016044:	66 3d 11 03          	cmp    ax,0x311
c0016048:	75 0a                	jne    c0016054 <sendKeyboardToken(KeyboardToken)+0x160>
c001604a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016050:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016057:	66 3d 12 03          	cmp    ax,0x312
c001605b:	75 0a                	jne    c0016067 <sendKeyboardToken(KeyboardToken)+0x173>
c001605d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016063:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606a:	66 3d 13 03          	cmp    ax,0x313
c001606e:	75 0a                	jne    c001607a <sendKeyboardToken(KeyboardToken)+0x186>
c0016070:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016076:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607d:	66 3d 14 03          	cmp    ax,0x314
c0016081:	75 0a                	jne    c001608d <sendKeyboardToken(KeyboardToken)+0x199>
c0016083:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016089:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016090:	66 3d 15 03          	cmp    ax,0x315
c0016094:	75 0a                	jne    c00160a0 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016096:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001609c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a3:	66 3d 16 03          	cmp    ax,0x316
c00160a7:	75 0a                	jne    c00160b3 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160a9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b6:	66 3d 17 03          	cmp    ax,0x317
c00160ba:	75 0a                	jne    c00160c6 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160bc:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c9:	66 3d 18 03          	cmp    ax,0x318
c00160cd:	75 0a                	jne    c00160d9 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160cf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160dc:	66 3d 19 03          	cmp    ax,0x319
c00160e0:	75 0a                	jne    c00160ec <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160e2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ef:	66 3d 00 02          	cmp    ax,0x200
c00160f3:	75 2c                	jne    c0016121 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160f5:	a0 c0 ea 02 c0       	mov    al,ds:0xc002eac0
c00160fa:	83 f0 01             	xor    eax,0x1
c00160fd:	84 c0                	test   al,al
c00160ff:	74 20                	je     c0016121 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016101:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c0016106:	6a 01                	push   0x1
c0016108:	6a 00                	push   0x0
c001610a:	68 d0 5d 01 c0       	push   0xc0015dd0
c001610f:	50                   	push   eax
c0016110:	e8 77 7e 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c0016115:	83 c4 10             	add    esp,0x10
c0016118:	c6 05 c0 ea 02 c0 01 	mov    BYTE PTR ds:0xc002eac0,0x1
c001611f:	eb 33                	jmp    c0016154 <sendKeyboardToken(KeyboardToken)+0x260>
c0016121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016124:	66 3d 01 02          	cmp    ax,0x201
c0016128:	75 2a                	jne    c0016154 <sendKeyboardToken(KeyboardToken)+0x260>
c001612a:	a0 c0 ea 02 c0       	mov    al,ds:0xc002eac0
c001612f:	83 f0 01             	xor    eax,0x1
c0016132:	84 c0                	test   al,al
c0016134:	74 1e                	je     c0016154 <sendKeyboardToken(KeyboardToken)+0x260>
c0016136:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001613b:	6a 01                	push   0x1
c001613d:	6a 00                	push   0x0
c001613f:	68 2c 5e 01 c0       	push   0xc0015e2c
c0016144:	50                   	push   eax
c0016145:	e8 42 7e 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c001614a:	83 c4 10             	add    esp,0x10
c001614d:	c6 05 c0 ea 02 c0 01 	mov    BYTE PTR ds:0xc002eac0,0x1
c0016154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016157:	66 3d 1d 03          	cmp    ax,0x31d
c001615b:	75 06                	jne    c0016163 <sendKeyboardToken(KeyboardToken)+0x26f>
c001615d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016166:	66 3d 1c 03          	cmp    ax,0x31c
c001616a:	75 06                	jne    c0016172 <sendKeyboardToken(KeyboardToken)+0x27e>
c001616c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016175:	66 3d 1b 03          	cmp    ax,0x31b
c0016179:	75 06                	jne    c0016181 <sendKeyboardToken(KeyboardToken)+0x28d>
c001617b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016184:	66 3d 1e 03          	cmp    ax,0x31e
c0016188:	75 06                	jne    c0016190 <sendKeyboardToken(KeyboardToken)+0x29c>
c001618a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016193:	66 3d 1f 03          	cmp    ax,0x31f
c0016197:	75 06                	jne    c001619f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016199:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001619f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a2:	66 3d 1a 03          	cmp    ax,0x31a
c00161a6:	75 06                	jne    c00161ae <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161a8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161ae:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161b2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161b5:	83 f0 01             	xor    eax,0x1
c00161b8:	84 c0                	test   al,al
c00161ba:	74 77                	je     c0016233 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161bc:	a0 c1 e7 02 c0       	mov    al,ds:0xc002e7c1
c00161c1:	84 c0                	test   al,al
c00161c3:	74 41                	je     c0016206 <sendKeyboardToken(KeyboardToken)+0x312>
c00161c5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161c9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161cd:	74 2b                	je     c00161fa <sendKeyboardToken(KeyboardToken)+0x306>
c00161cf:	8b 15 c4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eac4
c00161d5:	89 d0                	mov    eax,edx
c00161d7:	c1 e0 02             	shl    eax,0x2
c00161da:	01 d0                	add    eax,edx
c00161dc:	01 c0                	add    eax,eax
c00161de:	a3 c4 ea 02 c0       	mov    ds:0xc002eac4,eax
c00161e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e6:	0f b7 c0             	movzx  eax,ax
c00161e9:	8d 50 d0             	lea    edx,[eax-0x30]
c00161ec:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c00161f1:	01 d0                	add    eax,edx
c00161f3:	a3 c4 ea 02 c0       	mov    ds:0xc002eac4,eax
c00161f8:	eb 6d                	jmp    c0016267 <sendKeyboardToken(KeyboardToken)+0x373>
c00161fa:	c7 05 c4 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac4,0x0
c0016204:	eb 61                	jmp    c0016267 <sendKeyboardToken(KeyboardToken)+0x373>
c0016206:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c001620b:	85 c0                	test   eax,eax
c001620d:	74 18                	je     c0016227 <sendKeyboardToken(KeyboardToken)+0x333>
c001620f:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0016214:	0f b6 c0             	movzx  eax,al
c0016217:	83 ec 0c             	sub    esp,0xc
c001621a:	50                   	push   eax
c001621b:	e8 68 fc ff ff       	call   c0015e88 <sendKeyToTerminal(unsigned char)>
c0016220:	83 c4 10             	add    esp,0x10
c0016223:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016227:	c7 05 c4 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac4,0x0
c0016231:	eb 34                	jmp    c0016267 <sendKeyboardToken(KeyboardToken)+0x373>
c0016233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016236:	66 3d 01 01          	cmp    ax,0x101
c001623a:	75 2b                	jne    c0016267 <sendKeyboardToken(KeyboardToken)+0x373>
c001623c:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0016241:	85 c0                	test   eax,eax
c0016243:	74 18                	je     c001625d <sendKeyboardToken(KeyboardToken)+0x369>
c0016245:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c001624a:	0f b6 c0             	movzx  eax,al
c001624d:	83 ec 0c             	sub    esp,0xc
c0016250:	50                   	push   eax
c0016251:	e8 32 fc ff ff       	call   c0015e88 <sendKeyToTerminal(unsigned char)>
c0016256:	83 c4 10             	add    esp,0x10
c0016259:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001625d:	c7 05 c4 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac4,0x0
c0016267:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001626a:	83 f0 01             	xor    eax,0x1
c001626d:	84 c0                	test   al,al
c001626f:	74 4c                	je     c00162bd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016271:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016274:	83 f0 01             	xor    eax,0x1
c0016277:	84 c0                	test   al,al
c0016279:	74 42                	je     c00162bd <sendKeyboardToken(KeyboardToken)+0x3c9>
c001627b:	a0 c0 e7 02 c0       	mov    al,ds:0xc002e7c0
c0016280:	83 f0 01             	xor    eax,0x1
c0016283:	84 c0                	test   al,al
c0016285:	74 36                	je     c00162bd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628a:	66 83 f8 1f          	cmp    ax,0x1f
c001628e:	76 09                	jbe    c0016299 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016293:	66 83 f8 7e          	cmp    ax,0x7e
c0016297:	76 12                	jbe    c00162ab <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629c:	66 83 f8 0a          	cmp    ax,0xa
c00162a0:	74 09                	je     c00162ab <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a5:	66 83 f8 08          	cmp    ax,0x8
c00162a9:	75 12                	jne    c00162bd <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ae:	0f b6 c0             	movzx  eax,al
c00162b1:	83 ec 0c             	sub    esp,0xc
c00162b4:	50                   	push   eax
c00162b5:	e8 ce fb ff ff       	call   c0015e88 <sendKeyToTerminal(unsigned char)>
c00162ba:	83 c4 10             	add    esp,0x10
c00162bd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162c0:	83 f0 01             	xor    eax,0x1
c00162c3:	84 c0                	test   al,al
c00162c5:	74 4f                	je     c0016316 <sendKeyboardToken(KeyboardToken)+0x422>
c00162c7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ca:	83 f0 01             	xor    eax,0x1
c00162cd:	84 c0                	test   al,al
c00162cf:	74 45                	je     c0016316 <sendKeyboardToken(KeyboardToken)+0x422>
c00162d1:	a0 c0 e7 02 c0       	mov    al,ds:0xc002e7c0
c00162d6:	84 c0                	test   al,al
c00162d8:	74 3c                	je     c0016316 <sendKeyboardToken(KeyboardToken)+0x422>
c00162da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162dd:	66 83 f8 3f          	cmp    ax,0x3f
c00162e1:	76 33                	jbe    c0016316 <sendKeyboardToken(KeyboardToken)+0x422>
c00162e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e6:	66 83 f8 7f          	cmp    ax,0x7f
c00162ea:	77 2a                	ja     c0016316 <sendKeyboardToken(KeyboardToken)+0x422>
c00162ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ef:	88 c2                	mov    dl,al
c00162f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f4:	66 83 f8 5f          	cmp    ax,0x5f
c00162f8:	76 04                	jbe    c00162fe <sendKeyboardToken(KeyboardToken)+0x40a>
c00162fa:	b0 20                	mov    al,0x20
c00162fc:	eb 02                	jmp    c0016300 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162fe:	b0 00                	mov    al,0x0
c0016300:	29 c2                	sub    edx,eax
c0016302:	88 d0                	mov    al,dl
c0016304:	83 e8 40             	sub    eax,0x40
c0016307:	0f b6 c0             	movzx  eax,al
c001630a:	83 ec 0c             	sub    esp,0xc
c001630d:	50                   	push   eax
c001630e:	e8 75 fb ff ff       	call   c0015e88 <sendKeyToTerminal(unsigned char)>
c0016313:	83 c4 10             	add    esp,0x10
c0016316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016319:	66 3d 00 03          	cmp    ax,0x300
c001631d:	75 0f                	jne    c001632e <sendKeyboardToken(KeyboardToken)+0x43a>
c001631f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016322:	83 f0 01             	xor    eax,0x1
c0016325:	84 c0                	test   al,al
c0016327:	74 05                	je     c001632e <sendKeyboardToken(KeyboardToken)+0x43a>
c0016329:	e8 b5 aa ff ff       	call   c0010de3 <doTerminalCycle()>
c001632e:	90                   	nop
c001632f:	c9                   	leave  
c0016330:	c3                   	ret    

c0016331 <clearInternalKeybuffer(VgaText*)>:
c0016331:	55                   	push   ebp
c0016332:	89 e5                	mov    ebp,esp
c0016334:	83 ec 08             	sub    esp,0x8
c0016337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633a:	05 34 11 00 00       	add    eax,0x1134
c001633f:	83 ec 0c             	sub    esp,0xc
c0016342:	50                   	push   eax
c0016343:	e8 4c a4 fe ff       	call   c0000794 <strlen>
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001634e:	81 c2 34 11 00 00    	add    edx,0x1134
c0016354:	83 ec 04             	sub    esp,0x4
c0016357:	50                   	push   eax
c0016358:	6a 00                	push   0x0
c001635a:	52                   	push   edx
c001635b:	e8 18 a4 fe ff       	call   c0000778 <memset>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	90                   	nop
c0016364:	c9                   	leave  
c0016365:	c3                   	ret    

c0016366 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016366:	55                   	push   ebp
c0016367:	89 e5                	mov    ebp,esp
c0016369:	83 ec 18             	sub    esp,0x18
c001636c:	fb                   	sti    
c001636d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016374:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016378:	0f 84 8a 00 00 00    	je     c0016408 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001637e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016381:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016387:	84 c0                	test   al,al
c0016389:	75 11                	jne    c001639c <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001638b:	e8 ca 7a 00 00       	call   c001de5a <lockScheduler()>
c0016390:	e8 01 7e 00 00       	call   c001e196 <schedule()>
c0016395:	e8 c2 7a 00 00       	call   c001de5c <unlockScheduler()>
c001639a:	eb e2                	jmp    c001637e <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001639c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001639f:	8d 50 01             	lea    edx,[eax+0x1]
c00163a2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163a8:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163ae:	88 10                	mov    BYTE PTR [eax],dl
c00163b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b3:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163b9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163bf:	05 34 11 00 00       	add    eax,0x1134
c00163c4:	83 ec 0c             	sub    esp,0xc
c00163c7:	50                   	push   eax
c00163c8:	e8 c7 a3 fe ff       	call   c0000794 <strlen>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d3:	81 c2 34 11 00 00    	add    edx,0x1134
c00163d9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163df:	81 c2 34 11 00 00    	add    edx,0x1134
c00163e5:	83 ec 04             	sub    esp,0x4
c00163e8:	50                   	push   eax
c00163e9:	51                   	push   ecx
c00163ea:	52                   	push   edx
c00163eb:	e8 8c a2 fe ff       	call   c000067c <memmove>
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163f6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163f9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163fd:	0f 85 71 ff ff ff    	jne    c0016374 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016403:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016406:	eb 03                	jmp    c001640b <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001640b:	c9                   	leave  
c001640c:	c3                   	ret    
c001640d:	90                   	nop

c001640e <Keyboard::Keyboard(char const*)>:
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016415:	83 ec 08             	sub    esp,0x8
c0016418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001641c:	50                   	push   eax
c001641d:	e8 ac e1 ff ff       	call   c00145ce <Device::Device(char const*)>
c0016422:	83 c4 10             	add    esp,0x10
c0016425:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c001642a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642e:	89 10                	mov    DWORD PTR [eax],edx
c0016430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016434:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001643e:	c6 05 a4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6a4,0x1
c0016445:	90                   	nop
c0016446:	83 c4 0c             	add    esp,0xc
c0016449:	c3                   	ret    

c001644a <Keyboard::~Keyboard()>:
c001644a:	83 ec 0c             	sub    esp,0xc
c001644d:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c0016452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016456:	89 10                	mov    DWORD PTR [eax],edx
c0016458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	50                   	push   eax
c0016460:	e8 4b de ff ff       	call   c00142b0 <Device::~Device()>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	90                   	nop
c0016469:	83 c4 0c             	add    esp,0xc
c001646c:	c3                   	ret    
c001646d:	90                   	nop

c001646e <Keyboard::~Keyboard()>:
c001646e:	83 ec 0c             	sub    esp,0xc
c0016471:	83 ec 0c             	sub    esp,0xc
c0016474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016478:	e8 cd ff ff ff       	call   c001644a <Keyboard::~Keyboard()>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	83 ec 08             	sub    esp,0x8
c0016483:	68 5c 01 00 00       	push   0x15c
c0016488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648c:	e8 46 ca ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0016491:	83 c4 10             	add    esp,0x10
c0016494:	83 c4 0c             	add    esp,0xc
c0016497:	c3                   	ret    

c0016498 <LogicalDisk::close(int, int, void*)>:
c0016498:	83 c8 ff             	or     eax,0xffffffff
c001649b:	c3                   	ret    

c001649c <LogicalDisk::~LogicalDisk()>:
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	ba 14 b3 02 c0       	mov    edx,0xc002b314
c00164a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a8:	89 10                	mov    DWORD PTR [eax],edx
c00164aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ae:	83 ec 0c             	sub    esp,0xc
c00164b1:	50                   	push   eax
c00164b2:	e8 f9 dd ff ff       	call   c00142b0 <Device::~Device()>
c00164b7:	83 c4 10             	add    esp,0x10
c00164ba:	90                   	nop
c00164bb:	83 c4 0c             	add    esp,0xc
c00164be:	c3                   	ret    
c00164bf:	90                   	nop

c00164c0 <LogicalDisk::~LogicalDisk()>:
c00164c0:	83 ec 0c             	sub    esp,0xc
c00164c3:	83 ec 0c             	sub    esp,0xc
c00164c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ca:	e8 cd ff ff ff       	call   c001649c <LogicalDisk::~LogicalDisk()>
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	83 ec 08             	sub    esp,0x8
c00164d5:	68 74 01 00 00       	push   0x174
c00164da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164de:	e8 f4 c9 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00164e3:	83 c4 10             	add    esp,0x10
c00164e6:	83 c4 0c             	add    esp,0xc
c00164e9:	c3                   	ret    

c00164ea <LogicalDisk::open(int, int, void*)>:
c00164ea:	83 ec 18             	sub    esp,0x18
c00164ed:	68 90 b2 02 c0       	push   0xc002b290
c00164f2:	e8 6e 41 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00164f7:	83 c8 ff             	or     eax,0xffffffff
c00164fa:	83 c4 1c             	add    esp,0x1c
c00164fd:	c3                   	ret    

c00164fe <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164fe:	53                   	push   ebx
c00164ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016503:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016507:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001650b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016511:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016517:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001651d:	77 10                	ja     c001652f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001651f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016525:	89 d3                	mov    ebx,edx
c0016527:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001652d:	72 05                	jb     c0016534 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001652f:	83 c8 ff             	or     eax,0xffffffff
c0016532:	89 c2                	mov    edx,eax
c0016534:	5b                   	pop    ebx
c0016535:	c3                   	ret    

c0016536 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016536:	56                   	push   esi
c0016537:	83 c8 ff             	or     eax,0xffffffff
c001653a:	53                   	push   ebx
c001653b:	89 c2                	mov    edx,eax
c001653d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016541:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016545:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016549:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001654f:	77 27                	ja     c0016578 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016551:	89 d8                	mov    eax,ebx
c0016553:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016559:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001655f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016564:	89 c2                	mov    edx,eax
c0016566:	73 10                	jae    c0016578 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016568:	89 c8                	mov    eax,ecx
c001656a:	89 da                	mov    edx,ebx
c001656c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016572:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016578:	5b                   	pop    ebx
c0016579:	5e                   	pop    esi
c001657a:	c3                   	ret    
c001657b:	90                   	nop

c001657c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001657c:	83 ec 1c             	sub    esp,0x1c
c001657f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016583:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016587:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001658b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001658f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016593:	89 04 24             	mov    DWORD PTR [esp],eax
c0016596:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001659a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001659e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a2:	83 ec 08             	sub    esp,0x8
c00165a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165a9:	50                   	push   eax
c00165aa:	e8 1f e0 ff ff       	call   c00145ce <Device::Device(char const*)>
c00165af:	83 c4 10             	add    esp,0x10
c00165b2:	ba 14 b3 02 c0       	mov    edx,0xc002b314
c00165b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bb:	89 10                	mov    DWORD PTR [eax],edx
c00165bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165e1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165ed:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165f3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165f9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016600:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016604:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001660a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016614:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016618:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001661e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016622:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001662c:	90                   	nop
c001662d:	83 c4 1c             	add    esp,0x1c
c0016630:	c3                   	ret    
c0016631:	90                   	nop

c0016632 <LogicalDisk::assignDriveLetter()>:
c0016632:	55                   	push   ebp
c0016633:	57                   	push   edi
c0016634:	56                   	push   esi
c0016635:	53                   	push   ebx
c0016636:	83 ec 14             	sub    esp,0x14
c0016639:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001663d:	8b 3d e0 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eae0
c0016643:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016649:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001664d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016653:	8b 3d e4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eae4
c0016659:	3c 01                	cmp    al,0x1
c001665b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001665f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016663:	19 c0                	sbb    eax,eax
c0016665:	83 e0 02             	and    eax,0x2
c0016668:	83 c0 41             	add    eax,0x41
c001666b:	0f be e8             	movsx  ebp,al
c001666e:	3c 43                	cmp    al,0x43
c0016670:	75 10                	jne    c0016682 <LogicalDisk::assignDriveLetter()+0x50>
c0016672:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016679:	75 5d                	jne    c00166d8 <LogicalDisk::assignDriveLetter()+0xa6>
c001667b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016680:	75 56                	jne    c00166d8 <LogicalDisk::assignDriveLetter()+0xa6>
c0016682:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016685:	ba 01 00 00 00       	mov    edx,0x1
c001668a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001668e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016692:	d3 e2                	shl    edx,cl
c0016694:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016698:	89 d7                	mov    edi,edx
c001669a:	89 d6                	mov    esi,edx
c001669c:	c1 ff 1f             	sar    edi,0x1f
c001669f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166a3:	21 f9                	and    ecx,edi
c00166a5:	09 d1                	or     ecx,edx
c00166a7:	75 2f                	jne    c00166d8 <LogicalDisk::assignDriveLetter()+0xa6>
c00166a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166b1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166b7:	09 f2                	or     edx,esi
c00166b9:	89 15 e0 ea 02 c0    	mov    DWORD PTR ds:0xc002eae0,edx
c00166bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166c3:	09 fa                	or     edx,edi
c00166c5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166c9:	89 15 e4 ea 02 c0    	mov    DWORD PTR ds:0xc002eae4,edx
c00166cf:	89 1c bd 00 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1500],ebx
c00166d6:	eb 08                	jmp    c00166e0 <LogicalDisk::assignDriveLetter()+0xae>
c00166d8:	45                   	inc    ebp
c00166d9:	40                   	inc    eax
c00166da:	3c 5b                	cmp    al,0x5b
c00166dc:	75 90                	jne    c001666e <LogicalDisk::assignDriveLetter()+0x3c>
c00166de:	31 c0                	xor    eax,eax
c00166e0:	83 c4 14             	add    esp,0x14
c00166e3:	5b                   	pop    ebx
c00166e4:	5e                   	pop    esi
c00166e5:	5f                   	pop    edi
c00166e6:	5d                   	pop    ebp
c00166e7:	c3                   	ret    

c00166e8 <LogicalDisk::mount()>:
c00166e8:	56                   	push   esi
c00166e9:	53                   	push   ebx
c00166ea:	51                   	push   ecx
c00166eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166ef:	8b 1d 70 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e670
c00166f5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166ff:	85 db                	test   ebx,ebx
c0016701:	74 50                	je     c0016753 <LogicalDisk::mount()+0x6b>
c0016703:	e8 3d 77 00 00       	call   c001de45 <getIRQNestingLevel()>
c0016708:	52                   	push   edx
c0016709:	52                   	push   edx
c001670a:	50                   	push   eax
c001670b:	68 b4 b2 02 c0       	push   0xc002b2b4
c0016710:	e8 a2 c8 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0016715:	83 c4 0c             	add    esp,0xc
c0016718:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001671f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016721:	83 e8 41             	sub    eax,0x41
c0016724:	50                   	push   eax
c0016725:	56                   	push   esi
c0016726:	53                   	push   ebx
c0016727:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001672a:	83 c4 10             	add    esp,0x10
c001672d:	84 c0                	test   al,al
c001672f:	74 08                	je     c0016739 <LogicalDisk::mount()+0x51>
c0016731:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016737:	eb 1c                	jmp    c0016755 <LogicalDisk::mount()+0x6d>
c0016739:	e8 07 77 00 00       	call   c001de45 <getIRQNestingLevel()>
c001673e:	51                   	push   ecx
c001673f:	51                   	push   ecx
c0016740:	50                   	push   eax
c0016741:	68 cf b2 02 c0       	push   0xc002b2cf
c0016746:	e8 6c c8 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001674b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	eb ac                	jmp    c00166ff <LogicalDisk::mount()+0x17>
c0016753:	31 c0                	xor    eax,eax
c0016755:	5a                   	pop    edx
c0016756:	5b                   	pop    ebx
c0016757:	5e                   	pop    esi
c0016758:	c3                   	ret    
c0016759:	90                   	nop

c001675a <LogicalDisk::unmount()>:
c001675a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001675e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016768:	c3                   	ret    
c0016769:	90                   	nop

c001676a <LogicalDisk::eject()>:
c001676a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001676e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016774:	8b 10                	mov    edx,DWORD PTR [eax]
c0016776:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001677a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001677d:	90                   	nop

c001677e <LogicalDisk::unassignDriveLetter()>:
c001677e:	57                   	push   edi
c001677f:	56                   	push   esi
c0016780:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016784:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001678b:	84 c9                	test   cl,cl
c001678d:	75 0f                	jne    c001679e <LogicalDisk::unassignDriveLetter()+0x20>
c001678f:	c7 44 24 0c ea b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b2ea
c0016797:	5e                   	pop    esi
c0016798:	5f                   	pop    edi
c0016799:	e9 c7 3e 00 00       	jmp    c001a665 <Krnl::panic(char const*)>
c001679e:	83 e9 41             	sub    ecx,0x41
c00167a1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167a8:	b8 01 00 00 00       	mov    eax,0x1
c00167ad:	c7 04 8d 00 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1500],0x0
c00167b8:	d3 e0                	shl    eax,cl
c00167ba:	89 c7                	mov    edi,eax
c00167bc:	f7 d0                	not    eax
c00167be:	c1 ff 1f             	sar    edi,0x1f
c00167c1:	21 05 e0 ea 02 c0    	and    DWORD PTR ds:0xc002eae0,eax
c00167c7:	89 fe                	mov    esi,edi
c00167c9:	f7 d6                	not    esi
c00167cb:	21 35 e4 ea 02 c0    	and    DWORD PTR ds:0xc002eae4,esi
c00167d1:	5e                   	pop    esi
c00167d2:	5f                   	pop    edi
c00167d3:	c3                   	ret    

c00167d4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00167d4:	57                   	push   edi
c00167d5:	56                   	push   esi
c00167d6:	53                   	push   ebx
c00167d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167ed:	77 41                	ja     c0016830 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167ef:	99                   	cdq    
c00167f0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f6:	01 c8                	add    eax,ecx
c00167f8:	11 da                	adc    edx,ebx
c00167fa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016800:	19 d7                	sbb    edi,edx
c0016802:	72 33                	jb     c0016837 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016804:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001680a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016810:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016814:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016818:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001681e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016828:	5b                   	pop    ebx
c0016829:	5e                   	pop    esi
c001682a:	5f                   	pop    edi
c001682b:	e9 b0 0a 00 00       	jmp    c00172e0 <VCache::read(unsigned long long, int, void*)>
c0016830:	b8 05 00 00 00       	mov    eax,0x5
c0016835:	eb 05                	jmp    c001683c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016837:	b8 07 00 00 00       	mov    eax,0x7
c001683c:	5b                   	pop    ebx
c001683d:	5e                   	pop    esi
c001683e:	5f                   	pop    edi
c001683f:	c3                   	ret    

c0016840 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016840:	57                   	push   edi
c0016841:	56                   	push   esi
c0016842:	53                   	push   ebx
c0016843:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001684b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001684f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016853:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016859:	77 41                	ja     c001689c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001685b:	99                   	cdq    
c001685c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016862:	01 c8                	add    eax,ecx
c0016864:	11 da                	adc    edx,ebx
c0016866:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001686c:	19 d7                	sbb    edi,edx
c001686e:	72 33                	jb     c00168a3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016870:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016876:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001687c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016880:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016884:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001688a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016890:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016894:	5b                   	pop    ebx
c0016895:	5e                   	pop    esi
c0016896:	5f                   	pop    edi
c0016897:	e9 4e 09 00 00       	jmp    c00171ea <VCache::write(unsigned long long, int, void*)>
c001689c:	b8 05 00 00 00       	mov    eax,0x5
c00168a1:	eb 05                	jmp    c00168a8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168a3:	b8 07 00 00 00       	mov    eax,0x7
c00168a8:	5b                   	pop    ebx
c00168a9:	5e                   	pop    esi
c00168aa:	5f                   	pop    edi
c00168ab:	c3                   	ret    

c00168ac <Mouse::Mouse(char const*)>:
c00168ac:	83 ec 0c             	sub    esp,0xc
c00168af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b3:	83 ec 08             	sub    esp,0x8
c00168b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ba:	50                   	push   eax
c00168bb:	e8 0e dd ff ff       	call   c00145ce <Device::Device(char const*)>
c00168c0:	83 c4 10             	add    esp,0x10
c00168c3:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c00168c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cc:	89 10                	mov    DWORD PTR [eax],edx
c00168ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168dc:	90                   	nop
c00168dd:	83 c4 0c             	add    esp,0xc
c00168e0:	c3                   	ret    
c00168e1:	90                   	nop

c00168e2 <Mouse::~Mouse()>:
c00168e2:	83 ec 0c             	sub    esp,0xc
c00168e5:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c00168ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ee:	89 10                	mov    DWORD PTR [eax],edx
c00168f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	50                   	push   eax
c00168f8:	e8 b3 d9 ff ff       	call   c00142b0 <Device::~Device()>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	90                   	nop
c0016901:	83 c4 0c             	add    esp,0xc
c0016904:	c3                   	ret    
c0016905:	90                   	nop

c0016906 <Mouse::~Mouse()>:
c0016906:	83 ec 0c             	sub    esp,0xc
c0016909:	83 ec 0c             	sub    esp,0xc
c001690c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016910:	e8 cd ff ff ff       	call   c00168e2 <Mouse::~Mouse()>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	83 ec 08             	sub    esp,0x8
c001691b:	68 58 01 00 00       	push   0x158
c0016920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016924:	e8 ae c5 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0016929:	83 c4 10             	add    esp,0x10
c001692c:	83 c4 0c             	add    esp,0xc
c001692f:	c3                   	ret    

c0016930 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016930:	55                   	push   ebp
c0016931:	57                   	push   edi
c0016932:	56                   	push   esi
c0016933:	53                   	push   ebx
c0016934:	81 ec 28 01 00 00    	sub    esp,0x128
c001693a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016941:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016948:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001694f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016956:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001695a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001695e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016965:	e8 60 dd ff ff       	call   c00146ca <Device::getName()>
c001696a:	5a                   	pop    edx
c001696b:	59                   	pop    ecx
c001696c:	50                   	push   eax
c001696d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016971:	55                   	push   ebp
c0016972:	e8 bd 9e fe ff       	call   c0000834 <strcpy>
c0016977:	5b                   	pop    ebx
c0016978:	58                   	pop    eax
c0016979:	68 64 b3 02 c0       	push   0xc002b364
c001697e:	55                   	push   ebp
c001697f:	e8 f0 9f fe ff       	call   c0000974 <strcat>
c0016984:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001698b:	e8 b3 8e ff ff       	call   c000f843 <malloc>
c0016990:	83 c4 0c             	add    esp,0xc
c0016993:	89 c3                	mov    ebx,eax
c0016995:	57                   	push   edi
c0016996:	56                   	push   esi
c0016997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001699b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001699f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169a6:	55                   	push   ebp
c00169a7:	50                   	push   eax
c00169a8:	e8 cf fb ff ff       	call   c001657c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169ad:	83 c4 14             	add    esp,0x14
c00169b0:	53                   	push   ebx
c00169b1:	e8 7c fc ff ff       	call   c0016632 <LogicalDisk::assignDriveLetter()>
c00169b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169b9:	89 c6                	mov    esi,eax
c00169bb:	e8 28 fd ff ff       	call   c00166e8 <LogicalDisk::mount()>
c00169c0:	58                   	pop    eax
c00169c1:	5a                   	pop    edx
c00169c2:	53                   	push   ebx
c00169c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169ca:	e8 0f da ff ff       	call   c00143de <Device::addChild(Device*)>
c00169cf:	59                   	pop    ecx
c00169d0:	89 f0                	mov    eax,esi
c00169d2:	5b                   	pop    ebx
c00169d3:	0f be f0             	movsx  esi,al
c00169d6:	56                   	push   esi
c00169d7:	68 6f b3 02 c0       	push   0xc002b36f
c00169dc:	e8 d6 c5 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00169e1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169e7:	5b                   	pop    ebx
c00169e8:	5e                   	pop    esi
c00169e9:	5f                   	pop    edi
c00169ea:	5d                   	pop    ebp
c00169eb:	c3                   	ret    

c00169ec <createPartitionsForDisk(PhysicalDisk*)>:
c00169ec:	55                   	push   ebp
c00169ed:	57                   	push   edi
c00169ee:	56                   	push   esi
c00169ef:	53                   	push   ebx
c00169f0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169f6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169fd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a03:	3d 00 02 00 00       	cmp    eax,0x200
c0016a08:	74 27                	je     c0016a31 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a0a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a10:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a16:	83 ec 10             	sub    esp,0x10
c0016a19:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a1d:	99                   	cdq    
c0016a1e:	c1 e6 0a             	shl    esi,0xa
c0016a21:	52                   	push   edx
c0016a22:	89 fd                	mov    ebp,edi
c0016a24:	50                   	push   eax
c0016a25:	55                   	push   ebp
c0016a26:	56                   	push   esi
c0016a27:	e8 10 00 01 00       	call   c0026a3c <__udivdi3>
c0016a2c:	e9 b1 00 00 00       	jmp    c0016ae2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a31:	83 ec 0c             	sub    esp,0xc
c0016a34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a36:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a3a:	56                   	push   esi
c0016a3b:	6a 01                	push   0x1
c0016a3d:	6a 00                	push   0x0
c0016a3f:	6a 00                	push   0x0
c0016a41:	53                   	push   ebx
c0016a42:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a45:	83 c4 20             	add    esp,0x20
c0016a48:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a50:	75 0a                	jne    c0016a5c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a52:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a5a:	74 2c                	je     c0016a88 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a5c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a62:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a68:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a6e:	83 ec 10             	sub    esp,0x10
c0016a71:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a75:	89 f7                	mov    edi,esi
c0016a77:	c1 e0 0a             	shl    eax,0xa
c0016a7a:	c1 ff 1f             	sar    edi,0x1f
c0016a7d:	57                   	push   edi
c0016a7e:	56                   	push   esi
c0016a7f:	52                   	push   edx
c0016a80:	50                   	push   eax
c0016a81:	e8 b6 ff 00 00       	call   c0026a3c <__udivdi3>
c0016a86:	eb 5a                	jmp    c0016ae2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a88:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a8f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a96:	83 e1 7f             	and    ecx,0x7f
c0016a99:	83 e0 7f             	and    eax,0x7f
c0016a9c:	01 c1                	add    ecx,eax
c0016a9e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016aa5:	83 e0 7f             	and    eax,0x7f
c0016aa8:	01 c1                	add    ecx,eax
c0016aaa:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ab1:	83 e0 7f             	and    eax,0x7f
c0016ab4:	00 c1                	add    cl,al
c0016ab6:	74 41                	je     c0016af9 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ab8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016abe:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ac4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aca:	83 ec 10             	sub    esp,0x10
c0016acd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ad1:	89 f7                	mov    edi,esi
c0016ad3:	c1 e0 0a             	shl    eax,0xa
c0016ad6:	c1 ff 1f             	sar    edi,0x1f
c0016ad9:	57                   	push   edi
c0016ada:	56                   	push   esi
c0016adb:	52                   	push   edx
c0016adc:	50                   	push   eax
c0016add:	e8 5a ff 00 00       	call   c0026a3c <__udivdi3>
c0016ae2:	83 c4 14             	add    esp,0x14
c0016ae5:	52                   	push   edx
c0016ae6:	50                   	push   eax
c0016ae7:	6a 00                	push   0x0
c0016ae9:	6a 00                	push   0x0
c0016aeb:	53                   	push   ebx
c0016aec:	e8 3f fe ff ff       	call   c0016930 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016af1:	83 c4 20             	add    esp,0x20
c0016af4:	e9 79 01 00 00       	jmp    c0016c72 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016af9:	89 f0                	mov    eax,esi
c0016afb:	31 f6                	xor    esi,esi
c0016afd:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b04:	75 02                	jne    c0016b08 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b06:	89 f1                	mov    ecx,esi
c0016b08:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b0f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b16:	c1 e2 08             	shl    edx,0x8
c0016b19:	c1 e7 10             	shl    edi,0x10
c0016b1c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b24:	09 fa                	or     edx,edi
c0016b26:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b2e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b35:	83 c0 10             	add    eax,0x10
c0016b38:	09 fa                	or     edx,edi
c0016b3a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b41:	c1 e7 18             	shl    edi,0x18
c0016b44:	09 fa                	or     edx,edi
c0016b46:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b4d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b51:	c1 e7 10             	shl    edi,0x10
c0016b54:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b5b:	c1 e2 08             	shl    edx,0x8
c0016b5e:	09 fa                	or     edx,edi
c0016b60:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b67:	09 fa                	or     edx,edi
c0016b69:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b70:	c1 e7 18             	shl    edi,0x18
c0016b73:	09 fa                	or     edx,edi
c0016b75:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b79:	46                   	inc    esi
c0016b7a:	83 fe 04             	cmp    esi,0x4
c0016b7d:	0f 85 7a ff ff ff    	jne    c0016afd <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b87:	83 f0 01             	xor    eax,0x1
c0016b8a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b8e:	75 57                	jne    c0016be7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b94:	83 f0 01             	xor    eax,0x1
c0016b97:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b9b:	75 4a                	jne    c0016be7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b9d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ba1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016ba9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bb1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bb7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bbd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bc7:	89 f7                	mov    edi,esi
c0016bc9:	c1 e0 0a             	shl    eax,0xa
c0016bcc:	c1 ff 1f             	sar    edi,0x1f
c0016bcf:	57                   	push   edi
c0016bd0:	56                   	push   esi
c0016bd1:	52                   	push   edx
c0016bd2:	50                   	push   eax
c0016bd3:	e8 64 fe 00 00       	call   c0026a3c <__udivdi3>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bdf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016be3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016be7:	84 c9                	test   cl,cl
c0016be9:	74 53                	je     c0016c3e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016beb:	0f b6 c9             	movzx  ecx,cl
c0016bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bf6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bfa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c06:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c0a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c1e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c22:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c26:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c2a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c36:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c3a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c3e:	31 ed                	xor    ebp,ebp
c0016c40:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c44:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c48:	89 f8                	mov    eax,edi
c0016c4a:	09 f0                	or     eax,esi
c0016c4c:	74 1e                	je     c0016c6c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c4e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c52:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c56:	89 d1                	mov    ecx,edx
c0016c58:	09 c1                	or     ecx,eax
c0016c5a:	74 10                	je     c0016c6c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	57                   	push   edi
c0016c60:	56                   	push   esi
c0016c61:	52                   	push   edx
c0016c62:	50                   	push   eax
c0016c63:	53                   	push   ebx
c0016c64:	e8 c7 fc ff ff       	call   c0016930 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c69:	83 c4 20             	add    esp,0x20
c0016c6c:	45                   	inc    ebp
c0016c6d:	83 fd 04             	cmp    ebp,0x4
c0016c70:	75 ce                	jne    c0016c40 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c72:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c78:	5b                   	pop    ebx
c0016c79:	5e                   	pop    esi
c0016c7a:	5f                   	pop    edi
c0016c7b:	5d                   	pop    ebp
c0016c7c:	c3                   	ret    
c0016c7d:	90                   	nop

c0016c7e <Serial::Serial(char const*)>:
c0016c7e:	83 ec 0c             	sub    esp,0xc
c0016c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c85:	83 ec 08             	sub    esp,0x8
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	50                   	push   eax
c0016c8d:	e8 3c d9 ff ff       	call   c00145ce <Device::Device(char const*)>
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c0016c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9e:	89 10                	mov    DWORD PTR [eax],edx
c0016ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cae:	90                   	nop
c0016caf:	83 c4 0c             	add    esp,0xc
c0016cb2:	c3                   	ret    
c0016cb3:	90                   	nop

c0016cb4 <Serial::~Serial()>:
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c0016cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc0:	89 10                	mov    DWORD PTR [eax],edx
c0016cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc6:	83 ec 0c             	sub    esp,0xc
c0016cc9:	50                   	push   eax
c0016cca:	e8 e1 d5 ff ff       	call   c00142b0 <Device::~Device()>
c0016ccf:	83 c4 10             	add    esp,0x10
c0016cd2:	90                   	nop
c0016cd3:	83 c4 0c             	add    esp,0xc
c0016cd6:	c3                   	ret    
c0016cd7:	90                   	nop

c0016cd8 <Serial::~Serial()>:
c0016cd8:	83 ec 0c             	sub    esp,0xc
c0016cdb:	83 ec 0c             	sub    esp,0xc
c0016cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce2:	e8 cd ff ff ff       	call   c0016cb4 <Serial::~Serial()>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	83 ec 08             	sub    esp,0x8
c0016ced:	68 58 01 00 00       	push   0x158
c0016cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf6:	e8 dc c1 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	83 c4 0c             	add    esp,0xc
c0016d01:	c3                   	ret    

c0016d02 <Timer::Timer(char const*)>:
c0016d02:	83 ec 0c             	sub    esp,0xc
c0016d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d09:	83 ec 08             	sub    esp,0x8
c0016d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d10:	50                   	push   eax
c0016d11:	e8 b8 d8 ff ff       	call   c00145ce <Device::Device(char const*)>
c0016d16:	83 c4 10             	add    esp,0x10
c0016d19:	ba e0 b3 02 c0       	mov    edx,0xc002b3e0
c0016d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d22:	89 10                	mov    DWORD PTR [eax],edx
c0016d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d28:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d32:	90                   	nop
c0016d33:	83 c4 0c             	add    esp,0xc
c0016d36:	c3                   	ret    
c0016d37:	90                   	nop

c0016d38 <Timer::~Timer()>:
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	ba e0 b3 02 c0       	mov    edx,0xc002b3e0
c0016d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d44:	89 10                	mov    DWORD PTR [eax],edx
c0016d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	50                   	push   eax
c0016d4e:	e8 5d d5 ff ff       	call   c00142b0 <Device::~Device()>
c0016d53:	83 c4 10             	add    esp,0x10
c0016d56:	90                   	nop
c0016d57:	83 c4 0c             	add    esp,0xc
c0016d5a:	c3                   	ret    
c0016d5b:	90                   	nop

c0016d5c <Timer::~Timer()>:
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	83 ec 0c             	sub    esp,0xc
c0016d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d66:	e8 cd ff ff ff       	call   c0016d38 <Timer::~Timer()>
c0016d6b:	83 c4 10             	add    esp,0x10
c0016d6e:	83 ec 08             	sub    esp,0x8
c0016d71:	68 5c 01 00 00       	push   0x15c
c0016d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d7a:	e8 58 c1 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	83 c4 0c             	add    esp,0xc
c0016d85:	c3                   	ret    

c0016d86 <Timer::read()>:
c0016d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d90:	c3                   	ret    

c0016d91 <timerHandler(unsigned long long)>:
c0016d91:	55                   	push   ebp
c0016d92:	57                   	push   edi
c0016d93:	56                   	push   esi
c0016d94:	53                   	push   ebx
c0016d95:	83 ec 0c             	sub    esp,0xc
c0016d98:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d9c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016da0:	01 35 70 eb 02 c0    	add    DWORD PTR ds:0xc002eb70,esi
c0016da6:	11 3d 74 eb 02 c0    	adc    DWORD PTR ds:0xc002eb74,edi
c0016dac:	80 3d ed e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4ed,0x0
c0016db3:	0f 84 07 01 00 00    	je     c0016ec0 <timerHandler(unsigned long long)+0x12f>
c0016db9:	e8 c3 70 00 00       	call   c001de81 <lockStuff()>
c0016dbe:	83 ec 0c             	sub    esp,0xc
c0016dc1:	68 3c 1a 03 c0       	push   0xc0031a3c
c0016dc6:	e8 e3 1c 01 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dcb:	c7 04 24 3c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a3c
c0016dd2:	89 c3                	mov    ebx,eax
c0016dd4:	e8 dd 1c 01 00       	call   c0028ab6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	84 c0                	test   al,al
c0016dde:	74 60                	je     c0016e40 <timerHandler(unsigned long long)+0xaf>
c0016de0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016de6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016de9:	85 c0                	test   eax,eax
c0016deb:	0f 85 91 00 00 00    	jne    c0016e82 <timerHandler(unsigned long long)+0xf1>
c0016df1:	e9 be 00 00 00       	jmp    c0016eb4 <timerHandler(unsigned long long)+0x123>
c0016df6:	83 ec 0c             	sub    esp,0xc
c0016df9:	55                   	push   ebp
c0016dfa:	e8 73 76 00 00       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	39 eb                	cmp    ebx,ebp
c0016e04:	75 12                	jne    c0016e18 <timerHandler(unsigned long long)+0x87>
c0016e06:	83 ec 0c             	sub    esp,0xc
c0016e09:	68 3c 1a 03 c0       	push   0xc0031a3c
c0016e0e:	e8 9b 1c 01 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e13:	89 c3                	mov    ebx,eax
c0016e15:	83 c4 10             	add    esp,0x10
c0016e18:	83 ec 0c             	sub    esp,0xc
c0016e1b:	68 3c 1a 03 c0       	push   0xc0031a3c
c0016e20:	e8 91 1c 01 00       	call   c0028ab6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e25:	83 c4 10             	add    esp,0x10
c0016e28:	84 c0                	test   al,al
c0016e2a:	75 b4                	jne    c0016de0 <timerHandler(unsigned long long)+0x4f>
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	68 3c 1a 03 c0       	push   0xc0031a3c
c0016e34:	e8 75 1c 01 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e39:	83 c4 10             	add    esp,0x10
c0016e3c:	39 d8                	cmp    eax,ebx
c0016e3e:	74 a0                	je     c0016de0 <timerHandler(unsigned long long)+0x4f>
c0016e40:	83 ec 0c             	sub    esp,0xc
c0016e43:	68 3c 1a 03 c0       	push   0xc0031a3c
c0016e48:	e8 61 1c 01 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e4d:	c7 04 24 3c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a3c
c0016e54:	89 c5                	mov    ebp,eax
c0016e56:	e8 77 1c 01 00       	call   c0028ad2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e5b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e5e:	83 c4 10             	add    esp,0x10
c0016e61:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e64:	39 15 70 eb 02 c0    	cmp    DWORD PTR ds:0xc002eb70,edx
c0016e6a:	a1 74 eb 02 c0       	mov    eax,ds:0xc002eb74
c0016e6f:	19 c8                	sbb    eax,ecx
c0016e71:	73 83                	jae    c0016df6 <timerHandler(unsigned long long)+0x65>
c0016e73:	50                   	push   eax
c0016e74:	50                   	push   eax
c0016e75:	55                   	push   ebp
c0016e76:	68 3c 1a 03 c0       	push   0xc0031a3c
c0016e7b:	e8 00 1d 01 00       	call   c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e80:	eb 93                	jmp    c0016e15 <timerHandler(unsigned long long)+0x84>
c0016e82:	80 3d ec e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4ec,0x0
c0016e89:	74 29                	je     c0016eb4 <timerHandler(unsigned long long)+0x123>
c0016e8b:	39 c6                	cmp    esi,eax
c0016e8d:	bb 00 00 00 00       	mov    ebx,0x0
c0016e92:	19 df                	sbb    edi,ebx
c0016e94:	72 19                	jb     c0016eaf <timerHandler(unsigned long long)+0x11e>
c0016e96:	e8 bf 6f 00 00       	call   c001de5a <lockScheduler()>
c0016e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ea3:	e8 ee 72 00 00       	call   c001e196 <schedule()>
c0016ea8:	e8 af 6f 00 00       	call   c001de5c <unlockScheduler()>
c0016ead:	eb 05                	jmp    c0016eb4 <timerHandler(unsigned long long)+0x123>
c0016eaf:	29 f0                	sub    eax,esi
c0016eb1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016eb4:	83 c4 0c             	add    esp,0xc
c0016eb7:	5b                   	pop    ebx
c0016eb8:	5e                   	pop    esi
c0016eb9:	5f                   	pop    edi
c0016eba:	5d                   	pop    ebp
c0016ebb:	e9 5b 73 00 00       	jmp    c001e21b <unlockStuff()>
c0016ec0:	83 c4 0c             	add    esp,0xc
c0016ec3:	5b                   	pop    ebx
c0016ec4:	5e                   	pop    esi
c0016ec5:	5f                   	pop    edi
c0016ec6:	5d                   	pop    ebp
c0016ec7:	c3                   	ret    

c0016ec8 <setupTimer(int)>:
c0016ec8:	57                   	push   edi
c0016ec9:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0016ece:	56                   	push   esi
c0016ecf:	53                   	push   ebx
c0016ed0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ed4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016eda:	83 ec 0c             	sub    esp,0xc
c0016edd:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ee3:	e8 e2 d7 ff ff       	call   c00146ca <Device::getName()>
c0016ee8:	83 c4 10             	add    esp,0x10
c0016eeb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016eee:	0f 85 8d 00 00 00    	jne    c0016f81 <setupTimer(int)+0xb9>
c0016ef4:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0016ef9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f00:	74 7f                	je     c0016f81 <setupTimer(int)+0xb9>
c0016f02:	83 ec 0c             	sub    esp,0xc
c0016f05:	68 5c 01 00 00       	push   0x15c
c0016f0a:	e8 34 89 ff ff       	call   c000f843 <malloc>
c0016f0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f12:	89 c3                	mov    ebx,eax
c0016f14:	e8 fb f6 00 00       	call   c0026614 <PIT::PIT()>
c0016f19:	59                   	pop    ecx
c0016f1a:	5f                   	pop    edi
c0016f1b:	53                   	push   ebx
c0016f1c:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c0016f22:	e8 b7 d4 ff ff       	call   c00143de <Device::addChild(Device*)>
c0016f27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f29:	6a 00                	push   0x0
c0016f2b:	6a 00                	push   0x0
c0016f2d:	56                   	push   esi
c0016f2e:	53                   	push   ebx
c0016f2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f32:	83 c4 14             	add    esp,0x14
c0016f35:	68 60 01 00 00       	push   0x160
c0016f3a:	e8 04 89 ff ff       	call   c000f843 <malloc>
c0016f3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f42:	89 c7                	mov    edi,eax
c0016f44:	e8 7b f5 00 00       	call   c00264c4 <APICTimer::APICTimer()>
c0016f49:	6a 00                	push   0x0
c0016f4b:	6a 00                	push   0x0
c0016f4d:	56                   	push   esi
c0016f4e:	57                   	push   edi
c0016f4f:	e8 72 f4 00 00       	call   c00263c6 <APICTimer::open(int, int, void*)>
c0016f54:	83 c4 20             	add    esp,0x20
c0016f57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f59:	6a 00                	push   0x0
c0016f5b:	6a 00                	push   0x0
c0016f5d:	6a 00                	push   0x0
c0016f5f:	53                   	push   ebx
c0016f60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f63:	58                   	pop    eax
c0016f64:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0016f69:	5a                   	pop    edx
c0016f6a:	57                   	push   edi
c0016f6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f71:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f77:	e8 62 d4 ff ff       	call   c00143de <Device::addChild(Device*)>
c0016f7c:	83 c4 10             	add    esp,0x10
c0016f7f:	eb 33                	jmp    c0016fb4 <setupTimer(int)+0xec>
c0016f81:	83 ec 0c             	sub    esp,0xc
c0016f84:	68 5c 01 00 00       	push   0x15c
c0016f89:	e8 b5 88 ff ff       	call   c000f843 <malloc>
c0016f8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f91:	89 c3                	mov    ebx,eax
c0016f93:	e8 7c f6 00 00       	call   c0026614 <PIT::PIT()>
c0016f98:	58                   	pop    eax
c0016f99:	5a                   	pop    edx
c0016f9a:	53                   	push   ebx
c0016f9b:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c0016fa1:	e8 38 d4 ff ff       	call   c00143de <Device::addChild(Device*)>
c0016fa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fa8:	6a 00                	push   0x0
c0016faa:	6a 00                	push   0x0
c0016fac:	56                   	push   esi
c0016fad:	53                   	push   ebx
c0016fae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fb1:	83 c4 20             	add    esp,0x20
c0016fb4:	89 d8                	mov    eax,ebx
c0016fb6:	5b                   	pop    ebx
c0016fb7:	5e                   	pop    esi
c0016fb8:	5f                   	pop    edi
c0016fb9:	c3                   	ret    

c0016fba <VCache::VCache(PhysicalDisk*)>:
c0016fba:	53                   	push   ebx
c0016fbb:	83 ec 18             	sub    esp,0x18
c0016fbe:	ba 10 b4 02 c0       	mov    edx,0xc002b410
c0016fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc7:	89 10                	mov    DWORD PTR [eax],edx
c0016fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fea:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ffc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017007:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001700e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017012:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017021:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017034:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017044:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001704b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017053:	83 ec 0c             	sub    esp,0xc
c0017056:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001705a:	e8 e4 87 ff ff       	call   c000f843 <malloc>
c001705f:	83 c4 10             	add    esp,0x10
c0017062:	89 c3                	mov    ebx,eax
c0017064:	83 ec 0c             	sub    esp,0xc
c0017067:	53                   	push   ebx
c0017068:	e8 0d 6f 00 00       	call   c001df7a <Mutex::Mutex()>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017074:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001707f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017086:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001708d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017091:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001709e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170a2:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170b2:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170b5:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bc:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ca:	05 00 01 00 00       	add    eax,0x100
c00170cf:	c1 e0 04             	shl    eax,0x4
c00170d2:	83 ec 0c             	sub    esp,0xc
c00170d5:	50                   	push   eax
c00170d6:	e8 68 87 ff ff       	call   c000f843 <malloc>
c00170db:	83 c4 10             	add    esp,0x10
c00170de:	89 c2                	mov    edx,eax
c00170e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170eb:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017104:	c1 e0 07             	shl    eax,0x7
c0017107:	83 ec 0c             	sub    esp,0xc
c001710a:	50                   	push   eax
c001710b:	e8 33 87 ff ff       	call   c000f843 <malloc>
c0017110:	83 c4 10             	add    esp,0x10
c0017113:	89 c2                	mov    edx,eax
c0017115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017119:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001711c:	90                   	nop
c001711d:	83 c4 18             	add    esp,0x18
c0017120:	5b                   	pop    ebx
c0017121:	c3                   	ret    

c0017122 <VCache::invalidateReadBuffer()>:
c0017122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017126:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001712c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017130:	c3                   	ret    
c0017131:	90                   	nop

c0017132 <VCache::writeWriteBuffer()>:
c0017132:	53                   	push   ebx
c0017133:	83 ec 14             	sub    esp,0x14
c0017136:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001713a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001713d:	8b 10                	mov    edx,DWORD PTR [eax]
c001713f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017142:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017145:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017148:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001714b:	50                   	push   eax
c001714c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001714f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017156:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001715d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017161:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017168:	83 c4 28             	add    esp,0x28
c001716b:	5b                   	pop    ebx
c001716c:	c3                   	ret    
c001716d:	90                   	nop

c001716e <VCache::~VCache()>:
c001716e:	83 ec 0c             	sub    esp,0xc
c0017171:	ba 10 b4 02 c0       	mov    edx,0xc002b410
c0017176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001717a:	89 10                	mov    DWORD PTR [eax],edx
c001717c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017180:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017183:	84 c0                	test   al,al
c0017185:	74 0f                	je     c0017196 <VCache::~VCache()+0x28>
c0017187:	83 ec 0c             	sub    esp,0xc
c001718a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001718e:	e8 9f ff ff ff       	call   c0017132 <VCache::writeWriteBuffer()>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001719a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001719d:	83 ec 0c             	sub    esp,0xc
c00171a0:	50                   	push   eax
c00171a1:	e8 ad 86 ff ff       	call   c000f853 <free>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171b0:	83 ec 0c             	sub    esp,0xc
c00171b3:	50                   	push   eax
c00171b4:	e8 9a 86 ff ff       	call   c000f853 <free>
c00171b9:	83 c4 10             	add    esp,0x10
c00171bc:	90                   	nop
c00171bd:	83 c4 0c             	add    esp,0xc
c00171c0:	c3                   	ret    
c00171c1:	90                   	nop

c00171c2 <VCache::~VCache()>:
c00171c2:	83 ec 0c             	sub    esp,0xc
c00171c5:	83 ec 0c             	sub    esp,0xc
c00171c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171cc:	e8 9d ff ff ff       	call   c001716e <VCache::~VCache()>
c00171d1:	83 c4 10             	add    esp,0x10
c00171d4:	83 ec 08             	sub    esp,0x8
c00171d7:	6a 44                	push   0x44
c00171d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171dd:	e8 f5 bc ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00171e2:	83 c4 10             	add    esp,0x10
c00171e5:	83 c4 0c             	add    esp,0xc
c00171e8:	c3                   	ret    
c00171e9:	90                   	nop

c00171ea <VCache::write(unsigned long long, int, void*)>:
c00171ea:	55                   	push   ebp
c00171eb:	57                   	push   edi
c00171ec:	56                   	push   esi
c00171ed:	53                   	push   ebx
c00171ee:	83 ec 28             	sub    esp,0x28
c00171f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171f5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171f9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171fd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017201:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017204:	e8 d3 71 00 00       	call   c001e3dc <Semaphore::acquire()>
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017210:	74 0c                	je     c001721e <VCache::write(unsigned long long, int, void*)+0x34>
c0017212:	83 ec 0c             	sub    esp,0xc
c0017215:	53                   	push   ebx
c0017216:	e8 07 ff ff ff       	call   c0017122 <VCache::invalidateReadBuffer()>
c001721b:	83 c4 10             	add    esp,0x10
c001721e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017222:	74 66                	je     c001728a <VCache::write(unsigned long long, int, void*)+0xa0>
c0017224:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017227:	99                   	cdq    
c0017228:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001722c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001722f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017232:	89 c1                	mov    ecx,eax
c0017234:	89 d0                	mov    eax,edx
c0017236:	31 f1                	xor    ecx,esi
c0017238:	31 f8                	xor    eax,edi
c001723a:	89 ca                	mov    edx,ecx
c001723c:	09 c2                	or     edx,eax
c001723e:	75 3e                	jne    c001727e <VCache::write(unsigned long long, int, void*)+0x94>
c0017240:	83 fd 01             	cmp    ebp,0x1
c0017243:	75 39                	jne    c001727e <VCache::write(unsigned long long, int, void*)+0x94>
c0017245:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017248:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001724e:	51                   	push   ecx
c001724f:	50                   	push   eax
c0017250:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017254:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017258:	0f af c8             	imul   ecx,eax
c001725b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001725e:	51                   	push   ecx
c001725f:	e8 e0 94 fe ff       	call   c0000744 <memcpy>
c0017264:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017267:	83 c4 10             	add    esp,0x10
c001726a:	40                   	inc    eax
c001726b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001726e:	83 c0 80             	add    eax,0xffffff80
c0017271:	75 57                	jne    c00172ca <VCache::write(unsigned long long, int, void*)+0xe0>
c0017273:	83 ec 0c             	sub    esp,0xc
c0017276:	53                   	push   ebx
c0017277:	e8 b6 fe ff ff       	call   c0017132 <VCache::writeWriteBuffer()>
c001727c:	eb 34                	jmp    c00172b2 <VCache::write(unsigned long long, int, void*)+0xc8>
c001727e:	83 ec 0c             	sub    esp,0xc
c0017281:	53                   	push   ebx
c0017282:	e8 ab fe ff ff       	call   c0017132 <VCache::writeWriteBuffer()>
c0017287:	83 c4 10             	add    esp,0x10
c001728a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001728d:	83 fd 7f             	cmp    ebp,0x7f
c0017290:	7f 25                	jg     c00172b7 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017292:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017295:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017298:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001729b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001729f:	52                   	push   edx
c00172a0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172ad:	e8 92 94 fe ff       	call   c0000744 <memcpy>
c00172b2:	83 c4 10             	add    esp,0x10
c00172b5:	eb 13                	jmp    c00172ca <VCache::write(unsigned long long, int, void*)+0xe0>
c00172b7:	83 ec 0c             	sub    esp,0xc
c00172ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00172bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172c0:	55                   	push   ebp
c00172c1:	57                   	push   edi
c00172c2:	56                   	push   esi
c00172c3:	50                   	push   eax
c00172c4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172c7:	83 c4 20             	add    esp,0x20
c00172ca:	83 ec 0c             	sub    esp,0xc
c00172cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172d0:	e8 b5 76 00 00       	call   c001e98a <Semaphore::release()>
c00172d5:	83 c4 2c             	add    esp,0x2c
c00172d8:	31 c0                	xor    eax,eax
c00172da:	5b                   	pop    ebx
c00172db:	5e                   	pop    esi
c00172dc:	5f                   	pop    edi
c00172dd:	5d                   	pop    ebp
c00172de:	c3                   	ret    
c00172df:	90                   	nop

c00172e0 <VCache::read(unsigned long long, int, void*)>:
c00172e0:	55                   	push   ebp
c00172e1:	57                   	push   edi
c00172e2:	56                   	push   esi
c00172e3:	53                   	push   ebx
c00172e4:	83 ec 28             	sub    esp,0x28
c00172e7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172ef:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172f7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172fb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172ff:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017303:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017306:	e8 d1 70 00 00       	call   c001e3dc <Semaphore::acquire()>
c001730b:	83 c4 10             	add    esp,0x10
c001730e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017312:	74 0c                	je     c0017320 <VCache::read(unsigned long long, int, void*)+0x40>
c0017314:	83 ec 0c             	sub    esp,0xc
c0017317:	53                   	push   ebx
c0017318:	e8 15 fe ff ff       	call   c0017132 <VCache::writeWriteBuffer()>
c001731d:	83 c4 10             	add    esp,0x10
c0017320:	83 fe 01             	cmp    esi,0x1
c0017323:	0f 85 80 00 00 00    	jne    c00173a9 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017329:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001732c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017333:	75 74                	jne    c00173a9 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017335:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017338:	89 d1                	mov    ecx,edx
c001733a:	f7 d9                	neg    ecx
c001733c:	89 cf                	mov    edi,ecx
c001733e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017342:	c1 ff 1f             	sar    edi,0x1f
c0017345:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017348:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001734c:	89 ce                	mov    esi,ecx
c001734e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017352:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017356:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001735a:	89 cf                	mov    edi,ecx
c001735c:	74 0a                	je     c0017368 <VCache::read(unsigned long long, int, void*)+0x88>
c001735e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017361:	75 05                	jne    c0017368 <VCache::read(unsigned long long, int, void*)+0x88>
c0017363:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017366:	74 1c                	je     c0017384 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017368:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001736c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001736f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017372:	83 ec 0c             	sub    esp,0xc
c0017375:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017377:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001737a:	52                   	push   edx
c001737b:	57                   	push   edi
c001737c:	56                   	push   esi
c001737d:	50                   	push   eax
c001737e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017381:	83 c4 20             	add    esp,0x20
c0017384:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017387:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001738d:	50                   	push   eax
c001738e:	52                   	push   edx
c001738f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017392:	48                   	dec    eax
c0017393:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017397:	0f af c2             	imul   eax,edx
c001739a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001739d:	50                   	push   eax
c001739e:	55                   	push   ebp
c001739f:	e8 a0 93 fe ff       	call   c0000744 <memcpy>
c00173a4:	83 c4 10             	add    esp,0x10
c00173a7:	eb 21                	jmp    c00173ca <VCache::read(unsigned long long, int, void*)+0xea>
c00173a9:	83 ec 0c             	sub    esp,0xc
c00173ac:	53                   	push   ebx
c00173ad:	e8 70 fd ff ff       	call   c0017122 <VCache::invalidateReadBuffer()>
c00173b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00173b7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173ba:	56                   	push   esi
c00173bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173c3:	50                   	push   eax
c00173c4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173c7:	83 c4 20             	add    esp,0x20
c00173ca:	83 ec 0c             	sub    esp,0xc
c00173cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173d0:	e8 b5 75 00 00       	call   c001e98a <Semaphore::release()>
c00173d5:	83 c4 2c             	add    esp,0x2c
c00173d8:	31 c0                	xor    eax,eax
c00173da:	5b                   	pop    ebx
c00173db:	5e                   	pop    esi
c00173dc:	5f                   	pop    edi
c00173dd:	5d                   	pop    ebp
c00173de:	c3                   	ret    
c00173df:	90                   	nop

c00173e0 <Video::putrect(int, int, int, int, unsigned int)>:
c00173e0:	55                   	push   ebp
c00173e1:	57                   	push   edi
c00173e2:	56                   	push   esi
c00173e3:	53                   	push   ebx
c00173e4:	83 ec 1c             	sub    esp,0x1c
c00173e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173f3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173ff:	01 df                	add    edi,ebx
c0017401:	39 fb                	cmp    ebx,edi
c0017403:	7d 1f                	jge    c0017424 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017405:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017409:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001740d:	7d 12                	jge    c0017421 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001740f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017411:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017415:	53                   	push   ebx
c0017416:	55                   	push   ebp
c0017417:	45                   	inc    ebp
c0017418:	56                   	push   esi
c0017419:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001741c:	83 c4 10             	add    esp,0x10
c001741f:	eb e8                	jmp    c0017409 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017421:	43                   	inc    ebx
c0017422:	eb dd                	jmp    c0017401 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017424:	83 c4 1c             	add    esp,0x1c
c0017427:	5b                   	pop    ebx
c0017428:	5e                   	pop    esi
c0017429:	5f                   	pop    edi
c001742a:	5d                   	pop    ebp
c001742b:	c3                   	ret    

c001742c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001742c:	55                   	push   ebp
c001742d:	57                   	push   edi
c001742e:	31 ff                	xor    edi,edi
c0017430:	56                   	push   esi
c0017431:	53                   	push   ebx
c0017432:	83 ec 1c             	sub    esp,0x1c
c0017435:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017439:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001743d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017444:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001744d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017451:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017455:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017458:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001745c:	01 f9                	add    ecx,edi
c001745e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017462:	7d 2f                	jge    c0017493 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017464:	31 f6                	xor    esi,esi
c0017466:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001746a:	01 f2                	add    edx,esi
c001746c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017470:	7d 1a                	jge    c001748c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017472:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017475:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017478:	46                   	inc    esi
c0017479:	51                   	push   ecx
c001747a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001747e:	52                   	push   edx
c001747f:	55                   	push   ebp
c0017480:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017483:	83 c4 10             	add    esp,0x10
c0017486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001748a:	eb da                	jmp    c0017466 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001748c:	47                   	inc    edi
c001748d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017491:	eb c5                	jmp    c0017458 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017493:	83 c4 1c             	add    esp,0x1c
c0017496:	5b                   	pop    ebx
c0017497:	5e                   	pop    esi
c0017498:	5f                   	pop    edi
c0017499:	5d                   	pop    ebp
c001749a:	c3                   	ret    
c001749b:	90                   	nop

c001749c <Video::blit(unsigned int*, int, int, int, int)>:
c001749c:	55                   	push   ebp
c001749d:	57                   	push   edi
c001749e:	56                   	push   esi
c001749f:	53                   	push   ebx
c00174a0:	83 ec 1c             	sub    esp,0x1c
c00174a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174ab:	85 c0                	test   eax,eax
c00174ad:	79 02                	jns    c00174b1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174af:	31 c0                	xor    eax,eax
c00174b1:	c1 e0 02             	shl    eax,0x2
c00174b4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174c0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174c4:	39 d8                	cmp    eax,ebx
c00174c6:	7e 49                	jle    c0017511 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174c8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174ce:	7c 41                	jl     c0017511 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174d0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174d4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174d8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174dc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174e0:	39 f9                	cmp    ecx,edi
c00174e2:	7e 22                	jle    c0017506 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174e4:	83 c5 04             	add    ebp,0x4
c00174e7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174ed:	7c 14                	jl     c0017503 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174ef:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174f1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174fc:	56                   	push   esi
c00174fd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017500:	83 c4 10             	add    esp,0x10
c0017503:	47                   	inc    edi
c0017504:	eb d2                	jmp    c00174d8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001750a:	43                   	inc    ebx
c001750b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001750f:	eb ab                	jmp    c00174bc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017511:	83 c4 1c             	add    esp,0x1c
c0017514:	5b                   	pop    ebx
c0017515:	5e                   	pop    esi
c0017516:	5f                   	pop    edi
c0017517:	5d                   	pop    ebp
c0017518:	c3                   	ret    
c0017519:	90                   	nop

c001751a <Video::clearScreen(unsigned int)>:
c001751a:	57                   	push   edi
c001751b:	56                   	push   esi
c001751c:	53                   	push   ebx
c001751d:	31 db                	xor    ebx,ebx
c001751f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017523:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017529:	7e 1f                	jle    c001754a <Video::clearScreen(unsigned int)+0x30>
c001752b:	31 ff                	xor    edi,edi
c001752d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017533:	7e 12                	jle    c0017547 <Video::clearScreen(unsigned int)+0x2d>
c0017535:	8b 06                	mov    eax,DWORD PTR [esi]
c0017537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001753b:	53                   	push   ebx
c001753c:	57                   	push   edi
c001753d:	47                   	inc    edi
c001753e:	56                   	push   esi
c001753f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017542:	83 c4 10             	add    esp,0x10
c0017545:	eb e6                	jmp    c001752d <Video::clearScreen(unsigned int)+0x13>
c0017547:	43                   	inc    ebx
c0017548:	eb d9                	jmp    c0017523 <Video::clearScreen(unsigned int)+0x9>
c001754a:	5b                   	pop    ebx
c001754b:	5e                   	pop    esi
c001754c:	5f                   	pop    edi
c001754d:	c3                   	ret    

c001754e <Video::putpixel(int, int, unsigned int)>:
c001754e:	c7 44 24 04 18 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b418
c0017556:	e9 0a 31 00 00       	jmp    c001a665 <Krnl::panic(char const*)>
c001755b:	90                   	nop

c001755c <Video::Video(char const*)>:
c001755c:	83 ec 0c             	sub    esp,0xc
c001755f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017563:	83 ec 08             	sub    esp,0x8
c0017566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001756a:	50                   	push   eax
c001756b:	e8 5e d0 ff ff       	call   c00145ce <Device::Device(char const*)>
c0017570:	83 c4 10             	add    esp,0x10
c0017573:	ba 9c b4 02 c0       	mov    edx,0xc002b49c
c0017578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001757c:	89 10                	mov    DWORD PTR [eax],edx
c001757e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017582:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001758c:	90                   	nop
c001758d:	83 c4 0c             	add    esp,0xc
c0017590:	c3                   	ret    
c0017591:	90                   	nop

c0017592 <Video::~Video()>:
c0017592:	83 ec 0c             	sub    esp,0xc
c0017595:	ba 9c b4 02 c0       	mov    edx,0xc002b49c
c001759a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759e:	89 10                	mov    DWORD PTR [eax],edx
c00175a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a4:	83 ec 0c             	sub    esp,0xc
c00175a7:	50                   	push   eax
c00175a8:	e8 03 cd ff ff       	call   c00142b0 <Device::~Device()>
c00175ad:	83 c4 10             	add    esp,0x10
c00175b0:	90                   	nop
c00175b1:	83 c4 0c             	add    esp,0xc
c00175b4:	c3                   	ret    
c00175b5:	90                   	nop

c00175b6 <Video::~Video()>:
c00175b6:	83 ec 0c             	sub    esp,0xc
c00175b9:	83 ec 0c             	sub    esp,0xc
c00175bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175c0:	e8 cd ff ff ff       	call   c0017592 <Video::~Video()>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	83 ec 08             	sub    esp,0x8
c00175cb:	68 64 01 00 00       	push   0x164
c00175d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175d4:	e8 fe b8 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00175d9:	83 c4 10             	add    esp,0x10
c00175dc:	83 c4 0c             	add    esp,0xc
c00175df:	c3                   	ret    

c00175e0 <Video::isMonochrome()>:
c00175e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175e4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175ea:	c3                   	ret    
c00175eb:	90                   	nop

c00175ec <Video::getWidth()>:
c00175ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175f0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175f6:	c3                   	ret    
c00175f7:	90                   	nop

c00175f8 <Video::getHeight()>:
c00175f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175fc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017602:	c3                   	ret    
c0017603:	90                   	nop

c0017604 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017604:	55                   	push   ebp
c0017605:	57                   	push   edi
c0017606:	56                   	push   esi
c0017607:	53                   	push   ebx
c0017608:	83 ec 2c             	sub    esp,0x2c
c001760b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001760f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017613:	83 f8 01             	cmp    eax,0x1
c0017616:	19 c9                	sbb    ecx,ecx
c0017618:	31 db                	xor    ebx,ebx
c001761a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001761e:	89 cd                	mov    ebp,ecx
c0017620:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017628:	f7 d5                	not    ebp
c001762a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017634:	01 d8                	add    eax,ebx
c0017636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001763a:	56                   	push   esi
c001763b:	e8 b8 ff ff ff       	call   c00175f8 <Video::getHeight()>
c0017640:	59                   	pop    ecx
c0017641:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017645:	7e 70                	jle    c00176b7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017647:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001764b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001764f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017652:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017656:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001765a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017661:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017665:	89 f8                	mov    eax,edi
c0017667:	83 c0 20             	add    eax,0x20
c001766a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001766e:	56                   	push   esi
c001766f:	e8 78 ff ff ff       	call   c00175ec <Video::getWidth()>
c0017674:	5a                   	pop    edx
c0017675:	39 c7                	cmp    edi,eax
c0017677:	7d 34                	jge    c00176ad <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017679:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001767e:	74 05                	je     c0017685 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017680:	8b 06                	mov    eax,DWORD PTR [esi]
c0017682:	55                   	push   ebp
c0017683:	eb 0d                	jmp    c0017692 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017685:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001768a:	74 12                	je     c001769e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001768c:	8b 06                	mov    eax,DWORD PTR [esi]
c001768e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017692:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017696:	57                   	push   edi
c0017697:	56                   	push   esi
c0017698:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001769b:	83 c4 10             	add    esp,0x10
c001769e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176a2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176a6:	47                   	inc    edi
c00176a7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176ab:	75 c1                	jne    c001766e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176ad:	43                   	inc    ebx
c00176ae:	83 fb 20             	cmp    ebx,0x20
c00176b1:	0f 85 79 ff ff ff    	jne    c0017630 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176b7:	83 c4 2c             	add    esp,0x2c
c00176ba:	5b                   	pop    ebx
c00176bb:	5e                   	pop    esi
c00176bc:	5f                   	pop    edi
c00176bd:	5d                   	pop    ebp
c00176be:	c3                   	ret    
c00176bf:	90                   	nop

c00176c0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176c0:	55                   	push   ebp
c00176c1:	57                   	push   edi
c00176c2:	56                   	push   esi
c00176c3:	53                   	push   ebx
c00176c4:	83 ec 28             	sub    esp,0x28
c00176c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176cb:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176cf:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176d3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176d7:	c1 e7 08             	shl    edi,0x8
c00176da:	01 c7                	add    edi,eax
c00176dc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176e0:	c1 e0 08             	shl    eax,0x8
c00176e3:	01 d0                	add    eax,edx
c00176e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ed:	0f af c7             	imul   eax,edi
c00176f0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176f7:	50                   	push   eax
c00176f8:	e8 46 81 ff ff       	call   c000f843 <malloc>
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	89 c5                	mov    ebp,eax
c0017702:	85 c0                	test   eax,eax
c0017704:	75 15                	jne    c001771b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017706:	83 ec 0c             	sub    esp,0xc
c0017709:	68 39 b4 02 c0       	push   0xc002b439
c001770e:	e8 a4 b8 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0017713:	83 c4 10             	add    esp,0x10
c0017716:	e9 1c 01 00 00       	jmp    c0017837 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001771b:	be 12 00 00 00       	mov    esi,0x12
c0017720:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017724:	74 11                	je     c0017737 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017726:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001772a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001772e:	c1 fe 03             	sar    esi,0x3
c0017731:	0f af f0             	imul   esi,eax
c0017734:	83 c6 12             	add    esi,0x12
c0017737:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001773b:	74 04                	je     c0017741 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001773d:	85 ff                	test   edi,edi
c001773f:	75 12                	jne    c0017753 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017741:	83 ec 0c             	sub    esp,0xc
c0017744:	68 50 b4 02 c0       	push   0xc002b450
c0017749:	e8 69 b8 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001774e:	e9 ce 00 00 00       	jmp    c0017821 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017753:	52                   	push   edx
c0017754:	52                   	push   edx
c0017755:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017759:	50                   	push   eax
c001775a:	68 65 b4 02 c0       	push   0xc002b465
c001775f:	e8 53 b8 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0017764:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017768:	83 c4 10             	add    esp,0x10
c001776b:	80 fa 02             	cmp    dl,0x2
c001776e:	0f 85 98 00 00 00    	jne    c001780c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017774:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017779:	75 10                	jne    c001778b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001777b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001777f:	75 0a                	jne    c001778b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017781:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017784:	83 e8 18             	sub    eax,0x18
c0017787:	a8 f7                	test   al,0xf7
c0017789:	74 0a                	je     c0017795 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001778b:	83 ec 0c             	sub    esp,0xc
c001778e:	68 72 b4 02 c0       	push   0xc002b472
c0017793:	eb 7f                	jmp    c0017814 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017795:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001779d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177a9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177b1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177b5:	75 0c                	jne    c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177b7:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177bc:	c1 e0 18             	shl    eax,0x18
c00177bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177c3:	41                   	inc    ecx
c00177c4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177c9:	c1 e2 10             	shl    edx,0x10
c00177cc:	89 d0                	mov    eax,edx
c00177ce:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177d3:	c1 e2 08             	shl    edx,0x8
c00177d6:	09 c2                	or     edx,eax
c00177d8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177dc:	09 c2                	or     edx,eax
c00177de:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177e2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177e6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177ea:	c1 f8 03             	sar    eax,0x3
c00177ed:	01 c6                	add    esi,eax
c00177ef:	89 c8                	mov    eax,ecx
c00177f1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177f5:	39 c7                	cmp    edi,eax
c00177f7:	7f b0                	jg     c00177a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177f9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017801:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017804:	7e 22                	jle    c0017828 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017806:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001780a:	eb 99                	jmp    c00177a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001780c:	50                   	push   eax
c001780d:	50                   	push   eax
c001780e:	52                   	push   edx
c001780f:	68 80 b4 02 c0       	push   0xc002b480
c0017814:	e8 9e b7 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0017819:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001781c:	e8 32 80 ff ff       	call   c000f853 <free>
c0017821:	83 c4 10             	add    esp,0x10
c0017824:	31 ed                	xor    ebp,ebp
c0017826:	eb 0f                	jmp    c0017837 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017828:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001782c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001782f:	89 38                	mov    DWORD PTR [eax],edi
c0017831:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017835:	89 08                	mov    DWORD PTR [eax],ecx
c0017837:	83 c4 1c             	add    esp,0x1c
c001783a:	89 e8                	mov    eax,ebp
c001783c:	5b                   	pop    ebx
c001783d:	5e                   	pop    esi
c001783e:	5f                   	pop    edi
c001783f:	5d                   	pop    ebp
c0017840:	c3                   	ret    
c0017841:	90                   	nop

c0017842 <Video::putTGA(int, int, unsigned char*, int)>:
c0017842:	55                   	push   ebp
c0017843:	57                   	push   edi
c0017844:	56                   	push   esi
c0017845:	53                   	push   ebx
c0017846:	83 ec 28             	sub    esp,0x28
c0017849:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001784d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017851:	50                   	push   eax
c0017852:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017856:	50                   	push   eax
c0017857:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001785b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001785f:	56                   	push   esi
c0017860:	e8 5b fe ff ff       	call   c00176c0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017865:	83 c4 20             	add    esp,0x20
c0017868:	85 c0                	test   eax,eax
c001786a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001786e:	74 35                	je     c00178a5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017870:	89 c7                	mov    edi,eax
c0017872:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017876:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001787a:	39 d8                	cmp    eax,ebx
c001787c:	7e 27                	jle    c00178a5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001787e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017882:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017886:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001788a:	39 e8                	cmp    eax,ebp
c001788c:	7e 14                	jle    c00178a2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001788e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017890:	83 c7 04             	add    edi,0x4
c0017893:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017896:	53                   	push   ebx
c0017897:	55                   	push   ebp
c0017898:	45                   	inc    ebp
c0017899:	56                   	push   esi
c001789a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001789d:	83 c4 10             	add    esp,0x10
c00178a0:	eb e0                	jmp    c0017882 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178a2:	43                   	inc    ebx
c00178a3:	eb cd                	jmp    c0017872 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178a5:	83 c4 1c             	add    esp,0x1c
c00178a8:	5b                   	pop    ebx
c00178a9:	5e                   	pop    esi
c00178aa:	5f                   	pop    edi
c00178ab:	5d                   	pop    ebp
c00178ac:	c3                   	ret    
c00178ad:	90                   	nop

c00178ae <ACPI::close(int, int, void*)>:
c00178ae:	83 ec 1c             	sub    esp,0x1c
c00178b1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178b9:	74 0a                	je     c00178c5 <ACPI::close(int, int, void*)+0x17>
c00178bb:	b8 00 00 00 00       	mov    eax,0x0
c00178c0:	e9 9a 00 00 00       	jmp    c001795f <ACPI::close(int, int, void*)+0xb1>
c00178c5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178ca:	75 37                	jne    c0017903 <ACPI::close(int, int, void*)+0x55>
c00178cc:	83 ec 0c             	sub    esp,0xc
c00178cf:	68 dc b4 02 c0       	push   0xc002b4dc
c00178d4:	e8 de b6 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00178d9:	83 c4 10             	add    esp,0x10
c00178dc:	a1 a8 0b 03 c0       	mov    eax,ds:0xc0030ba8
c00178e1:	85 c0                	test   eax,eax
c00178e3:	74 07                	je     c00178ec <ACPI::close(int, int, void*)+0x3e>
c00178e5:	a1 a8 0b 03 c0       	mov    eax,ds:0xc0030ba8
c00178ea:	ff d0                	call   eax
c00178ec:	83 ec 0c             	sub    esp,0xc
c00178ef:	68 00 b6 02 c0       	push   0xc002b600
c00178f4:	e8 6c 2d 00 00       	call   c001a665 <Krnl::panic(char const*)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017901:	eb 5c                	jmp    c001795f <ACPI::close(int, int, void*)+0xb1>
c0017903:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017908:	75 50                	jne    c001795a <ACPI::close(int, int, void*)+0xac>
c001790a:	a1 a4 0b 03 c0       	mov    eax,ds:0xc0030ba4
c001790f:	85 c0                	test   eax,eax
c0017911:	74 07                	je     c001791a <ACPI::close(int, int, void*)+0x6c>
c0017913:	a1 a4 0b 03 c0       	mov    eax,ds:0xc0030ba4
c0017918:	ff d0                	call   eax
c001791a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001791f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017924:	83 e0 02             	and    eax,0x2
c0017927:	74 1c                	je     c0017945 <ACPI::close(int, int, void*)+0x97>
c0017929:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017934:	89 c2                	mov    edx,eax
c0017936:	ec                   	in     al,dx
c0017937:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001793b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001793f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017943:	eb da                	jmp    c001791f <ACPI::close(int, int, void*)+0x71>
c0017945:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001794c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017951:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017955:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017959:	ee                   	out    dx,al
c001795a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001795f:	83 c4 1c             	add    esp,0x1c
c0017962:	c3                   	ret    

c0017963 <findRSDP()>:
c0017963:	83 ec 1c             	sub    esp,0x1c
c0017966:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001796b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017971:	83 e0 04             	and    eax,0x4
c0017974:	84 c0                	test   al,al
c0017976:	75 07                	jne    c001797f <findRSDP()+0x1c>
c0017978:	b8 00 00 00 00       	mov    eax,0x0
c001797d:	eb 6a                	jmp    c00179e9 <findRSDP()+0x86>
c001797f:	a1 34 e5 02 c0       	mov    eax,ds:0xc002e534
c0017984:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017989:	7f 1b                	jg     c00179a6 <findRSDP()+0x43>
c001798b:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0017990:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017996:	83 e2 fb             	and    edx,0xfffffffb
c0017999:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001799f:	b8 00 00 00 00       	mov    eax,0x0
c00179a4:	eb 43                	jmp    c00179e9 <findRSDP()+0x86>
c00179a6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179ae:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179b6:	77 2c                	ja     c00179e4 <findRSDP()+0x81>
c00179b8:	83 ec 04             	sub    esp,0x4
c00179bb:	6a 08                	push   0x8
c00179bd:	68 e9 b4 02 c0       	push   0xc002b4e9
c00179c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179c6:	e8 75 8c fe ff       	call   c0000640 <memcmp>
c00179cb:	83 c4 10             	add    esp,0x10
c00179ce:	85 c0                	test   eax,eax
c00179d0:	0f 94 c0             	sete   al
c00179d3:	84 c0                	test   al,al
c00179d5:	74 06                	je     c00179dd <findRSDP()+0x7a>
c00179d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179db:	eb 0c                	jmp    c00179e9 <findRSDP()+0x86>
c00179dd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179e2:	eb ca                	jmp    c00179ae <findRSDP()+0x4b>
c00179e4:	b8 00 00 00 00       	mov    eax,0x0
c00179e9:	83 c4 1c             	add    esp,0x1c
c00179ec:	c3                   	ret    

c00179ed <loadACPITables(unsigned char*)>:
c00179ed:	56                   	push   esi
c00179ee:	53                   	push   ebx
c00179ef:	83 ec 44             	sub    esp,0x44
c00179f2:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00179f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179fd:	83 e0 04             	and    eax,0x4
c0017a00:	84 c0                	test   al,al
c0017a02:	0f 84 05 02 00 00    	je     c0017c0d <loadACPITables(unsigned char*)+0x220>
c0017a08:	a0 c0 0d 03 c0       	mov    al,ds:0xc0030dc0
c0017a0d:	84 c0                	test   al,al
c0017a0f:	74 75                	je     c0017a86 <loadACPITables(unsigned char*)+0x99>
c0017a11:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a20:	83 e8 24             	sub    eax,0x24
c0017a23:	c1 e8 03             	shr    eax,0x3
c0017a26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a2a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a36:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a3a:	0f 8d b2 00 00 00    	jge    c0017af2 <loadACPITables(unsigned char*)+0x105>
c0017a40:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a44:	83 c0 24             	add    eax,0x24
c0017a47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a57:	c1 e0 03             	shl    eax,0x3
c0017a5a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a62:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a67:	89 c1                	mov    ecx,eax
c0017a69:	a1 ac 0b 03 c0       	mov    eax,ds:0xc0030bac
c0017a6e:	8d 50 01             	lea    edx,[eax+0x1]
c0017a71:	89 15 ac 0b 03 c0    	mov    DWORD PTR ds:0xc0030bac,edx
c0017a77:	89 ca                	mov    edx,ecx
c0017a79:	89 14 c5 c4 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf43c],edx
c0017a80:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a84:	eb ac                	jmp    c0017a32 <loadACPITables(unsigned char*)+0x45>
c0017a86:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a95:	83 e8 24             	sub    eax,0x24
c0017a98:	c1 e8 02             	shr    eax,0x2
c0017a9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a9f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017aa7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017aab:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017aaf:	7d 41                	jge    c0017af2 <loadACPITables(unsigned char*)+0x105>
c0017ab1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ab5:	83 c0 24             	add    eax,0x24
c0017ab8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017abc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ac0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ac4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ac8:	c1 e0 02             	shl    eax,0x2
c0017acb:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017acf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ad3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017ad5:	a1 ac 0b 03 c0       	mov    eax,ds:0xc0030bac
c0017ada:	8d 50 01             	lea    edx,[eax+0x1]
c0017add:	89 15 ac 0b 03 c0    	mov    DWORD PTR ds:0xc0030bac,edx
c0017ae3:	89 ca                	mov    edx,ecx
c0017ae5:	89 14 c5 c4 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf43c],edx
c0017aec:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017af0:	eb b5                	jmp    c0017aa7 <loadACPITables(unsigned char*)+0xba>
c0017af2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017afa:	a1 ac 0b 03 c0       	mov    eax,ds:0xc0030bac
c0017aff:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b03:	0f 8d 05 01 00 00    	jge    c0017c0e <loadACPITables(unsigned char*)+0x221>
c0017b09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b0d:	8b 04 c5 c4 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf43c]
c0017b14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b24:	25 ff 0f 00 00       	and    eax,0xfff
c0017b29:	89 c6                	mov    esi,eax
c0017b2b:	e8 ea a2 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017b30:	89 c3                	mov    ebx,eax
c0017b32:	83 ec 0c             	sub    esp,0xc
c0017b35:	6a 01                	push   0x1
c0017b37:	e8 43 a0 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017b3c:	83 c4 10             	add    esp,0x10
c0017b3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b43:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b49:	83 ec 0c             	sub    esp,0xc
c0017b4c:	6a 01                	push   0x1
c0017b4e:	6a 01                	push   0x1
c0017b50:	50                   	push   eax
c0017b51:	52                   	push   edx
c0017b52:	53                   	push   ebx
c0017b53:	e8 08 ab ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b58:	83 c4 20             	add    esp,0x20
c0017b5b:	09 f0                	or     eax,esi
c0017b5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b65:	c1 e0 03             	shl    eax,0x3
c0017b68:	05 c0 0b 03 c0       	add    eax,0xc0030bc0
c0017b6d:	83 ec 04             	sub    esp,0x4
c0017b70:	6a 04                	push   0x4
c0017b72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b76:	50                   	push   eax
c0017b77:	e8 c8 8b fe ff       	call   c0000744 <memcpy>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b8e:	05 00 10 00 00       	add    eax,0x1000
c0017b93:	c1 e8 0c             	shr    eax,0xc
c0017b96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba5:	25 ff 0f 00 00       	and    eax,0xfff
c0017baa:	89 c6                	mov    esi,eax
c0017bac:	e8 69 a2 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017bb1:	89 c3                	mov    ebx,eax
c0017bb3:	83 ec 0c             	sub    esp,0xc
c0017bb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bba:	e8 c0 9f ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017bbf:	83 c4 10             	add    esp,0x10
c0017bc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bc6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bcc:	83 ec 0c             	sub    esp,0xc
c0017bcf:	6a 01                	push   0x1
c0017bd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bd5:	50                   	push   eax
c0017bd6:	52                   	push   edx
c0017bd7:	53                   	push   ebx
c0017bd8:	e8 83 aa ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bdd:	83 c4 20             	add    esp,0x20
c0017be0:	09 f0                	or     eax,esi
c0017be2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017be6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017be9:	83 ec 0c             	sub    esp,0xc
c0017bec:	50                   	push   eax
c0017bed:	e8 13 a4 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c0017bf2:	83 c4 10             	add    esp,0x10
c0017bf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bfd:	89 14 c5 c4 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf43c],edx
c0017c04:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c08:	e9 ed fe ff ff       	jmp    c0017afa <loadACPITables(unsigned char*)+0x10d>
c0017c0d:	90                   	nop
c0017c0e:	83 c4 44             	add    esp,0x44
c0017c11:	5b                   	pop    ebx
c0017c12:	5e                   	pop    esi
c0017c13:	c3                   	ret    

c0017c14 <findRSDT(unsigned char*)>:
c0017c14:	56                   	push   esi
c0017c15:	53                   	push   ebx
c0017c16:	83 ec 44             	sub    esp,0x44
c0017c19:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0017c1e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c24:	83 e0 04             	and    eax,0x4
c0017c27:	84 c0                	test   al,al
c0017c29:	75 0a                	jne    c0017c35 <findRSDT(unsigned char*)+0x21>
c0017c2b:	b8 00 00 00 00       	mov    eax,0x0
c0017c30:	e9 f7 00 00 00       	jmp    c0017d2c <findRSDT(unsigned char*)+0x118>
c0017c35:	83 ec 04             	sub    esp,0x4
c0017c38:	6a 24                	push   0x24
c0017c3a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c42:	50                   	push   eax
c0017c43:	e8 fc 8a fe ff       	call   c0000744 <memcpy>
c0017c48:	83 c4 10             	add    esp,0x10
c0017c4b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c4f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c53:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c63:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c73:	25 ff 0f 00 00       	and    eax,0xfff
c0017c78:	89 c6                	mov    esi,eax
c0017c7a:	e8 9b a1 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017c7f:	89 c3                	mov    ebx,eax
c0017c81:	83 ec 0c             	sub    esp,0xc
c0017c84:	6a 02                	push   0x2
c0017c86:	e8 f4 9e ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017c8b:	83 c4 10             	add    esp,0x10
c0017c8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c92:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	6a 01                	push   0x1
c0017c9d:	6a 02                	push   0x2
c0017c9f:	50                   	push   eax
c0017ca0:	52                   	push   edx
c0017ca1:	53                   	push   ebx
c0017ca2:	e8 b9 a9 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ca7:	83 c4 20             	add    esp,0x20
c0017caa:	09 f0                	or     eax,esi
c0017cac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017cb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb4:	25 ff 0f 00 00       	and    eax,0xfff
c0017cb9:	89 c6                	mov    esi,eax
c0017cbb:	e8 5a a1 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017cc0:	89 c3                	mov    ebx,eax
c0017cc2:	83 ec 0c             	sub    esp,0xc
c0017cc5:	6a 02                	push   0x2
c0017cc7:	e8 b3 9e ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017cd3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cd9:	83 ec 0c             	sub    esp,0xc
c0017cdc:	6a 01                	push   0x1
c0017cde:	6a 02                	push   0x2
c0017ce0:	50                   	push   eax
c0017ce1:	52                   	push   edx
c0017ce2:	53                   	push   ebx
c0017ce3:	e8 78 a9 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ce8:	83 c4 20             	add    esp,0x20
c0017ceb:	09 f0                	or     eax,esi
c0017ced:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cf1:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017cf6:	75 11                	jne    c0017d09 <findRSDT(unsigned char*)+0xf5>
c0017cf8:	c6 05 c0 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030dc0,0x0
c0017cff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d03:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d07:	eb 1f                	jmp    c0017d28 <findRSDT(unsigned char*)+0x114>
c0017d09:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d0e:	75 11                	jne    c0017d21 <findRSDT(unsigned char*)+0x10d>
c0017d10:	c6 05 c0 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030dc0,0x1
c0017d17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d1b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d1f:	eb 07                	jmp    c0017d28 <findRSDT(unsigned char*)+0x114>
c0017d21:	b8 00 00 00 00       	mov    eax,0x0
c0017d26:	eb 04                	jmp    c0017d2c <findRSDT(unsigned char*)+0x118>
c0017d28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d2c:	83 c4 44             	add    esp,0x44
c0017d2f:	5b                   	pop    ebx
c0017d30:	5e                   	pop    esi
c0017d31:	c3                   	ret    

c0017d32 <findDataTable(unsigned char*, char*)>:
c0017d32:	83 ec 1c             	sub    esp,0x1c
c0017d35:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0017d3a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d40:	83 e0 04             	and    eax,0x4
c0017d43:	84 c0                	test   al,al
c0017d45:	75 07                	jne    c0017d4e <findDataTable(unsigned char*, char*)+0x1c>
c0017d47:	b8 00 00 00 00       	mov    eax,0x0
c0017d4c:	eb 7c                	jmp    c0017dca <findDataTable(unsigned char*, char*)+0x98>
c0017d4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d56:	a1 ac 0b 03 c0       	mov    eax,ds:0xc0030bac
c0017d5b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d5f:	7d 3a                	jge    c0017d9b <findDataTable(unsigned char*, char*)+0x69>
c0017d61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d65:	c1 e0 03             	shl    eax,0x3
c0017d68:	05 c0 0b 03 c0       	add    eax,0xc0030bc0
c0017d6d:	83 ec 04             	sub    esp,0x4
c0017d70:	6a 04                	push   0x4
c0017d72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d76:	50                   	push   eax
c0017d77:	e8 c4 88 fe ff       	call   c0000640 <memcmp>
c0017d7c:	83 c4 10             	add    esp,0x10
c0017d7f:	85 c0                	test   eax,eax
c0017d81:	0f 94 c0             	sete   al
c0017d84:	84 c0                	test   al,al
c0017d86:	74 0d                	je     c0017d95 <findDataTable(unsigned char*, char*)+0x63>
c0017d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d8c:	8b 04 c5 c4 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf43c]
c0017d93:	eb 35                	jmp    c0017dca <findDataTable(unsigned char*, char*)+0x98>
c0017d95:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d99:	eb bb                	jmp    c0017d56 <findDataTable(unsigned char*, char*)+0x24>
c0017d9b:	a0 c0 0d 03 c0       	mov    al,ds:0xc0030dc0
c0017da0:	84 c0                	test   al,al
c0017da2:	74 07                	je     c0017dab <findDataTable(unsigned char*, char*)+0x79>
c0017da4:	b8 58 00 00 00       	mov    eax,0x58
c0017da9:	eb 05                	jmp    c0017db0 <findDataTable(unsigned char*, char*)+0x7e>
c0017dab:	b8 52 00 00 00       	mov    eax,0x52
c0017db0:	83 ec 04             	sub    esp,0x4
c0017db3:	50                   	push   eax
c0017db4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017db8:	68 24 b6 02 c0       	push   0xc002b624
c0017dbd:	e8 f5 b1 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0017dc2:	83 c4 10             	add    esp,0x10
c0017dc5:	b8 00 00 00 00       	mov    eax,0x0
c0017dca:	83 c4 1c             	add    esp,0x1c
c0017dcd:	c3                   	ret    

c0017dce <scanMADT()>:
c0017dce:	53                   	push   ebx
c0017dcf:	83 ec 38             	sub    esp,0x38
c0017dd2:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0017dd7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ddd:	83 e0 04             	and    eax,0x4
c0017de0:	84 c0                	test   al,al
c0017de2:	0f 84 63 04 00 00    	je     c001824b <scanMADT()+0x47d>
c0017de8:	e8 76 fb ff ff       	call   c0017963 <findRSDP()>
c0017ded:	a3 cc 0d 03 c0       	mov    ds:0xc0030dcc,eax
c0017df2:	a1 cc 0d 03 c0       	mov    eax,ds:0xc0030dcc
c0017df7:	85 c0                	test   eax,eax
c0017df9:	75 19                	jne    c0017e14 <scanMADT()+0x46>
c0017dfb:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0017e00:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e06:	83 e2 fb             	and    edx,0xfffffffb
c0017e09:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e0f:	e9 3b 04 00 00       	jmp    c001824f <scanMADT()+0x481>
c0017e14:	a1 cc 0d 03 c0       	mov    eax,ds:0xc0030dcc
c0017e19:	83 ec 0c             	sub    esp,0xc
c0017e1c:	50                   	push   eax
c0017e1d:	e8 f2 fd ff ff       	call   c0017c14 <findRSDT(unsigned char*)>
c0017e22:	83 c4 10             	add    esp,0x10
c0017e25:	a3 c8 0d 03 c0       	mov    ds:0xc0030dc8,eax
c0017e2a:	a1 c8 0d 03 c0       	mov    eax,ds:0xc0030dc8
c0017e2f:	85 c0                	test   eax,eax
c0017e31:	75 19                	jne    c0017e4c <scanMADT()+0x7e>
c0017e33:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0017e38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e3e:	83 e2 fb             	and    edx,0xfffffffb
c0017e41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e47:	e9 03 04 00 00       	jmp    c001824f <scanMADT()+0x481>
c0017e4c:	a1 c8 0d 03 c0       	mov    eax,ds:0xc0030dc8
c0017e51:	83 ec 0c             	sub    esp,0xc
c0017e54:	50                   	push   eax
c0017e55:	e8 93 fb ff ff       	call   c00179ed <loadACPITables(unsigned char*)>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	a1 c8 0d 03 c0       	mov    eax,ds:0xc0030dc8
c0017e62:	83 ec 08             	sub    esp,0x8
c0017e65:	68 f2 b4 02 c0       	push   0xc002b4f2
c0017e6a:	50                   	push   eax
c0017e6b:	e8 c2 fe ff ff       	call   c0017d32 <findDataTable(unsigned char*, char*)>
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e77:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e7c:	75 19                	jne    c0017e97 <scanMADT()+0xc9>
c0017e7e:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0017e83:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e89:	83 e2 fe             	and    edx,0xfffffffe
c0017e8c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e92:	e9 b8 03 00 00       	jmp    c001824f <scanMADT()+0x481>
c0017e97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ea6:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017eaa:	0f 87 9f 03 00 00    	ja     c001824f <scanMADT()+0x481>
c0017eb0:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017eb8:	0f 87 91 03 00 00    	ja     c001824f <scanMADT()+0x481>
c0017ebe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ec6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eca:	8d 50 01             	lea    edx,[eax+0x1]
c0017ecd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ed1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ed9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017edd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee1:	8d 50 01             	lea    edx,[eax+0x1]
c0017ee4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ee8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ef0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017ef4:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ef9:	0f 86 4f 03 00 00    	jbe    c001824e <scanMADT()+0x480>
c0017eff:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f04:	75 57                	jne    c0017f5d <scanMADT()+0x18f>
c0017f06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f0a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f11:	8a 15 c0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fc0
c0017f17:	0f b6 d2             	movzx  edx,dl
c0017f1a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f1e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f22:	88 82 00 10 03 c0    	mov    BYTE PTR [edx-0x3ffcf000],al
c0017f28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f2f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f33:	8a 15 c0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fc0
c0017f39:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f3c:	88 0d c0 0f 03 c0    	mov    BYTE PTR ds:0xc0030fc0,cl
c0017f42:	0f b6 d2             	movzx  edx,dl
c0017f45:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f49:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f4d:	88 82 e0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf020],al
c0017f53:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f58:	e9 da 02 00 00       	jmp    c0018237 <scanMADT()+0x469>
c0017f5d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f62:	0f 85 14 01 00 00    	jne    c001807c <scanMADT()+0x2ae>
c0017f68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f73:	8a 15 80 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e80
c0017f79:	0f b6 d2             	movzx  edx,dl
c0017f7c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f80:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f84:	88 82 a0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf160],al
c0017f8a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f96:	01 d0                	add    eax,edx
c0017f98:	83 c0 2c             	add    eax,0x2c
c0017f9b:	8a 00                	mov    al,BYTE PTR [eax]
c0017f9d:	0f b6 d0             	movzx  edx,al
c0017fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa4:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fab:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017faf:	0f b6 c0             	movzx  eax,al
c0017fb2:	c1 e0 08             	shl    eax,0x8
c0017fb5:	89 d1                	mov    ecx,edx
c0017fb7:	09 c1                	or     ecx,eax
c0017fb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbd:	8d 50 02             	lea    edx,[eax+0x2]
c0017fc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fc8:	0f b6 c0             	movzx  eax,al
c0017fcb:	c1 e0 10             	shl    eax,0x10
c0017fce:	09 c1                	or     ecx,eax
c0017fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd4:	8d 50 03             	lea    edx,[eax+0x3]
c0017fd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fdb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fdf:	0f b6 c0             	movzx  eax,al
c0017fe2:	c1 e0 18             	shl    eax,0x18
c0017fe5:	09 c1                	or     ecx,eax
c0017fe7:	89 ca                	mov    edx,ecx
c0017fe9:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c0017fee:	0f b6 c0             	movzx  eax,al
c0017ff1:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c0017ff8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ffd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018001:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018005:	01 d0                	add    eax,edx
c0018007:	83 c0 2c             	add    eax,0x2c
c001800a:	8a 00                	mov    al,BYTE PTR [eax]
c001800c:	0f b6 d0             	movzx  edx,al
c001800f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018013:	8d 48 01             	lea    ecx,[eax+0x1]
c0018016:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001801a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001801e:	0f b6 c0             	movzx  eax,al
c0018021:	c1 e0 08             	shl    eax,0x8
c0018024:	89 d1                	mov    ecx,edx
c0018026:	09 c1                	or     ecx,eax
c0018028:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802c:	8d 50 02             	lea    edx,[eax+0x2]
c001802f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018033:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018037:	0f b6 c0             	movzx  eax,al
c001803a:	c1 e0 10             	shl    eax,0x10
c001803d:	09 c1                	or     ecx,eax
c001803f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018043:	8d 50 03             	lea    edx,[eax+0x3]
c0018046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001804a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001804e:	0f b6 c0             	movzx  eax,al
c0018051:	c1 e0 18             	shl    eax,0x18
c0018054:	09 c1                	or     ecx,eax
c0018056:	89 ca                	mov    edx,ecx
c0018058:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c001805d:	0f b6 c0             	movzx  eax,al
c0018060:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c0018067:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001806c:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c0018071:	40                   	inc    eax
c0018072:	a2 80 0e 03 c0       	mov    ds:0xc0030e80,al
c0018077:	e9 bb 01 00 00       	jmp    c0018237 <scanMADT()+0x469>
c001807c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018081:	0f 85 e9 00 00 00    	jne    c0018170 <scanMADT()+0x3a2>
c0018087:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808b:	8d 50 01             	lea    edx,[eax+0x1]
c001808e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018092:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018096:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001809a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001809e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a2:	8d 50 01             	lea    edx,[eax+0x1]
c00180a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180b1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bd:	01 d0                	add    eax,edx
c00180bf:	83 c0 2c             	add    eax,0x2c
c00180c2:	8a 00                	mov    al,BYTE PTR [eax]
c00180c4:	0f b6 d0             	movzx  edx,al
c00180c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00180ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180d6:	0f b6 c0             	movzx  eax,al
c00180d9:	c1 e0 08             	shl    eax,0x8
c00180dc:	89 d1                	mov    ecx,edx
c00180de:	09 c1                	or     ecx,eax
c00180e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e4:	8d 50 02             	lea    edx,[eax+0x2]
c00180e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180eb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ef:	0f b6 c0             	movzx  eax,al
c00180f2:	c1 e0 10             	shl    eax,0x10
c00180f5:	09 c1                	or     ecx,eax
c00180f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180fb:	8d 50 03             	lea    edx,[eax+0x3]
c00180fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018102:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018106:	0f b6 c0             	movzx  eax,al
c0018109:	c1 e0 18             	shl    eax,0x18
c001810c:	09 c8                	or     eax,ecx
c001810e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018112:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018117:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001811b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811f:	01 d0                	add    eax,edx
c0018121:	83 c0 2c             	add    eax,0x2c
c0018124:	8a 00                	mov    al,BYTE PTR [eax]
c0018126:	0f b6 c0             	movzx  eax,al
c0018129:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001812d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018130:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018134:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018138:	0f b6 d2             	movzx  edx,dl
c001813b:	c1 e2 08             	shl    edx,0x8
c001813e:	09 d0                	or     eax,edx
c0018140:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018145:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001814a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001814f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018153:	88 90 40 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd28c0],dl
c0018159:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001815e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018163:	66 89 84 12 60 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf1a0],ax
c001816b:	e9 c7 00 00 00       	jmp    c0018237 <scanMADT()+0x469>
c0018170:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018175:	0f 85 b0 00 00 00    	jne    c001822b <scanMADT()+0x45d>
c001817b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817f:	8d 50 01             	lea    edx,[eax+0x1]
c0018182:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018186:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001818a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001818e:	0f b6 c0             	movzx  eax,al
c0018191:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018195:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018199:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001819d:	01 d0                	add    eax,edx
c001819f:	83 c0 2c             	add    eax,0x2c
c00181a2:	8a 00                	mov    al,BYTE PTR [eax]
c00181a4:	0f b6 d0             	movzx  edx,al
c00181a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00181ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181b6:	0f b6 c0             	movzx  eax,al
c00181b9:	c1 e0 08             	shl    eax,0x8
c00181bc:	09 d0                	or     eax,edx
c00181be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181c2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181cb:	8d 50 01             	lea    edx,[eax+0x1]
c00181ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181da:	0f b6 c0             	movzx  eax,al
c00181dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e5:	c1 e0 08             	shl    eax,0x8
c00181e8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181ec:	89 c1                	mov    ecx,eax
c00181ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181f2:	c1 e0 18             	shl    eax,0x18
c00181f5:	89 c3                	mov    ebx,eax
c00181f7:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00181fc:	8d 50 01             	lea    edx,[eax+0x1]
c00181ff:	89 15 d0 0d 03 c0    	mov    DWORD PTR ds:0xc0030dd0,edx
c0018205:	09 d9                	or     ecx,ebx
c0018207:	89 ca                	mov    edx,ecx
c0018209:	89 14 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],edx
c0018210:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001821c:	68 54 b6 02 c0       	push   0xc002b654
c0018221:	e8 91 ad ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018226:	83 c4 10             	add    esp,0x10
c0018229:	eb 0c                	jmp    c0018237 <scanMADT()+0x469>
c001822b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018230:	75 05                	jne    c0018237 <scanMADT()+0x469>
c0018232:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018237:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001823c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018240:	01 d0                	add    eax,edx
c0018242:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018246:	e9 54 fc ff ff       	jmp    c0017e9f <scanMADT()+0xd1>
c001824b:	90                   	nop
c001824c:	eb 01                	jmp    c001824f <scanMADT()+0x481>
c001824e:	90                   	nop
c001824f:	83 c4 38             	add    esp,0x38
c0018252:	5b                   	pop    ebx
c0018253:	c3                   	ret    

c0018254 <ACPI::ACPI()>:
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825b:	83 ec 08             	sub    esp,0x8
c001825e:	68 f7 b4 02 c0       	push   0xc002b4f7
c0018263:	50                   	push   eax
c0018264:	e8 65 c3 ff ff       	call   c00145ce <Device::Device(char const*)>
c0018269:	83 c4 10             	add    esp,0x10
c001826c:	ba c8 b6 02 c0       	mov    edx,0xc002b6c8
c0018271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018275:	89 10                	mov    DWORD PTR [eax],edx
c0018277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001827b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018286:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018294:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001829e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ad:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182b4:	e8 15 fb ff ff       	call   c0017dce <scanMADT()>
c00182b9:	90                   	nop
c00182ba:	83 c4 0c             	add    esp,0xc
c00182bd:	c3                   	ret    

c00182be <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182be:	83 ec 2c             	sub    esp,0x2c
c00182c1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182c9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182cd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182d1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182d6:	88 d0                	mov    al,dl
c00182d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182f3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182f7:	0f 8d 97 00 00 00    	jge    c0018394 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018301:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018305:	83 c2 2a             	add    edx,0x2a
c0018308:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001830c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018311:	75 78                	jne    c001838b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018313:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018317:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001831b:	83 c2 2a             	add    edx,0x2a
c001831e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018322:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018326:	75 63                	jne    c001838b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018328:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001832d:	74 3a                	je     c0018369 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001832f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018333:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018337:	83 c2 2a             	add    edx,0x2a
c001833a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001833e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018342:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018345:	39 c2                	cmp    edx,eax
c0018347:	74 10                	je     c0018359 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018349:	83 ec 0c             	sub    esp,0xc
c001834c:	68 90 b6 02 c0       	push   0xc002b690
c0018351:	e8 0f 23 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0018356:	83 c4 10             	add    esp,0x10
c0018359:	83 ec 0c             	sub    esp,0xc
c001835c:	68 fc b4 02 c0       	push   0xc002b4fc
c0018361:	e8 ff 22 00 00       	call   c001a665 <Krnl::panic(char const*)>
c0018366:	83 c4 10             	add    esp,0x10
c0018369:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001836d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018371:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018375:	83 c2 2a             	add    edx,0x2a
c0018378:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001837c:	8b 02                	mov    eax,DWORD PTR [edx]
c001837e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018381:	89 01                	mov    DWORD PTR [ecx],eax
c0018383:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018386:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001838b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001838f:	e9 55 ff ff ff       	jmp    c00182e9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018394:	90                   	nop
c0018395:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018399:	83 c4 2c             	add    esp,0x2c
c001839c:	c2 04 00             	ret    0x4
c001839f:	90                   	nop

c00183a0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183a0:	83 ec 1c             	sub    esp,0x1c
c00183a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183b4:	88 c8                	mov    al,cl
c00183b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183ba:	88 d0                	mov    al,dl
c00183bc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ce:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183d1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183d5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183dd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183e7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183ee:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183fd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018401:	8d 48 01             	lea    ecx,[eax+0x1]
c0018404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018408:	83 c2 2a             	add    edx,0x2a
c001840b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001840f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018413:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001841d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018420:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018424:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018432:	8d 50 01             	lea    edx,[eax+0x1]
c0018435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018439:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001843f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018443:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018449:	3d 00 02 00 00       	cmp    eax,0x200
c001844e:	75 10                	jne    c0018460 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018450:	83 ec 0c             	sub    esp,0xc
c0018453:	68 0b b5 02 c0       	push   0xc002b50b
c0018458:	e8 08 22 00 00       	call   c001a665 <Krnl::panic(char const*)>
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	90                   	nop
c0018461:	83 c4 1c             	add    esp,0x1c
c0018464:	c3                   	ret    
c0018465:	90                   	nop

c0018466 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018466:	b8 00 00 00 00       	mov    eax,0x0
c001846b:	c3                   	ret    

c001846c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001846c:	83 ec 1c             	sub    esp,0x1c
c001846f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018473:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018476:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001847a:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001847f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018484:	83 ec 08             	sub    esp,0x8
c0018487:	52                   	push   edx
c0018488:	50                   	push   eax
c0018489:	e8 ca 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018495:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001849a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001849f:	83 ec 04             	sub    esp,0x4
c00184a2:	6a 01                	push   0x1
c00184a4:	52                   	push   edx
c00184a5:	50                   	push   eax
c00184a6:	e8 c3 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00184ab:	83 c4 10             	add    esp,0x10
c00184ae:	90                   	nop
c00184af:	83 c4 1c             	add    esp,0x1c
c00184b2:	c3                   	ret    
c00184b3:	90                   	nop

c00184b4 <ACPI::open(int, int, void*)>:
c00184b4:	53                   	push   ebx
c00184b5:	83 ec 28             	sub    esp,0x28
c00184b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bc:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184ce:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00184d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184d9:	83 e0 04             	and    eax,0x4
c00184dc:	84 c0                	test   al,al
c00184de:	74 47                	je     c0018527 <ACPI::open(int, int, void*)+0x73>
c00184e0:	a1 c8 0d 03 c0       	mov    eax,ds:0xc0030dc8
c00184e5:	83 ec 08             	sub    esp,0x8
c00184e8:	68 28 b5 02 c0       	push   0xc002b528
c00184ed:	50                   	push   eax
c00184ee:	e8 3f f8 ff ff       	call   c0017d32 <findDataTable(unsigned char*, char*)>
c00184f3:	83 c4 10             	add    esp,0x10
c00184f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184ff:	74 26                	je     c0018527 <ACPI::open(int, int, void*)+0x73>
c0018501:	83 ec 0c             	sub    esp,0xc
c0018504:	68 2d b5 02 c0       	push   0xc002b52d
c0018509:	e8 a9 aa ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018515:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001851c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018520:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018527:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001852f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018533:	8a 00                	mov    al,BYTE PTR [eax]
c0018535:	3c 01                	cmp    al,0x1
c0018537:	75 28                	jne    c0018561 <ACPI::open(int, int, void*)+0xad>
c0018539:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018544:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018548:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001854f:	83 ec 0c             	sub    esp,0xc
c0018552:	68 3e b5 02 c0       	push   0xc002b53e
c0018557:	e8 5b aa ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	eb 25                	jmp    c0018586 <ACPI::open(int, int, void*)+0xd2>
c0018561:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018565:	8a 00                	mov    al,BYTE PTR [eax]
c0018567:	3c 02                	cmp    al,0x2
c0018569:	75 1b                	jne    c0018586 <ACPI::open(int, int, void*)+0xd2>
c001856b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018576:	83 ec 0c             	sub    esp,0xc
c0018579:	68 46 b5 02 c0       	push   0xc002b546
c001857e:	e8 34 aa ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018583:	83 c4 10             	add    esp,0x10
c0018586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001858a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018590:	83 f0 01             	xor    eax,0x1
c0018593:	84 c0                	test   al,al
c0018595:	74 6a                	je     c0018601 <ACPI::open(int, int, void*)+0x14d>
c0018597:	83 ec 0c             	sub    esp,0xc
c001859a:	68 4e b5 02 c0       	push   0xc002b54e
c001859f:	e8 13 aa ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00185a4:	83 c4 10             	add    esp,0x10
c00185a7:	e8 a4 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185b0:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185b5:	75 28                	jne    c00185df <ACPI::open(int, int, void*)+0x12b>
c00185b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185bb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185cd:	83 ec 0c             	sub    esp,0xc
c00185d0:	68 5c b5 02 c0       	push   0xc002b55c
c00185d5:	e8 dd a9 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00185da:	83 c4 10             	add    esp,0x10
c00185dd:	eb 22                	jmp    c0018601 <ACPI::open(int, int, void*)+0x14d>
c00185df:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185e4:	75 1b                	jne    c0018601 <ACPI::open(int, int, void*)+0x14d>
c00185e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ea:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f1:	83 ec 0c             	sub    esp,0xc
c00185f4:	68 66 b5 02 c0       	push   0xc002b566
c00185f9:	e8 b9 a9 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00185fe:	83 c4 10             	add    esp,0x10
c0018601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018605:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001860b:	84 c0                	test   al,al
c001860d:	74 13                	je     c0018622 <ACPI::open(int, int, void*)+0x16e>
c001860f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018613:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018619:	83 f0 01             	xor    eax,0x1
c001861c:	0f b6 c0             	movzx  eax,al
c001861f:	40                   	inc    eax
c0018620:	eb 05                	jmp    c0018627 <ACPI::open(int, int, void*)+0x173>
c0018622:	b8 00 00 00 00       	mov    eax,0x0
c0018627:	83 ec 08             	sub    esp,0x8
c001862a:	50                   	push   eax
c001862b:	68 70 b5 02 c0       	push   0xc002b570
c0018630:	e8 82 a9 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018635:	83 c4 10             	add    esp,0x10
c0018638:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001863c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018642:	84 c0                	test   al,al
c0018644:	74 67                	je     c00186ad <ACPI::open(int, int, void*)+0x1f9>
c0018646:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001864e:	83 ec 0c             	sub    esp,0xc
c0018651:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018655:	e8 e9 71 ff ff       	call   c000f843 <malloc>
c001865a:	83 c4 10             	add    esp,0x10
c001865d:	89 c3                	mov    ebx,eax
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	53                   	push   ebx
c0018663:	e8 f6 a2 00 00       	call   c002295e <PCI::PCI()>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001866f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018673:	83 ec 08             	sub    esp,0x8
c0018676:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001867a:	50                   	push   eax
c001867b:	e8 5e bd ff ff       	call   c00143de <Device::addChild(Device*)>
c0018680:	83 c4 10             	add    esp,0x10
c0018683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018687:	8b 00                	mov    eax,DWORD PTR [eax]
c0018689:	83 c0 08             	add    eax,0x8
c001868c:	8b 00                	mov    eax,DWORD PTR [eax]
c001868e:	6a 00                	push   0x0
c0018690:	6a 00                	push   0x0
c0018692:	6a 00                	push   0x0
c0018694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018698:	ff d0                	call   eax
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	83 ec 0c             	sub    esp,0xc
c00186a0:	68 79 b5 02 c0       	push   0xc002b579
c00186a5:	e8 0d a9 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	83 ec 0c             	sub    esp,0xc
c00186b0:	68 84 b5 02 c0       	push   0xc002b584
c00186b5:	e8 81 46 00 00       	call   c001cd3b <Thr::loadKernelSymbolTable(char const*)>
c00186ba:	83 c4 10             	add    esp,0x10
c00186bd:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c00186c3:	83 ec 08             	sub    esp,0x8
c00186c6:	6a 01                	push   0x1
c00186c8:	68 a2 b5 02 c0       	push   0xc002b5a2
c00186cd:	e8 c6 50 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	83 ec 08             	sub    esp,0x8
c00186d8:	53                   	push   ebx
c00186d9:	50                   	push   eax
c00186da:	e8 08 53 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c00186e8:	83 ec 08             	sub    esp,0x8
c00186eb:	6a 01                	push   0x1
c00186ed:	68 bf b5 02 c0       	push   0xc002b5bf
c00186f2:	e8 a1 50 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	83 ec 08             	sub    esp,0x8
c00186fd:	53                   	push   ebx
c00186fe:	50                   	push   eax
c00186ff:	e8 e3 52 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c0018704:	83 c4 10             	add    esp,0x10
c0018707:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001870c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018712:	83 e0 04             	and    eax,0x4
c0018715:	84 c0                	test   al,al
c0018717:	0f 84 d2 00 00 00    	je     c00187ef <ACPI::open(int, int, void*)+0x33b>
c001871d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018724:	83 ec 0c             	sub    esp,0xc
c0018727:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001872b:	e8 13 71 ff ff       	call   c000f843 <malloc>
c0018730:	83 c4 10             	add    esp,0x10
c0018733:	89 c3                	mov    ebx,eax
c0018735:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001873a:	83 ec 04             	sub    esp,0x4
c001873d:	50                   	push   eax
c001873e:	68 dc b5 02 c0       	push   0xc002b5dc
c0018743:	53                   	push   ebx
c0018744:	e8 c7 ad ff ff       	call   c0013510 <File::File(char const*, Process*)>
c0018749:	83 c4 10             	add    esp,0x10
c001874c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018750:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018755:	74 17                	je     c001876e <ACPI::open(int, int, void*)+0x2ba>
c0018757:	83 ec 0c             	sub    esp,0xc
c001875a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001875e:	e8 7f b0 ff ff       	call   c00137e2 <File::exists()>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	84 c0                	test   al,al
c0018768:	74 04                	je     c001876e <ACPI::open(int, int, void*)+0x2ba>
c001876a:	b0 01                	mov    al,0x1
c001876c:	eb 02                	jmp    c0018770 <ACPI::open(int, int, void*)+0x2bc>
c001876e:	b0 00                	mov    al,0x0
c0018770:	84 c0                	test   al,al
c0018772:	74 22                	je     c0018796 <ACPI::open(int, int, void*)+0x2e2>
c0018774:	83 ec 08             	sub    esp,0x8
c0018777:	6a 01                	push   0x1
c0018779:	68 dc b5 02 c0       	push   0xc002b5dc
c001877e:	e8 15 50 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c0018783:	83 c4 10             	add    esp,0x10
c0018786:	83 ec 08             	sub    esp,0x8
c0018789:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001878d:	50                   	push   eax
c001878e:	e8 54 52 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c0018793:	83 c4 10             	add    esp,0x10
c0018796:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001879b:	74 1e                	je     c00187bb <ACPI::open(int, int, void*)+0x307>
c001879d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187a2:	74 17                	je     c00187bb <ACPI::open(int, int, void*)+0x307>
c00187a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00187aa:	83 c0 08             	add    eax,0x8
c00187ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00187af:	83 ec 0c             	sub    esp,0xc
c00187b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187b6:	ff d0                	call   eax
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	a1 c8 0d 03 c0       	mov    eax,ds:0xc0030dc8
c00187c0:	83 ec 08             	sub    esp,0x8
c00187c3:	68 f9 b5 02 c0       	push   0xc002b5f9
c00187c8:	50                   	push   eax
c00187c9:	e8 64 f5 ff ff       	call   c0017d32 <findDataTable(unsigned char*, char*)>
c00187ce:	83 c4 10             	add    esp,0x10
c00187d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187d5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187da:	74 13                	je     c00187ef <ACPI::open(int, int, void*)+0x33b>
c00187dc:	83 ec 08             	sub    esp,0x8
c00187df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187e7:	e8 80 fc ff ff       	call   c001846c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187ec:	83 c4 10             	add    esp,0x10
c00187ef:	b8 00 00 00 00       	mov    eax,0x0
c00187f4:	83 c4 28             	add    esp,0x28
c00187f7:	5b                   	pop    ebx
c00187f8:	c3                   	ret    
c00187f9:	90                   	nop

c00187fa <ACPI::sleep()>:
c00187fa:	83 ec 0c             	sub    esp,0xc
c00187fd:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c0018802:	85 c0                	test   eax,eax
c0018804:	74 07                	je     c001880d <ACPI::sleep()+0x13>
c0018806:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001880b:	ff d0                	call   eax
c001880d:	90                   	nop
c001880e:	83 c4 0c             	add    esp,0xc
c0018811:	c3                   	ret    

c0018812 <CPU::close(int, int, void*)>:
c0018812:	31 c0                	xor    eax,eax
c0018814:	c3                   	ret    
c0018815:	90                   	nop

c0018816 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018816:	55                   	push   ebp
c0018817:	57                   	push   edi
c0018818:	56                   	push   esi
c0018819:	53                   	push   ebx
c001881a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001881e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018822:	89 ce                	mov    esi,ecx
c0018824:	89 d5                	mov    ebp,edx
c0018826:	80 f9 04             	cmp    cl,0x4
c0018829:	75 28                	jne    c0018853 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001882b:	8d 42 f9             	lea    eax,[edx-0x7]
c001882e:	3c 03                	cmp    al,0x3
c0018830:	0f 86 63 01 00 00    	jbe    c0018999 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018836:	80 fa 03             	cmp    dl,0x3
c0018839:	0f 84 5a 01 00 00    	je     c0018999 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001883f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018842:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018847:	89 fb                	mov    ebx,edi
c0018849:	80 fb 01             	cmp    bl,0x1
c001884c:	77 4e                	ja     c001889c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001884e:	e9 52 01 00 00       	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018853:	80 f9 05             	cmp    cl,0x5
c0018856:	75 4d                	jne    c00188a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018858:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c001885d:	80 fa 03             	cmp    dl,0x3
c0018860:	0f 86 3f 01 00 00    	jbe    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018866:	8d 7a fa             	lea    edi,[edx-0x6]
c0018869:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c001886e:	89 fb                	mov    ebx,edi
c0018870:	80 fb 01             	cmp    bl,0x1
c0018873:	0f 86 2c 01 00 00    	jbe    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018879:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c001887e:	80 fa 08             	cmp    dl,0x8
c0018881:	0f 84 1e 01 00 00    	je     c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018887:	89 d7                	mov    edi,edx
c0018889:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c001888e:	83 e7 fb             	and    edi,0xfffffffb
c0018891:	89 fb                	mov    ebx,edi
c0018893:	80 fb 09             	cmp    bl,0x9
c0018896:	0f 84 09 01 00 00    	je     c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889c:	31 c0                	xor    eax,eax
c001889e:	89 eb                	mov    ebx,ebp
c00188a0:	0f b6 fb             	movzx  edi,bl
c00188a3:	eb 30                	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188a5:	31 c0                	xor    eax,eax
c00188a7:	80 f9 06             	cmp    cl,0x6
c00188aa:	75 f2                	jne    c001889e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188ac:	80 fa 0a             	cmp    dl,0xa
c00188af:	77 ed                	ja     c001889e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188b1:	bf de 05 00 00       	mov    edi,0x5de
c00188b6:	0f a3 d7             	bt     edi,edx
c00188b9:	73 e3                	jae    c001889e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188bb:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00188c0:	e9 e0 00 00 00       	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c5:	39 c7                	cmp    edi,eax
c00188c7:	0f 84 d3 00 00 00    	je     c00189a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188cd:	40                   	inc    eax
c00188ce:	3d d0 00 00 00       	cmp    eax,0xd0
c00188d3:	74 09                	je     c00188de <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188d5:	89 f3                	mov    ebx,esi
c00188d7:	80 fb 0f             	cmp    bl,0xf
c00188da:	75 f1                	jne    c00188cd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188dc:	eb e7                	jmp    c00188c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188de:	80 f9 10             	cmp    cl,0x10
c00188e1:	75 14                	jne    c00188f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188e3:	8d 42 fc             	lea    eax,[edx-0x4]
c00188e6:	83 e0 fb             	and    eax,0xfffffffb
c00188e9:	3c 02                	cmp    al,0x2
c00188eb:	76 34                	jbe    c0018921 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188ed:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c00188f2:	80 fa 02             	cmp    dl,0x2
c00188f5:	eb 24                	jmp    c001891b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188f7:	80 f9 11             	cmp    cl,0x11
c00188fa:	75 13                	jne    c001890f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188fc:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018901:	80 fa 03             	cmp    dl,0x3
c0018904:	0f 85 9b 00 00 00    	jne    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890a:	e9 91 00 00 00       	jmp    c00189a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001890f:	80 f9 12             	cmp    cl,0x12
c0018912:	75 14                	jne    c0018928 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018914:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018919:	fe ca                	dec    dl
c001891b:	0f 85 84 00 00 00    	jne    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018921:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018926:	eb 7d                	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018928:	80 f9 14             	cmp    cl,0x14
c001892b:	75 12                	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001892d:	4a                   	dec    edx
c001892e:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018933:	80 fa 01             	cmp    dl,0x1
c0018936:	77 6d                	ja     c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018938:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c001893d:	eb 66                	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893f:	80 f9 15             	cmp    cl,0x15
c0018942:	75 31                	jne    c0018975 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018944:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018949:	80 fa 01             	cmp    dl,0x1
c001894c:	74 57                	je     c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894e:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018953:	80 fa 13             	cmp    dl,0x13
c0018956:	76 0c                	jbe    c0018964 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018958:	80 fa 30             	cmp    dl,0x30
c001895b:	75 48                	jne    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895d:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018962:	eb 41                	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018964:	b9 04 00 09 00       	mov    ecx,0x90004
c0018969:	0f a3 d1             	bt     ecx,edx
c001896c:	73 37                	jae    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896e:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018973:	eb 30                	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018975:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c001897a:	80 f9 16             	cmp    cl,0x16
c001897d:	75 26                	jne    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897f:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018984:	84 d2                	test   dl,dl
c0018986:	74 1d                	je     c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018988:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c001898d:	80 fa 30             	cmp    dl,0x30
c0018990:	75 13                	jne    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018992:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018997:	eb 0c                	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018999:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c001899e:	eb 05                	jmp    c00189a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a0:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c00189a5:	5b                   	pop    ebx
c00189a6:	5e                   	pop    esi
c00189a7:	5f                   	pop    edi
c00189a8:	5d                   	pop    ebp
c00189a9:	c3                   	ret    

c00189aa <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189b2:	80 f9 04             	cmp    cl,0x4
c00189b5:	75 6b                	jne    c0018a22 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189b7:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c00189bc:	80 fa 01             	cmp    dl,0x1
c00189bf:	0f 86 92 02 00 00    	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c5:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c00189ca:	80 fa 02             	cmp    dl,0x2
c00189cd:	0f 84 84 02 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d3:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00189d8:	80 fa 03             	cmp    dl,0x3
c00189db:	0f 84 76 02 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c00189e6:	80 fa 04             	cmp    dl,0x4
c00189e9:	0f 84 68 02 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00189f4:	80 fa 05             	cmp    dl,0x5
c00189f7:	0f 84 5a 02 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a02:	80 fa 07             	cmp    dl,0x7
c0018a05:	0f 84 4c 02 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	83 ea 08             	sub    edx,0x8
c0018a0e:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018a13:	80 fa 01             	cmp    dl,0x1
c0018a16:	0f 87 3b 02 00 00    	ja     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1c:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a21:	c3                   	ret    
c0018a22:	80 f9 05             	cmp    cl,0x5
c0018a25:	75 45                	jne    c0018a6c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a27:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a2a:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a2f:	80 f9 02             	cmp    cl,0x2
c0018a32:	0f 86 1f 02 00 00    	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a38:	80 fa 04             	cmp    dl,0x4
c0018a3b:	0f 84 f3 01 00 00    	je     c0018c34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a41:	80 fa 07             	cmp    dl,0x7
c0018a44:	0f 84 0d 02 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4a:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a4f:	80 fa 08             	cmp    dl,0x8
c0018a52:	0f 84 ff 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a58:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018a5d:	80 fa 09             	cmp    dl,0x9
c0018a60:	0f 85 f1 01 00 00    	jne    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a66:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a6b:	c3                   	ret    
c0018a6c:	80 f9 06             	cmp    cl,0x6
c0018a6f:	0f 85 85 01 00 00    	jne    c0018bfa <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a75:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a7a:	80 fa 01             	cmp    dl,0x1
c0018a7d:	0f 84 d4 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a83:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a86:	3c 01                	cmp    al,0x1
c0018a88:	0f 86 ac 01 00 00    	jbe    c0018c3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a8e:	80 fa 03             	cmp    dl,0x3
c0018a91:	0f 84 a3 01 00 00    	je     c0018c3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a97:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a9a:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a9f:	80 f9 01             	cmp    cl,0x1
c0018aa2:	0f 86 af 01 00 00    	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa8:	80 fa 09             	cmp    dl,0x9
c0018aab:	0f 84 8f 01 00 00    	je     c0018c40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ab1:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018ab4:	80 f9 01             	cmp    cl,0x1
c0018ab7:	0f 86 9a 01 00 00    	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abd:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018ac2:	80 fa 0d             	cmp    dl,0xd
c0018ac5:	0f 84 8c 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acb:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018ad0:	80 fa 0e             	cmp    dl,0xe
c0018ad3:	0f 84 7e 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad9:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018ade:	80 fa 0f             	cmp    dl,0xf
c0018ae1:	0f 84 70 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae7:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018aec:	80 fa 15             	cmp    dl,0x15
c0018aef:	0f 84 62 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af5:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018af8:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018afd:	80 f9 01             	cmp    cl,0x1
c0018b00:	0f 86 51 01 00 00    	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b06:	80 fa 1a             	cmp    dl,0x1a
c0018b09:	0f 84 37 01 00 00    	je     c0018c46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b0f:	80 fa 1c             	cmp    dl,0x1c
c0018b12:	0f 84 34 01 00 00    	je     c0018c4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b18:	80 fa 1d             	cmp    dl,0x1d
c0018b1b:	0f 84 36 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b21:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018b26:	80 fa 25             	cmp    dl,0x25
c0018b29:	0f 84 28 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b32:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b37:	80 f9 01             	cmp    cl,0x1
c0018b3a:	0f 86 17 01 00 00    	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b40:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b45:	80 fa 2a             	cmp    dl,0x2a
c0018b48:	0f 84 09 01 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4e:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018b53:	80 fa 2c             	cmp    dl,0x2c
c0018b56:	0f 84 fb 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5c:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b61:	80 fa 2d             	cmp    dl,0x2d
c0018b64:	0f 84 ed 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6a:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018b6f:	80 fa 2e             	cmp    dl,0x2e
c0018b72:	0f 84 df 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b78:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018b7d:	80 fa 2f             	cmp    dl,0x2f
c0018b80:	0f 84 d1 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b89:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b8e:	80 f9 01             	cmp    cl,0x1
c0018b91:	0f 86 c0 00 00 00    	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b97:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018b9c:	80 fa 37             	cmp    dl,0x37
c0018b9f:	0f 84 b2 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba5:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018baa:	80 fa 3a             	cmp    dl,0x3a
c0018bad:	0f 84 a4 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb3:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018bb8:	80 fa 3c             	cmp    dl,0x3c
c0018bbb:	0f 84 96 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc1:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018bc6:	80 fa 3d             	cmp    dl,0x3d
c0018bc9:	0f 84 88 00 00 00    	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcf:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018bd4:	80 fa 3e             	cmp    dl,0x3e
c0018bd7:	74 7e                	je     c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd9:	8d 42 bb             	lea    eax,[edx-0x45]
c0018bdc:	3c 01                	cmp    al,0x1
c0018bde:	76 72                	jbe    c0018c52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018be0:	80 fa 3f             	cmp    dl,0x3f
c0018be3:	74 6d                	je     c0018c52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018be5:	80 fa 4a             	cmp    dl,0x4a
c0018be8:	74 0a                	je     c0018bf4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bea:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018bef:	80 fa 4d             	cmp    dl,0x4d
c0018bf2:	75 63                	jne    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf4:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018bf9:	c3                   	ret    
c0018bfa:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018bff:	80 f9 0b             	cmp    cl,0xb
c0018c02:	75 0a                	jne    c0018c0e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c04:	fe ca                	dec    dl
c0018c06:	75 4f                	jne    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c08:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018c0d:	c3                   	ret    
c0018c0e:	80 f9 0f             	cmp    cl,0xf
c0018c11:	75 44                	jne    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c13:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018c18:	80 fa 02             	cmp    dl,0x2
c0018c1b:	76 3a                	jbe    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c1d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c20:	3c 01                	cmp    al,0x1
c0018c22:	76 0a                	jbe    c0018c2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c24:	b8 de b9 02 c0       	mov    eax,0xc002b9de
c0018c29:	80 fa 06             	cmp    dl,0x6
c0018c2c:	75 29                	jne    c0018c57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2e:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018c33:	c3                   	ret    
c0018c34:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018c39:	c3                   	ret    
c0018c3a:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018c3f:	c3                   	ret    
c0018c40:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018c45:	c3                   	ret    
c0018c46:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018c4b:	c3                   	ret    
c0018c4c:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018c51:	c3                   	ret    
c0018c52:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018c57:	c3                   	ret    

c0018c58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c58:	60                   	pusha  
c0018c59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c65:	9c                   	pushf  
c0018c66:	fa                   	cli    
c0018c67:	0f 09                	wbinvd 
c0018c69:	0f 30                	wrmsr  
c0018c6b:	9d                   	popf   
c0018c6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c70:	89 02                	mov    DWORD PTR [edx],eax
c0018c72:	61                   	popa   
c0018c73:	c3                   	ret    

c0018c74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c74:	60                   	pusha  
c0018c75:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c79:	9c                   	pushf  
c0018c7a:	fa                   	cli    
c0018c7b:	0f 09                	wbinvd 
c0018c7d:	31 c0                	xor    eax,eax
c0018c7f:	31 d2                	xor    edx,edx
c0018c81:	0f 32                	rdmsr  
c0018c83:	9d                   	popf   
c0018c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c88:	89 02                	mov    DWORD PTR [edx],eax
c0018c8a:	61                   	popa   
c0018c8b:	c3                   	ret    

c0018c8c <CPU::AMD_K6_writeback(int, int, int)>:
c0018c8c:	56                   	push   esi
c0018c8d:	53                   	push   ebx
c0018c8e:	83 ec 10             	sub    esp,0x10
c0018c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c95:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c9a:	75 5d                	jne    c0018cf9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c9c:	83 f8 08             	cmp    eax,0x8
c0018c9f:	75 09                	jne    c0018caa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ca1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ca6:	7e 13                	jle    c0018cbb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ca8:	eb 30                	jmp    c0018cda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018caa:	83 f8 06             	cmp    eax,0x6
c0018cad:	7c 4a                	jl     c0018cf9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018caf:	83 f8 07             	cmp    eax,0x7
c0018cb2:	7e 07                	jle    c0018cbb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cb4:	83 f8 09             	cmp    eax,0x9
c0018cb7:	74 21                	je     c0018cda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cb9:	eb 3e                	jmp    c0018cf9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cbb:	89 e6                	mov    esi,esp
c0018cbd:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0018cc3:	56                   	push   esi
c0018cc4:	c1 eb 15             	shr    ebx,0x15
c0018cc7:	68 82 00 00 c0       	push   0xc0000082
c0018ccc:	83 e3 7e             	and    ebx,0x7e
c0018ccf:	e8 a0 ff ff ff       	call   c0018c74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cd4:	56                   	push   esi
c0018cd5:	6a 00                	push   0x0
c0018cd7:	53                   	push   ebx
c0018cd8:	eb 12                	jmp    c0018cec <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018cda:	89 e3                	mov    ebx,esp
c0018cdc:	53                   	push   ebx
c0018cdd:	68 82 00 00 c0       	push   0xc0000082
c0018ce2:	e8 8d ff ff ff       	call   c0018c74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ce7:	53                   	push   ebx
c0018ce8:	6a 00                	push   0x0
c0018cea:	6a 00                	push   0x0
c0018cec:	68 82 00 00 c0       	push   0xc0000082
c0018cf1:	e8 62 ff ff ff       	call   c0018c58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cf6:	83 c4 18             	add    esp,0x18
c0018cf9:	83 c4 10             	add    esp,0x10
c0018cfc:	5b                   	pop    ebx
c0018cfd:	5e                   	pop    esi
c0018cfe:	c3                   	ret    
c0018cff:	90                   	nop

c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d00:	55                   	push   ebp
c0018d01:	57                   	push   edi
c0018d02:	56                   	push   esi
c0018d03:	53                   	push   ebx
c0018d04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d0c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d10:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d14:	39 05 00 da 02 c0    	cmp    DWORD PTR ds:0xc002da00,eax
c0018d1a:	75 23                	jne    c0018d3f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d1c:	a1 2c 10 03 c0       	mov    eax,ds:0xc003102c
c0018d21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d25:	89 06                	mov    DWORD PTR [esi],eax
c0018d27:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0018d2c:	89 07                	mov    DWORD PTR [edi],eax
c0018d2e:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c0018d33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d36:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c0018d3b:	89 02                	mov    DWORD PTR [edx],eax
c0018d3d:	eb 3f                	jmp    c0018d7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d3f:	31 c9                	xor    ecx,ecx
c0018d41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d45:	0f a2                	cpuid  
c0018d47:	89 06                	mov    DWORD PTR [esi],eax
c0018d49:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d4f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d52:	89 10                	mov    DWORD PTR [eax],edx
c0018d54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d58:	a3 00 da 02 c0       	mov    ds:0xc002da00,eax
c0018d5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d5f:	a3 2c 10 03 c0       	mov    ds:0xc003102c,eax
c0018d64:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d66:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0018d6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d6e:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c0018d73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d79:	a3 20 10 03 c0       	mov    ds:0xc0031020,eax
c0018d7e:	5b                   	pop    ebx
c0018d7f:	5e                   	pop    esi
c0018d80:	5f                   	pop    edi
c0018d81:	5d                   	pop    ebp
c0018d82:	c3                   	ret    
c0018d83:	90                   	nop

c0018d84 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d84:	83 ec 10             	sub    esp,0x10
c0018d87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8b:	50                   	push   eax
c0018d8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d90:	50                   	push   eax
c0018d91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d95:	50                   	push   eax
c0018d96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9a:	50                   	push   eax
c0018d9b:	6a 01                	push   0x1
c0018d9d:	e8 5e ff ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018da6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018daa:	0f 95 c0             	setne  al
c0018dad:	83 c4 24             	add    esp,0x24
c0018db0:	c3                   	ret    
c0018db1:	90                   	nop

c0018db2 <CPU::cpuidCheckECX(unsigned int)>:
c0018db2:	83 ec 10             	sub    esp,0x10
c0018db5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db9:	50                   	push   eax
c0018dba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbe:	50                   	push   eax
c0018dbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc3:	50                   	push   eax
c0018dc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc8:	50                   	push   eax
c0018dc9:	6a 01                	push   0x1
c0018dcb:	e8 30 ff ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dd4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dd8:	0f 95 c0             	setne  al
c0018ddb:	83 c4 24             	add    esp,0x24
c0018dde:	c3                   	ret    
c0018ddf:	90                   	nop

c0018de0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018de0:	83 ec 10             	sub    esp,0x10
c0018de3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de7:	50                   	push   eax
c0018de8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dec:	50                   	push   eax
c0018ded:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df1:	50                   	push   eax
c0018df2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df6:	50                   	push   eax
c0018df7:	6a 07                	push   0x7
c0018df9:	e8 02 ff ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e02:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e06:	0f 95 c0             	setne  al
c0018e09:	83 c4 24             	add    esp,0x24
c0018e0c:	c3                   	ret    
c0018e0d:	90                   	nop

c0018e0e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e0e:	83 ec 10             	sub    esp,0x10
c0018e11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e15:	50                   	push   eax
c0018e16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1a:	50                   	push   eax
c0018e1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1f:	50                   	push   eax
c0018e20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e24:	50                   	push   eax
c0018e25:	6a 07                	push   0x7
c0018e27:	e8 d4 fe ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e30:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e34:	0f 95 c0             	setne  al
c0018e37:	83 c4 24             	add    esp,0x24
c0018e3a:	c3                   	ret    
c0018e3b:	90                   	nop

c0018e3c <CPU::CPU()>:
c0018e3c:	83 ec 0c             	sub    esp,0xc
c0018e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e43:	83 ec 08             	sub    esp,0x8
c0018e46:	68 de b9 02 c0       	push   0xc002b9de
c0018e4b:	50                   	push   eax
c0018e4c:	e8 7d b7 ff ff       	call   c00145ce <Device::Device(char const*)>
c0018e51:	83 c4 10             	add    esp,0x10
c0018e54:	ba b8 ba 02 c0       	mov    edx,0xc002bab8
c0018e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e5d:	89 10                	mov    DWORD PTR [eax],edx
c0018e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e63:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e71:	05 78 01 00 00       	add    eax,0x178
c0018e76:	83 ec 0c             	sub    esp,0xc
c0018e79:	50                   	push   eax
c0018e7a:	e8 d9 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018e7f:	83 c4 10             	add    esp,0x10
c0018e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e86:	05 7c 09 00 00       	add    eax,0x97c
c0018e8b:	83 ec 0c             	sub    esp,0xc
c0018e8e:	50                   	push   eax
c0018e8f:	e8 26 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e94:	83 c4 10             	add    esp,0x10
c0018e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9b:	05 7c 11 00 00       	add    eax,0x117c
c0018ea0:	83 ec 0c             	sub    esp,0xc
c0018ea3:	50                   	push   eax
c0018ea4:	e8 07 86 ff ff       	call   c00114b0 <TSS::TSS()>
c0018ea9:	83 c4 10             	add    esp,0x10
c0018eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ebb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ec5:	90                   	nop
c0018ec6:	83 c4 0c             	add    esp,0xc
c0018ec9:	c3                   	ret    

c0018eca <CPU::displayFeatures()>:
c0018eca:	53                   	push   ebx
c0018ecb:	83 ec 10             	sub    esp,0x10
c0018ece:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ed2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ed8:	68 ec b6 02 c0       	push   0xc002b6ec
c0018edd:	e8 d5 a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018ee2:	59                   	pop    ecx
c0018ee3:	58                   	pop    eax
c0018ee4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018eea:	50                   	push   eax
c0018eeb:	68 fd b6 02 c0       	push   0xc002b6fd
c0018ef0:	e8 c2 a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018ef5:	58                   	pop    eax
c0018ef6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018efc:	5a                   	pop    edx
c0018efd:	c1 e8 0e             	shr    eax,0xe
c0018f00:	0f b6 c0             	movzx  eax,al
c0018f03:	50                   	push   eax
c0018f04:	68 0e b7 02 c0       	push   0xc002b70e
c0018f09:	e8 a9 a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018f0e:	59                   	pop    ecx
c0018f0f:	58                   	pop    eax
c0018f10:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f16:	66 c1 e8 06          	shr    ax,0x6
c0018f1a:	0f b6 c0             	movzx  eax,al
c0018f1d:	50                   	push   eax
c0018f1e:	68 1f b7 02 c0       	push   0xc002b71f
c0018f23:	e8 8f a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018f28:	c7 04 24 cc bb 02 c0 	mov    DWORD PTR [esp],0xc002bbcc
c0018f2f:	e8 83 a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f3c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f43:	74 05                	je     c0018f4a <CPU::displayFeatures()+0x80>
c0018f45:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f4a:	52                   	push   edx
c0018f4b:	52                   	push   edx
c0018f4c:	50                   	push   eax
c0018f4d:	68 30 b7 02 c0       	push   0xc002b730
c0018f52:	e8 60 a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018f57:	83 c4 10             	add    esp,0x10
c0018f5a:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f5f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f66:	78 05                	js     c0018f6d <CPU::displayFeatures()+0xa3>
c0018f68:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f6d:	51                   	push   ecx
c0018f6e:	51                   	push   ecx
c0018f6f:	50                   	push   eax
c0018f70:	68 47 b7 02 c0       	push   0xc002b747
c0018f75:	e8 3d a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018f7a:	83 c4 10             	add    esp,0x10
c0018f7d:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f82:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f89:	75 05                	jne    c0018f90 <CPU::displayFeatures()+0xc6>
c0018f8b:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f90:	52                   	push   edx
c0018f91:	52                   	push   edx
c0018f92:	50                   	push   eax
c0018f93:	68 5e b7 02 c0       	push   0xc002b75e
c0018f98:	e8 1a a0 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018f9d:	83 c4 10             	add    esp,0x10
c0018fa0:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018fa5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fac:	75 05                	jne    c0018fb3 <CPU::displayFeatures()+0xe9>
c0018fae:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018fb3:	51                   	push   ecx
c0018fb4:	51                   	push   ecx
c0018fb5:	50                   	push   eax
c0018fb6:	68 75 b7 02 c0       	push   0xc002b775
c0018fbb:	e8 f7 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018fc0:	83 c4 10             	add    esp,0x10
c0018fc3:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018fc8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fcf:	75 05                	jne    c0018fd6 <CPU::displayFeatures()+0x10c>
c0018fd1:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018fd6:	52                   	push   edx
c0018fd7:	52                   	push   edx
c0018fd8:	50                   	push   eax
c0018fd9:	68 8c b7 02 c0       	push   0xc002b78c
c0018fde:	e8 d4 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018feb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018ff2:	75 05                	jne    c0018ff9 <CPU::displayFeatures()+0x12f>
c0018ff4:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018ff9:	51                   	push   ecx
c0018ffa:	51                   	push   ecx
c0018ffb:	50                   	push   eax
c0018ffc:	68 a3 b7 02 c0       	push   0xc002b7a3
c0019001:	e8 b1 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0019006:	83 c4 10             	add    esp,0x10
c0019009:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c001900e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019015:	75 05                	jne    c001901c <CPU::displayFeatures()+0x152>
c0019017:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c001901c:	52                   	push   edx
c001901d:	52                   	push   edx
c001901e:	50                   	push   eax
c001901f:	68 ba b7 02 c0       	push   0xc002b7ba
c0019024:	e8 8e 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0019029:	83 c4 10             	add    esp,0x10
c001902c:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019031:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019038:	75 05                	jne    c001903f <CPU::displayFeatures()+0x175>
c001903a:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c001903f:	51                   	push   ecx
c0019040:	51                   	push   ecx
c0019041:	50                   	push   eax
c0019042:	68 d1 b7 02 c0       	push   0xc002b7d1
c0019047:	e8 6b 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001904c:	83 c4 10             	add    esp,0x10
c001904f:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019054:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001905b:	75 05                	jne    c0019062 <CPU::displayFeatures()+0x198>
c001905d:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019062:	52                   	push   edx
c0019063:	52                   	push   edx
c0019064:	50                   	push   eax
c0019065:	68 e8 b7 02 c0       	push   0xc002b7e8
c001906a:	e8 48 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001906f:	83 c4 10             	add    esp,0x10
c0019072:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019077:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001907e:	75 05                	jne    c0019085 <CPU::displayFeatures()+0x1bb>
c0019080:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019085:	51                   	push   ecx
c0019086:	51                   	push   ecx
c0019087:	50                   	push   eax
c0019088:	68 ff b7 02 c0       	push   0xc002b7ff
c001908d:	e8 25 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0019092:	83 c4 10             	add    esp,0x10
c0019095:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c001909a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190a1:	75 05                	jne    c00190a8 <CPU::displayFeatures()+0x1de>
c00190a3:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190a8:	52                   	push   edx
c00190a9:	52                   	push   edx
c00190aa:	50                   	push   eax
c00190ab:	68 16 b8 02 c0       	push   0xc002b816
c00190b0:	e8 02 9f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00190b5:	83 c4 10             	add    esp,0x10
c00190b8:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c00190bd:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190c4:	75 05                	jne    c00190cb <CPU::displayFeatures()+0x201>
c00190c6:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190cb:	51                   	push   ecx
c00190cc:	51                   	push   ecx
c00190cd:	50                   	push   eax
c00190ce:	68 2d b8 02 c0       	push   0xc002b82d
c00190d3:	e8 df 9e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00190d8:	83 c4 10             	add    esp,0x10
c00190db:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c00190e0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190e7:	75 05                	jne    c00190ee <CPU::displayFeatures()+0x224>
c00190e9:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190ee:	52                   	push   edx
c00190ef:	52                   	push   edx
c00190f0:	50                   	push   eax
c00190f1:	68 44 b8 02 c0       	push   0xc002b844
c00190f6:	e8 bc 9e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00190fb:	83 c4 10             	add    esp,0x10
c00190fe:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019103:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001910a:	78 05                	js     c0019111 <CPU::displayFeatures()+0x247>
c001910c:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019111:	51                   	push   ecx
c0019112:	51                   	push   ecx
c0019113:	50                   	push   eax
c0019114:	68 5b b8 02 c0       	push   0xc002b85b
c0019119:	e8 99 9e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019126:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001912d:	75 05                	jne    c0019134 <CPU::displayFeatures()+0x26a>
c001912f:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019134:	52                   	push   edx
c0019135:	52                   	push   edx
c0019136:	50                   	push   eax
c0019137:	68 72 b8 02 c0       	push   0xc002b872
c001913c:	e8 76 9e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0019141:	83 c4 18             	add    esp,0x18
c0019144:	5b                   	pop    ebx
c0019145:	c3                   	ret    

c0019146 <CPU::detectFeatures()>:
c0019146:	55                   	push   ebp
c0019147:	57                   	push   edi
c0019148:	56                   	push   esi
c0019149:	53                   	push   ebx
c001914a:	83 ec 50             	sub    esp,0x50
c001914d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019151:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001915b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019162:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019168:	6a 0d                	push   0xd
c001916a:	6a 00                	push   0x0
c001916c:	57                   	push   edi
c001916d:	e8 06 76 fe ff       	call   c0000778 <memset>
c0019172:	83 c4 10             	add    esp,0x10
c0019175:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001917a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019181:	0f 84 20 09 00 00    	je     c0019aa7 <CPU::detectFeatures()+0x961>
c0019187:	83 ec 0c             	sub    esp,0xc
c001918a:	6a 10                	push   0x10
c001918c:	e8 f3 fb ff ff       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c0019191:	83 e0 01             	and    eax,0x1
c0019194:	8d 14 00             	lea    edx,[eax+eax*1]
c0019197:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001919d:	83 e0 fd             	and    eax,0xfffffffd
c00191a0:	09 d0                	or     eax,edx
c00191a2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191a8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191af:	e8 d0 fb ff ff       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c00191b4:	83 e0 01             	and    eax,0x1
c00191b7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191be:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191c4:	83 e0 fb             	and    eax,0xfffffffb
c00191c7:	09 d0                	or     eax,edx
c00191c9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191cf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191d6:	e8 a9 fb ff ff       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c00191db:	83 e0 01             	and    eax,0x1
c00191de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191e5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191eb:	83 e0 f7             	and    eax,0xfffffff7
c00191ee:	09 d0                	or     eax,edx
c00191f0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191f6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191fd:	e8 82 fb ff ff       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c0019202:	83 e0 01             	and    eax,0x1
c0019205:	c1 e0 04             	shl    eax,0x4
c0019208:	88 c2                	mov    dl,al
c001920a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019210:	83 e0 ef             	and    eax,0xffffffef
c0019213:	09 d0                	or     eax,edx
c0019215:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001921b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019222:	e8 5d fb ff ff       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c0019227:	83 e0 01             	and    eax,0x1
c001922a:	c1 e0 05             	shl    eax,0x5
c001922d:	88 c2                	mov    dl,al
c001922f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019235:	83 e0 df             	and    eax,0xffffffdf
c0019238:	09 d0                	or     eax,edx
c001923a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019240:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019247:	e8 38 fb ff ff       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c001924c:	83 e0 01             	and    eax,0x1
c001924f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019252:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019258:	83 e0 fd             	and    eax,0xfffffffd
c001925b:	09 d0                	or     eax,edx
c001925d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019263:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001926a:	e8 15 fb ff ff       	call   c0018d84 <CPU::cpuidCheckEDX(unsigned int)>
c001926f:	83 e0 01             	and    eax,0x1
c0019272:	c1 e0 06             	shl    eax,0x6
c0019275:	88 c2                	mov    dl,al
c0019277:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001927d:	83 e0 bf             	and    eax,0xffffffbf
c0019280:	09 d0                	or     eax,edx
c0019282:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019288:	58                   	pop    eax
c0019289:	8d 74 24 28          	lea    esi,[esp+0x28]
c001928d:	56                   	push   esi
c001928e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019292:	55                   	push   ebp
c0019293:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019297:	50                   	push   eax
c0019298:	8d 54 24 28          	lea    edx,[esp+0x28]
c001929c:	52                   	push   edx
c001929d:	6a 00                	push   0x0
c001929f:	e8 5c fa ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192a4:	83 c4 1c             	add    esp,0x1c
c00192a7:	6a 04                	push   0x4
c00192a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192ad:	50                   	push   eax
c00192ae:	57                   	push   edi
c00192af:	e8 90 74 fe ff       	call   c0000744 <memcpy>
c00192b4:	83 c4 0c             	add    esp,0xc
c00192b7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192bd:	6a 04                	push   0x4
c00192bf:	56                   	push   esi
c00192c0:	50                   	push   eax
c00192c1:	e8 7e 74 fe ff       	call   c0000744 <memcpy>
c00192c6:	83 c4 0c             	add    esp,0xc
c00192c9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192cf:	6a 04                	push   0x4
c00192d1:	55                   	push   ebp
c00192d2:	50                   	push   eax
c00192d3:	e8 6c 74 fe ff       	call   c0000744 <memcpy>
c00192d8:	58                   	pop    eax
c00192d9:	5a                   	pop    edx
c00192da:	68 89 b8 02 c0       	push   0xc002b889
c00192df:	57                   	push   edi
c00192e0:	e8 db 75 fe ff       	call   c00008c0 <strcmp>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	85 c0                	test   eax,eax
c00192ea:	75 0f                	jne    c00192fb <CPU::detectFeatures()+0x1b5>
c00192ec:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192f6:	e9 22 02 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c00192fb:	50                   	push   eax
c00192fc:	50                   	push   eax
c00192fd:	68 96 b8 02 c0       	push   0xc002b896
c0019302:	57                   	push   edi
c0019303:	e8 b8 75 fe ff       	call   c00008c0 <strcmp>
c0019308:	83 c4 10             	add    esp,0x10
c001930b:	85 c0                	test   eax,eax
c001930d:	74 dd                	je     c00192ec <CPU::detectFeatures()+0x1a6>
c001930f:	51                   	push   ecx
c0019310:	51                   	push   ecx
c0019311:	68 a3 b8 02 c0       	push   0xc002b8a3
c0019316:	57                   	push   edi
c0019317:	e8 a4 75 fe ff       	call   c00008c0 <strcmp>
c001931c:	83 c4 10             	add    esp,0x10
c001931f:	85 c0                	test   eax,eax
c0019321:	74 2a                	je     c001934d <CPU::detectFeatures()+0x207>
c0019323:	52                   	push   edx
c0019324:	52                   	push   edx
c0019325:	68 b0 b8 02 c0       	push   0xc002b8b0
c001932a:	57                   	push   edi
c001932b:	e8 90 75 fe ff       	call   c00008c0 <strcmp>
c0019330:	83 c4 10             	add    esp,0x10
c0019333:	85 c0                	test   eax,eax
c0019335:	74 16                	je     c001934d <CPU::detectFeatures()+0x207>
c0019337:	50                   	push   eax
c0019338:	50                   	push   eax
c0019339:	68 bd b8 02 c0       	push   0xc002b8bd
c001933e:	57                   	push   edi
c001933f:	e8 7c 75 fe ff       	call   c00008c0 <strcmp>
c0019344:	83 c4 10             	add    esp,0x10
c0019347:	85 c0                	test   eax,eax
c0019349:	74 48                	je     c0019393 <CPU::detectFeatures()+0x24d>
c001934b:	eb 0f                	jmp    c001935c <CPU::detectFeatures()+0x216>
c001934d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019357:	e9 c1 01 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c001935c:	50                   	push   eax
c001935d:	50                   	push   eax
c001935e:	68 ca b8 02 c0       	push   0xc002b8ca
c0019363:	57                   	push   edi
c0019364:	e8 57 75 fe ff       	call   c00008c0 <strcmp>
c0019369:	83 c4 10             	add    esp,0x10
c001936c:	85 c0                	test   eax,eax
c001936e:	74 23                	je     c0019393 <CPU::detectFeatures()+0x24d>
c0019370:	50                   	push   eax
c0019371:	50                   	push   eax
c0019372:	68 d7 b8 02 c0       	push   0xc002b8d7
c0019377:	57                   	push   edi
c0019378:	e8 43 75 fe ff       	call   c00008c0 <strcmp>
c001937d:	83 c4 10             	add    esp,0x10
c0019380:	85 c0                	test   eax,eax
c0019382:	75 1e                	jne    c00193a2 <CPU::detectFeatures()+0x25c>
c0019384:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001938e:	e9 8a 01 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c0019393:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001939d:	e9 7b 01 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c00193a2:	50                   	push   eax
c00193a3:	50                   	push   eax
c00193a4:	68 e4 b8 02 c0       	push   0xc002b8e4
c00193a9:	57                   	push   edi
c00193aa:	e8 11 75 fe ff       	call   c00008c0 <strcmp>
c00193af:	83 c4 10             	add    esp,0x10
c00193b2:	85 c0                	test   eax,eax
c00193b4:	75 0f                	jne    c00193c5 <CPU::detectFeatures()+0x27f>
c00193b6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193c0:	e9 58 01 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c00193c5:	50                   	push   eax
c00193c6:	50                   	push   eax
c00193c7:	68 a3 b8 02 c0       	push   0xc002b8a3
c00193cc:	57                   	push   edi
c00193cd:	e8 ee 74 fe ff       	call   c00008c0 <strcmp>
c00193d2:	83 c4 10             	add    esp,0x10
c00193d5:	85 c0                	test   eax,eax
c00193d7:	75 0f                	jne    c00193e8 <CPU::detectFeatures()+0x2a2>
c00193d9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193e3:	e9 35 01 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c00193e8:	50                   	push   eax
c00193e9:	50                   	push   eax
c00193ea:	68 f1 b8 02 c0       	push   0xc002b8f1
c00193ef:	57                   	push   edi
c00193f0:	e8 cb 74 fe ff       	call   c00008c0 <strcmp>
c00193f5:	83 c4 10             	add    esp,0x10
c00193f8:	85 c0                	test   eax,eax
c00193fa:	75 0f                	jne    c001940b <CPU::detectFeatures()+0x2c5>
c00193fc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019406:	e9 12 01 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c001940b:	51                   	push   ecx
c001940c:	51                   	push   ecx
c001940d:	68 fe b8 02 c0       	push   0xc002b8fe
c0019412:	57                   	push   edi
c0019413:	e8 a8 74 fe ff       	call   c00008c0 <strcmp>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	85 c0                	test   eax,eax
c001941d:	75 0f                	jne    c001942e <CPU::detectFeatures()+0x2e8>
c001941f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019429:	e9 ef 00 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c001942e:	52                   	push   edx
c001942f:	52                   	push   edx
c0019430:	68 0b b9 02 c0       	push   0xc002b90b
c0019435:	57                   	push   edi
c0019436:	e8 85 74 fe ff       	call   c00008c0 <strcmp>
c001943b:	83 c4 10             	add    esp,0x10
c001943e:	85 c0                	test   eax,eax
c0019440:	75 0f                	jne    c0019451 <CPU::detectFeatures()+0x30b>
c0019442:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001944c:	e9 cc 00 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c0019451:	50                   	push   eax
c0019452:	50                   	push   eax
c0019453:	68 18 b9 02 c0       	push   0xc002b918
c0019458:	57                   	push   edi
c0019459:	e8 62 74 fe ff       	call   c00008c0 <strcmp>
c001945e:	83 c4 10             	add    esp,0x10
c0019461:	85 c0                	test   eax,eax
c0019463:	75 0f                	jne    c0019474 <CPU::detectFeatures()+0x32e>
c0019465:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001946f:	e9 a9 00 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c0019474:	50                   	push   eax
c0019475:	50                   	push   eax
c0019476:	68 25 b9 02 c0       	push   0xc002b925
c001947b:	57                   	push   edi
c001947c:	e8 3f 74 fe ff       	call   c00008c0 <strcmp>
c0019481:	83 c4 10             	add    esp,0x10
c0019484:	85 c0                	test   eax,eax
c0019486:	75 0f                	jne    c0019497 <CPU::detectFeatures()+0x351>
c0019488:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019492:	e9 86 00 00 00       	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c0019497:	50                   	push   eax
c0019498:	50                   	push   eax
c0019499:	68 32 b9 02 c0       	push   0xc002b932
c001949e:	57                   	push   edi
c001949f:	e8 1c 74 fe ff       	call   c00008c0 <strcmp>
c00194a4:	83 c4 10             	add    esp,0x10
c00194a7:	85 c0                	test   eax,eax
c00194a9:	75 0c                	jne    c00194b7 <CPU::detectFeatures()+0x371>
c00194ab:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194b5:	eb 66                	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c00194b7:	50                   	push   eax
c00194b8:	50                   	push   eax
c00194b9:	68 3f b9 02 c0       	push   0xc002b93f
c00194be:	57                   	push   edi
c00194bf:	e8 fc 73 fe ff       	call   c00008c0 <strcmp>
c00194c4:	83 c4 10             	add    esp,0x10
c00194c7:	85 c0                	test   eax,eax
c00194c9:	75 0c                	jne    c00194d7 <CPU::detectFeatures()+0x391>
c00194cb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194d5:	eb 46                	jmp    c001951d <CPU::detectFeatures()+0x3d7>
c00194d7:	50                   	push   eax
c00194d8:	50                   	push   eax
c00194d9:	68 4c b9 02 c0       	push   0xc002b94c
c00194de:	57                   	push   edi
c00194df:	e8 dc 73 fe ff       	call   c00008c0 <strcmp>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	85 c0                	test   eax,eax
c00194e9:	74 e0                	je     c00194cb <CPU::detectFeatures()+0x385>
c00194eb:	50                   	push   eax
c00194ec:	50                   	push   eax
c00194ed:	68 59 b9 02 c0       	push   0xc002b959
c00194f2:	57                   	push   edi
c00194f3:	e8 c8 73 fe ff       	call   c00008c0 <strcmp>
c00194f8:	83 c4 10             	add    esp,0x10
c00194fb:	85 c0                	test   eax,eax
c00194fd:	74 cc                	je     c00194cb <CPU::detectFeatures()+0x385>
c00194ff:	51                   	push   ecx
c0019500:	51                   	push   ecx
c0019501:	68 66 b9 02 c0       	push   0xc002b966
c0019506:	57                   	push   edi
c0019507:	e8 b4 73 fe ff       	call   c00008c0 <strcmp>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	85 c0                	test   eax,eax
c0019511:	74 b8                	je     c00194cb <CPU::detectFeatures()+0x385>
c0019513:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001951d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019522:	0f 86 be 00 00 00    	jbe    c00195e6 <CPU::detectFeatures()+0x4a0>
c0019528:	83 ec 0c             	sub    esp,0xc
c001952b:	68 80 00 00 00       	push   0x80
c0019530:	e8 ab f8 ff ff       	call   c0018de0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019535:	83 e0 01             	and    eax,0x1
c0019538:	c1 e0 06             	shl    eax,0x6
c001953b:	88 c2                	mov    dl,al
c001953d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019543:	83 e0 bf             	and    eax,0xffffffbf
c0019546:	09 d0                	or     eax,edx
c0019548:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001954e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019555:	e8 86 f8 ff ff       	call   c0018de0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001955a:	83 e0 01             	and    eax,0x1
c001955d:	c1 e0 04             	shl    eax,0x4
c0019560:	88 c2                	mov    dl,al
c0019562:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019568:	83 e0 ef             	and    eax,0xffffffef
c001956b:	09 d0                	or     eax,edx
c001956d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019573:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001957a:	e8 61 f8 ff ff       	call   c0018de0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001957f:	c1 e0 07             	shl    eax,0x7
c0019582:	88 c2                	mov    dl,al
c0019584:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001958a:	83 e0 7f             	and    eax,0x7f
c001958d:	09 d0                	or     eax,edx
c001958f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019595:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001959c:	e8 6d f8 ff ff       	call   c0018e0e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195a1:	83 e0 01             	and    eax,0x1
c00195a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195ab:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195b1:	83 e0 f7             	and    eax,0xfffffff7
c00195b4:	09 d0                	or     eax,edx
c00195b6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195bc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195c3:	e8 46 f8 ff ff       	call   c0018e0e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	83 e0 01             	and    eax,0x1
c00195ce:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195d5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195db:	83 e0 fb             	and    eax,0xfffffffb
c00195de:	09 d0                	or     eax,edx
c00195e0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195e6:	83 ec 0c             	sub    esp,0xc
c00195e9:	56                   	push   esi
c00195ea:	55                   	push   ebp
c00195eb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195ef:	57                   	push   edi
c00195f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195f4:	50                   	push   eax
c00195f5:	6a 01                	push   0x1
c00195f7:	e8 04 f7 ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019600:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019606:	88 ca                	mov    dl,cl
c0019608:	83 e0 f0             	and    eax,0xfffffff0
c001960b:	83 e2 0f             	and    edx,0xf
c001960e:	09 d0                	or     eax,edx
c0019610:	88 ca                	mov    dl,cl
c0019612:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019618:	c0 ea 04             	shr    dl,0x4
c001961b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001961f:	0f b6 c2             	movzx  eax,dl
c0019622:	83 c4 20             	add    esp,0x20
c0019625:	c1 e0 06             	shl    eax,0x6
c0019628:	89 c5                	mov    ebp,eax
c001962a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019630:	66 25 3f c0          	and    ax,0xc03f
c0019634:	09 e8                	or     eax,ebp
c0019636:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001963d:	89 c8                	mov    eax,ecx
c001963f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019645:	c1 e8 08             	shr    eax,0x8
c0019648:	83 e2 3f             	and    edx,0x3f
c001964b:	83 e0 0f             	and    eax,0xf
c001964e:	89 c5                	mov    ebp,eax
c0019650:	c1 e5 06             	shl    ebp,0x6
c0019653:	09 d5                	or     ebp,edx
c0019655:	89 ea                	mov    edx,ebp
c0019657:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001965d:	88 c2                	mov    dl,al
c001965f:	c0 ea 02             	shr    dl,0x2
c0019662:	89 d5                	mov    ebp,edx
c0019664:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001966a:	83 e2 c0             	and    edx,0xffffffc0
c001966d:	09 d5                	or     ebp,edx
c001966f:	89 ea                	mov    edx,ebp
c0019671:	89 cd                	mov    ebp,ecx
c0019673:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019679:	c1 ed 0c             	shr    ebp,0xc
c001967c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019682:	83 e5 03             	and    ebp,0x3
c0019685:	83 e2 cf             	and    edx,0xffffffcf
c0019688:	c1 e5 04             	shl    ebp,0x4
c001968b:	09 d5                	or     ebp,edx
c001968d:	3c 06                	cmp    al,0x6
c001968f:	89 ea                	mov    edx,ebp
c0019691:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019697:	74 04                	je     c001969d <CPU::detectFeatures()+0x557>
c0019699:	3c 0f                	cmp    al,0xf
c001969b:	75 5c                	jne    c00196f9 <CPU::detectFeatures()+0x5b3>
c001969d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196a1:	89 cd                	mov    ebp,ecx
c00196a3:	c1 ed 10             	shr    ebp,0x10
c00196a6:	c1 e5 04             	shl    ebp,0x4
c00196a9:	09 ea                	or     edx,ebp
c00196ab:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196b1:	0f b6 d2             	movzx  edx,dl
c00196b4:	66 81 e5 3f c0       	and    bp,0xc03f
c00196b9:	c1 e2 06             	shl    edx,0x6
c00196bc:	09 ea                	or     edx,ebp
c00196be:	3c 0f                	cmp    al,0xf
c00196c0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196c7:	75 30                	jne    c00196f9 <CPU::detectFeatures()+0x5b3>
c00196c9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196cf:	c1 e9 14             	shr    ecx,0x14
c00196d2:	83 e0 3f             	and    eax,0x3f
c00196d5:	83 c1 0f             	add    ecx,0xf
c00196d8:	88 ca                	mov    dl,cl
c00196da:	c0 e9 02             	shr    cl,0x2
c00196dd:	c1 e2 06             	shl    edx,0x6
c00196e0:	09 d0                	or     eax,edx
c00196e2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196e8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196ee:	83 e0 c0             	and    eax,0xffffffc0
c00196f1:	09 c1                	or     ecx,eax
c00196f3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196f9:	83 ec 0c             	sub    esp,0xc
c00196fc:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019703:	56                   	push   esi
c0019704:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019708:	50                   	push   eax
c0019709:	57                   	push   edi
c001970a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001970e:	55                   	push   ebp
c001970f:	68 00 00 00 80       	push   0x80000000
c0019714:	e8 e7 f5 ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019719:	83 c4 20             	add    esp,0x20
c001971c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019724:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019728:	76 1e                	jbe    c0019748 <CPU::detectFeatures()+0x602>
c001972a:	83 ec 0c             	sub    esp,0xc
c001972d:	56                   	push   esi
c001972e:	50                   	push   eax
c001972f:	57                   	push   edi
c0019730:	55                   	push   ebp
c0019731:	68 01 00 00 80       	push   0x80000001
c0019736:	e8 c5 f5 ff ff       	call   c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001973b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019745:	83 c4 20             	add    esp,0x20
c0019748:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001974e:	83 f8 01             	cmp    eax,0x1
c0019751:	75 6f                	jne    c00197c2 <CPU::detectFeatures()+0x67c>
c0019753:	51                   	push   ecx
c0019754:	51                   	push   ecx
c0019755:	68 72 b9 02 c0       	push   0xc002b972
c001975a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001975e:	56                   	push   esi
c001975f:	e8 d0 70 fe ff       	call   c0000834 <strcpy>
c0019764:	5f                   	pop    edi
c0019765:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001976b:	5d                   	pop    ebp
c001976c:	66 c1 e8 06          	shr    ax,0x6
c0019770:	0f b6 c0             	movzx  eax,al
c0019773:	50                   	push   eax
c0019774:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001977a:	c1 e8 0e             	shr    eax,0xe
c001977d:	0f b6 c0             	movzx  eax,al
c0019780:	50                   	push   eax
c0019781:	e8 24 f2 ff ff       	call   c00189aa <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019786:	5a                   	pop    edx
c0019787:	59                   	pop    ecx
c0019788:	50                   	push   eax
c0019789:	56                   	push   esi
c001978a:	e8 e5 71 fe ff       	call   c0000974 <strcat>
c001978f:	5f                   	pop    edi
c0019790:	5d                   	pop    ebp
c0019791:	56                   	push   esi
c0019792:	53                   	push   ebx
c0019793:	e8 28 ae ff ff       	call   c00145c0 <Device::setName(char const*)>
c0019798:	58                   	pop    eax
c0019799:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001979f:	5a                   	pop    edx
c00197a0:	68 79 b9 02 c0       	push   0xc002b979
c00197a5:	50                   	push   eax
c00197a6:	e8 15 71 fe ff       	call   c00008c0 <strcmp>
c00197ab:	83 c4 10             	add    esp,0x10
c00197ae:	85 c0                	test   eax,eax
c00197b0:	0f 85 71 03 00 00    	jne    c0019b27 <CPU::detectFeatures()+0x9e1>
c00197b6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197bd:	e9 65 03 00 00       	jmp    c0019b27 <CPU::detectFeatures()+0x9e1>
c00197c2:	83 f8 02             	cmp    eax,0x2
c00197c5:	0f 85 b5 00 00 00    	jne    c0019880 <CPU::detectFeatures()+0x73a>
c00197cb:	57                   	push   edi
c00197cc:	57                   	push   edi
c00197cd:	68 8b b9 02 c0       	push   0xc002b98b
c00197d2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197d6:	56                   	push   esi
c00197d7:	e8 58 70 fe ff       	call   c0000834 <strcpy>
c00197dc:	5d                   	pop    ebp
c00197dd:	58                   	pop    eax
c00197de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197e4:	66 c1 e8 06          	shr    ax,0x6
c00197e8:	0f b6 c0             	movzx  eax,al
c00197eb:	50                   	push   eax
c00197ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197f2:	c1 e8 0e             	shr    eax,0xe
c00197f5:	0f b6 c0             	movzx  eax,al
c00197f8:	50                   	push   eax
c00197f9:	e8 18 f0 ff ff       	call   c0018816 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197fe:	5a                   	pop    edx
c00197ff:	59                   	pop    ecx
c0019800:	50                   	push   eax
c0019801:	56                   	push   esi
c0019802:	e8 6d 71 fe ff       	call   c0000974 <strcat>
c0019807:	5f                   	pop    edi
c0019808:	5d                   	pop    ebp
c0019809:	56                   	push   esi
c001980a:	53                   	push   ebx
c001980b:	e8 b0 ad ff ff       	call   c00145c0 <Device::setName(char const*)>
c0019810:	58                   	pop    eax
c0019811:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019817:	5a                   	pop    edx
c0019818:	68 90 b9 02 c0       	push   0xc002b990
c001981d:	50                   	push   eax
c001981e:	e8 9d 70 fe ff       	call   c00008c0 <strcmp>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	85 c0                	test   eax,eax
c0019828:	75 20                	jne    c001984a <CPU::detectFeatures()+0x704>
c001982a:	8b 15 e8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e8
c0019830:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019836:	a8 01                	test   al,0x1
c0019838:	74 10                	je     c001984a <CPU::detectFeatures()+0x704>
c001983a:	83 e0 fe             	and    eax,0xfffffffe
c001983d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019843:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001984a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019850:	c1 e8 0e             	shr    eax,0xe
c0019853:	3c 05                	cmp    al,0x5
c0019855:	0f 85 cc 02 00 00    	jne    c0019b27 <CPU::detectFeatures()+0x9e1>
c001985b:	56                   	push   esi
c001985c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019862:	83 e0 0f             	and    eax,0xf
c0019865:	50                   	push   eax
c0019866:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001986c:	66 c1 e8 06          	shr    ax,0x6
c0019870:	0f b6 c0             	movzx  eax,al
c0019873:	50                   	push   eax
c0019874:	6a 05                	push   0x5
c0019876:	e8 11 f4 ff ff       	call   c0018c8c <CPU::AMD_K6_writeback(int, int, int)>
c001987b:	e9 1f 02 00 00       	jmp    c0019a9f <CPU::detectFeatures()+0x959>
c0019880:	8d 50 fd             	lea    edx,[eax-0x3]
c0019883:	83 fa 01             	cmp    edx,0x1
c0019886:	76 09                	jbe    c0019891 <CPU::detectFeatures()+0x74b>
c0019888:	83 f8 06             	cmp    eax,0x6
c001988b:	0f 85 91 01 00 00    	jne    c0019a22 <CPU::detectFeatures()+0x8dc>
c0019891:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019897:	c1 ea 0e             	shr    edx,0xe
c001989a:	80 fa 05             	cmp    dl,0x5
c001989d:	75 7b                	jne    c001991a <CPU::detectFeatures()+0x7d4>
c001989f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198a5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198aa:	66 81 fa 00 01       	cmp    dx,0x100
c00198af:	75 0c                	jne    c00198bd <CPU::detectFeatures()+0x777>
c00198b1:	51                   	push   ecx
c00198b2:	51                   	push   ecx
c00198b3:	68 97 b9 02 c0       	push   0xc002b997
c00198b8:	e9 dc 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c00198bd:	66 81 fa 00 02       	cmp    dx,0x200
c00198c2:	75 0c                	jne    c00198d0 <CPU::detectFeatures()+0x78a>
c00198c4:	52                   	push   edx
c00198c5:	52                   	push   edx
c00198c6:	68 aa b9 02 c0       	push   0xc002b9aa
c00198cb:	e9 c9 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c00198d0:	66 81 fa 40 02       	cmp    dx,0x240
c00198d5:	75 0c                	jne    c00198e3 <CPU::detectFeatures()+0x79d>
c00198d7:	50                   	push   eax
c00198d8:	50                   	push   eax
c00198d9:	68 bc b9 02 c0       	push   0xc002b9bc
c00198de:	e9 b6 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c00198e3:	83 f8 06             	cmp    eax,0x6
c00198e6:	75 0c                	jne    c00198f4 <CPU::detectFeatures()+0x7ae>
c00198e8:	50                   	push   eax
c00198e9:	50                   	push   eax
c00198ea:	68 ce b9 02 c0       	push   0xc002b9ce
c00198ef:	e9 a5 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c00198f4:	83 f8 04             	cmp    eax,0x4
c00198f7:	75 0c                	jne    c0019905 <CPU::detectFeatures()+0x7bf>
c00198f9:	50                   	push   eax
c00198fa:	50                   	push   eax
c00198fb:	68 da b9 02 c0       	push   0xc002b9da
c0019900:	e9 94 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019905:	83 f8 03             	cmp    eax,0x3
c0019908:	0f 85 19 02 00 00    	jne    c0019b27 <CPU::detectFeatures()+0x9e1>
c001990e:	50                   	push   eax
c001990f:	50                   	push   eax
c0019910:	68 e2 b9 02 c0       	push   0xc002b9e2
c0019915:	e9 7f 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c001991a:	80 fa 06             	cmp    dl,0x6
c001991d:	0f 85 db 00 00 00    	jne    c00199fe <CPU::detectFeatures()+0x8b8>
c0019923:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019929:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001992e:	66 81 fa 80 01       	cmp    dx,0x180
c0019933:	75 0c                	jne    c0019941 <CPU::detectFeatures()+0x7fb>
c0019935:	50                   	push   eax
c0019936:	50                   	push   eax
c0019937:	68 ed b9 02 c0       	push   0xc002b9ed
c001993c:	e9 58 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019941:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019947:	66 f7 c1 80 ff       	test   cx,0xff80
c001994c:	75 0c                	jne    c001995a <CPU::detectFeatures()+0x814>
c001994e:	50                   	push   eax
c001994f:	50                   	push   eax
c0019950:	68 fd b9 02 c0       	push   0xc002b9fd
c0019955:	e9 3f 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c001995a:	66 81 fa 40 02       	cmp    dx,0x240
c001995f:	75 0c                	jne    c001996d <CPU::detectFeatures()+0x827>
c0019961:	55                   	push   ebp
c0019962:	55                   	push   ebp
c0019963:	68 04 ba 02 c0       	push   0xc002ba04
c0019968:	e9 2c 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c001996d:	66 81 fa 80 02       	cmp    dx,0x280
c0019972:	75 0c                	jne    c0019980 <CPU::detectFeatures()+0x83a>
c0019974:	57                   	push   edi
c0019975:	57                   	push   edi
c0019976:	68 0d ba 02 c0       	push   0xc002ba0d
c001997b:	e9 19 01 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019980:	66 81 fa 40 03       	cmp    dx,0x340
c0019985:	74 ed                	je     c0019974 <CPU::detectFeatures()+0x82e>
c0019987:	66 81 fa c0 03       	cmp    dx,0x3c0
c001998c:	75 0c                	jne    c001999a <CPU::detectFeatures()+0x854>
c001998e:	56                   	push   esi
c001998f:	56                   	push   esi
c0019990:	68 14 ba 02 c0       	push   0xc002ba14
c0019995:	e9 ff 00 00 00       	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c001999a:	83 f8 06             	cmp    eax,0x6
c001999d:	0f 84 45 ff ff ff    	je     c00198e8 <CPU::detectFeatures()+0x7a2>
c00199a3:	83 f8 04             	cmp    eax,0x4
c00199a6:	0f 84 4d ff ff ff    	je     c00198f9 <CPU::detectFeatures()+0x7b3>
c00199ac:	83 f8 03             	cmp    eax,0x3
c00199af:	0f 85 72 01 00 00    	jne    c0019b27 <CPU::detectFeatures()+0x9e1>
c00199b5:	51                   	push   ecx
c00199b6:	51                   	push   ecx
c00199b7:	68 1d ba 02 c0       	push   0xc002ba1d
c00199bc:	53                   	push   ebx
c00199bd:	e8 fe ab ff ff       	call   c00145c0 <Device::setName(char const*)>
c00199c2:	b1 c1                	mov    cl,0xc1
c00199c4:	88 c8                	mov    al,cl
c00199c6:	e6 22                	out    0x22,al
c00199c8:	e4 23                	in     al,0x23
c00199ca:	88 c2                	mov    dl,al
c00199cc:	88 c8                	mov    al,cl
c00199ce:	e6 22                	out    0x22,al
c00199d0:	88 d0                	mov    al,dl
c00199d2:	83 c8 10             	or     eax,0x10
c00199d5:	e6 23                	out    0x23,al
c00199d7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199de:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199e1:	89 d0                	mov    eax,edx
c00199e3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199e9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199ed:	40                   	inc    eax
c00199ee:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199f4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199f9:	e9 a1 00 00 00       	jmp    c0019a9f <CPU::detectFeatures()+0x959>
c00199fe:	83 f8 06             	cmp    eax,0x6
c0019a01:	0f 84 e1 fe ff ff    	je     c00198e8 <CPU::detectFeatures()+0x7a2>
c0019a07:	83 f8 04             	cmp    eax,0x4
c0019a0a:	0f 84 e9 fe ff ff    	je     c00198f9 <CPU::detectFeatures()+0x7b3>
c0019a10:	83 f8 03             	cmp    eax,0x3
c0019a13:	0f 85 0e 01 00 00    	jne    c0019b27 <CPU::detectFeatures()+0x9e1>
c0019a19:	52                   	push   edx
c0019a1a:	52                   	push   edx
c0019a1b:	68 28 ba 02 c0       	push   0xc002ba28
c0019a20:	eb 77                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a22:	83 f8 07             	cmp    eax,0x7
c0019a25:	75 09                	jne    c0019a30 <CPU::detectFeatures()+0x8ea>
c0019a27:	50                   	push   eax
c0019a28:	50                   	push   eax
c0019a29:	68 32 ba 02 c0       	push   0xc002ba32
c0019a2e:	eb 69                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a30:	83 f8 0a             	cmp    eax,0xa
c0019a33:	75 09                	jne    c0019a3e <CPU::detectFeatures()+0x8f8>
c0019a35:	50                   	push   eax
c0019a36:	50                   	push   eax
c0019a37:	68 3d ba 02 c0       	push   0xc002ba3d
c0019a3c:	eb 5b                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a3e:	83 f8 0b             	cmp    eax,0xb
c0019a41:	75 09                	jne    c0019a4c <CPU::detectFeatures()+0x906>
c0019a43:	50                   	push   eax
c0019a44:	50                   	push   eax
c0019a45:	68 45 ba 02 c0       	push   0xc002ba45
c0019a4a:	eb 4d                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a4c:	83 f8 08             	cmp    eax,0x8
c0019a4f:	75 09                	jne    c0019a5a <CPU::detectFeatures()+0x914>
c0019a51:	50                   	push   eax
c0019a52:	50                   	push   eax
c0019a53:	68 4e ba 02 c0       	push   0xc002ba4e
c0019a58:	eb 3f                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a5a:	83 f8 09             	cmp    eax,0x9
c0019a5d:	75 09                	jne    c0019a68 <CPU::detectFeatures()+0x922>
c0019a5f:	50                   	push   eax
c0019a60:	50                   	push   eax
c0019a61:	68 56 ba 02 c0       	push   0xc002ba56
c0019a66:	eb 31                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a68:	83 f8 05             	cmp    eax,0x5
c0019a6b:	75 09                	jne    c0019a76 <CPU::detectFeatures()+0x930>
c0019a6d:	50                   	push   eax
c0019a6e:	50                   	push   eax
c0019a6f:	68 5e ba 02 c0       	push   0xc002ba5e
c0019a74:	eb 23                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a76:	83 f8 0c             	cmp    eax,0xc
c0019a79:	75 09                	jne    c0019a84 <CPU::detectFeatures()+0x93e>
c0019a7b:	55                   	push   ebp
c0019a7c:	55                   	push   ebp
c0019a7d:	68 6c ba 02 c0       	push   0xc002ba6c
c0019a82:	eb 15                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a84:	83 f8 0d             	cmp    eax,0xd
c0019a87:	75 09                	jne    c0019a92 <CPU::detectFeatures()+0x94c>
c0019a89:	57                   	push   edi
c0019a8a:	57                   	push   edi
c0019a8b:	68 77 ba 02 c0       	push   0xc002ba77
c0019a90:	eb 07                	jmp    c0019a99 <CPU::detectFeatures()+0x953>
c0019a92:	56                   	push   esi
c0019a93:	56                   	push   esi
c0019a94:	68 8b ba 02 c0       	push   0xc002ba8b
c0019a99:	53                   	push   ebx
c0019a9a:	e8 21 ab ff ff       	call   c00145c0 <Device::setName(char const*)>
c0019a9f:	83 c4 10             	add    esp,0x10
c0019aa2:	e9 80 00 00 00       	jmp    c0019b27 <CPU::detectFeatures()+0x9e1>
c0019aa7:	51                   	push   ecx
c0019aa8:	51                   	push   ecx
c0019aa9:	68 d7 b8 02 c0       	push   0xc002b8d7
c0019aae:	57                   	push   edi
c0019aaf:	e8 80 6d fe ff       	call   c0000834 <strcpy>
c0019ab4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019abe:	e8 eb 67 fe ff       	call   c00002ae <is486>
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	85 c0                	test   eax,eax
c0019ac8:	74 2b                	je     c0019af5 <CPU::detectFeatures()+0x9af>
c0019aca:	52                   	push   edx
c0019acb:	52                   	push   edx
c0019acc:	68 97 ba 02 c0       	push   0xc002ba97
c0019ad1:	53                   	push   ebx
c0019ad2:	e8 e9 aa ff ff       	call   c00145c0 <Device::setName(char const*)>
c0019ad7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019ade:	0f 20 c0             	mov    eax,cr0
c0019ae1:	83 e0 14             	and    eax,0x14
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	83 f8 04             	cmp    eax,0x4
c0019aea:	75 1f                	jne    c0019b0b <CPU::detectFeatures()+0x9c5>
c0019aec:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019af3:	eb 32                	jmp    c0019b27 <CPU::detectFeatures()+0x9e1>
c0019af5:	50                   	push   eax
c0019af6:	50                   	push   eax
c0019af7:	68 a2 ba 02 c0       	push   0xc002baa2
c0019afc:	53                   	push   ebx
c0019afd:	e8 be aa ff ff       	call   c00145c0 <Device::setName(char const*)>
c0019b02:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b09:	eb d3                	jmp    c0019ade <CPU::detectFeatures()+0x998>
c0019b0b:	e8 79 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b10:	83 e0 01             	and    eax,0x1
c0019b13:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b16:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b1c:	83 e0 fd             	and    eax,0xfffffffd
c0019b1f:	09 d0                	or     eax,edx
c0019b21:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b27:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b2e:	83 c4 4c             	add    esp,0x4c
c0019b31:	5b                   	pop    ebx
c0019b32:	5e                   	pop    esi
c0019b33:	5f                   	pop    edi
c0019b34:	5d                   	pop    ebp
c0019b35:	c3                   	ret    

c0019b36 <CPU::setupSMEP()>:
c0019b36:	0f 20 e0             	mov    eax,cr4
c0019b39:	0d 00 00 10 00       	or     eax,0x100000
c0019b3e:	0f 22 e0             	mov    cr4,eax
c0019b41:	c3                   	ret    

c0019b42 <CPU::setupUMIP()>:
c0019b42:	0f 20 e0             	mov    eax,cr4
c0019b45:	80 cc 08             	or     ah,0x8
c0019b48:	0f 22 e0             	mov    cr4,eax
c0019b4b:	c3                   	ret    

c0019b4c <CPU::setupTSC()>:
c0019b4c:	0f 20 e0             	mov    eax,cr4
c0019b4f:	83 c8 04             	or     eax,0x4
c0019b52:	0f 22 e0             	mov    cr4,eax
c0019b55:	c3                   	ret    

c0019b56 <CPU::setupLargePages()>:
c0019b56:	0f 20 e0             	mov    eax,cr4
c0019b59:	83 c8 10             	or     eax,0x10
c0019b5c:	0f 22 e0             	mov    cr4,eax
c0019b5f:	c3                   	ret    

c0019b60 <CPU::setupPAT()>:
c0019b60:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0019b65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b6c:	74 2c                	je     c0019b9a <CPU::setupPAT()+0x3a>
c0019b6e:	53                   	push   ebx
c0019b6f:	83 ec 10             	sub    esp,0x10
c0019b72:	68 77 02 00 00       	push   0x277
c0019b77:	50                   	push   eax
c0019b78:	e8 6b 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b7d:	83 e2 f8             	and    edx,0xfffffff8
c0019b80:	83 ca 01             	or     edx,0x1
c0019b83:	52                   	push   edx
c0019b84:	50                   	push   eax
c0019b85:	68 77 02 00 00       	push   0x277
c0019b8a:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c0019b90:	e8 7f 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b95:	83 c4 28             	add    esp,0x28
c0019b98:	5b                   	pop    ebx
c0019b99:	c3                   	ret    
c0019b9a:	c3                   	ret    
c0019b9b:	90                   	nop

c0019b9c <CPU::setupMTRR()>:
c0019b9c:	c3                   	ret    
c0019b9d:	90                   	nop

c0019b9e <CPU::setupGlobalPages()>:
c0019b9e:	0f 20 e0             	mov    eax,cr4
c0019ba1:	0c 80                	or     al,0x80
c0019ba3:	0f 22 e0             	mov    cr4,eax
c0019ba6:	c3                   	ret    
c0019ba7:	90                   	nop

c0019ba8 <CPU::allowUsermodeDataAccess()>:
c0019ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bac:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bb3:	74 03                	je     c0019bb8 <CPU::allowUsermodeDataAccess()+0x10>
c0019bb5:	0f 01 cb             	stac   
c0019bb8:	c3                   	ret    
c0019bb9:	90                   	nop

c0019bba <CPU::prohibitUsermodeDataAccess()>:
c0019bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbe:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bc5:	74 03                	je     c0019bca <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bc7:	0f 01 ca             	clac   
c0019bca:	c3                   	ret    
c0019bcb:	90                   	nop

c0019bcc <CPU::setupSMAP()>:
c0019bcc:	0f 20 e0             	mov    eax,cr4
c0019bcf:	0d 00 00 20 00       	or     eax,0x200000
c0019bd4:	0f 22 e0             	mov    cr4,eax
c0019bd7:	eb e1                	jmp    c0019bba <CPU::prohibitUsermodeDataAccess()>
c0019bd9:	90                   	nop

c0019bda <CPU::setupFeatures()>:
c0019bda:	83 ec 0c             	sub    esp,0xc
c0019bdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019be1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019be8:	74 07                	je     c0019bf1 <CPU::setupFeatures()+0x17>
c0019bea:	52                   	push   edx
c0019beb:	e8 46 ff ff ff       	call   c0019b36 <CPU::setupSMEP()>
c0019bf0:	58                   	pop    eax
c0019bf1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bf8:	74 07                	je     c0019c01 <CPU::setupFeatures()+0x27>
c0019bfa:	52                   	push   edx
c0019bfb:	e8 cc ff ff ff       	call   c0019bcc <CPU::setupSMAP()>
c0019c00:	58                   	pop    eax
c0019c01:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c08:	74 07                	je     c0019c11 <CPU::setupFeatures()+0x37>
c0019c0a:	52                   	push   edx
c0019c0b:	e8 32 ff ff ff       	call   c0019b42 <CPU::setupUMIP()>
c0019c10:	58                   	pop    eax
c0019c11:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c18:	74 07                	je     c0019c21 <CPU::setupFeatures()+0x47>
c0019c1a:	52                   	push   edx
c0019c1b:	e8 2c ff ff ff       	call   c0019b4c <CPU::setupTSC()>
c0019c20:	58                   	pop    eax
c0019c21:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c28:	74 07                	je     c0019c31 <CPU::setupFeatures()+0x57>
c0019c2a:	52                   	push   edx
c0019c2b:	e8 26 ff ff ff       	call   c0019b56 <CPU::setupLargePages()>
c0019c30:	59                   	pop    ecx
c0019c31:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c38:	74 07                	je     c0019c41 <CPU::setupFeatures()+0x67>
c0019c3a:	52                   	push   edx
c0019c3b:	e8 5e ff ff ff       	call   c0019b9e <CPU::setupGlobalPages()>
c0019c40:	58                   	pop    eax
c0019c41:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c48:	74 0c                	je     c0019c56 <CPU::setupFeatures()+0x7c>
c0019c4a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c4e:	83 c4 0c             	add    esp,0xc
c0019c51:	e9 0a ff ff ff       	jmp    c0019b60 <CPU::setupPAT()>
c0019c56:	83 c4 0c             	add    esp,0xc
c0019c59:	c3                   	ret    

c0019c5a <CPU::open(int, int, void*)>:
c0019c5a:	57                   	push   edi
c0019c5b:	56                   	push   esi
c0019c5c:	53                   	push   ebx
c0019c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c65:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c6b:	83 ec 0c             	sub    esp,0xc
c0019c6e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c74:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c7a:	50                   	push   eax
c0019c7b:	e8 54 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c80:	83 c4 0c             	add    esp,0xc
c0019c83:	6a 00                	push   0x0
c0019c85:	68 ef be ad de       	push   0xdeadbeef
c0019c8a:	57                   	push   edi
c0019c8b:	e8 60 78 ff ff       	call   c00114f0 <TSS::setup(unsigned long, unsigned long)>
c0019c90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c93:	e8 38 78 ff ff       	call   c00114d0 <TSS::flush()>
c0019c98:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ca1:	e8 8a 56 ff ff       	call   c000f330 <IDT::setup()>
c0019ca6:	b8 00 04 00 00       	mov    eax,0x400
c0019cab:	0f 23 f8             	mov    db7,eax
c0019cae:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cb8:	e8 28 62 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019cbd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cc3:	89 30                	mov    DWORD PTR [eax],esi
c0019cc5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ccb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cce:	58                   	pop    eax
c0019ccf:	5a                   	pop    edx
c0019cd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cd6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cda:	e8 65 89 ff ff       	call   c0012644 <VAS::setCPUSpecific(unsigned long)>
c0019cdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ce2:	e8 5f f4 ff ff       	call   c0019146 <CPU::detectFeatures()>
c0019ce7:	e8 ce bc ff ff       	call   c00159ba <setupInterruptController()>
c0019cec:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cf2:	a1 00 e5 02 c0       	mov    eax,ds:0xc002e500
c0019cf7:	83 e0 10             	and    eax,0x10
c0019cfa:	83 f8 01             	cmp    eax,0x1
c0019cfd:	19 c0                	sbb    eax,eax
c0019cff:	83 e0 46             	and    eax,0x46
c0019d02:	83 c0 1e             	add    eax,0x1e
c0019d05:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d08:	e8 bb d1 ff ff       	call   c0016ec8 <setupTimer(int)>
c0019d0d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d16:	e8 bf fe ff ff       	call   c0019bda <CPU::setupFeatures()>
c0019d1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d1e:	e8 a7 f1 ff ff       	call   c0018eca <CPU::displayFeatures()>
c0019d23:	83 c4 10             	add    esp,0x10
c0019d26:	31 c0                	xor    eax,eax
c0019d28:	5b                   	pop    ebx
c0019d29:	5e                   	pop    esi
c0019d2a:	5f                   	pop    edi
c0019d2b:	c3                   	ret    

c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d2c:	57                   	push   edi
c0019d2d:	56                   	push   esi
c0019d2e:	53                   	push   ebx
c0019d2f:	51                   	push   ecx
c0019d30:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d34:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d37:	0f 02 c0             	lar    eax,ax
c0019d3a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d3d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d41:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d44:	88 ca                	mov    dl,cl
c0019d46:	c0 ea 06             	shr    dl,0x6
c0019d49:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d4d:	89 ca                	mov    edx,ecx
c0019d4f:	66 c1 ea 03          	shr    dx,0x3
c0019d53:	83 e2 07             	and    edx,0x7
c0019d56:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d5b:	88 17                	mov    BYTE PTR [edi],dl
c0019d5d:	0f 84 a6 01 00 00    	je     c0019f09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d63:	83 e1 07             	and    ecx,0x7
c0019d66:	80 f9 04             	cmp    cl,0x4
c0019d69:	0f 84 98 00 00 00    	je     c0019e07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d6f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d74:	0f 95 c0             	setne  al
c0019d77:	80 f9 05             	cmp    cl,0x5
c0019d7a:	0f 95 c2             	setne  dl
c0019d7d:	08 c2                	or     dl,al
c0019d7f:	74 79                	je     c0019dfa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d81:	84 c9                	test   cl,cl
c0019d83:	75 05                	jne    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d85:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d88:	eb 3c                	jmp    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d8a:	80 f9 01             	cmp    cl,0x1
c0019d8d:	75 05                	jne    c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d8f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d92:	eb 32                	jmp    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d94:	80 f9 02             	cmp    cl,0x2
c0019d97:	75 05                	jne    c0019d9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d99:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d9c:	eb 28                	jmp    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d9e:	31 c0                	xor    eax,eax
c0019da0:	80 f9 03             	cmp    cl,0x3
c0019da3:	75 05                	jne    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019da5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019da8:	eb 1c                	jmp    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019daa:	80 f9 05             	cmp    cl,0x5
c0019dad:	75 05                	jne    c0019db4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019daf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019db2:	eb 12                	jmp    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019db4:	80 f9 06             	cmp    cl,0x6
c0019db7:	75 05                	jne    c0019dbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019db9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dbc:	eb 08                	jmp    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dbe:	80 f9 07             	cmp    cl,0x7
c0019dc1:	75 03                	jne    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dc6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019dcb:	75 10                	jne    c0019ddd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019dcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019dd1:	b9 03 00 00 00       	mov    ecx,0x3
c0019dd6:	01 d0                	add    eax,edx
c0019dd8:	e9 37 01 00 00       	jmp    c0019f14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ddd:	b9 02 00 00 00       	mov    ecx,0x2
c0019de2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019de7:	0f 85 27 01 00 00    	jne    c0019f14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ded:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019df0:	b9 06 00 00 00       	mov    ecx,0x6
c0019df5:	e9 1a 01 00 00       	jmp    c0019f14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dfa:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019dfd:	b9 06 00 00 00       	mov    ecx,0x6
c0019e02:	e9 0f 01 00 00       	jmp    c0019f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e07:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e0a:	88 ca                	mov    dl,cl
c0019e0c:	c0 ea 06             	shr    dl,0x6
c0019e0f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e13:	89 ca                	mov    edx,ecx
c0019e15:	66 c1 ea 03          	shr    dx,0x3
c0019e19:	83 e2 07             	and    edx,0x7
c0019e1c:	80 e1 07             	and    cl,0x7
c0019e1f:	75 05                	jne    c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e21:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e24:	eb 4c                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e26:	80 f9 01             	cmp    cl,0x1
c0019e29:	75 05                	jne    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e2b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e2e:	eb 42                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e30:	80 f9 02             	cmp    cl,0x2
c0019e33:	75 05                	jne    c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e35:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e38:	eb 38                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e3a:	80 f9 03             	cmp    cl,0x3
c0019e3d:	75 05                	jne    c0019e44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e3f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e42:	eb 2e                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e44:	80 f9 04             	cmp    cl,0x4
c0019e47:	75 12                	jne    c0019e5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e49:	f6 c4 60             	test   ah,0x60
c0019e4c:	75 08                	jne    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e4e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e51:	8d 78 14             	lea    edi,[eax+0x14]
c0019e54:	eb 1c                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e56:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e59:	eb 17                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e5b:	80 f9 05             	cmp    cl,0x5
c0019e5e:	75 05                	jne    c0019e65 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e60:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e63:	eb 0d                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e65:	80 f9 06             	cmp    cl,0x6
c0019e68:	75 05                	jne    c0019e6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e6a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e6d:	eb 03                	jmp    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e6f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e72:	84 d2                	test   dl,dl
c0019e74:	75 05                	jne    c0019e7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e76:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e79:	eb 3c                	jmp    c0019eb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e7b:	80 fa 01             	cmp    dl,0x1
c0019e7e:	75 05                	jne    c0019e85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e80:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e83:	eb 32                	jmp    c0019eb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e85:	80 fa 02             	cmp    dl,0x2
c0019e88:	75 05                	jne    c0019e8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e8a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e8d:	eb 28                	jmp    c0019eb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e8f:	80 fa 03             	cmp    dl,0x3
c0019e92:	75 05                	jne    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e94:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e97:	eb 1e                	jmp    c0019eb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e99:	31 c0                	xor    eax,eax
c0019e9b:	80 fa 04             	cmp    dl,0x4
c0019e9e:	74 17                	je     c0019eb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ea0:	80 fa 05             	cmp    dl,0x5
c0019ea3:	75 05                	jne    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019ea5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ea8:	eb 0d                	jmp    c0019eb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eaa:	80 fa 06             	cmp    dl,0x6
c0019ead:	75 05                	jne    c0019eb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019eaf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019eb2:	eb 03                	jmp    c0019eb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019eb7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ebc:	0f 94 c2             	sete   dl
c0019ebf:	80 f9 05             	cmp    cl,0x5
c0019ec2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ec6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ecb:	d3 e0                	shl    eax,cl
c0019ecd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019ed1:	74 0a                	je     c0019edd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ed3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ed6:	b9 07 00 00 00       	mov    ecx,0x7
c0019edb:	eb 37                	jmp    c0019f14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019edd:	01 f8                	add    eax,edi
c0019edf:	b9 03 00 00 00       	mov    ecx,0x3
c0019ee4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ee9:	74 2b                	je     c0019f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eeb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ef0:	75 0d                	jne    c0019eff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ef2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ef6:	01 c8                	add    eax,ecx
c0019ef8:	b9 04 00 00 00       	mov    ecx,0x4
c0019efd:	eb 17                	jmp    c0019f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eff:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f02:	b9 07 00 00 00       	mov    ecx,0x7
c0019f07:	eb 0d                	jmp    c0019f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f09:	b9 02 00 00 00       	mov    ecx,0x2
c0019f0e:	b2 01                	mov    dl,0x1
c0019f10:	31 c0                	xor    eax,eax
c0019f12:	eb 02                	jmp    c0019f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f14:	31 d2                	xor    edx,edx
c0019f16:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f1a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f20:	88 11                	mov    BYTE PTR [ecx],dl
c0019f22:	5a                   	pop    edx
c0019f23:	5b                   	pop    ebx
c0019f24:	5e                   	pop    esi
c0019f25:	5f                   	pop    edi
c0019f26:	c3                   	ret    

c0019f27 <Krnl::smpEntry()>:
c0019f27:	eb fe                	jmp    c0019f27 <Krnl::smpEntry()>

c0019f29 <Krnl::startCPU(int)>:
c0019f29:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0019f2e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f35:	0f 84 36 01 00 00    	je     c001a071 <Krnl::startCPU(int)+0x148>
c0019f3b:	53                   	push   ebx
c0019f3c:	83 ec 08             	sub    esp,0x8
c0019f3f:	e8 16 3f 00 00       	call   c001de5a <lockScheduler()>
c0019f44:	52                   	push   edx
c0019f45:	52                   	push   edx
c0019f46:	6a 1b                	push   0x1b
c0019f48:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c0019f4e:	e8 95 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f53:	59                   	pop    ecx
c0019f54:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f59:	89 c3                	mov    ebx,eax
c0019f5b:	58                   	pop    eax
c0019f5c:	53                   	push   ebx
c0019f5d:	68 dc ba 02 c0       	push   0xc002badc
c0019f62:	e8 50 90 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0019f67:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f75:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f7f:	c1 e0 18             	shl    eax,0x18
c0019f82:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f91:	09 c2                	or     edx,eax
c0019f93:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f99:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f9f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fa5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fab:	80 cd c5             	or     ch,0xc5
c0019fae:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fb4:	f3 90                	pause  
c0019fb6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fb8:	0f ba e1 0c          	bt     ecx,0xc
c0019fbc:	72 f6                	jb     c0019fb4 <Krnl::startCPU(int)+0x8b>
c0019fbe:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fc4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fca:	09 c1                	or     ecx,eax
c0019fcc:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fd2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fd8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fde:	80 cd 85             	or     ch,0x85
c0019fe1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fe7:	f3 90                	pause  
c0019fe9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019feb:	0f ba e1 0c          	bt     ecx,0xc
c0019fef:	72 f6                	jb     c0019fe7 <Krnl::startCPU(int)+0xbe>
c0019ff1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ffb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a001:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a007:	09 c1                	or     ecx,eax
c001a009:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a00f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a015:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a01b:	81 c9 02 06 00 00    	or     ecx,0x602
c001a021:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a027:	f3 90                	pause  
c001a029:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a02b:	0f ba e1 0c          	bt     ecx,0xc
c001a02f:	72 f6                	jb     c001a027 <Krnl::startCPU(int)+0xfe>
c001a031:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a03b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a041:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a047:	09 c8                	or     eax,ecx
c001a049:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a04f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a055:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a05a:	0d 02 06 00 00       	or     eax,0x602
c001a05f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a065:	f3 90                	pause  
c001a067:	8b 02                	mov    eax,DWORD PTR [edx]
c001a069:	0f ba e0 0c          	bt     eax,0xc
c001a06d:	72 f6                	jb     c001a065 <Krnl::startCPU(int)+0x13c>
c001a06f:	eb fe                	jmp    c001a06f <Krnl::startCPU(int)+0x146>
c001a071:	c3                   	ret    

c001a072 <Krnl::startCPUs()>:
c001a072:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001a077:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a07d:	88 c2                	mov    dl,al
c001a07f:	83 e2 0a             	and    edx,0xa
c001a082:	80 fa 0a             	cmp    dl,0xa
c001a085:	75 09                	jne    c001a090 <Krnl::startCPUs()+0x1e>
c001a087:	a8 01                	test   al,0x1
c001a089:	74 05                	je     c001a090 <Krnl::startCPUs()+0x1e>
c001a08b:	e9 0b 61 fe ff       	jmp    c000019b <prepareTramp>
c001a090:	c3                   	ret    
c001a091:	90                   	nop

c001a092 <EnvVarContainer::getEnv(char const*)>:
c001a092:	57                   	push   edi
c001a093:	56                   	push   esi
c001a094:	53                   	push   ebx
c001a095:	31 db                	xor    ebx,ebx
c001a097:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a09b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a09d:	7e 2b                	jle    c001a0ca <EnvVarContainer::getEnv(char const*)+0x38>
c001a09f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0a6:	50                   	push   eax
c001a0a7:	50                   	push   eax
c001a0a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0ab:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0b2:	e8 09 68 fe ff       	call   c00008c0 <strcmp>
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	85 c0                	test   eax,eax
c001a0bc:	75 09                	jne    c001a0c7 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0be:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0c1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0c5:	eb 05                	jmp    c001a0cc <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0c7:	43                   	inc    ebx
c001a0c8:	eb d1                	jmp    c001a09b <EnvVarContainer::getEnv(char const*)+0x9>
c001a0ca:	31 c0                	xor    eax,eax
c001a0cc:	5b                   	pop    ebx
c001a0cd:	5e                   	pop    esi
c001a0ce:	5f                   	pop    edi
c001a0cf:	c3                   	ret    

c001a0d0 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0d0:	57                   	push   edi
c001a0d1:	56                   	push   esi
c001a0d2:	53                   	push   ebx
c001a0d3:	83 ec 1c             	sub    esp,0x1c
c001a0d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0da:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0de:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0e2:	57                   	push   edi
c001a0e3:	e8 ac 66 fe ff       	call   c0000794 <strlen>
c001a0e8:	40                   	inc    eax
c001a0e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0ec:	e8 52 57 ff ff       	call   c000f843 <malloc>
c001a0f1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0f8:	e8 97 66 fe ff       	call   c0000794 <strlen>
c001a0fd:	40                   	inc    eax
c001a0fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001a101:	e8 3d 57 ff ff       	call   c000f843 <malloc>
c001a106:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a109:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a10d:	e8 82 66 fe ff       	call   c0000794 <strlen>
c001a112:	83 c4 0c             	add    esp,0xc
c001a115:	40                   	inc    eax
c001a116:	50                   	push   eax
c001a117:	6a 00                	push   0x0
c001a119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a11d:	e8 56 66 fe ff       	call   c0000778 <memset>
c001a122:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a125:	e8 6a 66 fe ff       	call   c0000794 <strlen>
c001a12a:	83 c4 0c             	add    esp,0xc
c001a12d:	40                   	inc    eax
c001a12e:	50                   	push   eax
c001a12f:	57                   	push   edi
c001a130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a134:	e8 0b 66 fe ff       	call   c0000744 <memcpy>
c001a139:	89 34 24             	mov    DWORD PTR [esp],esi
c001a13c:	e8 53 66 fe ff       	call   c0000794 <strlen>
c001a141:	83 c4 0c             	add    esp,0xc
c001a144:	40                   	inc    eax
c001a145:	50                   	push   eax
c001a146:	6a 00                	push   0x0
c001a148:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a14c:	e8 27 66 fe ff       	call   c0000778 <memset>
c001a151:	89 34 24             	mov    DWORD PTR [esp],esi
c001a154:	e8 3b 66 fe ff       	call   c0000794 <strlen>
c001a159:	83 c4 0c             	add    esp,0xc
c001a15c:	40                   	inc    eax
c001a15d:	50                   	push   eax
c001a15e:	56                   	push   esi
c001a15f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a163:	e8 dc 65 fe ff       	call   c0000744 <memcpy>
c001a168:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a16a:	40                   	inc    eax
c001a16b:	89 03                	mov    DWORD PTR [ebx],eax
c001a16d:	c1 e0 03             	shl    eax,0x3
c001a170:	5a                   	pop    edx
c001a171:	59                   	pop    ecx
c001a172:	50                   	push   eax
c001a173:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a176:	e8 b4 56 ff ff       	call   c000f82f <realloc>
c001a17b:	83 c4 0c             	add    esp,0xc
c001a17e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a181:	6a 08                	push   0x8
c001a183:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a187:	52                   	push   edx
c001a188:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a18a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a18e:	50                   	push   eax
c001a18f:	e8 b0 65 fe ff       	call   c0000744 <memcpy>
c001a194:	83 c4 20             	add    esp,0x20
c001a197:	5b                   	pop    ebx
c001a198:	5e                   	pop    esi
c001a199:	5f                   	pop    edi
c001a19a:	c3                   	ret    
c001a19b:	90                   	nop

c001a19c <EnvVarContainer::deleteEnv(char const*)>:
c001a19c:	c3                   	ret    
c001a19d:	90                   	nop

c001a19e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a19e:	55                   	push   ebp
c001a19f:	57                   	push   edi
c001a1a0:	56                   	push   esi
c001a1a1:	53                   	push   ebx
c001a1a2:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1a8:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1af:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1b6:	68 14 01 00 00       	push   0x114
c001a1bb:	e8 83 56 ff ff       	call   c000f843 <malloc>
c001a1c0:	83 c4 0c             	add    esp,0xc
c001a1c3:	89 c7                	mov    edi,eax
c001a1c5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1cf:	50                   	push   eax
c001a1d0:	e8 3b 93 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001a1d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1d8:	e8 05 96 ff ff       	call   c00137e2 <File::exists()>
c001a1dd:	83 c4 10             	add    esp,0x10
c001a1e0:	84 c0                	test   al,al
c001a1e2:	75 31                	jne    c001a215 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1e4:	51                   	push   ecx
c001a1e5:	51                   	push   ecx
c001a1e6:	6a 12                	push   0x12
c001a1e8:	57                   	push   edi
c001a1e9:	e8 86 93 ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001a1ee:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1f0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1f6:	e8 99 65 fe ff       	call   c0000794 <strlen>
c001a1fb:	5a                   	pop    edx
c001a1fc:	31 d2                	xor    edx,edx
c001a1fe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a202:	51                   	push   ecx
c001a203:	55                   	push   ebp
c001a204:	52                   	push   edx
c001a205:	50                   	push   eax
c001a206:	57                   	push   edi
c001a207:	ff d3                	call   ebx
c001a209:	83 c4 14             	add    esp,0x14
c001a20c:	57                   	push   edi
c001a20d:	e8 c0 93 ff ff       	call   c00135d2 <File::close()>
c001a212:	83 c4 10             	add    esp,0x10
c001a215:	31 db                	xor    ebx,ebx
c001a217:	50                   	push   eax
c001a218:	31 ed                	xor    ebp,ebp
c001a21a:	68 00 01 00 00       	push   0x100
c001a21f:	6a 00                	push   0x0
c001a221:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a225:	50                   	push   eax
c001a226:	e8 4d 65 fe ff       	call   c0000778 <memset>
c001a22b:	58                   	pop    eax
c001a22c:	5a                   	pop    edx
c001a22d:	6a 01                	push   0x1
c001a22f:	57                   	push   edi
c001a230:	e8 3f 93 ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001a235:	83 c4 10             	add    esp,0x10
c001a238:	83 ec 0c             	sub    esp,0xc
c001a23b:	8b 07                	mov    eax,DWORD PTR [edi]
c001a23d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a241:	51                   	push   ecx
c001a242:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a246:	52                   	push   edx
c001a247:	6a 00                	push   0x0
c001a249:	6a 01                	push   0x1
c001a24b:	57                   	push   edi
c001a24c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a24f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a253:	83 c4 20             	add    esp,0x20
c001a256:	3c 0d                	cmp    al,0xd
c001a258:	0f 84 12 01 00 00    	je     c001a370 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a25e:	85 db                	test   ebx,ebx
c001a260:	0f 84 fd 00 00 00    	je     c001a363 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a266:	3c 0a                	cmp    al,0xa
c001a268:	74 13                	je     c001a27d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a26a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a26f:	74 0c                	je     c001a27d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a271:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a277:	0f 8e e6 00 00 00    	jle    c001a363 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a27d:	83 ec 0c             	sub    esp,0xc
c001a280:	8d 53 01             	lea    edx,[ebx+0x1]
c001a283:	29 dd                	sub    ebp,ebx
c001a285:	52                   	push   edx
c001a286:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a28a:	e8 b4 55 ff ff       	call   c000f843 <malloc>
c001a28f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a292:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a296:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a299:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a29d:	e8 a1 55 ff ff       	call   c000f843 <malloc>
c001a2a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2a6:	83 c4 0c             	add    esp,0xc
c001a2a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2ad:	52                   	push   edx
c001a2ae:	6a 00                	push   0x0
c001a2b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2b4:	e8 bf 64 fe ff       	call   c0000778 <memset>
c001a2b9:	83 c4 0c             	add    esp,0xc
c001a2bc:	53                   	push   ebx
c001a2bd:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2c1:	55                   	push   ebp
c001a2c2:	01 eb                	add    ebx,ebp
c001a2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2c8:	e8 77 64 fe ff       	call   c0000744 <memcpy>
c001a2cd:	83 c4 0c             	add    esp,0xc
c001a2d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2d4:	51                   	push   ecx
c001a2d5:	6a 00                	push   0x0
c001a2d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2db:	e8 98 64 fe ff       	call   c0000778 <memset>
c001a2e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2e3:	e8 ac 64 fe ff       	call   c0000794 <strlen>
c001a2e8:	83 c4 0c             	add    esp,0xc
c001a2eb:	50                   	push   eax
c001a2ec:	53                   	push   ebx
c001a2ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2f1:	e8 4e 64 fe ff       	call   c0000744 <memcpy>
c001a2f6:	5b                   	pop    ebx
c001a2f7:	58                   	pop    eax
c001a2f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2fc:	68 ed ba 02 c0       	push   0xc002baed
c001a301:	e8 b1 8c ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001a306:	8b 06                	mov    eax,DWORD PTR [esi]
c001a308:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a30b:	40                   	inc    eax
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	89 06                	mov    DWORD PTR [esi],eax
c001a311:	85 d2                	test   edx,edx
c001a313:	75 0c                	jne    c001a321 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a315:	83 ec 0c             	sub    esp,0xc
c001a318:	6a 08                	push   0x8
c001a31a:	e8 24 55 ff ff       	call   c000f843 <malloc>
c001a31f:	eb 0c                	jmp    c001a32d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a321:	c1 e0 03             	shl    eax,0x3
c001a324:	51                   	push   ecx
c001a325:	51                   	push   ecx
c001a326:	50                   	push   eax
c001a327:	52                   	push   edx
c001a328:	e8 02 55 ff ff       	call   c000f82f <realloc>
c001a32d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a330:	83 c4 10             	add    esp,0x10
c001a333:	31 db                	xor    ebx,ebx
c001a335:	52                   	push   edx
c001a336:	6a 08                	push   0x8
c001a338:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a33c:	50                   	push   eax
c001a33d:	8b 16                	mov    edx,DWORD PTR [esi]
c001a33f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a342:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a346:	50                   	push   eax
c001a347:	e8 f8 63 fe ff       	call   c0000744 <memcpy>
c001a34c:	83 c4 0c             	add    esp,0xc
c001a34f:	68 00 01 00 00       	push   0x100
c001a354:	6a 00                	push   0x0
c001a356:	55                   	push   ebp
c001a357:	31 ed                	xor    ebp,ebp
c001a359:	e8 1a 64 fe ff       	call   c0000778 <memset>
c001a35e:	83 c4 10             	add    esp,0x10
c001a361:	eb 0d                	jmp    c001a370 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a363:	3c 3d                	cmp    al,0x3d
c001a365:	74 07                	je     c001a36e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a367:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a36b:	45                   	inc    ebp
c001a36c:	eb 02                	jmp    c001a370 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a36e:	89 eb                	mov    ebx,ebp
c001a370:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a375:	0f 85 bd fe ff ff    	jne    c001a238 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a37b:	50                   	push   eax
c001a37c:	50                   	push   eax
c001a37d:	ff 36                	push   DWORD PTR [esi]
c001a37f:	68 fb ba 02 c0       	push   0xc002bafb
c001a384:	e8 2e 8c ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001a389:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a38f:	5b                   	pop    ebx
c001a390:	5e                   	pop    esi
c001a391:	5f                   	pop    edi
c001a392:	5d                   	pop    ebp
c001a393:	c3                   	ret    

c001a394 <EnvVarContainer::__loadSystem()>:
c001a394:	83 ec 10             	sub    esp,0x10
c001a397:	68 20 da 02 c0       	push   0xc002da20
c001a39c:	68 26 bb 02 c0       	push   0xc002bb26
c001a3a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3a5:	e8 f4 fd ff ff       	call   c001a19e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3aa:	83 c4 1c             	add    esp,0x1c
c001a3ad:	c3                   	ret    

c001a3ae <EnvVarContainer::__loadUser()>:
c001a3ae:	c3                   	ret    
c001a3af:	90                   	nop

c001a3b0 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3d0:	90                   	nop
c001a3d1:	c3                   	ret    

c001a3d2 <EnvVarContainer::~EnvVarContainer()>:
c001a3d2:	83 ec 0c             	sub    esp,0xc
c001a3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3dc:	85 c0                	test   eax,eax
c001a3de:	74 1d                	je     c001a3fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3e6:	85 c0                	test   eax,eax
c001a3e8:	74 13                	je     c001a3fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3f1:	83 ec 0c             	sub    esp,0xc
c001a3f4:	50                   	push   eax
c001a3f5:	e8 59 54 ff ff       	call   c000f853 <free>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	90                   	nop
c001a3fe:	83 c4 0c             	add    esp,0xc
c001a401:	c3                   	ret    

c001a402 <Krnl::getEnv(Process*, char const*)>:
c001a402:	53                   	push   ebx
c001a403:	83 ec 08             	sub    esp,0x8
c001a406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a40e:	39 05 54 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a54,eax
c001a414:	74 04                	je     c001a41a <Krnl::getEnv(Process*, char const*)+0x18>
c001a416:	85 c0                	test   eax,eax
c001a418:	75 0b                	jne    c001a425 <Krnl::getEnv(Process*, char const*)+0x23>
c001a41a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a41f:	85 c0                	test   eax,eax
c001a421:	75 19                	jne    c001a43c <Krnl::getEnv(Process*, char const*)+0x3a>
c001a423:	eb 27                	jmp    c001a44c <Krnl::getEnv(Process*, char const*)+0x4a>
c001a425:	52                   	push   edx
c001a426:	52                   	push   edx
c001a427:	53                   	push   ebx
c001a428:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a42e:	e8 5f fc ff ff       	call   c001a092 <EnvVarContainer::getEnv(char const*)>
c001a433:	83 c4 10             	add    esp,0x10
c001a436:	85 c0                	test   eax,eax
c001a438:	75 28                	jne    c001a462 <Krnl::getEnv(Process*, char const*)+0x60>
c001a43a:	eb de                	jmp    c001a41a <Krnl::getEnv(Process*, char const*)+0x18>
c001a43c:	52                   	push   edx
c001a43d:	52                   	push   edx
c001a43e:	53                   	push   ebx
c001a43f:	50                   	push   eax
c001a440:	e8 4d fc ff ff       	call   c001a092 <EnvVarContainer::getEnv(char const*)>
c001a445:	83 c4 10             	add    esp,0x10
c001a448:	85 c0                	test   eax,eax
c001a44a:	75 16                	jne    c001a462 <Krnl::getEnv(Process*, char const*)+0x60>
c001a44c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a450:	a1 38 10 03 c0       	mov    eax,ds:0xc0031038
c001a455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a459:	83 c4 08             	add    esp,0x8
c001a45c:	5b                   	pop    ebx
c001a45d:	e9 30 fc ff ff       	jmp    c001a092 <EnvVarContainer::getEnv(char const*)>
c001a462:	83 c4 08             	add    esp,0x8
c001a465:	5b                   	pop    ebx
c001a466:	c3                   	ret    

c001a467 <Krnl::setEnvSystem(char const*, char const*)>:
c001a467:	83 ec 10             	sub    esp,0x10
c001a46a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a46e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a472:	ff 35 38 10 03 c0    	push   DWORD PTR ds:0xc0031038
c001a478:	e8 53 fc ff ff       	call   c001a0d0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a47d:	83 c4 1c             	add    esp,0x1c
c001a480:	c3                   	ret    

c001a481 <Krnl::setEnvUser(char const*, char const*)>:
c001a481:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a486:	85 c0                	test   eax,eax
c001a488:	74 15                	je     c001a49f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a48a:	83 ec 10             	sub    esp,0x10
c001a48d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a491:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a495:	50                   	push   eax
c001a496:	e8 35 fc ff ff       	call   c001a0d0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a49b:	83 c4 1c             	add    esp,0x1c
c001a49e:	c3                   	ret    
c001a49f:	c3                   	ret    

c001a4a0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4a4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4ae:	e9 1d fc ff ff       	jmp    c001a0d0 <EnvVarContainer::setEnv(char const*, char const*)>

c001a4b3 <Krnl::deleteEnvSystem(char const*)>:
c001a4b3:	c3                   	ret    

c001a4b4 <Krnl::deleteEnvUser(char const*)>:
c001a4b4:	c3                   	ret    

c001a4b5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4b5:	c3                   	ret    

c001a4b6 <Krnl::newProcessEnv(Process*)>:
c001a4b6:	83 ec 28             	sub    esp,0x28
c001a4b9:	6a 0c                	push   0xc
c001a4bb:	e8 83 53 ff ff       	call   c000f843 <malloc>
c001a4c0:	5a                   	pop    edx
c001a4c1:	59                   	pop    ecx
c001a4c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4c6:	50                   	push   eax
c001a4c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4cb:	e8 e0 fe ff ff       	call   c001a3b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4d4:	83 c4 2c             	add    esp,0x2c
c001a4d7:	c3                   	ret    

c001a4d8 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4d8:	56                   	push   esi
c001a4d9:	53                   	push   ebx
c001a4da:	83 ec 10             	sub    esp,0x10
c001a4dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4e1:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4e7:	6a 0c                	push   0xc
c001a4e9:	e8 55 53 ff ff       	call   c000f843 <malloc>
c001a4ee:	89 c3                	mov    ebx,eax
c001a4f0:	58                   	pop    eax
c001a4f1:	5a                   	pop    edx
c001a4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4f6:	53                   	push   ebx
c001a4f7:	e8 b4 fe ff ff       	call   c001a3b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4fc:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4fe:	89 03                	mov    DWORD PTR [ebx],eax
c001a500:	c1 e0 03             	shl    eax,0x3
c001a503:	89 04 24             	mov    DWORD PTR [esp],eax
c001a506:	e8 38 53 ff ff       	call   c000f843 <malloc>
c001a50b:	83 c4 0c             	add    esp,0xc
c001a50e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a511:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a513:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a51a:	52                   	push   edx
c001a51b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a51e:	50                   	push   eax
c001a51f:	e8 20 62 fe ff       	call   c0000744 <memcpy>
c001a524:	89 d8                	mov    eax,ebx
c001a526:	83 c4 14             	add    esp,0x14
c001a529:	5b                   	pop    ebx
c001a52a:	5e                   	pop    esi
c001a52b:	c3                   	ret    

c001a52c <Krnl::loadSystemEnv()>:
c001a52c:	53                   	push   ebx
c001a52d:	83 ec 14             	sub    esp,0x14
c001a530:	6a 0c                	push   0xc
c001a532:	e8 0c 53 ff ff       	call   c000f843 <malloc>
c001a537:	89 c3                	mov    ebx,eax
c001a539:	58                   	pop    eax
c001a53a:	5a                   	pop    edx
c001a53b:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c001a541:	53                   	push   ebx
c001a542:	e8 69 fe ff ff       	call   c001a3b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a547:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a54a:	89 1d 38 10 03 c0    	mov    DWORD PTR ds:0xc0031038,ebx
c001a550:	e8 3f fe ff ff       	call   c001a394 <EnvVarContainer::__loadSystem()>
c001a555:	83 c4 18             	add    esp,0x18
c001a558:	5b                   	pop    ebx
c001a559:	c3                   	ret    

c001a55a <Krnl::loadUserEnv()>:
c001a55a:	53                   	push   ebx
c001a55b:	83 ec 14             	sub    esp,0x14
c001a55e:	6a 0c                	push   0xc
c001a560:	e8 de 52 ff ff       	call   c000f843 <malloc>
c001a565:	89 c3                	mov    ebx,eax
c001a567:	58                   	pop    eax
c001a568:	5a                   	pop    edx
c001a569:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c001a56f:	53                   	push   ebx
c001a570:	e8 3b fe ff ff       	call   c001a3b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a575:	89 1d 34 10 03 c0    	mov    DWORD PTR ds:0xc0031034,ebx
c001a57b:	83 c4 18             	add    esp,0x18
c001a57e:	5b                   	pop    ebx
c001a57f:	c3                   	ret    

c001a580 <Krnl::flushEnv()>:
c001a580:	c3                   	ret    

c001a581 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a585:	8b 15 34 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031034
c001a58b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a591:	a1 38 10 03 c0       	mov    eax,ds:0xc0031038
c001a596:	8b 00                	mov    eax,DWORD PTR [eax]
c001a598:	03 01                	add    eax,DWORD PTR [ecx]
c001a59a:	85 d2                	test   edx,edx
c001a59c:	74 02                	je     c001a5a0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a59e:	03 02                	add    eax,DWORD PTR [edx]
c001a5a0:	c3                   	ret    

c001a5a1 <Krnl::getProcessEnvPair(Process*, int)>:
c001a5a1:	57                   	push   edi
c001a5a2:	8b 0d 34 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031034
c001a5a8:	56                   	push   esi
c001a5a9:	85 c9                	test   ecx,ecx
c001a5ab:	53                   	push   ebx
c001a5ac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5b4:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5be:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5c0:	75 47                	jne    c001a609 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5c2:	39 c3                	cmp    ebx,eax
c001a5c4:	7c 47                	jl     c001a60d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5c6:	8b 15 38 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031038
c001a5cc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5ce:	01 c1                	add    ecx,eax
c001a5d0:	39 d9                	cmp    ecx,ebx
c001a5d2:	7e 6c                	jle    c001a640 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5d4:	51                   	push   ecx
c001a5d5:	89 d9                	mov    ecx,ebx
c001a5d7:	29 c1                	sub    ecx,eax
c001a5d9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5dc:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5e0:	53                   	push   ebx
c001a5e1:	68 48 bb 02 c0       	push   0xc002bb48
c001a5e6:	e8 cc 89 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001a5eb:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5f1:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5f3:	a1 38 10 03 c0       	mov    eax,ds:0xc0031038
c001a5f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5fb:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5ff:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a602:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a605:	89 06                	mov    DWORD PTR [esi],eax
c001a607:	eb 51                	jmp    c001a65a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a609:	39 c3                	cmp    ebx,eax
c001a60b:	7d 05                	jge    c001a612 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a60d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a610:	eb 20                	jmp    c001a632 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a612:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a614:	8d 14 07             	lea    edx,[edi+eax*1]
c001a617:	39 da                	cmp    edx,ebx
c001a619:	7e 04                	jle    c001a61f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a61b:	29 c3                	sub    ebx,eax
c001a61d:	eb 10                	jmp    c001a62f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a61f:	8b 0d 38 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031038
c001a625:	03 11                	add    edx,DWORD PTR [ecx]
c001a627:	39 da                	cmp    edx,ebx
c001a629:	7e 15                	jle    c001a640 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a62b:	29 c3                	sub    ebx,eax
c001a62d:	29 fb                	sub    ebx,edi
c001a62f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a632:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a636:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a639:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a63c:	89 06                	mov    DWORD PTR [esi],eax
c001a63e:	eb 1d                	jmp    c001a65d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a640:	83 ec 0c             	sub    esp,0xc
c001a643:	68 5c bb 02 c0       	push   0xc002bb5c
c001a648:	e8 18 00 00 00       	call   c001a665 <Krnl::panic(char const*)>
c001a64d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a653:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	89 f0                	mov    eax,esi
c001a65f:	5b                   	pop    ebx
c001a660:	5e                   	pop    esi
c001a661:	5f                   	pop    edi
c001a662:	c2 04 00             	ret    0x4

c001a665 <Krnl::panic(char const*)>:
c001a665:	55                   	push   ebp
c001a666:	89 e5                	mov    ebp,esp
c001a668:	53                   	push   ebx
c001a669:	83 ec 0c             	sub    esp,0xc
c001a66c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a66f:	fa                   	cli    
c001a670:	c6 05 44 10 03 c0 01 	mov    BYTE PTR ds:0xc0031044,0x1
c001a677:	53                   	push   ebx
c001a678:	c6 05 24 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d424,0x0
c001a67f:	68 76 bb 02 c0       	push   0xc002bb76
c001a684:	e8 2e 89 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001a689:	58                   	pop    eax
c001a68a:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a68f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a695:	e8 97 66 ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c001a69a:	83 c4 0c             	add    esp,0xc
c001a69d:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a6a2:	6a 01                	push   0x1
c001a6a4:	6a 0f                	push   0xf
c001a6a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ac:	e8 b1 60 ff ff       	call   c0010762 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6b1:	58                   	pop    eax
c001a6b2:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a6b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6bd:	e8 10 69 ff ff       	call   c0010fd2 <VgaText::clearScreen()>
c001a6c2:	58                   	pop    eax
c001a6c3:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a6c8:	5a                   	pop    edx
c001a6c9:	68 8f bb 02 c0       	push   0xc002bb8f
c001a6ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d4:	e8 77 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a6d9:	59                   	pop    ecx
c001a6da:	58                   	pop    eax
c001a6db:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a6e0:	68 34 bc 02 c0       	push   0xc002bc34
c001a6e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6eb:	e8 60 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a6f0:	58                   	pop    eax
c001a6f1:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a6f6:	5a                   	pop    edx
c001a6f7:	68 ab bb 02 c0       	push   0xc002bbab
c001a6fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a702:	e8 49 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a707:	59                   	pop    ecx
c001a708:	58                   	pop    eax
c001a709:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a70e:	53                   	push   ebx
c001a70f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a715:	e8 36 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a71a:	58                   	pop    eax
c001a71b:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a720:	5a                   	pop    edx
c001a721:	68 cb bb 02 c0       	push   0xc002bbcb
c001a726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72c:	e8 1f 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a731:	a1 40 10 03 c0       	mov    eax,ds:0xc0031040
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	85 c0                	test   eax,eax
c001a73b:	74 02                	je     c001a73f <Krnl::panic(char const*)+0xda>
c001a73d:	ff d0                	call   eax
c001a73f:	83 ec 0c             	sub    esp,0xc
c001a742:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a745:	e8 fd 2f 00 00       	call   c001d747 <Thr::getDriverNameFromAddress(unsigned long)>
c001a74a:	83 c4 10             	add    esp,0x10
c001a74d:	89 c3                	mov    ebx,eax
c001a74f:	85 c0                	test   eax,eax
c001a751:	0f 84 50 02 00 00    	je     c001a9a7 <Krnl::panic(char const*)+0x342>
c001a757:	83 ec 08             	sub    esp,0x8
c001a75a:	8b 15 54 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a54
c001a760:	68 70 bc 02 c0       	push   0xc002bc70
c001a765:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a76b:	e8 e0 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a770:	58                   	pop    eax
c001a771:	5a                   	pop    edx
c001a772:	8b 15 54 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a54
c001a778:	68 ab bb 02 c0       	push   0xc002bbab
c001a77d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a783:	e8 c8 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a788:	59                   	pop    ecx
c001a789:	58                   	pop    eax
c001a78a:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a78f:	53                   	push   ebx
c001a790:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a796:	e8 b5 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a79b:	83 c4 10             	add    esp,0x10
c001a79e:	83 ec 08             	sub    esp,0x8
c001a7a1:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a7a6:	68 ca bb 02 c0       	push   0xc002bbca
c001a7ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b1:	e8 9a 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7b6:	58                   	pop    eax
c001a7b7:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a7bc:	5a                   	pop    edx
c001a7bd:	68 c8 bc 02 c0       	push   0xc002bcc8
c001a7c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c8:	e8 83 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7cd:	59                   	pop    ecx
c001a7ce:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a7d3:	5b                   	pop    ebx
c001a7d4:	68 08 bd 02 c0       	push   0xc002bd08
c001a7d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7df:	e8 6c 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7e4:	58                   	pop    eax
c001a7e5:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a7ea:	5a                   	pop    edx
c001a7eb:	68 b6 bb 02 c0       	push   0xc002bbb6
c001a7f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f6:	e8 55 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7fb:	59                   	pop    ecx
c001a7fc:	5b                   	pop    ebx
c001a7fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a800:	68 ce bb 02 c0       	push   0xc002bbce
c001a805:	e8 ad 87 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001a80a:	58                   	pop    eax
c001a80b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a80e:	5a                   	pop    edx
c001a80f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a812:	68 d7 bb 02 c0       	push   0xc002bbd7
c001a817:	e8 9b 87 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001a81c:	59                   	pop    ecx
c001a81d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a820:	5b                   	pop    ebx
c001a821:	8b 00                	mov    eax,DWORD PTR [eax]
c001a823:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a826:	68 e0 bb 02 c0       	push   0xc002bbe0
c001a82b:	e8 87 87 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001a830:	58                   	pop    eax
c001a831:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a836:	5a                   	pop    edx
c001a837:	68 4c bd 02 c0       	push   0xc002bd4c
c001a83c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a842:	e8 09 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a847:	59                   	pop    ecx
c001a848:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a84d:	5b                   	pop    ebx
c001a84e:	68 e9 bb 02 c0       	push   0xc002bbe9
c001a853:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a859:	e8 f2 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a85e:	0f 20 c0             	mov    eax,cr0
c001a861:	5a                   	pop    edx
c001a862:	59                   	pop    ecx
c001a863:	50                   	push   eax
c001a864:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a869:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86f:	e8 02 69 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a874:	5b                   	pop    ebx
c001a875:	58                   	pop    eax
c001a876:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a87b:	68 f3 bb 02 c0       	push   0xc002bbf3
c001a880:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a886:	e8 c5 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a88b:	0f 20 d0             	mov    eax,cr2
c001a88e:	5a                   	pop    edx
c001a88f:	59                   	pop    ecx
c001a890:	50                   	push   eax
c001a891:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a896:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a89c:	e8 d5 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a8a1:	5b                   	pop    ebx
c001a8a2:	58                   	pop    eax
c001a8a3:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a8a8:	68 fd bb 02 c0       	push   0xc002bbfd
c001a8ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b3:	e8 98 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a8b8:	0f 20 d8             	mov    eax,cr3
c001a8bb:	5a                   	pop    edx
c001a8bc:	59                   	pop    ecx
c001a8bd:	50                   	push   eax
c001a8be:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a8c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c9:	e8 a8 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a8ce:	5b                   	pop    ebx
c001a8cf:	58                   	pop    eax
c001a8d0:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a8d5:	68 10 bc 02 c0       	push   0xc002bc10
c001a8da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e0:	e8 6b 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a8e5:	0f 20 e0             	mov    eax,cr4
c001a8e8:	5a                   	pop    edx
c001a8e9:	59                   	pop    ecx
c001a8ea:	50                   	push   eax
c001a8eb:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a8f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f6:	e8 7b 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a8fb:	5b                   	pop    ebx
c001a8fc:	58                   	pop    eax
c001a8fd:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a902:	68 1a bc 02 c0       	push   0xc002bc1a
c001a907:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a90d:	e8 3e 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a912:	5a                   	pop    edx
c001a913:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a918:	59                   	pop    ecx
c001a919:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a91f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a922:	50                   	push   eax
c001a923:	e8 4e 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a928:	5b                   	pop    ebx
c001a929:	58                   	pop    eax
c001a92a:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a92f:	68 31 bc 02 c0       	push   0xc002bc31
c001a934:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93a:	e8 11 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a93f:	5a                   	pop    edx
c001a940:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a945:	59                   	pop    ecx
c001a946:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a94c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a94f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a952:	50                   	push   eax
c001a953:	e8 1e 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a958:	5b                   	pop    ebx
c001a959:	58                   	pop    eax
c001a95a:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a95f:	68 31 bc 02 c0       	push   0xc002bc31
c001a964:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a96a:	e8 e1 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a96f:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a974:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a977:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a97d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a97f:	59                   	pop    ecx
c001a980:	5b                   	pop    ebx
c001a981:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a984:	50                   	push   eax
c001a985:	e8 ec 67 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a98a:	83 c4 10             	add    esp,0x10
c001a98d:	b2 fe                	mov    dl,0xfe
c001a98f:	e4 60                	in     al,0x60
c001a991:	3c 1c                	cmp    al,0x1c
c001a993:	74 04                	je     c001a999 <Krnl::panic(char const*)+0x334>
c001a995:	3c 5a                	cmp    al,0x5a
c001a997:	75 f6                	jne    c001a98f <Krnl::panic(char const*)+0x32a>
c001a999:	e4 64                	in     al,0x64
c001a99b:	a8 02                	test   al,0x2
c001a99d:	75 fa                	jne    c001a999 <Krnl::panic(char const*)+0x334>
c001a99f:	88 d0                	mov    al,dl
c001a9a1:	e6 64                	out    0x64,al
c001a9a3:	fa                   	cli    
c001a9a4:	f4                   	hlt    
c001a9a5:	eb e8                	jmp    c001a98f <Krnl::panic(char const*)+0x32a>
c001a9a7:	50                   	push   eax
c001a9a8:	50                   	push   eax
c001a9a9:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a9ae:	68 9c bc 02 c0       	push   0xc002bc9c
c001a9b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b9:	e8 92 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a9be:	58                   	pop    eax
c001a9bf:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a9c4:	5a                   	pop    edx
c001a9c5:	68 ab bb 02 c0       	push   0xc002bbab
c001a9ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d0:	e8 7b 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a9d5:	59                   	pop    ecx
c001a9d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9db:	5b                   	pop    ebx
c001a9dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9df:	83 c0 0c             	add    eax,0xc
c001a9e2:	50                   	push   eax
c001a9e3:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001a9e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ee:	e8 5d 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a9f3:	83 c4 10             	add    esp,0x10
c001a9f6:	e9 a3 fd ff ff       	jmp    c001a79e <Krnl::panic(char const*)+0x139>

c001a9fb <Net::switchEndian16(unsigned short)>:
c001a9fb:	83 ec 04             	sub    esp,0x4
c001a9fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa02:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa06:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa0a:	c1 f8 08             	sar    eax,0x8
c001aa0d:	89 c2                	mov    edx,eax
c001aa0f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa13:	c1 e0 08             	shl    eax,0x8
c001aa16:	09 d0                	or     eax,edx
c001aa18:	83 c4 04             	add    esp,0x4
c001aa1b:	c3                   	ret    

c001aa1c <Net::switchEndian32(unsigned int)>:
c001aa1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa20:	c1 e8 18             	shr    eax,0x18
c001aa23:	89 c2                	mov    edx,eax
c001aa25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa29:	c1 e0 08             	shl    eax,0x8
c001aa2c:	25 00 00 ff 00       	and    eax,0xff0000
c001aa31:	09 c2                	or     edx,eax
c001aa33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa37:	c1 e8 08             	shr    eax,0x8
c001aa3a:	25 00 ff 00 00       	and    eax,0xff00
c001aa3f:	09 c2                	or     edx,eax
c001aa41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa45:	c1 e0 18             	shl    eax,0x18
c001aa48:	09 d0                	or     eax,edx
c001aa4a:	c3                   	ret    

c001aa4b <Net::crc32Calc(unsigned char*, int)>:
c001aa4b:	83 ec 10             	sub    esp,0x10
c001aa4e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa53:	75 07                	jne    c001aa5c <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa55:	b8 00 00 00 00       	mov    eax,0x0
c001aa5a:	eb 7c                	jmp    c001aad8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa5c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa61:	7f 07                	jg     c001aa6a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa63:	b8 00 00 00 00       	mov    eax,0x0
c001aa68:	eb 6e                	jmp    c001aad8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa6a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa72:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa7e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa82:	7d 4e                	jge    c001aad2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa8c:	01 d0                	add    eax,edx
c001aa8e:	8a 00                	mov    al,BYTE PTR [eax]
c001aa90:	0f b6 c0             	movzx  eax,al
c001aa93:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa9f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aaa4:	7f 26                	jg     c001aacc <Net::crc32Calc(unsigned char*, int)+0x81>
c001aaa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaaa:	83 e0 01             	and    eax,0x1
c001aaad:	74 0d                	je     c001aabc <Net::crc32Calc(unsigned char*, int)+0x71>
c001aaaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab3:	d1 e8                	shr    eax,1
c001aab5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aaba:	eb 06                	jmp    c001aac2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac0:	d1 e8                	shr    eax,1
c001aac2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aac6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaca:	eb d3                	jmp    c001aa9f <Net::crc32Calc(unsigned char*, int)+0x54>
c001aacc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aad0:	eb a8                	jmp    c001aa7a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad6:	f7 d0                	not    eax
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	c3                   	ret    

c001aadc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aadc:	83 ec 1c             	sub    esp,0x1c
c001aadf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aae7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aaef:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aaf4:	7f 14                	jg     c001ab0a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aaf6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aafa:	8d 50 01             	lea    edx,[eax+0x1]
c001aafd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab01:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab04:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab08:	eb e5                	jmp    c001aaef <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab11:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab15:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab18:	83 ec 04             	sub    esp,0x4
c001ab1b:	6a 06                	push   0x6
c001ab1d:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab21:	50                   	push   eax
c001ab22:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab26:	e8 19 5c fe ff       	call   c0000744 <memcpy>
c001ab2b:	83 c4 10             	add    esp,0x10
c001ab2e:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab33:	83 ec 04             	sub    esp,0x4
c001ab36:	6a 06                	push   0x6
c001ab38:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab3c:	50                   	push   eax
c001ab3d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab41:	e8 fe 5b fe ff       	call   c0000744 <memcpy>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab52:	0f b7 c0             	movzx  eax,ax
c001ab55:	c1 f8 08             	sar    eax,0x8
c001ab58:	89 c1                	mov    ecx,eax
c001ab5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab61:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab65:	88 ca                	mov    dl,cl
c001ab67:	88 10                	mov    BYTE PTR [eax],dl
c001ab69:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab71:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab74:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab78:	88 10                	mov    BYTE PTR [eax],dl
c001ab7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab82:	83 ec 04             	sub    esp,0x4
c001ab85:	52                   	push   edx
c001ab86:	50                   	push   eax
c001ab87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab8b:	e8 b4 5b fe ff       	call   c0000744 <memcpy>
c001ab90:	83 c4 10             	add    esp,0x10
c001ab93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab97:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab9f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aba3:	83 ec 08             	sub    esp,0x8
c001aba6:	50                   	push   eax
c001aba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abab:	e8 9b fe ff ff       	call   c001aa4b <Net::crc32Calc(unsigned char*, int)>
c001abb0:	83 c4 10             	add    esp,0x10
c001abb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abbb:	c1 e8 18             	shr    eax,0x18
c001abbe:	89 c1                	mov    ecx,eax
c001abc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abc4:	8d 50 01             	lea    edx,[eax+0x1]
c001abc7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abcb:	88 ca                	mov    dl,cl
c001abcd:	88 10                	mov    BYTE PTR [eax],dl
c001abcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd3:	c1 e8 10             	shr    eax,0x10
c001abd6:	89 c1                	mov    ecx,eax
c001abd8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abdc:	8d 50 01             	lea    edx,[eax+0x1]
c001abdf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abe3:	88 ca                	mov    dl,cl
c001abe5:	88 10                	mov    BYTE PTR [eax],dl
c001abe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abeb:	c1 e8 08             	shr    eax,0x8
c001abee:	89 c1                	mov    ecx,eax
c001abf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf4:	8d 50 01             	lea    edx,[eax+0x1]
c001abf7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abfb:	88 ca                	mov    dl,cl
c001abfd:	88 10                	mov    BYTE PTR [eax],dl
c001abff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac03:	8d 50 01             	lea    edx,[eax+0x1]
c001ac06:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac0e:	88 10                	mov    BYTE PTR [eax],dl
c001ac10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac14:	83 c4 1c             	add    esp,0x1c
c001ac17:	c3                   	ret    

c001ac18 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac18:	83 ec 2c             	sub    esp,0x2c
c001ac1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac23:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac28:	83 ec 04             	sub    esp,0x4
c001ac2b:	6a 06                	push   0x6
c001ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac31:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac35:	83 c0 0e             	add    eax,0xe
c001ac38:	50                   	push   eax
c001ac39:	e8 06 5b fe ff       	call   c0000744 <memcpy>
c001ac3e:	83 c4 10             	add    esp,0x10
c001ac41:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac46:	83 ec 04             	sub    esp,0x4
c001ac49:	6a 06                	push   0x6
c001ac4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac53:	83 c0 08             	add    eax,0x8
c001ac56:	50                   	push   eax
c001ac57:	e8 e8 5a fe ff       	call   c0000744 <memcpy>
c001ac5c:	83 c4 10             	add    esp,0x10
c001ac5f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac68:	8d 50 01             	lea    edx,[eax+0x1]
c001ac6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac6f:	8a 00                	mov    al,BYTE PTR [eax]
c001ac71:	0f b6 c0             	movzx  eax,al
c001ac74:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac7d:	8d 50 01             	lea    edx,[eax+0x1]
c001ac80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac84:	8a 00                	mov    al,BYTE PTR [eax]
c001ac86:	0f b6 c0             	movzx  eax,al
c001ac89:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac8e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac93:	c1 e0 08             	shl    eax,0x8
c001ac96:	89 c2                	mov    edx,eax
c001ac98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac9c:	09 d0                	or     eax,edx
c001ac9e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aca2:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aca6:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001acab:	75 3a                	jne    c001ace7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acb1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acb4:	66 3d dc 05          	cmp    ax,0x5dc
c001acb8:	77 10                	ja     c001acca <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acbe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acc1:	0f b7 c0             	movzx  eax,ax
c001acc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acc8:	eb 1d                	jmp    c001ace7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acca:	83 ec 0c             	sub    esp,0xc
c001accd:	68 74 bd 02 c0       	push   0xc002bd74
c001acd2:	e8 e0 82 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acde:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ace2:	e9 c0 00 00 00       	jmp    c001ada7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ace7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acef:	8b 00                	mov    eax,DWORD PTR [eax]
c001acf1:	83 ec 04             	sub    esp,0x4
c001acf4:	52                   	push   edx
c001acf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acf9:	50                   	push   eax
c001acfa:	e8 45 5a fe ff       	call   c0000744 <memcpy>
c001acff:	83 c4 10             	add    esp,0x10
c001ad02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad06:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad15:	8a 00                	mov    al,BYTE PTR [eax]
c001ad17:	0f b6 c0             	movzx  eax,al
c001ad1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad22:	8d 50 01             	lea    edx,[eax+0x1]
c001ad25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad29:	8a 00                	mov    al,BYTE PTR [eax]
c001ad2b:	0f b6 c0             	movzx  eax,al
c001ad2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad36:	8d 50 01             	lea    edx,[eax+0x1]
c001ad39:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad3d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad3f:	0f b6 c0             	movzx  eax,al
c001ad42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad4a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad51:	8a 00                	mov    al,BYTE PTR [eax]
c001ad53:	0f b6 c0             	movzx  eax,al
c001ad56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad5e:	c1 e0 18             	shl    eax,0x18
c001ad61:	89 c2                	mov    edx,eax
c001ad63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad67:	c1 e0 10             	shl    eax,0x10
c001ad6a:	09 c2                	or     edx,eax
c001ad6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad70:	c1 e0 08             	shl    eax,0x8
c001ad73:	09 d0                	or     eax,edx
c001ad75:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad81:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad85:	83 e8 04             	sub    eax,0x4
c001ad88:	83 ec 08             	sub    esp,0x8
c001ad8b:	50                   	push   eax
c001ad8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad90:	e8 b6 fc ff ff       	call   c001aa4b <Net::crc32Calc(unsigned char*, int)>
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad9c:	0f 94 c2             	sete   dl
c001ad9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ada3:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ada6:	90                   	nop
c001ada7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adab:	83 c4 2c             	add    esp,0x2c
c001adae:	c2 04 00             	ret    0x4

c001adb1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001adb1:	55                   	push   ebp
c001adb2:	57                   	push   edi
c001adb3:	56                   	push   esi
c001adb4:	53                   	push   ebx
c001adb5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adbb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adc2:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adc4:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adc7:	80 fb 40             	cmp    bl,0x40
c001adca:	75 1b                	jne    c001ade7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adcc:	8a 16                	mov    dl,BYTE PTR [esi]
c001adce:	84 d2                	test   dl,dl
c001add0:	0f 84 f1 00 00 00    	je     c001aec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001add6:	8d 46 01             	lea    eax,[esi+0x1]
c001add9:	80 fa 3a             	cmp    dl,0x3a
c001addc:	74 04                	je     c001ade2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001adde:	89 c6                	mov    esi,eax
c001ade0:	eb ea                	jmp    c001adcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ade2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ade5:	89 c6                	mov    esi,eax
c001ade7:	50                   	push   eax
c001ade8:	6a 40                	push   0x40
c001adea:	6a 00                	push   0x0
c001adec:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adf0:	50                   	push   eax
c001adf1:	e8 82 59 fe ff       	call   c0000778 <memset>
c001adf6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001adfd:	31 c0                	xor    eax,eax
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae04:	84 c9                	test   cl,cl
c001ae06:	0f 84 bb 00 00 00    	je     c001aec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae0c:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae11:	0f 8f b0 00 00 00    	jg     c001aec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae17:	80 f9 0a             	cmp    cl,0xa
c001ae1a:	0f 85 98 00 00 00    	jne    c001aeb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae20:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae25:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae29:	a8 df                	test   al,0xdf
c001ae2b:	0f 94 c1             	sete   cl
c001ae2e:	3c 23                	cmp    al,0x23
c001ae30:	0f 94 c2             	sete   dl
c001ae33:	08 d1                	or     cl,dl
c001ae35:	75 4a                	jne    c001ae81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae37:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae3a:	80 fa 01             	cmp    dl,0x1
c001ae3d:	76 42                	jbe    c001ae81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae3f:	3c 5b                	cmp    al,0x5b
c001ae41:	75 42                	jne    c001ae85 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae43:	80 fb 40             	cmp    bl,0x40
c001ae46:	75 39                	jne    c001ae81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae48:	83 ec 0c             	sub    esp,0xc
c001ae4b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae4f:	52                   	push   edx
c001ae50:	e8 3f 59 fe ff       	call   c0000794 <strlen>
c001ae55:	83 c4 10             	add    esp,0x10
c001ae58:	83 f8 3f             	cmp    eax,0x3f
c001ae5b:	77 6a                	ja     c001aec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae5d:	50                   	push   eax
c001ae5e:	50                   	push   eax
c001ae5f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae63:	52                   	push   edx
c001ae64:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae68:	52                   	push   edx
c001ae69:	e8 c6 59 fe ff       	call   c0000834 <strcpy>
c001ae6e:	58                   	pop    eax
c001ae6f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae73:	52                   	push   edx
c001ae74:	e8 1b 59 fe ff       	call   c0000794 <strlen>
c001ae79:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	31 d2                	xor    edx,edx
c001ae83:	eb 3a                	jmp    c001aebf <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae85:	80 fb 40             	cmp    bl,0x40
c001ae88:	74 06                	je     c001ae90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae8a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae8e:	eb 20                	jmp    c001aeb0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae90:	50                   	push   eax
c001ae91:	50                   	push   eax
c001ae92:	55                   	push   ebp
c001ae93:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae97:	50                   	push   eax
c001ae98:	e8 23 5a fe ff       	call   c00008c0 <strcmp>
c001ae9d:	83 c4 10             	add    esp,0x10
c001aea0:	85 c0                	test   eax,eax
c001aea2:	75 dd                	jne    c001ae81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aea4:	eb e4                	jmp    c001ae8a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aea6:	8d 50 01             	lea    edx,[eax+0x1]
c001aea9:	80 f9 3d             	cmp    cl,0x3d
c001aeac:	74 1d                	je     c001aecb <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aeae:	89 d0                	mov    eax,edx
c001aeb0:	8a 08                	mov    cl,BYTE PTR [eax]
c001aeb2:	84 c9                	test   cl,cl
c001aeb4:	75 f0                	jne    c001aea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aeb6:	eb 0f                	jmp    c001aec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aeb8:	8d 50 01             	lea    edx,[eax+0x1]
c001aebb:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aebf:	47                   	inc    edi
c001aec0:	89 d0                	mov    eax,edx
c001aec2:	e9 3b ff ff ff       	jmp    c001ae02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aec7:	31 c0                	xor    eax,eax
c001aec9:	eb 33                	jmp    c001aefe <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aecf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aed2:	50                   	push   eax
c001aed3:	50                   	push   eax
c001aed4:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aed8:	50                   	push   eax
c001aed9:	56                   	push   esi
c001aeda:	e8 e1 59 fe ff       	call   c00008c0 <strcmp>
c001aedf:	83 c4 10             	add    esp,0x10
c001aee2:	85 c0                	test   eax,eax
c001aee4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aee8:	75 97                	jne    c001ae81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeea:	51                   	push   ecx
c001aeeb:	51                   	push   ecx
c001aeec:	52                   	push   edx
c001aeed:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aef4:	e8 3b 59 fe ff       	call   c0000834 <strcpy>
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	b0 01                	mov    al,0x1
c001aefe:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af04:	5b                   	pop    ebx
c001af05:	5e                   	pop    esi
c001af06:	5f                   	pop    edi
c001af07:	5d                   	pop    ebp
c001af08:	c3                   	ret    

c001af09 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af09:	57                   	push   edi
c001af0a:	56                   	push   esi
c001af0b:	53                   	push   ebx
c001af0c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af12:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af19:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af20:	53                   	push   ebx
c001af21:	e8 6e 58 fe ff       	call   c0000794 <strlen>
c001af26:	89 34 24             	mov    DWORD PTR [esp],esi
c001af29:	89 c7                	mov    edi,eax
c001af2b:	e8 64 58 fe ff       	call   c0000794 <strlen>
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af37:	3d ff 00 00 00       	cmp    eax,0xff
c001af3c:	0f 87 d3 00 00 00    	ja     c001b015 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af42:	57                   	push   edi
c001af43:	57                   	push   edi
c001af44:	56                   	push   esi
c001af45:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af49:	56                   	push   esi
c001af4a:	e8 e5 58 fe ff       	call   c0000834 <strcpy>
c001af4f:	58                   	pop    eax
c001af50:	5a                   	pop    edx
c001af51:	68 d4 c2 02 c0       	push   0xc002c2d4
c001af56:	56                   	push   esi
c001af57:	e8 18 5a fe ff       	call   c0000974 <strcat>
c001af5c:	59                   	pop    ecx
c001af5d:	5f                   	pop    edi
c001af5e:	53                   	push   ebx
c001af5f:	56                   	push   esi
c001af60:	e8 0f 5a fe ff       	call   c0000974 <strcat>
c001af65:	58                   	pop    eax
c001af66:	5a                   	pop    edx
c001af67:	68 c0 bd 02 c0       	push   0xc002bdc0
c001af6c:	56                   	push   esi
c001af6d:	e8 02 5a fe ff       	call   c0000974 <strcat>
c001af72:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af79:	e8 c5 48 ff ff       	call   c000f843 <malloc>
c001af7e:	83 c4 0c             	add    esp,0xc
c001af81:	89 c3                	mov    ebx,eax
c001af83:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c001af89:	56                   	push   esi
c001af8a:	50                   	push   eax
c001af8b:	e8 80 85 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001af90:	83 c4 10             	add    esp,0x10
c001af93:	85 db                	test   ebx,ebx
c001af95:	74 7e                	je     c001b015 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af97:	51                   	push   ecx
c001af98:	51                   	push   ecx
c001af99:	6a 01                	push   0x1
c001af9b:	53                   	push   ebx
c001af9c:	e8 d3 85 ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001afa1:	83 c4 10             	add    esp,0x10
c001afa4:	85 c0                	test   eax,eax
c001afa6:	74 08                	je     c001afb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afa8:	83 ec 0c             	sub    esp,0xc
c001afab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afad:	53                   	push   ebx
c001afae:	eb 5f                	jmp    c001b00f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afb0:	52                   	push   edx
c001afb1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afb5:	50                   	push   eax
c001afb6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001afba:	50                   	push   eax
c001afbb:	53                   	push   ebx
c001afbc:	e8 5f 88 ff ff       	call   c0013820 <File::stat(unsigned long long*, bool*)>
c001afc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	89 c1                	mov    ecx,eax
c001afca:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afce:	74 31                	je     c001b001 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afd0:	83 ec 0c             	sub    esp,0xc
c001afd3:	50                   	push   eax
c001afd4:	e8 6a 48 ff ff       	call   c000f843 <malloc>
c001afd9:	89 c6                	mov    esi,eax
c001afdb:	58                   	pop    eax
c001afdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afde:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afe2:	52                   	push   edx
c001afe3:	56                   	push   esi
c001afe4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afe8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afec:	53                   	push   ebx
c001afed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aff0:	83 c4 20             	add    esp,0x20
c001aff3:	85 c0                	test   eax,eax
c001aff5:	75 0a                	jne    c001b001 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001affb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afff:	74 18                	je     c001b019 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b001:	83 ec 0c             	sub    esp,0xc
c001b004:	53                   	push   ebx
c001b005:	e8 c8 85 ff ff       	call   c00135d2 <File::close()>
c001b00a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b00f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	31 c0                	xor    eax,eax
c001b017:	eb 3b                	jmp    c001b054 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b019:	83 ec 0c             	sub    esp,0xc
c001b01c:	53                   	push   ebx
c001b01d:	e8 b0 85 ff ff       	call   c00135d2 <File::close()>
c001b022:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b024:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b027:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b02a:	83 c4 0c             	add    esp,0xc
c001b02d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b034:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b03b:	56                   	push   esi
c001b03c:	e8 70 fd ff ff       	call   c001adb1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b041:	89 34 24             	mov    DWORD PTR [esp],esi
c001b044:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b048:	e8 06 48 ff ff       	call   c000f853 <free>
c001b04d:	83 c4 10             	add    esp,0x10
c001b050:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b054:	81 c4 20 01 00 00    	add    esp,0x120
c001b05a:	5b                   	pop    ebx
c001b05b:	5e                   	pop    esi
c001b05c:	5f                   	pop    edi
c001b05d:	c3                   	ret    

c001b05e <Reg::getLine(char*, char*, char*)>:
c001b05e:	57                   	push   edi
c001b05f:	56                   	push   esi
c001b060:	53                   	push   ebx
c001b061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b069:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b06d:	57                   	push   edi
c001b06e:	56                   	push   esi
c001b06f:	53                   	push   ebx
c001b070:	68 c5 bd 02 c0       	push   0xc002bdc5
c001b075:	e8 8f fe ff ff       	call   c001af09 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b07a:	83 c4 10             	add    esp,0x10
c001b07d:	84 c0                	test   al,al
c001b07f:	75 10                	jne    c001b091 <Reg::getLine(char*, char*, char*)+0x33>
c001b081:	57                   	push   edi
c001b082:	56                   	push   esi
c001b083:	53                   	push   ebx
c001b084:	68 ea bd 02 c0       	push   0xc002bdea
c001b089:	e8 7b fe ff ff       	call   c001af09 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b08e:	83 c4 10             	add    esp,0x10
c001b091:	5b                   	pop    ebx
c001b092:	5e                   	pop    esi
c001b093:	5f                   	pop    edi
c001b094:	c3                   	ret    

c001b095 <Reg::readInt(char*, char*, int*)>:
c001b095:	55                   	push   ebp
c001b096:	57                   	push   edi
c001b097:	56                   	push   esi
c001b098:	53                   	push   ebx
c001b099:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b09f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0a3:	57                   	push   edi
c001b0a4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0ab:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0b2:	e8 a7 ff ff ff       	call   c001b05e <Reg::getLine(char*, char*, char*)>
c001b0b7:	83 c4 10             	add    esp,0x10
c001b0ba:	84 c0                	test   al,al
c001b0bc:	0f 84 b3 00 00 00    	je     c001b175 <Reg::readInt(char*, char*, int*)+0xe0>
c001b0c2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0c6:	80 fa 2b             	cmp    dl,0x2b
c001b0c9:	74 0c                	je     c001b0d7 <Reg::readInt(char*, char*, int*)+0x42>
c001b0cb:	80 fa 2d             	cmp    dl,0x2d
c001b0ce:	75 0e                	jne    c001b0de <Reg::readInt(char*, char*, int*)+0x49>
c001b0d0:	ba 01 00 00 00       	mov    edx,0x1
c001b0d5:	eb 0b                	jmp    c001b0e2 <Reg::readInt(char*, char*, int*)+0x4d>
c001b0d7:	ba 01 00 00 00       	mov    edx,0x1
c001b0dc:	eb 02                	jmp    c001b0e0 <Reg::readInt(char*, char*, int*)+0x4b>
c001b0de:	31 d2                	xor    edx,edx
c001b0e0:	31 c0                	xor    eax,eax
c001b0e2:	be 0a 00 00 00       	mov    esi,0xa
c001b0e7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0ec:	75 20                	jne    c001b10e <Reg::readInt(char*, char*, int*)+0x79>
c001b0ee:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0f2:	80 f9 78             	cmp    cl,0x78
c001b0f5:	75 0a                	jne    c001b101 <Reg::readInt(char*, char*, int*)+0x6c>
c001b0f7:	83 c2 02             	add    edx,0x2
c001b0fa:	be 10 00 00 00       	mov    esi,0x10
c001b0ff:	eb 0d                	jmp    c001b10e <Reg::readInt(char*, char*, int*)+0x79>
c001b101:	80 f9 62             	cmp    cl,0x62
c001b104:	75 08                	jne    c001b10e <Reg::readInt(char*, char*, int*)+0x79>
c001b106:	83 c2 02             	add    edx,0x2
c001b109:	be 02 00 00 00       	mov    esi,0x2
c001b10e:	01 d7                	add    edi,edx
c001b110:	31 d2                	xor    edx,edx
c001b112:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b114:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b118:	80 fb 0d             	cmp    bl,0xd
c001b11b:	0f 94 c3             	sete   bl
c001b11e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b123:	0f 94 c1             	sete   cl
c001b126:	08 cb                	or     bl,cl
c001b128:	75 3a                	jne    c001b164 <Reg::readInt(char*, char*, int*)+0xcf>
c001b12a:	0f af d6             	imul   edx,esi
c001b12d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b132:	83 fe 10             	cmp    esi,0x10
c001b135:	75 26                	jne    c001b15d <Reg::readInt(char*, char*, int*)+0xc8>
c001b137:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b13b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b13e:	89 e9                	mov    ecx,ebp
c001b140:	80 f9 05             	cmp    cl,0x5
c001b143:	77 06                	ja     c001b14b <Reg::readInt(char*, char*, int*)+0xb6>
c001b145:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b149:	eb 16                	jmp    c001b161 <Reg::readInt(char*, char*, int*)+0xcc>
c001b14b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b14f:	83 e9 61             	sub    ecx,0x61
c001b152:	80 f9 05             	cmp    cl,0x5
c001b155:	77 06                	ja     c001b15d <Reg::readInt(char*, char*, int*)+0xc8>
c001b157:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b15b:	eb 04                	jmp    c001b161 <Reg::readInt(char*, char*, int*)+0xcc>
c001b15d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b161:	47                   	inc    edi
c001b162:	eb ae                	jmp    c001b112 <Reg::readInt(char*, char*, int*)+0x7d>
c001b164:	84 c0                	test   al,al
c001b166:	74 02                	je     c001b16a <Reg::readInt(char*, char*, int*)+0xd5>
c001b168:	f7 da                	neg    edx
c001b16a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b171:	89 10                	mov    DWORD PTR [eax],edx
c001b173:	88 d8                	mov    al,bl
c001b175:	81 c4 ec 00 00 00    	add    esp,0xec
c001b17b:	5b                   	pop    ebx
c001b17c:	5e                   	pop    esi
c001b17d:	5f                   	pop    edi
c001b17e:	5d                   	pop    ebp
c001b17f:	c3                   	ret    

c001b180 <Reg::readString(char*, char*, char*, int)>:
c001b180:	57                   	push   edi
c001b181:	56                   	push   esi
c001b182:	53                   	push   ebx
c001b183:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b189:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b190:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b194:	57                   	push   edi
c001b195:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b19c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1a3:	e8 b6 fe ff ff       	call   c001b05e <Reg::getLine(char*, char*, char*)>
c001b1a8:	83 c4 10             	add    esp,0x10
c001b1ab:	89 c6                	mov    esi,eax
c001b1ad:	84 c0                	test   al,al
c001b1af:	74 44                	je     c001b1f5 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1b1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1b8:	31 c0                	xor    eax,eax
c001b1ba:	4a                   	dec    edx
c001b1bb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1be:	84 c9                	test   cl,cl
c001b1c0:	74 0f                	je     c001b1d1 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1c2:	39 c2                	cmp    edx,eax
c001b1c4:	7e 0b                	jle    c001b1d1 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1c6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1c9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1ce:	40                   	inc    eax
c001b1cf:	eb ea                	jmp    c001b1bb <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1d1:	83 ec 0c             	sub    esp,0xc
c001b1d4:	53                   	push   ebx
c001b1d5:	e8 ba 55 fe ff       	call   c0000794 <strlen>
c001b1da:	83 c4 10             	add    esp,0x10
c001b1dd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1e2:	75 11                	jne    c001b1f5 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	53                   	push   ebx
c001b1e8:	e8 a7 55 fe ff       	call   c0000794 <strlen>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1f5:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1fb:	89 f0                	mov    eax,esi
c001b1fd:	5b                   	pop    ebx
c001b1fe:	5e                   	pop    esi
c001b1ff:	5f                   	pop    edi
c001b200:	c3                   	ret    

c001b201 <Reg::readBool(char*, char*, bool*)>:
c001b201:	83 ec 20             	sub    esp,0x20
c001b204:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b208:	50                   	push   eax
c001b209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b211:	e8 7f fe ff ff       	call   c001b095 <Reg::readInt(char*, char*, int*)>
c001b216:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b21b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b21f:	0f 95 02             	setne  BYTE PTR [edx]
c001b222:	83 c4 2c             	add    esp,0x2c
c001b225:	c3                   	ret    

c001b226 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b226:	53                   	push   ebx
c001b227:	83 ec 1c             	sub    esp,0x1c
c001b22a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b22e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b232:	50                   	push   eax
c001b233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b23b:	e8 c1 ff ff ff       	call   c001b201 <Reg::readBool(char*, char*, bool*)>
c001b240:	83 c4 10             	add    esp,0x10
c001b243:	84 c0                	test   al,al
c001b245:	74 04                	je     c001b24b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b247:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b24b:	88 d8                	mov    al,bl
c001b24d:	83 c4 18             	add    esp,0x18
c001b250:	5b                   	pop    ebx
c001b251:	c3                   	ret    

c001b252 <Reg::readIntWithDefault(char*, char*, int)>:
c001b252:	53                   	push   ebx
c001b253:	83 ec 1c             	sub    esp,0x1c
c001b256:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b25a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b25e:	50                   	push   eax
c001b25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b267:	e8 29 fe ff ff       	call   c001b095 <Reg::readInt(char*, char*, int*)>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	84 c0                	test   al,al
c001b271:	74 04                	je     c001b277 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b273:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b277:	89 d8                	mov    eax,ebx
c001b279:	83 c4 18             	add    esp,0x18
c001b27c:	5b                   	pop    ebx
c001b27d:	c3                   	ret    

c001b27e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b27e:	57                   	push   edi
c001b27f:	56                   	push   esi
c001b280:	53                   	push   ebx
c001b281:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b285:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b289:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b28d:	56                   	push   esi
c001b28e:	53                   	push   ebx
c001b28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b297:	e8 e4 fe ff ff       	call   c001b180 <Reg::readString(char*, char*, char*, int)>
c001b29c:	83 c4 10             	add    esp,0x10
c001b29f:	84 c0                	test   al,al
c001b2a1:	75 1b                	jne    c001b2be <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2a3:	50                   	push   eax
c001b2a4:	56                   	push   esi
c001b2a5:	4e                   	dec    esi
c001b2a6:	6a 00                	push   0x0
c001b2a8:	53                   	push   ebx
c001b2a9:	e8 ca 54 fe ff       	call   c0000778 <memset>
c001b2ae:	83 c4 0c             	add    esp,0xc
c001b2b1:	56                   	push   esi
c001b2b2:	57                   	push   edi
c001b2b3:	53                   	push   ebx
c001b2b4:	89 fb                	mov    ebx,edi
c001b2b6:	e8 89 54 fe ff       	call   c0000744 <memcpy>
c001b2bb:	83 c4 10             	add    esp,0x10
c001b2be:	89 d8                	mov    eax,ebx
c001b2c0:	5b                   	pop    ebx
c001b2c1:	5e                   	pop    esi
c001b2c2:	5f                   	pop    edi
c001b2c3:	c3                   	ret    

c001b2c4 <Sys::eject(regs*)>:
c001b2c4:	83 ec 0c             	sub    esp,0xc
c001b2c7:	83 ca ff             	or     edx,0xffffffff
c001b2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ce:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2d6:	83 e9 41             	sub    ecx,0x41
c001b2d9:	83 f9 19             	cmp    ecx,0x19
c001b2dc:	77 18                	ja     c001b2f6 <Sys::eject(regs*)+0x32>
c001b2de:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c001b2e5:	85 c9                	test   ecx,ecx
c001b2e7:	74 0d                	je     c001b2f6 <Sys::eject(regs*)+0x32>
c001b2e9:	83 ec 0c             	sub    esp,0xc
c001b2ec:	51                   	push   ecx
c001b2ed:	e8 78 b4 ff ff       	call   c001676a <LogicalDisk::eject()>
c001b2f2:	83 c4 10             	add    esp,0x10
c001b2f5:	99                   	cdq    
c001b2f6:	83 c4 0c             	add    esp,0xc
c001b2f9:	c3                   	ret    

c001b2fa <Sys::exit(regs*)>:
c001b2fa:	83 ec 18             	sub    esp,0x18
c001b2fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b301:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b304:	e8 94 35 00 00       	call   c001e89d <terminateTask(int)>
c001b309:	83 c8 ff             	or     eax,0xffffffff
c001b30c:	83 c4 1c             	add    esp,0x1c
c001b30f:	89 c2                	mov    edx,eax
c001b311:	c3                   	ret    

c001b312 <Sys::getCwd(regs*)>:
c001b312:	83 ec 10             	sub    esp,0x10
c001b315:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b319:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b31c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b31f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b324:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b327:	e8 e6 7f ff ff       	call   c0013312 <Fs::getcwd(Process*, char*, int)>
c001b32c:	83 c4 1c             	add    esp,0x1c
c001b32f:	99                   	cdq    
c001b330:	c3                   	ret    

c001b331 <Sys::getPID(regs*)>:
c001b331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b336:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b339:	8b 00                	mov    eax,DWORD PTR [eax]
c001b33b:	99                   	cdq    
c001b33c:	c3                   	ret    

c001b33d <Sys::getRAMData(regs*)>:
c001b33d:	8b 0d 34 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e534
c001b343:	6b 05 30 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e530,0x64
c001b34a:	99                   	cdq    
c001b34b:	f7 f9                	idiv   ecx
c001b34d:	c1 e0 18             	shl    eax,0x18
c001b350:	09 c8                	or     eax,ecx
c001b352:	99                   	cdq    
c001b353:	c3                   	ret    

c001b354 <Sys::loadDLL(regs*)>:
c001b354:	56                   	push   esi
c001b355:	53                   	push   ebx
c001b356:	31 d2                	xor    edx,edx
c001b358:	51                   	push   ecx
c001b359:	b8 01 00 00 00       	mov    eax,0x1
c001b35e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b362:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b366:	0f 84 8c 00 00 00    	je     c001b3f8 <Sys::loadDLL(regs*)+0xa4>
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	68 14 01 00 00       	push   0x114
c001b374:	e8 ca 44 ff ff       	call   c000f843 <malloc>
c001b379:	83 c4 0c             	add    esp,0xc
c001b37c:	89 c3                	mov    ebx,eax
c001b37e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b383:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b386:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b389:	53                   	push   ebx
c001b38a:	e8 81 81 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	31 d2                	xor    edx,edx
c001b394:	b8 02 00 00 00       	mov    eax,0x2
c001b399:	85 db                	test   ebx,ebx
c001b39b:	74 5b                	je     c001b3f8 <Sys::loadDLL(regs*)+0xa4>
c001b39d:	83 ec 0c             	sub    esp,0xc
c001b3a0:	53                   	push   ebx
c001b3a1:	e8 3c 84 ff ff       	call   c00137e2 <File::exists()>
c001b3a6:	83 c4 10             	add    esp,0x10
c001b3a9:	84 c0                	test   al,al
c001b3ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3ad:	75 11                	jne    c001b3c0 <Sys::loadDLL(regs*)+0x6c>
c001b3af:	83 ec 0c             	sub    esp,0xc
c001b3b2:	53                   	push   ebx
c001b3b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3b6:	83 c4 10             	add    esp,0x10
c001b3b9:	b8 03 00 00 00       	mov    eax,0x3
c001b3be:	eb 36                	jmp    c001b3f6 <Sys::loadDLL(regs*)+0xa2>
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	53                   	push   ebx
c001b3c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3c7:	58                   	pop    eax
c001b3c8:	5a                   	pop    edx
c001b3c9:	6a 00                	push   0x0
c001b3cb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3ce:	e8 c5 23 00 00       	call   c001d798 <Thr::loadDLL(char const*, bool)>
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	89 c1                	mov    ecx,eax
c001b3d8:	31 d2                	xor    edx,edx
c001b3da:	b8 04 00 00 00       	mov    eax,0x4
c001b3df:	85 c9                	test   ecx,ecx
c001b3e1:	74 15                	je     c001b3f8 <Sys::loadDLL(regs*)+0xa4>
c001b3e3:	53                   	push   ebx
c001b3e4:	53                   	push   ebx
c001b3e5:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c001b3eb:	51                   	push   ecx
c001b3ec:	e8 f6 25 00 00       	call   c001d9e7 <Thr::executeDLL(unsigned long, void*)>
c001b3f1:	83 c4 10             	add    esp,0x10
c001b3f4:	31 c0                	xor    eax,eax
c001b3f6:	31 d2                	xor    edx,edx
c001b3f8:	59                   	pop    ecx
c001b3f9:	5b                   	pop    ebx
c001b3fa:	5e                   	pop    esi
c001b3fb:	c3                   	ret    

c001b3fc <Sys::read(regs*)>:
c001b3fc:	57                   	push   edi
c001b3fd:	56                   	push   esi
c001b3fe:	53                   	push   ebx
c001b3ff:	83 ec 10             	sub    esp,0x10
c001b402:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b406:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b409:	83 f8 02             	cmp    eax,0x2
c001b40c:	77 10                	ja     c001b41e <Sys::read(regs*)+0x22>
c001b40e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b413:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b416:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b41c:	eb 0e                	jmp    c001b42c <Sys::read(regs*)+0x30>
c001b41e:	83 ec 0c             	sub    esp,0xc
c001b421:	50                   	push   eax
c001b422:	e8 02 66 ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001b427:	83 c4 10             	add    esp,0x10
c001b42a:	89 c1                	mov    ecx,eax
c001b42c:	83 c8 ff             	or     eax,0xffffffff
c001b42f:	85 c9                	test   ecx,ecx
c001b431:	89 c2                	mov    edx,eax
c001b433:	74 28                	je     c001b45d <Sys::read(regs*)+0x61>
c001b435:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b43d:	31 ff                	xor    edi,edi
c001b43f:	83 ec 0c             	sub    esp,0xc
c001b442:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b444:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b448:	52                   	push   edx
c001b449:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b44c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b44f:	57                   	push   edi
c001b450:	56                   	push   esi
c001b451:	51                   	push   ecx
c001b452:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b455:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b459:	83 c4 20             	add    esp,0x20
c001b45c:	99                   	cdq    
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	5b                   	pop    ebx
c001b461:	5e                   	pop    esi
c001b462:	5f                   	pop    edi
c001b463:	c3                   	ret    

c001b464 <Sys::sbrk(regs*)>:
c001b464:	56                   	push   esi
c001b465:	53                   	push   ebx
c001b466:	50                   	push   eax
c001b467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b470:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b473:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b476:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b47c:	85 db                	test   ebx,ebx
c001b47e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b481:	74 02                	je     c001b485 <Sys::sbrk(regs*)+0x21>
c001b483:	79 06                	jns    c001b48b <Sys::sbrk(regs*)+0x27>
c001b485:	89 f0                	mov    eax,esi
c001b487:	31 d2                	xor    edx,edx
c001b489:	eb 2a                	jmp    c001b4b5 <Sys::sbrk(regs*)+0x51>
c001b48b:	83 c8 ff             	or     eax,0xffffffff
c001b48e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b494:	89 c2                	mov    edx,eax
c001b496:	77 1d                	ja     c001b4b5 <Sys::sbrk(regs*)+0x51>
c001b498:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b49e:	50                   	push   eax
c001b49f:	c1 ea 0c             	shr    edx,0xc
c001b4a2:	68 07 0c 00 00       	push   0xc07
c001b4a7:	52                   	push   edx
c001b4a8:	51                   	push   ecx
c001b4a9:	e8 be 6f ff ff       	call   c001246c <VAS::allocatePages(int, int)>
c001b4ae:	89 f0                	mov    eax,esi
c001b4b0:	31 d2                	xor    edx,edx
c001b4b2:	83 c4 10             	add    esp,0x10
c001b4b5:	59                   	pop    ecx
c001b4b6:	5b                   	pop    ebx
c001b4b7:	5e                   	pop    esi
c001b4b8:	c3                   	ret    

c001b4b9 <Sys::setCwd(regs*)>:
c001b4b9:	83 ec 14             	sub    esp,0x14
c001b4bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4c0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4c8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4cb:	e8 b1 83 ff ff       	call   c0013881 <Fs::setcwd(Process*, char*)>
c001b4d0:	83 c4 1c             	add    esp,0x1c
c001b4d3:	99                   	cdq    
c001b4d4:	c3                   	ret    

c001b4d5 <Sys::setTime(regs*)>:
c001b4d5:	55                   	push   ebp
c001b4d6:	31 d2                	xor    edx,edx
c001b4d8:	57                   	push   edi
c001b4d9:	bf 18 00 00 00       	mov    edi,0x18
c001b4de:	56                   	push   esi
c001b4df:	53                   	push   ebx
c001b4e0:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4e5:	83 ec 30             	sub    esp,0x30
c001b4e8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4ec:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4ef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4f2:	f7 f3                	div    ebx
c001b4f4:	89 d6                	mov    esi,edx
c001b4f6:	31 d2                	xor    edx,edx
c001b4f8:	f7 f3                	div    ebx
c001b4fa:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b501:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b506:	31 d2                	xor    edx,edx
c001b508:	f7 f3                	div    ebx
c001b50a:	31 d2                	xor    edx,edx
c001b50c:	bb 0c 00 00 00       	mov    ebx,0xc
c001b511:	f7 f7                	div    edi
c001b513:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b516:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b51a:	0f b7 cd             	movzx  ecx,bp
c001b51d:	56                   	push   esi
c001b51e:	89 c7                	mov    edi,eax
c001b520:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b524:	c1 e6 10             	shl    esi,0x10
c001b527:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b52b:	83 e7 1f             	and    edi,0x1f
c001b52e:	51                   	push   ecx
c001b52f:	47                   	inc    edi
c001b530:	c1 e8 05             	shr    eax,0x5
c001b533:	31 d2                	xor    edx,edx
c001b535:	f7 f3                	div    ebx
c001b537:	31 db                	xor    ebx,ebx
c001b539:	52                   	push   edx
c001b53a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b53e:	57                   	push   edi
c001b53f:	68 05 be 02 c0       	push   0xc002be05
c001b544:	e8 6e 7a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001b549:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b54d:	89 f8                	mov    eax,edi
c001b54f:	31 c9                	xor    ecx,ecx
c001b551:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b555:	88 c1                	mov    cl,al
c001b557:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b55d:	88 d5                	mov    ch,dl
c001b55f:	c1 e0 10             	shl    eax,0x10
c001b562:	0f b7 d1             	movzx  edx,cx
c001b565:	09 c2                	or     edx,eax
c001b567:	89 d8                	mov    eax,ebx
c001b569:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b56e:	09 f0                	or     eax,esi
c001b570:	89 c3                	mov    ebx,eax
c001b572:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b576:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b57a:	83 c4 18             	add    esp,0x18
c001b57d:	53                   	push   ebx
c001b57e:	52                   	push   edx
c001b57f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b583:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b587:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b58b:	e8 0b 8a ff ff       	call   c0013f9b <datetimeToSeconds(datetime_t)>
c001b590:	83 c4 0c             	add    esp,0xc
c001b593:	52                   	push   edx
c001b594:	50                   	push   eax
c001b595:	56                   	push   esi
c001b596:	e8 87 8b ff ff       	call   c0014122 <secondsToDatetime(unsigned long long)>
c001b59b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b59f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5a3:	51                   	push   ecx
c001b5a4:	89 d6                	mov    esi,edx
c001b5a6:	51                   	push   ecx
c001b5a7:	c1 ee 10             	shr    esi,0x10
c001b5aa:	89 f3                	mov    ebx,esi
c001b5ac:	0f b6 f3             	movzx  esi,bl
c001b5af:	56                   	push   esi
c001b5b0:	0f b6 f6             	movzx  esi,dh
c001b5b3:	0f b6 d2             	movzx  edx,dl
c001b5b6:	56                   	push   esi
c001b5b7:	52                   	push   edx
c001b5b8:	89 c2                	mov    edx,eax
c001b5ba:	c1 ea 10             	shr    edx,0x10
c001b5bd:	52                   	push   edx
c001b5be:	0f b6 d4             	movzx  edx,ah
c001b5c1:	0f b6 c0             	movzx  eax,al
c001b5c4:	52                   	push   edx
c001b5c5:	50                   	push   eax
c001b5c6:	68 21 be 02 c0       	push   0xc002be21
c001b5cb:	e8 e7 79 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001b5d0:	83 c4 2c             	add    esp,0x2c
c001b5d3:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001b5d8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5e0:	53                   	push   ebx
c001b5e1:	51                   	push   ecx
c001b5e2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5e8:	e8 d5 8a ff ff       	call   c00140c2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5ed:	83 f0 01             	xor    eax,0x1
c001b5f0:	31 d2                	xor    edx,edx
c001b5f2:	0f b6 c0             	movzx  eax,al
c001b5f5:	83 c4 3c             	add    esp,0x3c
c001b5f8:	5b                   	pop    ebx
c001b5f9:	5e                   	pop    esi
c001b5fa:	5f                   	pop    edi
c001b5fb:	5d                   	pop    ebp
c001b5fc:	c3                   	ret    

c001b5fd <Sys::timezone(regs*)>:
c001b5fd:	53                   	push   ebx
c001b5fe:	83 ec 08             	sub    esp,0x8
c001b601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b605:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b609:	75 17                	jne    c001b622 <Sys::timezone(regs*)+0x25>
c001b60b:	83 ec 0c             	sub    esp,0xc
c001b60e:	68 3d be 02 c0       	push   0xc002be3d
c001b613:	e8 9f 79 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001b618:	83 c8 ff             	or     eax,0xffffffff
c001b61b:	83 c4 10             	add    esp,0x10
c001b61e:	89 c2                	mov    edx,eax
c001b620:	eb 20                	jmp    c001b642 <Sys::timezone(regs*)+0x45>
c001b622:	83 ec 0c             	sub    esp,0xc
c001b625:	68 75 be 02 c0       	push   0xc002be75
c001b62a:	e8 88 79 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001b62f:	58                   	pop    eax
c001b630:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b633:	e8 ec 87 ff ff       	call   c0013e24 <User::loadClockSettings(int)>
c001b638:	83 c4 10             	add    esp,0x10
c001b63b:	b8 01 00 00 00       	mov    eax,0x1
c001b640:	31 d2                	xor    edx,edx
c001b642:	83 c4 08             	add    esp,0x8
c001b645:	5b                   	pop    ebx
c001b646:	c3                   	ret    

c001b647 <Sys::write(regs*)>:
c001b647:	57                   	push   edi
c001b648:	56                   	push   esi
c001b649:	53                   	push   ebx
c001b64a:	83 ec 10             	sub    esp,0x10
c001b64d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b651:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b654:	83 f8 02             	cmp    eax,0x2
c001b657:	77 10                	ja     c001b669 <Sys::write(regs*)+0x22>
c001b659:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b65e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b661:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b667:	eb 0e                	jmp    c001b677 <Sys::write(regs*)+0x30>
c001b669:	83 ec 0c             	sub    esp,0xc
c001b66c:	50                   	push   eax
c001b66d:	e8 b7 63 ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001b672:	83 c4 10             	add    esp,0x10
c001b675:	89 c1                	mov    ecx,eax
c001b677:	83 c8 ff             	or     eax,0xffffffff
c001b67a:	85 c9                	test   ecx,ecx
c001b67c:	89 c2                	mov    edx,eax
c001b67e:	74 28                	je     c001b6a8 <Sys::write(regs*)+0x61>
c001b680:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b688:	31 ff                	xor    edi,edi
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b68f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b693:	52                   	push   edx
c001b694:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b697:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b69a:	57                   	push   edi
c001b69b:	56                   	push   esi
c001b69c:	51                   	push   ecx
c001b69d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6a4:	83 c4 20             	add    esp,0x20
c001b6a7:	99                   	cdq    
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	5b                   	pop    ebx
c001b6ac:	5e                   	pop    esi
c001b6ad:	5f                   	pop    edi
c001b6ae:	c3                   	ret    

c001b6af <Sys::wsbe(regs*)>:
c001b6af:	57                   	push   edi
c001b6b0:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6b5:	56                   	push   esi
c001b6b6:	be b4 be 02 c0       	mov    esi,0xc002beb4
c001b6bb:	53                   	push   ebx
c001b6bc:	83 ec 30             	sub    esp,0x30
c001b6bf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6c3:	fc                   	cld    
c001b6c4:	83 ec 0c             	sub    esp,0xc
c001b6c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6c9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6d5:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6db:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6dd:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6e0:	57                   	push   edi
c001b6e1:	e8 ae 50 fe ff       	call   c0000794 <strlen>
c001b6e6:	5a                   	pop    edx
c001b6e7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6eb:	52                   	push   edx
c001b6ec:	31 d2                	xor    edx,edx
c001b6ee:	57                   	push   edi
c001b6ef:	52                   	push   edx
c001b6f0:	50                   	push   eax
c001b6f1:	56                   	push   esi
c001b6f2:	ff d3                	call   ebx
c001b6f4:	83 c4 14             	add    esp,0x14
c001b6f7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6fb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6fe:	e8 9a 31 00 00       	call   c001e89d <terminateTask(int)>
c001b703:	83 c4 40             	add    esp,0x40
c001b706:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b70b:	5b                   	pop    ebx
c001b70c:	31 d2                	xor    edx,edx
c001b70e:	5e                   	pop    esi
c001b70f:	5f                   	pop    edi
c001b710:	c3                   	ret    

c001b711 <Sys::yield(regs*)>:
c001b711:	57                   	push   edi
c001b712:	56                   	push   esi
c001b713:	53                   	push   ebx
c001b714:	e8 41 27 00 00       	call   c001de5a <lockScheduler()>
c001b719:	e8 78 2a 00 00       	call   c001e196 <schedule()>
c001b71e:	e8 39 27 00 00       	call   c001de5c <unlockScheduler()>
c001b723:	8b 35 70 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb70
c001b729:	8b 3d 74 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb74
c001b72f:	89 f0                	mov    eax,esi
c001b731:	89 fb                	mov    ebx,edi
c001b733:	89 f1                	mov    ecx,esi
c001b735:	c1 e0 07             	shl    eax,0x7
c001b738:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b73c:	25 80 30 0f 00       	and    eax,0xf3080
c001b741:	c1 eb 17             	shr    ebx,0x17
c001b744:	31 c8                	xor    eax,ecx
c001b746:	89 da                	mov    edx,ebx
c001b748:	5b                   	pop    ebx
c001b749:	5e                   	pop    esi
c001b74a:	5f                   	pop    edi
c001b74b:	c3                   	ret    

c001b74c <sysCallSeekDir(regs*)>:
c001b74c:	31 c0                	xor    eax,eax
c001b74e:	31 d2                	xor    edx,edx
c001b750:	c3                   	ret    

c001b751 <sysCallTellDir(regs*)>:
c001b751:	31 c0                	xor    eax,eax
c001b753:	31 d2                	xor    edx,edx
c001b755:	c3                   	ret    

c001b756 <sysCallVerify(regs*)>:
c001b756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b75a:	31 d2                	xor    edx,edx
c001b75c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b75f:	c3                   	ret    

c001b760 <sysFormatDisk(regs*)>:
c001b760:	56                   	push   esi
c001b761:	53                   	push   ebx
c001b762:	53                   	push   ebx
c001b763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b767:	8b 1d 70 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e670
c001b76d:	eb 25                	jmp    c001b794 <sysFormatDisk(regs*)+0x34>
c001b76f:	83 ec 0c             	sub    esp,0xc
c001b772:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b775:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b777:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b77a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b77d:	50                   	push   eax
c001b77e:	ff 34 85 00 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1500]
c001b785:	53                   	push   ebx
c001b786:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b789:	83 c4 20             	add    esp,0x20
c001b78c:	83 f8 08             	cmp    eax,0x8
c001b78f:	75 12                	jne    c001b7a3 <sysFormatDisk(regs*)+0x43>
c001b791:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b794:	85 db                	test   ebx,ebx
c001b796:	75 d7                	jne    c001b76f <sysFormatDisk(regs*)+0xf>
c001b798:	59                   	pop    ecx
c001b799:	b8 03 00 00 00       	mov    eax,0x3
c001b79e:	31 d2                	xor    edx,edx
c001b7a0:	5b                   	pop    ebx
c001b7a1:	5e                   	pop    esi
c001b7a2:	c3                   	ret    
c001b7a3:	85 c0                	test   eax,eax
c001b7a5:	74 1b                	je     c001b7c2 <sysFormatDisk(regs*)+0x62>
c001b7a7:	83 f8 09             	cmp    eax,0x9
c001b7aa:	74 0b                	je     c001b7b7 <sysFormatDisk(regs*)+0x57>
c001b7ac:	59                   	pop    ecx
c001b7ad:	b8 02 00 00 00       	mov    eax,0x2
c001b7b2:	31 d2                	xor    edx,edx
c001b7b4:	5b                   	pop    ebx
c001b7b5:	5e                   	pop    esi
c001b7b6:	c3                   	ret    
c001b7b7:	59                   	pop    ecx
c001b7b8:	b8 01 00 00 00       	mov    eax,0x1
c001b7bd:	31 d2                	xor    edx,edx
c001b7bf:	5b                   	pop    ebx
c001b7c0:	5e                   	pop    esi
c001b7c1:	c3                   	ret    
c001b7c2:	59                   	pop    ecx
c001b7c3:	31 c0                	xor    eax,eax
c001b7c5:	31 d2                	xor    edx,edx
c001b7c7:	5b                   	pop    ebx
c001b7c8:	5e                   	pop    esi
c001b7c9:	c3                   	ret    

c001b7ca <sysSetDiskVolumeLabel(regs*)>:
c001b7ca:	56                   	push   esi
c001b7cb:	53                   	push   ebx
c001b7cc:	53                   	push   ebx
c001b7cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7d4:	83 f8 19             	cmp    eax,0x19
c001b7d7:	77 29                	ja     c001b802 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7d9:	8b 0c 85 00 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1500]
c001b7e0:	85 c9                	test   ecx,ecx
c001b7e2:	74 1e                	je     c001b802 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7e4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7e7:	85 d2                	test   edx,edx
c001b7e9:	74 17                	je     c001b802 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7eb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7f1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7f3:	52                   	push   edx
c001b7f4:	50                   	push   eax
c001b7f5:	51                   	push   ecx
c001b7f6:	53                   	push   ebx
c001b7f7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7fa:	83 c4 10             	add    esp,0x10
c001b7fd:	99                   	cdq    
c001b7fe:	59                   	pop    ecx
c001b7ff:	5b                   	pop    ebx
c001b800:	5e                   	pop    esi
c001b801:	c3                   	ret    
c001b802:	59                   	pop    ecx
c001b803:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b808:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b80d:	5b                   	pop    ebx
c001b80e:	5e                   	pop    esi
c001b80f:	c3                   	ret    

c001b810 <sysGetDiskVolumeLabel(regs*)>:
c001b810:	57                   	push   edi
c001b811:	56                   	push   esi
c001b812:	53                   	push   ebx
c001b813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b817:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b81a:	83 fa 19             	cmp    edx,0x19
c001b81d:	77 34                	ja     c001b853 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b81f:	8b 0c 95 00 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1500]
c001b826:	85 c9                	test   ecx,ecx
c001b828:	74 29                	je     c001b853 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b82a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b82d:	85 db                	test   ebx,ebx
c001b82f:	74 22                	je     c001b853 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b831:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b834:	85 c0                	test   eax,eax
c001b836:	74 1b                	je     c001b853 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b838:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b83e:	83 ec 0c             	sub    esp,0xc
c001b841:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b843:	50                   	push   eax
c001b844:	53                   	push   ebx
c001b845:	52                   	push   edx
c001b846:	51                   	push   ecx
c001b847:	56                   	push   esi
c001b848:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b84b:	83 c4 20             	add    esp,0x20
c001b84e:	99                   	cdq    
c001b84f:	5b                   	pop    ebx
c001b850:	5e                   	pop    esi
c001b851:	5f                   	pop    edi
c001b852:	c3                   	ret    
c001b853:	5b                   	pop    ebx
c001b854:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b859:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b85e:	5e                   	pop    esi
c001b85f:	5f                   	pop    edi
c001b860:	c3                   	ret    

c001b861 <sysShutdown(regs*)>:
c001b861:	83 ec 0c             	sub    esp,0xc
c001b864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b868:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b86b:	85 c0                	test   eax,eax
c001b86d:	74 18                	je     c001b887 <sysShutdown(regs*)+0x26>
c001b86f:	83 f8 01             	cmp    eax,0x1
c001b872:	74 38                	je     c001b8ac <sysShutdown(regs*)+0x4b>
c001b874:	83 f8 02             	cmp    eax,0x2
c001b877:	74 24                	je     c001b89d <sysShutdown(regs*)+0x3c>
c001b879:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b87e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b883:	83 c4 0c             	add    esp,0xc
c001b886:	c3                   	ret    
c001b887:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001b88c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b88e:	6a 00                	push   0x0
c001b890:	6a 00                	push   0x0
c001b892:	6a 00                	push   0x0
c001b894:	50                   	push   eax
c001b895:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b898:	83 c4 10             	add    esp,0x10
c001b89b:	eb dc                	jmp    c001b879 <sysShutdown(regs*)+0x18>
c001b89d:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001b8a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8a4:	6a 00                	push   0x0
c001b8a6:	6a 00                	push   0x0
c001b8a8:	6a 01                	push   0x1
c001b8aa:	eb e8                	jmp    c001b894 <sysShutdown(regs*)+0x33>
c001b8ac:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001b8b1:	85 c0                	test   eax,eax
c001b8b3:	74 02                	je     c001b8b7 <sysShutdown(regs*)+0x56>
c001b8b5:	ff d0                	call   eax
c001b8b7:	31 c0                	xor    eax,eax
c001b8b9:	31 d2                	xor    edx,edx
c001b8bb:	83 c4 0c             	add    esp,0xc
c001b8be:	c3                   	ret    

c001b8bf <sysCallRealpath(regs*)>:
c001b8bf:	83 ec 0c             	sub    esp,0xc
c001b8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8c9:	85 d2                	test   edx,edx
c001b8cb:	74 07                	je     c001b8d4 <sysCallRealpath(regs*)+0x15>
c001b8cd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8d0:	85 c0                	test   eax,eax
c001b8d2:	75 0b                	jne    c001b8df <sysCallRealpath(regs*)+0x20>
c001b8d4:	b8 01 00 00 00       	mov    eax,0x1
c001b8d9:	31 d2                	xor    edx,edx
c001b8db:	83 c4 0c             	add    esp,0xc
c001b8de:	c3                   	ret    
c001b8df:	51                   	push   ecx
c001b8e0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8e6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8e9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8ef:	51                   	push   ecx
c001b8f0:	52                   	push   edx
c001b8f1:	50                   	push   eax
c001b8f2:	e8 6f 7a ff ff       	call   c0013366 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8f7:	83 c4 10             	add    esp,0x10
c001b8fa:	31 c0                	xor    eax,eax
c001b8fc:	31 d2                	xor    edx,edx
c001b8fe:	83 c4 0c             	add    esp,0xc
c001b901:	c3                   	ret    

c001b902 <sysCallGetArgc(regs*)>:
c001b902:	83 ec 14             	sub    esp,0x14
c001b905:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b90a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b90d:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b913:	68 e0 be 02 c0       	push   0xc002bee0
c001b918:	e8 9a 76 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001b91d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b922:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b925:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b92b:	83 c4 1c             	add    esp,0x1c
c001b92e:	99                   	cdq    
c001b92f:	c3                   	ret    

c001b930 <sysCallReadDir(regs*)>:
c001b930:	53                   	push   ebx
c001b931:	83 ec 18             	sub    esp,0x18
c001b934:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b93b:	83 f8 02             	cmp    eax,0x2
c001b93e:	76 53                	jbe    c001b993 <sysCallReadDir(regs*)+0x63>
c001b940:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b943:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b949:	77 4f                	ja     c001b99a <sysCallReadDir(regs*)+0x6a>
c001b94b:	83 ec 0c             	sub    esp,0xc
c001b94e:	50                   	push   eax
c001b94f:	e8 d5 60 ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	85 c0                	test   eax,eax
c001b959:	74 50                	je     c001b9ab <sysCallReadDir(regs*)+0x7b>
c001b95b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b963:	83 ec 0c             	sub    esp,0xc
c001b966:	8b 10                	mov    edx,DWORD PTR [eax]
c001b968:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b96c:	51                   	push   ecx
c001b96d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b970:	6a 00                	push   0x0
c001b972:	68 10 01 00 00       	push   0x110
c001b977:	50                   	push   eax
c001b978:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b97b:	83 c4 20             	add    esp,0x20
c001b97e:	85 c0                	test   eax,eax
c001b980:	74 38                	je     c001b9ba <sysCallReadDir(regs*)+0x8a>
c001b982:	83 f8 07             	cmp    eax,0x7
c001b985:	74 0c                	je     c001b993 <sysCallReadDir(regs*)+0x63>
c001b987:	b8 02 00 00 00       	mov    eax,0x2
c001b98c:	31 d2                	xor    edx,edx
c001b98e:	83 c4 18             	add    esp,0x18
c001b991:	5b                   	pop    ebx
c001b992:	c3                   	ret    
c001b993:	b8 01 00 00 00       	mov    eax,0x1
c001b998:	eb f2                	jmp    c001b98c <sysCallReadDir(regs*)+0x5c>
c001b99a:	83 ec 08             	sub    esp,0x8
c001b99d:	52                   	push   edx
c001b99e:	68 f8 bf 02 c0       	push   0xc002bff8
c001b9a3:	e8 0f 76 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001b9a8:	83 c4 10             	add    esp,0x10
c001b9ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9b5:	83 c4 18             	add    esp,0x18
c001b9b8:	5b                   	pop    ebx
c001b9b9:	c3                   	ret    
c001b9ba:	31 c0                	xor    eax,eax
c001b9bc:	eb ce                	jmp    c001b98c <sysCallReadDir(regs*)+0x5c>

c001b9be <sysCallIsATTY(regs*)>:
c001b9be:	83 ec 0c             	sub    esp,0xc
c001b9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9c8:	83 f8 02             	cmp    eax,0x2
c001b9cb:	76 07                	jbe    c001b9d4 <sysCallIsATTY(regs*)+0x16>
c001b9cd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9d2:	75 26                	jne    c001b9fa <sysCallIsATTY(regs*)+0x3c>
c001b9d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9e2:	85 c0                	test   eax,eax
c001b9e4:	74 24                	je     c001ba0a <sysCallIsATTY(regs*)+0x4c>
c001b9e6:	83 ec 0c             	sub    esp,0xc
c001b9e9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9eb:	50                   	push   eax
c001b9ec:	ff 12                	call   DWORD PTR [edx]
c001b9ee:	31 d2                	xor    edx,edx
c001b9f0:	0f b6 c0             	movzx  eax,al
c001b9f3:	83 c4 10             	add    esp,0x10
c001b9f6:	83 c4 0c             	add    esp,0xc
c001b9f9:	c3                   	ret    
c001b9fa:	83 ec 0c             	sub    esp,0xc
c001b9fd:	50                   	push   eax
c001b9fe:	e8 26 60 ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	85 c0                	test   eax,eax
c001ba08:	75 dc                	jne    c001b9e6 <sysCallIsATTY(regs*)+0x28>
c001ba0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba14:	83 c4 0c             	add    esp,0xc
c001ba17:	c3                   	ret    

c001ba18 <sysCallSeek(regs*)>:
c001ba18:	53                   	push   ebx
c001ba19:	83 ec 08             	sub    esp,0x8
c001ba1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba20:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba23:	83 f8 02             	cmp    eax,0x2
c001ba26:	76 4a                	jbe    c001ba72 <sysCallSeek(regs*)+0x5a>
c001ba28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba2d:	77 32                	ja     c001ba61 <sysCallSeek(regs*)+0x49>
c001ba2f:	83 ec 0c             	sub    esp,0xc
c001ba32:	50                   	push   eax
c001ba33:	e8 f1 5f ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001ba38:	83 c4 0c             	add    esp,0xc
c001ba3b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba3e:	31 db                	xor    ebx,ebx
c001ba40:	53                   	push   ebx
c001ba41:	51                   	push   ecx
c001ba42:	50                   	push   eax
c001ba43:	e8 ea 7b ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001ba48:	83 c4 10             	add    esp,0x10
c001ba4b:	85 c0                	test   eax,eax
c001ba4d:	0f 95 c0             	setne  al
c001ba50:	31 d2                	xor    edx,edx
c001ba52:	0f b6 c0             	movzx  eax,al
c001ba55:	f7 d8                	neg    eax
c001ba57:	83 d2 00             	adc    edx,0x0
c001ba5a:	83 c4 08             	add    esp,0x8
c001ba5d:	f7 da                	neg    edx
c001ba5f:	5b                   	pop    ebx
c001ba60:	c3                   	ret    
c001ba61:	83 ec 08             	sub    esp,0x8
c001ba64:	50                   	push   eax
c001ba65:	68 eb be 02 c0       	push   0xc002beeb
c001ba6a:	e8 48 75 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001ba6f:	83 c4 10             	add    esp,0x10
c001ba72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba77:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba7c:	83 c4 08             	add    esp,0x8
c001ba7f:	5b                   	pop    ebx
c001ba80:	c3                   	ret    

c001ba81 <sysCallTell(regs*)>:
c001ba81:	53                   	push   ebx
c001ba82:	83 ec 08             	sub    esp,0x8
c001ba85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba8c:	83 f8 02             	cmp    eax,0x2
c001ba8f:	76 5e                	jbe    c001baef <sysCallTell(regs*)+0x6e>
c001ba91:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba96:	77 2d                	ja     c001bac5 <sysCallTell(regs*)+0x44>
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	50                   	push   eax
c001ba9c:	e8 88 5f ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001baa1:	5a                   	pop    edx
c001baa2:	59                   	pop    ecx
c001baa3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001baa6:	50                   	push   eax
c001baa7:	e8 dc 7b ff ff       	call   c0013688 <File::tell(unsigned long long*)>
c001baac:	83 c4 10             	add    esp,0x10
c001baaf:	85 c0                	test   eax,eax
c001bab1:	0f 95 c0             	setne  al
c001bab4:	31 d2                	xor    edx,edx
c001bab6:	0f b6 c0             	movzx  eax,al
c001bab9:	f7 d8                	neg    eax
c001babb:	83 d2 00             	adc    edx,0x0
c001babe:	83 c4 08             	add    esp,0x8
c001bac1:	f7 da                	neg    edx
c001bac3:	5b                   	pop    ebx
c001bac4:	c3                   	ret    
c001bac5:	83 ec 08             	sub    esp,0x8
c001bac8:	50                   	push   eax
c001bac9:	68 05 bf 02 c0       	push   0xc002bf05
c001bace:	e8 e4 74 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001bad3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bad6:	83 c4 10             	add    esp,0x10
c001bad9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001badf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bae6:	31 d2                	xor    edx,edx
c001bae8:	31 c0                	xor    eax,eax
c001baea:	83 c4 08             	add    esp,0x8
c001baed:	5b                   	pop    ebx
c001baee:	c3                   	ret    
c001baef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baf4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baf9:	83 c4 08             	add    esp,0x8
c001bafc:	5b                   	pop    ebx
c001bafd:	c3                   	ret    

c001bafe <sysCallSize(regs*)>:
c001bafe:	53                   	push   ebx
c001baff:	83 ec 18             	sub    esp,0x18
c001bb02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb09:	83 f8 02             	cmp    eax,0x2
c001bb0c:	76 64                	jbe    c001bb72 <sysCallSize(regs*)+0x74>
c001bb0e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb13:	77 33                	ja     c001bb48 <sysCallSize(regs*)+0x4a>
c001bb15:	83 ec 0c             	sub    esp,0xc
c001bb18:	50                   	push   eax
c001bb19:	e8 0b 5f ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bb1e:	83 c4 0c             	add    esp,0xc
c001bb21:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb25:	52                   	push   edx
c001bb26:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb29:	50                   	push   eax
c001bb2a:	e8 f1 7c ff ff       	call   c0013820 <File::stat(unsigned long long*, bool*)>
c001bb2f:	83 c4 10             	add    esp,0x10
c001bb32:	85 c0                	test   eax,eax
c001bb34:	0f 95 c0             	setne  al
c001bb37:	31 d2                	xor    edx,edx
c001bb39:	0f b6 c0             	movzx  eax,al
c001bb3c:	f7 d8                	neg    eax
c001bb3e:	83 d2 00             	adc    edx,0x0
c001bb41:	83 c4 18             	add    esp,0x18
c001bb44:	f7 da                	neg    edx
c001bb46:	5b                   	pop    ebx
c001bb47:	c3                   	ret    
c001bb48:	83 ec 08             	sub    esp,0x8
c001bb4b:	50                   	push   eax
c001bb4c:	68 1f bf 02 c0       	push   0xc002bf1f
c001bb51:	e8 61 74 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001bb56:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb59:	83 c4 10             	add    esp,0x10
c001bb5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb69:	31 d2                	xor    edx,edx
c001bb6b:	31 c0                	xor    eax,eax
c001bb6d:	83 c4 18             	add    esp,0x18
c001bb70:	5b                   	pop    ebx
c001bb71:	c3                   	ret    
c001bb72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb77:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb7c:	83 c4 18             	add    esp,0x18
c001bb7f:	5b                   	pop    ebx
c001bb80:	c3                   	ret    

c001bb81 <sysCallSizeFromFilename(regs*)>:
c001bb81:	57                   	push   edi
c001bb82:	56                   	push   esi
c001bb83:	53                   	push   ebx
c001bb84:	83 ec 20             	sub    esp,0x20
c001bb87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb8b:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb8e:	83 fb 02             	cmp    ebx,0x2
c001bb91:	0f 86 99 00 00 00    	jbe    c001bc30 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb97:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb9d:	77 65                	ja     c001bc04 <sysCallSizeFromFilename(regs*)+0x83>
c001bb9f:	83 ec 0c             	sub    esp,0xc
c001bba2:	68 14 01 00 00       	push   0x114
c001bba7:	e8 97 3c ff ff       	call   c000f843 <malloc>
c001bbac:	83 c4 0c             	add    esp,0xc
c001bbaf:	89 c6                	mov    esi,eax
c001bbb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbb6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbb9:	53                   	push   ebx
c001bbba:	56                   	push   esi
c001bbbb:	e8 50 79 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001bbc0:	83 c4 0c             	add    esp,0xc
c001bbc3:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbc7:	50                   	push   eax
c001bbc8:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbcb:	56                   	push   esi
c001bbcc:	e8 4f 7c ff ff       	call   c0013820 <File::stat(unsigned long long*, bool*)>
c001bbd1:	83 c4 10             	add    esp,0x10
c001bbd4:	85 f6                	test   esi,esi
c001bbd6:	74 14                	je     c001bbec <sysCallSizeFromFilename(regs*)+0x6b>
c001bbd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbdc:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbde:	83 ec 0c             	sub    esp,0xc
c001bbe1:	56                   	push   esi
c001bbe2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbe5:	83 c4 10             	add    esp,0x10
c001bbe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbec:	85 c0                	test   eax,eax
c001bbee:	0f 95 c0             	setne  al
c001bbf1:	31 d2                	xor    edx,edx
c001bbf3:	0f b6 c0             	movzx  eax,al
c001bbf6:	f7 d8                	neg    eax
c001bbf8:	83 d2 00             	adc    edx,0x0
c001bbfb:	83 c4 20             	add    esp,0x20
c001bbfe:	f7 da                	neg    edx
c001bc00:	5b                   	pop    ebx
c001bc01:	5e                   	pop    esi
c001bc02:	5f                   	pop    edi
c001bc03:	c3                   	ret    
c001bc04:	83 ec 08             	sub    esp,0x8
c001bc07:	53                   	push   ebx
c001bc08:	68 1f bf 02 c0       	push   0xc002bf1f
c001bc0d:	e8 a5 73 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001bc12:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc25:	31 d2                	xor    edx,edx
c001bc27:	83 c4 20             	add    esp,0x20
c001bc2a:	31 c0                	xor    eax,eax
c001bc2c:	5b                   	pop    ebx
c001bc2d:	5e                   	pop    esi
c001bc2e:	5f                   	pop    edi
c001bc2f:	c3                   	ret    
c001bc30:	83 c4 20             	add    esp,0x20
c001bc33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc38:	5b                   	pop    ebx
c001bc39:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc3e:	5e                   	pop    esi
c001bc3f:	5f                   	pop    edi
c001bc40:	c3                   	ret    

c001bc41 <sysCallClose(regs*)>:
c001bc41:	53                   	push   ebx
c001bc42:	83 ec 08             	sub    esp,0x8
c001bc45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc49:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc4c:	83 f8 02             	cmp    eax,0x2
c001bc4f:	76 50                	jbe    c001bca1 <sysCallClose(regs*)+0x60>
c001bc51:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc56:	74 58                	je     c001bcb0 <sysCallClose(regs*)+0x6f>
c001bc58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc5d:	74 60                	je     c001bcbf <sysCallClose(regs*)+0x7e>
c001bc5f:	77 2f                	ja     c001bc90 <sysCallClose(regs*)+0x4f>
c001bc61:	83 ec 0c             	sub    esp,0xc
c001bc64:	50                   	push   eax
c001bc65:	e8 bf 5d ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bc6a:	89 c3                	mov    ebx,eax
c001bc6c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc6f:	e8 5e 79 ff ff       	call   c00135d2 <File::close()>
c001bc74:	83 c4 10             	add    esp,0x10
c001bc77:	85 db                	test   ebx,ebx
c001bc79:	74 0c                	je     c001bc87 <sysCallClose(regs*)+0x46>
c001bc7b:	83 ec 0c             	sub    esp,0xc
c001bc7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc80:	53                   	push   ebx
c001bc81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc84:	83 c4 10             	add    esp,0x10
c001bc87:	31 c0                	xor    eax,eax
c001bc89:	31 d2                	xor    edx,edx
c001bc8b:	83 c4 08             	add    esp,0x8
c001bc8e:	5b                   	pop    ebx
c001bc8f:	c3                   	ret    
c001bc90:	83 ec 08             	sub    esp,0x8
c001bc93:	50                   	push   eax
c001bc94:	68 1c c0 02 c0       	push   0xc002c01c
c001bc99:	e8 19 73 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001bc9e:	83 c4 10             	add    esp,0x10
c001bca1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcab:	83 c4 08             	add    esp,0x8
c001bcae:	5b                   	pop    ebx
c001bcaf:	c3                   	ret    
c001bcb0:	83 ec 0c             	sub    esp,0xc
c001bcb3:	68 3a bf 02 c0       	push   0xc002bf3a
c001bcb8:	e8 fa 72 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001bcbd:	eb c5                	jmp    c001bc84 <sysCallClose(regs*)+0x43>
c001bcbf:	83 ec 0c             	sub    esp,0xc
c001bcc2:	68 48 bf 02 c0       	push   0xc002bf48
c001bcc7:	eb ef                	jmp    c001bcb8 <sysCallClose(regs*)+0x77>

c001bcc9 <sysCallOpenDir(regs*)>:
c001bcc9:	56                   	push   esi
c001bcca:	53                   	push   ebx
c001bccb:	53                   	push   ebx
c001bccc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcd0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcd3:	85 f6                	test   esi,esi
c001bcd5:	74 59                	je     c001bd30 <sysCallOpenDir(regs*)+0x67>
c001bcd7:	83 ec 0c             	sub    esp,0xc
c001bcda:	68 14 01 00 00       	push   0x114
c001bcdf:	e8 5f 3b ff ff       	call   c000f843 <malloc>
c001bce4:	83 c4 0c             	add    esp,0xc
c001bce7:	89 c6                	mov    esi,eax
c001bce9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcf1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcf4:	56                   	push   esi
c001bcf5:	e8 c2 7c ff ff       	call   c00139bc <Directory::Directory(char const*, Process*)>
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	85 f6                	test   esi,esi
c001bcff:	74 2f                	je     c001bd30 <sysCallOpenDir(regs*)+0x67>
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	56                   	push   esi
c001bd05:	e8 16 7d ff ff       	call   c0013a20 <Directory::open()>
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	85 c0                	test   eax,eax
c001bd0f:	75 1f                	jne    c001bd30 <sysCallOpenDir(regs*)+0x67>
c001bd11:	83 ec 0c             	sub    esp,0xc
c001bd14:	56                   	push   esi
c001bd15:	e8 1a 5a ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001bd1a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	89 02                	mov    DWORD PTR [edx],eax
c001bd22:	c1 f8 1f             	sar    eax,0x1f
c001bd25:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd28:	31 c0                	xor    eax,eax
c001bd2a:	59                   	pop    ecx
c001bd2b:	31 d2                	xor    edx,edx
c001bd2d:	5b                   	pop    ebx
c001bd2e:	5e                   	pop    esi
c001bd2f:	c3                   	ret    
c001bd30:	59                   	pop    ecx
c001bd31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd36:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd3b:	5b                   	pop    ebx
c001bd3c:	5e                   	pop    esi
c001bd3d:	c3                   	ret    

c001bd3e <sysCallCloseDir(regs*)>:
c001bd3e:	53                   	push   ebx
c001bd3f:	83 ec 08             	sub    esp,0x8
c001bd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd49:	83 f8 02             	cmp    eax,0x2
c001bd4c:	76 47                	jbe    c001bd95 <sysCallCloseDir(regs*)+0x57>
c001bd4e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd53:	77 2f                	ja     c001bd84 <sysCallCloseDir(regs*)+0x46>
c001bd55:	83 ec 0c             	sub    esp,0xc
c001bd58:	50                   	push   eax
c001bd59:	e8 cb 5c ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bd5e:	89 c3                	mov    ebx,eax
c001bd60:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd63:	e8 14 7d ff ff       	call   c0013a7c <Directory::close()>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	85 db                	test   ebx,ebx
c001bd6d:	74 0c                	je     c001bd7b <sysCallCloseDir(regs*)+0x3d>
c001bd6f:	83 ec 0c             	sub    esp,0xc
c001bd72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd74:	53                   	push   ebx
c001bd75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd78:	83 c4 10             	add    esp,0x10
c001bd7b:	31 c0                	xor    eax,eax
c001bd7d:	31 d2                	xor    edx,edx
c001bd7f:	83 c4 08             	add    esp,0x8
c001bd82:	5b                   	pop    ebx
c001bd83:	c3                   	ret    
c001bd84:	83 ec 08             	sub    esp,0x8
c001bd87:	50                   	push   eax
c001bd88:	68 44 c0 02 c0       	push   0xc002c044
c001bd8d:	e8 25 72 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001bd92:	83 c4 10             	add    esp,0x10
c001bd95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd9f:	83 c4 08             	add    esp,0x8
c001bda2:	5b                   	pop    ebx
c001bda3:	c3                   	ret    

c001bda4 <sysCallMakeDir(regs*)>:
c001bda4:	56                   	push   esi
c001bda5:	53                   	push   ebx
c001bda6:	83 ec 10             	sub    esp,0x10
c001bda9:	68 14 01 00 00       	push   0x114
c001bdae:	e8 90 3a ff ff       	call   c000f843 <malloc>
c001bdb3:	83 c4 0c             	add    esp,0xc
c001bdb6:	89 c3                	mov    ebx,eax
c001bdb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdbd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdc4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdc7:	53                   	push   ebx
c001bdc8:	e8 ef 7b ff ff       	call   c00139bc <Directory::Directory(char const*, Process*)>
c001bdcd:	83 c4 10             	add    esp,0x10
c001bdd0:	85 db                	test   ebx,ebx
c001bdd2:	74 32                	je     c001be06 <sysCallMakeDir(regs*)+0x62>
c001bdd4:	83 ec 0c             	sub    esp,0xc
c001bdd7:	53                   	push   ebx
c001bdd8:	e8 23 7e ff ff       	call   c0013c00 <Directory::create()>
c001bddd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bde0:	89 c6                	mov    esi,eax
c001bde2:	e8 95 7c ff ff       	call   c0013a7c <Directory::close()>
c001bde7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bde9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	31 c0                	xor    eax,eax
c001bdf4:	59                   	pop    ecx
c001bdf5:	85 f6                	test   esi,esi
c001bdf7:	5b                   	pop    ebx
c001bdf8:	0f 95 c0             	setne  al
c001bdfb:	5e                   	pop    esi
c001bdfc:	31 d2                	xor    edx,edx
c001bdfe:	f7 d8                	neg    eax
c001be00:	83 d2 00             	adc    edx,0x0
c001be03:	f7 da                	neg    edx
c001be05:	c3                   	ret    
c001be06:	59                   	pop    ecx
c001be07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be11:	5b                   	pop    ebx
c001be12:	5e                   	pop    esi
c001be13:	c3                   	ret    

c001be14 <sysCallWait(regs*)>:
c001be14:	83 ec 10             	sub    esp,0x10
c001be17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be1b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be1e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be21:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be24:	e8 e8 24 00 00       	call   c001e311 <waitTask(int, int*, int)>
c001be29:	83 c4 1c             	add    esp,0x1c
c001be2c:	99                   	cdq    
c001be2d:	c3                   	ret    

c001be2e <sysCallNotImpl(regs*)>:
c001be2e:	83 ec 18             	sub    esp,0x18
c001be31:	68 56 bf 02 c0       	push   0xc002bf56
c001be36:	e8 2a e8 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001be3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be40:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be45:	83 c4 1c             	add    esp,0x1c
c001be48:	c3                   	ret    

c001be49 <sysPanic(regs*)>:
c001be49:	83 ec 18             	sub    esp,0x18
c001be4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be50:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be53:	e8 0d e8 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001be58:	c7 04 24 70 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf70
c001be5f:	e8 01 e8 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001be64:	b8 01 00 00 00       	mov    eax,0x1
c001be69:	31 d2                	xor    edx,edx
c001be6b:	83 c4 1c             	add    esp,0x1c
c001be6e:	c3                   	ret    

c001be6f <sysCallRmdir(regs*)>:
c001be6f:	56                   	push   esi
c001be70:	53                   	push   ebx
c001be71:	83 ec 20             	sub    esp,0x20
c001be74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be78:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be7b:	68 14 01 00 00       	push   0x114
c001be80:	e8 be 39 ff ff       	call   c000f843 <malloc>
c001be85:	83 c4 0c             	add    esp,0xc
c001be88:	89 c3                	mov    ebx,eax
c001be8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be8f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be92:	56                   	push   esi
c001be93:	53                   	push   ebx
c001be94:	e8 77 76 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001be99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be9c:	e8 4b 78 ff ff       	call   c00136ec <File::unlink()>
c001bea1:	83 c4 10             	add    esp,0x10
c001bea4:	85 db                	test   ebx,ebx
c001bea6:	74 14                	je     c001bebc <sysCallRmdir(regs*)+0x4d>
c001bea8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beac:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beae:	83 ec 0c             	sub    esp,0xc
c001beb1:	53                   	push   ebx
c001beb2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beb5:	83 c4 10             	add    esp,0x10
c001beb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bebc:	85 c0                	test   eax,eax
c001bebe:	0f 95 c0             	setne  al
c001bec1:	31 d2                	xor    edx,edx
c001bec3:	0f b6 c0             	movzx  eax,al
c001bec6:	f7 d8                	neg    eax
c001bec8:	83 d2 00             	adc    edx,0x0
c001becb:	83 c4 14             	add    esp,0x14
c001bece:	f7 da                	neg    edx
c001bed0:	5b                   	pop    ebx
c001bed1:	5e                   	pop    esi
c001bed2:	c3                   	ret    

c001bed3 <sysCallUnlink(regs*)>:
c001bed3:	56                   	push   esi
c001bed4:	53                   	push   ebx
c001bed5:	83 ec 20             	sub    esp,0x20
c001bed8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bedc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bedf:	68 14 01 00 00       	push   0x114
c001bee4:	e8 5a 39 ff ff       	call   c000f843 <malloc>
c001bee9:	83 c4 0c             	add    esp,0xc
c001beec:	89 c3                	mov    ebx,eax
c001beee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bef6:	56                   	push   esi
c001bef7:	53                   	push   ebx
c001bef8:	e8 13 76 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001befd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf00:	e8 e7 77 ff ff       	call   c00136ec <File::unlink()>
c001bf05:	83 c4 10             	add    esp,0x10
c001bf08:	85 db                	test   ebx,ebx
c001bf0a:	74 14                	je     c001bf20 <sysCallUnlink(regs*)+0x4d>
c001bf0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf10:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf12:	83 ec 0c             	sub    esp,0xc
c001bf15:	53                   	push   ebx
c001bf16:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf20:	85 c0                	test   eax,eax
c001bf22:	0f 95 c0             	setne  al
c001bf25:	31 d2                	xor    edx,edx
c001bf27:	0f b6 c0             	movzx  eax,al
c001bf2a:	f7 d8                	neg    eax
c001bf2c:	83 d2 00             	adc    edx,0x0
c001bf2f:	83 c4 14             	add    esp,0x14
c001bf32:	f7 da                	neg    edx
c001bf34:	5b                   	pop    ebx
c001bf35:	5e                   	pop    esi
c001bf36:	c3                   	ret    

c001bf37 <sysCallGetArgv(regs*)>:
c001bf37:	83 ec 0c             	sub    esp,0xc
c001bf3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf3e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf41:	85 c0                	test   eax,eax
c001bf43:	78 2b                	js     c001bf70 <sysCallGetArgv(regs*)+0x39>
c001bf45:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf4b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf4e:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf54:	7d 1a                	jge    c001bf70 <sysCallGetArgv(regs*)+0x39>
c001bf56:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf5d:	85 c0                	test   eax,eax
c001bf5f:	74 17                	je     c001bf78 <sysCallGetArgv(regs*)+0x41>
c001bf61:	83 ec 08             	sub    esp,0x8
c001bf64:	50                   	push   eax
c001bf65:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf68:	e8 c7 48 fe ff       	call   c0000834 <strcpy>
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	31 c0                	xor    eax,eax
c001bf72:	31 d2                	xor    edx,edx
c001bf74:	83 c4 0c             	add    esp,0xc
c001bf77:	c3                   	ret    
c001bf78:	b8 01 00 00 00       	mov    eax,0x1
c001bf7d:	31 d2                	xor    edx,edx
c001bf7f:	83 c4 0c             	add    esp,0xc
c001bf82:	c3                   	ret    

c001bf83 <sysCallTTYName(regs*)>:
c001bf83:	56                   	push   esi
c001bf84:	53                   	push   ebx
c001bf85:	53                   	push   ebx
c001bf86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf8a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	74 5f                	je     c001bff0 <sysCallTTYName(regs*)+0x6d>
c001bf91:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf94:	83 f8 02             	cmp    eax,0x2
c001bf97:	77 3e                	ja     c001bfd7 <sysCallTTYName(regs*)+0x54>
c001bf99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfa1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfa7:	85 db                	test   ebx,ebx
c001bfa9:	74 45                	je     c001bff0 <sysCallTTYName(regs*)+0x6d>
c001bfab:	83 ec 0c             	sub    esp,0xc
c001bfae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfb0:	53                   	push   ebx
c001bfb1:	ff 10                	call   DWORD PTR [eax]
c001bfb3:	83 c4 10             	add    esp,0x10
c001bfb6:	84 c0                	test   al,al
c001bfb8:	74 41                	je     c001bffb <sysCallTTYName(regs*)+0x78>
c001bfba:	83 ec 08             	sub    esp,0x8
c001bfbd:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfc3:	53                   	push   ebx
c001bfc4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfc7:	e8 68 48 fe ff       	call   c0000834 <strcpy>
c001bfcc:	83 c4 10             	add    esp,0x10
c001bfcf:	31 c0                	xor    eax,eax
c001bfd1:	59                   	pop    ecx
c001bfd2:	31 d2                	xor    edx,edx
c001bfd4:	5b                   	pop    ebx
c001bfd5:	5e                   	pop    esi
c001bfd6:	c3                   	ret    
c001bfd7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfdc:	74 bb                	je     c001bf99 <sysCallTTYName(regs*)+0x16>
c001bfde:	83 ec 0c             	sub    esp,0xc
c001bfe1:	50                   	push   eax
c001bfe2:	e8 42 5a ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bfe7:	83 c4 10             	add    esp,0x10
c001bfea:	89 c3                	mov    ebx,eax
c001bfec:	85 db                	test   ebx,ebx
c001bfee:	75 bb                	jne    c001bfab <sysCallTTYName(regs*)+0x28>
c001bff0:	59                   	pop    ecx
c001bff1:	b8 01 00 00 00       	mov    eax,0x1
c001bff6:	31 d2                	xor    edx,edx
c001bff8:	5b                   	pop    ebx
c001bff9:	5e                   	pop    esi
c001bffa:	c3                   	ret    
c001bffb:	59                   	pop    ecx
c001bffc:	b8 02 00 00 00       	mov    eax,0x2
c001c001:	31 d2                	xor    edx,edx
c001c003:	5b                   	pop    ebx
c001c004:	5e                   	pop    esi
c001c005:	c3                   	ret    

c001c006 <sysCallUSleep(regs*)>:
c001c006:	83 ec 14             	sub    esp,0x14
c001c009:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c00e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c012:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c019:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c01c:	01 ca                	add    edx,ecx
c001c01e:	52                   	push   edx
c001c01f:	50                   	push   eax
c001c020:	e8 85 23 00 00       	call   c001e3aa <nanoSleep(unsigned long long)>
c001c025:	31 c0                	xor    eax,eax
c001c027:	31 d2                	xor    edx,edx
c001c029:	83 c4 1c             	add    esp,0x1c
c001c02c:	c3                   	ret    

c001c02d <sysCallSpawn(regs*)>:
c001c02d:	56                   	push   esi
c001c02e:	53                   	push   ebx
c001c02f:	53                   	push   ebx
c001c030:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c034:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c037:	85 f6                	test   esi,esi
c001c039:	75 08                	jne    c001c043 <sysCallSpawn(regs*)+0x16>
c001c03b:	59                   	pop    ecx
c001c03c:	31 c0                	xor    eax,eax
c001c03e:	31 d2                	xor    edx,edx
c001c040:	5b                   	pop    ebx
c001c041:	5e                   	pop    esi
c001c042:	c3                   	ret    
c001c043:	83 ec 0c             	sub    esp,0xc
c001c046:	68 3f 07 00 00       	push   0x73f
c001c04b:	e8 f3 37 ff ff       	call   c000f843 <malloc>
c001c050:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c053:	89 c6                	mov    esi,eax
c001c055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c05a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c05d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c060:	56                   	push   esi
c001c061:	e8 44 1a 00 00       	call   c001daaa <Process::Process(char const*, Process*, char**)>
c001c066:	83 c4 20             	add    esp,0x20
c001c069:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c070:	75 c9                	jne    c001c03b <sysCallSpawn(regs*)+0xe>
c001c072:	83 ec 0c             	sub    esp,0xc
c001c075:	56                   	push   esi
c001c076:	e8 f5 1f 00 00       	call   c001e070 <Process::createUserThread()>
c001c07b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c07d:	83 c4 10             	add    esp,0x10
c001c080:	99                   	cdq    
c001c081:	59                   	pop    ecx
c001c082:	5b                   	pop    ebx
c001c083:	5e                   	pop    esi
c001c084:	c3                   	ret    

c001c085 <sysCallGetEnv(regs*)>:
c001c085:	55                   	push   ebp
c001c086:	57                   	push   edi
c001c087:	56                   	push   esi
c001c088:	53                   	push   ebx
c001c089:	83 ec 28             	sub    esp,0x28
c001c08c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c090:	68 7f bf 02 c0       	push   0xc002bf7f
c001c095:	e8 1d 6f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c09a:	5f                   	pop    edi
c001c09b:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c09e:	5d                   	pop    ebp
c001c09f:	53                   	push   ebx
c001c0a0:	68 c5 c2 02 c0       	push   0xc002c2c5
c001c0a5:	e8 0d 6f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c0aa:	58                   	pop    eax
c001c0ab:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0ae:	5a                   	pop    edx
c001c0af:	57                   	push   edi
c001c0b0:	68 88 bf 02 c0       	push   0xc002bf88
c001c0b5:	e8 fd 6e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c0ba:	59                   	pop    ecx
c001c0bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0c3:	e8 b9 e4 ff ff       	call   c001a581 <Krnl::getProcessTotalEnvCount(Process*)>
c001c0c8:	5a                   	pop    edx
c001c0c9:	89 c5                	mov    ebp,eax
c001c0cb:	59                   	pop    ecx
c001c0cc:	50                   	push   eax
c001c0cd:	68 92 bf 02 c0       	push   0xc002bf92
c001c0d2:	e8 e0 6e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c0d7:	83 c4 10             	add    esp,0x10
c001c0da:	39 ef                	cmp    edi,ebp
c001c0dc:	7c 15                	jl     c001c0f3 <sysCallGetEnv(regs*)+0x6e>
c001c0de:	85 db                	test   ebx,ebx
c001c0e0:	75 0c                	jne    c001c0ee <sysCallGetEnv(regs*)+0x69>
c001c0e2:	83 c4 1c             	add    esp,0x1c
c001c0e5:	31 c0                	xor    eax,eax
c001c0e7:	5b                   	pop    ebx
c001c0e8:	31 d2                	xor    edx,edx
c001c0ea:	5e                   	pop    esi
c001c0eb:	5f                   	pop    edi
c001c0ec:	5d                   	pop    ebp
c001c0ed:	c3                   	ret    
c001c0ee:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0f1:	eb ef                	jmp    c001c0e2 <sysCallGetEnv(regs*)+0x5d>
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	68 9e bf 02 c0       	push   0xc002bf9e
c001c0fb:	e8 b7 6e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c100:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c104:	83 c4 0c             	add    esp,0xc
c001c107:	57                   	push   edi
c001c108:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c10e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c111:	50                   	push   eax
c001c112:	e8 8a e4 ff ff       	call   c001a5a1 <Krnl::getProcessEnvPair(Process*, int)>
c001c117:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c11b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c11f:	68 44 c3 02 c0       	push   0xc002c344
c001c124:	e8 8e 6e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c129:	83 c4 10             	add    esp,0x10
c001c12c:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c12f:	85 f6                	test   esi,esi
c001c131:	75 47                	jne    c001c17a <sysCallGetEnv(regs*)+0xf5>
c001c133:	83 ec 0c             	sub    esp,0xc
c001c136:	55                   	push   ebp
c001c137:	e8 58 46 fe ff       	call   c0000794 <strlen>
c001c13c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c13f:	89 c3                	mov    ebx,eax
c001c141:	e8 4e 46 fe ff       	call   c0000794 <strlen>
c001c146:	5a                   	pop    edx
c001c147:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c14b:	59                   	pop    ecx
c001c14c:	50                   	push   eax
c001c14d:	68 a1 bf 02 c0       	push   0xc002bfa1
c001c152:	e8 60 6e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c157:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c15a:	e8 35 46 fe ff       	call   c0000794 <strlen>
c001c15f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c162:	89 c3                	mov    ebx,eax
c001c164:	e8 2b 46 fe ff       	call   c0000794 <strlen>
c001c169:	83 c4 10             	add    esp,0x10
c001c16c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c170:	83 c4 1c             	add    esp,0x1c
c001c173:	31 d2                	xor    edx,edx
c001c175:	5b                   	pop    ebx
c001c176:	5e                   	pop    esi
c001c177:	5f                   	pop    edi
c001c178:	5d                   	pop    ebp
c001c179:	c3                   	ret    
c001c17a:	83 ec 0c             	sub    esp,0xc
c001c17d:	68 5e c3 02 c0       	push   0xc002c35e
c001c182:	e8 30 6e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c187:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c18a:	58                   	pop    eax
c001c18b:	5a                   	pop    edx
c001c18c:	55                   	push   ebp
c001c18d:	53                   	push   ebx
c001c18e:	e8 a1 46 fe ff       	call   c0000834 <strcpy>
c001c193:	59                   	pop    ecx
c001c194:	5e                   	pop    esi
c001c195:	68 ab bf 02 c0       	push   0xc002bfab
c001c19a:	53                   	push   ebx
c001c19b:	e8 d4 47 fe ff       	call   c0000974 <strcat>
c001c1a0:	5d                   	pop    ebp
c001c1a1:	58                   	pop    eax
c001c1a2:	57                   	push   edi
c001c1a3:	53                   	push   ebx
c001c1a4:	e8 cb 47 fe ff       	call   c0000974 <strcat>
c001c1a9:	c7 04 24 78 c3 02 c0 	mov    DWORD PTR [esp],0xc002c378
c001c1b0:	e8 02 6e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c1b5:	83 c4 10             	add    esp,0x10
c001c1b8:	e9 25 ff ff ff       	jmp    c001c0e2 <sysCallGetEnv(regs*)+0x5d>

c001c1bd <sysAppSettings(regs*)>:
c001c1bd:	53                   	push   ebx
c001c1be:	83 ec 08             	sub    esp,0x8
c001c1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1c8:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1ce:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1d3:	66 3d c0 09          	cmp    ax,0x9c0
c001c1d7:	75 2f                	jne    c001c208 <sysAppSettings(regs*)+0x4b>
c001c1d9:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1df:	83 e0 1f             	and    eax,0x1f
c001c1e2:	3c 01                	cmp    al,0x1
c001c1e4:	74 2e                	je     c001c214 <sysAppSettings(regs*)+0x57>
c001c1e6:	3c 07                	cmp    al,0x7
c001c1e8:	0f 84 bd 00 00 00    	je     c001c2ab <sysAppSettings(regs*)+0xee>
c001c1ee:	84 c0                	test   al,al
c001c1f0:	0f 84 dc 00 00 00    	je     c001c2d2 <sysAppSettings(regs*)+0x115>
c001c1f6:	3c 08                	cmp    al,0x8
c001c1f8:	74 6d                	je     c001c267 <sysAppSettings(regs*)+0xaa>
c001c1fa:	0f b6 c0             	movzx  eax,al
c001c1fd:	83 c4 08             	add    esp,0x8
c001c200:	05 e8 03 00 00       	add    eax,0x3e8
c001c205:	5b                   	pop    ebx
c001c206:	99                   	cdq    
c001c207:	c3                   	ret    
c001c208:	b8 01 00 00 00       	mov    eax,0x1
c001c20d:	31 d2                	xor    edx,edx
c001c20f:	83 c4 08             	add    esp,0x8
c001c212:	5b                   	pop    ebx
c001c213:	c3                   	ret    
c001c214:	51                   	push   ecx
c001c215:	68 00 01 00 00       	push   0x100
c001c21a:	6a 00                	push   0x0
c001c21c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c221:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c224:	83 c0 0c             	add    eax,0xc
c001c227:	50                   	push   eax
c001c228:	e8 4b 45 fe ff       	call   c0000778 <memset>
c001c22d:	83 c4 0c             	add    esp,0xc
c001c230:	68 ff 00 00 00       	push   0xff
c001c235:	53                   	push   ebx
c001c236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c23b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c23e:	83 c0 0c             	add    eax,0xc
c001c241:	50                   	push   eax
c001c242:	e8 fd 44 fe ff       	call   c0000744 <memcpy>
c001c247:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24c:	5b                   	pop    ebx
c001c24d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c250:	5a                   	pop    edx
c001c251:	8d 50 0c             	lea    edx,[eax+0xc]
c001c254:	52                   	push   edx
c001c255:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c25b:	e8 44 49 ff ff       	call   c0010ba4 <VgaText::setTitle(char*)>
c001c260:	83 c4 10             	add    esp,0x10
c001c263:	31 c0                	xor    eax,eax
c001c265:	eb a6                	jmp    c001c20d <sysAppSettings(regs*)+0x50>
c001c267:	83 ec 08             	sub    esp,0x8
c001c26a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c270:	83 e0 0f             	and    eax,0xf
c001c273:	50                   	push   eax
c001c274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c279:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c282:	e8 0d 49 ff ff       	call   c0010b94 <VgaText::setTitleColour(VgaColour)>
c001c287:	58                   	pop    eax
c001c288:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c28e:	5a                   	pop    edx
c001c28f:	c1 e8 04             	shr    eax,0x4
c001c292:	83 e0 0f             	and    eax,0xf
c001c295:	50                   	push   eax
c001c296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c29e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2a4:	e8 db 48 ff ff       	call   c0010b84 <VgaText::setTitleTextColour(VgaColour)>
c001c2a9:	eb b5                	jmp    c001c260 <sysAppSettings(regs*)+0xa3>
c001c2ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2b9:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2bf:	c0 e8 06             	shr    al,0x6
c001c2c2:	83 e0 01             	and    eax,0x1
c001c2c5:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2cb:	31 c0                	xor    eax,eax
c001c2cd:	e9 3b ff ff ff       	jmp    c001c20d <sysAppSettings(regs*)+0x50>
c001c2d2:	b8 02 00 00 00       	mov    eax,0x2
c001c2d7:	e9 31 ff ff ff       	jmp    c001c20d <sysAppSettings(regs*)+0x50>

c001c2dc <sysSetFatAttrib(regs*)>:
c001c2dc:	57                   	push   edi
c001c2dd:	56                   	push   esi
c001c2de:	53                   	push   ebx
c001c2df:	83 ec 1c             	sub    esp,0x1c
c001c2e2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2e6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2e9:	68 14 01 00 00       	push   0x114
c001c2ee:	e8 50 35 ff ff       	call   c000f843 <malloc>
c001c2f3:	83 c4 0c             	add    esp,0xc
c001c2f6:	89 c3                	mov    ebx,eax
c001c2f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c300:	57                   	push   edi
c001c301:	53                   	push   ebx
c001c302:	e8 09 72 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001c307:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c30a:	83 c4 0c             	add    esp,0xc
c001c30d:	0f b6 d4             	movzx  edx,ah
c001c310:	0f b6 c0             	movzx  eax,al
c001c313:	52                   	push   edx
c001c314:	50                   	push   eax
c001c315:	53                   	push   ebx
c001c316:	e8 6b 74 ff ff       	call   c0013786 <File::chfatattr(unsigned char, unsigned char)>
c001c31b:	83 c4 10             	add    esp,0x10
c001c31e:	85 db                	test   ebx,ebx
c001c320:	74 14                	je     c001c336 <sysSetFatAttrib(regs*)+0x5a>
c001c322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c326:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	53                   	push   ebx
c001c32c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c336:	85 c0                	test   eax,eax
c001c338:	0f 95 c0             	setne  al
c001c33b:	31 d2                	xor    edx,edx
c001c33d:	0f b6 c0             	movzx  eax,al
c001c340:	f7 d8                	neg    eax
c001c342:	83 d2 00             	adc    edx,0x0
c001c345:	83 c4 10             	add    esp,0x10
c001c348:	f7 da                	neg    edx
c001c34a:	5b                   	pop    ebx
c001c34b:	5e                   	pop    esi
c001c34c:	5f                   	pop    edi
c001c34d:	c3                   	ret    

c001c34e <sysPipe(regs*)>:
c001c34e:	57                   	push   edi
c001c34f:	56                   	push   esi
c001c350:	53                   	push   ebx
c001c351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c355:	83 ec 0c             	sub    esp,0xc
c001c358:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c35b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c35e:	6a 20                	push   0x20
c001c360:	e8 de 34 ff ff       	call   c000f843 <malloc>
c001c365:	89 c3                	mov    ebx,eax
c001c367:	58                   	pop    eax
c001c368:	5a                   	pop    edx
c001c369:	68 00 50 00 00       	push   0x5000
c001c36e:	53                   	push   ebx
c001c36f:	e8 60 41 ff ff       	call   c00104d4 <Pipe::Pipe(int)>
c001c374:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c377:	e8 b8 53 ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001c37c:	89 07                	mov    DWORD PTR [edi],eax
c001c37e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c381:	e8 ae 53 ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001c386:	83 c4 10             	add    esp,0x10
c001c389:	89 06                	mov    DWORD PTR [esi],eax
c001c38b:	31 d2                	xor    edx,edx
c001c38d:	5b                   	pop    ebx
c001c38e:	31 c0                	xor    eax,eax
c001c390:	5e                   	pop    esi
c001c391:	5f                   	pop    edi
c001c392:	c3                   	ret    

c001c393 <sysGetUnixTime(regs*)>:
c001c393:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001c398:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c39e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3a2:	e9 53 7b ff ff       	jmp    c0013efa <Clock::timeInSecondsLocal()>

c001c3a7 <string_ends_with(char const*, char const*)>:
c001c3a7:	57                   	push   edi
c001c3a8:	56                   	push   esi
c001c3a9:	53                   	push   ebx
c001c3aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	53                   	push   ebx
c001c3b6:	e8 d9 43 fe ff       	call   c0000794 <strlen>
c001c3bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3be:	89 c6                	mov    esi,eax
c001c3c0:	e8 cf 43 fe ff       	call   c0000794 <strlen>
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	39 c6                	cmp    esi,eax
c001c3ca:	7d 06                	jge    c001c3d2 <string_ends_with(char const*, char const*)+0x2b>
c001c3cc:	5b                   	pop    ebx
c001c3cd:	31 c0                	xor    eax,eax
c001c3cf:	5e                   	pop    esi
c001c3d0:	5f                   	pop    edi
c001c3d1:	c3                   	ret    
c001c3d2:	83 ec 08             	sub    esp,0x8
c001c3d5:	29 c6                	sub    esi,eax
c001c3d7:	57                   	push   edi
c001c3d8:	01 f3                	add    ebx,esi
c001c3da:	53                   	push   ebx
c001c3db:	e8 e0 44 fe ff       	call   c00008c0 <strcmp>
c001c3e0:	83 c4 10             	add    esp,0x10
c001c3e3:	85 c0                	test   eax,eax
c001c3e5:	5b                   	pop    ebx
c001c3e6:	0f 94 c0             	sete   al
c001c3e9:	5e                   	pop    esi
c001c3ea:	0f b6 c0             	movzx  eax,al
c001c3ed:	5f                   	pop    edi
c001c3ee:	c3                   	ret    

c001c3ef <sysCallOpen(regs*)>:
c001c3ef:	56                   	push   esi
c001c3f0:	53                   	push   ebx
c001c3f1:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3f7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3fe:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c401:	85 c9                	test   ecx,ecx
c001c403:	0f 84 b3 00 00 00    	je     c001c4bc <sysCallOpen(regs*)+0xcd>
c001c409:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c40c:	85 c0                	test   eax,eax
c001c40e:	0f 84 a8 00 00 00    	je     c001c4bc <sysCallOpen(regs*)+0xcd>
c001c414:	52                   	push   edx
c001c415:	68 ad bf 02 c0       	push   0xc002bfad
c001c41a:	50                   	push   eax
c001c41b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c41f:	56                   	push   esi
c001c420:	e8 41 6f ff ff       	call   c0013366 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c425:	89 34 24             	mov    DWORD PTR [esp],esi
c001c428:	e8 67 43 fe ff       	call   c0000794 <strlen>
c001c42d:	83 c4 10             	add    esp,0x10
c001c430:	48                   	dec    eax
c001c431:	74 1d                	je     c001c450 <sysCallOpen(regs*)+0x61>
c001c433:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c436:	eb 0f                	jmp    c001c447 <sysCallOpen(regs*)+0x58>
c001c438:	80 fa 3a             	cmp    dl,0x3a
c001c43b:	74 0f                	je     c001c44c <sysCallOpen(regs*)+0x5d>
c001c43d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c441:	48                   	dec    eax
c001c442:	74 0c                	je     c001c450 <sysCallOpen(regs*)+0x61>
c001c444:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c447:	80 fa 2e             	cmp    dl,0x2e
c001c44a:	75 ec                	jne    c001c438 <sysCallOpen(regs*)+0x49>
c001c44c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c450:	83 ec 08             	sub    esp,0x8
c001c453:	68 b1 bf 02 c0       	push   0xc002bfb1
c001c458:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c45b:	e8 47 ff ff ff       	call   c001c3a7 <string_ends_with(char const*, char const*)>
c001c460:	83 c4 10             	add    esp,0x10
c001c463:	85 c0                	test   eax,eax
c001c465:	75 17                	jne    c001c47e <sysCallOpen(regs*)+0x8f>
c001c467:	83 ec 08             	sub    esp,0x8
c001c46a:	68 d2 bf 02 c0       	push   0xc002bfd2
c001c46f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c472:	e8 30 ff ff ff       	call   c001c3a7 <string_ends_with(char const*, char const*)>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	85 c0                	test   eax,eax
c001c47c:	74 51                	je     c001c4cf <sysCallOpen(regs*)+0xe0>
c001c47e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c481:	83 ec 08             	sub    esp,0x8
c001c484:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c48a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c491:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c494:	ff 30                	push   DWORD PTR [eax]
c001c496:	68 b6 bf 02 c0       	push   0xc002bfb6
c001c49b:	e8 17 6b ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c4a0:	c7 04 24 c5 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfc5
c001c4a7:	e8 0b 6b ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c4ac:	83 c4 10             	add    esp,0x10
c001c4af:	81 c4 04 01 00 00    	add    esp,0x104
c001c4b5:	31 c0                	xor    eax,eax
c001c4b7:	31 d2                	xor    edx,edx
c001c4b9:	5b                   	pop    ebx
c001c4ba:	5e                   	pop    esi
c001c4bb:	c3                   	ret    
c001c4bc:	81 c4 04 01 00 00    	add    esp,0x104
c001c4c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4cc:	5b                   	pop    ebx
c001c4cd:	5e                   	pop    esi
c001c4ce:	c3                   	ret    
c001c4cf:	83 ec 08             	sub    esp,0x8
c001c4d2:	68 b2 bf 02 c0       	push   0xc002bfb2
c001c4d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4da:	e8 e1 43 fe ff       	call   c00008c0 <strcmp>
c001c4df:	83 c4 10             	add    esp,0x10
c001c4e2:	85 c0                	test   eax,eax
c001c4e4:	74 98                	je     c001c47e <sysCallOpen(regs*)+0x8f>
c001c4e6:	83 ec 08             	sub    esp,0x8
c001c4e9:	68 b1 bf 02 c0       	push   0xc002bfb1
c001c4ee:	56                   	push   esi
c001c4ef:	e8 b3 fe ff ff       	call   c001c3a7 <string_ends_with(char const*, char const*)>
c001c4f4:	83 c4 10             	add    esp,0x10
c001c4f7:	85 c0                	test   eax,eax
c001c4f9:	75 83                	jne    c001c47e <sysCallOpen(regs*)+0x8f>
c001c4fb:	83 ec 08             	sub    esp,0x8
c001c4fe:	68 d7 bf 02 c0       	push   0xc002bfd7
c001c503:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c506:	e8 9c fe ff ff       	call   c001c3a7 <string_ends_with(char const*, char const*)>
c001c50b:	83 c4 10             	add    esp,0x10
c001c50e:	85 c0                	test   eax,eax
c001c510:	0f 85 d9 00 00 00    	jne    c001c5ef <sysCallOpen(regs*)+0x200>
c001c516:	83 ec 08             	sub    esp,0x8
c001c519:	68 dc bf 02 c0       	push   0xc002bfdc
c001c51e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c521:	e8 81 fe ff ff       	call   c001c3a7 <string_ends_with(char const*, char const*)>
c001c526:	83 c4 10             	add    esp,0x10
c001c529:	85 c0                	test   eax,eax
c001c52b:	0f 85 be 00 00 00    	jne    c001c5ef <sysCallOpen(regs*)+0x200>
c001c531:	83 ec 08             	sub    esp,0x8
c001c534:	68 d8 bf 02 c0       	push   0xc002bfd8
c001c539:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c53c:	e8 7f 43 fe ff       	call   c00008c0 <strcmp>
c001c541:	83 c4 10             	add    esp,0x10
c001c544:	85 c0                	test   eax,eax
c001c546:	0f 84 a3 00 00 00    	je     c001c5ef <sysCallOpen(regs*)+0x200>
c001c54c:	83 ec 08             	sub    esp,0x8
c001c54f:	68 d7 bf 02 c0       	push   0xc002bfd7
c001c554:	56                   	push   esi
c001c555:	e8 4d fe ff ff       	call   c001c3a7 <string_ends_with(char const*, char const*)>
c001c55a:	83 c4 10             	add    esp,0x10
c001c55d:	85 c0                	test   eax,eax
c001c55f:	0f 85 8a 00 00 00    	jne    c001c5ef <sysCallOpen(regs*)+0x200>
c001c565:	83 ec 0c             	sub    esp,0xc
c001c568:	68 14 01 00 00       	push   0x114
c001c56d:	e8 d1 32 ff ff       	call   c000f843 <malloc>
c001c572:	83 c4 0c             	add    esp,0xc
c001c575:	89 c6                	mov    esi,eax
c001c577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c57c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c57f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c582:	56                   	push   esi
c001c583:	e8 88 6f ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001c588:	83 c4 10             	add    esp,0x10
c001c58b:	85 f6                	test   esi,esi
c001c58d:	0f 84 29 ff ff ff    	je     c001c4bc <sysCallOpen(regs*)+0xcd>
c001c593:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c596:	0f b6 c2             	movzx  eax,dl
c001c599:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c59c:	89 d0                	mov    eax,edx
c001c59e:	83 e0 01             	and    eax,0x1
c001c5a1:	f6 c2 02             	test   dl,0x2
c001c5a4:	74 03                	je     c001c5a9 <sysCallOpen(regs*)+0x1ba>
c001c5a6:	83 c8 02             	or     eax,0x2
c001c5a9:	f6 c2 04             	test   dl,0x4
c001c5ac:	74 03                	je     c001c5b1 <sysCallOpen(regs*)+0x1c2>
c001c5ae:	83 c8 04             	or     eax,0x4
c001c5b1:	f6 c2 08             	test   dl,0x8
c001c5b4:	74 03                	je     c001c5b9 <sysCallOpen(regs*)+0x1ca>
c001c5b6:	83 c8 0a             	or     eax,0xa
c001c5b9:	83 e2 10             	and    edx,0x10
c001c5bc:	74 03                	je     c001c5c1 <sysCallOpen(regs*)+0x1d2>
c001c5be:	83 c8 12             	or     eax,0x12
c001c5c1:	83 ec 08             	sub    esp,0x8
c001c5c4:	50                   	push   eax
c001c5c5:	56                   	push   esi
c001c5c6:	e8 a9 6f ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001c5cb:	83 c4 10             	add    esp,0x10
c001c5ce:	85 c0                	test   eax,eax
c001c5d0:	0f 85 e6 fe ff ff    	jne    c001c4bc <sysCallOpen(regs*)+0xcd>
c001c5d6:	83 ec 0c             	sub    esp,0xc
c001c5d9:	56                   	push   esi
c001c5da:	e8 55 51 ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001c5df:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5e2:	89 02                	mov    DWORD PTR [edx],eax
c001c5e4:	c1 f8 1f             	sar    eax,0x1f
c001c5e7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5ea:	e9 bd fe ff ff       	jmp    c001c4ac <sysCallOpen(regs*)+0xbd>
c001c5ef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5f2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5ff:	e9 ab fe ff ff       	jmp    c001c4af <sysCallOpen(regs*)+0xc0>

c001c604 <Sys::loadSyscalls()>:
c001c604:	c7 05 60 10 03 c0 11 b7 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001b711
c001c60e:	c7 05 64 10 03 c0 fa b2 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001b2fa
c001c618:	c7 05 68 10 03 c0 64 b4 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001b464
c001c622:	c7 05 6c 10 03 c0 47 b6 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b647
c001c62c:	c7 05 70 10 03 c0 fc b3 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001b3fc
c001c636:	c7 05 74 10 03 c0 31 b3 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001b331
c001c640:	c7 05 78 10 03 c0 12 b3 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001b312
c001c64a:	c7 05 7c 10 03 c0 b9 b4 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001b4b9
c001c654:	c7 05 84 10 03 c0 41 bc 01 c0 	mov    DWORD PTR ds:0xc0031084,0xc001bc41
c001c65e:	c7 05 80 10 03 c0 ef c3 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001c3ef
c001c668:	c7 05 88 10 03 c0 c9 bc 01 c0 	mov    DWORD PTR ds:0xc0031088,0xc001bcc9
c001c672:	c7 05 8c 10 03 c0 30 b9 01 c0 	mov    DWORD PTR ds:0xc003108c,0xc001b930
c001c67c:	c7 05 90 10 03 c0 4c b7 01 c0 	mov    DWORD PTR ds:0xc0031090,0xc001b74c
c001c686:	c7 05 94 10 03 c0 51 b7 01 c0 	mov    DWORD PTR ds:0xc0031094,0xc001b751
c001c690:	c7 05 98 10 03 c0 a4 bd 01 c0 	mov    DWORD PTR ds:0xc0031098,0xc001bda4
c001c69a:	c7 05 9c 10 03 c0 3e bd 01 c0 	mov    DWORD PTR ds:0xc003109c,0xc001bd3e
c001c6a4:	c7 05 a0 10 03 c0 18 ba 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001ba18
c001c6ae:	c7 05 a4 10 03 c0 81 ba 01 c0 	mov    DWORD PTR ds:0xc00310a4,0xc001ba81
c001c6b8:	c7 05 a8 10 03 c0 fe ba 01 c0 	mov    DWORD PTR ds:0xc00310a8,0xc001bafe
c001c6c2:	c7 05 ac 10 03 c0 56 b7 01 c0 	mov    DWORD PTR ds:0xc00310ac,0xc001b756
c001c6cc:	c7 05 b0 10 03 c0 14 be 01 c0 	mov    DWORD PTR ds:0xc00310b0,0xc001be14
c001c6d6:	c7 05 b4 10 03 c0 2e be 01 c0 	mov    DWORD PTR ds:0xc00310b4,0xc001be2e
c001c6e0:	c7 05 b8 10 03 c0 2e be 01 c0 	mov    DWORD PTR ds:0xc00310b8,0xc001be2e
c001c6ea:	c7 05 bc 10 03 c0 6f be 01 c0 	mov    DWORD PTR ds:0xc00310bc,0xc001be6f
c001c6f4:	c7 05 c0 10 03 c0 d3 be 01 c0 	mov    DWORD PTR ds:0xc00310c0,0xc001bed3
c001c6fe:	c7 05 c4 10 03 c0 02 b9 01 c0 	mov    DWORD PTR ds:0xc00310c4,0xc001b902
c001c708:	c7 05 c8 10 03 c0 37 bf 01 c0 	mov    DWORD PTR ds:0xc00310c8,0xc001bf37
c001c712:	c7 05 cc 10 03 c0 bf b8 01 c0 	mov    DWORD PTR ds:0xc00310cc,0xc001b8bf
c001c71c:	c7 05 d0 10 03 c0 83 bf 01 c0 	mov    DWORD PTR ds:0xc00310d0,0xc001bf83
c001c726:	c7 05 d4 10 03 c0 be b9 01 c0 	mov    DWORD PTR ds:0xc00310d4,0xc001b9be
c001c730:	c7 05 d8 10 03 c0 06 c0 01 c0 	mov    DWORD PTR ds:0xc00310d8,0xc001c006
c001c73a:	c7 05 dc 10 03 c0 81 bb 01 c0 	mov    DWORD PTR ds:0xc00310dc,0xc001bb81
c001c744:	c7 05 e0 10 03 c0 2d c0 01 c0 	mov    DWORD PTR ds:0xc00310e0,0xc001c02d
c001c74e:	c7 05 e4 10 03 c0 85 c0 01 c0 	mov    DWORD PTR ds:0xc00310e4,0xc001c085
c001c758:	c7 05 e8 10 03 c0 bd c1 01 c0 	mov    DWORD PTR ds:0xc00310e8,0xc001c1bd
c001c762:	c7 05 ec 10 03 c0 60 b7 01 c0 	mov    DWORD PTR ds:0xc00310ec,0xc001b760
c001c76c:	c7 05 f0 10 03 c0 ca b7 01 c0 	mov    DWORD PTR ds:0xc00310f0,0xc001b7ca
c001c776:	c7 05 f4 10 03 c0 10 b8 01 c0 	mov    DWORD PTR ds:0xc00310f4,0xc001b810
c001c780:	c7 05 f8 10 03 c0 dc c2 01 c0 	mov    DWORD PTR ds:0xc00310f8,0xc001c2dc
c001c78a:	c7 05 fc 10 03 c0 49 be 01 c0 	mov    DWORD PTR ds:0xc00310fc,0xc001be49
c001c794:	c7 05 00 11 03 c0 61 b8 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001b861
c001c79e:	c7 05 04 11 03 c0 4e c3 01 c0 	mov    DWORD PTR ds:0xc0031104,0xc001c34e
c001c7a8:	c7 05 08 11 03 c0 93 c3 01 c0 	mov    DWORD PTR ds:0xc0031108,0xc001c393
c001c7b2:	c7 05 0c 11 03 c0 54 b3 01 c0 	mov    DWORD PTR ds:0xc003110c,0xc001b354
c001c7bc:	c7 05 10 11 03 c0 d5 b4 01 c0 	mov    DWORD PTR ds:0xc0031110,0xc001b4d5
c001c7c6:	c7 05 14 11 03 c0 fd b5 01 c0 	mov    DWORD PTR ds:0xc0031114,0xc001b5fd
c001c7d0:	c7 05 18 11 03 c0 c4 b2 01 c0 	mov    DWORD PTR ds:0xc0031118,0xc001b2c4
c001c7da:	c7 05 1c 11 03 c0 af b6 01 c0 	mov    DWORD PTR ds:0xc003111c,0xc001b6af
c001c7e4:	c7 05 20 11 03 c0 3d b3 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001b33d
c001c7ee:	c3                   	ret    

c001c7ef <Sys::systemCall(regs*, void*)>:
c001c7ef:	53                   	push   ebx
c001c7f0:	83 ec 08             	sub    esp,0x8
c001c7f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7fa:	83 f8 7f             	cmp    eax,0x7f
c001c7fd:	77 16                	ja     c001c815 <Sys::systemCall(regs*, void*)+0x26>
c001c7ff:	8b 14 85 60 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefa0]
c001c806:	85 d2                	test   edx,edx
c001c808:	74 0b                	je     c001c815 <Sys::systemCall(regs*, void*)+0x26>
c001c80a:	83 ec 0c             	sub    esp,0xc
c001c80d:	53                   	push   ebx
c001c80e:	ff d2                	call   edx
c001c810:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c813:	eb 0d                	jmp    c001c822 <Sys::systemCall(regs*, void*)+0x33>
c001c815:	52                   	push   edx
c001c816:	52                   	push   edx
c001c817:	50                   	push   eax
c001c818:	68 e1 bf 02 c0       	push   0xc002bfe1
c001c81d:	e8 95 67 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c822:	83 c4 10             	add    esp,0x10
c001c825:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c82a:	31 d2                	xor    edx,edx
c001c82c:	83 c4 08             	add    esp,0x8
c001c82f:	5b                   	pop    ebx
c001c830:	c3                   	ret    

c001c831 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c831:	55                   	push   ebp
c001c832:	57                   	push   edi
c001c833:	56                   	push   esi
c001c834:	53                   	push   ebx
c001c835:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c83b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c842:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c849:	85 c0                	test   eax,eax
c001c84b:	0f 95 c1             	setne  cl
c001c84e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c856:	0f 94 c2             	sete   dl
c001c859:	84 d1                	test   cl,dl
c001c85b:	74 23                	je     c001c880 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c85d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c863:	74 1b                	je     c001c880 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c865:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c86b:	89 da                	mov    edx,ebx
c001c86d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c873:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c879:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c880:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c887:	05 ff 0f 00 00       	add    eax,0xfff
c001c88c:	83 ec 0c             	sub    esp,0xc
c001c88f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c893:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c899:	c1 e8 0c             	shr    eax,0xc
c001c89c:	89 ef                	mov    edi,ebp
c001c89e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8a2:	c1 ef 0c             	shr    edi,0xc
c001c8a5:	6a 01                	push   0x1
c001c8a7:	e8 d3 52 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c001c8ac:	89 c6                	mov    esi,eax
c001c8ae:	58                   	pop    eax
c001c8af:	5a                   	pop    edx
c001c8b0:	57                   	push   edi
c001c8b1:	68 67 c0 02 c0       	push   0xc002c067
c001c8b6:	e8 fc 66 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c8bb:	59                   	pop    ecx
c001c8bc:	58                   	pop    eax
c001c8bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8c1:	68 79 c0 02 c0       	push   0xc002c079
c001c8c6:	e8 ec 66 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8d4:	0f 86 24 01 00 00    	jbe    c001c9fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8da:	c1 e7 0c             	shl    edi,0xc
c001c8dd:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8e0:	89 df                	mov    edi,ebx
c001c8e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8e6:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8ed:	01 dd                	add    ebp,ebx
c001c8ef:	29 fd                	sub    ebp,edi
c001c8f1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8f5:	0f 84 01 01 00 00    	je     c001c9fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8fb:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c901:	76 05                	jbe    c001c908 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c903:	bd 00 10 00 00       	mov    ebp,0x1000
c001c908:	83 ec 0c             	sub    esp,0xc
c001c90b:	31 d2                	xor    edx,edx
c001c90d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c914:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c916:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c91a:	50                   	push   eax
c001c91b:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c91f:	50                   	push   eax
c001c920:	52                   	push   edx
c001c921:	55                   	push   ebp
c001c922:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c929:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c92c:	83 c4 20             	add    esp,0x20
c001c92f:	85 c0                	test   eax,eax
c001c931:	74 0a                	je     c001c93d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c933:	53                   	push   ebx
c001c934:	53                   	push   ebx
c001c935:	50                   	push   eax
c001c936:	68 8b c0 02 c0       	push   0xc002c08b
c001c93b:	eb 0f                	jmp    c001c94c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c93d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c941:	74 20                	je     c001c963 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c943:	51                   	push   ecx
c001c944:	51                   	push   ecx
c001c945:	6a 00                	push   0x0
c001c947:	68 b6 c0 02 c0       	push   0xc002c0b6
c001c94c:	e8 66 66 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001c951:	89 34 24             	mov    DWORD PTR [esp],esi
c001c954:	e8 ac 56 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001c959:	83 c4 10             	add    esp,0x10
c001c95c:	31 c0                	xor    eax,eax
c001c95e:	e9 55 01 00 00       	jmp    c001cab8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c963:	e8 f2 14 00 00       	call   c001de5a <lockScheduler()>
c001c968:	e8 78 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c96d:	6a 07                	push   0x7
c001c96f:	89 c5                	mov    ebp,eax
c001c971:	56                   	push   esi
c001c972:	50                   	push   eax
c001c973:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c978:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c97b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c981:	e8 e6 59 ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c986:	83 c4 0c             	add    esp,0xc
c001c989:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c990:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c996:	6a 00                	push   0x0
c001c998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c99d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9a0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a6:	e8 2b 58 ff ff       	call   c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9ab:	58                   	pop    eax
c001c9ac:	5a                   	pop    edx
c001c9ad:	68 07 0c 00 00       	push   0xc07
c001c9b2:	57                   	push   edi
c001c9b3:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9b9:	55                   	push   ebp
c001c9ba:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9c1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c7:	6a 00                	push   0x0
c001c9c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9d1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d7:	e8 4a 5d ff ff       	call   c0012726 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9dc:	83 c4 1c             	add    esp,0x1c
c001c9df:	68 00 10 00 00       	push   0x1000
c001c9e4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9e8:	50                   	push   eax
c001c9e9:	56                   	push   esi
c001c9ea:	e8 55 3d fe ff       	call   c0000744 <memcpy>
c001c9ef:	e8 68 14 00 00       	call   c001de5c <unlockScheduler()>
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	e9 ea fe ff ff       	jmp    c001c8e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9fc:	89 fb                	mov    ebx,edi
c001c9fe:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca06:	0f 86 9e 00 00 00    	jbe    c001caaa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca0c:	e8 49 14 00 00       	call   c001de5a <lockScheduler()>
c001ca11:	51                   	push   ecx
c001ca12:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca19:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca1f:	6a 00                	push   0x0
c001ca21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca29:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca2f:	e8 a2 57 ff ff       	call   c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca34:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca38:	c1 e7 0c             	shl    edi,0xc
c001ca3b:	01 df                	add    edi,ebx
c001ca3d:	83 c4 10             	add    esp,0x10
c001ca40:	39 fb                	cmp    ebx,edi
c001ca42:	74 61                	je     c001caa5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca44:	e8 9c 34 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001ca49:	6a 07                	push   0x7
c001ca4b:	89 c5                	mov    ebp,eax
c001ca4d:	56                   	push   esi
c001ca4e:	50                   	push   eax
c001ca4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca57:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca5d:	e8 0a 59 ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca62:	58                   	pop    eax
c001ca63:	5a                   	pop    edx
c001ca64:	68 07 0c 00 00       	push   0xc07
c001ca69:	53                   	push   ebx
c001ca6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca70:	55                   	push   ebp
c001ca71:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca78:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca7e:	6a 00                	push   0x0
c001ca80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca88:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca8e:	e8 93 5c ff ff       	call   c0012726 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca93:	83 c4 1c             	add    esp,0x1c
c001ca96:	68 00 10 00 00       	push   0x1000
c001ca9b:	6a 00                	push   0x0
c001ca9d:	56                   	push   esi
c001ca9e:	e8 d5 3c fe ff       	call   c0000778 <memset>
c001caa3:	eb 98                	jmp    c001ca3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001caa5:	e8 b2 13 00 00       	call   c001de5c <unlockScheduler()>
c001caaa:	83 ec 0c             	sub    esp,0xc
c001caad:	56                   	push   esi
c001caae:	e8 52 55 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001cab3:	83 c4 10             	add    esp,0x10
c001cab6:	b0 01                	mov    al,0x1
c001cab8:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cabe:	5b                   	pop    ebx
c001cabf:	5e                   	pop    esi
c001cac0:	5f                   	pop    edi
c001cac1:	5d                   	pop    ebp
c001cac2:	c3                   	ret    

c001cac3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cac3:	55                   	push   ebp
c001cac4:	57                   	push   edi
c001cac5:	56                   	push   esi
c001cac6:	53                   	push   ebx
c001cac7:	83 ec 48             	sub    esp,0x48
c001caca:	68 14 01 00 00       	push   0x114
c001cacf:	e8 6f 2d ff ff       	call   c000f843 <malloc>
c001cad4:	83 c4 0c             	add    esp,0xc
c001cad7:	89 c6                	mov    esi,eax
c001cad9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cadd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cae1:	50                   	push   eax
c001cae2:	e8 29 6a ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001cae7:	58                   	pop    eax
c001cae8:	5a                   	pop    edx
c001cae9:	6a 01                	push   0x1
c001caeb:	56                   	push   esi
c001caec:	e8 83 6a ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001caf1:	83 c4 10             	add    esp,0x10
c001caf4:	85 c0                	test   eax,eax
c001caf6:	0f 85 47 01 00 00    	jne    c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb04:	83 ec 0c             	sub    esp,0xc
c001cb07:	6a 34                	push   0x34
c001cb09:	e8 35 2d ff ff       	call   c000f843 <malloc>
c001cb0e:	89 c3                	mov    ebx,eax
c001cb10:	58                   	pop    eax
c001cb11:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb13:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb17:	57                   	push   edi
c001cb18:	53                   	push   ebx
c001cb19:	6a 00                	push   0x0
c001cb1b:	6a 34                	push   0x34
c001cb1d:	56                   	push   esi
c001cb1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb21:	83 c4 20             	add    esp,0x20
c001cb24:	85 c0                	test   eax,eax
c001cb26:	0f 85 17 01 00 00    	jne    c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb2c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb32:	0f 85 0b 01 00 00    	jne    c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb38:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb3b:	85 c0                	test   eax,eax
c001cb3d:	0f 84 00 01 00 00    	je     c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb43:	31 d2                	xor    edx,edx
c001cb45:	55                   	push   ebp
c001cb46:	52                   	push   edx
c001cb47:	50                   	push   eax
c001cb48:	56                   	push   esi
c001cb49:	e8 e4 6a ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001cb4e:	83 c4 10             	add    esp,0x10
c001cb51:	85 c0                	test   eax,eax
c001cb53:	0f 85 ea 00 00 00    	jne    c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb59:	83 ec 0c             	sub    esp,0xc
c001cb5c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb5f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb67:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb6b:	0f af c2             	imul   eax,edx
c001cb6e:	50                   	push   eax
c001cb6f:	e8 cf 2c ff ff       	call   c000f843 <malloc>
c001cb74:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb7a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb81:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb85:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb89:	0f af c2             	imul   eax,edx
c001cb8c:	99                   	cdq    
c001cb8d:	52                   	push   edx
c001cb8e:	50                   	push   eax
c001cb8f:	56                   	push   esi
c001cb90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb93:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb96:	83 c4 20             	add    esp,0x20
c001cb99:	85 c0                	test   eax,eax
c001cb9b:	0f 84 a2 00 00 00    	je     c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cba1:	31 d2                	xor    edx,edx
c001cba3:	51                   	push   ecx
c001cba4:	52                   	push   edx
c001cba5:	50                   	push   eax
c001cba6:	56                   	push   esi
c001cba7:	e8 86 6a ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001cbac:	83 c4 10             	add    esp,0x10
c001cbaf:	85 c0                	test   eax,eax
c001cbb1:	0f 85 8c 00 00 00    	jne    c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbb7:	83 ec 0c             	sub    esp,0xc
c001cbba:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbbe:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbc2:	31 ed                	xor    ebp,ebp
c001cbc4:	0f af c2             	imul   eax,edx
c001cbc7:	50                   	push   eax
c001cbc8:	e8 76 2c ff ff       	call   c000f843 <malloc>
c001cbcd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbd3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbda:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbde:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbe2:	0f af c2             	imul   eax,edx
c001cbe5:	99                   	cdq    
c001cbe6:	52                   	push   edx
c001cbe7:	50                   	push   eax
c001cbe8:	56                   	push   esi
c001cbe9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbec:	83 c4 20             	add    esp,0x20
c001cbef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbf7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbfb:	0f 86 80 00 00 00    	jbe    c001cc81 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc01:	0f b7 fd             	movzx  edi,bp
c001cc04:	c1 e7 05             	shl    edi,0x5
c001cc07:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc0b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc0e:	75 6b                	jne    c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc10:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc17:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc1e:	52                   	push   edx
c001cc1f:	31 d2                	xor    edx,edx
c001cc21:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc24:	52                   	push   edx
c001cc25:	50                   	push   eax
c001cc26:	56                   	push   esi
c001cc27:	e8 06 6a ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	85 c0                	test   eax,eax
c001cc31:	74 17                	je     c001cc4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc33:	83 ec 0c             	sub    esp,0xc
c001cc36:	68 e2 c0 02 c0       	push   0xc002c0e2
c001cc3b:	e8 77 63 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001cc40:	83 c4 10             	add    esp,0x10
c001cc43:	31 c0                	xor    eax,eax
c001cc45:	e9 87 00 00 00       	jmp    c001ccd1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc4a:	83 ec 0c             	sub    esp,0xc
c001cc4d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc50:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc53:	50                   	push   eax
c001cc54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc5c:	56                   	push   esi
c001cc5d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc61:	e8 cb fb ff ff       	call   c001c831 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc6a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc6e:	83 c4 20             	add    esp,0x20
c001cc71:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc75:	73 04                	jae    c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc7b:	45                   	inc    ebp
c001cc7c:	e9 76 ff ff ff       	jmp    c001cbf7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc81:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc8d:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc93:	83 ec 0c             	sub    esp,0xc
c001cc96:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cca1:	05 00 10 00 00       	add    eax,0x1000
c001cca6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccad:	e8 a1 2b ff ff       	call   c000f853 <free>
c001ccb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccb5:	e8 99 2b ff ff       	call   c000f853 <free>
c001ccba:	58                   	pop    eax
c001ccbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccbf:	e8 8f 2b ff ff       	call   c000f853 <free>
c001ccc4:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccc7:	e8 06 69 ff ff       	call   c00135d2 <File::close()>
c001cccc:	83 c4 10             	add    esp,0x10
c001cccf:	b0 01                	mov    al,0x1
c001ccd1:	83 c4 3c             	add    esp,0x3c
c001ccd4:	5b                   	pop    ebx
c001ccd5:	5e                   	pop    esi
c001ccd6:	5f                   	pop    edi
c001ccd7:	5d                   	pop    ebp
c001ccd8:	c3                   	ret    

c001ccd9 <Thr::runtimeReferenceHelper()>:
c001ccd9:	83 ec 18             	sub    esp,0x18
c001ccdc:	68 ea c0 02 c0       	push   0xc002c0ea
c001cce1:	e8 d1 62 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001cce6:	fa                   	cli    
c001cce7:	83 c4 10             	add    esp,0x10
c001ccea:	eb fe                	jmp    c001ccea <Thr::runtimeReferenceHelper()+0x11>

c001ccec <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccec:	57                   	push   edi
c001cced:	56                   	push   esi
c001ccee:	53                   	push   ebx
c001ccef:	31 db                	xor    ebx,ebx
c001ccf1:	39 1d 00 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a00,ebx
c001ccf7:	7e 3c                	jle    c001cd35 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccf9:	8b 34 9d 80 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce680]
c001cd00:	31 ff                	xor    edi,edi
c001cd02:	39 3c 9d 80 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce780],edi
c001cd09:	7e 27                	jle    c001cd32 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd0b:	50                   	push   eax
c001cd0c:	50                   	push   eax
c001cd0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd11:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd13:	03 04 9d 00 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce700]
c001cd1a:	50                   	push   eax
c001cd1b:	e8 a0 3b fe ff       	call   c00008c0 <strcmp>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	85 c0                	test   eax,eax
c001cd25:	75 05                	jne    c001cd2c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd27:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd2a:	eb 0b                	jmp    c001cd37 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd2c:	83 c6 10             	add    esi,0x10
c001cd2f:	47                   	inc    edi
c001cd30:	eb d0                	jmp    c001cd02 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd32:	43                   	inc    ebx
c001cd33:	eb bc                	jmp    c001ccf1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd35:	31 c0                	xor    eax,eax
c001cd37:	5b                   	pop    ebx
c001cd38:	5e                   	pop    esi
c001cd39:	5f                   	pop    edi
c001cd3a:	c3                   	ret    

c001cd3b <Thr::loadKernelSymbolTable(char const*)>:
c001cd3b:	55                   	push   ebp
c001cd3c:	57                   	push   edi
c001cd3d:	56                   	push   esi
c001cd3e:	53                   	push   ebx
c001cd3f:	83 ec 68             	sub    esp,0x68
c001cd42:	8b 35 54 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031a54
c001cd48:	68 14 01 00 00       	push   0x114
c001cd4d:	e8 f1 2a ff ff       	call   c000f843 <malloc>
c001cd52:	83 c4 0c             	add    esp,0xc
c001cd55:	89 c3                	mov    ebx,eax
c001cd57:	56                   	push   esi
c001cd58:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd5c:	50                   	push   eax
c001cd5d:	e8 ae 67 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001cd62:	5e                   	pop    esi
c001cd63:	5f                   	pop    edi
c001cd64:	6a 01                	push   0x1
c001cd66:	53                   	push   ebx
c001cd67:	e8 08 68 ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001cd6c:	83 c4 10             	add    esp,0x10
c001cd6f:	85 c0                	test   eax,eax
c001cd71:	74 0a                	je     c001cd7d <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd73:	83 ec 0c             	sub    esp,0xc
c001cd76:	68 0c c1 02 c0       	push   0xc002c10c
c001cd7b:	eb 34                	jmp    c001cdb1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd7d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd85:	83 ec 0c             	sub    esp,0xc
c001cd88:	6a 34                	push   0x34
c001cd8a:	e8 b4 2a ff ff       	call   c000f843 <malloc>
c001cd8f:	59                   	pop    ecx
c001cd90:	89 c7                	mov    edi,eax
c001cd92:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd98:	56                   	push   esi
c001cd99:	57                   	push   edi
c001cd9a:	6a 00                	push   0x0
c001cd9c:	6a 34                	push   0x34
c001cd9e:	53                   	push   ebx
c001cd9f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cda2:	83 c4 20             	add    esp,0x20
c001cda5:	85 c0                	test   eax,eax
c001cda7:	74 17                	je     c001cdc0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cda9:	83 ec 0c             	sub    esp,0xc
c001cdac:	68 23 c1 02 c0       	push   0xc002c123
c001cdb1:	e8 af d8 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001cdb6:	83 c4 10             	add    esp,0x10
c001cdb9:	31 c0                	xor    eax,eax
c001cdbb:	e9 31 02 00 00       	jmp    c001cff1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdc0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdc6:	75 e1                	jne    c001cda9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdc8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdcb:	85 c0                	test   eax,eax
c001cdcd:	74 da                	je     c001cda9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdcf:	52                   	push   edx
c001cdd0:	31 d2                	xor    edx,edx
c001cdd2:	52                   	push   edx
c001cdd3:	50                   	push   eax
c001cdd4:	53                   	push   ebx
c001cdd5:	e8 58 68 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001cdda:	83 c4 10             	add    esp,0x10
c001cddd:	85 c0                	test   eax,eax
c001cddf:	75 c8                	jne    c001cda9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cde1:	83 ec 0c             	sub    esp,0xc
c001cde4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cde8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdec:	31 ed                	xor    ebp,ebp
c001cdee:	0f af c2             	imul   eax,edx
c001cdf1:	50                   	push   eax
c001cdf2:	e8 4c 2a ff ff       	call   c000f843 <malloc>
c001cdf7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdfd:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce04:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce08:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce0c:	0f af c2             	imul   eax,edx
c001ce0f:	99                   	cdq    
c001ce10:	52                   	push   edx
c001ce11:	50                   	push   eax
c001ce12:	53                   	push   ebx
c001ce13:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce16:	83 c4 20             	add    esp,0x20
c001ce19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce21:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce29:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce31:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce39:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce3d:	0f 86 aa 00 00 00    	jbe    c001ceed <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce43:	0f b7 f5             	movzx  esi,bp
c001ce46:	6b f6 28             	imul   esi,esi,0x28
c001ce49:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce4d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce54:	50                   	push   eax
c001ce55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce59:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce5d:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce5f:	6b c0 28             	imul   eax,eax,0x28
c001ce62:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce66:	89 d0                	mov    eax,edx
c001ce68:	31 d2                	xor    edx,edx
c001ce6a:	52                   	push   edx
c001ce6b:	50                   	push   eax
c001ce6c:	53                   	push   ebx
c001ce6d:	e8 c0 67 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001ce72:	83 c4 0c             	add    esp,0xc
c001ce75:	6a 20                	push   0x20
c001ce77:	6a 00                	push   0x0
c001ce79:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce7d:	52                   	push   edx
c001ce7e:	e8 f5 38 fe ff       	call   c0000778 <memset>
c001ce83:	58                   	pop    eax
c001ce84:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce86:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce8a:	51                   	push   ecx
c001ce8b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce8f:	52                   	push   edx
c001ce90:	6a 00                	push   0x0
c001ce92:	6a 1f                	push   0x1f
c001ce94:	53                   	push   ebx
c001ce95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce98:	83 c4 18             	add    esp,0x18
c001ce9b:	68 3a c1 02 c0       	push   0xc002c13a
c001cea0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cea4:	52                   	push   edx
c001cea5:	e8 16 3a fe ff       	call   c00008c0 <strcmp>
c001ceaa:	83 c4 10             	add    esp,0x10
c001cead:	85 c0                	test   eax,eax
c001ceaf:	75 0f                	jne    c001cec0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ceb1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ceb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ceb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cec0:	50                   	push   eax
c001cec1:	50                   	push   eax
c001cec2:	68 42 c1 02 c0       	push   0xc002c142
c001cec7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cecb:	50                   	push   eax
c001cecc:	e8 ef 39 fe ff       	call   c00008c0 <strcmp>
c001ced1:	83 c4 10             	add    esp,0x10
c001ced4:	85 c0                	test   eax,eax
c001ced6:	75 0f                	jne    c001cee7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ced8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cedb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cedf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cee7:	45                   	inc    ebp
c001cee8:	e9 4c ff ff ff       	jmp    c001ce39 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ceed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cef2:	75 10                	jne    c001cf04 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cef4:	83 ec 0c             	sub    esp,0xc
c001cef7:	68 4a c1 02 c0       	push   0xc002c14a
c001cefc:	e8 64 d7 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001cf01:	83 c4 10             	add    esp,0x10
c001cf04:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf09:	75 10                	jne    c001cf1b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf0b:	83 ec 0c             	sub    esp,0xc
c001cf0e:	68 4a c1 02 c0       	push   0xc002c14a
c001cf13:	e8 4d d7 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	31 d2                	xor    edx,edx
c001cf1d:	50                   	push   eax
c001cf1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf22:	52                   	push   edx
c001cf23:	50                   	push   eax
c001cf24:	53                   	push   ebx
c001cf25:	e8 08 67 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001cf2a:	5a                   	pop    edx
c001cf2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf2f:	e8 0f 29 ff ff       	call   c000f843 <malloc>
c001cf34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf3c:	31 c9                	xor    ecx,ecx
c001cf3e:	5e                   	pop    esi
c001cf3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf41:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf45:	55                   	push   ebp
c001cf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf4a:	51                   	push   ecx
c001cf4b:	52                   	push   edx
c001cf4c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf50:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf54:	53                   	push   ebx
c001cf55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf58:	83 c4 14             	add    esp,0x14
c001cf5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf5f:	e8 df 28 ff ff       	call   c000f843 <malloc>
c001cf64:	89 c6                	mov    esi,eax
c001cf66:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf68:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf6b:	56                   	push   esi
c001cf6c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf74:	51                   	push   ecx
c001cf75:	52                   	push   edx
c001cf76:	53                   	push   ebx
c001cf77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf7e:	8b 15 00 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a00
c001cf84:	83 c4 1c             	add    esp,0x1c
c001cf87:	c1 e8 04             	shr    eax,0x4
c001cf8a:	89 04 95 80 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce780],eax
c001cf91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf95:	31 d2                	xor    edx,edx
c001cf97:	52                   	push   edx
c001cf98:	50                   	push   eax
c001cf99:	53                   	push   ebx
c001cf9a:	e8 93 66 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001cf9f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfa1:	31 d2                	xor    edx,edx
c001cfa3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfa6:	56                   	push   esi
c001cfa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfab:	52                   	push   edx
c001cfac:	50                   	push   eax
c001cfad:	53                   	push   ebx
c001cfae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfb1:	83 c4 14             	add    esp,0x14
c001cfb4:	53                   	push   ebx
c001cfb5:	e8 18 66 ff ff       	call   c00135d2 <File::close()>
c001cfba:	5d                   	pop    ebp
c001cfbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfbf:	e8 8f 28 ff ff       	call   c000f853 <free>
c001cfc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfc7:	e8 87 28 ff ff       	call   c000f853 <free>
c001cfcc:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c001cfd1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfd5:	8d 50 01             	lea    edx,[eax+0x1]
c001cfd8:	89 0c 85 80 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce680],ecx
c001cfdf:	89 34 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],esi
c001cfe6:	89 15 00 1a 03 c0    	mov    DWORD PTR ds:0xc0031a00,edx
c001cfec:	83 c4 10             	add    esp,0x10
c001cfef:	b0 01                	mov    al,0x1
c001cff1:	83 c4 5c             	add    esp,0x5c
c001cff4:	5b                   	pop    ebx
c001cff5:	5e                   	pop    esi
c001cff6:	5f                   	pop    edi
c001cff7:	5d                   	pop    ebp
c001cff8:	c3                   	ret    

c001cff9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cff9:	55                   	push   ebp
c001cffa:	57                   	push   edi
c001cffb:	56                   	push   esi
c001cffc:	53                   	push   ebx
c001cffd:	81 ec 68 03 00 00    	sub    esp,0x368
c001d003:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d00a:	8b 1d 54 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a54
c001d010:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d014:	68 14 01 00 00       	push   0x114
c001d019:	e8 25 28 ff ff       	call   c000f843 <malloc>
c001d01e:	83 c4 0c             	add    esp,0xc
c001d021:	89 c5                	mov    ebp,eax
c001d023:	53                   	push   ebx
c001d024:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d02b:	50                   	push   eax
c001d02c:	e8 df 64 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001d031:	5e                   	pop    esi
c001d032:	5f                   	pop    edi
c001d033:	6a 01                	push   0x1
c001d035:	55                   	push   ebp
c001d036:	e8 39 65 ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	85 c0                	test   eax,eax
c001d040:	0f 85 8d 06 00 00    	jne    c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d046:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d04e:	83 ec 0c             	sub    esp,0xc
c001d051:	6a 34                	push   0x34
c001d053:	e8 eb 27 ff ff       	call   c000f843 <malloc>
c001d058:	5b                   	pop    ebx
c001d059:	89 c7                	mov    edi,eax
c001d05b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d05f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d062:	53                   	push   ebx
c001d063:	57                   	push   edi
c001d064:	6a 00                	push   0x0
c001d066:	6a 34                	push   0x34
c001d068:	55                   	push   ebp
c001d069:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d06c:	83 c4 20             	add    esp,0x20
c001d06f:	85 c0                	test   eax,eax
c001d071:	0f 85 5c 06 00 00    	jne    c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d077:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d07d:	0f 85 50 06 00 00    	jne    c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d083:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d086:	85 c0                	test   eax,eax
c001d088:	0f 84 45 06 00 00    	je     c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d08e:	31 d2                	xor    edx,edx
c001d090:	51                   	push   ecx
c001d091:	52                   	push   edx
c001d092:	50                   	push   eax
c001d093:	55                   	push   ebp
c001d094:	e8 99 65 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001d099:	83 c4 10             	add    esp,0x10
c001d09c:	85 c0                	test   eax,eax
c001d09e:	0f 85 2f 06 00 00    	jne    c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a4:	83 ec 0c             	sub    esp,0xc
c001d0a7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0aa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0ae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0b2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0b6:	0f af c2             	imul   eax,edx
c001d0b9:	50                   	push   eax
c001d0ba:	e8 84 27 ff ff       	call   c000f843 <malloc>
c001d0bf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0cd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0d1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0d5:	0f af c2             	imul   eax,edx
c001d0d8:	99                   	cdq    
c001d0d9:	52                   	push   edx
c001d0da:	50                   	push   eax
c001d0db:	55                   	push   ebp
c001d0dc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0df:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0e2:	83 c4 20             	add    esp,0x20
c001d0e5:	85 c0                	test   eax,eax
c001d0e7:	0f 84 e6 05 00 00    	je     c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0ed:	52                   	push   edx
c001d0ee:	31 d2                	xor    edx,edx
c001d0f0:	52                   	push   edx
c001d0f1:	50                   	push   eax
c001d0f2:	55                   	push   ebp
c001d0f3:	e8 3a 65 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001d0f8:	83 c4 10             	add    esp,0x10
c001d0fb:	85 c0                	test   eax,eax
c001d0fd:	0f 85 d0 05 00 00    	jne    c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d103:	83 ec 0c             	sub    esp,0xc
c001d106:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d10a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d10e:	31 f6                	xor    esi,esi
c001d110:	0f af c2             	imul   eax,edx
c001d113:	50                   	push   eax
c001d114:	e8 2a 27 ff ff       	call   c000f843 <malloc>
c001d119:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d11c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d123:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d127:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d12b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d12f:	0f af c2             	imul   eax,edx
c001d132:	99                   	cdq    
c001d133:	52                   	push   edx
c001d134:	50                   	push   eax
c001d135:	55                   	push   ebp
c001d136:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d139:	83 c4 20             	add    esp,0x20
c001d13c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d140:	0f 86 8a 00 00 00    	jbe    c001d1d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d146:	0f b7 de             	movzx  ebx,si
c001d149:	c1 e3 05             	shl    ebx,0x5
c001d14c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d150:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d153:	75 75                	jne    c001d1ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d155:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d158:	31 d2                	xor    edx,edx
c001d15a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d15e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d165:	50                   	push   eax
c001d166:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d169:	52                   	push   edx
c001d16a:	50                   	push   eax
c001d16b:	55                   	push   ebp
c001d16c:	e8 c1 64 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001d171:	83 c4 10             	add    esp,0x10
c001d174:	85 c0                	test   eax,eax
c001d176:	0f 85 57 05 00 00    	jne    c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d17c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d183:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d186:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d18a:	31 d2                	xor    edx,edx
c001d18c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d190:	83 ec 0c             	sub    esp,0xc
c001d193:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d197:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d19e:	50                   	push   eax
c001d19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1a7:	52                   	push   edx
c001d1a8:	50                   	push   eax
c001d1a9:	55                   	push   ebp
c001d1aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1ad:	83 c4 1c             	add    esp,0x1c
c001d1b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1b3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1b6:	50                   	push   eax
c001d1b7:	6a 00                	push   0x0
c001d1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1c1:	50                   	push   eax
c001d1c2:	e8 b1 35 fe ff       	call   c0000778 <memset>
c001d1c7:	83 c4 10             	add    esp,0x10
c001d1ca:	46                   	inc    esi
c001d1cb:	e9 6c ff ff ff       	jmp    c001d13c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1d0:	53                   	push   ebx
c001d1d1:	31 db                	xor    ebx,ebx
c001d1d3:	68 00 01 00 00       	push   0x100
c001d1d8:	6a 00                	push   0x0
c001d1da:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1de:	50                   	push   eax
c001d1df:	e8 94 35 fe ff       	call   c0000778 <memset>
c001d1e4:	83 c4 0c             	add    esp,0xc
c001d1e7:	68 00 01 00 00       	push   0x100
c001d1ec:	6a 00                	push   0x0
c001d1ee:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1f5:	50                   	push   eax
c001d1f6:	e8 7d 35 fe ff       	call   c0000778 <memset>
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d206:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d20e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d216:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d21e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d226:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d22a:	0f 86 30 01 00 00    	jbe    c001d360 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d230:	0f b7 f3             	movzx  esi,bx
c001d233:	6b f6 28             	imul   esi,esi,0x28
c001d236:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d23a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d23d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d241:	52                   	push   edx
c001d242:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d246:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d24a:	8b 06                	mov    eax,DWORD PTR [esi]
c001d24c:	6b d2 28             	imul   edx,edx,0x28
c001d24f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d253:	31 d2                	xor    edx,edx
c001d255:	52                   	push   edx
c001d256:	50                   	push   eax
c001d257:	55                   	push   ebp
c001d258:	e8 d5 63 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001d25d:	83 c4 0c             	add    esp,0xc
c001d260:	6a 20                	push   0x20
c001d262:	6a 00                	push   0x0
c001d264:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d26b:	51                   	push   ecx
c001d26c:	e8 07 35 fe ff       	call   c0000778 <memset>
c001d271:	59                   	pop    ecx
c001d272:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d275:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d279:	52                   	push   edx
c001d27a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d281:	51                   	push   ecx
c001d282:	6a 00                	push   0x0
c001d284:	6a 1f                	push   0x1f
c001d286:	55                   	push   ebp
c001d287:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d28a:	83 c4 1c             	add    esp,0x1c
c001d28d:	6a 09                	push   0x9
c001d28f:	68 64 c1 02 c0       	push   0xc002c164
c001d294:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d29b:	51                   	push   ecx
c001d29c:	e8 9f 33 fe ff       	call   c0000640 <memcmp>
c001d2a1:	83 c4 10             	add    esp,0x10
c001d2a4:	85 c0                	test   eax,eax
c001d2a6:	75 21                	jne    c001d2c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2b0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2b8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2bb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2c2:	89 d0                	mov    eax,edx
c001d2c4:	40                   	inc    eax
c001d2c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2c9:	50                   	push   eax
c001d2ca:	6a 09                	push   0x9
c001d2cc:	68 6e c1 02 c0       	push   0xc002c16e
c001d2d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2d8:	50                   	push   eax
c001d2d9:	e8 62 33 fe ff       	call   c0000640 <memcmp>
c001d2de:	83 c4 10             	add    esp,0x10
c001d2e1:	85 c0                	test   eax,eax
c001d2e3:	75 21                	jne    c001d306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2ed:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2f8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2ff:	89 d0                	mov    eax,edx
c001d301:	40                   	inc    eax
c001d302:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d306:	50                   	push   eax
c001d307:	50                   	push   eax
c001d308:	68 3a c1 02 c0       	push   0xc002c13a
c001d30d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d314:	50                   	push   eax
c001d315:	e8 a6 35 fe ff       	call   c00008c0 <strcmp>
c001d31a:	83 c4 10             	add    esp,0x10
c001d31d:	85 c0                	test   eax,eax
c001d31f:	75 0f                	jne    c001d330 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d321:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d324:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d32c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d330:	50                   	push   eax
c001d331:	50                   	push   eax
c001d332:	68 42 c1 02 c0       	push   0xc002c142
c001d337:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d33e:	50                   	push   eax
c001d33f:	e8 7c 35 fe ff       	call   c00008c0 <strcmp>
c001d344:	83 c4 10             	add    esp,0x10
c001d347:	85 c0                	test   eax,eax
c001d349:	75 0f                	jne    c001d35a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d34b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d34e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d356:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d35a:	43                   	inc    ebx
c001d35b:	e9 c6 fe ff ff       	jmp    c001d226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d360:	31 d2                	xor    edx,edx
c001d362:	50                   	push   eax
c001d363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d367:	52                   	push   edx
c001d368:	50                   	push   eax
c001d369:	55                   	push   ebp
c001d36a:	e8 c3 62 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001d36f:	58                   	pop    eax
c001d370:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d374:	e8 ca 24 ff ff       	call   c000f843 <malloc>
c001d379:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d37c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d380:	31 d2                	xor    edx,edx
c001d382:	58                   	pop    eax
c001d383:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d387:	53                   	push   ebx
c001d388:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d38c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d390:	52                   	push   edx
c001d391:	50                   	push   eax
c001d392:	55                   	push   ebp
c001d393:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d396:	83 c4 14             	add    esp,0x14
c001d399:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d39d:	e8 a1 24 ff ff       	call   c000f843 <malloc>
c001d3a2:	31 d2                	xor    edx,edx
c001d3a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3a8:	83 c4 0c             	add    esp,0xc
c001d3ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3af:	52                   	push   edx
c001d3b0:	50                   	push   eax
c001d3b1:	55                   	push   ebp
c001d3b2:	e8 7b 62 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001d3b7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3ba:	31 d2                	xor    edx,edx
c001d3bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3c7:	52                   	push   edx
c001d3c8:	50                   	push   eax
c001d3c9:	55                   	push   ebp
c001d3ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3cd:	83 c4 20             	add    esp,0x20
c001d3d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3dc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3e0:	0f 84 f1 02 00 00    	je     c001d6d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3e6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3ed:	31 d2                	xor    edx,edx
c001d3ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3f3:	c1 e8 03             	shr    eax,0x3
c001d3f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3fa:	51                   	push   ecx
c001d3fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3ff:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d403:	52                   	push   edx
c001d404:	50                   	push   eax
c001d405:	55                   	push   ebp
c001d406:	e8 27 62 ff ff       	call   c0013632 <File::seek(unsigned long long)>
c001d40b:	5b                   	pop    ebx
c001d40c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d410:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d417:	e8 27 24 ff ff       	call   c000f843 <malloc>
c001d41c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d41f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d423:	31 d2                	xor    edx,edx
c001d425:	5e                   	pop    esi
c001d426:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d42a:	50                   	push   eax
c001d42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d42f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d433:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d43a:	52                   	push   edx
c001d43b:	50                   	push   eax
c001d43c:	55                   	push   ebp
c001d43d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d440:	83 c4 20             	add    esp,0x20
c001d443:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d44b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d44f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d453:	0f 8d 62 02 00 00    	jge    c001d6bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d459:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d45d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d461:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d466:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d469:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d46d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d471:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d475:	89 d8                	mov    eax,ebx
c001d477:	c1 e8 08             	shr    eax,0x8
c001d47a:	89 c6                	mov    esi,eax
c001d47c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d480:	c1 e6 04             	shl    esi,0x4
c001d483:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d487:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d48a:	85 d2                	test   edx,edx
c001d48c:	0f 85 bf 00 00 00    	jne    c001d551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d499:	03 06                	add    eax,DWORD PTR [esi]
c001d49b:	50                   	push   eax
c001d49c:	e8 4b f8 ff ff       	call   c001ccec <Thr::getAddressOfKernelSymbol(char const*)>
c001d4a1:	83 c4 10             	add    esp,0x10
c001d4a4:	89 c2                	mov    edx,eax
c001d4a6:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4ab:	85 c0                	test   eax,eax
c001d4ad:	0f 85 9e 00 00 00    	jne    c001d551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4b3:	83 ec 0c             	sub    esp,0xc
c001d4b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4ba:	03 06                	add    eax,DWORD PTR [esi]
c001d4bc:	50                   	push   eax
c001d4bd:	e8 33 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4c2:	83 c4 10             	add    esp,0x10
c001d4c5:	89 c2                	mov    edx,eax
c001d4c7:	85 c0                	test   eax,eax
c001d4c9:	0f 85 82 00 00 00    	jne    c001d551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4cf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4d3:	50                   	push   eax
c001d4d4:	50                   	push   eax
c001d4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d9:	03 06                	add    eax,DWORD PTR [esi]
c001d4db:	50                   	push   eax
c001d4dc:	68 78 c1 02 c0       	push   0xc002c178
c001d4e1:	e8 d1 5a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001d4e6:	58                   	pop    eax
c001d4e7:	5a                   	pop    edx
c001d4e8:	68 92 c1 02 c0       	push   0xc002c192
c001d4ed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4f4:	50                   	push   eax
c001d4f5:	e8 3a 33 fe ff       	call   c0000834 <strcpy>
c001d4fa:	59                   	pop    ecx
c001d4fb:	58                   	pop    eax
c001d4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d500:	03 06                	add    eax,DWORD PTR [esi]
c001d502:	50                   	push   eax
c001d503:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d50a:	50                   	push   eax
c001d50b:	e8 64 34 fe ff       	call   c0000974 <strcat>
c001d510:	58                   	pop    eax
c001d511:	5a                   	pop    edx
c001d512:	68 28 c2 02 c0       	push   0xc002c228
c001d517:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d51e:	50                   	push   eax
c001d51f:	e8 50 34 fe ff       	call   c0000974 <strcat>
c001d524:	83 c4 10             	add    esp,0x10
c001d527:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d52c:	0f 84 43 01 00 00    	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d532:	83 ec 0c             	sub    esp,0xc
c001d535:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d53c:	50                   	push   eax
c001d53d:	e8 23 d1 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d549:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d54d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d551:	80 fb 01             	cmp    bl,0x1
c001d554:	75 7d                	jne    c001d5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d556:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d55d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d561:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d565:	01 ce                	add    esi,ecx
c001d567:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d56d:	0f 94 c0             	sete   al
c001d570:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d576:	0f 94 c3             	sete   bl
c001d579:	09 c3                	or     ebx,eax
c001d57b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d57d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d582:	74 36                	je     c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d584:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d587:	84 db                	test   bl,bl
c001d589:	75 0a                	jne    c001d595 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d58b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d58f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d593:	76 37                	jbe    c001d5cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d595:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d599:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d59e:	0f 84 d1 00 00 00    	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5a4:	83 ec 0c             	sub    esp,0xc
c001d5a7:	68 a9 c1 02 c0       	push   0xc002c1a9
c001d5ac:	e8 b4 d0 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5b8:	eb 12                	jmp    c001d5cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ba:	01 c1                	add    ecx,eax
c001d5bc:	84 db                	test   bl,bl
c001d5be:	75 0c                	jne    c001d5cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5c0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5c4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5c8:	77 02                	ja     c001d5cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ca:	01 d1                	add    ecx,edx
c001d5cc:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5ce:	e9 df 00 00 00       	jmp    c001d6b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5d3:	80 fb 02             	cmp    bl,0x2
c001d5d6:	75 71                	jne    c001d649 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5d8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5df:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5e3:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5e7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5ed:	74 15                	je     c001d604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5ef:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5f5:	74 0d                	je     c001d604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5fb:	83 e8 04             	sub    eax,0x4
c001d5fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d602:	76 1f                	jbe    c001d623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d604:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d608:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d60d:	74 66                	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d60f:	83 ec 0c             	sub    esp,0xc
c001d612:	68 c5 c1 02 c0       	push   0xc002c1c5
c001d617:	e8 49 d0 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d61c:	83 c4 10             	add    esp,0x10
c001d61f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d623:	8b 06                	mov    eax,DWORD PTR [esi]
c001d625:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d62a:	74 13                	je     c001d63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d62c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d630:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d637:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d63b:	01 c8                	add    eax,ecx
c001d63d:	eb 04                	jmp    c001d643 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d63f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d643:	01 c2                	add    edx,eax
c001d645:	89 16                	mov    DWORD PTR [esi],edx
c001d647:	eb 69                	jmp    c001d6b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d649:	0f b6 db             	movzx  ebx,bl
c001d64c:	50                   	push   eax
c001d64d:	50                   	push   eax
c001d64e:	53                   	push   ebx
c001d64f:	68 e1 c1 02 c0       	push   0xc002c1e1
c001d654:	e8 5e 59 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001d659:	83 c4 10             	add    esp,0x10
c001d65c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d661:	74 12                	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d663:	83 ec 0c             	sub    esp,0xc
c001d666:	68 ec c1 02 c0       	push   0xc002c1ec
c001d66b:	e8 f5 cf ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d670:	83 c4 10             	add    esp,0x10
c001d673:	eb 3d                	jmp    c001d6b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d675:	83 ec 0c             	sub    esp,0xc
c001d678:	55                   	push   ebp
c001d679:	e8 54 5f ff ff       	call   c00135d2 <File::close()>
c001d67e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d681:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d684:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d687:	59                   	pop    ecx
c001d688:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d68c:	e8 c2 21 ff ff       	call   c000f853 <free>
c001d691:	5b                   	pop    ebx
c001d692:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d696:	e8 b8 21 ff ff       	call   c000f853 <free>
c001d69b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d69e:	e8 b0 21 ff ff       	call   c000f853 <free>
c001d6a3:	5e                   	pop    esi
c001d6a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6a8:	e8 a6 21 ff ff       	call   c000f853 <free>
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	eb 21                	jmp    c001d6d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6b2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6b6:	e9 90 fd ff ff       	jmp    c001d44b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6bb:	83 ec 0c             	sub    esp,0xc
c001d6be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6c2:	e8 8c 21 ff ff       	call   c000f853 <free>
c001d6c7:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6cb:	83 c4 10             	add    esp,0x10
c001d6ce:	e9 05 fd ff ff       	jmp    c001d3d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6d3:	31 c0                	xor    eax,eax
c001d6d5:	eb 33                	jmp    c001d70a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6d7:	83 ec 0c             	sub    esp,0xc
c001d6da:	55                   	push   ebp
c001d6db:	e8 f2 5e ff ff       	call   c00135d2 <File::close()>
c001d6e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6e9:	58                   	pop    eax
c001d6ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6ee:	e8 60 21 ff ff       	call   c000f853 <free>
c001d6f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6f6:	e8 58 21 ff ff       	call   c000f853 <free>
c001d6fb:	5a                   	pop    edx
c001d6fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d700:	e8 4e 21 ff ff       	call   c000f853 <free>
c001d705:	83 c4 10             	add    esp,0x10
c001d708:	b0 01                	mov    al,0x1
c001d70a:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d710:	5b                   	pop    ebx
c001d711:	5e                   	pop    esi
c001d712:	5f                   	pop    edi
c001d713:	5d                   	pop    ebp
c001d714:	c3                   	ret    

c001d715 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d715:	56                   	push   esi
c001d716:	31 d2                	xor    edx,edx
c001d718:	53                   	push   ebx
c001d719:	8b 1d 60 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031260
c001d71f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d723:	39 d3                	cmp    ebx,edx
c001d725:	7e 1b                	jle    c001d742 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d727:	8b 04 95 80 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceb80]
c001d72e:	39 c8                	cmp    eax,ecx
c001d730:	77 0d                	ja     c001d73f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d732:	8b 34 95 80 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffced80]
c001d739:	01 c6                	add    esi,eax
c001d73b:	39 ce                	cmp    esi,ecx
c001d73d:	77 05                	ja     c001d744 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d73f:	42                   	inc    edx
c001d740:	eb e1                	jmp    c001d723 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d742:	31 c0                	xor    eax,eax
c001d744:	5b                   	pop    ebx
c001d745:	5e                   	pop    esi
c001d746:	c3                   	ret    

c001d747 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d747:	53                   	push   ebx
c001d748:	31 c0                	xor    eax,eax
c001d74a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d74e:	8b 1d 60 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031260
c001d754:	39 c3                	cmp    ebx,eax
c001d756:	7e 22                	jle    c001d77a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d758:	8b 14 85 80 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceb80]
c001d75f:	39 ca                	cmp    edx,ecx
c001d761:	77 14                	ja     c001d777 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d763:	03 14 85 80 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffced80]
c001d76a:	39 ca                	cmp    edx,ecx
c001d76c:	76 09                	jbe    c001d777 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d76e:	8b 04 85 80 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce980]
c001d775:	eb 05                	jmp    c001d77c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d777:	40                   	inc    eax
c001d778:	eb da                	jmp    c001d754 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d77a:	31 c0                	xor    eax,eax
c001d77c:	5b                   	pop    ebx
c001d77d:	c3                   	ret    

c001d77e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d77e:	53                   	push   ebx
c001d77f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d783:	53                   	push   ebx
c001d784:	e8 8c ff ff ff       	call   c001d715 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d789:	5a                   	pop    edx
c001d78a:	31 d2                	xor    edx,edx
c001d78c:	85 c0                	test   eax,eax
c001d78e:	74 04                	je     c001d794 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d790:	89 da                	mov    edx,ebx
c001d792:	29 c2                	sub    edx,eax
c001d794:	89 d0                	mov    eax,edx
c001d796:	5b                   	pop    ebx
c001d797:	c3                   	ret    

c001d798 <Thr::loadDLL(char const*, bool)>:
c001d798:	55                   	push   ebp
c001d799:	57                   	push   edi
c001d79a:	56                   	push   esi
c001d79b:	53                   	push   ebx
c001d79c:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7a2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7a9:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7b0:	56                   	push   esi
c001d7b1:	68 04 c2 02 c0       	push   0xc002c204
c001d7b6:	e8 fc 57 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001d7bb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7c2:	e8 7c 20 ff ff       	call   c000f843 <malloc>
c001d7c7:	83 c4 0c             	add    esp,0xc
c001d7ca:	89 c3                	mov    ebx,eax
c001d7cc:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c001d7d2:	56                   	push   esi
c001d7d3:	50                   	push   eax
c001d7d4:	e8 37 5d ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001d7d9:	83 c4 10             	add    esp,0x10
c001d7dc:	85 db                	test   ebx,ebx
c001d7de:	75 3c                	jne    c001d81c <Thr::loadDLL(char const*, bool)+0x84>
c001d7e0:	89 e8                	mov    eax,ebp
c001d7e2:	84 c0                	test   al,al
c001d7e4:	0f 84 f0 01 00 00    	je     c001d9da <Thr::loadDLL(char const*, bool)+0x242>
c001d7ea:	50                   	push   eax
c001d7eb:	50                   	push   eax
c001d7ec:	68 15 c2 02 c0       	push   0xc002c215
c001d7f1:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7f5:	57                   	push   edi
c001d7f6:	e8 39 30 fe ff       	call   c0000834 <strcpy>
c001d7fb:	58                   	pop    eax
c001d7fc:	5a                   	pop    edx
c001d7fd:	56                   	push   esi
c001d7fe:	57                   	push   edi
c001d7ff:	e8 70 31 fe ff       	call   c0000974 <strcat>
c001d804:	59                   	pop    ecx
c001d805:	58                   	pop    eax
c001d806:	68 28 c2 02 c0       	push   0xc002c228
c001d80b:	57                   	push   edi
c001d80c:	e8 63 31 fe ff       	call   c0000974 <strcat>
c001d811:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d814:	e8 4c ce ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d819:	83 c4 10             	add    esp,0x10
c001d81c:	50                   	push   eax
c001d81d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d821:	50                   	push   eax
c001d822:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d826:	50                   	push   eax
c001d827:	53                   	push   ebx
c001d828:	e8 f3 5f ff ff       	call   c0013820 <File::stat(unsigned long long*, bool*)>
c001d82d:	83 c4 10             	add    esp,0x10
c001d830:	85 db                	test   ebx,ebx
c001d832:	74 0c                	je     c001d840 <Thr::loadDLL(char const*, bool)+0xa8>
c001d834:	83 ec 0c             	sub    esp,0xc
c001d837:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d839:	53                   	push   ebx
c001d83a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d845:	75 0a                	jne    c001d851 <Thr::loadDLL(char const*, bool)+0xb9>
c001d847:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d84b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d84f:	75 3c                	jne    c001d88d <Thr::loadDLL(char const*, bool)+0xf5>
c001d851:	89 e8                	mov    eax,ebp
c001d853:	84 c0                	test   al,al
c001d855:	0f 84 67 01 00 00    	je     c001d9c2 <Thr::loadDLL(char const*, bool)+0x22a>
c001d85b:	50                   	push   eax
c001d85c:	50                   	push   eax
c001d85d:	68 15 c2 02 c0       	push   0xc002c215
c001d862:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d866:	53                   	push   ebx
c001d867:	e8 c8 2f fe ff       	call   c0000834 <strcpy>
c001d86c:	58                   	pop    eax
c001d86d:	5a                   	pop    edx
c001d86e:	56                   	push   esi
c001d86f:	53                   	push   ebx
c001d870:	e8 ff 30 fe ff       	call   c0000974 <strcat>
c001d875:	59                   	pop    ecx
c001d876:	5f                   	pop    edi
c001d877:	68 28 c2 02 c0       	push   0xc002c228
c001d87c:	53                   	push   ebx
c001d87d:	e8 f2 30 fe ff       	call   c0000974 <strcat>
c001d882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d885:	e8 db cd ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d88a:	83 c4 10             	add    esp,0x10
c001d88d:	e8 88 45 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001d892:	51                   	push   ecx
c001d893:	68 03 08 00 00       	push   0x803
c001d898:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d89c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8a0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8a6:	83 d3 00             	adc    ebx,0x0
c001d8a9:	89 ca                	mov    edx,ecx
c001d8ab:	89 d1                	mov    ecx,edx
c001d8ad:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8b1:	51                   	push   ecx
c001d8b2:	50                   	push   eax
c001d8b3:	e8 b4 4b ff ff       	call   c001246c <VAS::allocatePages(int, int)>
c001d8b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d8bc:	89 c3                	mov    ebx,eax
c001d8be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8c2:	05 ff 0f 00 00       	add    eax,0xfff
c001d8c7:	83 d2 00             	adc    edx,0x0
c001d8ca:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8ce:	c1 ea 0c             	shr    edx,0xc
c001d8d1:	52                   	push   edx
c001d8d2:	50                   	push   eax
c001d8d3:	53                   	push   ebx
c001d8d4:	68 2a c2 02 c0       	push   0xc002c22a
c001d8d9:	e8 d9 56 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001d8de:	83 c4 14             	add    esp,0x14
c001d8e1:	56                   	push   esi
c001d8e2:	e8 ad 2e fe ff       	call   c0000794 <strlen>
c001d8e7:	8b 3d 60 12 03 c0    	mov    edi,DWORD PTR ds:0xc0031260
c001d8ed:	40                   	inc    eax
c001d8ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8f1:	e8 4d 1f ff ff       	call   c000f843 <malloc>
c001d8f6:	89 04 bd 80 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffce980],eax
c001d8fd:	5f                   	pop    edi
c001d8fe:	58                   	pop    eax
c001d8ff:	a1 60 12 03 c0       	mov    eax,ds:0xc0031260
c001d904:	56                   	push   esi
c001d905:	ff 34 85 80 16 03 c0 	push   DWORD PTR [eax*4-0x3ffce980]
c001d90c:	e8 23 2f fe ff       	call   c0000834 <strcpy>
c001d911:	a1 60 12 03 c0       	mov    eax,ds:0xc0031260
c001d916:	8d 50 01             	lea    edx,[eax+0x1]
c001d919:	89 1c 85 80 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb80],ebx
c001d920:	89 15 60 12 03 c0    	mov    DWORD PTR ds:0xc0031260,edx
c001d926:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d92a:	83 c4 0c             	add    esp,0xc
c001d92d:	89 14 85 80 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced80],edx
c001d934:	6a 01                	push   0x1
c001d936:	53                   	push   ebx
c001d937:	56                   	push   esi
c001d938:	e8 bc f6 ff ff       	call   c001cff9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d93d:	83 c4 10             	add    esp,0x10
c001d940:	89 c7                	mov    edi,eax
c001d942:	84 c0                	test   al,al
c001d944:	0f 85 8c 00 00 00    	jne    c001d9d6 <Thr::loadDLL(char const*, bool)+0x23e>
c001d94a:	89 e8                	mov    eax,ebp
c001d94c:	84 c0                	test   al,al
c001d94e:	74 76                	je     c001d9c6 <Thr::loadDLL(char const*, bool)+0x22e>
c001d950:	83 ec 0c             	sub    esp,0xc
c001d953:	68 4e c2 02 c0       	push   0xc002c24e
c001d958:	e8 08 cd ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d95d:	83 c4 10             	add    esp,0x10
c001d960:	eb 64                	jmp    c001d9c6 <Thr::loadDLL(char const*, bool)+0x22e>
c001d962:	e8 b3 44 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001d967:	89 f5                	mov    ebp,esi
c001d969:	c1 e5 0c             	shl    ebp,0xc
c001d96c:	52                   	push   edx
c001d96d:	01 dd                	add    ebp,ebx
c001d96f:	52                   	push   edx
c001d970:	55                   	push   ebp
c001d971:	50                   	push   eax
c001d972:	e8 6f 46 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c001d977:	83 c4 10             	add    esp,0x10
c001d97a:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d97d:	75 0c                	jne    c001d98b <Thr::loadDLL(char const*, bool)+0x1f3>
c001d97f:	83 ec 0c             	sub    esp,0xc
c001d982:	55                   	push   ebp
c001d983:	e8 d3 24 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001d988:	83 c4 10             	add    esp,0x10
c001d98b:	46                   	inc    esi
c001d98c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d994:	05 ff 0f 00 00       	add    eax,0xfff
c001d999:	83 d2 00             	adc    edx,0x0
c001d99c:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9a0:	c1 ea 0c             	shr    edx,0xc
c001d9a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9ab:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9af:	ba 00 00 00 00       	mov    edx,0x0
c001d9b4:	89 d0                	mov    eax,edx
c001d9b6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9ba:	72 a6                	jb     c001d962 <Thr::loadDLL(char const*, bool)+0x1ca>
c001d9bc:	89 f8                	mov    eax,edi
c001d9be:	84 c0                	test   al,al
c001d9c0:	75 18                	jne    c001d9da <Thr::loadDLL(char const*, bool)+0x242>
c001d9c2:	31 db                	xor    ebx,ebx
c001d9c4:	eb 14                	jmp    c001d9da <Thr::loadDLL(char const*, bool)+0x242>
c001d9c6:	83 ec 0c             	sub    esp,0xc
c001d9c9:	68 6d c2 02 c0       	push   0xc002c26d
c001d9ce:	e8 92 cc ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001d9d3:	83 c4 10             	add    esp,0x10
c001d9d6:	31 f6                	xor    esi,esi
c001d9d8:	eb b2                	jmp    c001d98c <Thr::loadDLL(char const*, bool)+0x1f4>
c001d9da:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9e0:	89 d8                	mov    eax,ebx
c001d9e2:	5b                   	pop    ebx
c001d9e3:	5e                   	pop    esi
c001d9e4:	5f                   	pop    edi
c001d9e5:	5d                   	pop    ebp
c001d9e6:	c3                   	ret    

c001d9e7 <Thr::executeDLL(unsigned long, void*)>:
c001d9e7:	56                   	push   esi
c001d9e8:	53                   	push   ebx
c001d9e9:	52                   	push   edx
c001d9ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9f2:	85 db                	test   ebx,ebx
c001d9f4:	75 10                	jne    c001da06 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9f6:	83 ec 0c             	sub    esp,0xc
c001d9f9:	68 89 c2 02 c0       	push   0xc002c289
c001d9fe:	e8 62 cc ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001da03:	83 c4 10             	add    esp,0x10
c001da06:	50                   	push   eax
c001da07:	50                   	push   eax
c001da08:	53                   	push   ebx
c001da09:	68 b3 c2 02 c0       	push   0xc002c2b3
c001da0e:	e8 a4 55 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001da13:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da17:	89 d8                	mov    eax,ebx
c001da19:	83 c4 14             	add    esp,0x14
c001da1c:	5b                   	pop    ebx
c001da1d:	5e                   	pop    esi
c001da1e:	ff e0                	jmp    eax

c001da20 <changeTSS>:
c001da20:	83 ec 14             	sub    esp,0x14
c001da23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da28:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da30:	c1 e2 15             	shl    edx,0x15
c001da33:	29 d0                	sub    eax,edx
c001da35:	50                   	push   eax
c001da36:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001da3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da41:	05 7c 11 00 00       	add    eax,0x117c
c001da46:	50                   	push   eax
c001da47:	e8 72 3a ff ff       	call   c00114be <TSS::setESP(unsigned long)>
c001da4c:	83 c4 1c             	add    esp,0x1c
c001da4f:	c3                   	ret    

c001da50 <Process::addArgs(char**)>:
c001da50:	57                   	push   edi
c001da51:	56                   	push   esi
c001da52:	53                   	push   ebx
c001da53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da57:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da5b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da65:	85 ff                	test   edi,edi
c001da67:	74 3d                	je     c001daa6 <Process::addArgs(char**)+0x56>
c001da69:	8b 07                	mov    eax,DWORD PTR [edi]
c001da6b:	85 c0                	test   eax,eax
c001da6d:	74 37                	je     c001daa6 <Process::addArgs(char**)+0x56>
c001da6f:	31 db                	xor    ebx,ebx
c001da71:	83 ec 0c             	sub    esp,0xc
c001da74:	50                   	push   eax
c001da75:	e8 1a 2d fe ff       	call   c0000794 <strlen>
c001da7a:	40                   	inc    eax
c001da7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001da7e:	e8 c0 1d ff ff       	call   c000f843 <malloc>
c001da83:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da8a:	5a                   	pop    edx
c001da8b:	59                   	pop    ecx
c001da8c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da8f:	43                   	inc    ebx
c001da90:	50                   	push   eax
c001da91:	e8 9e 2d fe ff       	call   c0000834 <strcpy>
c001da96:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da9c:	83 c4 10             	add    esp,0x10
c001da9f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001daa2:	85 c0                	test   eax,eax
c001daa4:	75 cb                	jne    c001da71 <Process::addArgs(char**)+0x21>
c001daa6:	5b                   	pop    ebx
c001daa7:	5e                   	pop    esi
c001daa8:	5f                   	pop    edi
c001daa9:	c3                   	ret    

c001daaa <Process::Process(char const*, Process*, char**)>:
c001daaa:	56                   	push   esi
c001daab:	53                   	push   ebx
c001daac:	83 ec 14             	sub    esp,0x14
c001daaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab3:	05 0c 02 00 00       	add    eax,0x20c
c001dab8:	bb 07 00 00 00       	mov    ebx,0x7
c001dabd:	89 c6                	mov    esi,eax
c001dabf:	85 db                	test   ebx,ebx
c001dac1:	78 12                	js     c001dad5 <Process::Process(char const*, Process*, char**)+0x2b>
c001dac3:	83 ec 0c             	sub    esp,0xc
c001dac6:	56                   	push   esi
c001dac7:	e8 26 b2 00 00       	call   c0028cf2 <ThreadControlBlock::ThreadControlBlock()>
c001dacc:	83 c4 10             	add    esp,0x10
c001dacf:	83 c6 63             	add    esi,0x63
c001dad2:	4b                   	dec    ebx
c001dad3:	eb ea                	jmp    c001dabf <Process::Process(char const*, Process*, char**)+0x15>
c001dad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dae0:	83 ec 0c             	sub    esp,0xc
c001dae3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dae7:	e8 ca c9 ff ff       	call   c001a4b6 <Krnl::newProcessEnv(Process*)>
c001daec:	83 c4 10             	add    esp,0x10
c001daef:	89 c2                	mov    edx,eax
c001daf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daff:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db08:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001db0d:	8d 50 01             	lea    edx,[eax+0x1]
c001db10:	89 15 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,edx
c001db16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db1a:	89 02                	mov    DWORD PTR [edx],eax
c001db1c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db24:	83 ec 0c             	sub    esp,0xc
c001db27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db2b:	e8 13 1d ff ff       	call   c000f843 <malloc>
c001db30:	83 c4 10             	add    esp,0x10
c001db33:	89 c3                	mov    ebx,eax
c001db35:	83 ec 08             	sub    esp,0x8
c001db38:	6a 00                	push   0x0
c001db3a:	53                   	push   ebx
c001db3b:	e8 d4 4c ff ff       	call   c0012814 <VAS::VAS(bool)>
c001db40:	83 c4 10             	add    esp,0x10
c001db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db47:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db63:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db73:	85 c0                	test   eax,eax
c001db75:	74 42                	je     c001dbb9 <Process::Process(char const*, Process*, char**)+0x10f>
c001db77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db81:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db95:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db9b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba5:	05 0c 01 00 00       	add    eax,0x10c
c001dbaa:	83 ec 08             	sub    esp,0x8
c001dbad:	52                   	push   edx
c001dbae:	50                   	push   eax
c001dbaf:	e8 80 2c fe ff       	call   c0000834 <strcpy>
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	eb 63                	jmp    c001dc1c <Process::Process(char const*, Process*, char**)+0x172>
c001dbb9:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbc1:	83 ec 0c             	sub    esp,0xc
c001dbc4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbc8:	e8 76 1c ff ff       	call   c000f843 <malloc>
c001dbcd:	83 c4 10             	add    esp,0x10
c001dbd0:	89 c3                	mov    ebx,eax
c001dbd2:	83 ec 08             	sub    esp,0x8
c001dbd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd9:	53                   	push   ebx
c001dbda:	e8 dd 35 ff ff       	call   c00111bc <VgaText::VgaText(char const*)>
c001dbdf:	83 c4 10             	add    esp,0x10
c001dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbf6:	83 ec 0c             	sub    esp,0xc
c001dbf9:	50                   	push   eax
c001dbfa:	e8 b0 29 ff ff       	call   c00105af <addToTerminalCycle(VgaText*)>
c001dbff:	83 c4 10             	add    esp,0x10
c001dc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc06:	05 0c 01 00 00       	add    eax,0x10c
c001dc0b:	83 ec 08             	sub    esp,0x8
c001dc0e:	68 d2 c2 02 c0       	push   0xc002c2d2
c001dc13:	50                   	push   eax
c001dc14:	e8 1b 2c fe ff       	call   c0000834 <strcpy>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc20:	83 c0 0c             	add    eax,0xc
c001dc23:	83 ec 08             	sub    esp,0x8
c001dc26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc2a:	50                   	push   eax
c001dc2b:	e8 04 2c fe ff       	call   c0000834 <strcpy>
c001dc30:	83 c4 10             	add    esp,0x10
c001dc33:	83 ec 08             	sub    esp,0x8
c001dc36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3e:	e8 0d fe ff ff       	call   c001da50 <Process::addArgs(char**)>
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	83 ec 08             	sub    esp,0x8
c001dc49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc51:	e8 6d ee ff ff       	call   c001cac3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc56:	83 c4 10             	add    esp,0x10
c001dc59:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc61:	83 f0 01             	xor    eax,0x1
c001dc64:	88 c2                	mov    dl,al
c001dc66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc6a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc70:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc75:	83 ec 08             	sub    esp,0x8
c001dc78:	50                   	push   eax
c001dc79:	68 d0 c3 02 c0       	push   0xc002c3d0
c001dc7e:	e8 34 53 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001dc83:	83 c4 10             	add    esp,0x10
c001dc86:	90                   	nop
c001dc87:	83 c4 14             	add    esp,0x14
c001dc8a:	5b                   	pop    ebx
c001dc8b:	5e                   	pop    esi
c001dc8c:	c3                   	ret    
c001dc8d:	90                   	nop

c001dc8e <Process::Process(bool, char const*, Process*, char**)>:
c001dc8e:	56                   	push   esi
c001dc8f:	53                   	push   ebx
c001dc90:	83 ec 24             	sub    esp,0x24
c001dc93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc97:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9f:	05 0c 02 00 00       	add    eax,0x20c
c001dca4:	bb 07 00 00 00       	mov    ebx,0x7
c001dca9:	89 c6                	mov    esi,eax
c001dcab:	85 db                	test   ebx,ebx
c001dcad:	78 12                	js     c001dcc1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dcaf:	83 ec 0c             	sub    esp,0xc
c001dcb2:	56                   	push   esi
c001dcb3:	e8 3a b0 00 00       	call   c0028cf2 <ThreadControlBlock::ThreadControlBlock()>
c001dcb8:	83 c4 10             	add    esp,0x10
c001dcbb:	83 c6 63             	add    esi,0x63
c001dcbe:	4b                   	dec    ebx
c001dcbf:	eb ea                	jmp    c001dcab <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dccc:	83 ec 0c             	sub    esp,0xc
c001dccf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcd3:	e8 de c7 ff ff       	call   c001a4b6 <Krnl::newProcessEnv(Process*)>
c001dcd8:	83 c4 10             	add    esp,0x10
c001dcdb:	89 c2                	mov    edx,eax
c001dcdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dceb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcf4:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001dcf9:	8d 50 01             	lea    edx,[eax+0x1]
c001dcfc:	89 15 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,edx
c001dd02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd06:	89 02                	mov    DWORD PTR [edx],eax
c001dd08:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd10:	83 ec 0c             	sub    esp,0xc
c001dd13:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd17:	e8 27 1b ff ff       	call   c000f843 <malloc>
c001dd1c:	83 c4 10             	add    esp,0x10
c001dd1f:	89 c3                	mov    ebx,eax
c001dd21:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd26:	83 ec 08             	sub    esp,0x8
c001dd29:	50                   	push   eax
c001dd2a:	53                   	push   ebx
c001dd2b:	e8 e4 4a ff ff       	call   c0012814 <VAS::VAS(bool)>
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd37:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd53:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd63:	85 c0                	test   eax,eax
c001dd65:	74 42                	je     c001dda9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd71:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd85:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd8b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd95:	05 0c 01 00 00       	add    eax,0x10c
c001dd9a:	83 ec 08             	sub    esp,0x8
c001dd9d:	52                   	push   edx
c001dd9e:	50                   	push   eax
c001dd9f:	e8 90 2a fe ff       	call   c0000834 <strcpy>
c001dda4:	83 c4 10             	add    esp,0x10
c001dda7:	eb 63                	jmp    c001de0c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dda9:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ddb1:	83 ec 0c             	sub    esp,0xc
c001ddb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddb8:	e8 86 1a ff ff       	call   c000f843 <malloc>
c001ddbd:	83 c4 10             	add    esp,0x10
c001ddc0:	89 c3                	mov    ebx,eax
c001ddc2:	83 ec 08             	sub    esp,0x8
c001ddc5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddc9:	53                   	push   ebx
c001ddca:	e8 ed 33 ff ff       	call   c00111bc <VgaText::VgaText(char const*)>
c001ddcf:	83 c4 10             	add    esp,0x10
c001ddd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dddc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dde6:	83 ec 0c             	sub    esp,0xc
c001dde9:	50                   	push   eax
c001ddea:	e8 c0 27 ff ff       	call   c00105af <addToTerminalCycle(VgaText*)>
c001ddef:	83 c4 10             	add    esp,0x10
c001ddf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf6:	05 0c 01 00 00       	add    eax,0x10c
c001ddfb:	83 ec 08             	sub    esp,0x8
c001ddfe:	68 d2 c2 02 c0       	push   0xc002c2d2
c001de03:	50                   	push   eax
c001de04:	e8 2b 2a fe ff       	call   c0000834 <strcpy>
c001de09:	83 c4 10             	add    esp,0x10
c001de0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de10:	83 c0 0c             	add    eax,0xc
c001de13:	83 ec 08             	sub    esp,0x8
c001de16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de1a:	50                   	push   eax
c001de1b:	e8 14 2a fe ff       	call   c0000834 <strcpy>
c001de20:	83 c4 10             	add    esp,0x10
c001de23:	83 ec 08             	sub    esp,0x8
c001de26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de2e:	e8 1d fc ff ff       	call   c001da50 <Process::addArgs(char**)>
c001de33:	83 c4 10             	add    esp,0x10
c001de36:	90                   	nop
c001de37:	83 c4 24             	add    esp,0x24
c001de3a:	5b                   	pop    ebx
c001de3b:	5e                   	pop    esi
c001de3c:	c3                   	ret    

c001de3d <disableIRQs()>:
c001de3d:	fa                   	cli    
c001de3e:	ff 05 2c 1a 03 c0    	inc    DWORD PTR ds:0xc0031a2c
c001de44:	c3                   	ret    

c001de45 <getIRQNestingLevel()>:
c001de45:	a1 2c 1a 03 c0       	mov    eax,ds:0xc0031a2c
c001de4a:	c3                   	ret    

c001de4b <enableIRQs()>:
c001de4b:	a1 2c 1a 03 c0       	mov    eax,ds:0xc0031a2c
c001de50:	48                   	dec    eax
c001de51:	a3 2c 1a 03 c0       	mov    ds:0xc0031a2c,eax
c001de56:	75 01                	jne    c001de59 <enableIRQs()+0xe>
c001de58:	fb                   	sti    
c001de59:	c3                   	ret    

c001de5a <lockScheduler()>:
c001de5a:	eb e1                	jmp    c001de3d <disableIRQs()>

c001de5c <unlockScheduler()>:
c001de5c:	eb ed                	jmp    c001de4b <enableIRQs()>

c001de5e <userModeEntryPoint(void*)>:
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	e8 f6 ff ff ff       	call   c001de5c <unlockScheduler()>
c001de66:	fb                   	sti    
c001de67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de6f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de79:	83 c4 0c             	add    esp,0xc
c001de7c:	e9 a9 24 fe ff       	jmp    c000032a <goToUsermode>

c001de81 <lockStuff()>:
c001de81:	e8 b7 ff ff ff       	call   c001de3d <disableIRQs()>
c001de86:	ff 05 28 1a 03 c0    	inc    DWORD PTR ds:0xc0031a28
c001de8c:	c3                   	ret    

c001de8d <taskStartupFunction>:
c001de8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de92:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de95:	c3                   	ret    

c001de96 <updateTimeUsed()>:
c001de96:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c001de9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dea1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dea8:	74 50                	je     c001defa <updateTimeUsed()+0x64>
c001deaa:	57                   	push   edi
c001deab:	56                   	push   esi
c001deac:	53                   	push   ebx
c001dead:	0f 31                	rdtsc  
c001deaf:	89 c1                	mov    ecx,eax
c001deb1:	a3 68 1a 03 c0       	mov    ds:0xc0031a68,eax
c001deb6:	2b 0d 58 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031a58
c001debc:	89 d3                	mov    ebx,edx
c001debe:	89 0d 60 1a 03 c0    	mov    DWORD PTR ds:0xc0031a60,ecx
c001dec4:	1b 1d 5c 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031a5c
c001deca:	a3 58 1a 03 c0       	mov    ds:0xc0031a58,eax
c001decf:	89 1d 64 1a 03 c0    	mov    DWORD PTR ds:0xc0031a64,ebx
c001ded5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deda:	89 15 6c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a6c,edx
c001dee0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dee3:	89 15 5c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a5c,edx
c001dee9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001deec:	01 f1                	add    ecx,esi
c001deee:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001def1:	11 fb                	adc    ebx,edi
c001def3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001def6:	5b                   	pop    ebx
c001def7:	5e                   	pop    esi
c001def8:	5f                   	pop    edi
c001def9:	c3                   	ret    
c001defa:	c3                   	ret    

c001defb <switchToThread(ThreadControlBlock*)>:
c001defb:	53                   	push   ebx
c001defc:	83 ec 08             	sub    esp,0x8
c001deff:	a1 28 1a 03 c0       	mov    eax,ds:0xc0031a28
c001df04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df08:	85 c0                	test   eax,eax
c001df0a:	75 30                	jne    c001df3c <switchToThread(ThreadControlBlock*)+0x41>
c001df0c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df0f:	3c ff                	cmp    al,0xff
c001df11:	74 25                	je     c001df38 <switchToThread(ThreadControlBlock*)+0x3d>
c001df13:	0f b6 d0             	movzx  edx,al
c001df16:	b8 84 03 00 00       	mov    eax,0x384
c001df1b:	29 d0                	sub    eax,edx
c001df1d:	c1 e0 10             	shl    eax,0x10
c001df20:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df23:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df26:	e8 6b ff ff ff       	call   c001de96 <updateTimeUsed()>
c001df2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df2f:	83 c4 08             	add    esp,0x8
c001df32:	5b                   	pop    ebx
c001df33:	e9 2a 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df38:	31 c0                	xor    eax,eax
c001df3a:	eb e7                	jmp    c001df23 <switchToThread(ThreadControlBlock*)+0x28>
c001df3c:	c7 05 24 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a24,0x1
c001df46:	83 c4 08             	add    esp,0x8
c001df49:	5b                   	pop    ebx
c001df4a:	c3                   	ret    
c001df4b:	90                   	nop

c001df4c <Semaphore::Semaphore(int)>:
c001df4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df54:	89 10                	mov    DWORD PTR [eax],edx
c001df56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df5a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df77:	90                   	nop
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <Mutex::Mutex()>:
c001df7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df7e:	6a 01                	push   0x1
c001df80:	50                   	push   eax
c001df81:	e8 c6 ff ff ff       	call   c001df4c <Semaphore::Semaphore(int)>
c001df86:	83 c4 08             	add    esp,0x8
c001df89:	90                   	nop
c001df8a:	c3                   	ret    
c001df8b:	90                   	nop

c001df8c <Process::createThread(void (*)(void*), void*, int)>:
c001df8c:	55                   	push   ebp
c001df8d:	31 c9                	xor    ecx,ecx
c001df8f:	57                   	push   edi
c001df90:	56                   	push   esi
c001df91:	53                   	push   ebx
c001df92:	83 ec 1c             	sub    esp,0x1c
c001df95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df99:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dfa0:	89 f2                	mov    edx,esi
c001dfa2:	0f b7 c2             	movzx  eax,dx
c001dfa5:	83 e2 01             	and    edx,0x1
c001dfa8:	74 14                	je     c001dfbe <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dfaa:	d1 f8                	sar    eax,1
c001dfac:	41                   	inc    ecx
c001dfad:	89 c2                	mov    edx,eax
c001dfaf:	83 f9 10             	cmp    ecx,0x10
c001dfb2:	75 ee                	jne    c001dfa2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfb4:	83 c4 1c             	add    esp,0x1c
c001dfb7:	31 c0                	xor    eax,eax
c001dfb9:	5b                   	pop    ebx
c001dfba:	5e                   	pop    esi
c001dfbb:	5f                   	pop    edi
c001dfbc:	5d                   	pop    ebp
c001dfbd:	c3                   	ret    
c001dfbe:	83 ec 08             	sub    esp,0x8
c001dfc1:	b8 01 00 00 00       	mov    eax,0x1
c001dfc6:	d3 e0                	shl    eax,cl
c001dfc8:	09 c6                	or     esi,eax
c001dfca:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfd0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfd7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dfda:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfdd:	01 ce                	add    esi,ecx
c001dfdf:	89 f0                	mov    eax,esi
c001dfe1:	c1 e0 05             	shl    eax,0x5
c001dfe4:	01 c6                	add    esi,eax
c001dfe6:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dfe9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dfef:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dff5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dff9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfff:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e005:	89 ca                	mov    edx,ecx
c001e007:	f7 da                	neg    edx
c001e009:	c1 e2 15             	shl    edx,0x15
c001e00c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e012:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e018:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e01c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e026:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e02c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e030:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e036:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e040:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e04a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e051:	50                   	push   eax
c001e052:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e056:	68 48 1a 03 c0       	push   0xc0031a48
c001e05b:	e8 20 ab 00 00       	call   c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e060:	83 c4 10             	add    esp,0x10
c001e063:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e067:	83 c4 1c             	add    esp,0x1c
c001e06a:	5b                   	pop    ebx
c001e06b:	5e                   	pop    esi
c001e06c:	5f                   	pop    edi
c001e06d:	5d                   	pop    ebp
c001e06e:	c3                   	ret    
c001e06f:	90                   	nop

c001e070 <Process::createUserThread()>:
c001e070:	83 ec 0c             	sub    esp,0xc
c001e073:	68 80 00 00 00       	push   0x80
c001e078:	6a 00                	push   0x0
c001e07a:	68 5e de 01 c0       	push   0xc001de5e
c001e07f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e083:	e8 04 ff ff ff       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c001e088:	83 c4 1c             	add    esp,0x1c
c001e08b:	c3                   	ret    

c001e08c <setupMultitasking(void (*)())>:
c001e08c:	56                   	push   esi
c001e08d:	53                   	push   ebx
c001e08e:	53                   	push   ebx
c001e08f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e093:	eb 10                	jmp    c001e0a5 <setupMultitasking(void (*)())+0x19>
c001e095:	83 ec 0c             	sub    esp,0xc
c001e098:	68 48 1a 03 c0       	push   0xc0031a48
c001e09d:	e8 30 aa 00 00       	call   c0028ad2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0a2:	83 c4 10             	add    esp,0x10
c001e0a5:	83 ec 0c             	sub    esp,0xc
c001e0a8:	68 48 1a 03 c0       	push   0xc0031a48
c001e0ad:	e8 04 aa 00 00       	call   c0028ab6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0b2:	83 c4 10             	add    esp,0x10
c001e0b5:	84 c0                	test   al,al
c001e0b7:	74 dc                	je     c001e095 <setupMultitasking(void (*)())+0x9>
c001e0b9:	83 ec 0c             	sub    esp,0xc
c001e0bc:	68 3f 07 00 00       	push   0x73f
c001e0c1:	e8 7d 17 ff ff       	call   c000f843 <malloc>
c001e0c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0cd:	89 c3                	mov    ebx,eax
c001e0cf:	6a 00                	push   0x0
c001e0d1:	68 d6 c2 02 c0       	push   0xc002c2d6
c001e0d6:	6a 01                	push   0x1
c001e0d8:	50                   	push   eax
c001e0d9:	e8 b0 fb ff ff       	call   c001dc8e <Process::Process(bool, char const*, Process*, char**)>
c001e0de:	83 c4 18             	add    esp,0x18
c001e0e1:	89 1d 54 1a 03 c0    	mov    DWORD PTR ds:0xc0031a54,ebx
c001e0e7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0ed:	68 f8 c3 02 c0       	push   0xc002c3f8
c001e0f2:	e8 c0 4e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e0f7:	58                   	pop    eax
c001e0f8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0fe:	e8 2e 2c ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c001e103:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e10b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e111:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e114:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e11e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e124:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e12a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e134:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e13e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e148:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e14e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e154:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e15e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e164:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e16e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e174:	5a                   	pop    edx
c001e175:	59                   	pop    ecx
c001e176:	68 d2 c2 02 c0       	push   0xc002c2d2
c001e17b:	50                   	push   eax
c001e17c:	e8 b3 26 fe ff       	call   c0000834 <strcpy>
c001e181:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e188:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e18c:	83 c4 14             	add    esp,0x14
c001e18f:	5b                   	pop    ebx
c001e190:	5e                   	pop    esi
c001e191:	e9 be 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e196 <schedule()>:
c001e196:	a1 28 1a 03 c0       	mov    eax,ds:0xc0031a28
c001e19b:	85 c0                	test   eax,eax
c001e19d:	74 0b                	je     c001e1aa <schedule()+0x14>
c001e19f:	c7 05 24 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a24,0x1
c001e1a9:	c3                   	ret    
c001e1aa:	53                   	push   ebx
c001e1ab:	83 ec 14             	sub    esp,0x14
c001e1ae:	68 48 1a 03 c0       	push   0xc0031a48
c001e1b3:	e8 fe a8 00 00       	call   c0028ab6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1b8:	83 c4 10             	add    esp,0x10
c001e1bb:	84 c0                	test   al,al
c001e1bd:	75 38                	jne    c001e1f7 <schedule()+0x61>
c001e1bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1c7:	4a                   	dec    edx
c001e1c8:	74 32                	je     c001e1fc <schedule()+0x66>
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	68 48 1a 03 c0       	push   0xc0031a48
c001e1d2:	e8 d7 a8 00 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1d7:	c7 04 24 48 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a48
c001e1de:	89 c3                	mov    ebx,eax
c001e1e0:	e8 ed a8 00 00       	call   c0028ad2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1e5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1ef:	e8 07 fd ff ff       	call   c001defb <switchToThread(ThreadControlBlock*)>
c001e1f4:	83 c4 10             	add    esp,0x10
c001e1f7:	83 c4 08             	add    esp,0x8
c001e1fa:	5b                   	pop    ebx
c001e1fb:	c3                   	ret    
c001e1fc:	83 ec 08             	sub    esp,0x8
c001e1ff:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e206:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e20c:	68 48 1a 03 c0       	push   0xc0031a48
c001e211:	e8 6a a9 00 00       	call   c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	eb af                	jmp    c001e1ca <schedule()+0x34>

c001e21b <unlockStuff()>:
c001e21b:	a1 28 1a 03 c0       	mov    eax,ds:0xc0031a28
c001e220:	48                   	dec    eax
c001e221:	a3 28 1a 03 c0       	mov    ds:0xc0031a28,eax
c001e226:	75 09                	jne    c001e231 <unlockStuff()+0x16>
c001e228:	a1 24 1a 03 c0       	mov    eax,ds:0xc0031a24
c001e22d:	85 c0                	test   eax,eax
c001e22f:	75 05                	jne    c001e236 <unlockStuff()+0x1b>
c001e231:	e9 15 fc ff ff       	jmp    c001de4b <enableIRQs()>
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	c7 05 24 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a24,0x0
c001e243:	e8 4e ff ff ff       	call   c001e196 <schedule()>
c001e248:	83 c4 0c             	add    esp,0xc
c001e24b:	e9 fb fb ff ff       	jmp    c001de4b <enableIRQs()>

c001e250 <Semaphore::tryAcquire()>:
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e257:	e8 25 fc ff ff       	call   c001de81 <lockStuff()>
c001e25c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e25f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e261:	7c 0b                	jl     c001e26e <Semaphore::tryAcquire()+0x1e>
c001e263:	e8 b3 ff ff ff       	call   c001e21b <unlockStuff()>
c001e268:	31 c0                	xor    eax,eax
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    
c001e26e:	42                   	inc    edx
c001e26f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e272:	e8 a4 ff ff ff       	call   c001e21b <unlockStuff()>
c001e277:	b0 01                	mov    al,0x1
c001e279:	83 c4 0c             	add    esp,0xc
c001e27c:	c3                   	ret    
c001e27d:	90                   	nop

c001e27e <Semaphore::assertLocked(char const*)>:
c001e27e:	83 ec 0c             	sub    esp,0xc
c001e281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e285:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e289:	e8 f3 fb ff ff       	call   c001de81 <lockStuff()>
c001e28e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e290:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e293:	7c 05                	jl     c001e29a <Semaphore::assertLocked(char const*)+0x1c>
c001e295:	83 c4 0c             	add    esp,0xc
c001e298:	eb 81                	jmp    c001e21b <unlockStuff()>
c001e29a:	83 ec 0c             	sub    esp,0xc
c001e29d:	52                   	push   edx
c001e29e:	e8 c2 c3 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	83 c4 0c             	add    esp,0xc
c001e2a9:	e9 6d ff ff ff       	jmp    c001e21b <unlockStuff()>

c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	e8 8f fb ff ff       	call   c001de45 <getIRQNestingLevel()>
c001e2b6:	83 ec 08             	sub    esp,0x8
c001e2b9:	50                   	push   eax
c001e2ba:	68 2c c4 02 c0       	push   0xc002c42c
c001e2bf:	e8 f3 4c ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e2c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2d0:	e8 c1 fe ff ff       	call   c001e196 <schedule()>
c001e2d5:	e8 82 fb ff ff       	call   c001de5c <unlockScheduler()>
c001e2da:	e8 66 fb ff ff       	call   c001de45 <getIRQNestingLevel()>
c001e2df:	5a                   	pop    edx
c001e2e0:	59                   	pop    ecx
c001e2e1:	50                   	push   eax
c001e2e2:	68 60 c4 02 c0       	push   0xc002c460
c001e2e7:	e8 cb 4c ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e2ec:	83 c4 1c             	add    esp,0x1c
c001e2ef:	c3                   	ret    

c001e2f0 <blockTask(TaskState)>:
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2f7:	e8 5e fb ff ff       	call   c001de5a <lockScheduler()>
c001e2fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e301:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e304:	e8 8d fe ff ff       	call   c001e196 <schedule()>
c001e309:	83 c4 0c             	add    esp,0xc
c001e30c:	e9 4b fb ff ff       	jmp    c001de5c <unlockScheduler()>

c001e311 <waitTask(int, int*, int)>:
c001e311:	83 ec 18             	sub    esp,0x18
c001e314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e319:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e31d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e320:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e329:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e32c:	6a 07                	push   0x7
c001e32e:	e8 bd ff ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e33e:	85 d2                	test   edx,edx
c001e340:	74 0a                	je     c001e34c <waitTask(int, int*, int)+0x3b>
c001e342:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e345:	89 02                	mov    DWORD PTR [edx],eax
c001e347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e34c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e34f:	83 c4 0c             	add    esp,0xc
c001e352:	c3                   	ret    

c001e353 <nanoSleepUntil(unsigned long long)>:
c001e353:	83 ec 0c             	sub    esp,0xc
c001e356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e35e:	3b 05 70 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002eb70
c001e364:	89 d1                	mov    ecx,edx
c001e366:	1b 0d 74 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eb74
c001e36c:	73 04                	jae    c001e372 <nanoSleepUntil(unsigned long long)+0x1f>
c001e36e:	83 c4 0c             	add    esp,0xc
c001e371:	c3                   	ret    
c001e372:	e8 0a fb ff ff       	call   c001de81 <lockStuff()>
c001e377:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e37d:	83 ec 08             	sub    esp,0x8
c001e380:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e383:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e386:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e38c:	68 3c 1a 03 c0       	push   0xc0031a3c
c001e391:	e8 ea a7 00 00       	call   c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e396:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e39d:	e8 4e ff ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e3a2:	83 c4 1c             	add    esp,0x1c
c001e3a5:	e9 71 fe ff ff       	jmp    c001e21b <unlockStuff()>

c001e3aa <nanoSleep(unsigned long long)>:
c001e3aa:	a1 70 eb 02 c0       	mov    eax,ds:0xc002eb70
c001e3af:	8b 15 74 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb74
c001e3b5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3b9:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3bd:	eb 94                	jmp    c001e353 <nanoSleepUntil(unsigned long long)>

c001e3bf <sleep(unsigned long long)>:
c001e3bf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3c7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3cc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3d0:	01 ca                	add    edx,ecx
c001e3d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3da:	eb ce                	jmp    c001e3aa <nanoSleep(unsigned long long)>

c001e3dc <Semaphore::acquire()>:
c001e3dc:	83 ec 0c             	sub    esp,0xc
c001e3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e3:	e8 99 fa ff ff       	call   c001de81 <lockStuff()>
c001e3e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3eb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3ed:	7d 0c                	jge    c001e3fb <Semaphore::acquire()+0x1f>
c001e3ef:	42                   	inc    edx
c001e3f0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3f3:	83 c4 0c             	add    esp,0xc
c001e3f6:	e9 20 fe ff ff       	jmp    c001e21b <unlockStuff()>
c001e3fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e401:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e408:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e40b:	85 d2                	test   edx,edx
c001e40d:	74 2a                	je     c001e439 <Semaphore::acquire()+0x5d>
c001e40f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e412:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e418:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e41b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e421:	83 ec 0c             	sub    esp,0xc
c001e424:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e427:	6a 05                	push   0x5
c001e429:	e8 c2 fe ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e42e:	83 c4 10             	add    esp,0x10
c001e431:	83 c4 0c             	add    esp,0xc
c001e434:	e9 e2 fd ff ff       	jmp    c001e21b <unlockStuff()>
c001e439:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e43f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e442:	eb d7                	jmp    c001e41b <Semaphore::acquire()+0x3f>

c001e444 <taskReturned>:
c001e444:	83 ec 18             	sub    esp,0x18
c001e447:	68 94 c4 02 c0       	push   0xc002c494
c001e44c:	e8 14 c2 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001e451:	83 c4 10             	add    esp,0x10
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	6a 02                	push   0x2
c001e459:	e8 92 fe ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e45e:	e8 f7 f9 ff ff       	call   c001de5a <lockScheduler()>
c001e463:	e8 2e fd ff ff       	call   c001e196 <schedule()>
c001e468:	e8 ef f9 ff ff       	call   c001de5c <unlockScheduler()>
c001e46d:	83 c4 10             	add    esp,0x10
c001e470:	eb e2                	jmp    c001e454 <taskReturned+0x10>

c001e472 <unblockTask(ThreadControlBlock*)>:
c001e472:	53                   	push   ebx
c001e473:	83 ec 08             	sub    esp,0x8
c001e476:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e47a:	e8 db f9 ff ff       	call   c001de5a <lockScheduler()>
c001e47f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e482:	85 c0                	test   eax,eax
c001e484:	74 5c                	je     c001e4e2 <unblockTask(ThreadControlBlock*)+0x70>
c001e486:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e489:	48                   	dec    eax
c001e48a:	74 31                	je     c001e4bd <unblockTask(ThreadControlBlock*)+0x4b>
c001e48c:	83 ec 0c             	sub    esp,0xc
c001e48f:	68 48 1a 03 c0       	push   0xc0031a48
c001e494:	e8 15 a6 00 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e499:	83 c4 10             	add    esp,0x10
c001e49c:	85 c0                	test   eax,eax
c001e49e:	75 17                	jne    c001e4b7 <unblockTask(ThreadControlBlock*)+0x45>
c001e4a0:	eb 65                	jmp    c001e507 <unblockTask(ThreadControlBlock*)+0x95>
c001e4a2:	83 ec 08             	sub    esp,0x8
c001e4a5:	50                   	push   eax
c001e4a6:	68 48 1a 03 c0       	push   0xc0031a48
c001e4ab:	e8 d8 a8 00 00       	call   c0028d88 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4b0:	83 c4 10             	add    esp,0x10
c001e4b3:	85 c0                	test   eax,eax
c001e4b5:	74 50                	je     c001e507 <unblockTask(ThreadControlBlock*)+0x95>
c001e4b7:	39 c3                	cmp    ebx,eax
c001e4b9:	75 e7                	jne    c001e4a2 <unblockTask(ThreadControlBlock*)+0x30>
c001e4bb:	eb 1c                	jmp    c001e4d9 <unblockTask(ThreadControlBlock*)+0x67>
c001e4bd:	83 ec 0c             	sub    esp,0xc
c001e4c0:	68 84 c5 02 c0       	push   0xc002c584
c001e4c5:	e8 ed 4a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e4ca:	c7 04 24 10 c5 02 c0 	mov    DWORD PTR [esp],0xc002c510
c001e4d1:	e8 e1 4a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e4d6:	83 c4 10             	add    esp,0x10
c001e4d9:	83 c4 08             	add    esp,0x8
c001e4dc:	5b                   	pop    ebx
c001e4dd:	e9 7a f9 ff ff       	jmp    c001de5c <unlockScheduler()>
c001e4e2:	83 ec 0c             	sub    esp,0xc
c001e4e5:	68 c8 c4 02 c0       	push   0xc002c4c8
c001e4ea:	e8 c8 4a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e4ef:	c7 04 24 10 c5 02 c0 	mov    DWORD PTR [esp],0xc002c510
c001e4f6:	e8 bc 4a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e4fb:	83 c4 10             	add    esp,0x10
c001e4fe:	83 c4 08             	add    esp,0x8
c001e501:	5b                   	pop    ebx
c001e502:	e9 55 f9 ff ff       	jmp    c001de5c <unlockScheduler()>
c001e507:	83 ec 08             	sub    esp,0x8
c001e50a:	53                   	push   ebx
c001e50b:	68 48 1a 03 c0       	push   0xc0031a48
c001e510:	e8 6b a6 00 00       	call   c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e515:	83 c4 10             	add    esp,0x10
c001e518:	83 c4 08             	add    esp,0x8
c001e51b:	5b                   	pop    ebx
c001e51c:	e9 3b f9 ff ff       	jmp    c001de5c <unlockScheduler()>

c001e521 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e521:	55                   	push   ebp
c001e522:	57                   	push   edi
c001e523:	56                   	push   esi
c001e524:	53                   	push   ebx
c001e525:	83 ec 1c             	sub    esp,0x1c
c001e528:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e52c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e52f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e535:	85 ff                	test   edi,edi
c001e537:	7e 20                	jle    c001e559 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e539:	31 f6                	xor    esi,esi
c001e53b:	83 ec 0c             	sub    esp,0xc
c001e53e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e545:	46                   	inc    esi
c001e546:	e8 08 13 ff ff       	call   c000f853 <free>
c001e54b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e54e:	83 c4 10             	add    esp,0x10
c001e551:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e557:	7f e2                	jg     c001e53b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e559:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e563:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e568:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e56b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e56e:	d3 c0                	rol    eax,cl
c001e570:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e577:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e57a:	89 f7                	mov    edi,esi
c001e57c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e584:	0f 85 74 01 00 00    	jne    c001e6fe <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e58a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e590:	85 ed                	test   ebp,ebp
c001e592:	74 1b                	je     c001e5af <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e594:	83 ec 0c             	sub    esp,0xc
c001e597:	55                   	push   ebp
c001e598:	e8 35 be ff ff       	call   c001a3d2 <EnvVarContainer::~EnvVarContainer()>
c001e59d:	59                   	pop    ecx
c001e59e:	5e                   	pop    esi
c001e59f:	6a 0c                	push   0xc
c001e5a1:	55                   	push   ebp
c001e5a2:	e8 30 49 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c001e5a7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5aa:	83 c4 10             	add    esp,0x10
c001e5ad:	89 f7                	mov    edi,esi
c001e5af:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5b5:	85 c0                	test   eax,eax
c001e5b7:	0f 84 aa 00 00 00    	je     c001e667 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5bd:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5c0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5c4:	31 c9                	xor    ecx,ecx
c001e5c6:	eb 10                	jmp    c001e5d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5c8:	41                   	inc    ecx
c001e5c9:	83 f9 10             	cmp    ecx,0x10
c001e5cc:	0f 84 95 00 00 00    	je     c001e667 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5d2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5d8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5df:	d3 fa                	sar    edx,cl
c001e5e1:	83 e2 01             	and    edx,0x1
c001e5e4:	74 e2                	je     c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5e6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5e9:	01 ca                	add    edx,ecx
c001e5eb:	89 d5                	mov    ebp,edx
c001e5ed:	c1 e5 05             	shl    ebp,0x5
c001e5f0:	01 ea                	add    edx,ebp
c001e5f2:	01 d0                	add    eax,edx
c001e5f4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5fa:	83 fd 07             	cmp    ebp,0x7
c001e5fd:	75 c9                	jne    c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ff:	05 40 02 00 00       	add    eax,0x240
c001e604:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e607:	83 fd ff             	cmp    ebp,0xffffffff
c001e60a:	0f 8c 08 01 00 00    	jl     c001e718 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e610:	0f 84 b9 01 00 00    	je     c001e7cf <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e616:	85 ed                	test   ebp,ebp
c001e618:	0f 84 a0 01 00 00    	je     c001e7be <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e61e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e620:	75 a6                	jne    c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e622:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e628:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e62c:	01 d0                	add    eax,edx
c001e62e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e632:	83 ec 0c             	sub    esp,0xc
c001e635:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e63b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e644:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e64b:	50                   	push   eax
c001e64c:	e8 21 fe ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001e651:	83 c4 10             	add    esp,0x10
c001e654:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e657:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e65b:	89 f7                	mov    edi,esi
c001e65d:	41                   	inc    ecx
c001e65e:	83 f9 10             	cmp    ecx,0x10
c001e661:	0f 85 6b ff ff ff    	jne    c001e5d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e667:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e66d:	85 c0                	test   eax,eax
c001e66f:	74 5d                	je     c001e6ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e671:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e677:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e67d:	74 4f                	je     c001e6ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e67f:	83 ec 0c             	sub    esp,0xc
c001e682:	68 48 1a 03 c0       	push   0xc0031a48
c001e687:	e8 22 a4 00 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e68c:	c7 04 24 48 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a48
c001e693:	89 c7                	mov    edi,eax
c001e695:	e8 1c a4 00 00       	call   c0028ab6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e69a:	83 c4 10             	add    esp,0x10
c001e69d:	84 c0                	test   al,al
c001e69f:	0f 84 e4 00 00 00    	je     c001e789 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6a5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6a8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6ae:	85 d2                	test   edx,edx
c001e6b0:	74 0f                	je     c001e6c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6b2:	83 ec 0c             	sub    esp,0xc
c001e6b5:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6b7:	52                   	push   edx
c001e6b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6cb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6ce:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6d4:	85 db                	test   ebx,ebx
c001e6d6:	74 16                	je     c001e6ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	53                   	push   ebx
c001e6dc:	e8 1f 3b ff ff       	call   c0012200 <VAS::~VAS()>
c001e6e1:	58                   	pop    eax
c001e6e2:	5a                   	pop    edx
c001e6e3:	6a 14                	push   0x14
c001e6e5:	53                   	push   ebx
c001e6e6:	e8 ec 47 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c001e6eb:	83 c4 10             	add    esp,0x10
c001e6ee:	83 ec 0c             	sub    esp,0xc
c001e6f1:	68 dd c2 02 c0       	push   0xc002c2dd
c001e6f6:	e8 bc 48 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e6fb:	83 c4 10             	add    esp,0x10
c001e6fe:	83 ec 08             	sub    esp,0x8
c001e701:	68 3f 07 00 00       	push   0x73f
c001e706:	68 eb c2 02 c0       	push   0xc002c2eb
c001e70b:	e8 a7 48 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e710:	83 c4 2c             	add    esp,0x2c
c001e713:	5b                   	pop    ebx
c001e714:	5e                   	pop    esi
c001e715:	5f                   	pop    edi
c001e716:	5d                   	pop    ebp
c001e717:	c3                   	ret    
c001e718:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e71c:	83 ec 0c             	sub    esp,0xc
c001e71f:	68 c8 c5 02 c0       	push   0xc002c5c8
c001e724:	e8 3c bf ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001e729:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	89 f7                	mov    edi,esi
c001e731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e735:	e9 8e fe ff ff       	jmp    c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e73a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e740:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e746:	75 1c                	jne    c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e748:	83 ec 0c             	sub    esp,0xc
c001e74b:	68 30 c6 02 c0       	push   0xc002c630
c001e750:	e8 62 48 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e755:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e75c:	e8 8f fb ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	83 ec 08             	sub    esp,0x8
c001e767:	56                   	push   esi
c001e768:	68 48 1a 03 c0       	push   0xc0031a48
c001e76d:	e8 0e a4 00 00       	call   c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e772:	c7 04 24 48 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a48
c001e779:	e8 30 a3 00 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e77e:	83 c4 10             	add    esp,0x10
c001e781:	39 f8                	cmp    eax,edi
c001e783:	0f 84 1c ff ff ff    	je     c001e6a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e789:	83 ec 0c             	sub    esp,0xc
c001e78c:	68 48 1a 03 c0       	push   0xc0031a48
c001e791:	e8 18 a3 00 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e796:	c7 04 24 48 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a48
c001e79d:	89 c6                	mov    esi,eax
c001e79f:	e8 2e a3 00 00       	call   c0028ad2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7a4:	83 c4 10             	add    esp,0x10
c001e7a7:	39 f3                	cmp    ebx,esi
c001e7a9:	74 b9                	je     c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7ab:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7b1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7b7:	75 ab                	jne    c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7b9:	e9 7c ff ff ff       	jmp    c001e73a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7c2:	83 ec 0c             	sub    esp,0xc
c001e7c5:	68 fc c5 02 c0       	push   0xc002c5fc
c001e7ca:	e9 55 ff ff ff       	jmp    c001e724 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7cf:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7d5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7db:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7e1:	01 d7                	add    edi,edx
c001e7e3:	89 f8                	mov    eax,edi
c001e7e5:	e9 44 fe ff ff       	jmp    c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7ea <cleanerTaskFunction(void*)>:
c001e7ea:	53                   	push   ebx
c001e7eb:	83 ec 08             	sub    esp,0x8
c001e7ee:	e8 69 f6 ff ff       	call   c001de5c <unlockScheduler()>
c001e7f3:	e8 62 f6 ff ff       	call   c001de5a <lockScheduler()>
c001e7f8:	80 3d 0c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a0c,0x0
c001e7ff:	0f 85 8e 00 00 00    	jne    c001e893 <cleanerTaskFunction(void*)+0xa9>
c001e805:	83 ec 0c             	sub    esp,0xc
c001e808:	6a 02                	push   0x2
c001e80a:	e8 9f fa ff ff       	call   c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e80f:	83 c4 10             	add    esp,0x10
c001e812:	c6 05 0c 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a0c,0x0
c001e819:	e8 63 f6 ff ff       	call   c001de81 <lockStuff()>
c001e81e:	e8 37 f6 ff ff       	call   c001de5a <lockScheduler()>
c001e823:	83 ec 0c             	sub    esp,0xc
c001e826:	68 30 1a 03 c0       	push   0xc0031a30
c001e82b:	e8 86 a2 00 00       	call   c0028ab6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e830:	83 c4 10             	add    esp,0x10
c001e833:	84 c0                	test   al,al
c001e835:	75 40                	jne    c001e877 <cleanerTaskFunction(void*)+0x8d>
c001e837:	83 ec 0c             	sub    esp,0xc
c001e83a:	68 30 1a 03 c0       	push   0xc0031a30
c001e83f:	e8 6a a2 00 00       	call   c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e844:	c7 04 24 30 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a30
c001e84b:	89 c3                	mov    ebx,eax
c001e84d:	e8 80 a2 00 00       	call   c0028ad2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e852:	c7 04 24 01 c3 02 c0 	mov    DWORD PTR [esp],0xc002c301
c001e859:	e8 59 47 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e85e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e861:	e8 bb fc ff ff       	call   c001e521 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e866:	c7 04 24 1a c3 02 c0 	mov    DWORD PTR [esp],0xc002c31a
c001e86d:	e8 45 47 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e872:	83 c4 10             	add    esp,0x10
c001e875:	eb ac                	jmp    c001e823 <cleanerTaskFunction(void*)+0x39>
c001e877:	e8 e0 f5 ff ff       	call   c001de5c <unlockScheduler()>
c001e87c:	e8 9a f9 ff ff       	call   c001e21b <unlockStuff()>
c001e881:	e8 d4 f5 ff ff       	call   c001de5a <lockScheduler()>
c001e886:	80 3d 0c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a0c,0x0
c001e88d:	0f 84 72 ff ff ff    	je     c001e805 <cleanerTaskFunction(void*)+0x1b>
c001e893:	e8 c4 f5 ff ff       	call   c001de5c <unlockScheduler()>
c001e898:	e9 75 ff ff ff       	jmp    c001e812 <cleanerTaskFunction(void*)+0x28>

c001e89d <terminateTask(int)>:
c001e89d:	83 ec 14             	sub    esp,0x14
c001e8a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8a8:	83 c0 0c             	add    eax,0xc
c001e8ab:	50                   	push   eax
c001e8ac:	68 58 c6 02 c0       	push   0xc002c658
c001e8b1:	e8 01 47 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e8b6:	e8 c6 f5 ff ff       	call   c001de81 <lockStuff()>
c001e8bb:	e8 9a f5 ff ff       	call   c001de5a <lockScheduler()>
c001e8c0:	c7 04 24 2d c3 02 c0 	mov    DWORD PTR [esp],0xc002c32d
c001e8c7:	e8 eb 46 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e8cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8dd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8e0:	5a                   	pop    edx
c001e8e1:	59                   	pop    ecx
c001e8e2:	50                   	push   eax
c001e8e3:	68 30 1a 03 c0       	push   0xc0031a30
c001e8e8:	e8 93 a2 00 00       	call   c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8f9:	c7 04 24 47 c3 02 c0 	mov    DWORD PTR [esp],0xc002c347
c001e900:	e8 b2 46 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c001e90d:	85 c0                	test   eax,eax
c001e90f:	74 5a                	je     c001e96b <terminateTask(int)+0xce>
c001e911:	83 ec 0c             	sub    esp,0xc
c001e914:	68 61 c3 02 c0       	push   0xc002c361
c001e919:	e8 99 46 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e91e:	58                   	pop    eax
c001e91f:	c6 05 0c 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a0c,0x1
c001e926:	ff 35 08 1a 03 c0    	push   DWORD PTR ds:0xc0031a08
c001e92c:	e8 41 fb ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001e931:	c7 04 24 7b c3 02 c0 	mov    DWORD PTR [esp],0xc002c37b
c001e938:	e8 7a 46 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e93d:	83 c4 10             	add    esp,0x10
c001e940:	e8 17 f5 ff ff       	call   c001de5c <unlockScheduler()>
c001e945:	e8 d1 f8 ff ff       	call   c001e21b <unlockStuff()>
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	68 b3 c3 02 c0       	push   0xc002c3b3
c001e952:	e8 60 46 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	e8 fb f4 ff ff       	call   c001de5a <lockScheduler()>
c001e95f:	e8 32 f8 ff ff       	call   c001e196 <schedule()>
c001e964:	e8 f3 f4 ff ff       	call   c001de5c <unlockScheduler()>
c001e969:	eb ef                	jmp    c001e95a <terminateTask(int)+0xbd>
c001e96b:	83 ec 0c             	sub    esp,0xc
c001e96e:	68 95 c3 02 c0       	push   0xc002c395
c001e973:	e8 3f 46 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001e978:	83 c4 10             	add    esp,0x10
c001e97b:	eb c3                	jmp    c001e940 <terminateTask(int)+0xa3>

c001e97d <Thr::terminateFromIRQ(int)>:
c001e97d:	83 ec 18             	sub    esp,0x18
c001e980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e984:	e8 14 ff ff ff       	call   c001e89d <terminateTask(int)>
c001e989:	90                   	nop

c001e98a <Semaphore::release()>:
c001e98a:	83 ec 0c             	sub    esp,0xc
c001e98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e991:	e8 eb f4 ff ff       	call   c001de81 <lockStuff()>
c001e996:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e999:	85 d2                	test   edx,edx
c001e99b:	74 1a                	je     c001e9b7 <Semaphore::release()+0x2d>
c001e99d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9a0:	83 ec 0c             	sub    esp,0xc
c001e9a3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9a6:	52                   	push   edx
c001e9a7:	e8 c6 fa ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001e9ac:	83 c4 10             	add    esp,0x10
c001e9af:	83 c4 0c             	add    esp,0xc
c001e9b2:	e9 64 f8 ff ff       	jmp    c001e21b <unlockStuff()>
c001e9b7:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9ba:	83 c4 0c             	add    esp,0xc
c001e9bd:	e9 59 f8 ff ff       	jmp    c001e21b <unlockStuff()>

c001e9c2 <__static_initialization_and_destruction_0(int, int)>:
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9ca:	0f 85 88 00 00 00    	jne    c001ea58 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9d0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9d8:	75 7e                	jne    c001ea58 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9da:	83 ec 0c             	sub    esp,0xc
c001e9dd:	68 48 1a 03 c0       	push   0xc0031a48
c001e9e2:	e8 49 a3 00 00       	call   c0028d30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9e7:	83 c4 10             	add    esp,0x10
c001e9ea:	83 ec 04             	sub    esp,0x4
c001e9ed:	68 10 d4 02 c0       	push   0xc002d410
c001e9f2:	68 48 1a 03 c0       	push   0xc0031a48
c001e9f7:	68 f0 8c 02 c0       	push   0xc0028cf0
c001e9fc:	e8 50 44 ff ff       	call   c0012e51 <__cxa_atexit>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	68 3c 1a 03 c0       	push   0xc0031a3c
c001ea0c:	e8 1f a3 00 00       	call   c0028d30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	83 ec 04             	sub    esp,0x4
c001ea17:	68 10 d4 02 c0       	push   0xc002d410
c001ea1c:	68 3c 1a 03 c0       	push   0xc0031a3c
c001ea21:	68 f0 8c 02 c0       	push   0xc0028cf0
c001ea26:	e8 26 44 ff ff       	call   c0012e51 <__cxa_atexit>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	68 30 1a 03 c0       	push   0xc0031a30
c001ea36:	e8 f5 a2 00 00       	call   c0028d30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 ec 04             	sub    esp,0x4
c001ea41:	68 10 d4 02 c0       	push   0xc002d410
c001ea46:	68 30 1a 03 c0       	push   0xc0031a30
c001ea4b:	68 f0 8c 02 c0       	push   0xc0028cf0
c001ea50:	e8 fc 43 ff ff       	call   c0012e51 <__cxa_atexit>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	90                   	nop
c001ea59:	83 c4 0c             	add    esp,0xc
c001ea5c:	c3                   	ret    

c001ea5d <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea5d:	83 ec 0c             	sub    esp,0xc
c001ea60:	83 ec 08             	sub    esp,0x8
c001ea63:	68 ff ff 00 00       	push   0xffff
c001ea68:	6a 01                	push   0x1
c001ea6a:	e8 53 ff ff ff       	call   c001e9c2 <__static_initialization_and_destruction_0(int, int)>
c001ea6f:	83 c4 10             	add    esp,0x10
c001ea72:	83 c4 0c             	add    esp,0xc
c001ea75:	c3                   	ret    

c001ea76 <Vm::inbv(unsigned short)>:
c001ea76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea7a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea7f:	75 06                	jne    c001ea87 <Vm::inbv(unsigned short)+0x11>
c001ea81:	a0 8c 1a 03 c0       	mov    al,ds:0xc0031a8c
c001ea86:	c3                   	ret    
c001ea87:	ec                   	in     al,dx
c001ea88:	c3                   	ret    

c001ea89 <Vm::outbv(unsigned short, unsigned char)>:
c001ea89:	53                   	push   ebx
c001ea8a:	83 ec 08             	sub    esp,0x8
c001ea8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea95:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea9a:	75 38                	jne    c001ead4 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea9c:	0f b6 c3             	movzx  eax,bl
c001ea9f:	51                   	push   ecx
c001eaa0:	51                   	push   ecx
c001eaa1:	50                   	push   eax
c001eaa2:	68 77 c6 02 c0       	push   0xc002c677
c001eaa7:	e8 0b 45 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001eaac:	8b 15 8c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a8c
c001eab2:	83 c4 10             	add    esp,0x10
c001eab5:	8d 42 01             	lea    eax,[edx+0x1]
c001eab8:	88 9a a0 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce560],bl
c001eabe:	a3 8c 1a 03 c0       	mov    ds:0xc0031a8c,eax
c001eac3:	83 f8 20             	cmp    eax,0x20
c001eac6:	75 0f                	jne    c001ead7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eac8:	c7 05 8c 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031a8c,0x1f
c001ead2:	eb 03                	jmp    c001ead7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ead4:	88 d8                	mov    al,bl
c001ead6:	ee                   	out    dx,al
c001ead7:	83 c4 08             	add    esp,0x8
c001eada:	5b                   	pop    ebx
c001eadb:	c3                   	ret    

c001eadc <Vm::realToLinear(unsigned short, unsigned short)>:
c001eadc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eae1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eae6:	c1 e0 04             	shl    eax,0x4
c001eae9:	01 d0                	add    eax,edx
c001eaeb:	c3                   	ret    

c001eaec <Vm::getSegment(unsigned int)>:
c001eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaf0:	c1 e8 10             	shr    eax,0x10
c001eaf3:	c3                   	ret    

c001eaf4 <Vm::getOffset(unsigned int)>:
c001eaf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaf8:	c3                   	ret    

c001eaf9 <Vm::mainloop2()>:
c001eaf9:	83 ec 0c             	sub    esp,0xc
c001eafc:	e8 59 f3 ff ff       	call   c001de5a <lockScheduler()>
c001eb01:	83 ec 0c             	sub    esp,0xc
c001eb04:	c6 05 85 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a85,0x1
c001eb0b:	6a 02                	push   0x2
c001eb0d:	e8 9c f7 ff ff       	call   c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb17:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb1b:	52                   	push   edx
c001eb1c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb20:	52                   	push   edx
c001eb21:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb25:	52                   	push   edx
c001eb26:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb2a:	50                   	push   eax
c001eb2b:	e8 ca 17 fe ff       	call   c00002fa <goToVM86>
c001eb30:	83 c4 2c             	add    esp,0x2c
c001eb33:	c3                   	ret    

c001eb34 <Vm::mainVm8086Loop(void*)>:
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	e8 20 f3 ff ff       	call   c001de5c <unlockScheduler()>
c001eb3c:	83 c4 0c             	add    esp,0xc
c001eb3f:	eb b8                	jmp    c001eaf9 <Vm::mainloop2()>

c001eb41 <Vm::mainloop3(unsigned long)>:
c001eb41:	53                   	push   ebx
c001eb42:	83 ec 08             	sub    esp,0x8
c001eb45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb49:	e8 0c f3 ff ff       	call   c001de5a <lockScheduler()>
c001eb4e:	83 ec 0c             	sub    esp,0xc
c001eb51:	89 1d 80 1a 03 c0    	mov    DWORD PTR ds:0xc0031a80,ebx
c001eb57:	6a 02                	push   0x2
c001eb59:	c6 05 84 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a84,0x1
c001eb60:	e8 49 f7 ff ff       	call   c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb65:	83 c4 18             	add    esp,0x18
c001eb68:	5b                   	pop    ebx
c001eb69:	eb 8e                	jmp    c001eaf9 <Vm::mainloop2()>

c001eb6b <Vm::initialise8086()>:
c001eb6b:	83 ec 0c             	sub    esp,0xc
c001eb6e:	68 80 00 00 00       	push   0x80
c001eb73:	6a 00                	push   0x0
c001eb75:	68 34 eb 01 c0       	push   0xc001eb34
c001eb7a:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c001eb80:	e8 07 f4 ff ff       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c001eb85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb8c:	a3 88 1a 03 c0       	mov    ds:0xc0031a88,eax
c001eb91:	68 00 01 00 00       	push   0x100
c001eb96:	a1 54 1a 03 c0       	mov    eax,ds:0xc0031a54
c001eb9b:	6a 00                	push   0x0
c001eb9d:	6a 00                	push   0x0
c001eb9f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eba5:	e8 b6 3a ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebaa:	83 c4 2c             	add    esp,0x2c
c001ebad:	c3                   	ret    

c001ebae <Vm::finish8086()>:
c001ebae:	53                   	push   ebx
c001ebaf:	83 ec 08             	sub    esp,0x8
c001ebb2:	e8 a3 f2 ff ff       	call   c001de5a <lockScheduler()>
c001ebb7:	80 3d 84 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a84,0x0
c001ebbe:	75 0c                	jne    c001ebcc <Vm::finish8086()+0x1e>
c001ebc0:	e8 d1 f5 ff ff       	call   c001e196 <schedule()>
c001ebc5:	e8 92 f2 ff ff       	call   c001de5c <unlockScheduler()>
c001ebca:	eb e6                	jmp    c001ebb2 <Vm::finish8086()+0x4>
c001ebcc:	83 ec 0c             	sub    esp,0xc
c001ebcf:	8b 1d 80 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a80
c001ebd5:	ff 35 88 1a 03 c0    	push   DWORD PTR ds:0xc0031a88
c001ebdb:	c6 05 84 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a84,0x0
c001ebe2:	e8 8b f8 ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001ebe7:	e8 70 f2 ff ff       	call   c001de5c <unlockScheduler()>
c001ebec:	89 d8                	mov    eax,ebx
c001ebee:	83 c4 18             	add    esp,0x18
c001ebf1:	5b                   	pop    ebx
c001ebf2:	c3                   	ret    

c001ebf3 <Vm::getOutput8086(unsigned char*)>:
c001ebf3:	83 ec 10             	sub    esp,0x10
c001ebf6:	ff 35 8c 1a 03 c0    	push   DWORD PTR ds:0xc0031a8c
c001ebfc:	68 a0 1a 03 c0       	push   0xc0031aa0
c001ec01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec05:	e8 3a 1b fe ff       	call   c0000744 <memcpy>
c001ec0a:	a1 8c 1a 03 c0       	mov    eax,ds:0xc0031a8c
c001ec0f:	c7 05 8c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a8c,0x0
c001ec19:	83 c4 1c             	add    esp,0x1c
c001ec1c:	c3                   	ret    

c001ec1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec1d:	55                   	push   ebp
c001ec1e:	57                   	push   edi
c001ec1f:	56                   	push   esi
c001ec20:	53                   	push   ebx
c001ec21:	83 ec 2c             	sub    esp,0x2c
c001ec24:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec28:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec30:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec34:	e8 21 f2 ff ff       	call   c001de5a <lockScheduler()>
c001ec39:	a0 85 1a 03 c0       	mov    al,ds:0xc0031a85
c001ec3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec42:	84 c0                	test   al,al
c001ec44:	75 0c                	jne    c001ec52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec46:	e8 4b f5 ff ff       	call   c001e196 <schedule()>
c001ec4b:	e8 0c f2 ff ff       	call   c001de5c <unlockScheduler()>
c001ec50:	eb e2                	jmp    c001ec34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec52:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c001ec57:	c7 05 8c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a8c,0x0
c001ec61:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec65:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec69:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec6d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec71:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec75:	50                   	push   eax
c001ec76:	6a 20                	push   0x20
c001ec78:	6a 00                	push   0x0
c001ec7a:	68 a0 1a 03 c0       	push   0xc0031aa0
c001ec7f:	e8 f4 1a fe ff       	call   c0000778 <memset>
c001ec84:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec8b:	e8 b3 0b ff ff       	call   c000f843 <malloc>
c001ec90:	83 c4 0c             	add    esp,0xc
c001ec93:	89 c7                	mov    edi,eax
c001ec95:	ff 35 54 1a 03 c0    	push   DWORD PTR ds:0xc0031a54
c001ec9b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec9f:	50                   	push   eax
c001eca0:	e8 6b 48 ff ff       	call   c0013510 <File::File(char const*, Process*)>
c001eca5:	83 c4 10             	add    esp,0x10
c001eca8:	85 ff                	test   edi,edi
c001ecaa:	75 0a                	jne    c001ecb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ecac:	83 ec 0c             	sub    esp,0xc
c001ecaf:	68 93 c6 02 c0       	push   0xc002c693
c001ecb4:	eb 27                	jmp    c001ecdd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecb6:	50                   	push   eax
c001ecb7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecbb:	50                   	push   eax
c001ecbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecc0:	50                   	push   eax
c001ecc1:	57                   	push   edi
c001ecc2:	e8 59 4b ff ff       	call   c0013820 <File::stat(unsigned long long*, bool*)>
c001ecc7:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	89 e8                	mov    eax,ebp
c001ecd1:	84 c0                	test   al,al
c001ecd3:	74 19                	je     c001ecee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecd5:	83 ec 0c             	sub    esp,0xc
c001ecd8:	68 a7 c6 02 c0       	push   0xc002c6a7
c001ecdd:	e8 83 b9 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001ece2:	31 ed                	xor    ebp,ebp
c001ece4:	e8 73 f1 ff ff       	call   c001de5c <unlockScheduler()>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	eb 75                	jmp    c001ed63 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecee:	50                   	push   eax
c001ecef:	50                   	push   eax
c001ecf0:	6a 01                	push   0x1
c001ecf2:	57                   	push   edi
c001ecf3:	e8 7c 48 ff ff       	call   c0013574 <File::open(FileOpenMode)>
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	85 c0                	test   eax,eax
c001ecfd:	74 17                	je     c001ed16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecff:	83 ec 0c             	sub    esp,0xc
c001ed02:	68 c0 c6 02 c0       	push   0xc002c6c0
c001ed07:	e8 59 b9 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001ed0c:	e8 4b f1 ff ff       	call   c001de5c <unlockScheduler()>
c001ed11:	83 c4 10             	add    esp,0x10
c001ed14:	eb 4d                	jmp    c001ed63 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed16:	0f b7 f6             	movzx  esi,si
c001ed19:	50                   	push   eax
c001ed1a:	0f b7 db             	movzx  ebx,bx
c001ed1d:	50                   	push   eax
c001ed1e:	56                   	push   esi
c001ed1f:	53                   	push   ebx
c001ed20:	e8 b7 fd ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ed25:	5a                   	pop    edx
c001ed26:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed28:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed2c:	51                   	push   ecx
c001ed2d:	50                   	push   eax
c001ed2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed36:	57                   	push   edi
c001ed37:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed3a:	83 c4 14             	add    esp,0x14
c001ed3d:	57                   	push   edi
c001ed3e:	e8 8f 48 ff ff       	call   c00135d2 <File::close()>
c001ed43:	c6 05 85 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a85,0x0
c001ed4a:	e8 0d f1 ff ff       	call   c001de5c <unlockScheduler()>
c001ed4f:	59                   	pop    ecx
c001ed50:	ff 35 88 1a 03 c0    	push   DWORD PTR ds:0xc0031a88
c001ed56:	e8 17 f7 ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001ed5b:	83 c4 10             	add    esp,0x10
c001ed5e:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed63:	83 c4 2c             	add    esp,0x2c
c001ed66:	89 e8                	mov    eax,ebp
c001ed68:	5b                   	pop    ebx
c001ed69:	5e                   	pop    esi
c001ed6a:	5f                   	pop    edi
c001ed6b:	5d                   	pop    ebp
c001ed6c:	c3                   	ret    

c001ed6d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed6d:	57                   	push   edi
c001ed6e:	56                   	push   esi
c001ed6f:	53                   	push   ebx
c001ed70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed78:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed7c:	83 e8 06             	sub    eax,0x6
c001ed7f:	0f b7 c0             	movzx  eax,ax
c001ed82:	50                   	push   eax
c001ed83:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed88:	50                   	push   eax
c001ed89:	e8 4e fd ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ed8e:	5a                   	pop    edx
c001ed8f:	5e                   	pop    esi
c001ed90:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed93:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed96:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed9c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed9f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eda2:	83 c2 02             	add    edx,0x2
c001eda5:	66 89 10             	mov    WORD PTR [eax],dx
c001eda8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001edab:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001edaf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edb2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edb6:	89 d6                	mov    esi,edx
c001edb8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edbe:	66 81 e6 ff fd       	and    si,0xfdff
c001edc3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edc7:	74 07                	je     c001edd0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001edc9:	89 d6                	mov    esi,edx
c001edcb:	66 81 ce 00 02       	or     si,0x200
c001edd0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edd9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eddd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ede5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ede8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edf0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edf3:	5b                   	pop    ebx
c001edf4:	5e                   	pop    esi
c001edf5:	5f                   	pop    edi
c001edf6:	c3                   	ret    

c001edf7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edf7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee01:	c1 e0 04             	shl    eax,0x4
c001ee04:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee07:	c3                   	ret    

c001ee08 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee12:	c1 e0 04             	shl    eax,0x4
c001ee15:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee19:	c3                   	ret    

c001ee1a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee24:	c1 e0 04             	shl    eax,0x4
c001ee27:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee2a:	c3                   	ret    

c001ee2b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee2b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee30:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee35:	c1 e0 04             	shl    eax,0x4
c001ee38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee3c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee3f:	c3                   	ret    

c001ee40 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee45:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4a:	c1 e0 04             	shl    eax,0x4
c001ee4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee51:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee55:	c3                   	ret    

c001ee56 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee60:	c1 e0 04             	shl    eax,0x4
c001ee63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee67:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee6a:	c3                   	ret    

c001ee6b <Vm::faultHandler(regs*)>:
c001ee6b:	55                   	push   ebp
c001ee6c:	57                   	push   edi
c001ee6d:	56                   	push   esi
c001ee6e:	53                   	push   ebx
c001ee6f:	83 ec 1c             	sub    esp,0x1c
c001ee72:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee76:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee79:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee7c:	0f b7 c1             	movzx  eax,cx
c001ee7f:	50                   	push   eax
c001ee80:	0f b7 c3             	movzx  eax,bx
c001ee83:	c1 e3 04             	shl    ebx,0x4
c001ee86:	50                   	push   eax
c001ee87:	e8 50 fc ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ee8c:	5a                   	pop    edx
c001ee8d:	89 c5                	mov    ebp,eax
c001ee8f:	5e                   	pop    esi
c001ee90:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee94:	50                   	push   eax
c001ee95:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee99:	50                   	push   eax
c001ee9a:	e8 3d fc ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ee9f:	01 cb                	add    ebx,ecx
c001eea1:	89 c6                	mov    esi,eax
c001eea3:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eea7:	50                   	push   eax
c001eea8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeac:	50                   	push   eax
c001eead:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeb1:	50                   	push   eax
c001eeb2:	55                   	push   ebp
c001eeb3:	53                   	push   ebx
c001eeb4:	b3 06                	mov    bl,0x6
c001eeb6:	68 d9 c6 02 c0       	push   0xc002c6d9
c001eebb:	e8 f7 40 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001eec0:	83 c4 20             	add    esp,0x20
c001eec3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eec8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eecd:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eed1:	3c 9d                	cmp    al,0x9d
c001eed3:	0f 84 d7 02 00 00    	je     c001f1b0 <Vm::faultHandler(regs*)+0x345>
c001eed9:	0f 87 a3 00 00 00    	ja     c001ef82 <Vm::faultHandler(regs*)+0x117>
c001eedf:	3c 66                	cmp    al,0x66
c001eee1:	0f 84 15 02 00 00    	je     c001f0fc <Vm::faultHandler(regs*)+0x291>
c001eee7:	77 5f                	ja     c001ef48 <Vm::faultHandler(regs*)+0xdd>
c001eee9:	3c 36                	cmp    al,0x36
c001eeeb:	0f 84 f1 01 00 00    	je     c001f0e2 <Vm::faultHandler(regs*)+0x277>
c001eef1:	77 28                	ja     c001ef1b <Vm::faultHandler(regs*)+0xb0>
c001eef3:	3c 26                	cmp    al,0x26
c001eef5:	0f 84 99 01 00 00    	je     c001f094 <Vm::faultHandler(regs*)+0x229>
c001eefb:	3c 2e                	cmp    al,0x2e
c001eefd:	0f 85 3b 07 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef03:	83 ec 0c             	sub    esp,0xc
c001ef06:	31 db                	xor    ebx,ebx
c001ef08:	68 ee c6 02 c0       	push   0xc002c6ee
c001ef0d:	e8 a5 40 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001ef12:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef15:	83 c4 10             	add    esp,0x10
c001ef18:	45                   	inc    ebp
c001ef19:	eb b2                	jmp    c001eecd <Vm::faultHandler(regs*)+0x62>
c001ef1b:	3c 64                	cmp    al,0x64
c001ef1d:	0f 84 8b 01 00 00    	je     c001f0ae <Vm::faultHandler(regs*)+0x243>
c001ef23:	0f 87 9f 01 00 00    	ja     c001f0c8 <Vm::faultHandler(regs*)+0x25d>
c001ef29:	3c 3e                	cmp    al,0x3e
c001ef2b:	0f 85 0d 07 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef31:	83 ec 0c             	sub    esp,0xc
c001ef34:	b3 01                	mov    bl,0x1
c001ef36:	68 f2 c6 02 c0       	push   0xc002c6f2
c001ef3b:	e8 77 40 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001ef40:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	eb d0                	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001ef48:	3c 6d                	cmp    al,0x6d
c001ef4a:	0f 84 af 03 00 00    	je     c001f2ff <Vm::faultHandler(regs*)+0x494>
c001ef50:	77 15                	ja     c001ef67 <Vm::faultHandler(regs*)+0xfc>
c001ef52:	3c 67                	cmp    al,0x67
c001ef54:	0f 84 bf 01 00 00    	je     c001f119 <Vm::faultHandler(regs*)+0x2ae>
c001ef5a:	3c 6c                	cmp    al,0x6c
c001ef5c:	0f 84 3f 03 00 00    	je     c001f2a1 <Vm::faultHandler(regs*)+0x436>
c001ef62:	e9 d7 06 00 00       	jmp    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef67:	3c 6f                	cmp    al,0x6f
c001ef69:	0f 84 a4 04 00 00    	je     c001f413 <Vm::faultHandler(regs*)+0x5a8>
c001ef6f:	0f 82 11 04 00 00    	jb     c001f386 <Vm::faultHandler(regs*)+0x51b>
c001ef75:	3c 9c                	cmp    al,0x9c
c001ef77:	0f 84 ba 01 00 00    	je     c001f137 <Vm::faultHandler(regs*)+0x2cc>
c001ef7d:	e9 bc 06 00 00       	jmp    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef82:	3c ec                	cmp    al,0xec
c001ef84:	0f 84 24 06 00 00    	je     c001f5ae <Vm::faultHandler(regs*)+0x743>
c001ef8a:	0f 87 93 00 00 00    	ja     c001f023 <Vm::faultHandler(regs*)+0x1b8>
c001ef90:	3c e4                	cmp    al,0xe4
c001ef92:	0f 84 5c 05 00 00    	je     c001f4f4 <Vm::faultHandler(regs*)+0x689>
c001ef98:	77 6a                	ja     c001f004 <Vm::faultHandler(regs*)+0x199>
c001ef9a:	3c cd                	cmp    al,0xcd
c001ef9c:	0f 84 7e 02 00 00    	je     c001f220 <Vm::faultHandler(regs*)+0x3b5>
c001efa2:	3c cf                	cmp    al,0xcf
c001efa4:	0f 85 94 06 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001efaa:	83 ec 0c             	sub    esp,0xc
c001efad:	68 36 c7 02 c0       	push   0xc002c736
c001efb2:	e8 00 40 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001efb7:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efba:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efbd:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efc1:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efc4:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efc8:	0d 00 02 02 00       	or     eax,0x20200
c001efcd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efd0:	56                   	push   esi
c001efd1:	53                   	push   ebx
c001efd2:	52                   	push   edx
c001efd3:	68 3c c7 02 c0       	push   0xc002c73c
c001efd8:	e8 da 3f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001efdd:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efe1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efe7:	66 c1 e8 09          	shr    ax,0x9
c001efeb:	83 e0 01             	and    eax,0x1
c001efee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eff1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eff4:	83 c0 06             	add    eax,0x6
c001eff7:	25 ff ff 00 00       	and    eax,0xffff
c001effc:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efff:	e9 95 02 00 00       	jmp    c001f299 <Vm::faultHandler(regs*)+0x42e>
c001f004:	3c e6                	cmp    al,0xe6
c001f006:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f00a:	0f 84 4e 05 00 00    	je     c001f55e <Vm::faultHandler(regs*)+0x6f3>
c001f010:	0f 82 0a 05 00 00    	jb     c001f520 <Vm::faultHandler(regs*)+0x6b5>
c001f016:	3c e7                	cmp    al,0xe7
c001f018:	0f 84 69 05 00 00    	je     c001f587 <Vm::faultHandler(regs*)+0x71c>
c001f01e:	e9 1b 06 00 00       	jmp    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001f023:	3c ef                	cmp    al,0xef
c001f025:	0f 84 e6 05 00 00    	je     c001f611 <Vm::faultHandler(regs*)+0x7a6>
c001f02b:	77 37                	ja     c001f064 <Vm::faultHandler(regs*)+0x1f9>
c001f02d:	3c ed                	cmp    al,0xed
c001f02f:	0f 84 a3 05 00 00    	je     c001f5d8 <Vm::faultHandler(regs*)+0x76d>
c001f035:	3c ee                	cmp    al,0xee
c001f037:	0f 85 01 06 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001f03d:	52                   	push   edx
c001f03e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f041:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f044:	68 d7 c7 02 c0       	push   0xc002c7d7
c001f049:	e8 69 3f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f04e:	59                   	pop    ecx
c001f04f:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f053:	5b                   	pop    ebx
c001f054:	50                   	push   eax
c001f055:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f059:	50                   	push   eax
c001f05a:	e8 2a fa ff ff       	call   c001ea89 <Vm::outbv(unsigned short, unsigned char)>
c001f05f:	e9 a5 05 00 00       	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f064:	3c fa                	cmp    al,0xfa
c001f066:	0f 84 f7 01 00 00    	je     c001f263 <Vm::faultHandler(regs*)+0x3f8>
c001f06c:	3c fb                	cmp    al,0xfb
c001f06e:	0f 84 0a 02 00 00    	je     c001f27e <Vm::faultHandler(regs*)+0x413>
c001f074:	3c f3                	cmp    al,0xf3
c001f076:	0f 85 c2 05 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001f07c:	83 ec 0c             	sub    esp,0xc
c001f07f:	68 0f c7 02 c0       	push   0xc002c70f
c001f084:	e8 2e 3f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f089:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08c:	83 c4 10             	add    esp,0x10
c001f08f:	e9 84 fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	b3 02                	mov    bl,0x2
c001f099:	68 ea c6 02 c0       	push   0xc002c6ea
c001f09e:	e8 14 3f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f0a3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a6:	83 c4 10             	add    esp,0x10
c001f0a9:	e9 6a fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	b3 03                	mov    bl,0x3
c001f0b3:	68 f6 c6 02 c0       	push   0xc002c6f6
c001f0b8:	e8 fa 3e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f0bd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c0:	83 c4 10             	add    esp,0x10
c001f0c3:	e9 50 fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0c8:	83 ec 0c             	sub    esp,0xc
c001f0cb:	b3 04                	mov    bl,0x4
c001f0cd:	68 fa c6 02 c0       	push   0xc002c6fa
c001f0d2:	e8 e0 3e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f0d7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0da:	83 c4 10             	add    esp,0x10
c001f0dd:	e9 36 fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0e2:	83 ec 0c             	sub    esp,0xc
c001f0e5:	b3 05                	mov    bl,0x5
c001f0e7:	68 fe c6 02 c0       	push   0xc002c6fe
c001f0ec:	e8 c6 3e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f0f1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f4:	83 c4 10             	add    esp,0x10
c001f0f7:	e9 1c fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	68 02 c7 02 c0       	push   0xc002c702
c001f104:	e8 ae 3e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f109:	83 c4 10             	add    esp,0x10
c001f10c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f10f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f114:	e9 ff fd ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f119:	50                   	push   eax
c001f11a:	50                   	push   eax
c001f11b:	6a 01                	push   0x1
c001f11d:	68 07 c7 02 c0       	push   0xc002c707
c001f122:	e8 90 3e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f127:	83 c4 10             	add    esp,0x10
c001f12a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f132:	e9 e1 fd ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f137:	83 ec 0c             	sub    esp,0xc
c001f13a:	68 15 c7 02 c0       	push   0xc002c715
c001f13f:	e8 73 3e ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f144:	83 c4 10             	add    esp,0x10
c001f147:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f14a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f14f:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f152:	74 2f                	je     c001f183 <Vm::faultHandler(regs*)+0x318>
c001f154:	83 ea 04             	sub    edx,0x4
c001f157:	25 ff 0d 00 00       	and    eax,0xdff
c001f15c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f162:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f165:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f168:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f16e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f172:	0f 84 bf 04 00 00    	je     c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f178:	80 cc 02             	or     ah,0x2
c001f17b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f17e:	e9 b4 04 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f183:	83 ea 02             	sub    edx,0x2
c001f186:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f18c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f18f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f193:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f199:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f19d:	74 05                	je     c001f1a4 <Vm::faultHandler(regs*)+0x339>
c001f19f:	80 cc 02             	or     ah,0x2
c001f1a2:	eb 03                	jmp    c001f1a7 <Vm::faultHandler(regs*)+0x33c>
c001f1a4:	80 e4 fd             	and    ah,0xfd
c001f1a7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1ab:	e9 87 04 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f1b0:	83 ec 0c             	sub    esp,0xc
c001f1b3:	68 1c c7 02 c0       	push   0xc002c71c
c001f1b8:	e8 fa 3d ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f1bd:	83 c4 10             	add    esp,0x10
c001f1c0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1c5:	74 28                	je     c001f1ef <Vm::faultHandler(regs*)+0x384>
c001f1c7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1c9:	25 ff 0d 00 00       	and    eax,0xdff
c001f1ce:	0d 00 02 02 00       	or     eax,0x20200
c001f1d3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1d6:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1de:	c1 e8 09             	shr    eax,0x9
c001f1e1:	83 e0 01             	and    eax,0x1
c001f1e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1e7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1ea:	83 c0 04             	add    eax,0x4
c001f1ed:	eb 24                	jmp    c001f213 <Vm::faultHandler(regs*)+0x3a8>
c001f1ef:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1f2:	0d 00 02 02 00       	or     eax,0x20200
c001f1f7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1fa:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f203:	66 c1 e8 09          	shr    ax,0x9
c001f207:	83 e0 01             	and    eax,0x1
c001f20a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f20d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f210:	83 c0 02             	add    eax,0x2
c001f213:	25 ff ff 00 00       	and    eax,0xffff
c001f218:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f21b:	e9 17 04 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f220:	53                   	push   ebx
c001f221:	53                   	push   ebx
c001f222:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f226:	50                   	push   eax
c001f227:	68 22 c7 02 c0       	push   0xc002c722
c001f22c:	e8 86 3d ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f231:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f235:	83 c4 10             	add    esp,0x10
c001f238:	3c ee                	cmp    al,0xee
c001f23a:	75 10                	jne    c001f24c <Vm::faultHandler(regs*)+0x3e1>
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f242:	e8 fa f8 ff ff       	call   c001eb41 <Vm::mainloop3(unsigned long)>
c001f247:	e9 c0 03 00 00       	jmp    c001f60c <Vm::faultHandler(regs*)+0x7a1>
c001f24c:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	53                   	push   ebx
c001f254:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f258:	53                   	push   ebx
c001f259:	55                   	push   ebp
c001f25a:	50                   	push   eax
c001f25b:	57                   	push   edi
c001f25c:	e8 0c fb ff ff       	call   c001ed6d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f261:	eb 36                	jmp    c001f299 <Vm::faultHandler(regs*)+0x42e>
c001f263:	83 ec 0c             	sub    esp,0xc
c001f266:	68 2c c7 02 c0       	push   0xc002c72c
c001f26b:	e8 47 3d ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f275:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f279:	e9 8b 03 00 00       	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	68 31 c7 02 c0       	push   0xc002c731
c001f286:	e8 2c 3d ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f28b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f290:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f294:	e9 70 03 00 00       	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f299:	83 c4 20             	add    esp,0x20
c001f29c:	e9 99 03 00 00       	jmp    c001f63a <Vm::faultHandler(regs*)+0x7cf>
c001f2a1:	83 ec 0c             	sub    esp,0xc
c001f2a4:	68 6f c7 02 c0       	push   0xc002c76f
c001f2a9:	e8 09 3d ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f2ae:	83 c4 10             	add    esp,0x10
c001f2b1:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2b9:	74 0d                	je     c001f2c8 <Vm::faultHandler(regs*)+0x45d>
c001f2bb:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2c2:	0f 87 9e 01 00 00    	ja     c001f466 <Vm::faultHandler(regs*)+0x5fb>
c001f2c8:	83 ec 0c             	sub    esp,0xc
c001f2cb:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2cf:	0f b7 db             	movzx  ebx,bx
c001f2d2:	50                   	push   eax
c001f2d3:	e8 9e f7 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f2d8:	83 c4 0c             	add    esp,0xc
c001f2db:	0f b6 c0             	movzx  eax,al
c001f2de:	50                   	push   eax
c001f2df:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2e3:	50                   	push   eax
c001f2e4:	53                   	push   ebx
c001f2e5:	e8 41 fb ff ff       	call   c001ee2b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2ea:	83 c4 10             	add    esp,0x10
c001f2ed:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2f0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2f4:	74 03                	je     c001f2f9 <Vm::faultHandler(regs*)+0x48e>
c001f2f6:	48                   	dec    eax
c001f2f7:	eb 01                	jmp    c001f2fa <Vm::faultHandler(regs*)+0x48f>
c001f2f9:	40                   	inc    eax
c001f2fa:	0f b7 c0             	movzx  eax,ax
c001f2fd:	eb 7f                	jmp    c001f37e <Vm::faultHandler(regs*)+0x513>
c001f2ff:	83 ec 0c             	sub    esp,0xc
c001f302:	68 a1 c7 02 c0       	push   0xc002c7a1
c001f307:	e8 ab 3c ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f30c:	83 c4 10             	add    esp,0x10
c001f30f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f312:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f317:	74 0d                	je     c001f326 <Vm::faultHandler(regs*)+0x4bb>
c001f319:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f320:	0f 87 40 01 00 00    	ja     c001f466 <Vm::faultHandler(regs*)+0x5fb>
c001f326:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f329:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f32d:	0f b7 db             	movzx  ebx,bx
c001f330:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f335:	74 20                	je     c001f357 <Vm::faultHandler(regs*)+0x4ec>
c001f337:	ed                   	in     eax,dx
c001f338:	51                   	push   ecx
c001f339:	50                   	push   eax
c001f33a:	56                   	push   esi
c001f33b:	53                   	push   ebx
c001f33c:	e8 15 fb ff ff       	call   c001ee56 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f341:	83 c4 10             	add    esp,0x10
c001f344:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f347:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f34b:	74 05                	je     c001f352 <Vm::faultHandler(regs*)+0x4e7>
c001f34d:	83 e8 04             	sub    eax,0x4
c001f350:	eb 27                	jmp    c001f379 <Vm::faultHandler(regs*)+0x50e>
c001f352:	83 c0 04             	add    eax,0x4
c001f355:	eb 22                	jmp    c001f379 <Vm::faultHandler(regs*)+0x50e>
c001f357:	66 ed                	in     ax,dx
c001f359:	0f b7 c0             	movzx  eax,ax
c001f35c:	52                   	push   edx
c001f35d:	50                   	push   eax
c001f35e:	56                   	push   esi
c001f35f:	53                   	push   ebx
c001f360:	e8 db fa ff ff       	call   c001ee40 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f365:	83 c4 10             	add    esp,0x10
c001f368:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f36b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f36f:	74 05                	je     c001f376 <Vm::faultHandler(regs*)+0x50b>
c001f371:	83 e8 02             	sub    eax,0x2
c001f374:	eb 03                	jmp    c001f379 <Vm::faultHandler(regs*)+0x50e>
c001f376:	83 c0 02             	add    eax,0x2
c001f379:	25 ff ff 00 00       	and    eax,0xffff
c001f37e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f381:	e9 b1 02 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f386:	83 ec 0c             	sub    esp,0xc
c001f389:	4b                   	dec    ebx
c001f38a:	68 a7 c7 02 c0       	push   0xc002c7a7
c001f38f:	e8 23 3c ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f394:	83 c4 10             	add    esp,0x10
c001f397:	80 fb 05             	cmp    bl,0x5
c001f39a:	77 0a                	ja     c001f3a6 <Vm::faultHandler(regs*)+0x53b>
c001f39c:	0f b6 db             	movzx  ebx,bl
c001f39f:	ff 24 9d 18 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd37e8]
c001f3a6:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3aa:	eb 1b                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3ac:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3b0:	eb 15                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3b2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3b6:	eb 0f                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3b8:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3bc:	eb 09                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3be:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3c1:	eb 04                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3c3:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3c7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3cc:	74 0d                	je     c001f3db <Vm::faultHandler(regs*)+0x570>
c001f3ce:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3d5:	0f 87 8b 00 00 00    	ja     c001f466 <Vm::faultHandler(regs*)+0x5fb>
c001f3db:	53                   	push   ebx
c001f3dc:	53                   	push   ebx
c001f3dd:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3e1:	52                   	push   edx
c001f3e2:	50                   	push   eax
c001f3e3:	e8 0f fa ff ff       	call   c001edf7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3e8:	5e                   	pop    esi
c001f3e9:	0f b6 c0             	movzx  eax,al
c001f3ec:	5d                   	pop    ebp
c001f3ed:	50                   	push   eax
c001f3ee:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3f2:	50                   	push   eax
c001f3f3:	e8 91 f6 ff ff       	call   c001ea89 <Vm::outbv(unsigned short, unsigned char)>
c001f3f8:	83 c4 10             	add    esp,0x10
c001f3fb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3fe:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f402:	74 03                	je     c001f407 <Vm::faultHandler(regs*)+0x59c>
c001f404:	48                   	dec    eax
c001f405:	eb 01                	jmp    c001f408 <Vm::faultHandler(regs*)+0x59d>
c001f407:	40                   	inc    eax
c001f408:	0f b7 c0             	movzx  eax,ax
c001f40b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f40e:	e9 24 02 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f413:	83 ec 0c             	sub    esp,0xc
c001f416:	4b                   	dec    ebx
c001f417:	68 a7 c7 02 c0       	push   0xc002c7a7
c001f41c:	e8 96 3b ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f421:	83 c4 10             	add    esp,0x10
c001f424:	80 fb 05             	cmp    bl,0x5
c001f427:	77 0a                	ja     c001f433 <Vm::faultHandler(regs*)+0x5c8>
c001f429:	0f b6 db             	movzx  ebx,bl
c001f42c:	ff 24 9d 30 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd37d0]
c001f433:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f437:	eb 1b                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f439:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f43d:	eb 15                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f43f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f443:	eb 0f                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f445:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f449:	eb 09                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f44b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f44e:	eb 04                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f450:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f454:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f457:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f45c:	74 39                	je     c001f497 <Vm::faultHandler(regs*)+0x62c>
c001f45e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f464:	76 31                	jbe    c001f497 <Vm::faultHandler(regs*)+0x62c>
c001f466:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f46a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f46e:	51                   	push   ecx
c001f46f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f473:	51                   	push   ecx
c001f474:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f478:	51                   	push   ecx
c001f479:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f47d:	51                   	push   ecx
c001f47e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f482:	52                   	push   edx
c001f483:	50                   	push   eax
c001f484:	50                   	push   eax
c001f485:	68 74 c7 02 c0       	push   0xc002c774
c001f48a:	e8 28 3b ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f48f:	83 c4 20             	add    esp,0x20
c001f492:	e9 fb 01 00 00       	jmp    c001f692 <Vm::faultHandler(regs*)+0x827>
c001f497:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f49a:	0f b7 d3             	movzx  edx,bx
c001f49d:	81 e6 00 04 00 00    	and    esi,0x400
c001f4a3:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4a6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ab:	74 1d                	je     c001f4ca <Vm::faultHandler(regs*)+0x65f>
c001f4ad:	51                   	push   ecx
c001f4ae:	51                   	push   ecx
c001f4af:	52                   	push   edx
c001f4b0:	50                   	push   eax
c001f4b1:	e8 64 f9 ff ff       	call   c001ee1a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4b6:	83 c4 10             	add    esp,0x10
c001f4b9:	89 ea                	mov    edx,ebp
c001f4bb:	ef                   	out    dx,eax
c001f4bc:	85 f6                	test   esi,esi
c001f4be:	74 05                	je     c001f4c5 <Vm::faultHandler(regs*)+0x65a>
c001f4c0:	83 eb 04             	sub    ebx,0x4
c001f4c3:	eb 21                	jmp    c001f4e6 <Vm::faultHandler(regs*)+0x67b>
c001f4c5:	83 c3 04             	add    ebx,0x4
c001f4c8:	eb 1c                	jmp    c001f4e6 <Vm::faultHandler(regs*)+0x67b>
c001f4ca:	51                   	push   ecx
c001f4cb:	51                   	push   ecx
c001f4cc:	52                   	push   edx
c001f4cd:	50                   	push   eax
c001f4ce:	e8 35 f9 ff ff       	call   c001ee08 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4d3:	83 c4 10             	add    esp,0x10
c001f4d6:	89 ea                	mov    edx,ebp
c001f4d8:	66 ef                	out    dx,ax
c001f4da:	85 f6                	test   esi,esi
c001f4dc:	74 05                	je     c001f4e3 <Vm::faultHandler(regs*)+0x678>
c001f4de:	83 eb 02             	sub    ebx,0x2
c001f4e1:	eb 03                	jmp    c001f4e6 <Vm::faultHandler(regs*)+0x67b>
c001f4e3:	83 c3 02             	add    ebx,0x2
c001f4e6:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4ec:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4ef:	e9 43 01 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f4f4:	53                   	push   ebx
c001f4f5:	53                   	push   ebx
c001f4f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4fa:	50                   	push   eax
c001f4fb:	68 ad c7 02 c0       	push   0xc002c7ad
c001f500:	e8 b2 3a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f505:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f50c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f510:	89 04 24             	mov    DWORD PTR [esp],eax
c001f513:	e8 5e f5 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f518:	0f b6 c0             	movzx  eax,al
c001f51b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f51e:	eb 5e                	jmp    c001f57e <Vm::faultHandler(regs*)+0x713>
c001f520:	51                   	push   ecx
c001f521:	51                   	push   ecx
c001f522:	53                   	push   ebx
c001f523:	68 b3 c7 02 c0       	push   0xc002c7b3
c001f528:	e8 8a 3a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f535:	74 07                	je     c001f53e <Vm::faultHandler(regs*)+0x6d3>
c001f537:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f53b:	ed                   	in     eax,dx
c001f53c:	eb 14                	jmp    c001f552 <Vm::faultHandler(regs*)+0x6e7>
c001f53e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f541:	66 31 db             	xor    bx,bx
c001f544:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f547:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f54b:	66 ed                	in     ax,dx
c001f54d:	0f b7 c0             	movzx  eax,ax
c001f550:	09 d8                	or     eax,ebx
c001f552:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f555:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f559:	e9 dc 00 00 00       	jmp    c001f63a <Vm::faultHandler(regs*)+0x7cf>
c001f55e:	50                   	push   eax
c001f55f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f562:	53                   	push   ebx
c001f563:	68 b9 c7 02 c0       	push   0xc002c7b9
c001f568:	e8 4a 3a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f56d:	58                   	pop    eax
c001f56e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f572:	5a                   	pop    edx
c001f573:	50                   	push   eax
c001f574:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f578:	50                   	push   eax
c001f579:	e8 0b f5 ff ff       	call   c001ea89 <Vm::outbv(unsigned short, unsigned char)>
c001f57e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f582:	e9 85 00 00 00       	jmp    c001f60c <Vm::faultHandler(regs*)+0x7a1>
c001f587:	50                   	push   eax
c001f588:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f58b:	53                   	push   ebx
c001f58c:	68 c2 c7 02 c0       	push   0xc002c7c2
c001f591:	e8 21 3a ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f596:	83 c4 10             	add    esp,0x10
c001f599:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f59d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5a2:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5a5:	74 03                	je     c001f5aa <Vm::faultHandler(regs*)+0x73f>
c001f5a7:	ef                   	out    dx,eax
c001f5a8:	eb ab                	jmp    c001f555 <Vm::faultHandler(regs*)+0x6ea>
c001f5aa:	66 ef                	out    dx,ax
c001f5ac:	eb a7                	jmp    c001f555 <Vm::faultHandler(regs*)+0x6ea>
c001f5ae:	55                   	push   ebp
c001f5af:	55                   	push   ebp
c001f5b0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5b3:	68 cb c7 02 c0       	push   0xc002c7cb
c001f5b8:	e8 fa 39 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f5bd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5c4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5cb:	e8 a6 f4 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f5d0:	0f b6 c0             	movzx  eax,al
c001f5d3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5d6:	eb 31                	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f5d8:	56                   	push   esi
c001f5d9:	56                   	push   esi
c001f5da:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5dd:	68 d1 c7 02 c0       	push   0xc002c7d1
c001f5e2:	e8 d0 39 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f5e7:	83 c4 10             	add    esp,0x10
c001f5ea:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5ed:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5f2:	74 03                	je     c001f5f7 <Vm::faultHandler(regs*)+0x78c>
c001f5f4:	ed                   	in     eax,dx
c001f5f5:	eb 0d                	jmp    c001f604 <Vm::faultHandler(regs*)+0x799>
c001f5f7:	66 ed                	in     ax,dx
c001f5f9:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5fc:	0f b7 c0             	movzx  eax,ax
c001f5ff:	66 31 d2             	xor    dx,dx
c001f602:	09 d0                	or     eax,edx
c001f604:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f607:	eb 2e                	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f609:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f60c:	83 c4 10             	add    esp,0x10
c001f60f:	eb 29                	jmp    c001f63a <Vm::faultHandler(regs*)+0x7cf>
c001f611:	50                   	push   eax
c001f612:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f615:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f618:	68 e0 c7 02 c0       	push   0xc002c7e0
c001f61d:	e8 95 39 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f622:	83 c4 10             	add    esp,0x10
c001f625:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f628:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f62d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f630:	74 03                	je     c001f635 <Vm::faultHandler(regs*)+0x7ca>
c001f632:	ef                   	out    dx,eax
c001f633:	eb 02                	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f635:	66 ef                	out    dx,ax
c001f637:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f63a:	b0 01                	mov    al,0x1
c001f63c:	eb 56                	jmp    c001f694 <Vm::faultHandler(regs*)+0x829>
c001f63e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f642:	51                   	push   ecx
c001f643:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f647:	51                   	push   ecx
c001f648:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f64c:	51                   	push   ecx
c001f64d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f651:	51                   	push   ecx
c001f652:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f656:	52                   	push   edx
c001f657:	50                   	push   eax
c001f658:	50                   	push   eax
c001f659:	68 e9 c7 02 c0       	push   0xc002c7e9
c001f65e:	e8 54 39 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c001f663:	83 c4 20             	add    esp,0x20
c001f666:	83 ec 0c             	sub    esp,0xc
c001f669:	6a 60                	push   0x60
c001f66b:	e8 06 f4 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f670:	83 c4 10             	add    esp,0x10
c001f673:	3c 1c                	cmp    al,0x1c
c001f675:	74 04                	je     c001f67b <Vm::faultHandler(regs*)+0x810>
c001f677:	3c 5a                	cmp    al,0x5a
c001f679:	75 eb                	jne    c001f666 <Vm::faultHandler(regs*)+0x7fb>
c001f67b:	3c 1c                	cmp    al,0x1c
c001f67d:	74 04                	je     c001f683 <Vm::faultHandler(regs*)+0x818>
c001f67f:	3c 5a                	cmp    al,0x5a
c001f681:	75 0f                	jne    c001f692 <Vm::faultHandler(regs*)+0x827>
c001f683:	83 ec 0c             	sub    esp,0xc
c001f686:	6a 60                	push   0x60
c001f688:	e8 e9 f3 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f68d:	83 c4 10             	add    esp,0x10
c001f690:	eb e9                	jmp    c001f67b <Vm::faultHandler(regs*)+0x810>
c001f692:	31 c0                	xor    eax,eax
c001f694:	83 c4 1c             	add    esp,0x1c
c001f697:	5b                   	pop    ebx
c001f698:	5e                   	pop    esi
c001f699:	5f                   	pop    edi
c001f69a:	5d                   	pop    ebp
c001f69b:	c3                   	ret    

c001f69c <Vm::fpuInternalTo32(unsigned long long)>:
c001f69c:	57                   	push   edi
c001f69d:	56                   	push   esi
c001f69e:	53                   	push   ebx
c001f69f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a7:	89 d6                	mov    esi,edx
c001f6a9:	89 d7                	mov    edi,edx
c001f6ab:	89 c1                	mov    ecx,eax
c001f6ad:	c1 ef 14             	shr    edi,0x14
c001f6b0:	89 d3                	mov    ebx,edx
c001f6b2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6b8:	31 d2                	xor    edx,edx
c001f6ba:	89 f8                	mov    eax,edi
c001f6bc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6c2:	bf ff 00 00 00       	mov    edi,0xff
c001f6c7:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6cc:	83 d2 ff             	adc    edx,0xffffffff
c001f6cf:	39 c7                	cmp    edi,eax
c001f6d1:	bf 00 00 00 00       	mov    edi,0x0
c001f6d6:	19 d7                	sbb    edi,edx
c001f6d8:	72 15                	jb     c001f6ef <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6da:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6de:	c1 e0 17             	shl    eax,0x17
c001f6e1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6e7:	09 f1                	or     ecx,esi
c001f6e9:	09 c1                	or     ecx,eax
c001f6eb:	89 cf                	mov    edi,ecx
c001f6ed:	eb 02                	jmp    c001f6f1 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6ef:	31 ff                	xor    edi,edi
c001f6f1:	89 f8                	mov    eax,edi
c001f6f3:	5b                   	pop    ebx
c001f6f4:	5e                   	pop    esi
c001f6f5:	5f                   	pop    edi
c001f6f6:	c3                   	ret    

c001f6f7 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6ff:	c3                   	ret    

c001f700 <Vm::fpu32ToInternal(unsigned int)>:
c001f700:	57                   	push   edi
c001f701:	31 ff                	xor    edi,edi
c001f703:	56                   	push   esi
c001f704:	53                   	push   ebx
c001f705:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f709:	89 cb                	mov    ebx,ecx
c001f70b:	89 ce                	mov    esi,ecx
c001f70d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f713:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f719:	c1 e9 17             	shr    ecx,0x17
c001f71c:	89 f0                	mov    eax,esi
c001f71e:	0f b6 d1             	movzx  edx,cl
c001f721:	81 c2 80 03 00 00    	add    edx,0x380
c001f727:	89 d1                	mov    ecx,edx
c001f729:	89 fa                	mov    edx,edi
c001f72b:	c1 e1 14             	shl    ecx,0x14
c001f72e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f732:	c1 e0 1d             	shl    eax,0x1d
c001f735:	89 d7                	mov    edi,edx
c001f737:	89 c6                	mov    esi,eax
c001f739:	89 ca                	mov    edx,ecx
c001f73b:	89 f0                	mov    eax,esi
c001f73d:	09 fa                	or     edx,edi
c001f73f:	09 da                	or     edx,ebx
c001f741:	5b                   	pop    ebx
c001f742:	5e                   	pop    esi
c001f743:	5f                   	pop    edi
c001f744:	c3                   	ret    

c001f745 <Vm::fpu64ToInternal(unsigned long long)>:
c001f745:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f74d:	c3                   	ret    

c001f74e <Vm::fpuFloatToLong(unsigned long long)>:
c001f74e:	57                   	push   edi
c001f74f:	31 c0                	xor    eax,eax
c001f751:	56                   	push   esi
c001f752:	31 d2                	xor    edx,edx
c001f754:	53                   	push   ebx
c001f755:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f75d:	89 d9                	mov    ecx,ebx
c001f75f:	c1 e9 14             	shr    ecx,0x14
c001f762:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f768:	89 cf                	mov    edi,ecx
c001f76a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f770:	78 33                	js     c001f7a5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f772:	89 d9                	mov    ecx,ebx
c001f774:	89 f0                	mov    eax,esi
c001f776:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f77c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f782:	89 ca                	mov    edx,ecx
c001f784:	b9 34 00 00 00       	mov    ecx,0x34
c001f789:	29 f9                	sub    ecx,edi
c001f78b:	0f ad d0             	shrd   eax,edx,cl
c001f78e:	d3 fa                	sar    edx,cl
c001f790:	f6 c1 20             	test   cl,0x20
c001f793:	74 05                	je     c001f79a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f795:	89 d0                	mov    eax,edx
c001f797:	c1 fa 1f             	sar    edx,0x1f
c001f79a:	85 db                	test   ebx,ebx
c001f79c:	79 07                	jns    c001f7a5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f79e:	f7 d8                	neg    eax
c001f7a0:	83 d2 00             	adc    edx,0x0
c001f7a3:	f7 da                	neg    edx
c001f7a5:	5b                   	pop    ebx
c001f7a6:	5e                   	pop    esi
c001f7a7:	5f                   	pop    edi
c001f7a8:	c3                   	ret    

c001f7a9 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7a9:	57                   	push   edi
c001f7aa:	31 c9                	xor    ecx,ecx
c001f7ac:	56                   	push   esi
c001f7ad:	53                   	push   ebx
c001f7ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7b6:	0f ba e7 14          	bt     edi,0x14
c001f7ba:	72 07                	jb     c001f7c3 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7bc:	01 f6                	add    esi,esi
c001f7be:	11 ff                	adc    edi,edi
c001f7c0:	41                   	inc    ecx
c001f7c1:	eb f3                	jmp    c001f7b6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7c3:	89 fa                	mov    edx,edi
c001f7c5:	89 f0                	mov    eax,esi
c001f7c7:	bb 33 04 00 00       	mov    ebx,0x433
c001f7cc:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7d2:	29 cb                	sub    ebx,ecx
c001f7d4:	89 d9                	mov    ecx,ebx
c001f7d6:	5b                   	pop    ebx
c001f7d7:	c1 e1 14             	shl    ecx,0x14
c001f7da:	5e                   	pop    esi
c001f7db:	09 ca                	or     edx,ecx
c001f7dd:	5f                   	pop    edi
c001f7de:	c3                   	ret    

c001f7df <Vm::fpuLongToFloat(long long)>:
c001f7df:	56                   	push   esi
c001f7e0:	31 c0                	xor    eax,eax
c001f7e2:	53                   	push   ebx
c001f7e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7eb:	39 c8                	cmp    eax,ecx
c001f7ed:	19 d8                	sbb    eax,ebx
c001f7ef:	7d 04                	jge    c001f7f5 <Vm::fpuLongToFloat(long long)+0x16>
c001f7f1:	31 f6                	xor    esi,esi
c001f7f3:	eb 0c                	jmp    c001f801 <Vm::fpuLongToFloat(long long)+0x22>
c001f7f5:	f7 d9                	neg    ecx
c001f7f7:	be 01 00 00 00       	mov    esi,0x1
c001f7fc:	83 d3 00             	adc    ebx,0x0
c001f7ff:	f7 db                	neg    ebx
c001f801:	31 c0                	xor    eax,eax
c001f803:	0f ba e3 14          	bt     ebx,0x14
c001f807:	72 07                	jb     c001f810 <Vm::fpuLongToFloat(long long)+0x31>
c001f809:	01 c9                	add    ecx,ecx
c001f80b:	11 db                	adc    ebx,ebx
c001f80d:	40                   	inc    eax
c001f80e:	eb f3                	jmp    c001f803 <Vm::fpuLongToFloat(long long)+0x24>
c001f810:	ba 33 04 00 00       	mov    edx,0x433
c001f815:	29 c2                	sub    edx,eax
c001f817:	89 c8                	mov    eax,ecx
c001f819:	c1 e2 14             	shl    edx,0x14
c001f81c:	89 d9                	mov    ecx,ebx
c001f81e:	89 f3                	mov    ebx,esi
c001f820:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f826:	09 ca                	or     edx,ecx
c001f828:	84 db                	test   bl,bl
c001f82a:	74 06                	je     c001f832 <Vm::fpuLongToFloat(long long)+0x53>
c001f82c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f832:	5b                   	pop    ebx
c001f833:	5e                   	pop    esi
c001f834:	c3                   	ret    

c001f835 <Vm::fpuGet0()>:
c001f835:	31 c0                	xor    eax,eax
c001f837:	31 d2                	xor    edx,edx
c001f839:	c3                   	ret    

c001f83a <Vm::fpuGet1()>:
c001f83a:	b8 01 00 00 00       	mov    eax,0x1
c001f83f:	31 d2                	xor    edx,edx
c001f841:	c3                   	ret    

c001f842 <Vm::fpuGetPi()>:
c001f842:	b8 03 00 00 00       	mov    eax,0x3
c001f847:	31 d2                	xor    edx,edx
c001f849:	c3                   	ret    

c001f84a <Vm::fpuGetLog2E()>:
c001f84a:	83 ec 18             	sub    esp,0x18
c001f84d:	68 48 c8 02 c0       	push   0xc002c848
c001f852:	e8 0e ae ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001f857:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f85c:	31 d2                	xor    edx,edx
c001f85e:	83 c4 1c             	add    esp,0x1c
c001f861:	c3                   	ret    

c001f862 <Vm::fpuGetLogE2()>:
c001f862:	83 ec 18             	sub    esp,0x18
c001f865:	68 54 c8 02 c0       	push   0xc002c854
c001f86a:	e8 f6 ad ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001f86f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f874:	31 d2                	xor    edx,edx
c001f876:	83 c4 1c             	add    esp,0x1c
c001f879:	c3                   	ret    

c001f87a <Vm::fpuGetLog210()>:
c001f87a:	83 ec 18             	sub    esp,0x18
c001f87d:	68 60 c8 02 c0       	push   0xc002c860
c001f882:	e8 de ad ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001f887:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f88c:	31 d2                	xor    edx,edx
c001f88e:	83 c4 1c             	add    esp,0x1c
c001f891:	c3                   	ret    

c001f892 <Vm::fpuGetLog102()>:
c001f892:	83 ec 18             	sub    esp,0x18
c001f895:	68 6d c8 02 c0       	push   0xc002c86d
c001f89a:	e8 c6 ad ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001f89f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8a4:	31 d2                	xor    edx,edx
c001f8a6:	83 c4 1c             	add    esp,0x1c
c001f8a9:	c3                   	ret    

c001f8aa <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8ae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8b6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8ba:	0f 92 c0             	setb   al
c001f8bd:	c3                   	ret    

c001f8be <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c6:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8ca:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8ce:	09 c2                	or     edx,eax
c001f8d0:	0f 94 c0             	sete   al
c001f8d3:	c3                   	ret    

c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8d4:	57                   	push   edi
c001f8d5:	56                   	push   esi
c001f8d6:	53                   	push   ebx
c001f8d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8e7:	57                   	push   edi
c001f8e8:	56                   	push   esi
c001f8e9:	53                   	push   ebx
c001f8ea:	51                   	push   ecx
c001f8eb:	e8 ce ff ff ff       	call   c001f8be <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8f0:	83 c4 10             	add    esp,0x10
c001f8f3:	88 c2                	mov    dl,al
c001f8f5:	31 c0                	xor    eax,eax
c001f8f7:	84 d2                	test   dl,dl
c001f8f9:	75 0c                	jne    c001f907 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8fb:	57                   	push   edi
c001f8fc:	56                   	push   esi
c001f8fd:	53                   	push   ebx
c001f8fe:	51                   	push   ecx
c001f8ff:	e8 a6 ff ff ff       	call   c001f8aa <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f904:	83 c4 10             	add    esp,0x10
c001f907:	83 e0 01             	and    eax,0x1
c001f90a:	5b                   	pop    ebx
c001f90b:	88 c1                	mov    cl,al
c001f90d:	83 e2 01             	and    edx,0x1
c001f910:	a0 c1 1a 03 c0       	mov    al,ds:0xc0031ac1
c001f915:	c1 e2 06             	shl    edx,0x6
c001f918:	83 e0 ba             	and    eax,0xffffffba
c001f91b:	5e                   	pop    esi
c001f91c:	09 c8                	or     eax,ecx
c001f91e:	5f                   	pop    edi
c001f91f:	09 d0                	or     eax,edx
c001f921:	a2 c1 1a 03 c0       	mov    ds:0xc0031ac1,al
c001f926:	c3                   	ret    

c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f92b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f92f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f933:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f937:	c3                   	ret    

c001f938 <Vm::fpuAbs(unsigned long long)>:
c001f938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f940:	c3                   	ret    

c001f941 <Vm::fpuChs(unsigned long long)>:
c001f941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f945:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f949:	f7 d8                	neg    eax
c001f94b:	83 d2 00             	adc    edx,0x0
c001f94e:	f7 da                	neg    edx
c001f950:	c3                   	ret    

c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f951:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f955:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f95a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f95e:	eb c7                	jmp    c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f960:	53                   	push   ebx
c001f961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f965:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f969:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f96d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f971:	0f af ca             	imul   ecx,edx
c001f974:	0f af d8             	imul   ebx,eax
c001f977:	f7 e2                	mul    edx
c001f979:	01 d9                	add    ecx,ebx
c001f97b:	5b                   	pop    ebx
c001f97c:	01 ca                	add    edx,ecx
c001f97e:	c3                   	ret    

c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f97f:	83 ec 0c             	sub    esp,0xc
c001f982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f992:	e8 a5 70 00 00       	call   c0026a3c <__udivdi3>
c001f997:	83 c4 1c             	add    esp,0x1c
c001f99a:	c3                   	ret    

c001f99b <Vm::fpuSquare(unsigned long long)>:
c001f99b:	50                   	push   eax
c001f99c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9a4:	52                   	push   edx
c001f9a5:	50                   	push   eax
c001f9a6:	52                   	push   edx
c001f9a7:	50                   	push   eax
c001f9a8:	e8 b3 ff ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9ad:	83 c4 14             	add    esp,0x14
c001f9b0:	c3                   	ret    

c001f9b1 <Vm::fpuGetReg(int)>:
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9b9:	76 10                	jbe    c001f9cb <Vm::fpuGetReg(int)+0x1a>
c001f9bb:	83 ec 0c             	sub    esp,0xc
c001f9be:	68 7a c8 02 c0       	push   0xc002c87a
c001f9c3:	e8 9d ac ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001f9c8:	83 c4 10             	add    esp,0x10
c001f9cb:	a0 c1 1a 03 c0       	mov    al,ds:0xc0031ac1
c001f9d0:	b9 08 00 00 00       	mov    ecx,0x8
c001f9d5:	c0 e8 03             	shr    al,0x3
c001f9d8:	83 e0 07             	and    eax,0x7
c001f9db:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9df:	99                   	cdq    
c001f9e0:	f7 f9                	idiv   ecx
c001f9e2:	8b 04 d5 c4 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce53c]
c001f9e9:	8b 14 d5 c8 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce538]
c001f9f0:	83 c4 0c             	add    esp,0xc
c001f9f3:	c3                   	ret    

c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>:
c001f9f4:	57                   	push   edi
c001f9f5:	56                   	push   esi
c001f9f6:	52                   	push   edx
c001f9f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9ff:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa04:	76 10                	jbe    c001fa16 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa06:	83 ec 0c             	sub    esp,0xc
c001fa09:	68 8d c8 02 c0       	push   0xc002c88d
c001fa0e:	e8 52 ac ff ff       	call   c001a665 <Krnl::panic(char const*)>
c001fa13:	83 c4 10             	add    esp,0x10
c001fa16:	a0 c1 1a 03 c0       	mov    al,ds:0xc0031ac1
c001fa1b:	b9 08 00 00 00       	mov    ecx,0x8
c001fa20:	c0 e8 03             	shr    al,0x3
c001fa23:	83 e0 07             	and    eax,0x7
c001fa26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa2a:	99                   	cdq    
c001fa2b:	f7 f9                	idiv   ecx
c001fa2d:	89 34 d5 c4 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce53c],esi
c001fa34:	89 3c d5 c8 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce538],edi
c001fa3b:	58                   	pop    eax
c001fa3c:	5e                   	pop    esi
c001fa3d:	5f                   	pop    edi
c001fa3e:	c3                   	ret    

c001fa3f <Vm::fpuPush(unsigned long long)>:
c001fa3f:	a0 c1 1a 03 c0       	mov    al,ds:0xc0031ac1
c001fa44:	c0 e8 03             	shr    al,0x3
c001fa47:	83 e0 07             	and    eax,0x7
c001fa4a:	83 c0 07             	add    eax,0x7
c001fa4d:	88 c2                	mov    dl,al
c001fa4f:	83 e0 07             	and    eax,0x7
c001fa52:	83 e2 07             	and    edx,0x7
c001fa55:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa5c:	8a 15 c1 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ac1
c001fa62:	83 e2 c7             	and    edx,0xffffffc7
c001fa65:	09 ca                	or     edx,ecx
c001fa67:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa6b:	88 15 c1 1a 03 c0    	mov    BYTE PTR ds:0xc0031ac1,dl
c001fa71:	89 0c c5 c8 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce538],ecx
c001fa78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa7c:	89 14 c5 c4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce53c],edx
c001fa83:	a1 04 1b 03 c0       	mov    eax,ds:0xc0031b04
c001fa88:	83 f8 08             	cmp    eax,0x8
c001fa8b:	75 08                	jne    c001fa95 <Vm::fpuPush(unsigned long long)+0x56>
c001fa8d:	80 0d c0 1a 03 c0 40 	or     BYTE PTR ds:0xc0031ac0,0x40
c001fa94:	c3                   	ret    
c001fa95:	40                   	inc    eax
c001fa96:	a3 04 1b 03 c0       	mov    ds:0xc0031b04,eax
c001fa9b:	c3                   	ret    

c001fa9c <Vm::fpuPop()>:
c001fa9c:	8a 0d c1 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031ac1
c001faa2:	53                   	push   ebx
c001faa3:	c0 e9 03             	shr    cl,0x3
c001faa6:	8a 1d c1 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031ac1
c001faac:	83 e1 07             	and    ecx,0x7
c001faaf:	83 e3 c7             	and    ebx,0xffffffc7
c001fab2:	8b 04 cd c4 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce53c]
c001fab9:	8b 14 cd c8 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce538]
c001fac0:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fac7:	83 e1 38             	and    ecx,0x38
c001faca:	09 d9                	or     ecx,ebx
c001facc:	88 0d c1 1a 03 c0    	mov    BYTE PTR ds:0xc0031ac1,cl
c001fad2:	8b 0d 04 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b04
c001fad8:	85 c9                	test   ecx,ecx
c001fada:	74 09                	je     c001fae5 <Vm::fpuPop()+0x49>
c001fadc:	49                   	dec    ecx
c001fadd:	89 0d 04 1b 03 c0    	mov    DWORD PTR ds:0xc0031b04,ecx
c001fae3:	eb 07                	jmp    c001faec <Vm::fpuPop()+0x50>
c001fae5:	80 0d c0 1a 03 c0 40 	or     BYTE PTR ds:0xc0031ac0,0x40
c001faec:	5b                   	pop    ebx
c001faed:	c3                   	ret    

c001faee <Vm::x87Handler(regs*)>:
c001faee:	55                   	push   ebp
c001faef:	57                   	push   edi
c001faf0:	56                   	push   esi
c001faf1:	53                   	push   ebx
c001faf2:	83 ec 1c             	sub    esp,0x1c
c001faf5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001faf9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fafe:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb01:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb09:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb0d:	50                   	push   eax
c001fb0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb12:	50                   	push   eax
c001fb13:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb17:	50                   	push   eax
c001fb18:	53                   	push   ebx
c001fb19:	e8 0e a2 ff ff       	call   c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb1e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb21:	83 c4 10             	add    esp,0x10
c001fb24:	89 c6                	mov    esi,eax
c001fb26:	80 fa d9             	cmp    dl,0xd9
c001fb29:	0f 85 52 01 00 00    	jne    c001fc81 <Vm::x87Handler(regs*)+0x193>
c001fb2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb33:	8d 50 20             	lea    edx,[eax+0x20]
c001fb36:	80 fa 0e             	cmp    dl,0xe
c001fb39:	0f 87 86 00 00 00    	ja     c001fbc5 <Vm::x87Handler(regs*)+0xd7>
c001fb3f:	0f b6 d2             	movzx  edx,dl
c001fb42:	ff 24 95 a0 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3760]
c001fb49:	e8 e7 fc ff ff       	call   c001f835 <Vm::fpuGet0()>
c001fb4e:	eb 05                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fb50:	e8 e5 fc ff ff       	call   c001f83a <Vm::fpuGet1()>
c001fb55:	57                   	push   edi
c001fb56:	57                   	push   edi
c001fb57:	52                   	push   edx
c001fb58:	50                   	push   eax
c001fb59:	e8 e1 fe ff ff       	call   c001fa3f <Vm::fpuPush(unsigned long long)>
c001fb5e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb62:	83 c4 10             	add    esp,0x10
c001fb65:	b0 01                	mov    al,0x1
c001fb67:	e9 e3 09 00 00       	jmp    c002054f <Vm::x87Handler(regs*)+0xa61>
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	6a 00                	push   0x0
c001fb71:	e8 3b fe ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fb76:	59                   	pop    ecx
c001fb77:	5e                   	pop    esi
c001fb78:	52                   	push   edx
c001fb79:	50                   	push   eax
c001fb7a:	e8 c2 fd ff ff       	call   c001f941 <Vm::fpuChs(unsigned long long)>
c001fb7f:	eb 13                	jmp    c001fb94 <Vm::x87Handler(regs*)+0xa6>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	6a 00                	push   0x0
c001fb86:	e8 26 fe ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fb8b:	5f                   	pop    edi
c001fb8c:	5d                   	pop    ebp
c001fb8d:	52                   	push   edx
c001fb8e:	50                   	push   eax
c001fb8f:	e8 a4 fd ff ff       	call   c001f938 <Vm::fpuAbs(unsigned long long)>
c001fb94:	83 c4 0c             	add    esp,0xc
c001fb97:	52                   	push   edx
c001fb98:	50                   	push   eax
c001fb99:	6a 00                	push   0x0
c001fb9b:	e8 54 fe ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c001fba0:	eb bc                	jmp    c001fb5e <Vm::x87Handler(regs*)+0x70>
c001fba2:	e8 d3 fc ff ff       	call   c001f87a <Vm::fpuGetLog210()>
c001fba7:	eb ac                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fba9:	e8 9c fc ff ff       	call   c001f84a <Vm::fpuGetLog2E()>
c001fbae:	eb a5                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbb0:	e8 8d fc ff ff       	call   c001f842 <Vm::fpuGetPi()>
c001fbb5:	eb 9e                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbb7:	e8 d6 fc ff ff       	call   c001f892 <Vm::fpuGetLog102()>
c001fbbc:	eb 97                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbbe:	e8 9f fc ff ff       	call   c001f862 <Vm::fpuGetLogE2()>
c001fbc3:	eb 90                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbc5:	8d 50 40             	lea    edx,[eax+0x40]
c001fbc8:	80 fa 07             	cmp    dl,0x7
c001fbcb:	77 15                	ja     c001fbe2 <Vm::x87Handler(regs*)+0xf4>
c001fbcd:	83 ec 0c             	sub    esp,0xc
c001fbd0:	2d c0 00 00 00       	sub    eax,0xc0
c001fbd5:	50                   	push   eax
c001fbd6:	e8 d6 fd ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fbdb:	59                   	pop    ecx
c001fbdc:	5e                   	pop    esi
c001fbdd:	e9 75 ff ff ff       	jmp    c001fb57 <Vm::x87Handler(regs*)+0x69>
c001fbe2:	8d 50 38             	lea    edx,[eax+0x38]
c001fbe5:	80 fa 07             	cmp    dl,0x7
c001fbe8:	77 3c                	ja     c001fc26 <Vm::x87Handler(regs*)+0x138>
c001fbea:	83 ec 0c             	sub    esp,0xc
c001fbed:	2d c8 00 00 00       	sub    eax,0xc8
c001fbf2:	50                   	push   eax
c001fbf3:	e8 b9 fd ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fbf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbff:	89 c6                	mov    esi,eax
c001fc01:	89 d7                	mov    edi,edx
c001fc03:	e8 a9 fd ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fc08:	83 c4 0c             	add    esp,0xc
c001fc0b:	52                   	push   edx
c001fc0c:	50                   	push   eax
c001fc0d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc11:	2d c8 00 00 00       	sub    eax,0xc8
c001fc16:	50                   	push   eax
c001fc17:	e8 d8 fd ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c001fc1c:	83 c4 0c             	add    esp,0xc
c001fc1f:	57                   	push   edi
c001fc20:	56                   	push   esi
c001fc21:	e9 73 ff ff ff       	jmp    c001fb99 <Vm::x87Handler(regs*)+0xab>
c001fc26:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc2a:	84 d2                	test   dl,dl
c001fc2c:	75 0f                	jne    c001fc3d <Vm::x87Handler(regs*)+0x14f>
c001fc2e:	83 ec 0c             	sub    esp,0xc
c001fc31:	ff 36                	push   DWORD PTR [esi]
c001fc33:	e8 c8 fa ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c001fc38:	e9 bf 00 00 00       	jmp    c001fcfc <Vm::x87Handler(regs*)+0x20e>
c001fc3d:	80 fa 03             	cmp    dl,0x3
c001fc40:	75 13                	jne    c001fc55 <Vm::x87Handler(regs*)+0x167>
c001fc42:	e8 55 fe ff ff       	call   c001fa9c <Vm::fpuPop()>
c001fc47:	55                   	push   ebp
c001fc48:	55                   	push   ebp
c001fc49:	52                   	push   edx
c001fc4a:	50                   	push   eax
c001fc4b:	e8 4c fa ff ff       	call   c001f69c <Vm::fpuInternalTo32(unsigned long long)>
c001fc50:	e9 88 00 00 00       	jmp    c001fcdd <Vm::x87Handler(regs*)+0x1ef>
c001fc55:	80 fa 05             	cmp    dl,0x5
c001fc58:	75 0e                	jne    c001fc68 <Vm::x87Handler(regs*)+0x17a>
c001fc5a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc5d:	66 a3 c2 1a 03 c0    	mov    ds:0xc0031ac2,ax
c001fc63:	e9 df 00 00 00       	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c001fc68:	31 c0                	xor    eax,eax
c001fc6a:	80 fa 07             	cmp    dl,0x7
c001fc6d:	0f 85 dc 08 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c001fc73:	66 a1 c2 1a 03 c0    	mov    ax,ds:0xc0031ac2
c001fc79:	66 89 06             	mov    WORD PTR [esi],ax
c001fc7c:	e9 c6 00 00 00       	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c001fc81:	80 fa d8             	cmp    dl,0xd8
c001fc84:	0f 84 c9 00 00 00    	je     c001fd53 <Vm::x87Handler(regs*)+0x265>
c001fc8a:	80 fa dc             	cmp    dl,0xdc
c001fc8d:	0f 84 0d 02 00 00    	je     c001fea0 <Vm::x87Handler(regs*)+0x3b2>
c001fc93:	80 fa de             	cmp    dl,0xde
c001fc96:	0f 84 cd 02 00 00    	je     c001ff69 <Vm::x87Handler(regs*)+0x47b>
c001fc9c:	80 fa dd             	cmp    dl,0xdd
c001fc9f:	0f 84 5f 04 00 00    	je     c0020104 <Vm::x87Handler(regs*)+0x616>
c001fca5:	80 fa da             	cmp    dl,0xda
c001fca8:	0f 84 24 05 00 00    	je     c00201d2 <Vm::x87Handler(regs*)+0x6e4>
c001fcae:	80 fa df             	cmp    dl,0xdf
c001fcb1:	0f 84 68 05 00 00    	je     c002021f <Vm::x87Handler(regs*)+0x731>
c001fcb7:	31 c0                	xor    eax,eax
c001fcb9:	80 fa db             	cmp    dl,0xdb
c001fcbc:	0f 85 8d 08 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c001fcc2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcc6:	80 fa 03             	cmp    dl,0x3
c001fcc9:	0f 85 70 06 00 00    	jne    c002033f <Vm::x87Handler(regs*)+0x851>
c001fccf:	e8 c8 fd ff ff       	call   c001fa9c <Vm::fpuPop()>
c001fcd4:	55                   	push   ebp
c001fcd5:	55                   	push   ebp
c001fcd6:	52                   	push   edx
c001fcd7:	50                   	push   eax
c001fcd8:	e8 71 fa ff ff       	call   c001f74e <Vm::fpuFloatToLong(unsigned long long)>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	89 06                	mov    DWORD PTR [esi],eax
c001fce2:	eb 63                	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c001fce4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fce8:	84 d2                	test   dl,dl
c001fcea:	0f 85 e6 05 00 00    	jne    c00202d6 <Vm::x87Handler(regs*)+0x7e8>
c001fcf0:	57                   	push   edi
c001fcf1:	57                   	push   edi
c001fcf2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcf5:	ff 36                	push   DWORD PTR [esi]
c001fcf7:	e8 49 fa ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c001fcfc:	5e                   	pop    esi
c001fcfd:	5f                   	pop    edi
c001fcfe:	52                   	push   edx
c001fcff:	50                   	push   eax
c001fd00:	e8 3a fd ff ff       	call   c001fa3f <Vm::fpuPush(unsigned long long)>
c001fd05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd09:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd0c:	e9 51 fe ff ff       	jmp    c001fb62 <Vm::x87Handler(regs*)+0x74>
c001fd11:	80 fa 03             	cmp    dl,0x3
c001fd14:	0f 85 d7 06 00 00    	jne    c00203f1 <Vm::x87Handler(regs*)+0x903>
c001fd1a:	57                   	push   edi
c001fd1b:	57                   	push   edi
c001fd1c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd1f:	ff 36                	push   DWORD PTR [esi]
c001fd21:	e8 1f fa ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c001fd26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd2d:	89 c6                	mov    esi,eax
c001fd2f:	89 d7                	mov    edi,edx
c001fd31:	e8 7b fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd36:	57                   	push   edi
c001fd37:	56                   	push   esi
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	e8 95 fb ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd3f:	83 c4 20             	add    esp,0x20
c001fd42:	e8 55 fd ff ff       	call   c001fa9c <Vm::fpuPop()>
c001fd47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd4b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd4e:	e9 12 fe ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c001fd53:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd57:	8d 50 40             	lea    edx,[eax+0x40]
c001fd5a:	80 fa 07             	cmp    dl,0x7
c001fd5d:	77 29                	ja     c001fd88 <Vm::x87Handler(regs*)+0x29a>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	2d c0 00 00 00       	sub    eax,0xc0
c001fd67:	50                   	push   eax
c001fd68:	e8 44 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd6d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd74:	89 c6                	mov    esi,eax
c001fd76:	89 d7                	mov    edi,edx
c001fd78:	e8 34 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd7d:	57                   	push   edi
c001fd7e:	56                   	push   esi
c001fd7f:	52                   	push   edx
c001fd80:	50                   	push   eax
c001fd81:	e8 a1 fb ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd86:	eb 2f                	jmp    c001fdb7 <Vm::x87Handler(regs*)+0x2c9>
c001fd88:	8d 50 38             	lea    edx,[eax+0x38]
c001fd8b:	80 fa 07             	cmp    dl,0x7
c001fd8e:	77 2f                	ja     c001fdbf <Vm::x87Handler(regs*)+0x2d1>
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	2d c8 00 00 00       	sub    eax,0xc8
c001fd98:	50                   	push   eax
c001fd99:	e8 13 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda5:	89 c6                	mov    esi,eax
c001fda7:	89 d7                	mov    edi,edx
c001fda9:	e8 03 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fdae:	57                   	push   edi
c001fdaf:	56                   	push   esi
c001fdb0:	52                   	push   edx
c001fdb1:	50                   	push   eax
c001fdb2:	e8 a9 fb ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdb7:	83 c4 1c             	add    esp,0x1c
c001fdba:	e9 d8 fd ff ff       	jmp    c001fb97 <Vm::x87Handler(regs*)+0xa9>
c001fdbf:	8d 50 30             	lea    edx,[eax+0x30]
c001fdc2:	80 fa 07             	cmp    dl,0x7
c001fdc5:	77 0d                	ja     c001fdd4 <Vm::x87Handler(regs*)+0x2e6>
c001fdc7:	83 ec 0c             	sub    esp,0xc
c001fdca:	2d d0 00 00 00       	sub    eax,0xd0
c001fdcf:	e9 99 03 00 00       	jmp    c002016d <Vm::x87Handler(regs*)+0x67f>
c001fdd4:	8d 50 28             	lea    edx,[eax+0x28]
c001fdd7:	80 fa 07             	cmp    dl,0x7
c001fdda:	77 0d                	ja     c001fde9 <Vm::x87Handler(regs*)+0x2fb>
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	2d d8 00 00 00       	sub    eax,0xd8
c001fde4:	e9 c0 03 00 00       	jmp    c00201a9 <Vm::x87Handler(regs*)+0x6bb>
c001fde9:	8d 50 20             	lea    edx,[eax+0x20]
c001fdec:	80 fa 07             	cmp    dl,0x7
c001fdef:	77 1b                	ja     c001fe0c <Vm::x87Handler(regs*)+0x31e>
c001fdf1:	83 ec 0c             	sub    esp,0xc
c001fdf4:	2d e0 00 00 00       	sub    eax,0xe0
c001fdf9:	50                   	push   eax
c001fdfa:	e8 b2 fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fdff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe06:	89 c6                	mov    esi,eax
c001fe08:	89 d7                	mov    edi,edx
c001fe0a:	eb 22                	jmp    c001fe2e <Vm::x87Handler(regs*)+0x340>
c001fe0c:	8d 50 18             	lea    edx,[eax+0x18]
c001fe0f:	80 fa 07             	cmp    dl,0x7
c001fe12:	77 2d                	ja     c001fe41 <Vm::x87Handler(regs*)+0x353>
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	6a 00                	push   0x0
c001fe19:	e8 93 fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe1e:	89 c6                	mov    esi,eax
c001fe20:	89 d7                	mov    edi,edx
c001fe22:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe26:	2d e8 00 00 00       	sub    eax,0xe8
c001fe2b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe2e:	e8 7e fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe33:	57                   	push   edi
c001fe34:	56                   	push   esi
c001fe35:	52                   	push   edx
c001fe36:	50                   	push   eax
c001fe37:	e8 15 fb ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe3c:	e9 76 ff ff ff       	jmp    c001fdb7 <Vm::x87Handler(regs*)+0x2c9>
c001fe41:	8d 50 10             	lea    edx,[eax+0x10]
c001fe44:	80 fa 07             	cmp    dl,0x7
c001fe47:	77 1b                	ja     c001fe64 <Vm::x87Handler(regs*)+0x376>
c001fe49:	83 ec 0c             	sub    esp,0xc
c001fe4c:	2d f0 00 00 00       	sub    eax,0xf0
c001fe51:	50                   	push   eax
c001fe52:	e8 5a fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe5e:	89 c6                	mov    esi,eax
c001fe60:	89 d7                	mov    edi,edx
c001fe62:	eb 22                	jmp    c001fe86 <Vm::x87Handler(regs*)+0x398>
c001fe64:	3c f7                	cmp    al,0xf7
c001fe66:	0f 86 d1 03 00 00    	jbe    c002023d <Vm::x87Handler(regs*)+0x74f>
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	6a 00                	push   0x0
c001fe71:	e8 3b fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe76:	89 c6                	mov    esi,eax
c001fe78:	89 d7                	mov    edi,edx
c001fe7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7e:	2d f8 00 00 00       	sub    eax,0xf8
c001fe83:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe86:	e8 26 fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe8b:	57                   	push   edi
c001fe8c:	56                   	push   esi
c001fe8d:	52                   	push   edx
c001fe8e:	50                   	push   eax
c001fe8f:	e8 eb fa ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe94:	83 c4 1c             	add    esp,0x1c
c001fe97:	52                   	push   edx
c001fe98:	50                   	push   eax
c001fe99:	6a 00                	push   0x0
c001fe9b:	e9 51 02 00 00       	jmp    c00200f1 <Vm::x87Handler(regs*)+0x603>
c001fea0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea4:	8d 50 40             	lea    edx,[eax+0x40]
c001fea7:	80 fa 07             	cmp    dl,0x7
c001feaa:	77 37                	ja     c001fee3 <Vm::x87Handler(regs*)+0x3f5>
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	2d c0 00 00 00       	sub    eax,0xc0
c001feb4:	50                   	push   eax
c001feb5:	e8 f7 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001feba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec1:	89 c6                	mov    esi,eax
c001fec3:	89 d7                	mov    edi,edx
c001fec5:	e8 e7 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001feca:	57                   	push   edi
c001fecb:	56                   	push   esi
c001fecc:	52                   	push   edx
c001fecd:	50                   	push   eax
c001fece:	e8 54 fa ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fed3:	83 c4 1c             	add    esp,0x1c
c001fed6:	52                   	push   edx
c001fed7:	50                   	push   eax
c001fed8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedc:	2d c0 00 00 00       	sub    eax,0xc0
c001fee1:	eb 3d                	jmp    c001ff20 <Vm::x87Handler(regs*)+0x432>
c001fee3:	8d 50 38             	lea    edx,[eax+0x38]
c001fee6:	80 fa 07             	cmp    dl,0x7
c001fee9:	77 3b                	ja     c001ff26 <Vm::x87Handler(regs*)+0x438>
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	2d c8 00 00 00       	sub    eax,0xc8
c001fef3:	50                   	push   eax
c001fef4:	e8 b8 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fef9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff00:	89 c6                	mov    esi,eax
c001ff02:	89 d7                	mov    edi,edx
c001ff04:	e8 a8 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff09:	57                   	push   edi
c001ff0a:	56                   	push   esi
c001ff0b:	52                   	push   edx
c001ff0c:	50                   	push   eax
c001ff0d:	e8 4e fa ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff12:	83 c4 1c             	add    esp,0x1c
c001ff15:	52                   	push   edx
c001ff16:	50                   	push   eax
c001ff17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1b:	2d c8 00 00 00       	sub    eax,0xc8
c001ff20:	50                   	push   eax
c001ff21:	e9 75 fc ff ff       	jmp    c001fb9b <Vm::x87Handler(regs*)+0xad>
c001ff26:	83 c0 18             	add    eax,0x18
c001ff29:	3c 07                	cmp    al,0x7
c001ff2b:	0f 87 3b 04 00 00    	ja     c002036c <Vm::x87Handler(regs*)+0x87e>
c001ff31:	83 ec 0c             	sub    esp,0xc
c001ff34:	6a 00                	push   0x0
c001ff36:	e8 76 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff3b:	89 c6                	mov    esi,eax
c001ff3d:	89 d7                	mov    edi,edx
c001ff3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff43:	2d e8 00 00 00       	sub    eax,0xe8
c001ff48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff4b:	e8 61 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff50:	57                   	push   edi
c001ff51:	56                   	push   esi
c001ff52:	52                   	push   edx
c001ff53:	50                   	push   eax
c001ff54:	e8 f8 f9 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff59:	83 c4 1c             	add    esp,0x1c
c001ff5c:	52                   	push   edx
c001ff5d:	50                   	push   eax
c001ff5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff62:	2d e8 00 00 00       	sub    eax,0xe8
c001ff67:	eb b7                	jmp    c001ff20 <Vm::x87Handler(regs*)+0x432>
c001ff69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6d:	8d 50 40             	lea    edx,[eax+0x40]
c001ff70:	80 fa 07             	cmp    dl,0x7
c001ff73:	77 3a                	ja     c001ffaf <Vm::x87Handler(regs*)+0x4c1>
c001ff75:	83 ec 0c             	sub    esp,0xc
c001ff78:	2d c0 00 00 00       	sub    eax,0xc0
c001ff7d:	50                   	push   eax
c001ff7e:	e8 2e fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8a:	89 c6                	mov    esi,eax
c001ff8c:	89 d7                	mov    edi,edx
c001ff8e:	e8 1e fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff93:	57                   	push   edi
c001ff94:	56                   	push   esi
c001ff95:	52                   	push   edx
c001ff96:	50                   	push   eax
c001ff97:	e8 8b f9 ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff9c:	83 c4 1c             	add    esp,0x1c
c001ff9f:	52                   	push   edx
c001ffa0:	50                   	push   eax
c001ffa1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa5:	2d c0 00 00 00       	sub    eax,0xc0
c001ffaa:	e9 9e 01 00 00       	jmp    c002014d <Vm::x87Handler(regs*)+0x65f>
c001ffaf:	8d 50 20             	lea    edx,[eax+0x20]
c001ffb2:	80 fa 07             	cmp    dl,0x7
c001ffb5:	77 3a                	ja     c001fff1 <Vm::x87Handler(regs*)+0x503>
c001ffb7:	83 ec 0c             	sub    esp,0xc
c001ffba:	2d e0 00 00 00       	sub    eax,0xe0
c001ffbf:	50                   	push   eax
c001ffc0:	e8 ec f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ffc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffcc:	89 c6                	mov    esi,eax
c001ffce:	89 d7                	mov    edi,edx
c001ffd0:	e8 dc f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ffd5:	57                   	push   edi
c001ffd6:	56                   	push   esi
c001ffd7:	52                   	push   edx
c001ffd8:	50                   	push   eax
c001ffd9:	e8 73 f9 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffde:	83 c4 1c             	add    esp,0x1c
c001ffe1:	52                   	push   edx
c001ffe2:	50                   	push   eax
c001ffe3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe7:	2d e0 00 00 00       	sub    eax,0xe0
c001ffec:	e9 5c 01 00 00       	jmp    c002014d <Vm::x87Handler(regs*)+0x65f>
c001fff1:	8d 50 18             	lea    edx,[eax+0x18]
c001fff4:	80 fa 07             	cmp    dl,0x7
c001fff7:	77 3b                	ja     c0020034 <Vm::x87Handler(regs*)+0x546>
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	6a 00                	push   0x0
c001fffe:	e8 ae f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020003:	89 c6                	mov    esi,eax
c0020005:	89 d7                	mov    edi,edx
c0020007:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000b:	2d e8 00 00 00       	sub    eax,0xe8
c0020010:	89 04 24             	mov    DWORD PTR [esp],eax
c0020013:	e8 99 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020018:	57                   	push   edi
c0020019:	56                   	push   esi
c002001a:	52                   	push   edx
c002001b:	50                   	push   eax
c002001c:	e8 30 f9 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020021:	83 c4 1c             	add    esp,0x1c
c0020024:	52                   	push   edx
c0020025:	50                   	push   eax
c0020026:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002002a:	2d e8 00 00 00       	sub    eax,0xe8
c002002f:	e9 19 01 00 00       	jmp    c002014d <Vm::x87Handler(regs*)+0x65f>
c0020034:	8d 50 38             	lea    edx,[eax+0x38]
c0020037:	80 fa 07             	cmp    dl,0x7
c002003a:	77 37                	ja     c0020073 <Vm::x87Handler(regs*)+0x585>
c002003c:	83 ec 0c             	sub    esp,0xc
c002003f:	2d c8 00 00 00       	sub    eax,0xc8
c0020044:	50                   	push   eax
c0020045:	e8 67 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002004a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020051:	89 c6                	mov    esi,eax
c0020053:	89 d7                	mov    edi,edx
c0020055:	e8 57 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002005a:	57                   	push   edi
c002005b:	56                   	push   esi
c002005c:	52                   	push   edx
c002005d:	50                   	push   eax
c002005e:	e8 fd f8 ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020063:	83 c4 1c             	add    esp,0x1c
c0020066:	52                   	push   edx
c0020067:	50                   	push   eax
c0020068:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006c:	2d c8 00 00 00       	sub    eax,0xc8
c0020071:	eb 7d                	jmp    c00200f0 <Vm::x87Handler(regs*)+0x602>
c0020073:	3c f7                	cmp    al,0xf7
c0020075:	76 38                	jbe    c00200af <Vm::x87Handler(regs*)+0x5c1>
c0020077:	83 ec 0c             	sub    esp,0xc
c002007a:	6a 00                	push   0x0
c002007c:	e8 30 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020081:	89 c6                	mov    esi,eax
c0020083:	89 d7                	mov    edi,edx
c0020085:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020089:	2d f8 00 00 00       	sub    eax,0xf8
c002008e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020091:	e8 1b f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020096:	57                   	push   edi
c0020097:	56                   	push   esi
c0020098:	52                   	push   edx
c0020099:	50                   	push   eax
c002009a:	e8 e0 f8 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002009f:	83 c4 1c             	add    esp,0x1c
c00200a2:	52                   	push   edx
c00200a3:	50                   	push   eax
c00200a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a8:	2d f8 00 00 00       	sub    eax,0xf8
c00200ad:	eb 41                	jmp    c00200f0 <Vm::x87Handler(regs*)+0x602>
c00200af:	8d 50 10             	lea    edx,[eax+0x10]
c00200b2:	80 fa 07             	cmp    dl,0x7
c00200b5:	0f 87 5a 01 00 00    	ja     c0020215 <Vm::x87Handler(regs*)+0x727>
c00200bb:	83 ec 0c             	sub    esp,0xc
c00200be:	2d f0 00 00 00       	sub    eax,0xf0
c00200c3:	50                   	push   eax
c00200c4:	e8 e8 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00200c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200d0:	89 c6                	mov    esi,eax
c00200d2:	89 d7                	mov    edi,edx
c00200d4:	e8 d8 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00200d9:	57                   	push   edi
c00200da:	56                   	push   esi
c00200db:	52                   	push   edx
c00200dc:	50                   	push   eax
c00200dd:	e8 9d f8 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200e2:	83 c4 1c             	add    esp,0x1c
c00200e5:	52                   	push   edx
c00200e6:	50                   	push   eax
c00200e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200eb:	2d f0 00 00 00       	sub    eax,0xf0
c00200f0:	50                   	push   eax
c00200f1:	e8 fe f8 ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c00200f6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200fa:	e8 9d f9 ff ff       	call   c001fa9c <Vm::fpuPop()>
c00200ff:	e9 5e fa ff ff       	jmp    c001fb62 <Vm::x87Handler(regs*)+0x74>
c0020104:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020108:	8d 50 30             	lea    edx,[eax+0x30]
c002010b:	80 fa 07             	cmp    dl,0x7
c002010e:	77 1d                	ja     c002012d <Vm::x87Handler(regs*)+0x63f>
c0020110:	83 ec 0c             	sub    esp,0xc
c0020113:	6a 00                	push   0x0
c0020115:	e8 97 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002011a:	83 c4 0c             	add    esp,0xc
c002011d:	52                   	push   edx
c002011e:	50                   	push   eax
c002011f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020123:	2d d0 00 00 00       	sub    eax,0xd0
c0020128:	e9 f3 fd ff ff       	jmp    c001ff20 <Vm::x87Handler(regs*)+0x432>
c002012d:	8d 50 28             	lea    edx,[eax+0x28]
c0020130:	80 fa 07             	cmp    dl,0x7
c0020133:	77 28                	ja     c002015d <Vm::x87Handler(regs*)+0x66f>
c0020135:	83 ec 0c             	sub    esp,0xc
c0020138:	6a 00                	push   0x0
c002013a:	e8 72 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002013f:	83 c4 0c             	add    esp,0xc
c0020142:	52                   	push   edx
c0020143:	50                   	push   eax
c0020144:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020148:	2d d8 00 00 00       	sub    eax,0xd8
c002014d:	50                   	push   eax
c002014e:	e8 a1 f8 ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c0020153:	e8 44 f9 ff ff       	call   c001fa9c <Vm::fpuPop()>
c0020158:	e9 01 fa ff ff       	jmp    c001fb5e <Vm::x87Handler(regs*)+0x70>
c002015d:	8d 50 20             	lea    edx,[eax+0x20]
c0020160:	80 fa 07             	cmp    dl,0x7
c0020163:	77 30                	ja     c0020195 <Vm::x87Handler(regs*)+0x6a7>
c0020165:	83 ec 0c             	sub    esp,0xc
c0020168:	2d e0 00 00 00       	sub    eax,0xe0
c002016d:	50                   	push   eax
c002016e:	e8 3e f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020173:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002017a:	89 c6                	mov    esi,eax
c002017c:	89 d7                	mov    edi,edx
c002017e:	e8 2e f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020183:	57                   	push   edi
c0020184:	56                   	push   esi
c0020185:	52                   	push   edx
c0020186:	50                   	push   eax
c0020187:	e8 48 f7 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002018c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020190:	e9 54 02 00 00       	jmp    c00203e9 <Vm::x87Handler(regs*)+0x8fb>
c0020195:	8d 50 18             	lea    edx,[eax+0x18]
c0020198:	80 fa 07             	cmp    dl,0x7
c002019b:	0f 87 43 fb ff ff    	ja     c001fce4 <Vm::x87Handler(regs*)+0x1f6>
c00201a1:	83 ec 0c             	sub    esp,0xc
c00201a4:	2d e8 00 00 00       	sub    eax,0xe8
c00201a9:	50                   	push   eax
c00201aa:	e8 02 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b6:	89 c6                	mov    esi,eax
c00201b8:	89 d7                	mov    edi,edx
c00201ba:	e8 f2 f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201bf:	57                   	push   edi
c00201c0:	56                   	push   esi
c00201c1:	52                   	push   edx
c00201c2:	50                   	push   eax
c00201c3:	e8 0c f7 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c8:	83 c4 20             	add    esp,0x20
c00201cb:	e8 cc f8 ff ff       	call   c001fa9c <Vm::fpuPop()>
c00201d0:	eb 62                	jmp    c0020234 <Vm::x87Handler(regs*)+0x746>
c00201d2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201d6:	0f 85 0f 01 00 00    	jne    c00202eb <Vm::x87Handler(regs*)+0x7fd>
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	6a 01                	push   0x1
c00201e1:	e8 cb f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201ed:	89 c6                	mov    esi,eax
c00201ef:	89 d7                	mov    edi,edx
c00201f1:	e8 bb f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201f6:	57                   	push   edi
c00201f7:	56                   	push   esi
c00201f8:	52                   	push   edx
c00201f9:	50                   	push   eax
c00201fa:	e8 d5 f6 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ff:	83 c4 20             	add    esp,0x20
c0020202:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020206:	e8 91 f8 ff ff       	call   c001fa9c <Vm::fpuPop()>
c002020b:	e8 8c f8 ff ff       	call   c001fa9c <Vm::fpuPop()>
c0020210:	e9 50 f9 ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c0020215:	3c d9                	cmp    al,0xd9
c0020217:	0f 85 b5 02 00 00    	jne    c00204d2 <Vm::x87Handler(regs*)+0x9e4>
c002021d:	eb bd                	jmp    c00201dc <Vm::x87Handler(regs*)+0x6ee>
c002021f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020223:	0f 85 ea 02 00 00    	jne    c0020513 <Vm::x87Handler(regs*)+0xa25>
c0020229:	0f b7 05 c0 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031ac0
c0020230:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020234:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020238:	e9 28 f9 ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c002023d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020241:	84 d2                	test   dl,dl
c0020243:	75 0f                	jne    c0020254 <Vm::x87Handler(regs*)+0x766>
c0020245:	83 ec 0c             	sub    esp,0xc
c0020248:	ff 36                	push   DWORD PTR [esi]
c002024a:	e8 b1 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c002024f:	e9 2c 01 00 00       	jmp    c0020380 <Vm::x87Handler(regs*)+0x892>
c0020254:	80 fa 01             	cmp    dl,0x1
c0020257:	75 0f                	jne    c0020268 <Vm::x87Handler(regs*)+0x77a>
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	ff 36                	push   DWORD PTR [esi]
c002025e:	e8 9d f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c0020263:	e9 81 02 00 00       	jmp    c00204e9 <Vm::x87Handler(regs*)+0x9fb>
c0020268:	80 fa 04             	cmp    dl,0x4
c002026b:	75 0f                	jne    c002027c <Vm::x87Handler(regs*)+0x78e>
c002026d:	83 ec 0c             	sub    esp,0xc
c0020270:	ff 36                	push   DWORD PTR [esi]
c0020272:	e8 89 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c0020277:	e9 86 01 00 00       	jmp    c0020402 <Vm::x87Handler(regs*)+0x914>
c002027c:	80 fa 05             	cmp    dl,0x5
c002027f:	75 1b                	jne    c002029c <Vm::x87Handler(regs*)+0x7ae>
c0020281:	83 ec 0c             	sub    esp,0xc
c0020284:	6a 00                	push   0x0
c0020286:	e8 26 f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002028b:	89 c7                	mov    edi,eax
c002028d:	89 d5                	mov    ebp,edx
c002028f:	58                   	pop    eax
c0020290:	ff 36                	push   DWORD PTR [esi]
c0020292:	e8 69 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c0020297:	e9 a3 01 00 00       	jmp    c002043f <Vm::x87Handler(regs*)+0x951>
c002029c:	80 fa 06             	cmp    dl,0x6
c002029f:	75 0f                	jne    c00202b0 <Vm::x87Handler(regs*)+0x7c2>
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	ff 36                	push   DWORD PTR [esi]
c00202a6:	e8 55 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c00202ab:	e9 ae 01 00 00       	jmp    c002045e <Vm::x87Handler(regs*)+0x970>
c00202b0:	31 c0                	xor    eax,eax
c00202b2:	80 fa 07             	cmp    dl,0x7
c00202b5:	0f 85 94 02 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c00202bb:	83 ec 0c             	sub    esp,0xc
c00202be:	6a 00                	push   0x0
c00202c0:	e8 ec f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00202c5:	89 c7                	mov    edi,eax
c00202c7:	89 d5                	mov    ebp,edx
c00202c9:	58                   	pop    eax
c00202ca:	ff 36                	push   DWORD PTR [esi]
c00202cc:	e8 2f f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c00202d1:	e9 cb 01 00 00       	jmp    c00204a1 <Vm::x87Handler(regs*)+0x9b3>
c00202d6:	80 fa 03             	cmp    dl,0x3
c00202d9:	0f 85 d3 01 00 00    	jne    c00204b2 <Vm::x87Handler(regs*)+0x9c4>
c00202df:	e8 b8 f7 ff ff       	call   c001fa9c <Vm::fpuPop()>
c00202e4:	51                   	push   ecx
c00202e5:	51                   	push   ecx
c00202e6:	e9 de 01 00 00       	jmp    c00204c9 <Vm::x87Handler(regs*)+0x9db>
c00202eb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ef:	80 fa 01             	cmp    dl,0x1
c00202f2:	75 09                	jne    c00202fd <Vm::x87Handler(regs*)+0x80f>
c00202f4:	57                   	push   edi
c00202f5:	57                   	push   edi
c00202f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f8:	e9 e3 01 00 00       	jmp    c00204e0 <Vm::x87Handler(regs*)+0x9f2>
c00202fd:	80 fa 04             	cmp    dl,0x4
c0020300:	75 12                	jne    c0020314 <Vm::x87Handler(regs*)+0x826>
c0020302:	31 d2                	xor    edx,edx
c0020304:	51                   	push   ecx
c0020305:	51                   	push   ecx
c0020306:	8b 06                	mov    eax,DWORD PTR [esi]
c0020308:	52                   	push   edx
c0020309:	50                   	push   eax
c002030a:	e8 d0 f4 ff ff       	call   c001f7df <Vm::fpuLongToFloat(long long)>
c002030f:	e9 ee 00 00 00       	jmp    c0020402 <Vm::x87Handler(regs*)+0x914>
c0020314:	31 c0                	xor    eax,eax
c0020316:	80 fa 07             	cmp    dl,0x7
c0020319:	0f 85 30 02 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	6a 00                	push   0x0
c0020324:	e8 88 f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020329:	89 c7                	mov    edi,eax
c002032b:	89 d5                	mov    ebp,edx
c002032d:	58                   	pop    eax
c002032e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020330:	5a                   	pop    edx
c0020331:	31 d2                	xor    edx,edx
c0020333:	52                   	push   edx
c0020334:	50                   	push   eax
c0020335:	e8 a5 f4 ff ff       	call   c001f7df <Vm::fpuLongToFloat(long long)>
c002033a:	e9 62 01 00 00       	jmp    c00204a1 <Vm::x87Handler(regs*)+0x9b3>
c002033f:	84 d2                	test   dl,dl
c0020341:	75 0d                	jne    c0020350 <Vm::x87Handler(regs*)+0x862>
c0020343:	31 d2                	xor    edx,edx
c0020345:	55                   	push   ebp
c0020346:	55                   	push   ebp
c0020347:	8b 06                	mov    eax,DWORD PTR [esi]
c0020349:	52                   	push   edx
c002034a:	50                   	push   eax
c002034b:	e9 d3 01 00 00       	jmp    c0020523 <Vm::x87Handler(regs*)+0xa35>
c0020350:	31 c0                	xor    eax,eax
c0020352:	80 fa 02             	cmp    dl,0x2
c0020355:	0f 85 f4 01 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c002035b:	83 ec 0c             	sub    esp,0xc
c002035e:	6a 00                	push   0x0
c0020360:	e8 4c f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020365:	59                   	pop    ecx
c0020366:	5f                   	pop    edi
c0020367:	e9 6a f9 ff ff       	jmp    c001fcd6 <Vm::x87Handler(regs*)+0x1e8>
c002036c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020370:	84 d2                	test   dl,dl
c0020372:	75 2a                	jne    c002039e <Vm::x87Handler(regs*)+0x8b0>
c0020374:	50                   	push   eax
c0020375:	50                   	push   eax
c0020376:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020379:	ff 36                	push   DWORD PTR [esi]
c002037b:	e8 c5 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c0020380:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020387:	89 c6                	mov    esi,eax
c0020389:	89 d7                	mov    edi,edx
c002038b:	e8 21 f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020390:	57                   	push   edi
c0020391:	56                   	push   esi
c0020392:	52                   	push   edx
c0020393:	50                   	push   eax
c0020394:	e8 8e f5 ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020399:	e9 64 01 00 00       	jmp    c0020502 <Vm::x87Handler(regs*)+0xa14>
c002039e:	80 fa 01             	cmp    dl,0x1
c00203a1:	75 11                	jne    c00203b4 <Vm::x87Handler(regs*)+0x8c6>
c00203a3:	50                   	push   eax
c00203a4:	50                   	push   eax
c00203a5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a8:	ff 36                	push   DWORD PTR [esi]
c00203aa:	e8 96 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c00203af:	e9 35 01 00 00       	jmp    c00204e9 <Vm::x87Handler(regs*)+0x9fb>
c00203b4:	80 fa 02             	cmp    dl,0x2
c00203b7:	0f 85 54 f9 ff ff    	jne    c001fd11 <Vm::x87Handler(regs*)+0x223>
c00203bd:	55                   	push   ebp
c00203be:	55                   	push   ebp
c00203bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c2:	ff 36                	push   DWORD PTR [esi]
c00203c4:	e8 7c f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c00203c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203d0:	89 c6                	mov    esi,eax
c00203d2:	89 d7                	mov    edi,edx
c00203d4:	e8 d8 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00203d9:	57                   	push   edi
c00203da:	56                   	push   esi
c00203db:	52                   	push   edx
c00203dc:	50                   	push   eax
c00203dd:	e8 f2 f4 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203e6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203e9:	83 c4 20             	add    esp,0x20
c00203ec:	e9 74 f7 ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c00203f1:	80 fa 04             	cmp    dl,0x4
c00203f4:	75 2a                	jne    c0020420 <Vm::x87Handler(regs*)+0x932>
c00203f6:	51                   	push   ecx
c00203f7:	51                   	push   ecx
c00203f8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fb:	ff 36                	push   DWORD PTR [esi]
c00203fd:	e8 43 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c0020402:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020409:	89 c6                	mov    esi,eax
c002040b:	89 d7                	mov    edi,edx
c002040d:	e8 9f f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020412:	57                   	push   edi
c0020413:	56                   	push   esi
c0020414:	52                   	push   edx
c0020415:	50                   	push   eax
c0020416:	e8 36 f5 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002041b:	e9 e2 00 00 00       	jmp    c0020502 <Vm::x87Handler(regs*)+0xa14>
c0020420:	80 fa 05             	cmp    dl,0x5
c0020423:	75 28                	jne    c002044d <Vm::x87Handler(regs*)+0x95f>
c0020425:	83 ec 0c             	sub    esp,0xc
c0020428:	6a 00                	push   0x0
c002042a:	e8 82 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002042f:	89 c7                	mov    edi,eax
c0020431:	89 d5                	mov    ebp,edx
c0020433:	58                   	pop    eax
c0020434:	5a                   	pop    edx
c0020435:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020438:	ff 36                	push   DWORD PTR [esi]
c002043a:	e8 06 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	55                   	push   ebp
c0020443:	57                   	push   edi
c0020444:	52                   	push   edx
c0020445:	50                   	push   eax
c0020446:	e8 06 f5 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002044b:	eb 60                	jmp    c00204ad <Vm::x87Handler(regs*)+0x9bf>
c002044d:	80 fa 06             	cmp    dl,0x6
c0020450:	75 2a                	jne    c002047c <Vm::x87Handler(regs*)+0x98e>
c0020452:	51                   	push   ecx
c0020453:	51                   	push   ecx
c0020454:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020457:	ff 36                	push   DWORD PTR [esi]
c0020459:	e8 e7 f2 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c002045e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020465:	89 c6                	mov    esi,eax
c0020467:	89 d7                	mov    edi,edx
c0020469:	e8 43 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002046e:	57                   	push   edi
c002046f:	56                   	push   esi
c0020470:	52                   	push   edx
c0020471:	50                   	push   eax
c0020472:	e8 08 f5 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020477:	e9 86 00 00 00       	jmp    c0020502 <Vm::x87Handler(regs*)+0xa14>
c002047c:	31 c0                	xor    eax,eax
c002047e:	80 fa 07             	cmp    dl,0x7
c0020481:	0f 85 c8 00 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c0020487:	83 ec 0c             	sub    esp,0xc
c002048a:	6a 00                	push   0x0
c002048c:	e8 20 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020491:	89 c7                	mov    edi,eax
c0020493:	89 d5                	mov    ebp,edx
c0020495:	58                   	pop    eax
c0020496:	5a                   	pop    edx
c0020497:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002049a:	ff 36                	push   DWORD PTR [esi]
c002049c:	e8 a4 f2 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c00204a1:	83 c4 10             	add    esp,0x10
c00204a4:	55                   	push   ebp
c00204a5:	57                   	push   edi
c00204a6:	52                   	push   edx
c00204a7:	50                   	push   eax
c00204a8:	e8 d2 f4 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204ad:	83 c4 0c             	add    esp,0xc
c00204b0:	eb 53                	jmp    c0020505 <Vm::x87Handler(regs*)+0xa17>
c00204b2:	31 c0                	xor    eax,eax
c00204b4:	80 fa 02             	cmp    dl,0x2
c00204b7:	0f 85 92 00 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c00204bd:	83 ec 0c             	sub    esp,0xc
c00204c0:	6a 00                	push   0x0
c00204c2:	e8 ea f4 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00204c7:	59                   	pop    ecx
c00204c8:	5f                   	pop    edi
c00204c9:	52                   	push   edx
c00204ca:	50                   	push   eax
c00204cb:	e8 27 f2 ff ff       	call   c001f6f7 <Vm::fpuInternalTo64(unsigned long long)>
c00204d0:	eb 70                	jmp    c0020542 <Vm::x87Handler(regs*)+0xa54>
c00204d2:	31 c0                	xor    eax,eax
c00204d4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204d9:	75 74                	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c00204db:	50                   	push   eax
c00204dc:	50                   	push   eax
c00204dd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204e0:	31 d2                	xor    edx,edx
c00204e2:	52                   	push   edx
c00204e3:	50                   	push   eax
c00204e4:	e8 f6 f2 ff ff       	call   c001f7df <Vm::fpuLongToFloat(long long)>
c00204e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f0:	89 c6                	mov    esi,eax
c00204f2:	89 d7                	mov    edi,edx
c00204f4:	e8 b8 f4 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00204f9:	57                   	push   edi
c00204fa:	56                   	push   esi
c00204fb:	52                   	push   edx
c00204fc:	50                   	push   eax
c00204fd:	e8 5e f4 ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020502:	83 c4 1c             	add    esp,0x1c
c0020505:	52                   	push   edx
c0020506:	50                   	push   eax
c0020507:	6a 00                	push   0x0
c0020509:	e8 e6 f4 ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c002050e:	e9 f2 f7 ff ff       	jmp    c001fd05 <Vm::x87Handler(regs*)+0x217>
c0020513:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020517:	80 fa 05             	cmp    dl,0x5
c002051a:	75 11                	jne    c002052d <Vm::x87Handler(regs*)+0xa3f>
c002051c:	55                   	push   ebp
c002051d:	55                   	push   ebp
c002051e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020521:	ff 36                	push   DWORD PTR [esi]
c0020523:	e8 81 f2 ff ff       	call   c001f7a9 <Vm::fpuULongToFloat(unsigned long long)>
c0020528:	e9 cf f7 ff ff       	jmp    c001fcfc <Vm::x87Handler(regs*)+0x20e>
c002052d:	31 c0                	xor    eax,eax
c002052f:	80 fa 07             	cmp    dl,0x7
c0020532:	75 1b                	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c0020534:	e8 63 f5 ff ff       	call   c001fa9c <Vm::fpuPop()>
c0020539:	51                   	push   ecx
c002053a:	51                   	push   ecx
c002053b:	52                   	push   edx
c002053c:	50                   	push   eax
c002053d:	e8 0c f2 ff ff       	call   c001f74e <Vm::fpuFloatToLong(unsigned long long)>
c0020542:	83 c4 10             	add    esp,0x10
c0020545:	89 06                	mov    DWORD PTR [esi],eax
c0020547:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002054a:	e9 f8 f7 ff ff       	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c002054f:	83 c4 1c             	add    esp,0x1c
c0020552:	5b                   	pop    ebx
c0020553:	5e                   	pop    esi
c0020554:	5f                   	pop    edi
c0020555:	5d                   	pop    ebp
c0020556:	c3                   	ret    

c0020557 <__static_initialization_and_destruction_0(int, int)>:
c0020557:	83 ec 0c             	sub    esp,0xc
c002055a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002055f:	75 1a                	jne    c002057b <__static_initialization_and_destruction_0(int, int)+0x24>
c0020561:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020569:	75 10                	jne    c002057b <__static_initialization_and_destruction_0(int, int)+0x24>
c002056b:	83 ec 0c             	sub    esp,0xc
c002056e:	68 c0 1a 03 c0       	push   0xc0031ac0
c0020573:	e8 18 88 00 00       	call   c0028d90 <Vm::_FPUState::_FPUState()>
c0020578:	83 c4 10             	add    esp,0x10
c002057b:	90                   	nop
c002057c:	83 c4 0c             	add    esp,0xc
c002057f:	c3                   	ret    

c0020580 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020580:	83 ec 0c             	sub    esp,0xc
c0020583:	83 ec 08             	sub    esp,0x8
c0020586:	68 ff ff 00 00       	push   0xffff
c002058b:	6a 01                	push   0x1
c002058d:	e8 c5 ff ff ff       	call   c0020557 <__static_initialization_and_destruction_0(int, int)>
c0020592:	83 c4 10             	add    esp,0x10
c0020595:	83 c4 0c             	add    esp,0xc
c0020598:	c3                   	ret    
c0020599:	90                   	nop

c002059a <FAT::getName()>:
c002059a:	b8 dc c8 02 c0       	mov    eax,0xc002c8dc
c002059f:	c3                   	ret    

c00205a0 <FAT::tell(void*, unsigned long long*)>:
c00205a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205a5:	75 06                	jne    c00205ad <FAT::tell(void*, unsigned long long*)+0xd>
c00205a7:	b8 04 00 00 00       	mov    eax,0x4
c00205ac:	c3                   	ret    
c00205ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205b2:	75 06                	jne    c00205ba <FAT::tell(void*, unsigned long long*)+0x1a>
c00205b4:	b8 04 00 00 00       	mov    eax,0x4
c00205b9:	c3                   	ret    
c00205ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205be:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205c1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205c8:	89 01                	mov    DWORD PTR [ecx],eax
c00205ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205cd:	b8 00 00 00 00       	mov    eax,0x0
c00205d2:	c3                   	ret    
c00205d3:	90                   	nop

c00205d4 <FAT::stat(void*, unsigned long long*)>:
c00205d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205d9:	75 06                	jne    c00205e1 <FAT::stat(void*, unsigned long long*)+0xd>
c00205db:	b8 04 00 00 00       	mov    eax,0x4
c00205e0:	c3                   	ret    
c00205e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205e6:	75 06                	jne    c00205ee <FAT::stat(void*, unsigned long long*)+0x1a>
c00205e8:	b8 04 00 00 00       	mov    eax,0x4
c00205ed:	c3                   	ret    
c00205ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205f2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205fc:	89 01                	mov    DWORD PTR [ecx],eax
c00205fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020601:	b8 00 00 00 00       	mov    eax,0x0
c0020606:	c3                   	ret    
c0020607:	90                   	nop

c0020608 <FAT::~FAT()>:
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	ba 60 c9 02 c0       	mov    edx,0xc002c960
c0020610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020614:	89 10                	mov    DWORD PTR [eax],edx
c0020616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061a:	83 ec 0c             	sub    esp,0xc
c002061d:	50                   	push   eax
c002061e:	e8 bd 2c ff ff       	call   c00132e0 <Filesystem::~Filesystem()>
c0020623:	83 c4 10             	add    esp,0x10
c0020626:	90                   	nop
c0020627:	83 c4 0c             	add    esp,0xc
c002062a:	c3                   	ret    
c002062b:	90                   	nop

c002062c <FAT::~FAT()>:
c002062c:	83 ec 0c             	sub    esp,0xc
c002062f:	83 ec 0c             	sub    esp,0xc
c0020632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020636:	e8 cd ff ff ff       	call   c0020608 <FAT::~FAT()>
c002063b:	83 c4 10             	add    esp,0x10
c002063e:	83 ec 08             	sub    esp,0x8
c0020641:	6a 08                	push   0x8
c0020643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020647:	e8 8b 28 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c002064c:	83 c4 10             	add    esp,0x10
c002064f:	83 c4 0c             	add    esp,0xc
c0020652:	c3                   	ret    
c0020653:	90                   	nop

c0020654 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020654:	83 ec 1c             	sub    esp,0x1c
c0020657:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002065e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020667:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c002066e:	83 f8 ff             	cmp    eax,0xffffffff
c0020671:	75 34                	jne    c00206a7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020673:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020677:	88 c2                	mov    dl,al
c0020679:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c002067e:	01 d0                	add    eax,edx
c0020680:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020684:	8b 15 20 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b20
c002068a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002068e:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020695:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c002069a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002069e:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c00206a5:	eb 17                	jmp    c00206be <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206ab:	88 c2                	mov    dl,al
c00206ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206b1:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c00206b8:	01 d0                	add    eax,edx
c00206ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206be:	83 ec 04             	sub    esp,0x4
c00206c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206c9:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206cd:	50                   	push   eax
c00206ce:	e8 65 66 fe ff       	call   c0006d38 <f_getlabel>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206da:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206df:	75 07                	jne    c00206e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206e1:	b8 00 00 00 00       	mov    eax,0x0
c00206e6:	eb 05                	jmp    c00206ed <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206e8:	b8 01 00 00 00       	mov    eax,0x1
c00206ed:	83 c4 1c             	add    esp,0x1c
c00206f0:	c3                   	ret    
c00206f1:	90                   	nop

c00206f2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206f2:	57                   	push   edi
c00206f3:	83 ec 58             	sub    esp,0x58
c00206f6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206fe:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020702:	b9 0f 00 00 00       	mov    ecx,0xf
c0020707:	b8 00 00 00 00       	mov    eax,0x0
c002070c:	fc                   	cld    
c002070d:	89 d7                	mov    edi,edx
c002070f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020711:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020715:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c002071c:	83 f8 ff             	cmp    eax,0xffffffff
c002071f:	75 34                	jne    c0020755 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020721:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020725:	88 c2                	mov    dl,al
c0020727:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c002072c:	01 d0                	add    eax,edx
c002072e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020732:	8b 15 20 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b20
c0020738:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002073c:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020743:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c0020748:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002074c:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c0020753:	eb 17                	jmp    c002076c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020755:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020759:	88 c2                	mov    dl,al
c002075b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002075f:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c0020766:	01 d0                	add    eax,edx
c0020768:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002076c:	83 ec 08             	sub    esp,0x8
c002076f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020773:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020777:	50                   	push   eax
c0020778:	e8 f7 01 fe ff       	call   c0000974 <strcat>
c002077d:	83 c4 10             	add    esp,0x10
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020787:	50                   	push   eax
c0020788:	e8 99 67 fe ff       	call   c0006f26 <f_setlabel>
c002078d:	83 c4 10             	add    esp,0x10
c0020790:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020794:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020799:	75 07                	jne    c00207a2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002079b:	b8 00 00 00 00       	mov    eax,0x0
c00207a0:	eb 05                	jmp    c00207a7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207a2:	b8 01 00 00 00       	mov    eax,0x1
c00207a7:	83 c4 58             	add    esp,0x58
c00207aa:	5f                   	pop    edi
c00207ab:	c3                   	ret    

c00207ac <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207ac:	83 ec 2c             	sub    esp,0x2c
c00207af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207b7:	83 ec 08             	sub    esp,0x8
c00207ba:	68 00 c9 02 c0       	push   0xc002c900
c00207bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207c3:	e8 f8 00 fe ff       	call   c00008c0 <strcmp>
c00207c8:	83 c4 10             	add    esp,0x10
c00207cb:	85 c0                	test   eax,eax
c00207cd:	0f 94 c0             	sete   al
c00207d0:	84 c0                	test   al,al
c00207d2:	74 0d                	je     c00207e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207d4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207dc:	e9 a6 00 00 00       	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207e1:	83 ec 08             	sub    esp,0x8
c00207e4:	68 f2 c8 02 c0       	push   0xc002c8f2
c00207e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ed:	e8 ce 00 fe ff       	call   c00008c0 <strcmp>
c00207f2:	83 c4 10             	add    esp,0x10
c00207f5:	85 c0                	test   eax,eax
c00207f7:	0f 94 c0             	sete   al
c00207fa:	84 c0                	test   al,al
c00207fc:	74 0a                	je     c0020808 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207fe:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020806:	eb 7f                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020808:	83 ec 08             	sub    esp,0x8
c002080b:	68 f8 c8 02 c0       	push   0xc002c8f8
c0020810:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020814:	e8 a7 00 fe ff       	call   c00008c0 <strcmp>
c0020819:	83 c4 10             	add    esp,0x10
c002081c:	85 c0                	test   eax,eax
c002081e:	0f 94 c0             	sete   al
c0020821:	84 c0                	test   al,al
c0020823:	74 0a                	je     c002082f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020825:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002082d:	eb 58                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002082f:	83 ec 08             	sub    esp,0x8
c0020832:	68 ec 94 02 c0       	push   0xc00294ec
c0020837:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002083b:	e8 80 00 fe ff       	call   c00008c0 <strcmp>
c0020840:	83 c4 10             	add    esp,0x10
c0020843:	85 c0                	test   eax,eax
c0020845:	0f 94 c0             	sete   al
c0020848:	84 c0                	test   al,al
c002084a:	74 0a                	je     c0020856 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002084c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020854:	eb 31                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020856:	83 ec 08             	sub    esp,0x8
c0020859:	68 fe c8 02 c0       	push   0xc002c8fe
c002085e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020862:	e8 59 00 fe ff       	call   c00008c0 <strcmp>
c0020867:	83 c4 10             	add    esp,0x10
c002086a:	85 c0                	test   eax,eax
c002086c:	0f 94 c0             	sete   al
c002086f:	84 c0                	test   al,al
c0020871:	74 0a                	je     c002087d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020873:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002087b:	eb 0a                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002087d:	b8 08 00 00 00       	mov    eax,0x8
c0020882:	e9 04 01 00 00       	jmp    c002098b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020887:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002088e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020893:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020897:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c002089e:	83 f8 ff             	cmp    eax,0xffffffff
c00208a1:	75 34                	jne    c00208d7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208a3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208a7:	88 c2                	mov    dl,al
c00208a9:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c00208ae:	01 d0                	add    eax,edx
c00208b0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208b4:	8b 15 20 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b20
c00208ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208be:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c00208c5:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c00208ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208ce:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c00208d5:	eb 17                	jmp    c00208ee <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208d7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208db:	88 c2                	mov    dl,al
c00208dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208e1:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c00208e8:	01 d0                	add    eax,edx
c00208ea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208f2:	88 04 24             	mov    BYTE PTR [esp],al
c00208f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020905:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002090a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020912:	83 ec 0c             	sub    esp,0xc
c0020915:	68 00 20 00 00       	push   0x2000
c002091a:	e8 24 ef fe ff       	call   c000f843 <malloc>
c002091f:	83 c4 10             	add    esp,0x10
c0020922:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020926:	68 00 20 00 00       	push   0x2000
c002092b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002092f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020933:	50                   	push   eax
c0020934:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020938:	50                   	push   eax
c0020939:	e8 33 6a fe ff       	call   c0007371 <f_mkfs>
c002093e:	83 c4 10             	add    esp,0x10
c0020941:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020945:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002094a:	75 07                	jne    c0020953 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002094c:	b8 00 00 00 00       	mov    eax,0x0
c0020951:	eb 38                	jmp    c002098b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020953:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020958:	75 17                	jne    c0020971 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002095a:	83 ec 0c             	sub    esp,0xc
c002095d:	68 30 c9 02 c0       	push   0xc002c930
c0020962:	e8 50 26 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0020967:	83 c4 10             	add    esp,0x10
c002096a:	b8 09 00 00 00       	mov    eax,0x9
c002096f:	eb 1a                	jmp    c002098b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020971:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020975:	83 ec 08             	sub    esp,0x8
c0020978:	50                   	push   eax
c0020979:	68 04 c9 02 c0       	push   0xc002c904
c002097e:	e8 34 26 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0020983:	83 c4 10             	add    esp,0x10
c0020986:	b8 01 00 00 00       	mov    eax,0x1
c002098b:	83 c4 2c             	add    esp,0x2c
c002098e:	c3                   	ret    
c002098f:	90                   	nop

c0020990 <FAT::tryMount(LogicalDisk*, int)>:
c0020990:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020996:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c002099b:	83 f8 14             	cmp    eax,0x14
c002099e:	75 17                	jne    c00209b7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209a0:	83 ec 0c             	sub    esp,0xc
c00209a3:	68 16 c9 02 c0       	push   0xc002c916
c00209a8:	e8 b8 9c ff ff       	call   c001a665 <Krnl::panic(char const*)>
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	b0 00                	mov    al,0x0
c00209b2:	e9 d7 01 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209b7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209ca:	3d 00 02 00 00       	cmp    eax,0x200
c00209cf:	74 07                	je     c00209d8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209d1:	b0 00                	mov    al,0x0
c00209d3:	e9 b6 01 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209d8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209e0:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209e7:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c00209ee:	83 f8 ff             	cmp    eax,0xffffffff
c00209f1:	74 07                	je     c00209fa <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209f3:	b0 01                	mov    al,0x1
c00209f5:	e9 94 01 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209fa:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a04:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a0c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a13:	88 c2                	mov    dl,al
c0020a15:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c0020a1a:	01 d0                	add    eax,edx
c0020a1c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a23:	8b 15 20 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b20
c0020a29:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a30:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020a37:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c0020a3c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a43:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c0020a4a:	83 ec 0c             	sub    esp,0xc
c0020a4d:	68 54 02 00 00       	push   0x254
c0020a52:	e8 ec ed fe ff       	call   c000f843 <malloc>
c0020a57:	83 c4 10             	add    esp,0x10
c0020a5a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a61:	83 ec 04             	sub    esp,0x4
c0020a64:	6a 00                	push   0x0
c0020a66:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a6d:	50                   	push   eax
c0020a6e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a75:	e8 b5 44 fe ff       	call   c0004f2f <f_mount>
c0020a7a:	83 c4 10             	add    esp,0x10
c0020a7d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a84:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a8c:	74 19                	je     c0020aa7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a8e:	83 ec 0c             	sub    esp,0xc
c0020a91:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a98:	e8 c6 ed fe ff       	call   c000f863 <rfree>
c0020a9d:	83 c4 10             	add    esp,0x10
c0020aa0:	b0 00                	mov    al,0x0
c0020aa2:	e9 e7 00 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020aa7:	83 ec 04             	sub    esp,0x4
c0020aaa:	68 00 01 00 00       	push   0x100
c0020aaf:	6a 00                	push   0x0
c0020ab1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ab8:	50                   	push   eax
c0020ab9:	e8 ba fc fd ff       	call   c0000778 <memset>
c0020abe:	83 c4 10             	add    esp,0x10
c0020ac1:	83 ec 08             	sub    esp,0x8
c0020ac4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020acb:	50                   	push   eax
c0020acc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ad3:	50                   	push   eax
c0020ad4:	e8 9b fe fd ff       	call   c0000974 <strcat>
c0020ad9:	83 c4 10             	add    esp,0x10
c0020adc:	83 ec 08             	sub    esp,0x8
c0020adf:	68 24 c9 02 c0       	push   0xc002c924
c0020ae4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aeb:	50                   	push   eax
c0020aec:	e8 83 fe fd ff       	call   c0000974 <strcat>
c0020af1:	83 c4 10             	add    esp,0x10
c0020af4:	83 ec 04             	sub    esp,0x4
c0020af7:	6a 01                	push   0x1
c0020af9:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b00:	50                   	push   eax
c0020b01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b05:	50                   	push   eax
c0020b06:	e8 86 44 fe ff       	call   c0004f91 <f_open>
c0020b0b:	83 c4 10             	add    esp,0x10
c0020b0e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b15:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b1c:	85 c0                	test   eax,eax
c0020b1e:	74 0a                	je     c0020b2a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b20:	78 2d                	js     c0020b4f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b22:	83 e8 04             	sub    eax,0x4
c0020b25:	83 f8 01             	cmp    eax,0x1
c0020b28:	77 25                	ja     c0020b4f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b2a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b32:	83 ec 0c             	sub    esp,0xc
c0020b35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b39:	50                   	push   eax
c0020b3a:	e8 a4 4f fe ff       	call   c0005ae3 <f_close>
c0020b3f:	83 c4 10             	add    esp,0x10
c0020b42:	90                   	nop
c0020b43:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b4b:	74 3a                	je     c0020b87 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b4d:	eb 2d                	jmp    c0020b7c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b4f:	83 ec 0c             	sub    esp,0xc
c0020b52:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b59:	e8 05 ed fe ff       	call   c000f863 <rfree>
c0020b5e:	83 c4 10             	add    esp,0x10
c0020b61:	83 ec 04             	sub    esp,0x4
c0020b64:	6a 00                	push   0x0
c0020b66:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b6d:	50                   	push   eax
c0020b6e:	6a 00                	push   0x0
c0020b70:	e8 ba 43 fe ff       	call   c0004f2f <f_mount>
c0020b75:	83 c4 10             	add    esp,0x10
c0020b78:	b0 00                	mov    al,0x0
c0020b7a:	eb 12                	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b7c:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c0020b81:	40                   	inc    eax
c0020b82:	a3 20 1b 03 c0       	mov    ds:0xc0031b20,eax
c0020b87:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b8e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b94:	c3                   	ret    
c0020b95:	90                   	nop

c0020b96 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b96:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b9c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020ba4:	74 0a                	je     c0020bb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020ba6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020bae:	75 0a                	jne    c0020bba <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020bb0:	b8 04 00 00 00       	mov    eax,0x4
c0020bb5:	e9 db 00 00 00       	jmp    c0020c95 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bba:	83 ec 08             	sub    esp,0x8
c0020bbd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bc4:	50                   	push   eax
c0020bc5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020bcc:	e8 1c 55 fe ff       	call   c00060ed <f_readdir>
c0020bd1:	83 c4 10             	add    esp,0x10
c0020bd4:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020bdb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020be1:	83 ec 0c             	sub    esp,0xc
c0020be4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020beb:	83 c0 1a             	add    eax,0x1a
c0020bee:	50                   	push   eax
c0020bef:	e8 a0 fb fd ff       	call   c0000794 <strlen>
c0020bf4:	83 c4 10             	add    esp,0x10
c0020bf7:	ba 00 00 00 00       	mov    edx,0x0
c0020bfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c04:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c0b:	0f b6 c0             	movzx  eax,al
c0020c0e:	83 e0 10             	and    eax,0x10
c0020c11:	74 07                	je     c0020c1a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c13:	b8 02 00 00 00       	mov    eax,0x2
c0020c18:	eb 05                	jmp    c0020c1f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c1a:	b8 01 00 00 00       	mov    eax,0x1
c0020c1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c23:	83 ec 08             	sub    esp,0x8
c0020c26:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c2d:	83 c0 1a             	add    eax,0x1a
c0020c30:	50                   	push   eax
c0020c31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c35:	83 c0 10             	add    eax,0x10
c0020c38:	50                   	push   eax
c0020c39:	e8 f6 fb fd ff       	call   c0000834 <strcpy>
c0020c3e:	83 c4 10             	add    esp,0x10
c0020c41:	83 ec 04             	sub    esp,0x4
c0020c44:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c4f:	50                   	push   eax
c0020c50:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c57:	e8 e8 fa fd ff       	call   c0000744 <memcpy>
c0020c5c:	83 c4 10             	add    esp,0x10
c0020c5f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c66:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c6c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c73:	84 c0                	test   al,al
c0020c75:	75 07                	jne    c0020c7e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c77:	b8 07 00 00 00       	mov    eax,0x7
c0020c7c:	eb 17                	jmp    c0020c95 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c7e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c85:	85 c0                	test   eax,eax
c0020c87:	75 07                	jne    c0020c90 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c89:	b8 00 00 00 00       	mov    eax,0x0
c0020c8e:	eb 05                	jmp    c0020c95 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c90:	b8 01 00 00 00       	mov    eax,0x1
c0020c95:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c9b:	c3                   	ret    

c0020c9c <FAT::read(void*, unsigned long, void*, int*)>:
c0020c9c:	83 ec 1c             	sub    esp,0x1c
c0020c9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ca4:	74 07                	je     c0020cad <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ca6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cab:	75 07                	jne    c0020cb4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020cad:	b8 04 00 00 00       	mov    eax,0x4
c0020cb2:	eb 3d                	jmp    c0020cf1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cb8:	50                   	push   eax
c0020cb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cc5:	e8 03 47 fe ff       	call   c00053cd <f_read>
c0020cca:	83 c4 10             	add    esp,0x10
c0020ccd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cd5:	89 c2                	mov    edx,eax
c0020cd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cdb:	89 10                	mov    DWORD PTR [eax],edx
c0020cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ce1:	85 c0                	test   eax,eax
c0020ce3:	75 07                	jne    c0020cec <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020ce5:	b8 00 00 00 00       	mov    eax,0x0
c0020cea:	eb 05                	jmp    c0020cf1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cec:	b8 01 00 00 00       	mov    eax,0x1
c0020cf1:	83 c4 1c             	add    esp,0x1c
c0020cf4:	c3                   	ret    
c0020cf5:	90                   	nop

c0020cf6 <FAT::write(void*, unsigned long, void*, int*)>:
c0020cf6:	83 ec 1c             	sub    esp,0x1c
c0020cf9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cfe:	74 07                	je     c0020d07 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d00:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d05:	75 07                	jne    c0020d0e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d07:	b8 04 00 00 00       	mov    eax,0x4
c0020d0c:	eb 3d                	jmp    c0020d4b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d0e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d12:	50                   	push   eax
c0020d13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d1b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d1f:	e8 29 49 fe ff       	call   c000564d <f_write>
c0020d24:	83 c4 10             	add    esp,0x10
c0020d27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d2f:	89 c2                	mov    edx,eax
c0020d31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d35:	89 10                	mov    DWORD PTR [eax],edx
c0020d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d3b:	85 c0                	test   eax,eax
c0020d3d:	75 07                	jne    c0020d46 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d3f:	b8 00 00 00 00       	mov    eax,0x0
c0020d44:	eb 05                	jmp    c0020d4b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d46:	b8 01 00 00 00       	mov    eax,0x1
c0020d4b:	83 c4 1c             	add    esp,0x1c
c0020d4e:	c3                   	ret    
c0020d4f:	90                   	nop

c0020d50 <FAT::close(void*)>:
c0020d50:	83 ec 1c             	sub    esp,0x1c
c0020d53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d58:	75 07                	jne    c0020d61 <FAT::close(void*)+0x11>
c0020d5a:	b8 04 00 00 00       	mov    eax,0x4
c0020d5f:	eb 36                	jmp    c0020d97 <FAT::close(void*)+0x47>
c0020d61:	83 ec 0c             	sub    esp,0xc
c0020d64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d68:	e8 76 4d fe ff       	call   c0005ae3 <f_close>
c0020d6d:	83 c4 10             	add    esp,0x10
c0020d70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d74:	83 ec 0c             	sub    esp,0xc
c0020d77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d7b:	e8 d3 ea fe ff       	call   c000f853 <free>
c0020d80:	83 c4 10             	add    esp,0x10
c0020d83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d87:	85 c0                	test   eax,eax
c0020d89:	75 07                	jne    c0020d92 <FAT::close(void*)+0x42>
c0020d8b:	b8 00 00 00 00       	mov    eax,0x0
c0020d90:	eb 05                	jmp    c0020d97 <FAT::close(void*)+0x47>
c0020d92:	b8 01 00 00 00       	mov    eax,0x1
c0020d97:	83 c4 1c             	add    esp,0x1c
c0020d9a:	c3                   	ret    
c0020d9b:	90                   	nop

c0020d9c <FAT::closeDir(void*)>:
c0020d9c:	83 ec 1c             	sub    esp,0x1c
c0020d9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020da4:	75 07                	jne    c0020dad <FAT::closeDir(void*)+0x11>
c0020da6:	b8 04 00 00 00       	mov    eax,0x4
c0020dab:	eb 36                	jmp    c0020de3 <FAT::closeDir(void*)+0x47>
c0020dad:	83 ec 0c             	sub    esp,0xc
c0020db0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db4:	e8 12 53 fe ff       	call   c00060cb <f_closedir>
c0020db9:	83 c4 10             	add    esp,0x10
c0020dbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dc0:	83 ec 0c             	sub    esp,0xc
c0020dc3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dc7:	e8 87 ea fe ff       	call   c000f853 <free>
c0020dcc:	83 c4 10             	add    esp,0x10
c0020dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dd3:	85 c0                	test   eax,eax
c0020dd5:	75 07                	jne    c0020dde <FAT::closeDir(void*)+0x42>
c0020dd7:	b8 00 00 00 00       	mov    eax,0x0
c0020ddc:	eb 05                	jmp    c0020de3 <FAT::closeDir(void*)+0x47>
c0020dde:	b8 01 00 00 00       	mov    eax,0x1
c0020de3:	83 c4 1c             	add    esp,0x1c
c0020de6:	c3                   	ret    
c0020de7:	90                   	nop

c0020de8 <FAT::seek(void*, unsigned long long)>:
c0020de8:	83 ec 2c             	sub    esp,0x2c
c0020deb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020def:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020df3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020df7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dfb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e00:	75 07                	jne    c0020e09 <FAT::seek(void*, unsigned long long)+0x21>
c0020e02:	b8 04 00 00 00       	mov    eax,0x4
c0020e07:	eb 2f                	jmp    c0020e38 <FAT::seek(void*, unsigned long long)+0x50>
c0020e09:	83 ec 04             	sub    esp,0x4
c0020e0c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e18:	e8 f5 4c fe ff       	call   c0005b12 <f_lseek>
c0020e1d:	83 c4 10             	add    esp,0x10
c0020e20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e28:	85 c0                	test   eax,eax
c0020e2a:	75 07                	jne    c0020e33 <FAT::seek(void*, unsigned long long)+0x4b>
c0020e2c:	b8 00 00 00 00       	mov    eax,0x0
c0020e31:	eb 05                	jmp    c0020e38 <FAT::seek(void*, unsigned long long)+0x50>
c0020e33:	b8 01 00 00 00       	mov    eax,0x1
c0020e38:	83 c4 2c             	add    esp,0x2c
c0020e3b:	c3                   	ret    

c0020e3c <fatWrapperReadDisk>:
c0020e3c:	83 ec 1c             	sub    esp,0x1c
c0020e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e43:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e5b:	8b 04 85 00 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1500]
c0020e62:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e66:	83 ec 0c             	sub    esp,0xc
c0020e69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e6d:	52                   	push   edx
c0020e6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e76:	50                   	push   eax
c0020e77:	e8 58 59 ff ff       	call   c00167d4 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e7c:	83 c4 20             	add    esp,0x20
c0020e7f:	83 c4 1c             	add    esp,0x1c
c0020e82:	c3                   	ret    

c0020e83 <fatWrapperWriteDisk>:
c0020e83:	83 ec 1c             	sub    esp,0x1c
c0020e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e8a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e9d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ea2:	8b 04 85 00 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1500]
c0020ea9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ead:	83 ec 0c             	sub    esp,0xc
c0020eb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eb4:	52                   	push   edx
c0020eb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ebd:	50                   	push   eax
c0020ebe:	e8 7d 59 ff ff       	call   c0016840 <LogicalDisk::write(unsigned long long, int, void*)>
c0020ec3:	83 c4 20             	add    esp,0x20
c0020ec6:	83 c4 1c             	add    esp,0x1c
c0020ec9:	c3                   	ret    

c0020eca <fatWrapperIoctl>:
c0020eca:	53                   	push   ebx
c0020ecb:	83 ec 28             	sub    esp,0x28
c0020ece:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ed2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ed6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020eda:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ede:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ee3:	75 31                	jne    c0020f16 <fatWrapperIoctl+0x4c>
c0020ee5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ee9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020eed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ef2:	8b 04 85 00 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1500]
c0020ef9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f09:	66 89 02             	mov    WORD PTR [edx],ax
c0020f0c:	b8 00 00 00 00       	mov    eax,0x0
c0020f11:	e9 b2 00 00 00       	jmp    c0020fc8 <fatWrapperIoctl+0xfe>
c0020f16:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f1b:	75 6a                	jne    c0020f87 <fatWrapperIoctl+0xbd>
c0020f1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f25:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f2a:	8b 04 85 00 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1500]
c0020f31:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f37:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f3d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f43:	89 c8                	mov    eax,ecx
c0020f45:	89 da                	mov    edx,ebx
c0020f47:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f4b:	c1 e0 0a             	shl    eax,0xa
c0020f4e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f53:	8b 0c 8d 00 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1500]
c0020f5a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f60:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f66:	89 cb                	mov    ebx,ecx
c0020f68:	c1 fb 1f             	sar    ebx,0x1f
c0020f6b:	53                   	push   ebx
c0020f6c:	51                   	push   ecx
c0020f6d:	52                   	push   edx
c0020f6e:	50                   	push   eax
c0020f6f:	e8 c8 5a 00 00       	call   c0026a3c <__udivdi3>
c0020f74:	83 c4 10             	add    esp,0x10
c0020f77:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f7b:	89 01                	mov    DWORD PTR [ecx],eax
c0020f7d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f80:	b8 00 00 00 00       	mov    eax,0x0
c0020f85:	eb 41                	jmp    c0020fc8 <fatWrapperIoctl+0xfe>
c0020f87:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f8c:	75 07                	jne    c0020f95 <fatWrapperIoctl+0xcb>
c0020f8e:	b8 00 00 00 00       	mov    eax,0x0
c0020f93:	eb 33                	jmp    c0020fc8 <fatWrapperIoctl+0xfe>
c0020f95:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f9a:	75 19                	jne    c0020fb5 <fatWrapperIoctl+0xeb>
c0020f9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fa8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fae:	b8 00 00 00 00       	mov    eax,0x0
c0020fb3:	eb 13                	jmp    c0020fc8 <fatWrapperIoctl+0xfe>
c0020fb5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020fba:	75 07                	jne    c0020fc3 <fatWrapperIoctl+0xf9>
c0020fbc:	b8 00 00 00 00       	mov    eax,0x0
c0020fc1:	eb 05                	jmp    c0020fc8 <fatWrapperIoctl+0xfe>
c0020fc3:	b8 04 00 00 00       	mov    eax,0x4
c0020fc8:	83 c4 28             	add    esp,0x28
c0020fcb:	5b                   	pop    ebx
c0020fcc:	c3                   	ret    
c0020fcd:	90                   	nop

c0020fce <FAT::FAT()>:
c0020fce:	83 ec 1c             	sub    esp,0x1c
c0020fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fd5:	83 ec 0c             	sub    esp,0xc
c0020fd8:	50                   	push   eax
c0020fd9:	e8 de 22 ff ff       	call   c00132bc <Filesystem::Filesystem()>
c0020fde:	83 c4 10             	add    esp,0x10
c0020fe1:	ba 60 c9 02 c0       	mov    edx,0xc002c960
c0020fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fea:	89 10                	mov    DWORD PTR [eax],edx
c0020fec:	c7 05 20 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b20,0x0
c0020ff6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ffe:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021003:	7f 15                	jg     c002101a <FAT::FAT()+0x4c>
c0021005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021009:	c7 04 85 40 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce4c0],0xffffffff
c0021014:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021018:	eb e4                	jmp    c0020ffe <FAT::FAT()+0x30>
c002101a:	90                   	nop
c002101b:	83 c4 1c             	add    esp,0x1c
c002101e:	c3                   	ret    
c002101f:	90                   	nop

c0021020 <FAT::fixFilepath(char*)>:
c0021020:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021024:	8a 00                	mov    al,BYTE PTR [eax]
c0021026:	3c 40                	cmp    al,0x40
c0021028:	7e 2c                	jle    c0021056 <FAT::fixFilepath(char*)+0x36>
c002102a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002102e:	8a 00                	mov    al,BYTE PTR [eax]
c0021030:	83 e8 41             	sub    eax,0x41
c0021033:	88 c2                	mov    dl,al
c0021035:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021039:	88 10                	mov    BYTE PTR [eax],dl
c002103b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002103f:	8a 00                	mov    al,BYTE PTR [eax]
c0021041:	0f be c0             	movsx  eax,al
c0021044:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c002104b:	83 c0 30             	add    eax,0x30
c002104e:	88 c2                	mov    dl,al
c0021050:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021054:	88 10                	mov    BYTE PTR [eax],dl
c0021056:	90                   	nop
c0021057:	c3                   	ret    

c0021058 <FAT::open(char const*, void**, FileOpenMode)>:
c0021058:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002105e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021066:	74 0a                	je     c0021072 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021068:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021070:	75 0a                	jne    c002107c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021072:	b8 04 00 00 00       	mov    eax,0x4
c0021077:	e9 fd 00 00 00       	jmp    c0021179 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002107c:	83 ec 08             	sub    esp,0x8
c002107f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021086:	8d 44 24 14          	lea    eax,[esp+0x14]
c002108a:	50                   	push   eax
c002108b:	e8 a4 f7 fd ff       	call   c0000834 <strcpy>
c0021090:	83 c4 10             	add    esp,0x10
c0021093:	83 ec 08             	sub    esp,0x8
c0021096:	8d 44 24 10          	lea    eax,[esp+0x10]
c002109a:	50                   	push   eax
c002109b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210a2:	e8 79 ff ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c00210a7:	83 c4 10             	add    esp,0x10
c00210aa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b9:	83 e0 01             	and    eax,0x1
c00210bc:	74 08                	je     c00210c6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210be:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210cd:	83 e0 04             	and    eax,0x4
c00210d0:	74 10                	je     c00210e2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00210d2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210da:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210e9:	83 e0 02             	and    eax,0x2
c00210ec:	74 08                	je     c00210f6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210ee:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210fd:	83 e0 08             	and    eax,0x8
c0021100:	74 08                	je     c002110a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021102:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002110a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021111:	83 e0 10             	and    eax,0x10
c0021114:	74 08                	je     c002111e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021116:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002111e:	83 ec 0c             	sub    esp,0xc
c0021121:	68 50 02 00 00       	push   0x250
c0021126:	e8 18 e7 fe ff       	call   c000f843 <malloc>
c002112b:	83 c4 10             	add    esp,0x10
c002112e:	89 c2                	mov    edx,eax
c0021130:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021137:	89 10                	mov    DWORD PTR [eax],edx
c0021139:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021141:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021148:	8b 00                	mov    eax,DWORD PTR [eax]
c002114a:	83 ec 04             	sub    esp,0x4
c002114d:	52                   	push   edx
c002114e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021152:	52                   	push   edx
c0021153:	50                   	push   eax
c0021154:	e8 38 3e fe ff       	call   c0004f91 <f_open>
c0021159:	83 c4 10             	add    esp,0x10
c002115c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021163:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002116b:	74 07                	je     c0021174 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002116d:	b8 01 00 00 00       	mov    eax,0x1
c0021172:	eb 05                	jmp    c0021179 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021174:	b8 00 00 00 00       	mov    eax,0x0
c0021179:	81 c4 1c 01 00 00    	add    esp,0x11c
c002117f:	c3                   	ret    

c0021180 <FAT::openDir(char const*, void**)>:
c0021180:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021186:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002118e:	74 0a                	je     c002119a <FAT::openDir(char const*, void**)+0x1a>
c0021190:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021198:	75 07                	jne    c00211a1 <FAT::openDir(char const*, void**)+0x21>
c002119a:	b8 04 00 00 00       	mov    eax,0x4
c002119f:	eb 7d                	jmp    c002121e <FAT::openDir(char const*, void**)+0x9e>
c00211a1:	83 ec 08             	sub    esp,0x8
c00211a4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211af:	50                   	push   eax
c00211b0:	e8 7f f6 fd ff       	call   c0000834 <strcpy>
c00211b5:	83 c4 10             	add    esp,0x10
c00211b8:	83 ec 08             	sub    esp,0x8
c00211bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211bf:	50                   	push   eax
c00211c0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211c7:	e8 54 fe ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c00211cc:	83 c4 10             	add    esp,0x10
c00211cf:	83 ec 0c             	sub    esp,0xc
c00211d2:	6a 4c                	push   0x4c
c00211d4:	e8 6a e6 fe ff       	call   c000f843 <malloc>
c00211d9:	83 c4 10             	add    esp,0x10
c00211dc:	89 c2                	mov    edx,eax
c00211de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211e5:	89 10                	mov    DWORD PTR [eax],edx
c00211e7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00211f0:	83 ec 08             	sub    esp,0x8
c00211f3:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211f7:	52                   	push   edx
c00211f8:	50                   	push   eax
c00211f9:	e8 cb 4d fe ff       	call   c0005fc9 <f_opendir>
c00211fe:	83 c4 10             	add    esp,0x10
c0021201:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021208:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021210:	74 07                	je     c0021219 <FAT::openDir(char const*, void**)+0x99>
c0021212:	b8 01 00 00 00       	mov    eax,0x1
c0021217:	eb 05                	jmp    c002121e <FAT::openDir(char const*, void**)+0x9e>
c0021219:	b8 00 00 00 00       	mov    eax,0x0
c002121e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021224:	c3                   	ret    
c0021225:	90                   	nop

c0021226 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021226:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002122c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021234:	75 0a                	jne    c0021240 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021236:	b8 04 00 00 00       	mov    eax,0x4
c002123b:	e9 c9 00 00 00       	jmp    c0021309 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021240:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021248:	75 0a                	jne    c0021254 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002124a:	b8 04 00 00 00       	mov    eax,0x4
c002124f:	e9 b5 00 00 00       	jmp    c0021309 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021254:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002125c:	75 0a                	jne    c0021268 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002125e:	b8 04 00 00 00       	mov    eax,0x4
c0021263:	e9 a1 00 00 00       	jmp    c0021309 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021268:	83 ec 08             	sub    esp,0x8
c002126b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021272:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021279:	50                   	push   eax
c002127a:	e8 b5 f5 fd ff       	call   c0000834 <strcpy>
c002127f:	83 c4 10             	add    esp,0x10
c0021282:	83 ec 08             	sub    esp,0x8
c0021285:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002128c:	50                   	push   eax
c002128d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021294:	e8 87 fd ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c0021299:	83 c4 10             	add    esp,0x10
c002129c:	83 ec 08             	sub    esp,0x8
c002129f:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212a3:	50                   	push   eax
c00212a4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212ab:	50                   	push   eax
c00212ac:	e8 d7 4e fe ff       	call   c0006188 <f_stat>
c00212b1:	83 c4 10             	add    esp,0x10
c00212b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212c2:	85 c0                	test   eax,eax
c00212c4:	74 07                	je     c00212cd <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212c6:	83 f8 04             	cmp    eax,0x4
c00212c9:	74 32                	je     c00212fd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212cb:	eb 37                	jmp    c0021304 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212cd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212d1:	0f b6 c0             	movzx  eax,al
c00212d4:	83 e0 10             	and    eax,0x10
c00212d7:	0f 95 c2             	setne  dl
c00212da:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212e1:	88 10                	mov    BYTE PTR [eax],dl
c00212e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212ea:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212f1:	89 01                	mov    DWORD PTR [ecx],eax
c00212f3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212f6:	b8 00 00 00 00       	mov    eax,0x0
c00212fb:	eb 0c                	jmp    c0021309 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212fd:	b8 02 00 00 00       	mov    eax,0x2
c0021302:	eb 05                	jmp    c0021309 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021304:	b8 01 00 00 00       	mov    eax,0x1
c0021309:	81 c4 2c 02 00 00    	add    esp,0x22c
c002130f:	c3                   	ret    

c0021310 <FAT::unlink(char const*)>:
c0021310:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021316:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002131e:	75 07                	jne    c0021327 <FAT::unlink(char const*)+0x17>
c0021320:	b8 04 00 00 00       	mov    eax,0x4
c0021325:	eb 5c                	jmp    c0021383 <FAT::unlink(char const*)+0x73>
c0021327:	83 ec 08             	sub    esp,0x8
c002132a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021331:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021335:	50                   	push   eax
c0021336:	e8 f9 f4 fd ff       	call   c0000834 <strcpy>
c002133b:	83 c4 10             	add    esp,0x10
c002133e:	83 ec 08             	sub    esp,0x8
c0021341:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021345:	50                   	push   eax
c0021346:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002134d:	e8 ce fc ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c0021352:	83 c4 10             	add    esp,0x10
c0021355:	83 ec 0c             	sub    esp,0xc
c0021358:	8d 44 24 18          	lea    eax,[esp+0x18]
c002135c:	50                   	push   eax
c002135d:	e8 78 51 fe ff       	call   c00064da <f_unlink>
c0021362:	83 c4 10             	add    esp,0x10
c0021365:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002136c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021373:	85 c0                	test   eax,eax
c0021375:	75 07                	jne    c002137e <FAT::unlink(char const*)+0x6e>
c0021377:	b8 00 00 00 00       	mov    eax,0x0
c002137c:	eb 05                	jmp    c0021383 <FAT::unlink(char const*)+0x73>
c002137e:	b8 01 00 00 00       	mov    eax,0x1
c0021383:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021389:	c3                   	ret    

c002138a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002138a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021390:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021397:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002139e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00213a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213a6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213ae:	75 0a                	jne    c00213ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213b0:	b8 04 00 00 00       	mov    eax,0x4
c00213b5:	e9 1c 01 00 00       	jmp    c00214d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213ba:	83 ec 08             	sub    esp,0x8
c00213bd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213c8:	50                   	push   eax
c00213c9:	e8 66 f4 fd ff       	call   c0000834 <strcpy>
c00213ce:	83 c4 10             	add    esp,0x10
c00213d1:	83 ec 08             	sub    esp,0x8
c00213d4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213d8:	50                   	push   eax
c00213d9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213e0:	e8 3b fc ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c00213e5:	83 c4 10             	add    esp,0x10
c00213e8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213f0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213fd:	83 e0 01             	and    eax,0x1
c0021400:	74 08                	je     c002140a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021402:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002140a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002140f:	83 e0 02             	and    eax,0x2
c0021412:	74 08                	je     c002141c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021414:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002141c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021421:	83 e0 04             	and    eax,0x4
c0021424:	74 08                	je     c002142e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021426:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002142e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021433:	83 e0 08             	and    eax,0x8
c0021436:	74 08                	je     c0021440 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021438:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021445:	83 e0 01             	and    eax,0x1
c0021448:	74 08                	je     c0021452 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002144a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021452:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021457:	83 e0 02             	and    eax,0x2
c002145a:	74 08                	je     c0021464 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002145c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021464:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021469:	83 e0 04             	and    eax,0x4
c002146c:	74 08                	je     c0021476 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002146e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021476:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002147b:	83 e0 08             	and    eax,0x8
c002147e:	74 08                	je     c0021488 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021480:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021488:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002148f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021496:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002149e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214a6:	83 ec 04             	sub    esp,0x4
c00214a9:	52                   	push   edx
c00214aa:	50                   	push   eax
c00214ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214af:	50                   	push   eax
c00214b0:	e8 c7 56 fe ff       	call   c0006b7c <f_chmod>
c00214b5:	83 c4 10             	add    esp,0x10
c00214b8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214bf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214c6:	85 c0                	test   eax,eax
c00214c8:	75 07                	jne    c00214d1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214ca:	b8 00 00 00 00       	mov    eax,0x0
c00214cf:	eb 05                	jmp    c00214d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214d1:	b8 01 00 00 00       	mov    eax,0x1
c00214d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214dc:	c3                   	ret    
c00214dd:	90                   	nop

c00214de <FAT::rename(char const*, char const*)>:
c00214de:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214e4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214ec:	74 0a                	je     c00214f8 <FAT::rename(char const*, char const*)+0x1a>
c00214ee:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214f6:	75 0a                	jne    c0021502 <FAT::rename(char const*, char const*)+0x24>
c00214f8:	b8 04 00 00 00       	mov    eax,0x4
c00214fd:	e9 98 00 00 00       	jmp    c002159a <FAT::rename(char const*, char const*)+0xbc>
c0021502:	83 ec 08             	sub    esp,0x8
c0021505:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002150c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021513:	50                   	push   eax
c0021514:	e8 1b f3 fd ff       	call   c0000834 <strcpy>
c0021519:	83 c4 10             	add    esp,0x10
c002151c:	83 ec 08             	sub    esp,0x8
c002151f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021526:	50                   	push   eax
c0021527:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002152e:	e8 ed fa ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c0021533:	83 c4 10             	add    esp,0x10
c0021536:	83 ec 08             	sub    esp,0x8
c0021539:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021540:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021544:	50                   	push   eax
c0021545:	e8 ea f2 fd ff       	call   c0000834 <strcpy>
c002154a:	83 c4 10             	add    esp,0x10
c002154d:	83 ec 08             	sub    esp,0x8
c0021550:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021554:	50                   	push   eax
c0021555:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002155c:	e8 bf fa ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c0021561:	83 c4 10             	add    esp,0x10
c0021564:	83 ec 08             	sub    esp,0x8
c0021567:	8d 44 24 14          	lea    eax,[esp+0x14]
c002156b:	50                   	push   eax
c002156c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021573:	50                   	push   eax
c0021574:	e8 10 53 fe ff       	call   c0006889 <f_rename>
c0021579:	83 c4 10             	add    esp,0x10
c002157c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021583:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002158a:	85 c0                	test   eax,eax
c002158c:	75 07                	jne    c0021595 <FAT::rename(char const*, char const*)+0xb7>
c002158e:	b8 00 00 00 00       	mov    eax,0x0
c0021593:	eb 05                	jmp    c002159a <FAT::rename(char const*, char const*)+0xbc>
c0021595:	b8 01 00 00 00       	mov    eax,0x1
c002159a:	81 c4 1c 02 00 00    	add    esp,0x21c
c00215a0:	c3                   	ret    
c00215a1:	90                   	nop

c00215a2 <FAT::mkdir(char const*)>:
c00215a2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215a8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215b0:	75 07                	jne    c00215b9 <FAT::mkdir(char const*)+0x17>
c00215b2:	b8 04 00 00 00       	mov    eax,0x4
c00215b7:	eb 5c                	jmp    c0021615 <FAT::mkdir(char const*)+0x73>
c00215b9:	83 ec 08             	sub    esp,0x8
c00215bc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215c7:	50                   	push   eax
c00215c8:	e8 67 f2 fd ff       	call   c0000834 <strcpy>
c00215cd:	83 c4 10             	add    esp,0x10
c00215d0:	83 ec 08             	sub    esp,0x8
c00215d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215d7:	50                   	push   eax
c00215d8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215df:	e8 3c fa ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c00215e4:	83 c4 10             	add    esp,0x10
c00215e7:	83 ec 0c             	sub    esp,0xc
c00215ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215ee:	50                   	push   eax
c00215ef:	e8 69 50 fe ff       	call   c000665d <f_mkdir>
c00215f4:	83 c4 10             	add    esp,0x10
c00215f7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215fe:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021605:	85 c0                	test   eax,eax
c0021607:	75 07                	jne    c0021610 <FAT::mkdir(char const*)+0x6e>
c0021609:	b8 00 00 00 00       	mov    eax,0x0
c002160e:	eb 05                	jmp    c0021615 <FAT::mkdir(char const*)+0x73>
c0021610:	b8 01 00 00 00       	mov    eax,0x1
c0021615:	81 c4 1c 01 00 00    	add    esp,0x11c
c002161b:	c3                   	ret    

c002161c <FAT::exists(char const*)>:
c002161c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021622:	83 ec 08             	sub    esp,0x8
c0021625:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002162c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021630:	50                   	push   eax
c0021631:	e8 fe f1 fd ff       	call   c0000834 <strcpy>
c0021636:	83 c4 10             	add    esp,0x10
c0021639:	83 ec 08             	sub    esp,0x8
c002163c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021640:	50                   	push   eax
c0021641:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021648:	e8 d3 f9 ff ff       	call   c0021020 <FAT::fixFilepath(char*)>
c002164d:	83 c4 10             	add    esp,0x10
c0021650:	83 ec 08             	sub    esp,0x8
c0021653:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002165a:	50                   	push   eax
c002165b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002165f:	50                   	push   eax
c0021660:	e8 23 4b fe ff       	call   c0006188 <f_stat>
c0021665:	83 c4 10             	add    esp,0x10
c0021668:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002166f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021676:	85 c0                	test   eax,eax
c0021678:	75 04                	jne    c002167e <FAT::exists(char const*)+0x62>
c002167a:	b0 01                	mov    al,0x1
c002167c:	eb 02                	jmp    c0021680 <FAT::exists(char const*)+0x64>
c002167e:	b0 00                	mov    al,0x0
c0021680:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021686:	c3                   	ret    
c0021687:	90                   	nop

c0021688 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021688:	b8 08 00 00 00       	mov    eax,0x8
c002168d:	c3                   	ret    

c002168e <ISO9660::seek(void*, unsigned long long)>:
c002168e:	53                   	push   ebx
c002168f:	b8 04 00 00 00       	mov    eax,0x4
c0021694:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021698:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002169c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00216a0:	85 d2                	test   edx,edx
c00216a2:	74 17                	je     c00216bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216a4:	89 c8                	mov    eax,ecx
c00216a6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216a9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216ac:	b8 01 00 00 00       	mov    eax,0x1
c00216b1:	73 08                	jae    c00216bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216b3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216b6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216b9:	31 c0                	xor    eax,eax
c00216bb:	5b                   	pop    ebx
c00216bc:	c3                   	ret    
c00216bd:	90                   	nop

c00216be <ISO9660::tell(void*, unsigned long long*)>:
c00216be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216c6:	85 d2                	test   edx,edx
c00216c8:	74 12                	je     c00216dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216ca:	85 c0                	test   eax,eax
c00216cc:	74 0e                	je     c00216dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216ce:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00216d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00216d4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216d7:	89 10                	mov    DWORD PTR [eax],edx
c00216d9:	31 c0                	xor    eax,eax
c00216db:	c3                   	ret    
c00216dc:	b8 04 00 00 00       	mov    eax,0x4
c00216e1:	c3                   	ret    

c00216e2 <ISO9660::getName()>:
c00216e2:	b8 bc c9 02 c0       	mov    eax,0xc002c9bc
c00216e7:	c3                   	ret    

c00216e8 <ISO9660::stat(void*, unsigned long long*)>:
c00216e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216f0:	85 d2                	test   edx,edx
c00216f2:	74 12                	je     c0021706 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216f4:	85 c0                	test   eax,eax
c00216f6:	74 0e                	je     c0021706 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216f8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216fb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216fe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021701:	89 10                	mov    DWORD PTR [eax],edx
c0021703:	31 c0                	xor    eax,eax
c0021705:	c3                   	ret    
c0021706:	b8 04 00 00 00       	mov    eax,0x4
c002170b:	c3                   	ret    

c002170c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002170c:	b8 01 00 00 00       	mov    eax,0x1
c0021711:	c3                   	ret    

c0021712 <ISO9660::unlink(char const*)>:
c0021712:	b8 01 00 00 00       	mov    eax,0x1
c0021717:	c3                   	ret    

c0021718 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021718:	b8 01 00 00 00       	mov    eax,0x1
c002171d:	c3                   	ret    

c002171e <ISO9660::rename(char const*, char const*)>:
c002171e:	b8 01 00 00 00       	mov    eax,0x1
c0021723:	c3                   	ret    

c0021724 <ISO9660::mkdir(char const*)>:
c0021724:	b8 01 00 00 00       	mov    eax,0x1
c0021729:	c3                   	ret    

c002172a <ISO9660::close(void*)>:
c002172a:	83 ec 0c             	sub    esp,0xc
c002172d:	b8 04 00 00 00       	mov    eax,0x4
c0021732:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021736:	85 d2                	test   edx,edx
c0021738:	74 0e                	je     c0021748 <ISO9660::close(void*)+0x1e>
c002173a:	83 ec 0c             	sub    esp,0xc
c002173d:	52                   	push   edx
c002173e:	e8 10 e1 fe ff       	call   c000f853 <free>
c0021743:	83 c4 10             	add    esp,0x10
c0021746:	31 c0                	xor    eax,eax
c0021748:	83 c4 0c             	add    esp,0xc
c002174b:	c3                   	ret    

c002174c <ISO9660::closeDir(void*)>:
c002174c:	83 ec 0c             	sub    esp,0xc
c002174f:	b8 04 00 00 00       	mov    eax,0x4
c0021754:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021758:	85 d2                	test   edx,edx
c002175a:	74 0e                	je     c002176a <ISO9660::closeDir(void*)+0x1e>
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	52                   	push   edx
c0021760:	e8 ee e0 fe ff       	call   c000f853 <free>
c0021765:	83 c4 10             	add    esp,0x10
c0021768:	31 c0                	xor    eax,eax
c002176a:	83 c4 0c             	add    esp,0xc
c002176d:	c3                   	ret    

c002176e <ISO9660::~ISO9660()>:
c002176e:	83 ec 0c             	sub    esp,0xc
c0021771:	ba 20 ca 02 c0       	mov    edx,0xc002ca20
c0021776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002177a:	89 10                	mov    DWORD PTR [eax],edx
c002177c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021780:	83 ec 0c             	sub    esp,0xc
c0021783:	50                   	push   eax
c0021784:	e8 57 1b ff ff       	call   c00132e0 <Filesystem::~Filesystem()>
c0021789:	83 c4 10             	add    esp,0x10
c002178c:	90                   	nop
c002178d:	83 c4 0c             	add    esp,0xc
c0021790:	c3                   	ret    
c0021791:	90                   	nop

c0021792 <ISO9660::~ISO9660()>:
c0021792:	83 ec 0c             	sub    esp,0xc
c0021795:	83 ec 0c             	sub    esp,0xc
c0021798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002179c:	e8 cd ff ff ff       	call   c002176e <ISO9660::~ISO9660()>
c00217a1:	83 c4 10             	add    esp,0x10
c00217a4:	83 ec 08             	sub    esp,0x8
c00217a7:	6a 08                	push   0x8
c00217a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217ad:	e8 25 17 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00217b2:	83 c4 10             	add    esp,0x10
c00217b5:	83 c4 0c             	add    esp,0xc
c00217b8:	c3                   	ret    

c00217b9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217b9:	55                   	push   ebp
c00217ba:	31 c9                	xor    ecx,ecx
c00217bc:	57                   	push   edi
c00217bd:	56                   	push   esi
c00217be:	53                   	push   ebx
c00217bf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217c7:	89 eb                	mov    ebx,ebp
c00217c9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00217cd:	39 ce                	cmp    esi,ecx
c00217cf:	7e 17                	jle    c00217e8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00217d1:	31 d2                	xor    edx,edx
c00217d3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00217d7:	7d 13                	jge    c00217ec <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00217d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217dd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217e0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217e3:	75 0d                	jne    c00217f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217e5:	42                   	inc    edx
c00217e6:	eb eb                	jmp    c00217d3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217e8:	31 c0                	xor    eax,eax
c00217ea:	eb 0a                	jmp    c00217f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217ec:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217f0:	eb 04                	jmp    c00217f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217f2:	41                   	inc    ecx
c00217f3:	43                   	inc    ebx
c00217f4:	eb d7                	jmp    c00217cd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217f6:	5b                   	pop    ebx
c00217f7:	5e                   	pop    esi
c00217f8:	5f                   	pop    edi
c00217f9:	5d                   	pop    ebp
c00217fa:	c3                   	ret    

c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217fb:	56                   	push   esi
c00217fc:	53                   	push   ebx
c00217fd:	52                   	push   edx
c00217fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021802:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002180a:	39 0d 20 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c20,ecx
c0021810:	75 08                	jne    c002181a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021812:	38 05 74 da 02 c0    	cmp    BYTE PTR ds:0xc002da74,al
c0021818:	74 2b                	je     c0021845 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002181a:	83 ec 0c             	sub    esp,0xc
c002181d:	a2 74 da 02 c0       	mov    ds:0xc002da74,al
c0021822:	68 40 1c 03 c0       	push   0xc0031c40
c0021827:	0f be c0             	movsx  eax,al
c002182a:	6a 01                	push   0x1
c002182c:	89 0d 20 1c 03 c0    	mov    DWORD PTR ds:0xc0031c20,ecx
c0021832:	31 db                	xor    ebx,ebx
c0021834:	53                   	push   ebx
c0021835:	51                   	push   ecx
c0021836:	ff 34 85 fc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1604]
c002183d:	e8 92 4f ff ff       	call   c00167d4 <LogicalDisk::read(unsigned long long, int, void*)>
c0021842:	83 c4 20             	add    esp,0x20
c0021845:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002184d:	c7 44 24 14 40 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031c40
c0021855:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021859:	58                   	pop    eax
c002185a:	5b                   	pop    ebx
c002185b:	5e                   	pop    esi
c002185c:	e9 e3 ee fd ff       	jmp    c0000744 <memcpy>
c0021861:	90                   	nop

c0021862 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021862:	81 ec 10 08 00 00    	sub    esp,0x810
c0021868:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002186f:	83 c0 41             	add    eax,0x41
c0021872:	0f be c0             	movsx  eax,al
c0021875:	50                   	push   eax
c0021876:	8d 44 24 08          	lea    eax,[esp+0x8]
c002187a:	50                   	push   eax
c002187b:	6a 10                	push   0x10
c002187d:	e8 79 ff ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021882:	83 c4 10             	add    esp,0x10
c0021885:	31 c0                	xor    eax,eax
c0021887:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002188c:	75 1d                	jne    c00218ab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002188e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021893:	75 16                	jne    c00218ab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021895:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002189a:	75 0f                	jne    c00218ab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002189c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00218a1:	75 08                	jne    c00218ab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218a3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218a8:	0f 94 c0             	sete   al
c00218ab:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218b1:	c3                   	ret    

c00218b2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218b2:	55                   	push   ebp
c00218b3:	57                   	push   edi
c00218b4:	56                   	push   esi
c00218b5:	53                   	push   ebx
c00218b6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218bc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218c3:	85 ed                	test   ebp,ebp
c00218c5:	0f 84 d6 01 00 00    	je     c0021aa1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218cb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00218d3:	0f 84 c8 01 00 00    	je     c0021aa1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218d9:	b8 01 00 00 00       	mov    eax,0x1
c00218de:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218e2:	0f 85 be 01 00 00    	jne    c0021aa6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218e8:	31 d2                	xor    edx,edx
c00218ea:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218f1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218f4:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218fb:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0021901:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021905:	01 f0                	add    eax,esi
c0021907:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002190a:	11 fa                	adc    edx,edi
c002190c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021910:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021914:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021918:	19 d1                	sbb    ecx,edx
c002191a:	72 0a                	jb     c0021926 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002191c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021920:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021924:	eb 13                	jmp    c0021939 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002192a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002192e:	29 f0                	sub    eax,esi
c0021930:	19 fa                	sbb    edx,edi
c0021932:	89 04 24             	mov    DWORD PTR [esp],eax
c0021935:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021939:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002193c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002193f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021943:	51                   	push   ecx
c0021944:	c1 e0 0b             	shl    eax,0xb
c0021947:	01 c6                	add    esi,eax
c0021949:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002194d:	11 d7                	adc    edi,edx
c002194f:	50                   	push   eax
c0021950:	89 fa                	mov    edx,edi
c0021952:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021956:	89 f0                	mov    eax,esi
c0021958:	53                   	push   ebx
c0021959:	0f ac d0 0b          	shrd   eax,edx,0xb
c002195d:	50                   	push   eax
c002195e:	e8 98 fe ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021963:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021967:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002196a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002196e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021974:	83 c4 10             	add    esp,0x10
c0021977:	b8 00 08 00 00       	mov    eax,0x800
c002197c:	29 d0                	sub    eax,edx
c002197e:	39 c1                	cmp    ecx,eax
c0021980:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021984:	83 d9 00             	sbb    ecx,0x0
c0021987:	7d 1c                	jge    c00219a5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021989:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002198e:	75 12                	jne    c00219a2 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021990:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021997:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002199d:	e9 fb 00 00 00       	jmp    c0021a9d <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00219a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219a5:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219a8:	31 d2                	xor    edx,edx
c00219aa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219ae:	39 c2                	cmp    edx,eax
c00219b0:	7d 14                	jge    c00219c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219b2:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219bd:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219c0:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219c3:	42                   	inc    edx
c00219c4:	eb e8                	jmp    c00219ae <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00219c6:	89 c3                	mov    ebx,eax
c00219c8:	85 c0                	test   eax,eax
c00219ca:	79 02                	jns    c00219ce <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00219cc:	31 db                	xor    ebx,ebx
c00219ce:	99                   	cdq    
c00219cf:	01 c3                	add    ebx,eax
c00219d1:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00219d8:	01 c6                	add    esi,eax
c00219da:	11 d7                	adc    edi,edx
c00219dc:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219e0:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219e4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219e7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219eb:	29 c6                	sub    esi,eax
c00219ed:	19 d7                	sbb    edi,edx
c00219ef:	89 34 24             	mov    DWORD PTR [esp],esi
c00219f2:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219f6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219fb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219fe:	b8 00 00 00 00       	mov    eax,0x0
c0021a03:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a07:	7d 3e                	jge    c0021a47 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a09:	52                   	push   edx
c0021a0a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a0e:	50                   	push   eax
c0021a0f:	53                   	push   ebx
c0021a10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a18:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a1c:	50                   	push   eax
c0021a1d:	e8 d9 fd ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a22:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a2a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a2f:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a35:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a3d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a42:	83 c4 10             	add    esp,0x10
c0021a45:	eb af                	jmp    c00219f6 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a4b:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a4e:	74 32                	je     c0021a82 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a50:	50                   	push   eax
c0021a51:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a55:	50                   	push   eax
c0021a56:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a5a:	50                   	push   eax
c0021a5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a5f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a63:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a67:	56                   	push   esi
c0021a68:	e8 8e fd ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a6d:	83 c4 0c             	add    esp,0xc
c0021a70:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a74:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a78:	50                   	push   eax
c0021a79:	53                   	push   ebx
c0021a7a:	e8 c5 ec fd ff       	call   c0000744 <memcpy>
c0021a7f:	83 c4 10             	add    esp,0x10
c0021a82:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a89:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a91:	89 38                	mov    DWORD PTR [eax],edi
c0021a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a97:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a9d:	31 c0                	xor    eax,eax
c0021a9f:	eb 05                	jmp    c0021aa6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021aa1:	b8 04 00 00 00       	mov    eax,0x4
c0021aa6:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021aac:	5b                   	pop    ebx
c0021aad:	5e                   	pop    esi
c0021aae:	5f                   	pop    edi
c0021aaf:	5d                   	pop    ebp
c0021ab0:	c3                   	ret    
c0021ab1:	90                   	nop

c0021ab2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021ab2:	55                   	push   ebp
c0021ab3:	57                   	push   edi
c0021ab4:	56                   	push   esi
c0021ab5:	53                   	push   ebx
c0021ab6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021abc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021ac3:	85 f6                	test   esi,esi
c0021ac5:	0f 84 64 02 00 00    	je     c0021d2f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021acb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021ad3:	0f 84 56 02 00 00    	je     c0021d2f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ad9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021adc:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021adf:	75 0a                	jne    c0021aeb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021ae1:	b8 07 00 00 00       	mov    eax,0x7
c0021ae6:	e9 49 02 00 00       	jmp    c0021d34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021aeb:	50                   	push   eax
c0021aec:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021af0:	50                   	push   eax
c0021af1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021af8:	53                   	push   ebx
c0021af9:	8b 06                	mov    eax,DWORD PTR [esi]
c0021afb:	c1 e0 0b             	shl    eax,0xb
c0021afe:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b01:	c1 e8 0b             	shr    eax,0xb
c0021b04:	50                   	push   eax
c0021b05:	e8 f1 fc ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b0a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b0d:	83 c4 10             	add    esp,0x10
c0021b10:	89 c1                	mov    ecx,eax
c0021b12:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b15:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b1b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b1e:	84 db                	test   bl,bl
c0021b20:	0f 85 90 00 00 00    	jne    c0021bb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b26:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b2c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b32:	29 c7                	sub    edi,eax
c0021b34:	89 fb                	mov    ebx,edi
c0021b36:	c1 fb 1f             	sar    ebx,0x1f
c0021b39:	01 f8                	add    eax,edi
c0021b3b:	11 da                	adc    edx,ebx
c0021b3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b45:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b48:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b4b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b4e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b51:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b58:	89 d8                	mov    eax,ebx
c0021b5a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b5d:	ba 00 00 00 00       	mov    edx,0x0
c0021b62:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b66:	b8 00 00 00 00       	mov    eax,0x0
c0021b6b:	73 0b                	jae    c0021b78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b74:	29 f8                	sub    eax,edi
c0021b76:	19 da                	sbb    edx,ebx
c0021b78:	89 d3                	mov    ebx,edx
c0021b7a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b7d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b80:	09 c3                	or     ebx,eax
c0021b82:	0f 84 59 ff ff ff    	je     c0021ae1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b88:	55                   	push   ebp
c0021b89:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b8d:	50                   	push   eax
c0021b8e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b95:	53                   	push   ebx
c0021b96:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b98:	c1 e0 0b             	shl    eax,0xb
c0021b9b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b9f:	c1 e8 0b             	shr    eax,0xb
c0021ba2:	50                   	push   eax
c0021ba3:	e8 53 fc ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ba8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bab:	83 c4 10             	add    esp,0x10
c0021bae:	25 ff 07 00 00       	and    eax,0x7ff
c0021bb3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021bb6:	57                   	push   edi
c0021bb7:	6a 28                	push   0x28
c0021bb9:	6a 00                	push   0x0
c0021bbb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bbf:	50                   	push   eax
c0021bc0:	e8 b3 eb fd ff       	call   c0000778 <memset>
c0021bc5:	31 d2                	xor    edx,edx
c0021bc7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021bca:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bd0:	89 f8                	mov    eax,edi
c0021bd2:	83 c0 21             	add    eax,0x21
c0021bd5:	83 d2 00             	adc    edx,0x0
c0021bd8:	89 c7                	mov    edi,eax
c0021bda:	89 d5                	mov    ebp,edx
c0021bdc:	83 c4 10             	add    esp,0x10
c0021bdf:	31 c9                	xor    ecx,ecx
c0021be1:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021be8:	83 f9 28             	cmp    ecx,0x28
c0021beb:	88 04 24             	mov    BYTE PTR [esp],al
c0021bee:	0f 94 c2             	sete   dl
c0021bf1:	88 d0                	mov    al,dl
c0021bf3:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bf8:	39 fa                	cmp    edx,edi
c0021bfa:	ba 00 00 00 00       	mov    edx,0x0
c0021bff:	19 ea                	sbb    edx,ebp
c0021c01:	0f 92 c2             	setb   dl
c0021c04:	09 c2                	or     edx,eax
c0021c06:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c0a:	0f 94 c0             	sete   al
c0021c0d:	08 d0                	or     al,dl
c0021c0f:	75 16                	jne    c0021c27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c11:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c15:	74 10                	je     c0021c27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c17:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c1a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c1e:	41                   	inc    ecx
c0021c1f:	83 c7 01             	add    edi,0x1
c0021c22:	83 d5 00             	adc    ebp,0x0
c0021c25:	eb ba                	jmp    c0021be1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c27:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c2e:	83 ec 0c             	sub    esp,0xc
c0021c31:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c35:	57                   	push   edi
c0021c36:	e8 59 eb fd ff       	call   c0000794 <strlen>
c0021c3b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c43:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c47:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c4e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c51:	5a                   	pop    edx
c0021c52:	25 ff 07 00 00       	and    eax,0x7ff
c0021c57:	01 c8                	add    eax,ecx
c0021c59:	59                   	pop    ecx
c0021c5a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c60:	83 e0 02             	and    eax,0x2
c0021c63:	3c 01                	cmp    al,0x1
c0021c65:	19 c0                	sbb    eax,eax
c0021c67:	83 c0 02             	add    eax,0x2
c0021c6a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c6e:	57                   	push   edi
c0021c6f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c73:	50                   	push   eax
c0021c74:	e8 bb eb fd ff       	call   c0000834 <strcpy>
c0021c79:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c7d:	83 c4 10             	add    esp,0x10
c0021c80:	84 c0                	test   al,al
c0021c82:	75 21                	jne    c0021ca5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c84:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c8c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c94:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c9c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ca3:	eb 28                	jmp    c0021ccd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ca5:	fe c8                	dec    al
c0021ca7:	75 24                	jne    c0021ccd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ca9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021cb1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cb9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cc1:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021cc8:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021ccd:	0f b6 fb             	movzx  edi,bl
c0021cd0:	31 db                	xor    ebx,ebx
c0021cd2:	50                   	push   eax
c0021cd3:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021cda:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021cde:	50                   	push   eax
c0021cdf:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021ce6:	e8 59 ea fd ff       	call   c0000744 <memcpy>
c0021ceb:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021cf2:	89 f9                	mov    ecx,edi
c0021cf4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cfa:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cfd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d00:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d03:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d06:	83 c4 10             	add    esp,0x10
c0021d09:	39 c7                	cmp    edi,eax
c0021d0b:	89 df                	mov    edi,ebx
c0021d0d:	19 d7                	sbb    edi,edx
c0021d0f:	72 10                	jb     c0021d21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d11:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d18:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d1f:	eb 0a                	jmp    c0021d2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d21:	29 c8                	sub    eax,ecx
c0021d23:	19 da                	sbb    edx,ebx
c0021d25:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d28:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d2b:	31 c0                	xor    eax,eax
c0021d2d:	eb 05                	jmp    c0021d34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d2f:	b8 04 00 00 00       	mov    eax,0x4
c0021d34:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d3a:	5b                   	pop    ebx
c0021d3b:	5e                   	pop    esi
c0021d3c:	5f                   	pop    edi
c0021d3d:	5d                   	pop    ebp
c0021d3e:	c3                   	ret    

c0021d3f <readRoot(unsigned int*, unsigned int*, char)>:
c0021d3f:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d45:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d4d:	50                   	push   eax
c0021d4e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d52:	50                   	push   eax
c0021d53:	6a 10                	push   0x10
c0021d55:	e8 a1 fa ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d5a:	83 c4 0c             	add    esp,0xc
c0021d5d:	6a 22                	push   0x22
c0021d5f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d66:	50                   	push   eax
c0021d67:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d6b:	50                   	push   eax
c0021d6c:	e8 d3 e9 fd ff       	call   c0000744 <memcpy>
c0021d71:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d7c:	89 10                	mov    DWORD PTR [eax],edx
c0021d7e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d89:	89 10                	mov    DWORD PTR [eax],edx
c0021d8b:	b0 01                	mov    al,0x1
c0021d8d:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d93:	c3                   	ret    

c0021d94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d94:	55                   	push   ebp
c0021d95:	57                   	push   edi
c0021d96:	56                   	push   esi
c0021d97:	53                   	push   ebx
c0021d98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d9e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021da5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021dac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021db0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021db4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021db8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021dbc:	75 03                	jne    c0021dc1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021dbe:	83 c3 02             	add    ebx,0x2
c0021dc1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021dc4:	75 03                	jne    c0021dc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021dc6:	43                   	inc    ebx
c0021dc7:	eb f8                	jmp    c0021dc1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021dc9:	51                   	push   ecx
c0021dca:	68 00 01 00 00       	push   0x100
c0021dcf:	6a 00                	push   0x0
c0021dd1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dd5:	50                   	push   eax
c0021dd6:	e8 9d e9 fd ff       	call   c0000778 <memset>
c0021ddb:	83 c4 10             	add    esp,0x10
c0021dde:	31 d2                	xor    edx,edx
c0021de0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021de3:	84 c0                	test   al,al
c0021de5:	74 21                	je     c0021e08 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021de7:	3c 2f                	cmp    al,0x2f
c0021de9:	75 0b                	jne    c0021df6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021deb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021def:	bd 01 00 00 00       	mov    ebp,0x1
c0021df4:	eb 14                	jmp    c0021e0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021df6:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021df9:	80 f9 19             	cmp    cl,0x19
c0021dfc:	77 03                	ja     c0021e01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dfe:	83 e8 20             	sub    eax,0x20
c0021e01:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e05:	42                   	inc    edx
c0021e06:	eb d8                	jmp    c0021de0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e08:	31 ed                	xor    ebp,ebp
c0021e0a:	83 ec 0c             	sub    esp,0xc
c0021e0d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e14:	e8 2a da fe ff       	call   c000f843 <malloc>
c0021e19:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e20:	89 c6                	mov    esi,eax
c0021e22:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e28:	c1 ef 0b             	shr    edi,0xb
c0021e2b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e32:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e36:	83 c4 10             	add    esp,0x10
c0021e39:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e42:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e49:	74 28                	je     c0021e73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e4b:	52                   	push   edx
c0021e4c:	57                   	push   edi
c0021e4d:	50                   	push   eax
c0021e4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e52:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e59:	e8 9d f9 ff ff       	call   c00217fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e62:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e69:	05 00 08 00 00       	add    eax,0x800
c0021e6e:	83 c4 10             	add    esp,0x10
c0021e71:	eb cb                	jmp    c0021e3e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e73:	83 ec 0c             	sub    esp,0xc
c0021e76:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e7a:	57                   	push   edi
c0021e7b:	e8 14 e9 fd ff       	call   c0000794 <strlen>
c0021e80:	50                   	push   eax
c0021e81:	57                   	push   edi
c0021e82:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e89:	56                   	push   esi
c0021e8a:	e8 2a f9 ff ff       	call   c00217b9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e8f:	83 c4 20             	add    esp,0x20
c0021e92:	85 c0                	test   eax,eax
c0021e94:	75 13                	jne    c0021ea9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e96:	83 ec 0c             	sub    esp,0xc
c0021e99:	56                   	push   esi
c0021e9a:	e8 b4 d9 fe ff       	call   c000f853 <free>
c0021e9f:	83 c4 10             	add    esp,0x10
c0021ea2:	31 c0                	xor    eax,eax
c0021ea4:	e9 b3 00 00 00       	jmp    c0021f5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ea9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ead:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021eb1:	c1 e7 08             	shl    edi,0x8
c0021eb4:	c1 e2 10             	shl    edx,0x10
c0021eb7:	09 d7                	or     edi,edx
c0021eb9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ebd:	09 d7                	or     edi,edx
c0021ebf:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ec3:	c1 e2 18             	shl    edx,0x18
c0021ec6:	09 d7                	or     edi,edx
c0021ec8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021ecc:	89 d1                	mov    ecx,edx
c0021ece:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021ed2:	c1 e1 08             	shl    ecx,0x8
c0021ed5:	c1 e2 10             	shl    edx,0x10
c0021ed8:	09 ca                	or     edx,ecx
c0021eda:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ede:	09 ca                	or     edx,ecx
c0021ee0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021ee4:	c1 e1 18             	shl    ecx,0x18
c0021ee7:	09 ca                	or     edx,ecx
c0021ee9:	89 e9                	mov    ecx,ebp
c0021eeb:	84 c9                	test   cl,cl
c0021eed:	74 3c                	je     c0021f2b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021eef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ef3:	83 ec 0c             	sub    esp,0xc
c0021ef6:	56                   	push   esi
c0021ef7:	e8 57 d9 fe ff       	call   c000f853 <free>
c0021efc:	83 c4 0c             	add    esp,0xc
c0021eff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f06:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f0b:	50                   	push   eax
c0021f0c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f13:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f1e:	52                   	push   edx
c0021f1f:	57                   	push   edi
c0021f20:	53                   	push   ebx
c0021f21:	e8 6e fe ff ff       	call   c0021d94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f26:	83 c4 20             	add    esp,0x20
c0021f29:	eb 31                	jmp    c0021f5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f2b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f2e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f35:	d0 e8                	shr    al,1
c0021f37:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f39:	83 e0 01             	and    eax,0x1
c0021f3c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f43:	83 ec 0c             	sub    esp,0xc
c0021f46:	89 13                	mov    DWORD PTR [ebx],edx
c0021f48:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f4f:	89 03                	mov    DWORD PTR [ebx],eax
c0021f51:	56                   	push   esi
c0021f52:	e8 fc d8 fe ff       	call   c000f853 <free>
c0021f57:	83 c4 10             	add    esp,0x10
c0021f5a:	b0 01                	mov    al,0x1
c0021f5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f62:	5b                   	pop    ebx
c0021f63:	5e                   	pop    esi
c0021f64:	5f                   	pop    edi
c0021f65:	5d                   	pop    ebp
c0021f66:	c3                   	ret    

c0021f67 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f67:	55                   	push   ebp
c0021f68:	57                   	push   edi
c0021f69:	56                   	push   esi
c0021f6a:	53                   	push   ebx
c0021f6b:	83 ec 20             	sub    esp,0x20
c0021f6e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f72:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f76:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f7a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f82:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f8a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f8f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f95:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f9b:	57                   	push   edi
c0021f9c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fa0:	50                   	push   eax
c0021fa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fa5:	50                   	push   eax
c0021fa6:	e8 94 fd ff ff       	call   c0021d3f <readRoot(unsigned int*, unsigned int*, char)>
c0021fab:	5a                   	pop    edx
c0021fac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fb0:	e8 df e7 fd ff       	call   c0000794 <strlen>
c0021fb5:	83 c4 10             	add    esp,0x10
c0021fb8:	83 f8 03             	cmp    eax,0x3
c0021fbb:	77 17                	ja     c0021fd4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021fbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc1:	89 03                	mov    DWORD PTR [ebx],eax
c0021fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fc7:	89 06                	mov    DWORD PTR [esi],eax
c0021fc9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021fd0:	b0 01                	mov    al,0x1
c0021fd2:	eb 19                	jmp    c0021fed <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021fd4:	50                   	push   eax
c0021fd5:	55                   	push   ebp
c0021fd6:	57                   	push   edi
c0021fd7:	56                   	push   esi
c0021fd8:	53                   	push   ebx
c0021fd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fdd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fe1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fe5:	e8 aa fd ff ff       	call   c0021d94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fea:	83 c4 20             	add    esp,0x20
c0021fed:	83 c4 1c             	add    esp,0x1c
c0021ff0:	5b                   	pop    ebx
c0021ff1:	5e                   	pop    esi
c0021ff2:	5f                   	pop    edi
c0021ff3:	5d                   	pop    ebp
c0021ff4:	c3                   	ret    
c0021ff5:	90                   	nop

c0021ff6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021ff6:	57                   	push   edi
c0021ff7:	56                   	push   esi
c0021ff8:	53                   	push   ebx
c0021ff9:	83 ec 10             	sub    esp,0x10
c0021ffc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022000:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022004:	85 ff                	test   edi,edi
c0022006:	0f 84 9d 00 00 00    	je     c00220a9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002200c:	85 f6                	test   esi,esi
c002200e:	0f 84 95 00 00 00    	je     c00220a9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022014:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022019:	74 17                	je     c0022032 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002201b:	83 ec 0c             	sub    esp,0xc
c002201e:	68 d7 c9 02 c0       	push   0xc002c9d7
c0022023:	e8 8f 0f ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0022028:	83 c4 10             	add    esp,0x10
c002202b:	b8 03 00 00 00       	mov    eax,0x3
c0022030:	eb 7c                	jmp    c00220ae <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022032:	83 ec 0c             	sub    esp,0xc
c0022035:	6a 1c                	push   0x1c
c0022037:	e8 07 d8 fe ff       	call   c000f843 <malloc>
c002203c:	89 07                	mov    DWORD PTR [edi],eax
c002203e:	89 c3                	mov    ebx,eax
c0022040:	58                   	pop    eax
c0022041:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022045:	50                   	push   eax
c0022046:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022049:	50                   	push   eax
c002204a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002204e:	50                   	push   eax
c002204f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022053:	50                   	push   eax
c0022054:	56                   	push   esi
c0022055:	e8 0d ff ff ff       	call   c0021f67 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002205a:	83 c4 20             	add    esp,0x20
c002205d:	84 c0                	test   al,al
c002205f:	74 07                	je     c0022068 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022061:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022066:	74 0b                	je     c0022073 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022068:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002206c:	b8 01 00 00 00       	mov    eax,0x1
c0022071:	eb 3b                	jmp    c00220ae <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022077:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002207b:	89 03                	mov    DWORD PTR [ebx],eax
c002207d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022088:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002208f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022096:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022099:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220a0:	8a 06                	mov    al,BYTE PTR [esi]
c00220a2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220a5:	31 c0                	xor    eax,eax
c00220a7:	eb 05                	jmp    c00220ae <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220a9:	b8 04 00 00 00       	mov    eax,0x4
c00220ae:	83 c4 10             	add    esp,0x10
c00220b1:	5b                   	pop    ebx
c00220b2:	5e                   	pop    esi
c00220b3:	5f                   	pop    edi
c00220b4:	c3                   	ret    
c00220b5:	90                   	nop

c00220b6 <ISO9660::exists(char const*)>:
c00220b6:	83 ec 28             	sub    esp,0x28
c00220b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220bd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220c1:	52                   	push   edx
c00220c2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220c5:	52                   	push   edx
c00220c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220ca:	52                   	push   edx
c00220cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220cf:	52                   	push   edx
c00220d0:	50                   	push   eax
c00220d1:	e8 91 fe ff ff       	call   c0021f67 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220d6:	83 c4 3c             	add    esp,0x3c
c00220d9:	c3                   	ret    

c00220da <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220da:	56                   	push   esi
c00220db:	53                   	push   ebx
c00220dc:	83 ec 14             	sub    esp,0x14
c00220df:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220e7:	85 db                	test   ebx,ebx
c00220e9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220ed:	0f 94 c2             	sete   dl
c00220f0:	85 f6                	test   esi,esi
c00220f2:	0f 94 c0             	sete   al
c00220f5:	08 c2                	or     dl,al
c00220f7:	75 68                	jne    c0022161 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220f9:	85 c9                	test   ecx,ecx
c00220fb:	74 64                	je     c0022161 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220fd:	83 ec 0c             	sub    esp,0xc
c0022100:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022103:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022107:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002210d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022114:	50                   	push   eax
c0022115:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022118:	50                   	push   eax
c0022119:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002211d:	50                   	push   eax
c002211e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022122:	50                   	push   eax
c0022123:	51                   	push   ecx
c0022124:	e8 3e fe ff ff       	call   c0021f67 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022129:	83 c4 20             	add    esp,0x20
c002212c:	ba 01 00 00 00       	mov    edx,0x1
c0022131:	84 c0                	test   al,al
c0022133:	74 31                	je     c0022166 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022135:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022139:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022140:	89 03                	mov    DWORD PTR [ebx],eax
c0022142:	ba 00 00 00 00       	mov    edx,0x0
c0022147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002214b:	85 c0                	test   eax,eax
c002214d:	0f 95 06             	setne  BYTE PTR [esi]
c0022150:	74 14                	je     c0022166 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022152:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022158:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002215f:	eb 05                	jmp    c0022166 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022161:	ba 04 00 00 00       	mov    edx,0x4
c0022166:	83 c4 14             	add    esp,0x14
c0022169:	89 d0                	mov    eax,edx
c002216b:	5b                   	pop    ebx
c002216c:	5e                   	pop    esi
c002216d:	c3                   	ret    

c002216e <ISO9660::openDir(char const*, void**)>:
c002216e:	57                   	push   edi
c002216f:	56                   	push   esi
c0022170:	53                   	push   ebx
c0022171:	83 ec 10             	sub    esp,0x10
c0022174:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022178:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002217c:	85 ff                	test   edi,edi
c002217e:	0f 84 95 00 00 00    	je     c0022219 <ISO9660::openDir(char const*, void**)+0xab>
c0022184:	85 f6                	test   esi,esi
c0022186:	0f 84 8d 00 00 00    	je     c0022219 <ISO9660::openDir(char const*, void**)+0xab>
c002218c:	83 ec 0c             	sub    esp,0xc
c002218f:	6a 1c                	push   0x1c
c0022191:	e8 ad d6 fe ff       	call   c000f843 <malloc>
c0022196:	89 07                	mov    DWORD PTR [edi],eax
c0022198:	89 c3                	mov    ebx,eax
c002219a:	59                   	pop    ecx
c002219b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002219f:	50                   	push   eax
c00221a0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221a3:	50                   	push   eax
c00221a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221a8:	50                   	push   eax
c00221a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221ad:	50                   	push   eax
c00221ae:	56                   	push   esi
c00221af:	e8 b3 fd ff ff       	call   c0021f67 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221b4:	83 c4 20             	add    esp,0x20
c00221b7:	84 c0                	test   al,al
c00221b9:	74 07                	je     c00221c2 <ISO9660::openDir(char const*, void**)+0x54>
c00221bb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221c0:	75 21                	jne    c00221e3 <ISO9660::openDir(char const*, void**)+0x75>
c00221c2:	0f b6 c0             	movzx  eax,al
c00221c5:	52                   	push   edx
c00221c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00221ca:	50                   	push   eax
c00221cb:	68 fd c9 02 c0       	push   0xc002c9fd
c00221d0:	e8 e2 0d ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00221d5:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221d9:	83 c4 10             	add    esp,0x10
c00221dc:	b8 01 00 00 00       	mov    eax,0x1
c00221e1:	eb 3b                	jmp    c002221e <ISO9660::openDir(char const*, void**)+0xb0>
c00221e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221eb:	89 03                	mov    DWORD PTR [ebx],eax
c00221ed:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022206:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022209:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022210:	8a 06                	mov    al,BYTE PTR [esi]
c0022212:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022215:	31 c0                	xor    eax,eax
c0022217:	eb 05                	jmp    c002221e <ISO9660::openDir(char const*, void**)+0xb0>
c0022219:	b8 04 00 00 00       	mov    eax,0x4
c002221e:	83 c4 10             	add    esp,0x10
c0022221:	5b                   	pop    ebx
c0022222:	5e                   	pop    esi
c0022223:	5f                   	pop    edi
c0022224:	c3                   	ret    
c0022225:	90                   	nop

c0022226 <ISO9660::ISO9660()>:
c0022226:	83 ec 0c             	sub    esp,0xc
c0022229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222d:	83 ec 0c             	sub    esp,0xc
c0022230:	50                   	push   eax
c0022231:	e8 86 10 ff ff       	call   c00132bc <Filesystem::Filesystem()>
c0022236:	83 c4 10             	add    esp,0x10
c0022239:	ba 20 ca 02 c0       	mov    edx,0xc002ca20
c002223e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022242:	89 10                	mov    DWORD PTR [eax],edx
c0022244:	90                   	nop
c0022245:	83 c4 0c             	add    esp,0xc
c0022248:	c3                   	ret    
c0022249:	90                   	nop

c002224a <SoundChannel::~SoundChannel()>:
c002224a:	83 ec 0c             	sub    esp,0xc
c002224d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022251:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022254:	83 ec 0c             	sub    esp,0xc
c0022257:	50                   	push   eax
c0022258:	e8 f6 d5 fe ff       	call   c000f853 <free>
c002225d:	83 c4 10             	add    esp,0x10
c0022260:	90                   	nop
c0022261:	83 c4 0c             	add    esp,0xc
c0022264:	c3                   	ret    
c0022265:	90                   	nop

c0022266 <SoundChannel::setSpeed(float)>:
c0022266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002226a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002226e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022271:	c3                   	ret    

c0022272 <SoundChannel::getSpeed()>:
c0022272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022276:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022279:	c3                   	ret    

c002227a <SoundChannel::setVolume(int)>:
c002227a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002227e:	83 f8 64             	cmp    eax,0x64
c0022281:	7e 05                	jle    c0022288 <SoundChannel::setVolume(int)+0xe>
c0022283:	b8 64 00 00 00       	mov    eax,0x64
c0022288:	85 c0                	test   eax,eax
c002228a:	79 02                	jns    c002228e <SoundChannel::setVolume(int)+0x14>
c002228c:	31 c0                	xor    eax,eax
c002228e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022292:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022295:	c3                   	ret    

c0022296 <SoundChannel::getVolume()>:
c0022296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002229a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002229d:	c3                   	ret    

c002229e <SoundChannel::pause()>:
c002229e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a2:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222a6:	c3                   	ret    
c00222a7:	90                   	nop

c00222a8 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222a8:	83 ec 1c             	sub    esp,0x1c
c00222ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222af:	e8 ea ff ff ff       	call   c002229e <SoundChannel::pause()>
c00222b4:	83 c4 04             	add    esp,0x4
c00222b7:	6a 50                	push   0x50
c00222b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222bd:	e8 b8 ff ff ff       	call   c002227a <SoundChannel::setVolume(int)>
c00222c2:	83 c4 08             	add    esp,0x8
c00222c5:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00222ca:	50                   	push   eax
c00222cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222cf:	e8 92 ff ff ff       	call   c0022266 <SoundChannel::setSpeed(float)>
c00222d4:	83 c4 08             	add    esp,0x8
c00222d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222df:	89 10                	mov    DWORD PTR [eax],edx
c00222e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222f7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222fc:	75 23                	jne    c0022321 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022302:	8b 10                	mov    edx,DWORD PTR [eax]
c0022304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002230b:	0f af c2             	imul   eax,edx
c002230e:	85 c0                	test   eax,eax
c0022310:	79 03                	jns    c0022315 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022312:	83 c0 03             	add    eax,0x3
c0022315:	c1 f8 02             	sar    eax,0x2
c0022318:	05 a0 0f 00 00       	add    eax,0xfa0
c002231d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022325:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022329:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002232c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022330:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002233b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022346:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022349:	c1 e0 02             	shl    eax,0x2
c002234c:	83 ec 0c             	sub    esp,0xc
c002234f:	50                   	push   eax
c0022350:	e8 ee d4 fe ff       	call   c000f843 <malloc>
c0022355:	83 c4 10             	add    esp,0x10
c0022358:	89 c2                	mov    edx,eax
c002235a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022361:	83 ec 04             	sub    esp,0x4
c0022364:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022368:	50                   	push   eax
c0022369:	6a 01                	push   0x1
c002236b:	6a 04                	push   0x4
c002236d:	e8 2d 68 fe ff       	call   c0008b9f <src_new>
c0022372:	83 c4 10             	add    esp,0x10
c0022375:	89 c2                	mov    edx,eax
c0022377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002237b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002237e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022382:	85 c0                	test   eax,eax
c0022384:	74 10                	je     c0022396 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022386:	83 ec 0c             	sub    esp,0xc
c0022389:	68 7c ca 02 c0       	push   0xc002ca7c
c002238e:	e8 d2 82 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0022393:	83 c4 10             	add    esp,0x10
c0022396:	a0 40 28 03 c0       	mov    al,ds:0xc0032840
c002239b:	83 f0 01             	xor    eax,0x1
c002239e:	84 c0                	test   al,al
c00223a0:	74 57                	je     c00223f9 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00223a2:	a1 9c ca 02 c0       	mov    eax,ds:0xc002ca9c
c00223a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223b3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223bb:	7f 35                	jg     c00223f2 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223bd:	83 ec 0c             	sub    esp,0xc
c00223c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223c4:	e8 9e 4f 00 00       	call   c0027367 <__floatsisf>
c00223c9:	83 c4 10             	add    esp,0x10
c00223cc:	8b 15 9c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca9c
c00223d2:	83 ec 08             	sub    esp,0x8
c00223d5:	52                   	push   edx
c00223d6:	50                   	push   eax
c00223d7:	e8 9d 4b 00 00       	call   c0026f79 <__mulsf3>
c00223dc:	83 c4 10             	add    esp,0x10
c00223df:	89 c2                	mov    edx,eax
c00223e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223e5:	89 14 85 40 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbc0],edx
c00223ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223f0:	eb c1                	jmp    c00223b3 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223f2:	c6 05 40 28 03 c0 01 	mov    BYTE PTR ds:0xc0032840,0x1
c00223f9:	90                   	nop
c00223fa:	83 c4 1c             	add    esp,0x1c
c00223fd:	c3                   	ret    

c00223fe <SoundChannel::play()>:
c00223fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022402:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022406:	c3                   	ret    
c0022407:	90                   	nop

c0022408 <SoundChannel::paused()>:
c0022408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002240c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002240f:	c3                   	ret    

c0022410 <SoundChannel::getSampleRate()>:
c0022410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022414:	8b 00                	mov    eax,DWORD PTR [eax]
c0022416:	c3                   	ret    
c0022417:	90                   	nop

c0022418 <SoundChannel::getBits()>:
c0022418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002241c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002241f:	c3                   	ret    

c0022420 <SoundChannel::getBufferUsed()>:
c0022420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022424:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022427:	c3                   	ret    

c0022428 <SoundChannel::getBufferSize()>:
c0022428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002242c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002242f:	c3                   	ret    

c0022430 <SoundChannel::unbuffer(float*, int, int)>:
c0022430:	56                   	push   esi
c0022431:	53                   	push   ebx
c0022432:	83 ec 40             	sub    esp,0x40
c0022435:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022439:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002243c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022440:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022443:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022447:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002244b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002244f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022457:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002245b:	e8 07 4f 00 00       	call   c0027367 <__floatsisf>
c0022460:	5a                   	pop    edx
c0022461:	89 c6                	mov    esi,eax
c0022463:	ff 33                	push   DWORD PTR [ebx]
c0022465:	e8 fd 4e 00 00       	call   c0027367 <__floatsisf>
c002246a:	59                   	pop    ecx
c002246b:	5a                   	pop    edx
c002246c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002246f:	50                   	push   eax
c0022470:	e8 04 4b 00 00       	call   c0026f79 <__mulsf3>
c0022475:	59                   	pop    ecx
c0022476:	5a                   	pop    edx
c0022477:	50                   	push   eax
c0022478:	56                   	push   esi
c0022479:	e8 be 4c 00 00       	call   c002713c <__divsf3>
c002247e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022481:	e8 b1 61 00 00       	call   c0028637 <__extendsfdf2>
c0022486:	59                   	pop    ecx
c0022487:	5e                   	pop    esi
c0022488:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002248c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022490:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022498:	8d 44 24 14          	lea    eax,[esp+0x14]
c002249c:	50                   	push   eax
c002249d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00224a0:	e8 ef 62 fe ff       	call   c0008794 <src_process>
c00224a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224ac:	83 c4 0c             	add    esp,0xc
c00224af:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224b2:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224b5:	29 d0                	sub    eax,edx
c00224b7:	c1 e0 02             	shl    eax,0x2
c00224ba:	50                   	push   eax
c00224bb:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224be:	50                   	push   eax
c00224bf:	51                   	push   ecx
c00224c0:	e8 b7 e1 fd ff       	call   c000067c <memmove>
c00224c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224c9:	83 c4 44             	add    esp,0x44
c00224cc:	5b                   	pop    ebx
c00224cd:	5e                   	pop    esi
c00224ce:	c3                   	ret    
c00224cf:	90                   	nop

c00224d0 <SoundChannel::buffer8(unsigned char*, int)>:
c00224d0:	55                   	push   ebp
c00224d1:	57                   	push   edi
c00224d2:	56                   	push   esi
c00224d3:	53                   	push   ebx
c00224d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224d8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224dc:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224e3:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224e6:	74 7a                	je     c0022562 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224e8:	85 ff                	test   edi,edi
c00224ea:	7e 76                	jle    c0022562 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224ec:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224f0:	8d 70 01             	lea    esi,[eax+0x1]
c00224f3:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224f6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224f9:	8b 1c 9d 40 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdbc0]
c0022500:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022503:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022506:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022509:	74 5e                	je     c0022569 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002250b:	83 ff 01             	cmp    edi,0x1
c002250e:	74 4b                	je     c002255b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022510:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022514:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022517:	8d 70 01             	lea    esi,[eax+0x1]
c002251a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002251d:	8b 1c 9d 40 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdbc0]
c0022524:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022527:	b8 02 00 00 00       	mov    eax,0x2
c002252c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002252f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022532:	75 23                	jne    c0022557 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022534:	eb 27                	jmp    c002255d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022536:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002253b:	8d 71 01             	lea    esi,[ecx+0x1]
c002253e:	40                   	inc    eax
c002253f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022542:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022545:	8b 1c 9d 40 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdbc0]
c002254c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002254f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022552:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022555:	74 06                	je     c002255d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022557:	39 c7                	cmp    edi,eax
c0022559:	75 db                	jne    c0022536 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002255b:	89 f8                	mov    eax,edi
c002255d:	5b                   	pop    ebx
c002255e:	5e                   	pop    esi
c002255f:	5f                   	pop    edi
c0022560:	5d                   	pop    ebp
c0022561:	c3                   	ret    
c0022562:	5b                   	pop    ebx
c0022563:	31 c0                	xor    eax,eax
c0022565:	5e                   	pop    esi
c0022566:	5f                   	pop    edi
c0022567:	5d                   	pop    ebp
c0022568:	c3                   	ret    
c0022569:	b8 01 00 00 00       	mov    eax,0x1
c002256e:	eb ed                	jmp    c002255d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022570 <SoundDevice::SoundDevice(char const*)>:
c0022570:	83 ec 1c             	sub    esp,0x1c
c0022573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022577:	83 ec 08             	sub    esp,0x8
c002257a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002257e:	50                   	push   eax
c002257f:	e8 4a 20 ff ff       	call   c00145ce <Device::Device(char const*)>
c0022584:	83 c4 10             	add    esp,0x10
c0022587:	ba a8 ca 02 c0       	mov    edx,0xc002caa8
c002258c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022590:	89 10                	mov    DWORD PTR [eax],edx
c0022592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022596:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225b6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225bb:	7f 19                	jg     c00225d6 <SoundDevice::SoundDevice(char const*)+0x66>
c00225bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225c5:	83 c2 54             	add    edx,0x54
c00225c8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225d0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225d4:	eb e0                	jmp    c00225b6 <SoundDevice::SoundDevice(char const*)+0x46>
c00225d6:	90                   	nop
c00225d7:	83 c4 1c             	add    esp,0x1c
c00225da:	c3                   	ret    
c00225db:	90                   	nop

c00225dc <SoundDevice::~SoundDevice()>:
c00225dc:	53                   	push   ebx
c00225dd:	83 ec 18             	sub    esp,0x18
c00225e0:	ba a8 ca 02 c0       	mov    edx,0xc002caa8
c00225e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225e9:	89 10                	mov    DWORD PTR [eax],edx
c00225eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225f3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225f8:	7f 46                	jg     c0022640 <SoundDevice::~SoundDevice()+0x64>
c00225fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022602:	83 c2 54             	add    edx,0x54
c0022605:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022609:	85 c0                	test   eax,eax
c002260b:	74 2d                	je     c002263a <SoundDevice::~SoundDevice()+0x5e>
c002260d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022615:	83 c2 54             	add    edx,0x54
c0022618:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002261c:	85 db                	test   ebx,ebx
c002261e:	74 1a                	je     c002263a <SoundDevice::~SoundDevice()+0x5e>
c0022620:	83 ec 0c             	sub    esp,0xc
c0022623:	53                   	push   ebx
c0022624:	e8 21 fc ff ff       	call   c002224a <SoundChannel::~SoundChannel()>
c0022629:	83 c4 10             	add    esp,0x10
c002262c:	83 ec 08             	sub    esp,0x8
c002262f:	6a 2c                	push   0x2c
c0022631:	53                   	push   ebx
c0022632:	e8 a0 08 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0022637:	83 c4 10             	add    esp,0x10
c002263a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002263e:	eb b3                	jmp    c00225f3 <SoundDevice::~SoundDevice()+0x17>
c0022640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022644:	83 ec 0c             	sub    esp,0xc
c0022647:	50                   	push   eax
c0022648:	e8 63 1c ff ff       	call   c00142b0 <Device::~Device()>
c002264d:	83 c4 10             	add    esp,0x10
c0022650:	90                   	nop
c0022651:	83 c4 18             	add    esp,0x18
c0022654:	5b                   	pop    ebx
c0022655:	c3                   	ret    

c0022656 <SoundDevice::~SoundDevice()>:
c0022656:	83 ec 0c             	sub    esp,0xc
c0022659:	83 ec 0c             	sub    esp,0xc
c002265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022660:	e8 77 ff ff ff       	call   c00225dc <SoundDevice::~SoundDevice()>
c0022665:	83 c4 10             	add    esp,0x10
c0022668:	83 ec 08             	sub    esp,0x8
c002266b:	68 e4 01 00 00       	push   0x1e4
c0022670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022674:	e8 5e 08 ff ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0022679:	83 c4 10             	add    esp,0x10
c002267c:	83 c4 0c             	add    esp,0xc
c002267f:	c3                   	ret    

c0022680 <SoundDevice::getFreeChannelNum()>:
c0022680:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022684:	31 c0                	xor    eax,eax
c0022686:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002268e:	74 09                	je     c0022699 <SoundDevice::getFreeChannelNum()+0x19>
c0022690:	40                   	inc    eax
c0022691:	83 f8 20             	cmp    eax,0x20
c0022694:	75 f0                	jne    c0022686 <SoundDevice::getFreeChannelNum()+0x6>
c0022696:	83 c8 ff             	or     eax,0xffffffff
c0022699:	c3                   	ret    

c002269a <SoundDevice::addChannel(SoundChannel*)>:
c002269a:	56                   	push   esi
c002269b:	53                   	push   ebx
c002269c:	51                   	push   ecx
c002269d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226a5:	53                   	push   ebx
c00226a6:	e8 d5 ff ff ff       	call   c0022680 <SoundDevice::getFreeChannelNum()>
c00226ab:	5a                   	pop    edx
c00226ac:	83 f8 ff             	cmp    eax,0xffffffff
c00226af:	74 51                	je     c0022702 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226b1:	85 f6                	test   esi,esi
c00226b3:	74 4d                	je     c0022702 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226b5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226bc:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226c3:	75 30                	jne    c00226f5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226c5:	83 ec 0c             	sub    esp,0xc
c00226c8:	56                   	push   esi
c00226c9:	e8 42 fd ff ff       	call   c0022410 <SoundChannel::getSampleRate()>
c00226ce:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00226d7:	e8 3c fd ff ff       	call   c0022418 <SoundChannel::getBits()>
c00226dc:	83 c4 0c             	add    esp,0xc
c00226df:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226e7:	50                   	push   eax
c00226e8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226ee:	53                   	push   ebx
c00226ef:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226f2:	83 c4 10             	add    esp,0x10
c00226f5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226fb:	b8 01 00 00 00       	mov    eax,0x1
c0022700:	eb 03                	jmp    c0022705 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022702:	83 c8 ff             	or     eax,0xffffffff
c0022705:	5a                   	pop    edx
c0022706:	5b                   	pop    ebx
c0022707:	5e                   	pop    esi
c0022708:	c3                   	ret    
c0022709:	90                   	nop

c002270a <SoundDevice::removeChannel(int)>:
c002270a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002270e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022712:	83 fa 1f             	cmp    edx,0x1f
c0022715:	77 23                	ja     c002273a <SoundDevice::removeChannel(int)+0x30>
c0022717:	8d 14 90             	lea    edx,[eax+edx*4]
c002271a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022721:	74 17                	je     c002273a <SoundDevice::removeChannel(int)+0x30>
c0022723:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002272d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022733:	75 05                	jne    c002273a <SoundDevice::removeChannel(int)+0x30>
c0022735:	8b 00                	mov    eax,DWORD PTR [eax]
c0022737:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002273a:	c3                   	ret    
c002273b:	90                   	nop

c002273c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002273c:	57                   	push   edi
c002273d:	56                   	push   esi
c002273e:	53                   	push   ebx
c002273f:	31 db                	xor    ebx,ebx
c0022741:	83 ec 10             	sub    esp,0x10
c0022744:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022748:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002274c:	0f 8d cb 00 00 00    	jge    c002281d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022752:	83 ec 0c             	sub    esp,0xc
c0022755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022759:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002275c:	e8 d6 5e 00 00       	call   c0028637 <__extendsfdf2>
c0022761:	83 c4 10             	add    esp,0x10
c0022764:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022768:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002276c:	68 00 00 f0 3f       	push   0x3ff00000
c0022771:	6a 00                	push   0x0
c0022773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277b:	e8 43 4e 00 00       	call   c00275c3 <__adddf3>
c0022780:	83 c4 10             	add    esp,0x10
c0022783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022787:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002278b:	68 00 00 e0 3f       	push   0x3fe00000
c0022790:	6a 00                	push   0x0
c0022792:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002279a:	e8 a1 54 00 00       	call   c0027c40 <__muldf3>
c002279f:	83 c4 10             	add    esp,0x10
c00227a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227aa:	68 00 00 60 40       	push   0x40600000
c00227af:	6a 00                	push   0x0
c00227b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b9:	e8 82 54 00 00       	call   c0027c40 <__muldf3>
c00227be:	59                   	pop    ecx
c00227bf:	5f                   	pop    edi
c00227c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d0:	e8 3e 5d 00 00       	call   c0028513 <__truncdfsf2>
c00227d5:	5a                   	pop    edx
c00227d6:	89 c7                	mov    edi,eax
c00227d8:	59                   	pop    ecx
c00227d9:	68 00 00 fe 42       	push   0x42fe0000
c00227de:	50                   	push   eax
c00227df:	e8 d9 4d 00 00       	call   c00275bd <__gesf2>
c00227e4:	83 c4 10             	add    esp,0x10
c00227e7:	85 c0                	test   eax,eax
c00227e9:	78 06                	js     c00227f1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227eb:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227ef:	eb 26                	jmp    c0022817 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227f1:	50                   	push   eax
c00227f2:	50                   	push   eax
c00227f3:	6a 00                	push   0x0
c00227f5:	57                   	push   edi
c00227f6:	e8 c6 4d 00 00       	call   c00275c1 <__lesf2>
c00227fb:	83 c4 10             	add    esp,0x10
c00227fe:	85 c0                	test   eax,eax
c0022800:	7f 06                	jg     c0022808 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022802:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022806:	eb 0f                	jmp    c0022817 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022808:	83 ec 0c             	sub    esp,0xc
c002280b:	57                   	push   edi
c002280c:	e8 bb 5e 00 00       	call   c00286cc <lrintf>
c0022811:	83 c4 10             	add    esp,0x10
c0022814:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022817:	43                   	inc    ebx
c0022818:	e9 2b ff ff ff       	jmp    c0022748 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002281d:	83 c4 10             	add    esp,0x10
c0022820:	5b                   	pop    ebx
c0022821:	5e                   	pop    esi
c0022822:	5f                   	pop    edi
c0022823:	c3                   	ret    

c0022824 <SoundDevice::getAudio(int, float*, float*)>:
c0022824:	55                   	push   ebp
c0022825:	57                   	push   edi
c0022826:	56                   	push   esi
c0022827:	53                   	push   ebx
c0022828:	31 db                	xor    ebx,ebx
c002282a:	83 ec 20             	sub    esp,0x20
c002282d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022831:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022835:	c1 e0 02             	shl    eax,0x2
c0022838:	50                   	push   eax
c0022839:	6a 00                	push   0x0
c002283b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002283f:	e8 34 df fd ff       	call   c0000778 <memset>
c0022844:	83 c4 10             	add    esp,0x10
c0022847:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002284b:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022852:	85 c0                	test   eax,eax
c0022854:	0f 84 d7 00 00 00    	je     c0022931 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002285a:	83 ec 0c             	sub    esp,0xc
c002285d:	50                   	push   eax
c002285e:	e8 a5 fb ff ff       	call   c0022408 <SoundChannel::paused()>
c0022863:	83 c4 10             	add    esp,0x10
c0022866:	84 c0                	test   al,al
c0022868:	0f 85 c3 00 00 00    	jne    c0022931 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002286e:	83 ec 0c             	sub    esp,0xc
c0022871:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022878:	e8 19 fa ff ff       	call   c0022296 <SoundChannel::getVolume()>
c002287d:	83 c4 10             	add    esp,0x10
c0022880:	85 c0                	test   eax,eax
c0022882:	0f 84 a9 00 00 00    	je     c0022931 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022888:	83 ec 0c             	sub    esp,0xc
c002288b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022892:	e8 ff f9 ff ff       	call   c0022296 <SoundChannel::getVolume()>
c0022897:	83 ec 0c             	sub    esp,0xc
c002289a:	50                   	push   eax
c002289b:	e8 c7 4a 00 00       	call   c0027367 <__floatsisf>
c00228a0:	59                   	pop    ecx
c00228a1:	5d                   	pop    ebp
c00228a2:	31 ed                	xor    ebp,ebp
c00228a4:	68 00 00 c8 42       	push   0x42c80000
c00228a9:	50                   	push   eax
c00228aa:	e8 8d 48 00 00       	call   c002713c <__divsf3>
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228b6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228ba:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228c0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228c4:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228cb:	e8 60 fb ff ff       	call   c0022430 <SoundChannel::unbuffer(float*, int, int)>
c00228d0:	83 c4 20             	add    esp,0x20
c00228d3:	89 c1                	mov    ecx,eax
c00228d5:	39 cd                	cmp    ebp,ecx
c00228d7:	7d 52                	jge    c002292b <SoundDevice::getAudio(int, float*, float*)+0x107>
c00228d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228dd:	50                   	push   eax
c00228de:	50                   	push   eax
c00228df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228e3:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228ea:	e8 8a 46 00 00       	call   c0026f79 <__mulsf3>
c00228ef:	5a                   	pop    edx
c00228f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228f4:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228fa:	e8 68 4a 00 00       	call   c0027367 <__floatsisf>
c00228ff:	59                   	pop    ecx
c0022900:	5a                   	pop    edx
c0022901:	50                   	push   eax
c0022902:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022906:	e8 31 48 00 00       	call   c002713c <__divsf3>
c002290b:	59                   	pop    ecx
c002290c:	5a                   	pop    edx
c002290d:	50                   	push   eax
c002290e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022912:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022915:	e8 3c 43 00 00       	call   c0026c56 <__addsf3>
c002291a:	83 c4 10             	add    esp,0x10
c002291d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022921:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022925:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022928:	45                   	inc    ebp
c0022929:	eb aa                	jmp    c00228d5 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002292b:	39 cf                	cmp    edi,ecx
c002292d:	7e 02                	jle    c0022931 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002292f:	89 cf                	mov    edi,ecx
c0022931:	43                   	inc    ebx
c0022932:	83 fb 20             	cmp    ebx,0x20
c0022935:	0f 85 10 ff ff ff    	jne    c002284b <SoundDevice::getAudio(int, float*, float*)+0x27>
c002293b:	83 c4 1c             	add    esp,0x1c
c002293e:	89 f8                	mov    eax,edi
c0022940:	5b                   	pop    ebx
c0022941:	5e                   	pop    esi
c0022942:	5f                   	pop    edi
c0022943:	5d                   	pop    ebp
c0022944:	c3                   	ret    
c0022945:	90                   	nop

c0022946 <PCI::open(int, int, void*)>:
c0022946:	83 ec 18             	sub    esp,0x18
c0022949:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002294d:	8b 10                	mov    edx,DWORD PTR [eax]
c002294f:	50                   	push   eax
c0022950:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022953:	31 c0                	xor    eax,eax
c0022955:	83 c4 1c             	add    esp,0x1c
c0022958:	c3                   	ret    
c0022959:	90                   	nop

c002295a <PCI::close(int, int, void*)>:
c002295a:	31 c0                	xor    eax,eax
c002295c:	c3                   	ret    
c002295d:	90                   	nop

c002295e <PCI::PCI()>:
c002295e:	83 ec 0c             	sub    esp,0xc
c0022961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022965:	83 ec 08             	sub    esp,0x8
c0022968:	68 d8 ca 02 c0       	push   0xc002cad8
c002296d:	50                   	push   eax
c002296e:	e8 df 12 ff ff       	call   c0013c52 <Bus::Bus(char const*)>
c0022973:	83 c4 10             	add    esp,0x10
c0022976:	ba 44 cb 02 c0       	mov    edx,0xc002cb44
c002297b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297f:	89 10                	mov    DWORD PTR [eax],edx
c0022981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022985:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002298b:	0f b6 d0             	movzx  edx,al
c002298e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022992:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229a3:	0f b6 d0             	movzx  edx,al
c00229a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229aa:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229b9:	8d 50 01             	lea    edx,[eax+0x1]
c00229bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229c0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229c6:	0f b6 d0             	movzx  edx,al
c00229c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229d1:	83 c9 c0             	or     ecx,0xffffffc0
c00229d4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229d8:	90                   	nop
c00229d9:	83 c4 0c             	add    esp,0xc
c00229dc:	c3                   	ret    
c00229dd:	90                   	nop

c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229e7:	89 ca                	mov    edx,ecx
c00229e9:	c1 e0 10             	shl    eax,0x10
c00229ec:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229f2:	09 d0                	or     eax,edx
c00229f4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229f9:	c1 e2 08             	shl    edx,0x8
c00229fc:	09 d0                	or     eax,edx
c00229fe:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a03:	c1 e2 0b             	shl    edx,0xb
c0022a06:	09 d0                	or     eax,edx
c0022a08:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a0d:	0d 00 00 00 80       	or     eax,0x80000000
c0022a12:	ef                   	out    dx,eax
c0022a13:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a18:	ed                   	in     eax,dx
c0022a19:	83 e1 02             	and    ecx,0x2
c0022a1c:	0f b6 c9             	movzx  ecx,cl
c0022a1f:	c1 e1 03             	shl    ecx,0x3
c0022a22:	d3 e8                	shr    eax,cl
c0022a24:	c3                   	ret    
c0022a25:	90                   	nop

c0022a26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a26:	6a 00                	push   0x0
c0022a28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2d:	50                   	push   eax
c0022a2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a33:	50                   	push   eax
c0022a34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a39:	50                   	push   eax
c0022a3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3e:	e8 9b ff ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a43:	83 c4 14             	add    esp,0x14
c0022a46:	c3                   	ret    
c0022a47:	90                   	nop

c0022a48 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a48:	6a 0e                	push   0xe
c0022a4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4f:	50                   	push   eax
c0022a50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a55:	50                   	push   eax
c0022a56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5b:	50                   	push   eax
c0022a5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a60:	e8 79 ff ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a65:	83 c4 14             	add    esp,0x14
c0022a68:	0f b6 c0             	movzx  eax,al
c0022a6b:	c3                   	ret    

c0022a6c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a6c:	55                   	push   ebp
c0022a6d:	57                   	push   edi
c0022a6e:	56                   	push   esi
c0022a6f:	53                   	push   ebx
c0022a70:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a75:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a7a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a7f:	6a 0a                	push   0xa
c0022a81:	56                   	push   esi
c0022a82:	55                   	push   ebp
c0022a83:	57                   	push   edi
c0022a84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a88:	e8 51 ff ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a8d:	6a 0a                	push   0xa
c0022a8f:	89 c3                	mov    ebx,eax
c0022a91:	56                   	push   esi
c0022a92:	0f b6 db             	movzx  ebx,bl
c0022a95:	55                   	push   ebp
c0022a96:	57                   	push   edi
c0022a97:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a9b:	e8 3e ff ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa0:	83 c4 28             	add    esp,0x28
c0022aa3:	25 00 ff 00 00       	and    eax,0xff00
c0022aa8:	09 d8                	or     eax,ebx
c0022aaa:	5b                   	pop    ebx
c0022aab:	5e                   	pop    esi
c0022aac:	5f                   	pop    edi
c0022aad:	5d                   	pop    ebp
c0022aae:	c3                   	ret    
c0022aaf:	90                   	nop

c0022ab0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022ab0:	6a 08                	push   0x8
c0022ab2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab7:	50                   	push   eax
c0022ab8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abd:	50                   	push   eax
c0022abe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac3:	50                   	push   eax
c0022ac4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac8:	e8 11 ff ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022acd:	83 c4 14             	add    esp,0x14
c0022ad0:	0f b6 c4             	movzx  eax,ah
c0022ad3:	c3                   	ret    

c0022ad4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022ad4:	6a 08                	push   0x8
c0022ad6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022adb:	50                   	push   eax
c0022adc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae1:	50                   	push   eax
c0022ae2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae7:	50                   	push   eax
c0022ae8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aec:	e8 ed fe ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af1:	83 c4 14             	add    esp,0x14
c0022af4:	c3                   	ret    
c0022af5:	90                   	nop

c0022af6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022af6:	6a 3c                	push   0x3c
c0022af8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afd:	50                   	push   eax
c0022afe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b03:	50                   	push   eax
c0022b04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b09:	50                   	push   eax
c0022b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b0e:	e8 cb fe ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b13:	83 c4 14             	add    esp,0x14
c0022b16:	c3                   	ret    
c0022b17:	90                   	nop

c0022b18 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b18:	6a 18                	push   0x18
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b25:	50                   	push   eax
c0022b26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b2b:	50                   	push   eax
c0022b2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b30:	e8 a9 fe ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b35:	83 c4 14             	add    esp,0x14
c0022b38:	0f b6 c4             	movzx  eax,ah
c0022b3b:	c3                   	ret    

c0022b3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b3c:	55                   	push   ebp
c0022b3d:	57                   	push   edi
c0022b3e:	56                   	push   esi
c0022b3f:	53                   	push   ebx
c0022b40:	50                   	push   eax
c0022b41:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b45:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b4a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b4f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b54:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b5b:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b5e:	83 c3 10             	add    ebx,0x10
c0022b61:	0f b6 c0             	movzx  eax,al
c0022b64:	0f b6 db             	movzx  ebx,bl
c0022b67:	50                   	push   eax
c0022b68:	51                   	push   ecx
c0022b69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b6d:	57                   	push   edi
c0022b6e:	55                   	push   ebp
c0022b6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b73:	e8 66 fe ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b78:	53                   	push   ebx
c0022b79:	89 c6                	mov    esi,eax
c0022b7b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b7f:	c1 e6 10             	shl    esi,0x10
c0022b82:	51                   	push   ecx
c0022b83:	57                   	push   edi
c0022b84:	55                   	push   ebp
c0022b85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b89:	e8 50 fe ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b8e:	83 c4 2c             	add    esp,0x2c
c0022b91:	0f b7 c0             	movzx  eax,ax
c0022b94:	5b                   	pop    ebx
c0022b95:	09 f0                	or     eax,esi
c0022b97:	5e                   	pop    esi
c0022b98:	5f                   	pop    edi
c0022b99:	5d                   	pop    ebp
c0022b9a:	c3                   	ret    
c0022b9b:	90                   	nop

c0022b9c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b9c:	53                   	push   ebx
c0022b9d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ba2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022ba7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022bab:	c1 e1 10             	shl    ecx,0x10
c0022bae:	25 fc 00 00 00       	and    eax,0xfc
c0022bb3:	09 c1                	or     ecx,eax
c0022bb5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bba:	c1 e0 08             	shl    eax,0x8
c0022bbd:	09 c1                	or     ecx,eax
c0022bbf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bc4:	c1 e0 0b             	shl    eax,0xb
c0022bc7:	09 c1                	or     ecx,eax
c0022bc9:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022bcf:	89 c8                	mov    eax,ecx
c0022bd1:	ef                   	out    dx,eax
c0022bd2:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bd7:	ed                   	in     eax,dx
c0022bd8:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022bdd:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022be2:	74 0a                	je     c0022bee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022be4:	0f b7 d8             	movzx  ebx,ax
c0022be7:	89 d0                	mov    eax,edx
c0022be9:	c1 e0 10             	shl    eax,0x10
c0022bec:	eb 05                	jmp    c0022bf3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022bee:	66 31 c0             	xor    ax,ax
c0022bf1:	89 d3                	mov    ebx,edx
c0022bf3:	09 c3                	or     ebx,eax
c0022bf5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bfa:	89 c8                	mov    eax,ecx
c0022bfc:	ef                   	out    dx,eax
c0022bfd:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c02:	89 d8                	mov    eax,ebx
c0022c04:	ef                   	out    dx,eax
c0022c05:	5b                   	pop    ebx
c0022c06:	c3                   	ret    
c0022c07:	90                   	nop

c0022c08 <PCI::checkBus(unsigned char)>:
c0022c08:	56                   	push   esi
c0022c09:	53                   	push   ebx
c0022c0a:	31 db                	xor    ebx,ebx
c0022c0c:	51                   	push   ecx
c0022c0d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c12:	52                   	push   edx
c0022c13:	53                   	push   ebx
c0022c14:	43                   	inc    ebx
c0022c15:	56                   	push   esi
c0022c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c1a:	e8 2b 03 00 00       	call   c0022f4a <PCI::checkDevice(unsigned char, unsigned char)>
c0022c1f:	83 c4 10             	add    esp,0x10
c0022c22:	83 fb 20             	cmp    ebx,0x20
c0022c25:	75 eb                	jne    c0022c12 <PCI::checkBus(unsigned char)+0xa>
c0022c27:	58                   	pop    eax
c0022c28:	5b                   	pop    ebx
c0022c29:	5e                   	pop    esi
c0022c2a:	c3                   	ret    
c0022c2b:	90                   	nop

c0022c2c <PCI::foundDevice(PCIDeviceInfo)>:
c0022c2c:	55                   	push   ebp
c0022c2d:	57                   	push   edi
c0022c2e:	56                   	push   esi
c0022c2f:	53                   	push   ebx
c0022c30:	83 ec 1c             	sub    esp,0x1c
c0022c33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c37:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c3d:	0f 84 52 01 00 00    	je     c0022d95 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c43:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c47:	66 81 f9 06 04       	cmp    cx,0x406
c0022c4c:	75 2c                	jne    c0022c7a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c4e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c53:	50                   	push   eax
c0022c54:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c59:	50                   	push   eax
c0022c5a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c5f:	50                   	push   eax
c0022c60:	56                   	push   esi
c0022c61:	e8 b2 fe ff ff       	call   c0022b18 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c66:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c6a:	0f b6 c0             	movzx  eax,al
c0022c6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c71:	83 c4 2c             	add    esp,0x2c
c0022c74:	5b                   	pop    ebx
c0022c75:	5e                   	pop    esi
c0022c76:	5f                   	pop    edi
c0022c77:	5d                   	pop    ebp
c0022c78:	eb 8e                	jmp    c0022c08 <PCI::checkBus(unsigned char)>
c0022c7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c7e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c8c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c90:	88 d3                	mov    bl,dl
c0022c92:	85 c0                	test   eax,eax
c0022c94:	74 33                	je     c0022cc9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c99:	85 d2                	test   edx,edx
c0022c9b:	74 28                	je     c0022cc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c9d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022ca3:	31 ef                	xor    edi,ebp
c0022ca5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022cab:	75 18                	jne    c0022cc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022cb1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cb7:	75 0c                	jne    c0022cc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cb9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cbf:	0f 84 d0 00 00 00    	je     c0022d95 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cc7:	eb c9                	jmp    c0022c92 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022cc9:	66 81 f9 01 06       	cmp    cx,0x601
c0022cce:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022cd2:	75 19                	jne    c0022ced <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022cd4:	83 ec 0c             	sub    esp,0xc
c0022cd7:	68 64 01 00 00       	push   0x164
c0022cdc:	e8 62 cb fe ff       	call   c000f843 <malloc>
c0022ce1:	89 c5                	mov    ebp,eax
c0022ce3:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ce6:	e8 95 0f 00 00       	call   c0023c80 <SATABus::SATABus()>
c0022ceb:	eb 1e                	jmp    c0022d0b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022ced:	66 81 f9 01 01       	cmp    cx,0x101
c0022cf2:	75 60                	jne    c0022d54 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cf4:	83 ec 0c             	sub    esp,0xc
c0022cf7:	68 70 02 00 00       	push   0x270
c0022cfc:	e8 42 cb fe ff       	call   c000f843 <malloc>
c0022d01:	89 c5                	mov    ebp,eax
c0022d03:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d06:	e8 03 03 00 00       	call   c002300e <IDE::IDE()>
c0022d0b:	58                   	pop    eax
c0022d0c:	5a                   	pop    edx
c0022d0d:	55                   	push   ebp
c0022d0e:	56                   	push   esi
c0022d0f:	e8 ca 16 ff ff       	call   c00143de <Device::addChild(Device*)>
c0022d14:	83 ec 1c             	sub    esp,0x1c
c0022d17:	b9 09 00 00 00       	mov    ecx,0x9
c0022d1c:	fc                   	cld    
c0022d1d:	89 e7                	mov    edi,esp
c0022d1f:	89 de                	mov    esi,ebx
c0022d21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d23:	55                   	push   ebp
c0022d24:	e8 bf 15 ff ff       	call   c00142e8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d2c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d30:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d38:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d40:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d4b:	83 c4 4c             	add    esp,0x4c
c0022d4e:	5b                   	pop    ebx
c0022d4f:	5e                   	pop    esi
c0022d50:	5f                   	pop    edi
c0022d51:	5d                   	pop    ebp
c0022d52:	ff e0                	jmp    eax
c0022d54:	83 ec 0c             	sub    esp,0xc
c0022d57:	68 58 01 00 00       	push   0x158
c0022d5c:	e8 e2 ca fe ff       	call   c000f843 <malloc>
c0022d61:	89 c5                	mov    ebp,eax
c0022d63:	58                   	pop    eax
c0022d64:	5a                   	pop    edx
c0022d65:	68 e0 ca 02 c0       	push   0xc002cae0
c0022d6a:	55                   	push   ebp
c0022d6b:	e8 64 19 ff ff       	call   c00146d4 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d70:	59                   	pop    ecx
c0022d71:	5f                   	pop    edi
c0022d72:	55                   	push   ebp
c0022d73:	56                   	push   esi
c0022d74:	e8 65 16 ff ff       	call   c00143de <Device::addChild(Device*)>
c0022d79:	b9 09 00 00 00       	mov    ecx,0x9
c0022d7e:	fc                   	cld    
c0022d7f:	89 df                	mov    edi,ebx
c0022d81:	89 de                	mov    esi,ebx
c0022d83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d85:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d89:	83 c4 2c             	add    esp,0x2c
c0022d8c:	5b                   	pop    ebx
c0022d8d:	5e                   	pop    esi
c0022d8e:	5f                   	pop    edi
c0022d8f:	5d                   	pop    ebp
c0022d90:	e9 53 15 ff ff       	jmp    c00142e8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d95:	83 c4 1c             	add    esp,0x1c
c0022d98:	5b                   	pop    ebx
c0022d99:	5e                   	pop    esi
c0022d9a:	5f                   	pop    edi
c0022d9b:	5d                   	pop    ebp
c0022d9c:	c3                   	ret    
c0022d9d:	90                   	nop

c0022d9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d9e:	55                   	push   ebp
c0022d9f:	57                   	push   edi
c0022da0:	56                   	push   esi
c0022da1:	53                   	push   ebx
c0022da2:	83 ec 5c             	sub    esp,0x5c
c0022da5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022da9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022dad:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022db1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022db6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022dba:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022dbe:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022dc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022dc7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022dcc:	6a 0c                	push   0xc
c0022dce:	55                   	push   ebp
c0022dcf:	53                   	push   ebx
c0022dd0:	57                   	push   edi
c0022dd1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022dd8:	e8 01 fc ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ddd:	55                   	push   ebp
c0022dde:	53                   	push   ebx
c0022ddf:	57                   	push   edi
c0022de0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022de7:	e8 80 fc ff ff       	call   c0022a6c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022dec:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022df1:	83 c4 24             	add    esp,0x24
c0022df4:	55                   	push   ebp
c0022df5:	53                   	push   ebx
c0022df6:	57                   	push   edi
c0022df7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022dfb:	e8 f6 fc ff ff       	call   c0022af6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e00:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e04:	6a 3c                	push   0x3c
c0022e06:	55                   	push   ebp
c0022e07:	53                   	push   ebx
c0022e08:	57                   	push   edi
c0022e09:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e10:	e8 c9 fb ff ff       	call   c00229de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e15:	0f b6 c4             	movzx  eax,ah
c0022e18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e1c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e20:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e24:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0022e29:	83 c4 24             	add    esp,0x24
c0022e2c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e32:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e39:	74 6c                	je     c0022ea7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e3b:	31 f6                	xor    esi,esi
c0022e3d:	8b 15 e8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e8
c0022e43:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e49:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e4f:	7e 56                	jle    c0022ea7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e51:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e54:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e5b:	39 cb                	cmp    ebx,ecx
c0022e5d:	75 45                	jne    c0022ea4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e5f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e66:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e6a:	75 38                	jne    c0022ea4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e6c:	83 ec 0c             	sub    esp,0xc
c0022e6f:	68 fa ca 02 c0       	push   0xc002cafa
c0022e74:	e8 3e 01 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0022e79:	8b 15 e8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e8
c0022e7f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e85:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e8d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e91:	52                   	push   edx
c0022e92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e96:	53                   	push   ebx
c0022e97:	68 1f cb 02 c0       	push   0xc002cb1f
c0022e9c:	e8 16 01 ff ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0022ea1:	83 c4 20             	add    esp,0x20
c0022ea4:	46                   	inc    esi
c0022ea5:	eb 96                	jmp    c0022e3d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ea7:	31 d2                	xor    edx,edx
c0022ea9:	83 ec 0c             	sub    esp,0xc
c0022eac:	55                   	push   ebp
c0022ead:	53                   	push   ebx
c0022eae:	57                   	push   edi
c0022eaf:	52                   	push   edx
c0022eb0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022eb4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ebb:	e8 7c fc ff ff       	call   c0022b3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ec0:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022ec4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ec8:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ecc:	42                   	inc    edx
c0022ecd:	83 c4 20             	add    esp,0x20
c0022ed0:	83 fa 06             	cmp    edx,0x6
c0022ed3:	75 d4                	jne    c0022ea9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022ed5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022ed9:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022edd:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ee1:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022ee5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022ee9:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022eed:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022ef2:	86 e0                	xchg   al,ah
c0022ef4:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ef9:	55                   	push   ebp
c0022efa:	53                   	push   ebx
c0022efb:	57                   	push   edi
c0022efc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f00:	e8 ab fb ff ff       	call   c0022ab0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f05:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f09:	55                   	push   ebp
c0022f0a:	53                   	push   ebx
c0022f0b:	57                   	push   edi
c0022f0c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f13:	e8 0e fb ff ff       	call   c0022a26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f18:	83 ec 0c             	sub    esp,0xc
c0022f1b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f20:	b9 09 00 00 00       	mov    ecx,0x9
c0022f25:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f29:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f2d:	fc                   	cld    
c0022f2e:	89 e7                	mov    edi,esp
c0022f30:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f32:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f39:	e8 ee fc ff ff       	call   c0022c2c <PCI::foundDevice(PCIDeviceInfo)>
c0022f3e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f44:	5b                   	pop    ebx
c0022f45:	5e                   	pop    esi
c0022f46:	5f                   	pop    edi
c0022f47:	5d                   	pop    ebp
c0022f48:	c3                   	ret    
c0022f49:	90                   	nop

c0022f4a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f4a:	55                   	push   ebp
c0022f4b:	57                   	push   edi
c0022f4c:	56                   	push   esi
c0022f4d:	53                   	push   ebx
c0022f4e:	83 ec 0c             	sub    esp,0xc
c0022f51:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f55:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f5a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f5f:	6a 00                	push   0x0
c0022f61:	56                   	push   esi
c0022f62:	57                   	push   edi
c0022f63:	55                   	push   ebp
c0022f64:	e8 bd fa ff ff       	call   c0022a26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f69:	6a 00                	push   0x0
c0022f6b:	56                   	push   esi
c0022f6c:	57                   	push   edi
c0022f6d:	55                   	push   ebp
c0022f6e:	e8 2b fe ff ff       	call   c0022d9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f73:	83 c4 20             	add    esp,0x20
c0022f76:	6a 00                	push   0x0
c0022f78:	56                   	push   esi
c0022f79:	57                   	push   edi
c0022f7a:	55                   	push   ebp
c0022f7b:	e8 c8 fa ff ff       	call   c0022a48 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f80:	83 c4 10             	add    esp,0x10
c0022f83:	84 c0                	test   al,al
c0022f85:	79 27                	jns    c0022fae <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f87:	bb 01 00 00 00       	mov    ebx,0x1
c0022f8c:	53                   	push   ebx
c0022f8d:	56                   	push   esi
c0022f8e:	57                   	push   edi
c0022f8f:	55                   	push   ebp
c0022f90:	e8 91 fa ff ff       	call   c0022a26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f95:	83 c4 10             	add    esp,0x10
c0022f98:	66 40                	inc    ax
c0022f9a:	74 0c                	je     c0022fa8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f9c:	53                   	push   ebx
c0022f9d:	56                   	push   esi
c0022f9e:	57                   	push   edi
c0022f9f:	55                   	push   ebp
c0022fa0:	e8 f9 fd ff ff       	call   c0022d9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fa5:	83 c4 10             	add    esp,0x10
c0022fa8:	43                   	inc    ebx
c0022fa9:	83 fb 08             	cmp    ebx,0x8
c0022fac:	75 de                	jne    c0022f8c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fae:	83 c4 0c             	add    esp,0xc
c0022fb1:	5b                   	pop    ebx
c0022fb2:	5e                   	pop    esi
c0022fb3:	5f                   	pop    edi
c0022fb4:	5d                   	pop    ebp
c0022fb5:	c3                   	ret    

c0022fb6 <PCI::detect()>:
c0022fb6:	56                   	push   esi
c0022fb7:	53                   	push   ebx
c0022fb8:	53                   	push   ebx
c0022fb9:	31 db                	xor    ebx,ebx
c0022fbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fbf:	6a 00                	push   0x0
c0022fc1:	6a 00                	push   0x0
c0022fc3:	6a 00                	push   0x0
c0022fc5:	56                   	push   esi
c0022fc6:	e8 7d fa ff ff       	call   c0022a48 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fcb:	83 c4 10             	add    esp,0x10
c0022fce:	a8 80                	test   al,0x80
c0022fd0:	75 21                	jne    c0022ff3 <PCI::detect()+0x3d>
c0022fd2:	51                   	push   ecx
c0022fd3:	51                   	push   ecx
c0022fd4:	6a 00                	push   0x0
c0022fd6:	56                   	push   esi
c0022fd7:	e8 2c fc ff ff       	call   c0022c08 <PCI::checkBus(unsigned char)>
c0022fdc:	83 c4 10             	add    esp,0x10
c0022fdf:	eb 24                	jmp    c0023005 <PCI::detect()+0x4f>
c0022fe1:	52                   	push   edx
c0022fe2:	52                   	push   edx
c0022fe3:	53                   	push   ebx
c0022fe4:	43                   	inc    ebx
c0022fe5:	56                   	push   esi
c0022fe6:	e8 1d fc ff ff       	call   c0022c08 <PCI::checkBus(unsigned char)>
c0022feb:	83 c4 10             	add    esp,0x10
c0022fee:	83 fb 08             	cmp    ebx,0x8
c0022ff1:	74 12                	je     c0023005 <PCI::detect()+0x4f>
c0022ff3:	53                   	push   ebx
c0022ff4:	6a 00                	push   0x0
c0022ff6:	6a 00                	push   0x0
c0022ff8:	56                   	push   esi
c0022ff9:	e8 28 fa ff ff       	call   c0022a26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ffe:	83 c4 10             	add    esp,0x10
c0023001:	66 40                	inc    ax
c0023003:	74 dc                	je     c0022fe1 <PCI::detect()+0x2b>
c0023005:	58                   	pop    eax
c0023006:	5b                   	pop    ebx
c0023007:	5e                   	pop    esi
c0023008:	c3                   	ret    
c0023009:	90                   	nop

c002300a <IDE::close(int, int, void*)>:
c002300a:	83 c8 ff             	or     eax,0xffffffff
c002300d:	c3                   	ret    

c002300e <IDE::IDE()>:
c002300e:	83 ec 0c             	sub    esp,0xc
c0023011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023015:	83 ec 08             	sub    esp,0x8
c0023018:	68 68 cb 02 c0       	push   0xc002cb68
c002301d:	50                   	push   eax
c002301e:	e8 47 17 ff ff       	call   c001476a <HardDiskController::HardDiskController(char const*)>
c0023023:	83 c4 10             	add    esp,0x10
c0023026:	ba a8 cd 02 c0       	mov    edx,0xc002cda8
c002302b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302f:	89 10                	mov    DWORD PTR [eax],edx
c0023031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023035:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002303c:	90                   	nop
c002303d:	83 c4 0c             	add    esp,0xc
c0023040:	c3                   	ret    
c0023041:	90                   	nop

c0023042 <IDE::prepareInterrupt(unsigned char)>:
c0023042:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023047:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002304b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023053:	c3                   	ret    

c0023054 <selectDrive(unsigned char, unsigned char)>:
c0023054:	c3                   	ret    
c0023055:	90                   	nop

c0023056 <IDE::getBase(unsigned char)>:
c0023056:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002305b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002305f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023067:	c3                   	ret    

c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023068:	55                   	push   ebp
c0023069:	57                   	push   edi
c002306a:	56                   	push   esi
c002306b:	53                   	push   ebx
c002306c:	83 ec 1c             	sub    esp,0x1c
c002306f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023073:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023077:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002307a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002307e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023082:	80 f9 03             	cmp    cl,0x3
c0023085:	77 51                	ja     c00230d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023087:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002308b:	0f b6 f2             	movzx  esi,dl
c002308e:	0f b6 db             	movzx  ebx,bl
c0023091:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023094:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023098:	83 ca 80             	or     edx,0xffffff80
c002309b:	0f b6 d2             	movzx  edx,dl
c002309e:	52                   	push   edx
c002309f:	6a 0c                	push   0xc
c00230a1:	56                   	push   esi
c00230a2:	57                   	push   edi
c00230a3:	e8 c0 ff ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230a8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230b1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230b5:	ee                   	out    dx,al
c00230b6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230bb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230bf:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230c3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230c7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230cf:	83 c4 2c             	add    esp,0x2c
c00230d2:	5b                   	pop    ebx
c00230d3:	5e                   	pop    esi
c00230d4:	5f                   	pop    edi
c00230d5:	5d                   	pop    ebp
c00230d6:	eb 90                	jmp    c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230d8:	80 fb 07             	cmp    bl,0x7
c00230db:	77 12                	ja     c00230ef <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230dd:	0f b6 d2             	movzx  edx,dl
c00230e0:	0f b6 db             	movzx  ebx,bl
c00230e3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230eb:	89 da                	mov    edx,ebx
c00230ed:	eb 2f                	jmp    c002311e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230ef:	80 fb 0d             	cmp    bl,0xd
c00230f2:	77 13                	ja     c0023107 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230f4:	0f b6 d2             	movzx  edx,dl
c00230f7:	0f b6 db             	movzx  ebx,bl
c00230fa:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023101:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023105:	eb 17                	jmp    c002311e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023107:	80 fb 15             	cmp    bl,0x15
c002310a:	77 13                	ja     c002311f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002310c:	0f b6 d2             	movzx  edx,dl
c002310f:	0f b6 db             	movzx  ebx,bl
c0023112:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002311a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002311e:	ee                   	out    dx,al
c002311f:	83 c4 1c             	add    esp,0x1c
c0023122:	5b                   	pop    ebx
c0023123:	5e                   	pop    esi
c0023124:	5f                   	pop    edi
c0023125:	5d                   	pop    ebp
c0023126:	c3                   	ret    
c0023127:	90                   	nop

c0023128 <IDE::read(unsigned char, unsigned char)>:
c0023128:	55                   	push   ebp
c0023129:	57                   	push   edi
c002312a:	56                   	push   esi
c002312b:	53                   	push   ebx
c002312c:	83 ec 1c             	sub    esp,0x1c
c002312f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023133:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023137:	8d 43 f8             	lea    eax,[ebx-0x8]
c002313a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002313e:	3c 03                	cmp    al,0x3
c0023140:	77 43                	ja     c0023185 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023142:	0f b6 f2             	movzx  esi,dl
c0023145:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023148:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002314c:	83 c8 80             	or     eax,0xffffff80
c002314f:	0f b6 c0             	movzx  eax,al
c0023152:	50                   	push   eax
c0023153:	6a 0c                	push   0xc
c0023155:	56                   	push   esi
c0023156:	57                   	push   edi
c0023157:	e8 0c ff ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002315c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023161:	0f b6 c3             	movzx  eax,bl
c0023164:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023168:	ec                   	in     al,dx
c0023169:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002316d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023172:	52                   	push   edx
c0023173:	6a 0c                	push   0xc
c0023175:	56                   	push   esi
c0023176:	57                   	push   edi
c0023177:	e8 ec fe ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002317c:	83 c4 20             	add    esp,0x20
c002317f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023183:	eb 49                	jmp    c00231ce <IDE::read(unsigned char, unsigned char)+0xa6>
c0023185:	80 fb 07             	cmp    bl,0x7
c0023188:	77 12                	ja     c002319c <IDE::read(unsigned char, unsigned char)+0x74>
c002318a:	0f b6 d2             	movzx  edx,dl
c002318d:	0f b6 c3             	movzx  eax,bl
c0023190:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023198:	89 c2                	mov    edx,eax
c002319a:	eb 31                	jmp    c00231cd <IDE::read(unsigned char, unsigned char)+0xa5>
c002319c:	80 fb 0d             	cmp    bl,0xd
c002319f:	77 13                	ja     c00231b4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00231a1:	0f b6 d2             	movzx  edx,dl
c00231a4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231ab:	0f b6 d3             	movzx  edx,bl
c00231ae:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231b2:	eb 19                	jmp    c00231cd <IDE::read(unsigned char, unsigned char)+0xa5>
c00231b4:	31 c0                	xor    eax,eax
c00231b6:	80 fb 15             	cmp    bl,0x15
c00231b9:	77 13                	ja     c00231ce <IDE::read(unsigned char, unsigned char)+0xa6>
c00231bb:	0f b6 d2             	movzx  edx,dl
c00231be:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231c6:	0f b6 d3             	movzx  edx,bl
c00231c9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231cd:	ec                   	in     al,dx
c00231ce:	83 c4 1c             	add    esp,0x1c
c00231d1:	5b                   	pop    ebx
c00231d2:	5e                   	pop    esi
c00231d3:	5f                   	pop    edi
c00231d4:	5d                   	pop    ebp
c00231d5:	c3                   	ret    

c00231d6 <IDE::waitInterrupt(unsigned char)>:
c00231d6:	55                   	push   ebp
c00231d7:	57                   	push   edi
c00231d8:	56                   	push   esi
c00231d9:	53                   	push   ebx
c00231da:	31 db                	xor    ebx,ebx
c00231dc:	83 ec 0c             	sub    esp,0xc
c00231df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231e3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231e8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231f0:	89 e8                	mov    eax,ebp
c00231f2:	84 c0                	test   al,al
c00231f4:	75 34                	jne    c002322a <IDE::waitInterrupt(unsigned char)+0x54>
c00231f6:	52                   	push   edx
c00231f7:	6a 0c                	push   0xc
c00231f9:	56                   	push   esi
c00231fa:	57                   	push   edi
c00231fb:	e8 28 ff ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023200:	83 c4 10             	add    esp,0x10
c0023203:	a8 01                	test   al,0x1
c0023205:	75 2b                	jne    c0023232 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023207:	f6 c3 04             	test   bl,0x4
c002320a:	75 16                	jne    c0023222 <IDE::waitInterrupt(unsigned char)+0x4c>
c002320c:	83 fb 32             	cmp    ebx,0x32
c002320f:	7e 11                	jle    c0023222 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023211:	50                   	push   eax
c0023212:	50                   	push   eax
c0023213:	6a 00                	push   0x0
c0023215:	68 80 96 98 00       	push   0x989680
c002321a:	e8 8b b1 ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c002321f:	83 c4 10             	add    esp,0x10
c0023222:	83 fb 3c             	cmp    ebx,0x3c
c0023225:	74 0b                	je     c0023232 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023227:	43                   	inc    ebx
c0023228:	eb be                	jmp    c00231e8 <IDE::waitInterrupt(unsigned char)+0x12>
c002322a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023232:	83 c4 0c             	add    esp,0xc
c0023235:	89 e8                	mov    eax,ebp
c0023237:	5b                   	pop    ebx
c0023238:	5e                   	pop    esi
c0023239:	5f                   	pop    edi
c002323a:	5d                   	pop    ebp
c002323b:	c3                   	ret    

c002323c <ideChannel0IRQHandler(regs*, void*)>:
c002323c:	83 ec 10             	sub    esp,0x10
c002323f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023243:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002324a:	6a 07                	push   0x7
c002324c:	6a 00                	push   0x0
c002324e:	50                   	push   eax
c002324f:	e8 d4 fe ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023254:	83 c4 1c             	add    esp,0x1c
c0023257:	c3                   	ret    

c0023258 <ideChannel1IRQHandler(regs*, void*)>:
c0023258:	83 ec 10             	sub    esp,0x10
c002325b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002325f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023266:	6a 07                	push   0x7
c0023268:	6a 01                	push   0x1
c002326a:	50                   	push   eax
c002326b:	e8 b8 fe ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023270:	83 c4 1c             	add    esp,0x1c
c0023273:	c3                   	ret    

c0023274 <IDE::enableIRQs(unsigned char, bool)>:
c0023274:	57                   	push   edi
c0023275:	56                   	push   esi
c0023276:	be 04 00 00 00       	mov    esi,0x4
c002327b:	53                   	push   ebx
c002327c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023281:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023285:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002328a:	0f 94 c0             	sete   al
c002328d:	d1 e0                	shl    eax,1
c002328f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023296:	0f b6 c0             	movzx  eax,al
c0023299:	50                   	push   eax
c002329a:	6a 0c                	push   0xc
c002329c:	57                   	push   edi
c002329d:	53                   	push   ebx
c002329e:	e8 c5 fd ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232a3:	83 c4 10             	add    esp,0x10
c00232a6:	50                   	push   eax
c00232a7:	6a 0c                	push   0xc
c00232a9:	57                   	push   edi
c00232aa:	53                   	push   ebx
c00232ab:	e8 78 fe ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c00232b0:	83 c4 10             	add    esp,0x10
c00232b3:	4e                   	dec    esi
c00232b4:	75 f0                	jne    c00232a6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232b6:	5b                   	pop    ebx
c00232b7:	5e                   	pop    esi
c00232b8:	5f                   	pop    edi
c00232b9:	c3                   	ret    

c00232ba <IDE::open(int, int, void*)>:
c00232ba:	55                   	push   ebp
c00232bb:	57                   	push   edi
c00232bc:	56                   	push   esi
c00232bd:	53                   	push   ebx
c00232be:	83 ec 1c             	sub    esp,0x1c
c00232c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232c5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232ce:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232d7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232de:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232e5:	0f 85 b0 02 00 00    	jne    c002359b <IDE::open(int, int, void*)+0x2e1>
c00232eb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232f1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232f5:	83 e0 7f             	and    eax,0x7f
c00232f8:	3c 05                	cmp    al,0x5
c00232fa:	74 04                	je     c0023300 <IDE::open(int, int, void*)+0x46>
c00232fc:	3c 0f                	cmp    al,0xf
c00232fe:	75 32                	jne    c0023332 <IDE::open(int, int, void*)+0x78>
c0023300:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023306:	83 e0 fc             	and    eax,0xfffffffc
c0023309:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023310:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023316:	83 e0 fc             	and    eax,0xfffffffc
c0023319:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023320:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023326:	83 e0 fc             	and    eax,0xfffffffc
c0023329:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023330:	eb 14                	jmp    c0023346 <IDE::open(int, int, void*)+0x8c>
c0023332:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002333c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023346:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002334d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023354:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023358:	89 c6                	mov    esi,eax
c002335a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002335f:	c1 e6 10             	shl    esi,0x10
c0023362:	89 e8                	mov    eax,ebp
c0023364:	89 fa                	mov    edx,edi
c0023366:	c1 e0 0b             	shl    eax,0xb
c0023369:	09 f0                	or     eax,esi
c002336b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023372:	c1 e6 08             	shl    esi,0x8
c0023375:	09 c6                	or     esi,eax
c0023377:	89 f0                	mov    eax,esi
c0023379:	0d 08 00 00 80       	or     eax,0x80000008
c002337e:	ef                   	out    dx,eax
c002337f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023384:	89 ca                	mov    edx,ecx
c0023386:	ed                   	in     eax,dx
c0023387:	c1 e8 10             	shr    eax,0x10
c002338a:	3d ff ff 00 00       	cmp    eax,0xffff
c002338f:	0f 84 f5 00 00 00    	je     c002348a <IDE::open(int, int, void*)+0x1d0>
c0023395:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002339b:	89 fa                	mov    edx,edi
c002339d:	89 f0                	mov    eax,esi
c002339f:	ef                   	out    dx,eax
c00233a0:	b0 fe                	mov    al,0xfe
c00233a2:	89 ca                	mov    edx,ecx
c00233a4:	ee                   	out    dx,al
c00233a5:	89 f0                	mov    eax,esi
c00233a7:	89 fa                	mov    edx,edi
c00233a9:	ef                   	out    dx,eax
c00233aa:	89 ca                	mov    edx,ecx
c00233ac:	ed                   	in     eax,dx
c00233ad:	3c fe                	cmp    al,0xfe
c00233af:	0f 85 a9 00 00 00    	jne    c002345e <IDE::open(int, int, void*)+0x1a4>
c00233b5:	8b 15 e8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e8
c00233bb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233c2:	74 33                	je     c00233f7 <IDE::open(int, int, void*)+0x13d>
c00233c4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233ca:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233ce:	40                   	inc    eax
c00233cf:	83 ec 0c             	sub    esp,0xc
c00233d2:	0f b6 c0             	movzx  eax,al
c00233d5:	50                   	push   eax
c00233d6:	55                   	push   ebp
c00233d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233db:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233e1:	51                   	push   ecx
c00233e2:	e8 d7 4e ff ff       	call   c00182be <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233e7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233ec:	83 c4 1c             	add    esp,0x1c
c00233ef:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233f5:	eb 0a                	jmp    c0023401 <IDE::open(int, int, void*)+0x147>
c00233f7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023401:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023408:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002340f:	c1 e1 10             	shl    ecx,0x10
c0023412:	c1 e0 08             	shl    eax,0x8
c0023415:	bf f8 0c 00 00       	mov    edi,0xcf8
c002341a:	09 c1                	or     ecx,eax
c002341c:	89 fa                	mov    edx,edi
c002341e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023425:	c1 e0 0b             	shl    eax,0xb
c0023428:	09 c1                	or     ecx,eax
c002342a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023430:	89 c8                	mov    eax,ecx
c0023432:	ef                   	out    dx,eax
c0023433:	be fc 0c 00 00       	mov    esi,0xcfc
c0023438:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002343e:	89 f2                	mov    edx,esi
c0023440:	ee                   	out    dx,al
c0023441:	89 c8                	mov    eax,ecx
c0023443:	89 fa                	mov    edx,edi
c0023445:	ef                   	out    dx,eax
c0023446:	89 f2                	mov    edx,esi
c0023448:	ed                   	in     eax,dx
c0023449:	0f b6 c0             	movzx  eax,al
c002344c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023452:	74 46                	je     c002349a <IDE::open(int, int, void*)+0x1e0>
c0023454:	83 ec 0c             	sub    esp,0xc
c0023457:	68 80 cb 02 c0       	push   0xc002cb80
c002345c:	eb 34                	jmp    c0023492 <IDE::open(int, int, void*)+0x1d8>
c002345e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023467:	75 17                	jne    c0023480 <IDE::open(int, int, void*)+0x1c6>
c0023469:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002346e:	74 07                	je     c0023477 <IDE::open(int, int, void*)+0x1bd>
c0023470:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023475:	75 09                	jne    c0023480 <IDE::open(int, int, void*)+0x1c6>
c0023477:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002347e:	eb 1a                	jmp    c002349a <IDE::open(int, int, void*)+0x1e0>
c0023480:	83 ec 0c             	sub    esp,0xc
c0023483:	68 88 cb 02 c0       	push   0xc002cb88
c0023488:	eb 08                	jmp    c0023492 <IDE::open(int, int, void*)+0x1d8>
c002348a:	83 ec 0c             	sub    esp,0xc
c002348d:	68 b9 cb 02 c0       	push   0xc002cbb9
c0023492:	e8 ce 71 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0023497:	83 c4 10             	add    esp,0x10
c002349a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234a1:	79 1a                	jns    c00234bd <IDE::open(int, int, void*)+0x203>
c00234a3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234a9:	83 e0 fc             	and    eax,0xfffffffc
c00234ac:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234b3:	83 c0 08             	add    eax,0x8
c00234b6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234bd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234c3:	89 c2                	mov    edx,eax
c00234c5:	83 e2 0f             	and    edx,0xf
c00234c8:	66 83 fa 08          	cmp    dx,0x8
c00234cc:	75 0a                	jne    c00234d8 <IDE::open(int, int, void*)+0x21e>
c00234ce:	83 e8 02             	sub    eax,0x2
c00234d1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234d8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234de:	89 c2                	mov    edx,eax
c00234e0:	83 e2 0f             	and    edx,0xf
c00234e3:	66 83 fa 08          	cmp    dx,0x8
c00234e7:	75 0a                	jne    c00234f3 <IDE::open(int, int, void*)+0x239>
c00234e9:	83 e8 02             	sub    eax,0x2
c00234ec:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234f3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234fa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023501:	89 d0                	mov    eax,edx
c0023503:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023506:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002350a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002350e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023511:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023516:	0f b6 c9             	movzx  ecx,cl
c0023519:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023520:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023523:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023527:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002352b:	8d 50 02             	lea    edx,[eax+0x2]
c002352e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023533:	0f b6 d2             	movzx  edx,dl
c0023536:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002353c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002353f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023543:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023547:	8d 48 03             	lea    ecx,[eax+0x3]
c002354a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002354f:	0f b6 c9             	movzx  ecx,cl
c0023552:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023558:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002355b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002355f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023563:	8d 50 04             	lea    edx,[eax+0x4]
c0023566:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002356c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023571:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023578:	66 85 f6             	test   si,si
c002357b:	74 3e                	je     c00235bb <IDE::open(int, int, void*)+0x301>
c002357d:	0f b6 d2             	movzx  edx,dl
c0023580:	83 c0 05             	add    eax,0x5
c0023583:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023586:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002358a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002358e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023594:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023599:	eb 20                	jmp    c00235bb <IDE::open(int, int, void*)+0x301>
c002359b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235a5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235af:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235b6:	e9 02 ff ff ff       	jmp    c00234bd <IDE::open(int, int, void*)+0x203>
c00235bb:	52                   	push   edx
c00235bc:	52                   	push   edx
c00235bd:	6a 00                	push   0x0
c00235bf:	53                   	push   ebx
c00235c0:	e8 7d fa ff ff       	call   c0023042 <IDE::prepareInterrupt(unsigned char)>
c00235c5:	59                   	pop    ecx
c00235c6:	5e                   	pop    esi
c00235c7:	6a 01                	push   0x1
c00235c9:	53                   	push   ebx
c00235ca:	e8 73 fa ff ff       	call   c0023042 <IDE::prepareInterrupt(unsigned char)>
c00235cf:	83 c4 0c             	add    esp,0xc
c00235d2:	6a 00                	push   0x0
c00235d4:	6a 00                	push   0x0
c00235d6:	53                   	push   ebx
c00235d7:	e8 98 fc ff ff       	call   c0023274 <IDE::enableIRQs(unsigned char, bool)>
c00235dc:	83 c4 0c             	add    esp,0xc
c00235df:	6a 00                	push   0x0
c00235e1:	6a 01                	push   0x1
c00235e3:	53                   	push   ebx
c00235e4:	e8 8b fc ff ff       	call   c0023274 <IDE::enableIRQs(unsigned char, bool)>
c00235e9:	83 c4 10             	add    esp,0x10
c00235ec:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235f3:	74 40                	je     c0023635 <IDE::open(int, int, void*)+0x37b>
c00235f5:	83 ec 0c             	sub    esp,0xc
c00235f8:	68 e3 cb 02 c0       	push   0xc002cbe3
c00235fd:	e8 b5 f9 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023602:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023605:	6a 01                	push   0x1
c0023607:	68 3c 32 02 c0       	push   0xc002323c
c002360c:	6a 0e                	push   0xe
c002360e:	53                   	push   ebx
c002360f:	e8 4e 0d ff ff       	call   c0014362 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023614:	83 c4 14             	add    esp,0x14
c0023617:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002361d:	53                   	push   ebx
c002361e:	6a 01                	push   0x1
c0023620:	68 58 32 02 c0       	push   0xc0023258
c0023625:	6a 0f                	push   0xf
c0023627:	53                   	push   ebx
c0023628:	e8 35 0d ff ff       	call   c0014362 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002362d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023633:	eb 4a                	jmp    c002367f <IDE::open(int, int, void*)+0x3c5>
c0023635:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002363f:	50                   	push   eax
c0023640:	6a 0f                	push   0xf
c0023642:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023648:	68 ff cb 02 c0       	push   0xc002cbff
c002364d:	e8 65 f9 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023652:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023655:	6a 00                	push   0x0
c0023657:	68 3c 32 02 c0       	push   0xc002323c
c002365c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023662:	53                   	push   ebx
c0023663:	e8 fa 0c ff ff       	call   c0014362 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023668:	83 c4 14             	add    esp,0x14
c002366b:	53                   	push   ebx
c002366c:	6a 00                	push   0x0
c002366e:	68 58 32 02 c0       	push   0xc0023258
c0023673:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023679:	53                   	push   ebx
c002367a:	e8 e3 0c ff ff       	call   c0014362 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002367f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023681:	83 c4 20             	add    esp,0x20
c0023684:	83 ec 0c             	sub    esp,0xc
c0023687:	53                   	push   ebx
c0023688:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002368b:	83 c4 0c             	add    esp,0xc
c002368e:	6a 07                	push   0x7
c0023690:	6a 00                	push   0x0
c0023692:	53                   	push   ebx
c0023693:	e8 90 fa ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023698:	83 c4 0c             	add    esp,0xc
c002369b:	6a 07                	push   0x7
c002369d:	6a 01                	push   0x1
c002369f:	53                   	push   ebx
c00236a0:	e8 83 fa ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c00236a5:	83 c4 0c             	add    esp,0xc
c00236a8:	6a 01                	push   0x1
c00236aa:	6a 00                	push   0x0
c00236ac:	53                   	push   ebx
c00236ad:	e8 c2 fb ff ff       	call   c0023274 <IDE::enableIRQs(unsigned char, bool)>
c00236b2:	83 c4 0c             	add    esp,0xc
c00236b5:	6a 01                	push   0x1
c00236b7:	6a 01                	push   0x1
c00236b9:	53                   	push   ebx
c00236ba:	e8 b5 fb ff ff       	call   c0023274 <IDE::enableIRQs(unsigned char, bool)>
c00236bf:	83 c4 2c             	add    esp,0x2c
c00236c2:	31 c0                	xor    eax,eax
c00236c4:	5b                   	pop    ebx
c00236c5:	5e                   	pop    esi
c00236c6:	5f                   	pop    edi
c00236c7:	5d                   	pop    ebp
c00236c8:	c3                   	ret    
c00236c9:	90                   	nop

c00236ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236ca:	55                   	push   ebp
c00236cb:	57                   	push   edi
c00236cc:	56                   	push   esi
c00236cd:	53                   	push   ebx
c00236ce:	83 ec 1c             	sub    esp,0x1c
c00236d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236d9:	8d 50 f8             	lea    edx,[eax-0x8]
c00236dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236e4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236e8:	80 fa 03             	cmp    dl,0x3
c00236eb:	77 5d                	ja     c002374a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236f5:	0f b6 db             	movzx  ebx,bl
c00236f8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236fb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236ff:	83 ca 80             	or     edx,0xffffff80
c0023702:	0f b6 d2             	movzx  edx,dl
c0023705:	52                   	push   edx
c0023706:	6a 0c                	push   0xc
c0023708:	53                   	push   ebx
c0023709:	56                   	push   esi
c002370a:	e8 59 f9 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002370f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023714:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023718:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002371c:	0f b6 c0             	movzx  eax,al
c002371f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023723:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023725:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002372a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002372e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023732:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023736:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002373e:	83 c4 2c             	add    esp,0x2c
c0023741:	5b                   	pop    ebx
c0023742:	5e                   	pop    esi
c0023743:	5f                   	pop    edi
c0023744:	5d                   	pop    ebp
c0023745:	e9 1e f9 ff ff       	jmp    c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002374a:	3c 07                	cmp    al,0x7
c002374c:	77 10                	ja     c002375e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002374e:	0f b6 db             	movzx  ebx,bl
c0023751:	0f b6 d0             	movzx  edx,al
c0023754:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002375c:	eb 2d                	jmp    c002378b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002375e:	3c 0d                	cmp    al,0xd
c0023760:	77 13                	ja     c0023775 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023762:	0f b6 db             	movzx  ebx,bl
c0023765:	0f b6 c0             	movzx  eax,al
c0023768:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002376f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023773:	eb 16                	jmp    c002378b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023775:	3c 15                	cmp    al,0x15
c0023777:	77 14                	ja     c002378d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023779:	0f b6 db             	movzx  ebx,bl
c002377c:	0f b6 c0             	movzx  eax,al
c002377f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023787:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002378b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002378d:	83 c4 1c             	add    esp,0x1c
c0023790:	5b                   	pop    ebx
c0023791:	5e                   	pop    esi
c0023792:	5f                   	pop    edi
c0023793:	5d                   	pop    ebp
c0023794:	c3                   	ret    
c0023795:	90                   	nop

c0023796 <IDE::detect()>:
c0023796:	55                   	push   ebp
c0023797:	57                   	push   edi
c0023798:	56                   	push   esi
c0023799:	53                   	push   ebx
c002379a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237a0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237a7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237ae:	0f 85 be 02 00 00    	jne    c0023a72 <IDE::detect()+0x2dc>
c00237b4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237bb:	31 f6                	xor    esi,esi
c00237bd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237c5:	31 ed                	xor    ebp,ebp
c00237c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237cb:	c1 e0 06             	shl    eax,0x6
c00237ce:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237d6:	89 e8                	mov    eax,ebp
c00237d8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237dc:	c1 e0 04             	shl    eax,0x4
c00237df:	83 c8 a0             	or     eax,0xffffffa0
c00237e2:	0f b6 c0             	movzx  eax,al
c00237e5:	50                   	push   eax
c00237e6:	6a 06                	push   0x6
c00237e8:	56                   	push   esi
c00237e9:	53                   	push   ebx
c00237ea:	e8 79 f8 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ef:	83 c4 0c             	add    esp,0xc
c00237f2:	6a 0c                	push   0xc
c00237f4:	56                   	push   esi
c00237f5:	53                   	push   ebx
c00237f6:	e8 2d f9 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c00237fb:	83 c4 0c             	add    esp,0xc
c00237fe:	6a 0c                	push   0xc
c0023800:	56                   	push   esi
c0023801:	53                   	push   ebx
c0023802:	e8 21 f9 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023807:	83 c4 0c             	add    esp,0xc
c002380a:	6a 0c                	push   0xc
c002380c:	56                   	push   esi
c002380d:	53                   	push   ebx
c002380e:	e8 15 f9 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023813:	83 c4 0c             	add    esp,0xc
c0023816:	6a 0c                	push   0xc
c0023818:	56                   	push   esi
c0023819:	53                   	push   ebx
c002381a:	e8 09 f9 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c002381f:	68 ec 00 00 00       	push   0xec
c0023824:	6a 07                	push   0x7
c0023826:	56                   	push   esi
c0023827:	53                   	push   ebx
c0023828:	e8 3b f8 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002382d:	83 c4 1c             	add    esp,0x1c
c0023830:	6a 0c                	push   0xc
c0023832:	56                   	push   esi
c0023833:	53                   	push   ebx
c0023834:	e8 ef f8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023839:	83 c4 0c             	add    esp,0xc
c002383c:	6a 0c                	push   0xc
c002383e:	56                   	push   esi
c002383f:	53                   	push   ebx
c0023840:	e8 e3 f8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023845:	83 c4 0c             	add    esp,0xc
c0023848:	6a 0c                	push   0xc
c002384a:	56                   	push   esi
c002384b:	53                   	push   ebx
c002384c:	e8 d7 f8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023851:	83 c4 0c             	add    esp,0xc
c0023854:	6a 0c                	push   0xc
c0023856:	56                   	push   esi
c0023857:	53                   	push   ebx
c0023858:	e8 cb f8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c002385d:	83 c4 0c             	add    esp,0xc
c0023860:	6a 0c                	push   0xc
c0023862:	56                   	push   esi
c0023863:	53                   	push   ebx
c0023864:	e8 bf f8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023869:	83 c4 10             	add    esp,0x10
c002386c:	84 c0                	test   al,al
c002386e:	0f 84 8b 01 00 00    	je     c00239ff <IDE::detect()+0x269>
c0023874:	31 ff                	xor    edi,edi
c0023876:	50                   	push   eax
c0023877:	6a 0c                	push   0xc
c0023879:	56                   	push   esi
c002387a:	53                   	push   ebx
c002387b:	e8 a8 f8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023880:	83 c4 10             	add    esp,0x10
c0023883:	a8 01                	test   al,0x1
c0023885:	0f 85 8e 01 00 00    	jne    c0023a19 <IDE::detect()+0x283>
c002388b:	84 c0                	test   al,al
c002388d:	78 04                	js     c0023893 <IDE::detect()+0xfd>
c002388f:	a8 08                	test   al,0x8
c0023891:	75 27                	jne    c00238ba <IDE::detect()+0x124>
c0023893:	47                   	inc    edi
c0023894:	81 ff 17 01 00 00    	cmp    edi,0x117
c002389a:	7e da                	jle    c0023876 <IDE::detect()+0xe0>
c002389c:	50                   	push   eax
c002389d:	50                   	push   eax
c002389e:	6a 00                	push   0x0
c00238a0:	68 40 4b 4c 00       	push   0x4c4b40
c00238a5:	e8 00 ab ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c00238aa:	83 c4 10             	add    esp,0x10
c00238ad:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238b3:	75 c1                	jne    c0023876 <IDE::detect()+0xe0>
c00238b5:	e9 5f 01 00 00       	jmp    c0023a19 <IDE::detect()+0x283>
c00238ba:	31 c9                	xor    ecx,ecx
c00238bc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238c0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238c4:	83 ec 0c             	sub    esp,0xc
c00238c7:	68 80 00 00 00       	push   0x80
c00238cc:	57                   	push   edi
c00238cd:	6a 00                	push   0x0
c00238cf:	56                   	push   esi
c00238d0:	53                   	push   ebx
c00238d1:	e8 f4 fd ff ff       	call   c00236ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238d6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238df:	89 d1                	mov    ecx,edx
c00238e1:	c1 e0 06             	shl    eax,0x6
c00238e4:	01 d8                	add    eax,ebx
c00238e6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238ed:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238f4:	89 f2                	mov    edx,esi
c00238f6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238fc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023900:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023906:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002390a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023911:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023919:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023920:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023928:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002392e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023935:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002393b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002393f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023943:	83 c4 20             	add    esp,0x20
c0023946:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023949:	83 c0 02             	add    eax,0x2
c002394c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023952:	83 c7 02             	add    edi,0x2
c0023955:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023958:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002395e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023962:	75 e2                	jne    c0023946 <IDE::detect()+0x1b0>
c0023964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023968:	c1 e0 06             	shl    eax,0x6
c002396b:	01 d8                	add    eax,ebx
c002396d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023973:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002397a:	66 c1 ea 09          	shr    dx,0x9
c002397e:	83 e2 01             	and    edx,0x1
c0023981:	84 c9                	test   cl,cl
c0023983:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023989:	75 2f                	jne    c00239ba <IDE::detect()+0x224>
c002398b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023991:	85 c0                	test   eax,eax
c0023993:	74 66                	je     c00239fb <IDE::detect()+0x265>
c0023995:	50                   	push   eax
c0023996:	55                   	push   ebp
c0023997:	56                   	push   esi
c0023998:	68 1b cc 02 c0       	push   0xc002cc1b
c002399d:	e8 15 f6 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00239a2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239a9:	e8 95 be fe ff       	call   c000f843 <malloc>
c00239ae:	89 c7                	mov    edi,eax
c00239b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00239b3:	e8 78 06 00 00       	call   c0024030 <ATA::ATA()>
c00239b8:	eb 28                	jmp    c00239e2 <IDE::detect()+0x24c>
c00239ba:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239c0:	55                   	push   ebp
c00239c1:	56                   	push   esi
c00239c2:	68 4a cc 02 c0       	push   0xc002cc4a
c00239c7:	e8 eb f5 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00239cc:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00239d3:	e8 6b be fe ff       	call   c000f843 <malloc>
c00239d8:	89 c7                	mov    edi,eax
c00239da:	89 04 24             	mov    DWORD PTR [esp],eax
c00239dd:	e8 8e 0c 00 00       	call   c0024670 <ATAPI::ATAPI()>
c00239e2:	5a                   	pop    edx
c00239e3:	59                   	pop    ecx
c00239e4:	57                   	push   edi
c00239e5:	53                   	push   ebx
c00239e6:	e8 f3 09 ff ff       	call   c00143de <Device::addChild(Device*)>
c00239eb:	8b 07                	mov    eax,DWORD PTR [edi]
c00239ed:	53                   	push   ebx
c00239ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239f2:	6a 00                	push   0x0
c00239f4:	57                   	push   edi
c00239f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239f8:	83 c4 20             	add    esp,0x20
c00239fb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239ff:	4d                   	dec    ebp
c0023a00:	74 0a                	je     c0023a0c <IDE::detect()+0x276>
c0023a02:	bd 01 00 00 00       	mov    ebp,0x1
c0023a07:	e9 bb fd ff ff       	jmp    c00237c7 <IDE::detect()+0x31>
c0023a0c:	4e                   	dec    esi
c0023a0d:	74 63                	je     c0023a72 <IDE::detect()+0x2dc>
c0023a0f:	be 01 00 00 00       	mov    esi,0x1
c0023a14:	e9 ac fd ff ff       	jmp    c00237c5 <IDE::detect()+0x2f>
c0023a19:	50                   	push   eax
c0023a1a:	6a 04                	push   0x4
c0023a1c:	56                   	push   esi
c0023a1d:	53                   	push   ebx
c0023a1e:	e8 05 f7 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023a23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a27:	83 c4 0c             	add    esp,0xc
c0023a2a:	6a 05                	push   0x5
c0023a2c:	56                   	push   esi
c0023a2d:	53                   	push   ebx
c0023a2e:	e8 f5 f6 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023a33:	83 c4 10             	add    esp,0x10
c0023a36:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a3a:	80 fa 14             	cmp    dl,0x14
c0023a3d:	75 04                	jne    c0023a43 <IDE::detect()+0x2ad>
c0023a3f:	3c eb                	cmp    al,0xeb
c0023a41:	eb 07                	jmp    c0023a4a <IDE::detect()+0x2b4>
c0023a43:	3c 96                	cmp    al,0x96
c0023a45:	75 b8                	jne    c00239ff <IDE::detect()+0x269>
c0023a47:	80 fa 69             	cmp    dl,0x69
c0023a4a:	75 b3                	jne    c00239ff <IDE::detect()+0x269>
c0023a4c:	68 a1 00 00 00       	push   0xa1
c0023a51:	6a 07                	push   0x7
c0023a53:	56                   	push   esi
c0023a54:	53                   	push   ebx
c0023a55:	e8 0e f6 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a5a:	5f                   	pop    edi
c0023a5b:	58                   	pop    eax
c0023a5c:	6a 00                	push   0x0
c0023a5e:	68 40 42 0f 00       	push   0xf4240
c0023a63:	e8 42 a9 ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c0023a68:	83 c4 10             	add    esp,0x10
c0023a6b:	b1 01                	mov    cl,0x1
c0023a6d:	e9 4a fe ff ff       	jmp    c00238bc <IDE::detect()+0x126>
c0023a72:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a78:	5b                   	pop    ebx
c0023a79:	5e                   	pop    esi
c0023a7a:	5f                   	pop    edi
c0023a7b:	5d                   	pop    ebp
c0023a7c:	c3                   	ret    
c0023a7d:	90                   	nop

c0023a7e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a7e:	55                   	push   ebp
c0023a7f:	57                   	push   edi
c0023a80:	56                   	push   esi
c0023a81:	53                   	push   ebx
c0023a82:	83 ec 1c             	sub    esp,0x1c
c0023a85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a8d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a91:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a95:	88 c3                	mov    bl,al
c0023a97:	84 c0                	test   al,al
c0023a99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a9d:	0f 84 67 01 00 00    	je     c0023c0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023aa3:	83 ec 0c             	sub    esp,0xc
c0023aa6:	68 7b cc 02 c0       	push   0xc002cc7b
c0023aab:	e8 07 f5 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023ab0:	83 c4 10             	add    esp,0x10
c0023ab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ab7:	3c 01                	cmp    al,0x1
c0023ab9:	75 17                	jne    c0023ad2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023abb:	83 ec 0c             	sub    esp,0xc
c0023abe:	b3 13                	mov    bl,0x13
c0023ac0:	68 87 cc 02 c0       	push   0xc002cc87
c0023ac5:	e8 ed f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023aca:	83 c4 10             	add    esp,0x10
c0023acd:	e9 25 01 00 00       	jmp    c0023bf7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ad2:	3c 02                	cmp    al,0x2
c0023ad4:	0f 85 ef 00 00 00    	jne    c0023bc9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023ada:	d1 e6                	shl    esi,1
c0023adc:	09 ee                	or     esi,ebp
c0023ade:	52                   	push   edx
c0023adf:	89 f0                	mov    eax,esi
c0023ae1:	6a 01                	push   0x1
c0023ae3:	0f b6 f0             	movzx  esi,al
c0023ae6:	c1 e6 06             	shl    esi,0x6
c0023ae9:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023af1:	50                   	push   eax
c0023af2:	57                   	push   edi
c0023af3:	e8 30 f6 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023af8:	83 c4 10             	add    esp,0x10
c0023afb:	89 c6                	mov    esi,eax
c0023afd:	a8 01                	test   al,0x1
c0023aff:	74 12                	je     c0023b13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b01:	83 ec 0c             	sub    esp,0xc
c0023b04:	b3 07                	mov    bl,0x7
c0023b06:	68 9c cc 02 c0       	push   0xc002cc9c
c0023b0b:	e8 a7 f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023b10:	83 c4 10             	add    esp,0x10
c0023b13:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b19:	74 12                	je     c0023b2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b1b:	83 ec 0c             	sub    esp,0xc
c0023b1e:	b3 03                	mov    bl,0x3
c0023b20:	68 ba cc 02 c0       	push   0xc002ccba
c0023b25:	e8 8d f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023b2a:	83 c4 10             	add    esp,0x10
c0023b2d:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b33:	74 12                	je     c0023b47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b35:	83 ec 0c             	sub    esp,0xc
c0023b38:	b3 14                	mov    bl,0x14
c0023b3a:	68 da cc 02 c0       	push   0xc002ccda
c0023b3f:	e8 73 f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023b44:	83 c4 10             	add    esp,0x10
c0023b47:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b4d:	74 12                	je     c0023b61 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b4f:	83 ec 0c             	sub    esp,0xc
c0023b52:	b3 03                	mov    bl,0x3
c0023b54:	68 ba cc 02 c0       	push   0xc002ccba
c0023b59:	e8 59 f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023b5e:	83 c4 10             	add    esp,0x10
c0023b61:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b67:	74 12                	je     c0023b7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b69:	83 ec 0c             	sub    esp,0xc
c0023b6c:	b3 15                	mov    bl,0x15
c0023b6e:	68 f2 cc 02 c0       	push   0xc002ccf2
c0023b73:	e8 3f f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023b78:	83 c4 10             	add    esp,0x10
c0023b7b:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b81:	74 12                	je     c0023b95 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b83:	83 ec 0c             	sub    esp,0xc
c0023b86:	b3 03                	mov    bl,0x3
c0023b88:	68 ba cc 02 c0       	push   0xc002ccba
c0023b8d:	e8 25 f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023b92:	83 c4 10             	add    esp,0x10
c0023b95:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b9b:	74 12                	je     c0023baf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b9d:	83 ec 0c             	sub    esp,0xc
c0023ba0:	b3 16                	mov    bl,0x16
c0023ba2:	68 0c cd 02 c0       	push   0xc002cd0c
c0023ba7:	e8 0b f4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023bac:	83 c4 10             	add    esp,0x10
c0023baf:	89 f0                	mov    eax,esi
c0023bb1:	84 c0                	test   al,al
c0023bb3:	79 42                	jns    c0023bf7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bb5:	83 ec 0c             	sub    esp,0xc
c0023bb8:	b3 0d                	mov    bl,0xd
c0023bba:	68 2d cd 02 c0       	push   0xc002cd2d
c0023bbf:	e8 f3 f3 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023bc4:	83 c4 10             	add    esp,0x10
c0023bc7:	eb 2e                	jmp    c0023bf7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bc9:	3c 03                	cmp    al,0x3
c0023bcb:	75 14                	jne    c0023be1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023bcd:	83 ec 0c             	sub    esp,0xc
c0023bd0:	b3 17                	mov    bl,0x17
c0023bd2:	68 41 cd 02 c0       	push   0xc002cd41
c0023bd7:	e8 db f3 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023bdc:	83 c4 10             	add    esp,0x10
c0023bdf:	eb 16                	jmp    c0023bf7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023be1:	3c 04                	cmp    al,0x4
c0023be3:	75 12                	jne    c0023bf7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023be5:	83 ec 0c             	sub    esp,0xc
c0023be8:	b3 08                	mov    bl,0x8
c0023bea:	68 57 cd 02 c0       	push   0xc002cd57
c0023bef:	e8 c3 f3 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023bf4:	83 c4 10             	add    esp,0x10
c0023bf7:	50                   	push   eax
c0023bf8:	50                   	push   eax
c0023bf9:	0f b6 c3             	movzx  eax,bl
c0023bfc:	50                   	push   eax
c0023bfd:	68 6f cd 02 c0       	push   0xc002cd6f
c0023c02:	e8 b0 f3 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023c07:	83 c4 10             	add    esp,0x10
c0023c0a:	83 c4 1c             	add    esp,0x1c
c0023c0d:	88 d8                	mov    al,bl
c0023c0f:	5b                   	pop    ebx
c0023c10:	5e                   	pop    esi
c0023c11:	5f                   	pop    edi
c0023c12:	5d                   	pop    ebp
c0023c13:	c3                   	ret    

c0023c14 <IDE::polling(unsigned char, unsigned int)>:
c0023c14:	57                   	push   edi
c0023c15:	56                   	push   esi
c0023c16:	53                   	push   ebx
c0023c17:	bb 04 00 00 00       	mov    ebx,0x4
c0023c1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c20:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c25:	52                   	push   edx
c0023c26:	6a 0c                	push   0xc
c0023c28:	56                   	push   esi
c0023c29:	57                   	push   edi
c0023c2a:	e8 f9 f4 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023c2f:	83 c4 10             	add    esp,0x10
c0023c32:	4b                   	dec    ebx
c0023c33:	75 f0                	jne    c0023c25 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c35:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c3a:	50                   	push   eax
c0023c3b:	6a 0c                	push   0xc
c0023c3d:	56                   	push   esi
c0023c3e:	57                   	push   edi
c0023c3f:	e8 e4 f4 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c0023c44:	83 c4 10             	add    esp,0x10
c0023c47:	a8 01                	test   al,0x1
c0023c49:	74 12                	je     c0023c5d <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c4b:	83 ec 0c             	sub    esp,0xc
c0023c4e:	68 89 cd 02 c0       	push   0xc002cd89
c0023c53:	e8 5f f3 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023c58:	83 c4 10             	add    esp,0x10
c0023c5b:	eb 17                	jmp    c0023c74 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c5d:	a8 20                	test   al,0x20
c0023c5f:	75 0f                	jne    c0023c70 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c61:	4b                   	dec    ebx
c0023c62:	74 10                	je     c0023c74 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c64:	84 c0                	test   al,al
c0023c66:	78 d2                	js     c0023c3a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c68:	a8 08                	test   al,0x8
c0023c6a:	74 ce                	je     c0023c3a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c6c:	31 c0                	xor    eax,eax
c0023c6e:	eb 06                	jmp    c0023c76 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c70:	b0 01                	mov    al,0x1
c0023c72:	eb 02                	jmp    c0023c76 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c74:	b0 02                	mov    al,0x2
c0023c76:	5b                   	pop    ebx
c0023c77:	5e                   	pop    esi
c0023c78:	5f                   	pop    edi
c0023c79:	c3                   	ret    

c0023c7a <SATABus::close(int, int, void*)>:
c0023c7a:	31 c0                	xor    eax,eax
c0023c7c:	c3                   	ret    
c0023c7d:	90                   	nop

c0023c7e <SATABus::detect()>:
c0023c7e:	c3                   	ret    
c0023c7f:	90                   	nop

c0023c80 <SATABus::SATABus()>:
c0023c80:	83 ec 0c             	sub    esp,0xc
c0023c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c87:	83 ec 08             	sub    esp,0x8
c0023c8a:	68 cc cd 02 c0       	push   0xc002cdcc
c0023c8f:	50                   	push   eax
c0023c90:	e8 d5 0a ff ff       	call   c001476a <HardDiskController::HardDiskController(char const*)>
c0023c95:	83 c4 10             	add    esp,0x10
c0023c98:	ba 88 ce 02 c0       	mov    edx,0xc002ce88
c0023c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca1:	89 10                	mov    DWORD PTR [eax],edx
c0023ca3:	83 ec 0c             	sub    esp,0xc
c0023ca6:	6a 50                	push   0x50
c0023ca8:	e8 59 c3 fe ff       	call   c0010006 <Phys::allocateContiguousPages(int)>
c0023cad:	83 c4 10             	add    esp,0x10
c0023cb0:	89 c2                	mov    edx,eax
c0023cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023cbc:	83 ec 0c             	sub    esp,0xc
c0023cbf:	6a 50                	push   0x50
c0023cc1:	e8 b9 de fe ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0023cc6:	83 c4 10             	add    esp,0x10
c0023cc9:	89 c2                	mov    edx,eax
c0023ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ccf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023cd5:	e8 40 e1 fe ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0023cda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cde:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023ce4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ce8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023cee:	83 ec 0c             	sub    esp,0xc
c0023cf1:	6a 03                	push   0x3
c0023cf3:	6a 50                	push   0x50
c0023cf5:	51                   	push   ecx
c0023cf6:	52                   	push   edx
c0023cf7:	50                   	push   eax
c0023cf8:	e8 63 e9 fe ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cfd:	83 c4 20             	add    esp,0x20
c0023d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d04:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d0e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d14:	83 ec 04             	sub    esp,0x4
c0023d17:	52                   	push   edx
c0023d18:	50                   	push   eax
c0023d19:	68 f0 cd 02 c0       	push   0xc002cdf0
c0023d1e:	e8 94 f2 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023d23:	83 c4 10             	add    esp,0x10
c0023d26:	90                   	nop
c0023d27:	83 c4 0c             	add    esp,0xc
c0023d2a:	c3                   	ret    
c0023d2b:	90                   	nop

c0023d2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d2c:	83 ec 0c             	sub    esp,0xc
c0023d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d33:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d39:	09 c2                	or     edx,eax
c0023d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d45:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d47:	31 c0                	xor    eax,eax
c0023d49:	c1 e9 08             	shr    ecx,0x8
c0023d4c:	83 e1 0f             	and    ecx,0xf
c0023d4f:	39 c8                	cmp    eax,ecx
c0023d51:	74 0a                	je     c0023d5d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d53:	f6 c2 01             	test   dl,0x1
c0023d56:	74 18                	je     c0023d70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d58:	d1 ea                	shr    edx,1
c0023d5a:	40                   	inc    eax
c0023d5b:	eb f2                	jmp    c0023d4f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d5d:	83 ec 0c             	sub    esp,0xc
c0023d60:	68 14 ce 02 c0       	push   0xc002ce14
c0023d65:	e8 fb 68 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0023d6a:	83 c4 10             	add    esp,0x10
c0023d6d:	83 c8 ff             	or     eax,0xffffffff
c0023d70:	83 c4 0c             	add    esp,0xc
c0023d73:	c3                   	ret    

c0023d74 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d78:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d7b:	89 c2                	mov    edx,eax
c0023d7d:	c1 ea 08             	shr    edx,0x8
c0023d80:	83 e2 0f             	and    edx,0xf
c0023d83:	fe ca                	dec    dl
c0023d85:	75 31                	jne    c0023db8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d87:	83 e0 0f             	and    eax,0xf
c0023d8a:	3c 03                	cmp    al,0x3
c0023d8c:	75 2a                	jne    c0023db8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d8e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d91:	b8 02 00 00 00       	mov    eax,0x2
c0023d96:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d9c:	74 1c                	je     c0023dba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d9e:	b8 04 00 00 00       	mov    eax,0x4
c0023da3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023da9:	74 0f                	je     c0023dba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dab:	31 c0                	xor    eax,eax
c0023dad:	83 fa 03             	cmp    edx,0x3
c0023db0:	0f 94 c0             	sete   al
c0023db3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023db7:	c3                   	ret    
c0023db8:	31 c0                	xor    eax,eax
c0023dba:	c3                   	ret    
c0023dbb:	90                   	nop

c0023dbc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dc3:	0f ba e2 0f          	bt     edx,0xf
c0023dc7:	72 f7                	jb     c0023dc0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023dc9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dcc:	83 ca 10             	or     edx,0x10
c0023dcf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dd5:	83 ca 01             	or     edx,0x1
c0023dd8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ddb:	c3                   	ret    

c0023ddc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023de0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023de3:	83 e2 fe             	and    edx,0xfffffffe
c0023de6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023de9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dec:	83 e2 ef             	and    edx,0xffffffef
c0023def:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023df2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023df5:	0f ba e2 0e          	bt     edx,0xe
c0023df9:	72 f7                	jb     c0023df2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dfb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dfe:	0f ba e2 0f          	bt     edx,0xf
c0023e02:	72 ee                	jb     c0023df2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e04:	c3                   	ret    
c0023e05:	90                   	nop

c0023e06 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e06:	55                   	push   ebp
c0023e07:	57                   	push   edi
c0023e08:	56                   	push   esi
c0023e09:	53                   	push   ebx
c0023e0a:	83 ec 1c             	sub    esp,0x1c
c0023e0d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e15:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e19:	53                   	push   ebx
c0023e1a:	89 fd                	mov    ebp,edi
c0023e1c:	56                   	push   esi
c0023e1d:	c1 e5 0a             	shl    ebp,0xa
c0023e20:	e8 b7 ff ff ff       	call   c0023ddc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e25:	83 ec 0c             	sub    esp,0xc
c0023e28:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e2e:	01 e8                	add    eax,ebp
c0023e30:	89 03                	mov    DWORD PTR [ebx],eax
c0023e32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e34:	68 00 04 00 00       	push   0x400
c0023e39:	6a 00                	push   0x0
c0023e3b:	50                   	push   eax
c0023e3c:	e8 37 c9 fd ff       	call   c0000778 <memset>
c0023e41:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e47:	89 fa                	mov    edx,edi
c0023e49:	01 e8                	add    eax,ebp
c0023e4b:	c1 e7 0d             	shl    edi,0xd
c0023e4e:	89 03                	mov    DWORD PTR [ebx],eax
c0023e50:	c1 e2 08             	shl    edx,0x8
c0023e53:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e5a:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e60:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e64:	89 d0                	mov    eax,edx
c0023e66:	83 c4 1c             	add    esp,0x1c
c0023e69:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e6f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e72:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e75:	68 00 01 00 00       	push   0x100
c0023e7a:	6a 00                	push   0x0
c0023e7c:	50                   	push   eax
c0023e7d:	e8 f6 c8 fd ff       	call   c0000778 <memset>
c0023e82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e86:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e8c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e96:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e99:	83 c4 10             	add    esp,0x10
c0023e9c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ea3:	31 ff                	xor    edi,edi
c0023ea5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023eab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eb5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ebb:	83 c5 20             	add    ebp,0x20
c0023ebe:	01 f8                	add    eax,edi
c0023ec0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ec3:	52                   	push   edx
c0023ec4:	68 00 01 00 00       	push   0x100
c0023ec9:	6a 00                	push   0x0
c0023ecb:	50                   	push   eax
c0023ecc:	e8 a7 c8 fd ff       	call   c0000778 <memset>
c0023ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ed5:	83 c4 10             	add    esp,0x10
c0023ed8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ede:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023ee5:	01 f8                	add    eax,edi
c0023ee7:	81 c7 00 01 00 00    	add    edi,0x100
c0023eed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ef0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ef6:	75 b3                	jne    c0023eab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ef8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023efc:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f00:	83 c4 1c             	add    esp,0x1c
c0023f03:	5b                   	pop    ebx
c0023f04:	5e                   	pop    esi
c0023f05:	5f                   	pop    edi
c0023f06:	5d                   	pop    ebp
c0023f07:	e9 b0 fe ff ff       	jmp    c0023dbc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f0c:	55                   	push   ebp
c0023f0d:	57                   	push   edi
c0023f0e:	56                   	push   esi
c0023f0f:	53                   	push   ebx
c0023f10:	31 db                	xor    ebx,ebx
c0023f12:	83 ec 0c             	sub    esp,0xc
c0023f15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f19:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f1d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f20:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f26:	0f 84 aa 00 00 00    	je     c0023fd6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f2c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f30:	89 d8                	mov    eax,ebx
c0023f32:	c1 e0 07             	shl    eax,0x7
c0023f35:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f3c:	55                   	push   ebp
c0023f3d:	56                   	push   esi
c0023f3e:	e8 31 fe ff ff       	call   c0023d74 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f43:	5a                   	pop    edx
c0023f44:	83 f8 01             	cmp    eax,0x1
c0023f47:	59                   	pop    ecx
c0023f48:	75 30                	jne    c0023f7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f4a:	50                   	push   eax
c0023f4b:	50                   	push   eax
c0023f4c:	53                   	push   ebx
c0023f4d:	68 39 ce 02 c0       	push   0xc002ce39
c0023f52:	e8 60 f0 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023f57:	83 c4 0c             	add    esp,0xc
c0023f5a:	53                   	push   ebx
c0023f5b:	55                   	push   ebp
c0023f5c:	56                   	push   esi
c0023f5d:	e8 a4 fe ff ff       	call   c0023e06 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f62:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f69:	e8 d5 b8 fe ff       	call   c000f843 <malloc>
c0023f6e:	89 c5                	mov    ebp,eax
c0023f70:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f73:	e8 60 0d 00 00       	call   c0024cd8 <SATA::SATA()>
c0023f78:	eb 33                	jmp    c0023fad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f7a:	83 f8 04             	cmp    eax,0x4
c0023f7d:	75 47                	jne    c0023fc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f7f:	50                   	push   eax
c0023f80:	50                   	push   eax
c0023f81:	53                   	push   ebx
c0023f82:	68 50 ce 02 c0       	push   0xc002ce50
c0023f87:	e8 2b f0 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023f8c:	83 c4 0c             	add    esp,0xc
c0023f8f:	53                   	push   ebx
c0023f90:	55                   	push   ebp
c0023f91:	56                   	push   esi
c0023f92:	e8 6f fe ff ff       	call   c0023e06 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f97:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f9e:	e8 a0 b8 fe ff       	call   c000f843 <malloc>
c0023fa3:	89 c5                	mov    ebp,eax
c0023fa5:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fa8:	e8 d7 10 00 00       	call   c0025084 <SATAPI::SATAPI()>
c0023fad:	5a                   	pop    edx
c0023fae:	59                   	pop    ecx
c0023faf:	55                   	push   ebp
c0023fb0:	56                   	push   esi
c0023fb1:	e8 28 04 ff ff       	call   c00143de <Device::addChild(Device*)>
c0023fb6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023fb9:	56                   	push   esi
c0023fba:	6a 00                	push   0x0
c0023fbc:	53                   	push   ebx
c0023fbd:	55                   	push   ebp
c0023fbe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023fc1:	83 c4 20             	add    esp,0x20
c0023fc4:	eb 10                	jmp    c0023fd6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023fc6:	50                   	push   eax
c0023fc7:	50                   	push   eax
c0023fc8:	53                   	push   ebx
c0023fc9:	68 69 ce 02 c0       	push   0xc002ce69
c0023fce:	e8 e4 ef fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0023fd3:	83 c4 10             	add    esp,0x10
c0023fd6:	d1 ef                	shr    edi,1
c0023fd8:	43                   	inc    ebx
c0023fd9:	83 fb 20             	cmp    ebx,0x20
c0023fdc:	0f 85 3e ff ff ff    	jne    c0023f20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023fe2:	83 c4 0c             	add    esp,0xc
c0023fe5:	5b                   	pop    ebx
c0023fe6:	5e                   	pop    esi
c0023fe7:	5f                   	pop    edi
c0023fe8:	5d                   	pop    ebp
c0023fe9:	c3                   	ret    

c0023fea <SATABus::open(int, int, void*)>:
c0023fea:	83 ec 14             	sub    esp,0x14
c0023fed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ff1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023ff7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023ffd:	52                   	push   edx
c0023ffe:	50                   	push   eax
c0023fff:	e8 08 ff ff ff       	call   c0023f0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024004:	31 c0                	xor    eax,eax
c0024006:	83 c4 1c             	add    esp,0x1c
c0024009:	c3                   	ret    

c002400a <ATA::close(int, int, void*)>:
c002400a:	83 ec 0c             	sub    esp,0xc
c002400d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024011:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024017:	85 c0                	test   eax,eax
c0024019:	74 0c                	je     c0024027 <ATA::close(int, int, void*)+0x1d>
c002401b:	83 ec 0c             	sub    esp,0xc
c002401e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024020:	50                   	push   eax
c0024021:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024024:	83 c4 10             	add    esp,0x10
c0024027:	31 c0                	xor    eax,eax
c0024029:	83 c4 0c             	add    esp,0xc
c002402c:	c3                   	ret    
c002402d:	90                   	nop

c002402e <ATA::powerSaving(PowerSavingLevel)>:
c002402e:	c3                   	ret    
c002402f:	90                   	nop

c0024030 <ATA::ATA()>:
c0024030:	83 ec 0c             	sub    esp,0xc
c0024033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024037:	83 ec 04             	sub    esp,0x4
c002403a:	68 00 02 00 00       	push   0x200
c002403f:	68 51 cf 02 c0       	push   0xc002cf51
c0024044:	50                   	push   eax
c0024045:	e8 b8 07 ff ff       	call   c0014802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002404a:	83 c4 10             	add    esp,0x10
c002404d:	ba d4 ce 02 c0       	mov    edx,0xc002ced4
c0024052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024056:	89 10                	mov    DWORD PTR [eax],edx
c0024058:	90                   	nop
c0024059:	83 c4 0c             	add    esp,0xc
c002405c:	c3                   	ret    
c002405d:	90                   	nop

c002405e <ATA::flush(bool)>:
c002405e:	53                   	push   ebx
c002405f:	83 ec 08             	sub    esp,0x8
c0024062:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002406b:	19 c0                	sbb    eax,eax
c002406d:	83 e0 fd             	and    eax,0xfffffffd
c0024070:	05 ea 00 00 00       	add    eax,0xea
c0024075:	50                   	push   eax
c0024076:	6a 07                	push   0x7
c0024078:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002407f:	50                   	push   eax
c0024080:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024086:	e8 dd ef ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002408b:	83 c4 0c             	add    esp,0xc
c002408e:	6a 00                	push   0x0
c0024090:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024097:	50                   	push   eax
c0024098:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002409e:	e8 71 fb ff ff       	call   c0023c14 <IDE::polling(unsigned char, unsigned int)>
c00240a3:	83 c4 18             	add    esp,0x18
c00240a6:	5b                   	pop    ebx
c00240a7:	c3                   	ret    

c00240a8 <ATA::readyForCommand()>:
c00240a8:	56                   	push   esi
c00240a9:	53                   	push   ebx
c00240aa:	31 db                	xor    ebx,ebx
c00240ac:	50                   	push   eax
c00240ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240b1:	50                   	push   eax
c00240b2:	6a 0c                	push   0xc
c00240b4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240bb:	50                   	push   eax
c00240bc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240c2:	e8 61 f0 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c00240c7:	83 c4 10             	add    esp,0x10
c00240ca:	a8 88                	test   al,0x88
c00240cc:	74 23                	je     c00240f1 <ATA::readyForCommand()+0x49>
c00240ce:	43                   	inc    ebx
c00240cf:	83 fb 63             	cmp    ebx,0x63
c00240d2:	7e dd                	jle    c00240b1 <ATA::readyForCommand()+0x9>
c00240d4:	51                   	push   ecx
c00240d5:	51                   	push   ecx
c00240d6:	6a 00                	push   0x0
c00240d8:	68 40 42 0f 00       	push   0xf4240
c00240dd:	e8 c8 a2 ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c00240e2:	83 c4 10             	add    esp,0x10
c00240e5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240eb:	75 c4                	jne    c00240b1 <ATA::readyForCommand()+0x9>
c00240ed:	31 c0                	xor    eax,eax
c00240ef:	eb 02                	jmp    c00240f3 <ATA::readyForCommand()+0x4b>
c00240f1:	b0 01                	mov    al,0x1
c00240f3:	5a                   	pop    edx
c00240f4:	5b                   	pop    ebx
c00240f5:	5e                   	pop    esi
c00240f6:	c3                   	ret    
c00240f7:	90                   	nop

c00240f8 <ATA::access(unsigned long long, int, void*, bool)>:
c00240f8:	55                   	push   ebp
c00240f9:	57                   	push   edi
c00240fa:	56                   	push   esi
c00240fb:	53                   	push   ebx
c00240fc:	83 ec 2c             	sub    esp,0x2c
c00240ff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024103:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024107:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002410b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002410f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024113:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024117:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002411b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024121:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024125:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002412b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002412f:	c1 e0 06             	shl    eax,0x6
c0024132:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002413a:	74 5d                	je     c0024199 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002413c:	89 fa                	mov    edx,edi
c002413e:	89 f0                	mov    eax,esi
c0024140:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024144:	c1 ea 1c             	shr    edx,0x1c
c0024147:	89 d1                	mov    ecx,edx
c0024149:	09 c1                	or     ecx,eax
c002414b:	74 25                	je     c0024172 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002414d:	31 ed                	xor    ebp,ebp
c002414f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024156:	89 fa                	mov    edx,edi
c0024158:	89 f0                	mov    eax,esi
c002415a:	0f ad d0             	shrd   eax,edx,cl
c002415d:	d3 ea                	shr    edx,cl
c002415f:	f6 c1 20             	test   cl,0x20
c0024162:	74 02                	je     c0024166 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024164:	89 d0                	mov    eax,edx
c0024166:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002416a:	45                   	inc    ebp
c002416b:	83 fd 06             	cmp    ebp,0x6
c002416e:	75 df                	jne    c002414f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024170:	eb 76                	jmp    c00241e8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024172:	89 f0                	mov    eax,esi
c0024174:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024179:	89 fa                	mov    edx,edi
c002417b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024182:	0f ac d0 10          	shrd   eax,edx,0x10
c0024186:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002418b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002418f:	c1 ee 18             	shr    esi,0x18
c0024192:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024197:	eb 56                	jmp    c00241ef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024199:	6a 00                	push   0x0
c002419b:	6a 3f                	push   0x3f
c002419d:	57                   	push   edi
c002419e:	56                   	push   esi
c002419f:	e8 98 29 00 00       	call   c0026b3c <__umoddi3>
c00241a4:	83 c4 10             	add    esp,0x10
c00241a7:	40                   	inc    eax
c00241a8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241ac:	6a 00                	push   0x0
c00241ae:	68 f0 03 00 00       	push   0x3f0
c00241b3:	57                   	push   edi
c00241b4:	56                   	push   esi
c00241b5:	e8 82 28 00 00       	call   c0026a3c <__udivdi3>
c00241ba:	83 c4 10             	add    esp,0x10
c00241bd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241c2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241c9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241ce:	6a 00                	push   0x0
c00241d0:	6a 3f                	push   0x3f
c00241d2:	57                   	push   edi
c00241d3:	56                   	push   esi
c00241d4:	e8 63 28 00 00       	call   c0026a3c <__udivdi3>
c00241d9:	83 c4 10             	add    esp,0x10
c00241dc:	89 c6                	mov    esi,eax
c00241de:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241e3:	83 e6 0f             	and    esi,0xf
c00241e6:	eb 07                	jmp    c00241ef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241e8:	31 f6                	xor    esi,esi
c00241ea:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241ef:	bf 01 00 00 00       	mov    edi,0x1
c00241f4:	50                   	push   eax
c00241f5:	6a 00                	push   0x0
c00241f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fe:	50                   	push   eax
c00241ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024203:	e8 6c f0 ff ff       	call   c0023274 <IDE::enableIRQs(unsigned char, bool)>
c0024208:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002420b:	e8 98 fe ff ff       	call   c00240a8 <ATA::readyForCommand()>
c0024210:	83 c4 10             	add    esp,0x10
c0024213:	84 c0                	test   al,al
c0024215:	0f 84 5a 02 00 00    	je     c0024475 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002421b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024221:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024227:	c1 e0 04             	shl    eax,0x4
c002422a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024231:	09 c6                	or     esi,eax
c0024233:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024238:	75 05                	jne    c002423f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002423a:	83 ce a0             	or     esi,0xffffffa0
c002423d:	eb 03                	jmp    c0024242 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002423f:	83 ce e0             	or     esi,0xffffffe0
c0024242:	89 f0                	mov    eax,esi
c0024244:	0f b6 f0             	movzx  esi,al
c0024247:	56                   	push   esi
c0024248:	6a 06                	push   0x6
c002424a:	51                   	push   ecx
c002424b:	52                   	push   edx
c002424c:	e8 17 ee ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024251:	83 c4 10             	add    esp,0x10
c0024254:	6a 00                	push   0x0
c0024256:	6a 01                	push   0x1
c0024258:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002425f:	50                   	push   eax
c0024260:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024266:	e8 fd ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002426b:	83 c4 10             	add    esp,0x10
c002426e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024273:	75 6e                	jne    c00242e3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024275:	6a 00                	push   0x0
c0024277:	6a 08                	push   0x8
c0024279:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024280:	50                   	push   eax
c0024281:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024287:	e8 dc ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024291:	50                   	push   eax
c0024292:	6a 09                	push   0x9
c0024294:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429b:	50                   	push   eax
c002429c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a2:	e8 c1 ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a7:	83 c4 20             	add    esp,0x20
c00242aa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242af:	50                   	push   eax
c00242b0:	6a 0a                	push   0xa
c00242b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b9:	50                   	push   eax
c00242ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c0:	e8 a3 ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00242ca:	50                   	push   eax
c00242cb:	6a 0b                	push   0xb
c00242cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d4:	50                   	push   eax
c00242d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242db:	e8 88 ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e0:	83 c4 20             	add    esp,0x20
c00242e3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242e8:	50                   	push   eax
c00242e9:	6a 02                	push   0x2
c00242eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f2:	50                   	push   eax
c00242f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f9:	e8 6a ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242fe:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024303:	50                   	push   eax
c0024304:	6a 03                	push   0x3
c0024306:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430d:	50                   	push   eax
c002430e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024314:	e8 4f ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024319:	83 c4 20             	add    esp,0x20
c002431c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024321:	50                   	push   eax
c0024322:	6a 04                	push   0x4
c0024324:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432b:	50                   	push   eax
c002432c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024332:	e8 31 ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024337:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002433c:	50                   	push   eax
c002433d:	6a 05                	push   0x5
c002433f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024346:	50                   	push   eax
c0024347:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434d:	e8 16 ed ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024352:	83 c4 20             	add    esp,0x20
c0024355:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002435a:	0f 94 c0             	sete   al
c002435d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024362:	74 09                	je     c002436d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024364:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002436b:	eb 07                	jmp    c0024374 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002436d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024374:	0f b6 c0             	movzx  eax,al
c0024377:	50                   	push   eax
c0024378:	6a 07                	push   0x7
c002437a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024381:	50                   	push   eax
c0024382:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024388:	e8 db ec ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024391:	83 c4 10             	add    esp,0x10
c0024394:	85 f6                	test   esi,esi
c0024396:	0f 84 ba 00 00 00    	je     c0024456 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002439c:	50                   	push   eax
c002439d:	6a 01                	push   0x1
c002439f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243a6:	50                   	push   eax
c00243a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ad:	e8 62 f8 ff ff       	call   c0023c14 <IDE::polling(unsigned char, unsigned int)>
c00243b2:	83 c4 10             	add    esp,0x10
c00243b5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243bb:	84 c0                	test   al,al
c00243bd:	74 2c                	je     c00243eb <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243bf:	0f b6 f8             	movzx  edi,al
c00243c2:	0f b6 d2             	movzx  edx,dl
c00243c5:	57                   	push   edi
c00243c6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00243cd:	50                   	push   eax
c00243ce:	52                   	push   edx
c00243cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d5:	e8 a4 f6 ff ff       	call   c0023a7e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243da:	c7 04 24 ac ce 02 c0 	mov    DWORD PTR [esp],0xc002ceac
c00243e1:	e8 d1 eb fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00243e6:	e9 87 00 00 00       	jmp    c0024472 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243eb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243f0:	74 33                	je     c0024425 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243f2:	31 ed                	xor    ebp,ebp
c00243f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243f8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243fc:	50                   	push   eax
c00243fd:	50                   	push   eax
c00243fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024405:	50                   	push   eax
c0024406:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440c:	e8 45 ec ff ff       	call   c0023056 <IDE::getBase(unsigned char)>
c0024411:	89 c2                	mov    edx,eax
c0024413:	89 f8                	mov    eax,edi
c0024415:	66 ef                	out    dx,ax
c0024417:	45                   	inc    ebp
c0024418:	83 c4 10             	add    esp,0x10
c002441b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024421:	75 d1                	jne    c00243f4 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024423:	eb 23                	jmp    c0024448 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024425:	0f b6 d2             	movzx  edx,dl
c0024428:	51                   	push   ecx
c0024429:	51                   	push   ecx
c002442a:	52                   	push   edx
c002442b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024431:	e8 20 ec ff ff       	call   c0023056 <IDE::getBase(unsigned char)>
c0024436:	b9 00 01 00 00       	mov    ecx,0x100
c002443b:	89 c2                	mov    edx,eax
c002443d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024441:	fc                   	cld    
c0024442:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024445:	83 c4 10             	add    esp,0x10
c0024448:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024450:	4e                   	dec    esi
c0024451:	e9 3e ff ff ff       	jmp    c0024394 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024456:	31 ff                	xor    edi,edi
c0024458:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002445d:	74 16                	je     c0024475 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002445f:	50                   	push   eax
c0024460:	50                   	push   eax
c0024461:	31 c0                	xor    eax,eax
c0024463:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024468:	0f 94 c0             	sete   al
c002446b:	50                   	push   eax
c002446c:	53                   	push   ebx
c002446d:	e8 ec fb ff ff       	call   c002405e <ATA::flush(bool)>
c0024472:	83 c4 10             	add    esp,0x10
c0024475:	83 c4 2c             	add    esp,0x2c
c0024478:	89 f8                	mov    eax,edi
c002447a:	5b                   	pop    ebx
c002447b:	5e                   	pop    esi
c002447c:	5f                   	pop    edi
c002447d:	5d                   	pop    ebp
c002447e:	c3                   	ret    
c002447f:	90                   	nop

c0024480 <ATA::read(unsigned long long, int, void*)>:
c0024480:	57                   	push   edi
c0024481:	b8 04 00 00 00       	mov    eax,0x4
c0024486:	56                   	push   esi
c0024487:	53                   	push   ebx
c0024488:	83 ec 10             	sub    esp,0x10
c002448b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002448f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024493:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024496:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002449a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002449e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244a4:	77 3b                	ja     c00244e1 <ATA::read(unsigned long long, int, void*)+0x61>
c00244a6:	b8 06 00 00 00       	mov    eax,0x6
c00244ab:	85 d2                	test   edx,edx
c00244ad:	74 32                	je     c00244e1 <ATA::read(unsigned long long, int, void*)+0x61>
c00244af:	50                   	push   eax
c00244b0:	50                   	push   eax
c00244b1:	6a 00                	push   0x0
c00244b3:	52                   	push   edx
c00244b4:	53                   	push   ebx
c00244b5:	57                   	push   edi
c00244b6:	56                   	push   esi
c00244b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244bb:	e8 38 fc ff ff       	call   c00240f8 <ATA::access(unsigned long long, int, void*, bool)>
c00244c0:	83 c4 20             	add    esp,0x20
c00244c3:	85 c0                	test   eax,eax
c00244c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244c9:	75 11                	jne    c00244dc <ATA::read(unsigned long long, int, void*)+0x5c>
c00244cb:	01 1d 48 28 03 c0    	add    DWORD PTR ds:0xc0032848,ebx
c00244d1:	e8 fe c4 fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c00244d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244da:	eb 05                	jmp    c00244e1 <ATA::read(unsigned long long, int, void*)+0x61>
c00244dc:	b8 01 00 00 00       	mov    eax,0x1
c00244e1:	83 c4 10             	add    esp,0x10
c00244e4:	5b                   	pop    ebx
c00244e5:	5e                   	pop    esi
c00244e6:	5f                   	pop    edi
c00244e7:	c3                   	ret    

c00244e8 <ATA::write(unsigned long long, int, void*)>:
c00244e8:	57                   	push   edi
c00244e9:	b8 04 00 00 00       	mov    eax,0x4
c00244ee:	56                   	push   esi
c00244ef:	53                   	push   ebx
c00244f0:	83 ec 10             	sub    esp,0x10
c00244f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244fb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024502:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024506:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002450c:	77 3b                	ja     c0024549 <ATA::write(unsigned long long, int, void*)+0x61>
c002450e:	b8 06 00 00 00       	mov    eax,0x6
c0024513:	85 d2                	test   edx,edx
c0024515:	74 32                	je     c0024549 <ATA::write(unsigned long long, int, void*)+0x61>
c0024517:	50                   	push   eax
c0024518:	50                   	push   eax
c0024519:	6a 01                	push   0x1
c002451b:	52                   	push   edx
c002451c:	53                   	push   ebx
c002451d:	57                   	push   edi
c002451e:	56                   	push   esi
c002451f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024523:	e8 d0 fb ff ff       	call   c00240f8 <ATA::access(unsigned long long, int, void*, bool)>
c0024528:	83 c4 20             	add    esp,0x20
c002452b:	85 c0                	test   eax,eax
c002452d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024531:	75 11                	jne    c0024544 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024533:	01 1d 44 28 03 c0    	add    DWORD PTR ds:0xc0032844,ebx
c0024539:	e8 96 c4 fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c002453e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024542:	eb 05                	jmp    c0024549 <ATA::write(unsigned long long, int, void*)+0x61>
c0024544:	b8 01 00 00 00       	mov    eax,0x1
c0024549:	83 c4 10             	add    esp,0x10
c002454c:	5b                   	pop    ebx
c002454d:	5e                   	pop    esi
c002454e:	5f                   	pop    edi
c002454f:	c3                   	ret    

c0024550 <ATA::detectCHS()>:
c0024550:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024554:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002455a:	c1 e0 06             	shl    eax,0x6
c002455d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024563:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002456d:	c7 44 24 04 b7 ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ceb7
c0024575:	e9 eb 60 ff ff       	jmp    c001a665 <Krnl::panic(char const*)>

c002457a <ATA::open(int, int, void*)>:
c002457a:	53                   	push   ebx
c002457b:	83 ec 08             	sub    esp,0x8
c002457e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024582:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024586:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002458a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024590:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024596:	c1 e0 06             	shl    eax,0x6
c0024599:	01 d0                	add    eax,edx
c002459b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00245a2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245a8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245af:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245b9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245bf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00245c6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00245cd:	75 0c                	jne    c00245db <ATA::open(int, int, void*)+0x61>
c00245cf:	83 ec 0c             	sub    esp,0xc
c00245d2:	53                   	push   ebx
c00245d3:	e8 78 ff ff ff       	call   c0024550 <ATA::detectCHS()>
c00245d8:	83 c4 10             	add    esp,0x10
c00245db:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245e1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245e7:	c1 e0 06             	shl    eax,0x6
c00245ea:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245f1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245fb:	d1 e8                	shr    eax,1
c00245fd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024603:	6a 04                	push   0x4
c0024605:	6a 0c                	push   0xc
c0024607:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002460e:	50                   	push   eax
c002460f:	52                   	push   edx
c0024610:	e8 53 ea ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024615:	90                   	nop
c0024616:	90                   	nop
c0024617:	6a 00                	push   0x0
c0024619:	6a 0c                	push   0xc
c002461b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024622:	50                   	push   eax
c0024623:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024629:	e8 3a ea ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002462e:	83 c4 14             	add    esp,0x14
c0024631:	53                   	push   ebx
c0024632:	e8 33 02 ff ff       	call   c001486a <PhysicalDisk::startCache()>
c0024637:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002463a:	e8 ad 23 ff ff       	call   c00169ec <createPartitionsForDisk(PhysicalDisk*)>
c002463f:	31 c0                	xor    eax,eax
c0024641:	83 c4 18             	add    esp,0x18
c0024644:	5b                   	pop    ebx
c0024645:	c3                   	ret    

c0024646 <ATAPI::write(unsigned long long, int, void*)>:
c0024646:	b8 03 00 00 00       	mov    eax,0x3
c002464b:	c3                   	ret    

c002464c <ATAPI::close(int, int, void*)>:
c002464c:	83 ec 0c             	sub    esp,0xc
c002464f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024653:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024659:	85 c0                	test   eax,eax
c002465b:	74 0c                	je     c0024669 <ATAPI::close(int, int, void*)+0x1d>
c002465d:	83 ec 0c             	sub    esp,0xc
c0024660:	8b 10                	mov    edx,DWORD PTR [eax]
c0024662:	50                   	push   eax
c0024663:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024666:	83 c4 10             	add    esp,0x10
c0024669:	31 c0                	xor    eax,eax
c002466b:	83 c4 0c             	add    esp,0xc
c002466e:	c3                   	ret    
c002466f:	90                   	nop

c0024670 <ATAPI::ATAPI()>:
c0024670:	83 ec 0c             	sub    esp,0xc
c0024673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024677:	83 ec 04             	sub    esp,0x4
c002467a:	68 00 08 00 00       	push   0x800
c002467f:	68 f1 cf 02 c0       	push   0xc002cff1
c0024684:	50                   	push   eax
c0024685:	e8 78 01 ff ff       	call   c0014802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002468a:	83 c4 10             	add    esp,0x10
c002468d:	ba 0c cf 02 c0       	mov    edx,0xc002cf0c
c0024692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024696:	89 10                	mov    DWORD PTR [eax],edx
c0024698:	90                   	nop
c0024699:	83 c4 0c             	add    esp,0xc
c002469c:	c3                   	ret    
c002469d:	90                   	nop

c002469e <ATAPI::readyForCommand()>:
c002469e:	56                   	push   esi
c002469f:	53                   	push   ebx
c00246a0:	31 db                	xor    ebx,ebx
c00246a2:	50                   	push   eax
c00246a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246a7:	50                   	push   eax
c00246a8:	6a 0c                	push   0xc
c00246aa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246b1:	50                   	push   eax
c00246b2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246b8:	e8 6b ea ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c00246bd:	83 c4 10             	add    esp,0x10
c00246c0:	a8 88                	test   al,0x88
c00246c2:	74 23                	je     c00246e7 <ATAPI::readyForCommand()+0x49>
c00246c4:	43                   	inc    ebx
c00246c5:	83 fb 63             	cmp    ebx,0x63
c00246c8:	7e dd                	jle    c00246a7 <ATAPI::readyForCommand()+0x9>
c00246ca:	51                   	push   ecx
c00246cb:	51                   	push   ecx
c00246cc:	6a 00                	push   0x0
c00246ce:	68 40 42 0f 00       	push   0xf4240
c00246d3:	e8 d2 9c ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c00246d8:	83 c4 10             	add    esp,0x10
c00246db:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246e1:	75 c4                	jne    c00246a7 <ATAPI::readyForCommand()+0x9>
c00246e3:	31 c0                	xor    eax,eax
c00246e5:	eb 02                	jmp    c00246e9 <ATAPI::readyForCommand()+0x4b>
c00246e7:	b0 01                	mov    al,0x1
c00246e9:	5a                   	pop    edx
c00246ea:	5b                   	pop    ebx
c00246eb:	5e                   	pop    esi
c00246ec:	c3                   	ret    
c00246ed:	90                   	nop

c00246ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246ee:	55                   	push   ebp
c00246ef:	57                   	push   edi
c00246f0:	56                   	push   esi
c00246f1:	53                   	push   ebx
c00246f2:	83 ec 20             	sub    esp,0x20
c00246f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246f9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246fd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024701:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024705:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024709:	6a 01                	push   0x1
c002470b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024712:	50                   	push   eax
c0024713:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024719:	e8 56 eb ff ff       	call   c0023274 <IDE::enableIRQs(unsigned char, bool)>
c002471e:	5e                   	pop    esi
c002471f:	58                   	pop    eax
c0024720:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024727:	50                   	push   eax
c0024728:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002472e:	e8 0f e9 ff ff       	call   c0023042 <IDE::prepareInterrupt(unsigned char)>
c0024733:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024736:	e8 63 ff ff ff       	call   c002469e <ATAPI::readyForCommand()>
c002473b:	83 c4 10             	add    esp,0x10
c002473e:	84 c0                	test   al,al
c0024740:	75 0a                	jne    c002474c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024742:	bb 01 00 00 00       	mov    ebx,0x1
c0024747:	e9 57 02 00 00       	jmp    c00249a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002474c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024752:	c1 e0 04             	shl    eax,0x4
c0024755:	0f b6 c0             	movzx  eax,al
c0024758:	50                   	push   eax
c0024759:	6a 06                	push   0x6
c002475b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024762:	50                   	push   eax
c0024763:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024769:	e8 fa e8 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476e:	6a 00                	push   0x0
c0024770:	6a 01                	push   0x1
c0024772:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024779:	50                   	push   eax
c002477a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024780:	e8 e3 e8 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024785:	83 c4 20             	add    esp,0x20
c0024788:	0f b6 c3             	movzx  eax,bl
c002478b:	0f b6 df             	movzx  ebx,bh
c002478e:	50                   	push   eax
c002478f:	6a 04                	push   0x4
c0024791:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024798:	50                   	push   eax
c0024799:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002479f:	e8 c4 e8 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a4:	53                   	push   ebx
c00247a5:	6a 05                	push   0x5
c00247a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ae:	50                   	push   eax
c00247af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b5:	e8 ae e8 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247ba:	83 c4 20             	add    esp,0x20
c00247bd:	68 a0 00 00 00       	push   0xa0
c00247c2:	6a 07                	push   0x7
c00247c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247cb:	50                   	push   eax
c00247cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d2:	e8 91 e8 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247d7:	83 c4 0c             	add    esp,0xc
c00247da:	6a 01                	push   0x1
c00247dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e3:	50                   	push   eax
c00247e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ea:	e8 25 f4 ff ff       	call   c0023c14 <IDE::polling(unsigned char, unsigned int)>
c00247ef:	83 c4 10             	add    esp,0x10
c00247f2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247f8:	84 c0                	test   al,al
c00247fa:	74 23                	je     c002481f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247fc:	0f b6 d8             	movzx  ebx,al
c00247ff:	0f b6 d2             	movzx  edx,dl
c0024802:	53                   	push   ebx
c0024803:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002480a:	50                   	push   eax
c002480b:	52                   	push   edx
c002480c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024812:	e8 67 f2 ff ff       	call   c0023a7e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024817:	83 c4 10             	add    esp,0x10
c002481a:	e9 84 01 00 00       	jmp    c00249a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002481f:	0f b6 d2             	movzx  edx,dl
c0024822:	53                   	push   ebx
c0024823:	53                   	push   ebx
c0024824:	52                   	push   edx
c0024825:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482b:	e8 26 e8 ff ff       	call   c0023056 <IDE::getBase(unsigned char)>
c0024830:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024834:	b9 06 00 00 00       	mov    ecx,0x6
c0024839:	89 c2                	mov    edx,eax
c002483b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002483e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024842:	83 c4 10             	add    esp,0x10
c0024845:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002484b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024852:	85 db                	test   ebx,ebx
c0024854:	0f 84 ec 00 00 00    	je     c0024946 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002485a:	51                   	push   ecx
c002485b:	51                   	push   ecx
c002485c:	52                   	push   edx
c002485d:	50                   	push   eax
c002485e:	e8 73 e9 ff ff       	call   c00231d6 <IDE::waitInterrupt(unsigned char)>
c0024863:	83 c4 10             	add    esp,0x10
c0024866:	84 c0                	test   al,al
c0024868:	0f 84 d4 fe ff ff    	je     c0024742 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002486e:	56                   	push   esi
c002486f:	56                   	push   esi
c0024870:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024877:	50                   	push   eax
c0024878:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002487e:	e8 bf e7 ff ff       	call   c0023042 <IDE::prepareInterrupt(unsigned char)>
c0024883:	83 c4 0c             	add    esp,0xc
c0024886:	6a 04                	push   0x4
c0024888:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002488f:	50                   	push   eax
c0024890:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024896:	e8 8d e8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c002489b:	83 c4 0c             	add    esp,0xc
c002489e:	89 c6                	mov    esi,eax
c00248a0:	6a 05                	push   0x5
c00248a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a9:	50                   	push   eax
c00248aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b0:	e8 73 e8 ff ff       	call   c0023128 <IDE::read(unsigned char, unsigned char)>
c00248b5:	89 f1                	mov    ecx,esi
c00248b7:	0f b6 c0             	movzx  eax,al
c00248ba:	0f b6 f1             	movzx  esi,cl
c00248bd:	c1 e0 08             	shl    eax,0x8
c00248c0:	09 c6                	or     esi,eax
c00248c2:	d1 fe                	sar    esi,1
c00248c4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00248c8:	83 c4 10             	add    esp,0x10
c00248cb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00248d0:	74 41                	je     c0024913 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00248d2:	31 c9                	xor    ecx,ecx
c00248d4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248da:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248e1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248e5:	75 0a                	jne    c00248f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248e7:	01 c9                	add    ecx,ecx
c00248e9:	01 cd                	add    ebp,ecx
c00248eb:	4b                   	dec    ebx
c00248ec:	e9 54 ff ff ff       	jmp    c0024845 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248f1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248fa:	51                   	push   ecx
c00248fb:	51                   	push   ecx
c00248fc:	52                   	push   edx
c00248fd:	50                   	push   eax
c00248fe:	e8 53 e7 ff ff       	call   c0023056 <IDE::getBase(unsigned char)>
c0024903:	89 c2                	mov    edx,eax
c0024905:	89 f0                	mov    eax,esi
c0024907:	66 ef                	out    dx,ax
c0024909:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002490d:	83 c4 10             	add    esp,0x10
c0024910:	41                   	inc    ecx
c0024911:	eb c1                	jmp    c00248d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024913:	31 f6                	xor    esi,esi
c0024915:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002491b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024922:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024926:	75 06                	jne    c002492e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024928:	01 f6                	add    esi,esi
c002492a:	01 f5                	add    ebp,esi
c002492c:	eb bd                	jmp    c00248eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002492e:	51                   	push   ecx
c002492f:	51                   	push   ecx
c0024930:	52                   	push   edx
c0024931:	50                   	push   eax
c0024932:	e8 1f e7 ff ff       	call   c0023056 <IDE::getBase(unsigned char)>
c0024937:	89 c2                	mov    edx,eax
c0024939:	66 ed                	in     ax,dx
c002493b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024940:	83 c4 10             	add    esp,0x10
c0024943:	46                   	inc    esi
c0024944:	eb cf                	jmp    c0024915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024946:	51                   	push   ecx
c0024947:	51                   	push   ecx
c0024948:	52                   	push   edx
c0024949:	50                   	push   eax
c002494a:	e8 87 e8 ff ff       	call   c00231d6 <IDE::waitInterrupt(unsigned char)>
c002494f:	83 c4 10             	add    esp,0x10
c0024952:	84 c0                	test   al,al
c0024954:	0f 84 e8 fd ff ff    	je     c0024742 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002495a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002495f:	52                   	push   edx
c0024960:	52                   	push   edx
c0024961:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024968:	50                   	push   eax
c0024969:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002496f:	e8 ce e6 ff ff       	call   c0023042 <IDE::prepareInterrupt(unsigned char)>
c0024974:	83 c4 10             	add    esp,0x10
c0024977:	50                   	push   eax
c0024978:	50                   	push   eax
c0024979:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024980:	50                   	push   eax
c0024981:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024987:	e8 ca e6 ff ff       	call   c0023056 <IDE::getBase(unsigned char)>
c002498c:	8d 50 07             	lea    edx,[eax+0x7]
c002498f:	ec                   	in     al,dx
c0024990:	83 c4 10             	add    esp,0x10
c0024993:	a8 88                	test   al,0x88
c0024995:	74 0a                	je     c00249a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024997:	4b                   	dec    ebx
c0024998:	75 dd                	jne    c0024977 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002499a:	bb 02 00 00 00       	mov    ebx,0x2
c002499f:	eb 02                	jmp    c00249a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249a1:	31 db                	xor    ebx,ebx
c00249a3:	83 c4 1c             	add    esp,0x1c
c00249a6:	89 d8                	mov    eax,ebx
c00249a8:	5b                   	pop    ebx
c00249a9:	5e                   	pop    esi
c00249aa:	5f                   	pop    edi
c00249ab:	5d                   	pop    ebp
c00249ac:	c3                   	ret    
c00249ad:	90                   	nop

c00249ae <ATAPI::diskRemoved()>:
c00249ae:	83 ec 18             	sub    esp,0x18
c00249b1:	68 fd cf 02 c0       	push   0xc002cffd
c00249b6:	e8 fc e5 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00249bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249bf:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00249c6:	83 c4 1c             	add    esp,0x1c
c00249c9:	c3                   	ret    

c00249ca <ATAPI::eject()>:
c00249ca:	57                   	push   edi
c00249cb:	b9 03 00 00 00       	mov    ecx,0x3
c00249d0:	53                   	push   ebx
c00249d1:	83 ec 14             	sub    esp,0x14
c00249d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00249d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249dc:	fc                   	cld    
c00249dd:	31 c0                	xor    eax,eax
c00249df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249e1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249e6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249eb:	50                   	push   eax
c00249ec:	50                   	push   eax
c00249ed:	6a 00                	push   0x0
c00249ef:	6a 00                	push   0x0
c00249f1:	6a 00                	push   0x0
c00249f3:	6a 02                	push   0x2
c00249f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249f9:	50                   	push   eax
c00249fa:	53                   	push   ebx
c00249fb:	e8 ee fc ff ff       	call   c00246ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a00:	83 c4 14             	add    esp,0x14
c0024a03:	53                   	push   ebx
c0024a04:	e8 a5 ff ff ff       	call   c00249ae <ATAPI::diskRemoved()>
c0024a09:	83 c4 24             	add    esp,0x24
c0024a0c:	31 c0                	xor    eax,eax
c0024a0e:	5b                   	pop    ebx
c0024a0f:	5f                   	pop    edi
c0024a10:	c3                   	ret    
c0024a11:	90                   	nop

c0024a12 <ATAPI::diskInserted()>:
c0024a12:	53                   	push   ebx
c0024a13:	83 ec 14             	sub    esp,0x14
c0024a16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a1a:	68 14 d0 02 c0       	push   0xc002d014
c0024a1f:	e8 93 e5 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0024a24:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a2e:	e8 37 fe fe ff       	call   c001486a <PhysicalDisk::startCache()>
c0024a33:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a37:	83 c4 18             	add    esp,0x18
c0024a3a:	5b                   	pop    ebx
c0024a3b:	e9 ac 1f ff ff       	jmp    c00169ec <createPartitionsForDisk(PhysicalDisk*)>

c0024a40 <ATAPI::detectMedia()>:
c0024a40:	56                   	push   esi
c0024a41:	53                   	push   ebx
c0024a42:	83 ec 28             	sub    esp,0x28
c0024a45:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a49:	6a 0c                	push   0xc
c0024a4b:	6a 00                	push   0x0
c0024a4d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a51:	56                   	push   esi
c0024a52:	e8 21 bd fd ff       	call   c0000778 <memset>
c0024a57:	58                   	pop    eax
c0024a58:	5a                   	pop    edx
c0024a59:	6a 00                	push   0x0
c0024a5b:	6a 00                	push   0x0
c0024a5d:	6a 00                	push   0x0
c0024a5f:	6a 00                	push   0x0
c0024a61:	56                   	push   esi
c0024a62:	53                   	push   ebx
c0024a63:	e8 86 fc ff ff       	call   c00246ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a68:	83 c4 1c             	add    esp,0x1c
c0024a6b:	6a 0c                	push   0xc
c0024a6d:	6a 00                	push   0x0
c0024a6f:	56                   	push   esi
c0024a70:	e8 03 bd fd ff       	call   c0000778 <memset>
c0024a75:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a7a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a7f:	59                   	pop    ecx
c0024a80:	58                   	pop    eax
c0024a81:	6a 01                	push   0x1
c0024a83:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a87:	50                   	push   eax
c0024a88:	6a 00                	push   0x0
c0024a8a:	6a 12                	push   0x12
c0024a8c:	56                   	push   esi
c0024a8d:	53                   	push   ebx
c0024a8e:	e8 5b fc ff ff       	call   c00246ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a93:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a97:	83 c4 20             	add    esp,0x20
c0024a9a:	83 e0 7f             	and    eax,0x7f
c0024a9d:	3c 70                	cmp    al,0x70
c0024a9f:	74 15                	je     c0024ab6 <ATAPI::detectMedia()+0x76>
c0024aa1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024aa8:	75 0c                	jne    c0024ab6 <ATAPI::detectMedia()+0x76>
c0024aaa:	83 ec 0c             	sub    esp,0xc
c0024aad:	53                   	push   ebx
c0024aae:	e8 5f ff ff ff       	call   c0024a12 <ATAPI::diskInserted()>
c0024ab3:	83 c4 10             	add    esp,0x10
c0024ab6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024aba:	83 e0 0f             	and    eax,0xf
c0024abd:	3c 02                	cmp    al,0x2
c0024abf:	75 1b                	jne    c0024adc <ATAPI::detectMedia()+0x9c>
c0024ac1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ac6:	75 2d                	jne    c0024af5 <ATAPI::detectMedia()+0xb5>
c0024ac8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024acf:	74 24                	je     c0024af5 <ATAPI::detectMedia()+0xb5>
c0024ad1:	83 ec 0c             	sub    esp,0xc
c0024ad4:	53                   	push   ebx
c0024ad5:	e8 d4 fe ff ff       	call   c00249ae <ATAPI::diskRemoved()>
c0024ada:	eb 16                	jmp    c0024af2 <ATAPI::detectMedia()+0xb2>
c0024adc:	84 c0                	test   al,al
c0024ade:	75 15                	jne    c0024af5 <ATAPI::detectMedia()+0xb5>
c0024ae0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ae7:	75 0c                	jne    c0024af5 <ATAPI::detectMedia()+0xb5>
c0024ae9:	83 ec 0c             	sub    esp,0xc
c0024aec:	53                   	push   ebx
c0024aed:	e8 20 ff ff ff       	call   c0024a12 <ATAPI::diskInserted()>
c0024af2:	83 c4 10             	add    esp,0x10
c0024af5:	83 c4 24             	add    esp,0x24
c0024af8:	5b                   	pop    ebx
c0024af9:	5e                   	pop    esi
c0024afa:	c3                   	ret    
c0024afb:	90                   	nop

c0024afc <ATAPI::open(int, int, void*)>:
c0024afc:	53                   	push   ebx
c0024afd:	83 ec 08             	sub    esp,0x8
c0024b00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b0c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b12:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b18:	c1 e0 06             	shl    eax,0x6
c0024b1b:	01 d0                	add    eax,edx
c0024b1d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b24:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b2a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b31:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b3b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b41:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b48:	6a 04                	push   0x4
c0024b4a:	6a 0c                	push   0xc
c0024b4c:	51                   	push   ecx
c0024b4d:	52                   	push   edx
c0024b4e:	e8 15 e5 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b53:	90                   	nop
c0024b54:	90                   	nop
c0024b55:	6a 00                	push   0x0
c0024b57:	6a 0c                	push   0xc
c0024b59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b60:	50                   	push   eax
c0024b61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b67:	e8 fc e4 ff ff       	call   c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b6c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b73:	83 c4 14             	add    esp,0x14
c0024b76:	53                   	push   ebx
c0024b77:	e8 c4 fe ff ff       	call   c0024a40 <ATAPI::detectMedia()>
c0024b7c:	31 c0                	xor    eax,eax
c0024b7e:	83 c4 18             	add    esp,0x18
c0024b81:	5b                   	pop    ebx
c0024b82:	c3                   	ret    
c0024b83:	90                   	nop

c0024b84 <ATAPI::read(unsigned long long, int, void*)>:
c0024b84:	55                   	push   ebp
c0024b85:	57                   	push   edi
c0024b86:	56                   	push   esi
c0024b87:	53                   	push   ebx
c0024b88:	83 ec 1c             	sub    esp,0x1c
c0024b8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b97:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b9e:	74 41                	je     c0024be1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024ba0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ba4:	b9 03 00 00 00       	mov    ecx,0x3
c0024ba9:	fc                   	cld    
c0024baa:	31 c0                	xor    eax,eax
c0024bac:	86 fb                	xchg   bl,bh
c0024bae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024bb0:	c1 c3 10             	rol    ebx,0x10
c0024bb3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bb8:	89 e8                	mov    eax,ebp
c0024bba:	86 fb                	xchg   bl,bh
c0024bbc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bc0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024bc4:	50                   	push   eax
c0024bc5:	50                   	push   eax
c0024bc6:	55                   	push   ebp
c0024bc7:	c1 e5 0b             	shl    ebp,0xb
c0024bca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024bce:	6a 00                	push   0x0
c0024bd0:	55                   	push   ebp
c0024bd1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024bd5:	50                   	push   eax
c0024bd6:	56                   	push   esi
c0024bd7:	e8 12 fb ff ff       	call   c00246ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bdc:	83 c4 20             	add    esp,0x20
c0024bdf:	eb 1a                	jmp    c0024bfb <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024be1:	83 ec 0c             	sub    esp,0xc
c0024be4:	56                   	push   esi
c0024be5:	e8 56 fe ff ff       	call   c0024a40 <ATAPI::detectMedia()>
c0024bea:	83 c4 10             	add    esp,0x10
c0024bed:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bf4:	75 aa                	jne    c0024ba0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bf6:	b8 02 00 00 00       	mov    eax,0x2
c0024bfb:	83 c4 1c             	add    esp,0x1c
c0024bfe:	5b                   	pop    ebx
c0024bff:	5e                   	pop    esi
c0024c00:	5f                   	pop    edi
c0024c01:	5d                   	pop    ebp
c0024c02:	c3                   	ret    
c0024c03:	90                   	nop

c0024c04 <SATA::close(int, int, void*)>:
c0024c04:	83 ec 0c             	sub    esp,0xc
c0024c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c11:	85 c0                	test   eax,eax
c0024c13:	74 0c                	je     c0024c21 <SATA::close(int, int, void*)+0x1d>
c0024c15:	83 ec 0c             	sub    esp,0xc
c0024c18:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c1a:	50                   	push   eax
c0024c1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c1e:	83 c4 10             	add    esp,0x10
c0024c21:	31 c0                	xor    eax,eax
c0024c23:	83 c4 0c             	add    esp,0xc
c0024c26:	c3                   	ret    
c0024c27:	90                   	nop

c0024c28 <SATA::powerSaving(PowerSavingLevel)>:
c0024c28:	c3                   	ret    
c0024c29:	90                   	nop

c0024c2a <SATA::open(int, int, void*)>:
c0024c2a:	56                   	push   esi
c0024c2b:	53                   	push   ebx
c0024c2c:	50                   	push   eax
c0024c2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c3f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c45:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c53:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c5d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c63:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c6a:	e8 76 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024c6f:	89 c6                	mov    esi,eax
c0024c71:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c77:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c7d:	e8 63 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024c82:	39 c6                	cmp    esi,eax
c0024c84:	74 10                	je     c0024c96 <SATA::open(int, int, void*)+0x6c>
c0024c86:	83 ec 0c             	sub    esp,0xc
c0024c89:	68 3c cf 02 c0       	push   0xc002cf3c
c0024c8e:	e8 d2 59 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0024c93:	83 c4 10             	add    esp,0x10
c0024c96:	83 ec 0c             	sub    esp,0xc
c0024c99:	6a 02                	push   0x2
c0024c9b:	e8 df ce fe ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0024ca0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ca6:	e8 6f d1 fe ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0024cab:	6a 03                	push   0x3
c0024cad:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024cb3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024cb9:	50                   	push   eax
c0024cba:	e8 ad d6 fe ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cbf:	83 c4 14             	add    esp,0x14
c0024cc2:	53                   	push   ebx
c0024cc3:	e8 a2 fb fe ff       	call   c001486a <PhysicalDisk::startCache()>
c0024cc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ccb:	e8 1c 1d ff ff       	call   c00169ec <createPartitionsForDisk(PhysicalDisk*)>
c0024cd0:	83 c4 14             	add    esp,0x14
c0024cd3:	31 c0                	xor    eax,eax
c0024cd5:	5b                   	pop    ebx
c0024cd6:	5e                   	pop    esi
c0024cd7:	c3                   	ret    

c0024cd8 <SATA::SATA()>:
c0024cd8:	83 ec 0c             	sub    esp,0xc
c0024cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cdf:	83 ec 04             	sub    esp,0x4
c0024ce2:	68 00 02 00 00       	push   0x200
c0024ce7:	68 50 cf 02 c0       	push   0xc002cf50
c0024cec:	50                   	push   eax
c0024ced:	e8 10 fb fe ff       	call   c0014802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024cf2:	83 c4 10             	add    esp,0x10
c0024cf5:	ba c0 cf 02 c0       	mov    edx,0xc002cfc0
c0024cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cfe:	89 10                	mov    DWORD PTR [eax],edx
c0024d00:	90                   	nop
c0024d01:	83 c4 0c             	add    esp,0xc
c0024d04:	c3                   	ret    
c0024d05:	90                   	nop

c0024d06 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d06:	55                   	push   ebp
c0024d07:	57                   	push   edi
c0024d08:	56                   	push   esi
c0024d09:	53                   	push   ebx
c0024d0a:	83 ec 2c             	sub    esp,0x2c
c0024d0d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d11:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d19:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d1d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d21:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d2a:	7e 10                	jle    c0024d3c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d2c:	83 ec 0c             	sub    esp,0xc
c0024d2f:	68 60 cf 02 c0       	push   0xc002cf60
c0024d34:	e8 2c 59 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0024d39:	83 c4 10             	add    esp,0x10
c0024d3c:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d42:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d52:	89 f0                	mov    eax,esi
c0024d54:	c1 e0 07             	shl    eax,0x7
c0024d57:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d5b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d65:	53                   	push   ebx
c0024d66:	8d 46 02             	lea    eax,[esi+0x2]
c0024d69:	53                   	push   ebx
c0024d6a:	c1 e0 07             	shl    eax,0x7
c0024d6d:	bb 01 00 00 00       	mov    ebx,0x1
c0024d72:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d76:	50                   	push   eax
c0024d77:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d7d:	e8 aa ef ff ff       	call   c0023d2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d86:	83 c4 10             	add    esp,0x10
c0024d89:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d8e:	0f 84 ce 01 00 00    	je     c0024f62 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d94:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d98:	c1 e0 09             	shl    eax,0x9
c0024d9b:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024da4:	74 17                	je     c0024dbd <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024da6:	51                   	push   ecx
c0024da7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024dab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024daf:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024db5:	e8 8a b9 fd ff       	call   c0000744 <memcpy>
c0024dba:	83 c4 10             	add    esp,0x10
c0024dbd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dc3:	8d 46 02             	lea    eax,[esi+0x2]
c0024dc6:	c1 e0 07             	shl    eax,0x7
c0024dc9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0024dcf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024dd5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ddb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ddf:	c1 e1 05             	shl    ecx,0x5
c0024de2:	01 c8                	add    eax,ecx
c0024de4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024de8:	8a 18                	mov    bl,BYTE PTR [eax]
c0024dea:	83 e1 01             	and    ecx,0x1
c0024ded:	83 e3 bf             	and    ebx,0xffffffbf
c0024df0:	c1 e1 06             	shl    ecx,0x6
c0024df3:	09 d9                	or     ecx,ebx
c0024df5:	88 08                	mov    BYTE PTR [eax],cl
c0024df7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024df9:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024dff:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e05:	89 08                	mov    DWORD PTR [eax],ecx
c0024e07:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e0d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e13:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e19:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e1c:	52                   	push   edx
c0024e1d:	68 90 00 00 00       	push   0x90
c0024e22:	6a 00                	push   0x0
c0024e24:	53                   	push   ebx
c0024e25:	e8 4e b9 fd ff       	call   c0000778 <memset>
c0024e2a:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e30:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e34:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e3a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e42:	83 c4 10             	add    esp,0x10
c0024e45:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e48:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e4e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e54:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e59:	09 c8                	or     eax,ecx
c0024e5b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e61:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e64:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e6b:	66 25 00 7f          	and    ax,0x7f00
c0024e6f:	66 0d 27 80          	or     ax,0x8027
c0024e73:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e78:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e7b:	19 c0                	sbb    eax,eax
c0024e7d:	83 e0 f0             	and    eax,0xfffffff0
c0024e80:	83 c0 35             	add    eax,0x35
c0024e83:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e86:	89 f8                	mov    eax,edi
c0024e88:	c1 e8 10             	shr    eax,0x10
c0024e8b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e8e:	89 f8                	mov    eax,edi
c0024e90:	c1 e8 18             	shr    eax,0x18
c0024e93:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e96:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e9a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ea1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ea4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ea8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024eac:	89 f3                	mov    ebx,esi
c0024eae:	31 c0                	xor    eax,eax
c0024eb0:	c1 e3 07             	shl    ebx,0x7
c0024eb3:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024eb7:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024ebd:	80 e1 88             	and    cl,0x88
c0024ec0:	74 0a                	je     c0024ecc <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024ec2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ec7:	74 0a                	je     c0024ed3 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024ec9:	40                   	inc    eax
c0024eca:	eb eb                	jmp    c0024eb7 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024ecc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ed1:	75 0a                	jne    c0024edd <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024ed3:	83 ec 0c             	sub    esp,0xc
c0024ed6:	68 99 cf 02 c0       	push   0xc002cf99
c0024edb:	eb 56                	jmp    c0024f33 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024edd:	b8 01 00 00 00       	mov    eax,0x1
c0024ee2:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024ee6:	c1 e6 07             	shl    esi,0x7
c0024ee9:	d3 e0                	shl    eax,cl
c0024eeb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024eef:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ef5:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024efb:	85 c8                	test   eax,ecx
c0024efd:	74 20                	je     c0024f1f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024eff:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f05:	0f ba e1 1e          	bt     ecx,0x1e
c0024f09:	73 ea                	jae    c0024ef5 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f0b:	83 ec 0c             	sub    esp,0xc
c0024f0e:	31 db                	xor    ebx,ebx
c0024f10:	68 a7 cf 02 c0       	push   0xc002cfa7
c0024f15:	e8 4b 57 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0024f1a:	83 c4 10             	add    esp,0x10
c0024f1d:	eb 43                	jmp    c0024f62 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f1f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f25:	0f ba e0 1e          	bt     eax,0x1e
c0024f29:	73 17                	jae    c0024f42 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f2b:	83 ec 0c             	sub    esp,0xc
c0024f2e:	68 a7 cf 02 c0       	push   0xc002cfa7
c0024f33:	e8 2d 57 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0024f38:	bb 01 00 00 00       	mov    ebx,0x1
c0024f3d:	83 c4 10             	add    esp,0x10
c0024f40:	eb 20                	jmp    c0024f62 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f42:	31 db                	xor    ebx,ebx
c0024f44:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f49:	75 17                	jne    c0024f62 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f4b:	50                   	push   eax
c0024f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f50:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f5a:	e8 e5 b7 fd ff       	call   c0000744 <memcpy>
c0024f5f:	83 c4 10             	add    esp,0x10
c0024f62:	83 c4 2c             	add    esp,0x2c
c0024f65:	89 d8                	mov    eax,ebx
c0024f67:	5b                   	pop    ebx
c0024f68:	5e                   	pop    esi
c0024f69:	5f                   	pop    edi
c0024f6a:	5d                   	pop    ebp
c0024f6b:	c3                   	ret    

c0024f6c <SATA::read(unsigned long long, int, void*)>:
c0024f6c:	57                   	push   edi
c0024f6d:	b8 04 00 00 00       	mov    eax,0x4
c0024f72:	56                   	push   esi
c0024f73:	53                   	push   ebx
c0024f74:	83 ec 10             	sub    esp,0x10
c0024f77:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f7f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f82:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f8a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f90:	77 3b                	ja     c0024fcd <SATA::read(unsigned long long, int, void*)+0x61>
c0024f92:	b8 06 00 00 00       	mov    eax,0x6
c0024f97:	85 d2                	test   edx,edx
c0024f99:	74 32                	je     c0024fcd <SATA::read(unsigned long long, int, void*)+0x61>
c0024f9b:	50                   	push   eax
c0024f9c:	50                   	push   eax
c0024f9d:	6a 00                	push   0x0
c0024f9f:	52                   	push   edx
c0024fa0:	53                   	push   ebx
c0024fa1:	57                   	push   edi
c0024fa2:	56                   	push   esi
c0024fa3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fa7:	e8 5a fd ff ff       	call   c0024d06 <SATA::access(unsigned long long, int, void*, bool)>
c0024fac:	83 c4 20             	add    esp,0x20
c0024faf:	85 c0                	test   eax,eax
c0024fb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fb5:	75 11                	jne    c0024fc8 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024fb7:	01 1d 48 28 03 c0    	add    DWORD PTR ds:0xc0032848,ebx
c0024fbd:	e8 12 ba fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c0024fc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024fc6:	eb 05                	jmp    c0024fcd <SATA::read(unsigned long long, int, void*)+0x61>
c0024fc8:	b8 01 00 00 00       	mov    eax,0x1
c0024fcd:	83 c4 10             	add    esp,0x10
c0024fd0:	5b                   	pop    ebx
c0024fd1:	5e                   	pop    esi
c0024fd2:	5f                   	pop    edi
c0024fd3:	c3                   	ret    

c0024fd4 <SATA::write(unsigned long long, int, void*)>:
c0024fd4:	55                   	push   ebp
c0024fd5:	b8 04 00 00 00       	mov    eax,0x4
c0024fda:	57                   	push   edi
c0024fdb:	56                   	push   esi
c0024fdc:	53                   	push   ebx
c0024fdd:	83 ec 1c             	sub    esp,0x1c
c0024fe0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024fe4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fe8:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024feb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024ff3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ff9:	77 56                	ja     c0025051 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024ffb:	b8 06 00 00 00       	mov    eax,0x6
c0025000:	85 ff                	test   edi,edi
c0025002:	74 4d                	je     c0025051 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025004:	89 ee                	mov    esi,ebp
c0025006:	c1 e6 09             	shl    esi,0x9
c0025009:	01 fe                	add    esi,edi
c002500b:	89 c8                	mov    eax,ecx
c002500d:	89 da                	mov    edx,ebx
c002500f:	83 c0 01             	add    eax,0x1
c0025012:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025016:	83 d2 00             	adc    edx,0x0
c0025019:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002501d:	50                   	push   eax
c002501e:	50                   	push   eax
c002501f:	6a 01                	push   0x1
c0025021:	57                   	push   edi
c0025022:	81 c7 00 02 00 00    	add    edi,0x200
c0025028:	6a 01                	push   0x1
c002502a:	53                   	push   ebx
c002502b:	51                   	push   ecx
c002502c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025030:	e8 d1 fc ff ff       	call   c0024d06 <SATA::access(unsigned long long, int, void*, bool)>
c0025035:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025039:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002503d:	83 c4 20             	add    esp,0x20
c0025040:	39 f7                	cmp    edi,esi
c0025042:	75 c7                	jne    c002500b <SATA::write(unsigned long long, int, void*)+0x37>
c0025044:	01 2d 44 28 03 c0    	add    DWORD PTR ds:0xc0032844,ebp
c002504a:	e8 85 b9 fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c002504f:	31 c0                	xor    eax,eax
c0025051:	83 c4 1c             	add    esp,0x1c
c0025054:	5b                   	pop    ebx
c0025055:	5e                   	pop    esi
c0025056:	5f                   	pop    edi
c0025057:	5d                   	pop    ebp
c0025058:	c3                   	ret    
c0025059:	90                   	nop

c002505a <SATAPI::write(unsigned long long, int, void*)>:
c002505a:	b8 03 00 00 00       	mov    eax,0x3
c002505f:	c3                   	ret    

c0025060 <SATAPI::close(int, int, void*)>:
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025067:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002506d:	85 c0                	test   eax,eax
c002506f:	74 0c                	je     c002507d <SATAPI::close(int, int, void*)+0x1d>
c0025071:	83 ec 0c             	sub    esp,0xc
c0025074:	8b 10                	mov    edx,DWORD PTR [eax]
c0025076:	50                   	push   eax
c0025077:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002507a:	83 c4 10             	add    esp,0x10
c002507d:	31 c0                	xor    eax,eax
c002507f:	83 c4 0c             	add    esp,0xc
c0025082:	c3                   	ret    
c0025083:	90                   	nop

c0025084 <SATAPI::SATAPI()>:
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002508b:	83 ec 04             	sub    esp,0x4
c002508e:	68 00 08 00 00       	push   0x800
c0025093:	68 f0 cf 02 c0       	push   0xc002cff0
c0025098:	50                   	push   eax
c0025099:	e8 64 f7 fe ff       	call   c0014802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002509e:	83 c4 10             	add    esp,0x10
c00250a1:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c00250a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250aa:	89 10                	mov    DWORD PTR [eax],edx
c00250ac:	90                   	nop
c00250ad:	83 c4 0c             	add    esp,0xc
c00250b0:	c3                   	ret    
c00250b1:	90                   	nop

c00250b2 <SATAPI::diskRemoved()>:
c00250b2:	83 ec 18             	sub    esp,0x18
c00250b5:	68 fc cf 02 c0       	push   0xc002cffc
c00250ba:	e8 f8 de fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00250bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250c3:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00250ca:	83 c4 1c             	add    esp,0x1c
c00250cd:	c3                   	ret    

c00250ce <SATAPI::diskInserted()>:
c00250ce:	53                   	push   ebx
c00250cf:	83 ec 14             	sub    esp,0x14
c00250d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00250d6:	68 13 d0 02 c0       	push   0xc002d013
c00250db:	e8 d7 de fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00250e0:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250ea:	e8 7b f7 fe ff       	call   c001486a <PhysicalDisk::startCache()>
c00250ef:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250f3:	83 c4 18             	add    esp,0x18
c00250f6:	5b                   	pop    ebx
c00250f7:	e9 f0 18 ff ff       	jmp    c00169ec <createPartitionsForDisk(PhysicalDisk*)>

c00250fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250fc:	55                   	push   ebp
c00250fd:	57                   	push   edi
c00250fe:	56                   	push   esi
c00250ff:	53                   	push   ebx
c0025100:	83 ec 24             	sub    esp,0x24
c0025103:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025107:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002510b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025111:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025115:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025119:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002511f:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025122:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025128:	c1 e3 07             	shl    ebx,0x7
c002512b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002512f:	89 f8                	mov    eax,edi
c0025131:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025135:	c1 e0 07             	shl    eax,0x7
c0025138:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002513c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025140:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002514a:	53                   	push   ebx
c002514b:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025151:	e8 d6 eb ff ff       	call   c0023d2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025156:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002515a:	83 c4 10             	add    esp,0x10
c002515d:	b8 01 00 00 00       	mov    eax,0x1
c0025162:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025167:	0f 84 8a 01 00 00    	je     c00252f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002516d:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025173:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025175:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002517b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025181:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025185:	c1 e1 05             	shl    ecx,0x5
c0025188:	01 c8                	add    eax,ecx
c002518a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002518c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025192:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025198:	89 08                	mov    DWORD PTR [eax],ecx
c002519a:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251a0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251a6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251ac:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251af:	52                   	push   edx
c00251b0:	68 90 00 00 00       	push   0x90
c00251b5:	6a 00                	push   0x0
c00251b7:	53                   	push   ebx
c00251b8:	e8 bb b5 fd ff       	call   c0000778 <memset>
c00251bd:	83 c4 0c             	add    esp,0xc
c00251c0:	8d 43 40             	lea    eax,[ebx+0x40]
c00251c3:	6a 0c                	push   0xc
c00251c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251c9:	50                   	push   eax
c00251ca:	e8 75 b5 fd ff       	call   c0000744 <memcpy>
c00251cf:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00251d5:	89 ea                	mov    edx,ebp
c00251d7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251dd:	c1 ea 18             	shr    edx,0x18
c00251e0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251e4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251e7:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251ea:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251ee:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251f4:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251fa:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251ff:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025203:	09 c8                	or     eax,ecx
c0025205:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025209:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002520f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025212:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025219:	66 25 00 7f          	and    ax,0x7f00
c002521d:	66 0d 27 80          	or     ax,0x8027
c0025221:	66 89 03             	mov    WORD PTR [ebx],ax
c0025224:	89 e8                	mov    eax,ebp
c0025226:	c1 e8 10             	shr    eax,0x10
c0025229:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002522c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025230:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025237:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002523a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002523e:	83 c4 10             	add    esp,0x10
c0025241:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025245:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025249:	31 c0                	xor    eax,eax
c002524b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025251:	80 e1 88             	and    cl,0x88
c0025254:	74 0a                	je     c0025260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025256:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002525b:	74 0a                	je     c0025267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002525d:	40                   	inc    eax
c002525e:	eb eb                	jmp    c002524b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025260:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025265:	75 0f                	jne    c0025276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025267:	83 ec 0c             	sub    esp,0xc
c002526a:	68 99 cf 02 c0       	push   0xc002cf99
c002526f:	e8 f1 53 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0025274:	eb 3a                	jmp    c00252b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025276:	b8 01 00 00 00       	mov    eax,0x1
c002527b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002527f:	c1 e7 07             	shl    edi,0x7
c0025282:	d3 e0                	shl    eax,cl
c0025284:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025287:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002528d:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025293:	85 d0                	test   eax,edx
c0025295:	74 23                	je     c00252ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025297:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002529d:	0f ba e2 1e          	bt     edx,0x1e
c00252a1:	73 ea                	jae    c002528d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00252a3:	83 ec 0c             	sub    esp,0xc
c00252a6:	68 2b d0 02 c0       	push   0xc002d02b
c00252ab:	e8 07 dd fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00252b0:	83 c4 10             	add    esp,0x10
c00252b3:	b8 01 00 00 00       	mov    eax,0x1
c00252b8:	eb 3d                	jmp    c00252f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252ba:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252c0:	0f ba e0 1e          	bt     eax,0x1e
c00252c4:	73 0a                	jae    c00252d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00252c6:	83 ec 0c             	sub    esp,0xc
c00252c9:	68 3e d0 02 c0       	push   0xc002d03e
c00252ce:	eb db                	jmp    c00252ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00252d0:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00252d5:	74 1e                	je     c00252f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252d7:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252dc:	74 17                	je     c00252f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252de:	50                   	push   eax
c00252df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252e3:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252e9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252ed:	e8 52 b4 fd ff       	call   c0000744 <memcpy>
c00252f2:	83 c4 10             	add    esp,0x10
c00252f5:	31 c0                	xor    eax,eax
c00252f7:	83 c4 1c             	add    esp,0x1c
c00252fa:	5b                   	pop    ebx
c00252fb:	5e                   	pop    esi
c00252fc:	5f                   	pop    edi
c00252fd:	5d                   	pop    ebp
c00252fe:	c3                   	ret    
c00252ff:	90                   	nop

c0025300 <SATAPI::eject()>:
c0025300:	57                   	push   edi
c0025301:	b9 03 00 00 00       	mov    ecx,0x3
c0025306:	53                   	push   ebx
c0025307:	83 ec 14             	sub    esp,0x14
c002530a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002530e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025312:	fc                   	cld    
c0025313:	31 c0                	xor    eax,eax
c0025315:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025317:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002531c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025321:	50                   	push   eax
c0025322:	6a 00                	push   0x0
c0025324:	6a 00                	push   0x0
c0025326:	6a 00                	push   0x0
c0025328:	6a 00                	push   0x0
c002532a:	6a 02                	push   0x2
c002532c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025330:	50                   	push   eax
c0025331:	53                   	push   ebx
c0025332:	e8 c5 fd ff ff       	call   c00250fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025337:	83 c4 14             	add    esp,0x14
c002533a:	53                   	push   ebx
c002533b:	e8 72 fd ff ff       	call   c00250b2 <SATAPI::diskRemoved()>
c0025340:	83 c4 24             	add    esp,0x24
c0025343:	31 c0                	xor    eax,eax
c0025345:	5b                   	pop    ebx
c0025346:	5f                   	pop    edi
c0025347:	c3                   	ret    

c0025348 <SATAPI::detectMedia()>:
c0025348:	56                   	push   esi
c0025349:	53                   	push   ebx
c002534a:	83 ec 28             	sub    esp,0x28
c002534d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025351:	6a 0c                	push   0xc
c0025353:	6a 00                	push   0x0
c0025355:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025359:	56                   	push   esi
c002535a:	e8 19 b4 fd ff       	call   c0000778 <memset>
c002535f:	83 c4 0c             	add    esp,0xc
c0025362:	6a 00                	push   0x0
c0025364:	6a 00                	push   0x0
c0025366:	6a 00                	push   0x0
c0025368:	6a 00                	push   0x0
c002536a:	6a 00                	push   0x0
c002536c:	56                   	push   esi
c002536d:	53                   	push   ebx
c002536e:	e8 89 fd ff ff       	call   c00250fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025373:	83 c4 1c             	add    esp,0x1c
c0025376:	6a 0c                	push   0xc
c0025378:	6a 00                	push   0x0
c002537a:	56                   	push   esi
c002537b:	e8 f8 b3 fd ff       	call   c0000778 <memset>
c0025380:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025385:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002538a:	83 c4 0c             	add    esp,0xc
c002538d:	6a 01                	push   0x1
c002538f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025393:	50                   	push   eax
c0025394:	6a 00                	push   0x0
c0025396:	6a 00                	push   0x0
c0025398:	6a 12                	push   0x12
c002539a:	56                   	push   esi
c002539b:	53                   	push   ebx
c002539c:	e8 5b fd ff ff       	call   c00250fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253a1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253a5:	83 c4 20             	add    esp,0x20
c00253a8:	83 e0 7f             	and    eax,0x7f
c00253ab:	3c 70                	cmp    al,0x70
c00253ad:	74 15                	je     c00253c4 <SATAPI::detectMedia()+0x7c>
c00253af:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253b6:	75 0c                	jne    c00253c4 <SATAPI::detectMedia()+0x7c>
c00253b8:	83 ec 0c             	sub    esp,0xc
c00253bb:	53                   	push   ebx
c00253bc:	e8 0d fd ff ff       	call   c00250ce <SATAPI::diskInserted()>
c00253c1:	83 c4 10             	add    esp,0x10
c00253c4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253c8:	83 e0 0f             	and    eax,0xf
c00253cb:	3c 02                	cmp    al,0x2
c00253cd:	75 1b                	jne    c00253ea <SATAPI::detectMedia()+0xa2>
c00253cf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00253d4:	75 2d                	jne    c0025403 <SATAPI::detectMedia()+0xbb>
c00253d6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253dd:	74 24                	je     c0025403 <SATAPI::detectMedia()+0xbb>
c00253df:	83 ec 0c             	sub    esp,0xc
c00253e2:	53                   	push   ebx
c00253e3:	e8 ca fc ff ff       	call   c00250b2 <SATAPI::diskRemoved()>
c00253e8:	eb 16                	jmp    c0025400 <SATAPI::detectMedia()+0xb8>
c00253ea:	84 c0                	test   al,al
c00253ec:	75 15                	jne    c0025403 <SATAPI::detectMedia()+0xbb>
c00253ee:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253f5:	75 0c                	jne    c0025403 <SATAPI::detectMedia()+0xbb>
c00253f7:	83 ec 0c             	sub    esp,0xc
c00253fa:	53                   	push   ebx
c00253fb:	e8 ce fc ff ff       	call   c00250ce <SATAPI::diskInserted()>
c0025400:	83 c4 10             	add    esp,0x10
c0025403:	83 c4 24             	add    esp,0x24
c0025406:	5b                   	pop    ebx
c0025407:	5e                   	pop    esi
c0025408:	c3                   	ret    
c0025409:	90                   	nop

c002540a <SATAPI::open(int, int, void*)>:
c002540a:	56                   	push   esi
c002540b:	53                   	push   ebx
c002540c:	50                   	push   eax
c002540d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025415:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002541f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025425:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002542f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025433:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002543d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025443:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002544a:	e8 96 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c002544f:	89 c6                	mov    esi,eax
c0025451:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025457:	81 c6 00 10 00 00    	add    esi,0x1000
c002545d:	e8 83 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c0025462:	39 c6                	cmp    esi,eax
c0025464:	74 10                	je     c0025476 <SATAPI::open(int, int, void*)+0x6c>
c0025466:	83 ec 0c             	sub    esp,0xc
c0025469:	68 53 d0 02 c0       	push   0xc002d053
c002546e:	e8 f2 51 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0025473:	83 c4 10             	add    esp,0x10
c0025476:	83 ec 0c             	sub    esp,0xc
c0025479:	6a 02                	push   0x2
c002547b:	e8 ff c6 fe ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0025480:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025486:	e8 8f c9 fe ff       	call   c0011e1a <Virt::getAKernelVAS()>
c002548b:	6a 03                	push   0x3
c002548d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025493:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025499:	50                   	push   eax
c002549a:	e8 cd ce fe ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c002549f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254a6:	83 c4 14             	add    esp,0x14
c00254a9:	53                   	push   ebx
c00254aa:	e8 99 fe ff ff       	call   c0025348 <SATAPI::detectMedia()>
c00254af:	83 c4 14             	add    esp,0x14
c00254b2:	31 c0                	xor    eax,eax
c00254b4:	5b                   	pop    ebx
c00254b5:	5e                   	pop    esi
c00254b6:	c3                   	ret    
c00254b7:	90                   	nop

c00254b8 <SATAPI::read(unsigned long long, int, void*)>:
c00254b8:	55                   	push   ebp
c00254b9:	57                   	push   edi
c00254ba:	56                   	push   esi
c00254bb:	53                   	push   ebx
c00254bc:	83 ec 1c             	sub    esp,0x1c
c00254bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00254cb:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254d2:	74 19                	je     c00254ed <SATAPI::read(unsigned long long, int, void*)+0x35>
c00254d4:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00254d9:	7e 2e                	jle    c0025509 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254db:	83 ec 0c             	sub    esp,0xc
c00254de:	68 69 d0 02 c0       	push   0xc002d069
c00254e3:	e8 7d 51 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c00254e8:	83 c4 10             	add    esp,0x10
c00254eb:	eb 1c                	jmp    c0025509 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254ed:	83 ec 0c             	sub    esp,0xc
c00254f0:	55                   	push   ebp
c00254f1:	e8 52 fe ff ff       	call   c0025348 <SATAPI::detectMedia()>
c00254f6:	83 c4 10             	add    esp,0x10
c00254f9:	b8 02 00 00 00       	mov    eax,0x2
c00254fe:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025505:	75 cd                	jne    c00254d4 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025507:	eb 49                	jmp    c0025552 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025509:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002550d:	b9 03 00 00 00       	mov    ecx,0x3
c0025512:	fc                   	cld    
c0025513:	31 c0                	xor    eax,eax
c0025515:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025517:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002551c:	89 d8                	mov    eax,ebx
c002551e:	86 e0                	xchg   al,ah
c0025520:	c1 c0 10             	rol    eax,0x10
c0025523:	86 e0                	xchg   al,ah
c0025525:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025529:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002552d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025531:	50                   	push   eax
c0025532:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025536:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002553a:	56                   	push   esi
c002553b:	53                   	push   ebx
c002553c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025540:	c1 e0 0b             	shl    eax,0xb
c0025543:	50                   	push   eax
c0025544:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025548:	50                   	push   eax
c0025549:	55                   	push   ebp
c002554a:	e8 ad fb ff ff       	call   c00250fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002554f:	83 c4 20             	add    esp,0x20
c0025552:	83 c4 1c             	add    esp,0x1c
c0025555:	5b                   	pop    ebx
c0025556:	5e                   	pop    esi
c0025557:	5f                   	pop    edi
c0025558:	5d                   	pop    ebp
c0025559:	c3                   	ret    

c002555a <AVX::open(int, int, void*)>:
c002555a:	83 ec 0c             	sub    esp,0xc
c002555d:	e8 46 11 00 00       	call   c00266a8 <avxInit>
c0025562:	b8 00 00 00 00       	mov    eax,0x0
c0025567:	83 c4 0c             	add    esp,0xc
c002556a:	c3                   	ret    
c002556b:	90                   	nop

c002556c <AVX::close(int, int, void*)>:
c002556c:	83 ec 0c             	sub    esp,0xc
c002556f:	e8 35 11 00 00       	call   c00266a9 <avxClose>
c0025574:	b8 00 00 00 00       	mov    eax,0x0
c0025579:	83 c4 0c             	add    esp,0xc
c002557c:	c3                   	ret    
c002557d:	90                   	nop

c002557e <AVX::available()>:
c002557e:	83 ec 0c             	sub    esp,0xc
c0025581:	e8 1a 11 00 00       	call   c00266a0 <avxDetect>
c0025586:	85 c0                	test   eax,eax
c0025588:	0f 95 c0             	setne  al
c002558b:	83 c4 0c             	add    esp,0xc
c002558e:	c3                   	ret    
c002558f:	90                   	nop

c0025590 <AVX::save(void*)>:
c0025590:	83 ec 0c             	sub    esp,0xc
c0025593:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025597:	83 ec 0c             	sub    esp,0xc
c002559a:	50                   	push   eax
c002559b:	e8 06 11 00 00       	call   c00266a6 <avxSave>
c00255a0:	83 c4 10             	add    esp,0x10
c00255a3:	90                   	nop
c00255a4:	83 c4 0c             	add    esp,0xc
c00255a7:	c3                   	ret    

c00255a8 <AVX::load(void*)>:
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255af:	83 ec 0c             	sub    esp,0xc
c00255b2:	50                   	push   eax
c00255b3:	e8 ef 10 00 00       	call   c00266a7 <avxLoad>
c00255b8:	83 c4 10             	add    esp,0x10
c00255bb:	90                   	nop
c00255bc:	83 c4 0c             	add    esp,0xc
c00255bf:	c3                   	ret    

c00255c0 <AVX::AVX()>:
c00255c0:	83 ec 0c             	sub    esp,0xc
c00255c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c7:	83 ec 08             	sub    esp,0x8
c00255ca:	68 cc d0 02 c0       	push   0xc002d0cc
c00255cf:	50                   	push   eax
c00255d0:	e8 0b f3 fe ff       	call   c00148e0 <FPU::FPU(char const*)>
c00255d5:	83 c4 10             	add    esp,0x10
c00255d8:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c00255dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e1:	89 10                	mov    DWORD PTR [eax],edx
c00255e3:	90                   	nop
c00255e4:	83 c4 0c             	add    esp,0xc
c00255e7:	c3                   	ret    

c00255e8 <MMX::available()>:
c00255e8:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00255ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255f3:	83 e0 20             	and    eax,0x20
c00255f6:	84 c0                	test   al,al
c00255f8:	0f 95 c0             	setne  al
c00255fb:	c3                   	ret    

c00255fc <MMX::open(int, int, void*)>:
c00255fc:	83 ec 0c             	sub    esp,0xc
c00255ff:	e8 28 11 00 00       	call   c002672c <x87Init>
c0025604:	b8 00 00 00 00       	mov    eax,0x0
c0025609:	83 c4 0c             	add    esp,0xc
c002560c:	c3                   	ret    
c002560d:	90                   	nop

c002560e <MMX::close(int, int, void*)>:
c002560e:	83 ec 0c             	sub    esp,0xc
c0025611:	e8 30 11 00 00       	call   c0026746 <x87Close>
c0025616:	b8 00 00 00 00       	mov    eax,0x0
c002561b:	83 c4 0c             	add    esp,0xc
c002561e:	c3                   	ret    
c002561f:	90                   	nop

c0025620 <MMX::save(void*)>:
c0025620:	83 ec 0c             	sub    esp,0xc
c0025623:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025627:	83 ec 0c             	sub    esp,0xc
c002562a:	50                   	push   eax
c002562b:	e8 f1 10 00 00       	call   c0026721 <x87Save>
c0025630:	83 c4 10             	add    esp,0x10
c0025633:	90                   	nop
c0025634:	83 c4 0c             	add    esp,0xc
c0025637:	c3                   	ret    

c0025638 <MMX::load(void*)>:
c0025638:	83 ec 0c             	sub    esp,0xc
c002563b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002563f:	83 ec 0c             	sub    esp,0xc
c0025642:	50                   	push   eax
c0025643:	e8 df 10 00 00       	call   c0026727 <x87Load>
c0025648:	83 c4 10             	add    esp,0x10
c002564b:	90                   	nop
c002564c:	83 c4 0c             	add    esp,0xc
c002564f:	c3                   	ret    

c0025650 <MMX::MMX()>:
c0025650:	83 ec 0c             	sub    esp,0xc
c0025653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025657:	83 ec 08             	sub    esp,0x8
c002565a:	68 0c d1 02 c0       	push   0xc002d10c
c002565f:	50                   	push   eax
c0025660:	e8 7b f2 fe ff       	call   c00148e0 <FPU::FPU(char const*)>
c0025665:	83 c4 10             	add    esp,0x10
c0025668:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c002566d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025671:	89 10                	mov    DWORD PTR [eax],edx
c0025673:	90                   	nop
c0025674:	83 c4 0c             	add    esp,0xc
c0025677:	c3                   	ret    

c0025678 <SSE::open(int, int, void*)>:
c0025678:	83 ec 0c             	sub    esp,0xc
c002567b:	e8 64 10 00 00       	call   c00266e4 <sseInit>
c0025680:	b8 00 00 00 00       	mov    eax,0x0
c0025685:	83 c4 0c             	add    esp,0xc
c0025688:	c3                   	ret    
c0025689:	90                   	nop

c002568a <SSE::close(int, int, void*)>:
c002568a:	83 ec 0c             	sub    esp,0xc
c002568d:	e8 62 10 00 00       	call   c00266f4 <sseClose>
c0025692:	b8 00 00 00 00       	mov    eax,0x0
c0025697:	83 c4 0c             	add    esp,0xc
c002569a:	c3                   	ret    
c002569b:	90                   	nop

c002569c <SSE::available()>:
c002569c:	83 ec 1c             	sub    esp,0x1c
c002569f:	e8 1c 10 00 00       	call   c00266c0 <absolutelyNoChanceInHell>
c00256a4:	85 c0                	test   eax,eax
c00256a6:	0f 95 c0             	setne  al
c00256a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256b1:	83 c4 1c             	add    esp,0x1c
c00256b4:	c3                   	ret    
c00256b5:	90                   	nop

c00256b6 <SSE::save(void*)>:
c00256b6:	83 ec 0c             	sub    esp,0xc
c00256b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256bd:	83 ec 0c             	sub    esp,0xc
c00256c0:	50                   	push   eax
c00256c1:	e8 12 10 00 00       	call   c00266d8 <sseSave>
c00256c6:	83 c4 10             	add    esp,0x10
c00256c9:	90                   	nop
c00256ca:	83 c4 0c             	add    esp,0xc
c00256cd:	c3                   	ret    

c00256ce <SSE::load(void*)>:
c00256ce:	83 ec 0c             	sub    esp,0xc
c00256d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256d5:	83 ec 0c             	sub    esp,0xc
c00256d8:	50                   	push   eax
c00256d9:	e8 00 10 00 00       	call   c00266de <sseLoad>
c00256de:	83 c4 10             	add    esp,0x10
c00256e1:	90                   	nop
c00256e2:	83 c4 0c             	add    esp,0xc
c00256e5:	c3                   	ret    

c00256e6 <SSE::SSE()>:
c00256e6:	83 ec 0c             	sub    esp,0xc
c00256e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ed:	83 ec 08             	sub    esp,0x8
c00256f0:	68 4c d1 02 c0       	push   0xc002d14c
c00256f5:	50                   	push   eax
c00256f6:	e8 e5 f1 fe ff       	call   c00148e0 <FPU::FPU(char const*)>
c00256fb:	83 c4 10             	add    esp,0x10
c00256fe:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c0025703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025707:	89 10                	mov    DWORD PTR [eax],edx
c0025709:	90                   	nop
c002570a:	83 c4 0c             	add    esp,0xc
c002570d:	c3                   	ret    

c002570e <x87::open(int, int, void*)>:
c002570e:	83 ec 0c             	sub    esp,0xc
c0025711:	e8 16 10 00 00       	call   c002672c <x87Init>
c0025716:	b8 00 00 00 00       	mov    eax,0x0
c002571b:	83 c4 0c             	add    esp,0xc
c002571e:	c3                   	ret    
c002571f:	90                   	nop

c0025720 <x87::close(int, int, void*)>:
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	e8 1e 10 00 00       	call   c0026746 <x87Close>
c0025728:	b8 00 00 00 00       	mov    eax,0x0
c002572d:	83 c4 0c             	add    esp,0xc
c0025730:	c3                   	ret    
c0025731:	90                   	nop

c0025732 <x87::available()>:
c0025732:	83 ec 0c             	sub    esp,0xc
c0025735:	e8 cc 0f 00 00       	call   c0026706 <x87Detect>
c002573a:	85 c0                	test   eax,eax
c002573c:	0f 95 c0             	setne  al
c002573f:	83 c4 0c             	add    esp,0xc
c0025742:	c3                   	ret    
c0025743:	90                   	nop

c0025744 <x87::save(void*)>:
c0025744:	83 ec 0c             	sub    esp,0xc
c0025747:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002574b:	83 ec 0c             	sub    esp,0xc
c002574e:	50                   	push   eax
c002574f:	e8 cd 0f 00 00       	call   c0026721 <x87Save>
c0025754:	83 c4 10             	add    esp,0x10
c0025757:	90                   	nop
c0025758:	83 c4 0c             	add    esp,0xc
c002575b:	c3                   	ret    

c002575c <x87::load(void*)>:
c002575c:	83 ec 0c             	sub    esp,0xc
c002575f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025763:	83 ec 0c             	sub    esp,0xc
c0025766:	50                   	push   eax
c0025767:	e8 bb 0f 00 00       	call   c0026727 <x87Load>
c002576c:	83 c4 10             	add    esp,0x10
c002576f:	90                   	nop
c0025770:	83 c4 0c             	add    esp,0xc
c0025773:	c3                   	ret    

c0025774 <x87::x87()>:
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002577b:	83 ec 08             	sub    esp,0x8
c002577e:	68 8c d1 02 c0       	push   0xc002d18c
c0025783:	50                   	push   eax
c0025784:	e8 57 f1 fe ff       	call   c00148e0 <FPU::FPU(char const*)>
c0025789:	83 c4 10             	add    esp,0x10
c002578c:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c0025791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025795:	89 10                	mov    DWORD PTR [eax],edx
c0025797:	90                   	nop
c0025798:	83 c4 0c             	add    esp,0xc
c002579b:	c3                   	ret    

c002579c <APIC::disable()>:
c002579c:	90                   	nop
c002579d:	c3                   	ret    

c002579e <APIC::close(int, int, void*)>:
c002579e:	55                   	push   ebp
c002579f:	89 e5                	mov    ebp,esp
c00257a1:	83 ec 08             	sub    esp,0x8
c00257a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00257a9:	83 c0 3c             	add    eax,0x3c
c00257ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00257ae:	83 ec 0c             	sub    esp,0xc
c00257b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257b4:	ff d0                	call   eax
c00257b6:	83 c4 10             	add    esp,0x10
c00257b9:	b8 00 00 00 00       	mov    eax,0x0
c00257be:	c9                   	leave  
c00257bf:	c3                   	ret    

c00257c0 <IOAPIC::close(int, int, void*)>:
c00257c0:	b8 00 00 00 00       	mov    eax,0x0
c00257c5:	c3                   	ret    

c00257c6 <APIC::io_wait()>:
c00257c6:	eb 00                	jmp    c00257c8 <APIC::io_wait()+0x2>
c00257c8:	eb 00                	jmp    c00257ca <APIC::io_wait()+0x4>
c00257ca:	90                   	nop
c00257cb:	c3                   	ret    

c00257cc <APIC::getBase()>:
c00257cc:	55                   	push   ebp
c00257cd:	89 e5                	mov    ebp,esp
c00257cf:	83 ec 18             	sub    esp,0x18
c00257d2:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00257d7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257dd:	83 e0 08             	and    eax,0x8
c00257e0:	84 c0                	test   al,al
c00257e2:	75 07                	jne    c00257eb <APIC::getBase()+0x1f>
c00257e4:	b8 00 00 00 00       	mov    eax,0x0
c00257e9:	eb 21                	jmp    c002580c <APIC::getBase()+0x40>
c00257eb:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00257f0:	83 ec 08             	sub    esp,0x8
c00257f3:	6a 1b                	push   0x1b
c00257f5:	50                   	push   eax
c00257f6:	e8 ed 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257fb:	83 c4 10             	add    esp,0x10
c00257fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025801:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025804:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025807:	25 00 f0 ff ff       	and    eax,0xfffff000
c002580c:	c9                   	leave  
c002580d:	c3                   	ret    

c002580e <APIC::eoi(unsigned char)>:
c002580e:	55                   	push   ebp
c002580f:	89 e5                	mov    ebp,esp
c0025811:	83 ec 28             	sub    esp,0x28
c0025814:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025817:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002581a:	83 ec 0c             	sub    esp,0xc
c002581d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025820:	e8 a7 ff ff ff       	call   c00257cc <APIC::getBase()>
c0025825:	83 c4 10             	add    esp,0x10
c0025828:	05 b0 00 00 00       	add    eax,0xb0
c002582d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025830:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025833:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025839:	90                   	nop
c002583a:	c9                   	leave  
c002583b:	c3                   	ret    

c002583c <APIC::open(int, int, void*)>:
c002583c:	55                   	push   ebp
c002583d:	89 e5                	mov    ebp,esp
c002583f:	57                   	push   edi
c0025840:	56                   	push   esi
c0025841:	53                   	push   ebx
c0025842:	83 ec 2c             	sub    esp,0x2c
c0025845:	83 ec 0c             	sub    esp,0xc
c0025848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002584b:	e8 7c ff ff ff       	call   c00257cc <APIC::getBase()>
c0025850:	83 c4 10             	add    esp,0x10
c0025853:	89 c2                	mov    edx,eax
c0025855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025858:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002585e:	0f b6 f8             	movzx  edi,al
c0025861:	89 d0                	mov    eax,edx
c0025863:	ba 00 00 00 00       	mov    edx,0x0
c0025868:	89 c1                	mov    ecx,eax
c002586a:	80 e5 ff             	and    ch,0xff
c002586d:	89 cb                	mov    ebx,ecx
c002586f:	0f b6 f2             	movzx  esi,dl
c0025872:	89 d8                	mov    eax,ebx
c0025874:	89 f2                	mov    edx,esi
c0025876:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025879:	8d 5f 08             	lea    ebx,[edi+0x8]
c002587c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025880:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025884:	83 e0 00             	and    eax,0x0
c0025887:	09 d0                	or     eax,edx
c0025889:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002588d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025890:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025896:	8d 50 01             	lea    edx,[eax+0x1]
c0025899:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002589c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258a2:	0f b6 d0             	movzx  edx,al
c00258a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258a8:	83 c2 08             	add    edx,0x8
c00258ab:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258af:	0f b6 c9             	movzx  ecx,cl
c00258b2:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258b8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258bc:	83 ec 0c             	sub    esp,0xc
c00258bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258c2:	e8 05 ff ff ff       	call   c00257cc <APIC::getBase()>
c00258c7:	83 c4 10             	add    esp,0x10
c00258ca:	05 f0 00 00 00       	add    eax,0xf0
c00258cf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00258d2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00258d7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258da:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258e1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258eb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258ee:	89 10                	mov    DWORD PTR [eax],edx
c00258f0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258f7:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00258fc:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258ff:	7d 7c                	jge    c002597d <APIC::open(int, int, void*)+0x141>
c0025901:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025904:	8b 04 85 e0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf220]
c002590b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002590e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025911:	8b 04 85 e0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf220]
c0025918:	c1 e8 08             	shr    eax,0x8
c002591b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002591f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025922:	8b 04 85 e0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf220]
c0025929:	c1 e8 18             	shr    eax,0x18
c002592c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002592f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025933:	75 40                	jne    c0025975 <APIC::open(int, int, void*)+0x139>
c0025935:	83 ec 0c             	sub    esp,0xc
c0025938:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002593b:	e8 8c fe ff ff       	call   c00257cc <APIC::getBase()>
c0025940:	83 c4 10             	add    esp,0x10
c0025943:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025947:	75 07                	jne    c0025950 <APIC::open(int, int, void*)+0x114>
c0025949:	ba 60 03 00 00       	mov    edx,0x360
c002594e:	eb 05                	jmp    c0025955 <APIC::open(int, int, void*)+0x119>
c0025950:	ba 50 03 00 00       	mov    edx,0x350
c0025955:	01 d0                	add    eax,edx
c0025957:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002595a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002595d:	8b 00                	mov    eax,DWORD PTR [eax]
c002595f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025962:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025969:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002596d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025970:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025973:	89 10                	mov    DWORD PTR [eax],edx
c0025975:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025978:	e9 7a ff ff ff       	jmp    c00258f7 <APIC::open(int, int, void*)+0xbb>
c002597d:	b8 00 00 00 00       	mov    eax,0x0
c0025982:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025985:	5b                   	pop    ebx
c0025986:	5e                   	pop    esi
c0025987:	5f                   	pop    edi
c0025988:	5d                   	pop    ebp
c0025989:	c3                   	ret    

c002598a <IOAPIC::IOAPIC()>:
c002598a:	83 ec 0c             	sub    esp,0xc
c002598d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025991:	83 ec 08             	sub    esp,0x8
c0025994:	68 cc d1 02 c0       	push   0xc002d1cc
c0025999:	50                   	push   eax
c002599a:	e8 2f ec fe ff       	call   c00145ce <Device::Device(char const*)>
c002599f:	83 c4 10             	add    esp,0x10
c00259a2:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c00259a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ab:	89 10                	mov    DWORD PTR [eax],edx
c00259ad:	90                   	nop
c00259ae:	83 c4 0c             	add    esp,0xc
c00259b1:	c3                   	ret    

c00259b2 <APIC::APIC()>:
c00259b2:	53                   	push   ebx
c00259b3:	83 ec 18             	sub    esp,0x18
c00259b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259ba:	83 ec 08             	sub    esp,0x8
c00259bd:	68 d4 d1 02 c0       	push   0xc002d1d4
c00259c2:	50                   	push   eax
c00259c3:	e8 72 f3 fe ff       	call   c0014d3a <InterruptController::InterruptController(char const*)>
c00259c8:	83 c4 10             	add    esp,0x10
c00259cb:	ba ac d2 02 c0       	mov    edx,0xc002d2ac
c00259d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259d4:	89 10                	mov    DWORD PTR [eax],edx
c00259d6:	a0 a0 28 03 c0       	mov    al,ds:0xc00328a0
c00259db:	83 f0 01             	xor    eax,0x1
c00259de:	84 c0                	test   al,al
c00259e0:	0f 84 a1 00 00 00    	je     c0025a87 <APIC::APIC()+0xd5>
c00259e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259eb:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c00259f0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259f4:	0f 83 86 00 00 00    	jae    c0025a80 <APIC::APIC()+0xce>
c00259fa:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a02:	83 ec 0c             	sub    esp,0xc
c0025a05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a09:	e8 35 9e fe ff       	call   c000f843 <malloc>
c0025a0e:	83 c4 10             	add    esp,0x10
c0025a11:	89 c3                	mov    ebx,eax
c0025a13:	83 ec 0c             	sub    esp,0xc
c0025a16:	53                   	push   ebx
c0025a17:	e8 6e ff ff ff       	call   c002598a <IOAPIC::IOAPIC()>
c0025a1c:	83 c4 10             	add    esp,0x10
c0025a1f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a23:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a2c:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0025a33:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0025a38:	40                   	inc    eax
c0025a39:	a3 60 28 03 c0       	mov    ds:0xc0032860,eax
c0025a3e:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0025a43:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a49:	83 ec 08             	sub    esp,0x8
c0025a4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a50:	50                   	push   eax
c0025a51:	e8 88 e9 fe ff       	call   c00143de <Device::addChild(Device*)>
c0025a56:	83 c4 10             	add    esp,0x10
c0025a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a5f:	83 c0 08             	add    eax,0x8
c0025a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a64:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a69:	6a 00                	push   0x0
c0025a6b:	6a 00                	push   0x0
c0025a6d:	52                   	push   edx
c0025a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a72:	ff d0                	call   eax
c0025a74:	83 c4 10             	add    esp,0x10
c0025a77:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a7b:	e9 6b ff ff ff       	jmp    c00259eb <APIC::APIC()+0x39>
c0025a80:	c6 05 a0 28 03 c0 01 	mov    BYTE PTR ds:0xc00328a0,0x1
c0025a87:	90                   	nop
c0025a88:	83 c4 18             	add    esp,0x18
c0025a8b:	5b                   	pop    ebx
c0025a8c:	c3                   	ret    
c0025a8d:	90                   	nop

c0025a8e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a8e:	55                   	push   ebp
c0025a8f:	89 e5                	mov    ebp,esp
c0025a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a9a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a9d:	72 1d                	jb     c0025abc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aab:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025ab1:	01 d0                	add    eax,edx
c0025ab3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ab6:	73 04                	jae    c0025abc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ab8:	b0 01                	mov    al,0x1
c0025aba:	eb 02                	jmp    c0025abe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025abc:	b0 00                	mov    al,0x0
c0025abe:	5d                   	pop    ebp
c0025abf:	c3                   	ret    

c0025ac0 <IOAPIC::read(int)>:
c0025ac0:	55                   	push   ebp
c0025ac1:	89 e5                	mov    ebp,esp
c0025ac3:	83 ec 10             	sub    esp,0x10
c0025ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025acf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025ad2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ad5:	0f b6 d0             	movzx  edx,al
c0025ad8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025adb:	89 10                	mov    DWORD PTR [eax],edx
c0025add:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ae0:	83 c0 10             	add    eax,0x10
c0025ae3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae5:	c9                   	leave  
c0025ae6:	c3                   	ret    
c0025ae7:	90                   	nop

c0025ae8 <IOAPIC::open(int, int, void*)>:
c0025ae8:	55                   	push   ebp
c0025ae9:	89 e5                	mov    ebp,esp
c0025aeb:	57                   	push   edi
c0025aec:	56                   	push   esi
c0025aed:	53                   	push   ebx
c0025aee:	83 ec 0c             	sub    esp,0xc
c0025af1:	83 ec 0c             	sub    esp,0xc
c0025af4:	68 ff d1 02 c0       	push   0xc002d1ff
c0025af9:	e8 b9 d4 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0025afe:	83 c4 10             	add    esp,0x10
c0025b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b04:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b10:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b16:	8b 14 85 c0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf140]
c0025b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b20:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b29:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b2f:	8b 14 85 40 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0c0]
c0025b36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b39:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b42:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b51:	0f b6 f8             	movzx  edi,al
c0025b54:	89 d0                	mov    eax,edx
c0025b56:	ba 00 00 00 00       	mov    edx,0x0
c0025b5b:	89 c1                	mov    ecx,eax
c0025b5d:	80 e5 ff             	and    ch,0xff
c0025b60:	89 cb                	mov    ebx,ecx
c0025b62:	0f b6 f2             	movzx  esi,dl
c0025b65:	89 d8                	mov    eax,ebx
c0025b67:	89 f2                	mov    edx,esi
c0025b69:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b6c:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b6f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b73:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b77:	83 e0 00             	and    eax,0x0
c0025b7a:	09 d0                	or     eax,edx
c0025b7c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b83:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b89:	8d 50 01             	lea    edx,[eax+0x1]
c0025b8c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b8f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b95:	0f b6 d0             	movzx  edx,al
c0025b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b9b:	83 c2 08             	add    edx,0x8
c0025b9e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025ba2:	0f b6 c9             	movzx  ecx,cl
c0025ba5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025bab:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025baf:	83 ec 08             	sub    esp,0x8
c0025bb2:	6a 01                	push   0x1
c0025bb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb7:	e8 04 ff ff ff       	call   c0025ac0 <IOAPIC::read(int)>
c0025bbc:	83 c4 10             	add    esp,0x10
c0025bbf:	c1 f8 10             	sar    eax,0x10
c0025bc2:	0f b6 c0             	movzx  eax,al
c0025bc5:	8d 50 01             	lea    edx,[eax+0x1]
c0025bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bcb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025bd1:	b8 00 00 00 00       	mov    eax,0x0
c0025bd6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bd9:	5b                   	pop    ebx
c0025bda:	5e                   	pop    esi
c0025bdb:	5f                   	pop    edi
c0025bdc:	5d                   	pop    ebp
c0025bdd:	c3                   	ret    

c0025bde <IOAPIC::write(int, int)>:
c0025bde:	55                   	push   ebp
c0025bdf:	89 e5                	mov    ebp,esp
c0025be1:	83 ec 10             	sub    esp,0x10
c0025be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025be7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bed:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bf3:	0f b6 d0             	movzx  edx,al
c0025bf6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bf9:	89 10                	mov    DWORD PTR [eax],edx
c0025bfb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bfe:	8d 50 10             	lea    edx,[eax+0x10]
c0025c01:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c04:	89 02                	mov    DWORD PTR [edx],eax
c0025c06:	90                   	nop
c0025c07:	c9                   	leave  
c0025c08:	c3                   	ret    
c0025c09:	90                   	nop

c0025c0a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c0a:	55                   	push   ebp
c0025c0b:	89 e5                	mov    ebp,esp
c0025c0d:	53                   	push   ebx
c0025c0e:	83 ec 2c             	sub    esp,0x2c
c0025c11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c14:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c17:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c1a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c1d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c20:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c23:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c26:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c29:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c2c:	88 d8                	mov    al,bl
c0025c2e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c31:	88 c8                	mov    al,cl
c0025c33:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c36:	88 d0                	mov    al,dl
c0025c38:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c3b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c3f:	83 c0 08             	add    eax,0x8
c0025c42:	01 c0                	add    eax,eax
c0025c44:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c47:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c4b:	83 c0 08             	add    eax,0x8
c0025c4e:	01 c0                	add    eax,eax
c0025c50:	40                   	inc    eax
c0025c51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c54:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c57:	50                   	push   eax
c0025c58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c5b:	e8 60 fe ff ff       	call   c0025ac0 <IOAPIC::read(int)>
c0025c60:	83 c4 08             	add    esp,0x8
c0025c63:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c66:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c6d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c70:	c1 e0 18             	shl    eax,0x18
c0025c73:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c76:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c79:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c7c:	52                   	push   edx
c0025c7d:	50                   	push   eax
c0025c7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c81:	e8 58 ff ff ff       	call   c0025bde <IOAPIC::write(int, int)>
c0025c86:	83 c4 0c             	add    esp,0xc
c0025c89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c8c:	50                   	push   eax
c0025c8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c90:	e8 2b fe ff ff       	call   c0025ac0 <IOAPIC::read(int)>
c0025c95:	83 c4 08             	add    esp,0x8
c0025c98:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c9b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ca2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ca9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025cb0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cb4:	74 09                	je     c0025cbf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025cb6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cbd:	eb 07                	jmp    c0025cc6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cbf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025cc6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025cca:	74 09                	je     c0025cd5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025ccc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025cd3:	eb 07                	jmp    c0025cdc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025cd5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025cdc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025ce3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025ce7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025cea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025ced:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cf0:	52                   	push   edx
c0025cf1:	50                   	push   eax
c0025cf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cf5:	e8 e4 fe ff ff       	call   c0025bde <IOAPIC::write(int, int)>
c0025cfa:	83 c4 0c             	add    esp,0xc
c0025cfd:	90                   	nop
c0025cfe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d01:	c9                   	leave  
c0025d02:	c3                   	ret    
c0025d03:	90                   	nop

c0025d04 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d04:	55                   	push   ebp
c0025d05:	89 e5                	mov    ebp,esp
c0025d07:	57                   	push   edi
c0025d08:	56                   	push   esi
c0025d09:	53                   	push   ebx
c0025d0a:	83 ec 2c             	sub    esp,0x2c
c0025d0d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d10:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d13:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d17:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d1b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d1f:	74 5a                	je     c0025d7b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d21:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d25:	7f 44                	jg     c0025d6b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d2a:	05 40 d7 02 c0       	add    eax,0xc002d740
c0025d2f:	8a 00                	mov    al,BYTE PTR [eax]
c0025d31:	0f b6 c0             	movzx  eax,al
c0025d34:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d3a:	66 8b 84 00 60 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf1a0]
c0025d42:	0f b7 c0             	movzx  eax,ax
c0025d45:	83 e0 02             	and    eax,0x2
c0025d48:	85 c0                	test   eax,eax
c0025d4a:	74 04                	je     c0025d50 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d4c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d53:	66 8b 84 00 60 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf1a0]
c0025d5b:	0f b7 c0             	movzx  eax,ax
c0025d5e:	83 e0 08             	and    eax,0x8
c0025d61:	85 c0                	test   eax,eax
c0025d63:	74 16                	je     c0025d7b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d65:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d69:	eb 10                	jmp    c0025d7b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d6b:	83 ec 0c             	sub    esp,0xc
c0025d6e:	68 10 d2 02 c0       	push   0xc002d210
c0025d73:	e8 ed 48 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0025d78:	83 c4 10             	add    esp,0x10
c0025d7b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d7f:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0025d84:	83 ec 08             	sub    esp,0x8
c0025d87:	50                   	push   eax
c0025d88:	68 48 d2 02 c0       	push   0xc002d248
c0025d8d:	e8 25 d2 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0025d92:	83 c4 10             	add    esp,0x10
c0025d95:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d9c:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0025da1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025da4:	7d 67                	jge    c0025e0d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025da6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025da9:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c0025db0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025db3:	83 ec 08             	sub    esp,0x8
c0025db6:	52                   	push   edx
c0025db7:	50                   	push   eax
c0025db8:	e8 d1 fc ff ff       	call   c0025a8e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025dbd:	83 c4 10             	add    esp,0x10
c0025dc0:	84 c0                	test   al,al
c0025dc2:	74 44                	je     c0025e08 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025dc4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025dc7:	8b 1c 85 80 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd780]
c0025dce:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025dd2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025dd5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025dd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ddc:	83 c0 20             	add    eax,0x20
c0025ddf:	0f b6 f0             	movzx  esi,al
c0025de2:	b8 00 00 00 00       	mov    eax,0x0
c0025de7:	99                   	cdq    
c0025de8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025deb:	0f b6 c9             	movzx  ecx,cl
c0025dee:	83 ec 04             	sub    esp,0x4
c0025df1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025df4:	57                   	push   edi
c0025df5:	56                   	push   esi
c0025df6:	52                   	push   edx
c0025df7:	50                   	push   eax
c0025df8:	51                   	push   ecx
c0025df9:	53                   	push   ebx
c0025dfa:	e8 0b fe ff ff       	call   c0025c0a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025dff:	83 c4 20             	add    esp,0x20
c0025e02:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e06:	eb 05                	jmp    c0025e0d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e08:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e0b:	eb 8f                	jmp    c0025d9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e0d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e10:	83 f0 01             	xor    eax,0x1
c0025e13:	84 c0                	test   al,al
c0025e15:	74 10                	je     c0025e27 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e17:	83 ec 0c             	sub    esp,0xc
c0025e1a:	68 5f d2 02 c0       	push   0xc002d25f
c0025e1f:	e8 41 48 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0025e24:	83 c4 10             	add    esp,0x10
c0025e27:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e2b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e32:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e36:	7f 65                	jg     c0025e9d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e3b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e3e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e45:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e48:	01 ca                	add    edx,ecx
c0025e4a:	83 c2 54             	add    edx,0x54
c0025e4d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e51:	85 c0                	test   eax,eax
c0025e53:	75 43                	jne    c0025e98 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e58:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e5b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e62:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e65:	01 ca                	add    edx,ecx
c0025e67:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e6a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e6d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e77:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e7e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e81:	01 ca                	add    edx,ecx
c0025e83:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e89:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e8c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e93:	83 e8 20             	sub    eax,0x20
c0025e96:	eb 1a                	jmp    c0025eb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e98:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e9b:	eb 95                	jmp    c0025e32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e9d:	83 ec 0c             	sub    esp,0xc
c0025ea0:	68 6c d2 02 c0       	push   0xc002d26c
c0025ea5:	e8 bb 47 ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0025eaa:	83 c4 10             	add    esp,0x10
c0025ead:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025eb2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025eb5:	5b                   	pop    ebx
c0025eb6:	5e                   	pop    esi
c0025eb7:	5f                   	pop    edi
c0025eb8:	5d                   	pop    ebp
c0025eb9:	c3                   	ret    

c0025eba <PIC::disable()>:
c0025eba:	55                   	push   ebp
c0025ebb:	89 e5                	mov    ebp,esp
c0025ebd:	83 ec 10             	sub    esp,0x10
c0025ec0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ec6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025eca:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ecd:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ed1:	ee                   	out    dx,al
c0025ed2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ed8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025edc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025edf:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ee3:	ee                   	out    dx,al
c0025ee4:	90                   	nop
c0025ee5:	c9                   	leave  
c0025ee6:	c3                   	ret    
c0025ee7:	90                   	nop

c0025ee8 <PIC::close(int, int, void*)>:
c0025ee8:	55                   	push   ebp
c0025ee9:	89 e5                	mov    ebp,esp
c0025eeb:	83 ec 08             	sub    esp,0x8
c0025eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ef3:	83 c0 3c             	add    eax,0x3c
c0025ef6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ef8:	83 ec 0c             	sub    esp,0xc
c0025efb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025efe:	ff d0                	call   eax
c0025f00:	83 c4 10             	add    esp,0x10
c0025f03:	b8 00 00 00 00       	mov    eax,0x0
c0025f08:	c9                   	leave  
c0025f09:	c3                   	ret    

c0025f0a <PIC::PIC()>:
c0025f0a:	83 ec 0c             	sub    esp,0xc
c0025f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f11:	83 ec 08             	sub    esp,0x8
c0025f14:	68 18 d3 02 c0       	push   0xc002d318
c0025f19:	50                   	push   eax
c0025f1a:	e8 1b ee fe ff       	call   c0014d3a <InterruptController::InterruptController(char const*)>
c0025f1f:	83 c4 10             	add    esp,0x10
c0025f22:	ba 44 d3 02 c0       	mov    edx,0xc002d344
c0025f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2b:	89 10                	mov    DWORD PTR [eax],edx
c0025f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f31:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f37:	0f b6 d0             	movzx  edx,al
c0025f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f4f:	0f b6 d0             	movzx  edx,al
c0025f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f56:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f65:	8d 50 01             	lea    edx,[eax+0x1]
c0025f68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f6c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f72:	0f b6 d0             	movzx  edx,al
c0025f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f79:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f7d:	83 e1 3f             	and    ecx,0x3f
c0025f80:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f8e:	0f b6 d0             	movzx  edx,al
c0025f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f95:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fa6:	0f b6 d0             	movzx  edx,al
c0025fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fad:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fbc:	8d 50 01             	lea    edx,[eax+0x1]
c0025fbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fc3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fc9:	0f b6 d0             	movzx  edx,al
c0025fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fd4:	83 e1 3f             	and    ecx,0x3f
c0025fd7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fdb:	90                   	nop
c0025fdc:	83 c4 0c             	add    esp,0xc
c0025fdf:	c3                   	ret    

c0025fe0 <PIC::ioWait()>:
c0025fe0:	eb 00                	jmp    c0025fe2 <PIC::ioWait()+0x2>
c0025fe2:	eb 00                	jmp    c0025fe4 <PIC::ioWait()+0x4>
c0025fe4:	90                   	nop
c0025fe5:	c3                   	ret    

c0025fe6 <PIC::getIRQReg(int)>:
c0025fe6:	55                   	push   ebp
c0025fe7:	89 e5                	mov    ebp,esp
c0025fe9:	83 ec 10             	sub    esp,0x10
c0025fec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fef:	0f b6 c0             	movzx  eax,al
c0025ff2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ff8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ffb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ffe:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026002:	ee                   	out    dx,al
c0026003:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026006:	0f b6 c0             	movzx  eax,al
c0026009:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002600f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026012:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026015:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026019:	ee                   	out    dx,al
c002601a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026020:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026024:	89 c2                	mov    edx,eax
c0026026:	ec                   	in     al,dx
c0026027:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002602a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002602d:	0f b6 c0             	movzx  eax,al
c0026030:	c1 e0 08             	shl    eax,0x8
c0026033:	89 c1                	mov    ecx,eax
c0026035:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002603b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002603f:	89 c2                	mov    edx,eax
c0026041:	ec                   	in     al,dx
c0026042:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026045:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026048:	0f b6 c0             	movzx  eax,al
c002604b:	09 c8                	or     eax,ecx
c002604d:	c9                   	leave  
c002604e:	c3                   	ret    
c002604f:	90                   	nop

c0026050 <PIC::eoi(unsigned char)>:
c0026050:	55                   	push   ebp
c0026051:	89 e5                	mov    ebp,esp
c0026053:	83 ec 14             	sub    esp,0x14
c0026056:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026059:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002605c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026060:	75 1e                	jne    c0026080 <PIC::eoi(unsigned char)+0x30>
c0026062:	6a 0b                	push   0xb
c0026064:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026067:	e8 7a ff ff ff       	call   c0025fe6 <PIC::getIRQReg(int)>
c002606c:	83 c4 08             	add    esp,0x8
c002606f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026073:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026077:	25 80 00 00 00       	and    eax,0x80
c002607c:	85 c0                	test   eax,eax
c002607e:	74 5f                	je     c00260df <PIC::eoi(unsigned char)+0x8f>
c0026080:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026084:	75 2d                	jne    c00260b3 <PIC::eoi(unsigned char)+0x63>
c0026086:	6a 0b                	push   0xb
c0026088:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002608b:	e8 56 ff ff ff       	call   c0025fe6 <PIC::getIRQReg(int)>
c0026090:	83 c4 08             	add    esp,0x8
c0026093:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026097:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002609a:	66 85 c0             	test   ax,ax
c002609d:	78 14                	js     c00260b3 <PIC::eoi(unsigned char)+0x63>
c002609f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00260a5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260a9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260ac:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260b0:	ee                   	out    dx,al
c00260b1:	eb 2d                	jmp    c00260e0 <PIC::eoi(unsigned char)+0x90>
c00260b3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260b7:	76 12                	jbe    c00260cb <PIC::eoi(unsigned char)+0x7b>
c00260b9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260bf:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260c3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260c6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260ca:	ee                   	out    dx,al
c00260cb:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260d1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00260d5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260d8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260dc:	ee                   	out    dx,al
c00260dd:	eb 01                	jmp    c00260e0 <PIC::eoi(unsigned char)+0x90>
c00260df:	90                   	nop
c00260e0:	c9                   	leave  
c00260e1:	c3                   	ret    

c00260e2 <PIC::remap()>:
c00260e2:	55                   	push   ebp
c00260e3:	89 e5                	mov    ebp,esp
c00260e5:	83 ec 48             	sub    esp,0x48
c00260e8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260ef:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260f6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260fc:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260ff:	89 c2                	mov    edx,eax
c0026101:	ec                   	in     al,dx
c0026102:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026105:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026108:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002610b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026111:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026114:	89 c2                	mov    edx,eax
c0026116:	ec                   	in     al,dx
c0026117:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002611a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002611d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026120:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026126:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002612a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002612d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026130:	ee                   	out    dx,al
c0026131:	83 ec 0c             	sub    esp,0xc
c0026134:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026137:	e8 a4 fe ff ff       	call   c0025fe0 <PIC::ioWait()>
c002613c:	83 c4 10             	add    esp,0x10
c002613f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026145:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026149:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002614c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002614f:	ee                   	out    dx,al
c0026150:	83 ec 0c             	sub    esp,0xc
c0026153:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026156:	e8 85 fe ff ff       	call   c0025fe0 <PIC::ioWait()>
c002615b:	83 c4 10             	add    esp,0x10
c002615e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026161:	0f b6 c0             	movzx  eax,al
c0026164:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002616a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002616d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026170:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026173:	ee                   	out    dx,al
c0026174:	83 ec 0c             	sub    esp,0xc
c0026177:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002617a:	e8 61 fe ff ff       	call   c0025fe0 <PIC::ioWait()>
c002617f:	83 c4 10             	add    esp,0x10
c0026182:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026185:	0f b6 c0             	movzx  eax,al
c0026188:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002618e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026191:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026194:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026197:	ee                   	out    dx,al
c0026198:	83 ec 0c             	sub    esp,0xc
c002619b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619e:	e8 3d fe ff ff       	call   c0025fe0 <PIC::ioWait()>
c00261a3:	83 c4 10             	add    esp,0x10
c00261a6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261ac:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261b0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261b3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261b6:	ee                   	out    dx,al
c00261b7:	83 ec 0c             	sub    esp,0xc
c00261ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261bd:	e8 1e fe ff ff       	call   c0025fe0 <PIC::ioWait()>
c00261c2:	83 c4 10             	add    esp,0x10
c00261c5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00261cb:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00261cf:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00261d2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261d5:	ee                   	out    dx,al
c00261d6:	83 ec 0c             	sub    esp,0xc
c00261d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261dc:	e8 ff fd ff ff       	call   c0025fe0 <PIC::ioWait()>
c00261e1:	83 c4 10             	add    esp,0x10
c00261e4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261ea:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261ee:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261f1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261f4:	ee                   	out    dx,al
c00261f5:	83 ec 0c             	sub    esp,0xc
c00261f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fb:	e8 e0 fd ff ff       	call   c0025fe0 <PIC::ioWait()>
c0026200:	83 c4 10             	add    esp,0x10
c0026203:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026209:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002620d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026210:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026213:	ee                   	out    dx,al
c0026214:	83 ec 0c             	sub    esp,0xc
c0026217:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002621a:	e8 c1 fd ff ff       	call   c0025fe0 <PIC::ioWait()>
c002621f:	83 c4 10             	add    esp,0x10
c0026222:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026226:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002622c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002622f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026232:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026235:	ee                   	out    dx,al
c0026236:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002623a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026240:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026243:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026246:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026249:	ee                   	out    dx,al
c002624a:	90                   	nop
c002624b:	c9                   	leave  
c002624c:	c3                   	ret    
c002624d:	90                   	nop

c002624e <PIC::open(int, int, void*)>:
c002624e:	55                   	push   ebp
c002624f:	89 e5                	mov    ebp,esp
c0026251:	83 ec 18             	sub    esp,0x18
c0026254:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002625a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002625e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026261:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026265:	ee                   	out    dx,al
c0026266:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002626c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026270:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026273:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026277:	ee                   	out    dx,al
c0026278:	83 ec 0c             	sub    esp,0xc
c002627b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627e:	e8 5f fe ff ff       	call   c00260e2 <PIC::remap()>
c0026283:	83 c4 10             	add    esp,0x10
c0026286:	b8 00 00 00 00       	mov    eax,0x0
c002628b:	c9                   	leave  
c002628c:	c3                   	ret    
c002628d:	90                   	nop

c002628e <APICTimer::close(int, int, void*)>:
c002628e:	b8 00 00 00 00       	mov    eax,0x0
c0026293:	c3                   	ret    

c0026294 <apicTimerHandler(regs*, void*)>:
c0026294:	83 ec 0c             	sub    esp,0xc
c0026297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002629b:	8b 00                	mov    eax,DWORD PTR [eax]
c002629d:	99                   	cdq    
c002629e:	52                   	push   edx
c002629f:	50                   	push   eax
c00262a0:	6a 00                	push   0x0
c00262a2:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262a7:	e8 90 07 00 00       	call   c0026a3c <__udivdi3>
c00262ac:	83 c4 10             	add    esp,0x10
c00262af:	83 ec 08             	sub    esp,0x8
c00262b2:	52                   	push   edx
c00262b3:	50                   	push   eax
c00262b4:	e8 d8 0a ff ff       	call   c0016d91 <timerHandler(unsigned long long)>
c00262b9:	83 c4 10             	add    esp,0x10
c00262bc:	90                   	nop
c00262bd:	83 c4 0c             	add    esp,0xc
c00262c0:	c3                   	ret    
c00262c1:	90                   	nop

c00262c2 <APICTimer::write(int)>:
c00262c2:	53                   	push   ebx
c00262c3:	83 ec 28             	sub    esp,0x28
c00262c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262ca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00262ce:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262d4:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00262d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262df:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262e5:	83 ec 0c             	sub    esp,0xc
c00262e8:	50                   	push   eax
c00262e9:	e8 de f4 ff ff       	call   c00257cc <APIC::getBase()>
c00262ee:	83 c4 10             	add    esp,0x10
c00262f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262f5:	a1 70 eb 02 c0       	mov    eax,ds:0xc002eb70
c00262fa:	8b 15 74 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb74
c0026300:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026304:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002630c:	05 e0 03 00 00       	add    eax,0x3e0
c0026311:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002631b:	05 80 03 00 00       	add    eax,0x380
c0026320:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026326:	fb                   	sti    
c0026327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002632f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026334:	83 d2 00             	adc    edx,0x0
c0026337:	89 c1                	mov    ecx,eax
c0026339:	89 d3                	mov    ebx,edx
c002633b:	a1 70 eb 02 c0       	mov    eax,ds:0xc002eb70
c0026340:	8b 15 74 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb74
c0026346:	39 c8                	cmp    eax,ecx
c0026348:	89 d0                	mov    eax,edx
c002634a:	19 d8                	sbb    eax,ebx
c002634c:	73 02                	jae    c0026350 <APICTimer::write(int)+0x8e>
c002634e:	eb d7                	jmp    c0026327 <APICTimer::write(int)+0x65>
c0026350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026354:	05 20 03 00 00       	add    eax,0x320
c0026359:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002635f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026363:	05 90 03 00 00       	add    eax,0x390
c0026368:	8b 00                	mov    eax,DWORD PTR [eax]
c002636a:	f7 d0                	not    eax
c002636c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026370:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026374:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026378:	ba 00 00 00 00       	mov    edx,0x0
c002637d:	f7 f3                	div    ebx
c002637f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026387:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002638d:	0d 00 00 02 00       	or     eax,0x20000
c0026392:	89 c2                	mov    edx,eax
c0026394:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026398:	05 20 03 00 00       	add    eax,0x320
c002639d:	89 10                	mov    DWORD PTR [eax],edx
c002639f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263a3:	05 e0 03 00 00       	add    eax,0x3e0
c00263a8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263b2:	05 80 03 00 00       	add    eax,0x380
c00263b7:	89 c2                	mov    edx,eax
c00263b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263bd:	89 02                	mov    DWORD PTR [edx],eax
c00263bf:	90                   	nop
c00263c0:	83 c4 28             	add    esp,0x28
c00263c3:	5b                   	pop    ebx
c00263c4:	c3                   	ret    
c00263c5:	90                   	nop

c00263c6 <APICTimer::open(int, int, void*)>:
c00263c6:	57                   	push   edi
c00263c7:	56                   	push   esi
c00263c8:	53                   	push   ebx
c00263c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00263cf:	83 c0 24             	add    eax,0x24
c00263d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00263d4:	83 ec 08             	sub    esp,0x8
c00263d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263df:	ff d0                	call   eax
c00263e1:	83 c4 10             	add    esp,0x10
c00263e4:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c00263e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263ef:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263f5:	83 ec 0c             	sub    esp,0xc
c00263f8:	50                   	push   eax
c00263f9:	e8 ce f3 ff ff       	call   c00257cc <APIC::getBase()>
c00263fe:	83 c4 10             	add    esp,0x10
c0026401:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026411:	0f b6 f8             	movzx  edi,al
c0026414:	89 d0                	mov    eax,edx
c0026416:	ba 00 00 00 00       	mov    edx,0x0
c002641b:	89 c1                	mov    ecx,eax
c002641d:	80 e5 ff             	and    ch,0xff
c0026420:	89 cb                	mov    ebx,ecx
c0026422:	0f b6 f2             	movzx  esi,dl
c0026425:	89 d8                	mov    eax,ebx
c0026427:	89 f2                	mov    edx,esi
c0026429:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002642d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026430:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026434:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026438:	83 e0 00             	and    eax,0x0
c002643b:	09 d0                	or     eax,edx
c002643d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026445:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002644b:	8d 50 01             	lea    edx,[eax+0x1]
c002644e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026452:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026458:	0f b6 d0             	movzx  edx,al
c002645b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645f:	83 c2 08             	add    edx,0x8
c0026462:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026466:	0f b6 c9             	movzx  ecx,cl
c0026469:	81 c9 00 00 01 00    	or     ecx,0x10000
c002646f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026477:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002647b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026485:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026489:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002648f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026493:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026499:	83 ec 0c             	sub    esp,0xc
c002649c:	51                   	push   ecx
c002649d:	6a 01                	push   0x1
c002649f:	68 94 62 02 c0       	push   0xc0026294
c00264a4:	52                   	push   edx
c00264a5:	50                   	push   eax
c00264a6:	e8 b7 de fe ff       	call   c0014362 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264ab:	83 c4 20             	add    esp,0x20
c00264ae:	89 c2                	mov    edx,eax
c00264b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264ba:	b8 00 00 00 00       	mov    eax,0x0
c00264bf:	5b                   	pop    ebx
c00264c0:	5e                   	pop    esi
c00264c1:	5f                   	pop    edi
c00264c2:	c3                   	ret    
c00264c3:	90                   	nop

c00264c4 <APICTimer::APICTimer()>:
c00264c4:	83 ec 0c             	sub    esp,0xc
c00264c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264cb:	83 ec 08             	sub    esp,0x8
c00264ce:	68 84 d3 02 c0       	push   0xc002d384
c00264d3:	50                   	push   eax
c00264d4:	e8 29 08 ff ff       	call   c0016d02 <Timer::Timer(char const*)>
c00264d9:	83 c4 10             	add    esp,0x10
c00264dc:	ba 98 d3 02 c0       	mov    edx,0xc002d398
c00264e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e5:	89 10                	mov    DWORD PTR [eax],edx
c00264e7:	90                   	nop
c00264e8:	83 c4 0c             	add    esp,0xc
c00264eb:	c3                   	ret    

c00264ec <PIT::write(int)>:
c00264ec:	83 ec 10             	sub    esp,0x10
c00264ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026501:	a3 a4 28 03 c0       	mov    ds:0xc00328a4,eax
c0026506:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002650b:	99                   	cdq    
c002650c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026514:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002651b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026520:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026524:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026529:	ee                   	out    dx,al
c002652a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002652e:	0f b6 c0             	movzx  eax,al
c0026531:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026538:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002653c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026540:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026545:	ee                   	out    dx,al
c0026546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002654a:	c1 f8 08             	sar    eax,0x8
c002654d:	0f b6 c0             	movzx  eax,al
c0026550:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026557:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002655b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002655f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026564:	ee                   	out    dx,al
c0026565:	90                   	nop
c0026566:	83 c4 10             	add    esp,0x10
c0026569:	c3                   	ret    

c002656a <pitHandler(regs*, void*)>:
c002656a:	83 ec 0c             	sub    esp,0xc
c002656d:	a1 a4 28 03 c0       	mov    eax,ds:0xc00328a4
c0026572:	99                   	cdq    
c0026573:	52                   	push   edx
c0026574:	50                   	push   eax
c0026575:	6a 00                	push   0x0
c0026577:	68 00 ca 9a 3b       	push   0x3b9aca00
c002657c:	e8 bb 04 00 00       	call   c0026a3c <__udivdi3>
c0026581:	83 c4 10             	add    esp,0x10
c0026584:	83 ec 08             	sub    esp,0x8
c0026587:	52                   	push   edx
c0026588:	50                   	push   eax
c0026589:	e8 03 08 ff ff       	call   c0016d91 <timerHandler(unsigned long long)>
c002658e:	83 c4 10             	add    esp,0x10
c0026591:	90                   	nop
c0026592:	83 c4 0c             	add    esp,0xc
c0026595:	c3                   	ret    

c0026596 <PIT::open(int, int, void*)>:
c0026596:	83 ec 0c             	sub    esp,0xc
c0026599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659d:	8b 00                	mov    eax,DWORD PTR [eax]
c002659f:	83 c0 24             	add    eax,0x24
c00265a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00265a4:	83 ec 08             	sub    esp,0x8
c00265a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265af:	ff d0                	call   eax
c00265b1:	83 c4 10             	add    esp,0x10
c00265b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b8:	83 ec 0c             	sub    esp,0xc
c00265bb:	6a 00                	push   0x0
c00265bd:	6a 01                	push   0x1
c00265bf:	68 6a 65 02 c0       	push   0xc002656a
c00265c4:	6a 00                	push   0x0
c00265c6:	50                   	push   eax
c00265c7:	e8 96 dd fe ff       	call   c0014362 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00265cc:	83 c4 20             	add    esp,0x20
c00265cf:	89 c2                	mov    edx,eax
c00265d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265db:	b8 00 00 00 00       	mov    eax,0x0
c00265e0:	83 c4 0c             	add    esp,0xc
c00265e3:	c3                   	ret    

c00265e4 <PIT::close(int, int, void*)>:
c00265e4:	83 ec 0c             	sub    esp,0xc
c00265e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265eb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f9:	6a 01                	push   0x1
c00265fb:	68 6a 65 02 c0       	push   0xc002656a
c0026600:	6a 00                	push   0x0
c0026602:	50                   	push   eax
c0026603:	e8 98 dd fe ff       	call   c00143a0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026608:	83 c4 10             	add    esp,0x10
c002660b:	b8 00 00 00 00       	mov    eax,0x0
c0026610:	83 c4 0c             	add    esp,0xc
c0026613:	c3                   	ret    

c0026614 <PIT::PIT()>:
c0026614:	83 ec 0c             	sub    esp,0xc
c0026617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661b:	83 ec 08             	sub    esp,0x8
c002661e:	68 c0 d3 02 c0       	push   0xc002d3c0
c0026623:	50                   	push   eax
c0026624:	e8 d9 06 ff ff       	call   c0016d02 <Timer::Timer(char const*)>
c0026629:	83 c4 10             	add    esp,0x10
c002662c:	ba e8 d3 02 c0       	mov    edx,0xc002d3e8
c0026631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026635:	89 10                	mov    DWORD PTR [eax],edx
c0026637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026641:	0f b6 d0             	movzx  edx,al
c0026644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026648:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002664f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026653:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026659:	0f b6 d0             	movzx  edx,al
c002665c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026660:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026669:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002666f:	8d 50 01             	lea    edx,[eax+0x1]
c0026672:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026676:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002667c:	0f b6 d0             	movzx  edx,al
c002667f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026683:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026687:	83 e1 3f             	and    ecx,0x3f
c002668a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002668e:	90                   	nop
c002668f:	83 c4 0c             	add    esp,0xc
c0026692:	c3                   	ret    
c0026693:	66 90                	xchg   ax,ax
c0026695:	66 90                	xchg   ax,ax
c0026697:	66 90                	xchg   ax,ax
c0026699:	66 90                	xchg   ax,ax
c002669b:	66 90                	xchg   ax,ax
c002669d:	66 90                	xchg   ax,ax
c002669f:	90                   	nop

c00266a0 <avxDetect>:
c00266a0:	b8 00 00 00 00       	mov    eax,0x0
c00266a5:	c3                   	ret    

c00266a6 <avxSave>:
c00266a6:	c3                   	ret    

c00266a7 <avxLoad>:
c00266a7:	c3                   	ret    

c00266a8 <avxInit>:
c00266a8:	c3                   	ret    

c00266a9 <avxClose>:
c00266a9:	c3                   	ret    

c00266aa <wouldSheSayYes>:
c00266aa:	c3                   	ret    
c00266ab:	49                   	dec    ecx
c00266ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266b4:	75 20                	jne    c00266d6 <sseDetect.noSSE+0x1>
c00266b6:	4e                   	dec    esi
c00266b7:	79 61                	jns    c002671a <x87Detect+0x14>
c00266b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266be:	66 90                	xchg   ax,ax

c00266c0 <absolutelyNoChanceInHell>:
c00266c0:	b8 01 00 00 00       	mov    eax,0x1
c00266c5:	0f a2                	cpuid  
c00266c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266cd:	74 06                	je     c00266d5 <sseDetect.noSSE>
c00266cf:	b8 01 00 00 00       	mov    eax,0x1
c00266d4:	c3                   	ret    

c00266d5 <sseDetect.noSSE>:
c00266d5:	31 c0                	xor    eax,eax
c00266d7:	c3                   	ret    

c00266d8 <sseSave>:
c00266d8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00266dd:	c3                   	ret    

c00266de <sseLoad>:
c00266de:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00266e3:	c3                   	ret    

c00266e4 <sseInit>:
c00266e4:	e8 43 00 00 00       	call   c002672c <x87Init>
c00266e9:	0f 20 e0             	mov    eax,cr4
c00266ec:	66 0d 00 06          	or     ax,0x600
c00266f0:	0f 22 e0             	mov    cr4,eax
c00266f3:	c3                   	ret    

c00266f4 <sseClose>:
c00266f4:	c3                   	ret    
c00266f5:	66 90                	xchg   ax,ax
c00266f7:	66 90                	xchg   ax,ax
c00266f9:	66 90                	xchg   ax,ax
c00266fb:	66 90                	xchg   ax,ax
c00266fd:	66 90                	xchg   ax,ax
c00266ff:	90                   	nop

c0026700 <value_37F>:
c0026700:	7f 03                	jg     c0026705 <value_37A+0x1>

c0026702 <value_37E>:
c0026702:	7e 03                	jle    c0026707 <x87Detect+0x1>

c0026704 <value_37A>:
c0026704:	7a 03                	jp     c0026709 <x87Detect+0x3>

c0026706 <x87Detect>:
c0026706:	b8 01 00 00 00       	mov    eax,0x1
c002670b:	0f a2                	cpuid  
c002670d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026713:	74 06                	je     c002671b <x87Detect.nox87>
c0026715:	b8 01 00 00 00       	mov    eax,0x1
c002671a:	c3                   	ret    

c002671b <x87Detect.nox87>:
c002671b:	b8 00 00 00 00       	mov    eax,0x0
c0026720:	c3                   	ret    

c0026721 <x87Save>:
c0026721:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026726:	c3                   	ret    

c0026727 <x87Load>:
c0026727:	dd 64 24 08          	frstor [esp+0x8]
c002672b:	c3                   	ret    

c002672c <x87Init>:
c002672c:	9b db e3             	finit  
c002672f:	0f 20 c0             	mov    eax,cr0
c0026732:	66 25 fb ff          	and    ax,0xfffb
c0026736:	66 0d 22 00          	or     ax,0x22
c002673a:	0f 22 c0             	mov    cr0,eax
c002673d:	0f 06                	clts   
c002673f:	d9 2d 04 67 02 c0    	fldcw  WORD PTR ds:0xc0026704
c0026745:	c3                   	ret    

c0026746 <x87Close>:
c0026746:	c3                   	ret    
c0026747:	90                   	nop

c0026748 <__do_global_ctors_aux>:
c0026748:	a1 8c 92 02 c0       	mov    eax,ds:0xc002928c
c002674d:	83 f8 ff             	cmp    eax,0xffffffff
c0026750:	74 1a                	je     c002676c <__do_global_ctors_aux+0x24>
c0026752:	55                   	push   ebp
c0026753:	89 e5                	mov    ebp,esp
c0026755:	53                   	push   ebx
c0026756:	52                   	push   edx
c0026757:	bb 8c 92 02 c0       	mov    ebx,0xc002928c
c002675c:	ff d0                	call   eax
c002675e:	83 eb 04             	sub    ebx,0x4
c0026761:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026763:	83 f8 ff             	cmp    eax,0xffffffff
c0026766:	75 f4                	jne    c002675c <__do_global_ctors_aux+0x14>
c0026768:	58                   	pop    eax
c0026769:	5b                   	pop    ebx
c002676a:	5d                   	pop    ebp
c002676b:	c3                   	ret    
c002676c:	c3                   	ret    
c002676d:	66 90                	xchg   ax,ax
c002676f:	90                   	nop

c0026770 <__divdi3>:
c0026770:	55                   	push   ebp
c0026771:	57                   	push   edi
c0026772:	56                   	push   esi
c0026773:	53                   	push   ebx
c0026774:	83 ec 1c             	sub    esp,0x1c
c0026777:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002677b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002677f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026782:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026786:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002678a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002678e:	85 db                	test   ebx,ebx
c0026790:	0f 88 8e 00 00 00    	js     c0026824 <__divdi3+0xb4>
c0026796:	89 dd                	mov    ebp,ebx
c0026798:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00267a0:	89 d3                	mov    ebx,edx
c00267a2:	85 d2                	test   edx,edx
c00267a4:	79 0d                	jns    c00267b3 <__divdi3+0x43>
c00267a6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00267aa:	f7 d8                	neg    eax
c00267ac:	83 d2 00             	adc    edx,0x0
c00267af:	f7 da                	neg    edx
c00267b1:	89 d3                	mov    ebx,edx
c00267b3:	89 c7                	mov    edi,eax
c00267b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267b8:	85 db                	test   ebx,ebx
c00267ba:	75 48                	jne    c0026804 <__divdi3+0x94>
c00267bc:	39 ef                	cmp    edi,ebp
c00267be:	76 24                	jbe    c00267e4 <__divdi3+0x74>
c00267c0:	89 ea                	mov    edx,ebp
c00267c2:	f7 f7                	div    edi
c00267c4:	89 c1                	mov    ecx,eax
c00267c6:	31 f6                	xor    esi,esi
c00267c8:	89 c8                	mov    eax,ecx
c00267ca:	89 f2                	mov    edx,esi
c00267cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267d0:	85 c9                	test   ecx,ecx
c00267d2:	74 07                	je     c00267db <__divdi3+0x6b>
c00267d4:	f7 d8                	neg    eax
c00267d6:	83 d2 00             	adc    edx,0x0
c00267d9:	f7 da                	neg    edx
c00267db:	83 c4 1c             	add    esp,0x1c
c00267de:	5b                   	pop    ebx
c00267df:	5e                   	pop    esi
c00267e0:	5f                   	pop    edi
c00267e1:	5d                   	pop    ebp
c00267e2:	c3                   	ret    
c00267e3:	90                   	nop
c00267e4:	85 ff                	test   edi,edi
c00267e6:	75 0b                	jne    c00267f3 <__divdi3+0x83>
c00267e8:	b8 01 00 00 00       	mov    eax,0x1
c00267ed:	31 d2                	xor    edx,edx
c00267ef:	f7 f3                	div    ebx
c00267f1:	89 c7                	mov    edi,eax
c00267f3:	31 d2                	xor    edx,edx
c00267f5:	89 e8                	mov    eax,ebp
c00267f7:	f7 f7                	div    edi
c00267f9:	89 c6                	mov    esi,eax
c00267fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267fe:	f7 f7                	div    edi
c0026800:	89 c1                	mov    ecx,eax
c0026802:	eb c4                	jmp    c00267c8 <__divdi3+0x58>
c0026804:	39 eb                	cmp    ebx,ebp
c0026806:	77 3c                	ja     c0026844 <__divdi3+0xd4>
c0026808:	0f bd f3             	bsr    esi,ebx
c002680b:	83 f6 1f             	xor    esi,0x1f
c002680e:	75 40                	jne    c0026850 <__divdi3+0xe0>
c0026810:	39 eb                	cmp    ebx,ebp
c0026812:	72 09                	jb     c002681d <__divdi3+0xad>
c0026814:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026817:	0f 87 97 00 00 00    	ja     c00268b4 <__divdi3+0x144>
c002681d:	b9 01 00 00 00       	mov    ecx,0x1
c0026822:	eb a4                	jmp    c00267c8 <__divdi3+0x58>
c0026824:	f7 d9                	neg    ecx
c0026826:	83 d3 00             	adc    ebx,0x0
c0026829:	f7 db                	neg    ebx
c002682b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002682e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026832:	89 dd                	mov    ebp,ebx
c0026834:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002683c:	e9 5f ff ff ff       	jmp    c00267a0 <__divdi3+0x30>
c0026841:	8d 76 00             	lea    esi,[esi+0x0]
c0026844:	31 f6                	xor    esi,esi
c0026846:	31 c9                	xor    ecx,ecx
c0026848:	e9 7b ff ff ff       	jmp    c00267c8 <__divdi3+0x58>
c002684d:	8d 76 00             	lea    esi,[esi+0x0]
c0026850:	b8 20 00 00 00       	mov    eax,0x20
c0026855:	29 f0                	sub    eax,esi
c0026857:	89 f1                	mov    ecx,esi
c0026859:	d3 e3                	shl    ebx,cl
c002685b:	89 fa                	mov    edx,edi
c002685d:	88 c1                	mov    cl,al
c002685f:	d3 ea                	shr    edx,cl
c0026861:	09 da                	or     edx,ebx
c0026863:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026867:	89 f1                	mov    ecx,esi
c0026869:	d3 e7                	shl    edi,cl
c002686b:	89 eb                	mov    ebx,ebp
c002686d:	88 c1                	mov    cl,al
c002686f:	d3 eb                	shr    ebx,cl
c0026871:	89 f1                	mov    ecx,esi
c0026873:	d3 e5                	shl    ebp,cl
c0026875:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026878:	88 c1                	mov    cl,al
c002687a:	d3 ea                	shr    edx,cl
c002687c:	09 d5                	or     ebp,edx
c002687e:	89 e8                	mov    eax,ebp
c0026880:	89 da                	mov    edx,ebx
c0026882:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026886:	89 d3                	mov    ebx,edx
c0026888:	89 c5                	mov    ebp,eax
c002688a:	f7 e7                	mul    edi
c002688c:	39 d3                	cmp    ebx,edx
c002688e:	72 18                	jb     c00268a8 <__divdi3+0x138>
c0026890:	74 0a                	je     c002689c <__divdi3+0x12c>
c0026892:	89 e9                	mov    ecx,ebp
c0026894:	31 f6                	xor    esi,esi
c0026896:	e9 2d ff ff ff       	jmp    c00267c8 <__divdi3+0x58>
c002689b:	90                   	nop
c002689c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002689f:	89 f1                	mov    ecx,esi
c00268a1:	d3 e7                	shl    edi,cl
c00268a3:	39 c7                	cmp    edi,eax
c00268a5:	73 eb                	jae    c0026892 <__divdi3+0x122>
c00268a7:	90                   	nop
c00268a8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00268ab:	31 f6                	xor    esi,esi
c00268ad:	e9 16 ff ff ff       	jmp    c00267c8 <__divdi3+0x58>
c00268b2:	66 90                	xchg   ax,ax
c00268b4:	31 c9                	xor    ecx,ecx
c00268b6:	e9 0d ff ff ff       	jmp    c00267c8 <__divdi3+0x58>
c00268bb:	90                   	nop

c00268bc <__moddi3>:
c00268bc:	55                   	push   ebp
c00268bd:	57                   	push   edi
c00268be:	56                   	push   esi
c00268bf:	53                   	push   ebx
c00268c0:	83 ec 2c             	sub    esp,0x2c
c00268c3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00268cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00268d3:	85 db                	test   ebx,ebx
c00268d5:	0f 88 85 00 00 00    	js     c0026960 <__moddi3+0xa4>
c00268db:	89 de                	mov    esi,ebx
c00268dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268e5:	89 d7                	mov    edi,edx
c00268e7:	85 d2                	test   edx,edx
c00268e9:	79 09                	jns    c00268f4 <__moddi3+0x38>
c00268eb:	f7 d8                	neg    eax
c00268ed:	83 d2 00             	adc    edx,0x0
c00268f0:	f7 da                	neg    edx
c00268f2:	89 d7                	mov    edi,edx
c00268f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268f8:	89 cd                	mov    ebp,ecx
c00268fa:	85 ff                	test   edi,edi
c00268fc:	75 52                	jne    c0026950 <__moddi3+0x94>
c00268fe:	89 c3                	mov    ebx,eax
c0026900:	39 f0                	cmp    eax,esi
c0026902:	76 24                	jbe    c0026928 <__moddi3+0x6c>
c0026904:	89 c8                	mov    eax,ecx
c0026906:	89 f2                	mov    edx,esi
c0026908:	f7 f3                	div    ebx
c002690a:	89 d6                	mov    esi,edx
c002690c:	89 f0                	mov    eax,esi
c002690e:	31 d2                	xor    edx,edx
c0026910:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026914:	85 c9                	test   ecx,ecx
c0026916:	74 07                	je     c002691f <__moddi3+0x63>
c0026918:	f7 d8                	neg    eax
c002691a:	83 d2 00             	adc    edx,0x0
c002691d:	f7 da                	neg    edx
c002691f:	83 c4 2c             	add    esp,0x2c
c0026922:	5b                   	pop    ebx
c0026923:	5e                   	pop    esi
c0026924:	5f                   	pop    edi
c0026925:	5d                   	pop    ebp
c0026926:	c3                   	ret    
c0026927:	90                   	nop
c0026928:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002692c:	85 db                	test   ebx,ebx
c002692e:	75 0d                	jne    c002693d <__moddi3+0x81>
c0026930:	b8 01 00 00 00       	mov    eax,0x1
c0026935:	31 d2                	xor    edx,edx
c0026937:	f7 f7                	div    edi
c0026939:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002693d:	89 f0                	mov    eax,esi
c002693f:	31 d2                	xor    edx,edx
c0026941:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026945:	f7 f7                	div    edi
c0026947:	89 e8                	mov    eax,ebp
c0026949:	f7 f7                	div    edi
c002694b:	89 d6                	mov    esi,edx
c002694d:	eb bd                	jmp    c002690c <__moddi3+0x50>
c002694f:	90                   	nop
c0026950:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026954:	39 f7                	cmp    edi,esi
c0026956:	76 20                	jbe    c0026978 <__moddi3+0xbc>
c0026958:	89 c8                	mov    eax,ecx
c002695a:	89 f2                	mov    edx,esi
c002695c:	eb b2                	jmp    c0026910 <__moddi3+0x54>
c002695e:	66 90                	xchg   ax,ax
c0026960:	f7 d9                	neg    ecx
c0026962:	83 d3 00             	adc    ebx,0x0
c0026965:	f7 db                	neg    ebx
c0026967:	89 de                	mov    esi,ebx
c0026969:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026971:	e9 6f ff ff ff       	jmp    c00268e5 <__moddi3+0x29>
c0026976:	66 90                	xchg   ax,ax
c0026978:	0f bd c7             	bsr    eax,edi
c002697b:	83 f0 1f             	xor    eax,0x1f
c002697e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026982:	75 24                	jne    c00269a8 <__moddi3+0xec>
c0026984:	39 f7                	cmp    edi,esi
c0026986:	72 06                	jb     c002698e <__moddi3+0xd2>
c0026988:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002698c:	77 0c                	ja     c002699a <__moddi3+0xde>
c002698e:	89 e9                	mov    ecx,ebp
c0026990:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026994:	19 fe                	sbb    esi,edi
c0026996:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002699a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002699e:	89 f2                	mov    edx,esi
c00269a0:	e9 6b ff ff ff       	jmp    c0026910 <__moddi3+0x54>
c00269a5:	8d 76 00             	lea    esi,[esi+0x0]
c00269a8:	b8 20 00 00 00       	mov    eax,0x20
c00269ad:	89 c2                	mov    edx,eax
c00269af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269b3:	29 da                	sub    edx,ebx
c00269b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269b9:	88 d9                	mov    cl,bl
c00269bb:	d3 e7                	shl    edi,cl
c00269bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269c1:	88 d1                	mov    cl,dl
c00269c3:	d3 e8                	shr    eax,cl
c00269c5:	09 c7                	or     edi,eax
c00269c7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269cf:	89 d8                	mov    eax,ebx
c00269d1:	88 d9                	mov    cl,bl
c00269d3:	d3 e7                	shl    edi,cl
c00269d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269d9:	89 f3                	mov    ebx,esi
c00269db:	88 d1                	mov    cl,dl
c00269dd:	d3 eb                	shr    ebx,cl
c00269df:	89 c7                	mov    edi,eax
c00269e1:	88 c1                	mov    cl,al
c00269e3:	d3 e6                	shl    esi,cl
c00269e5:	89 e8                	mov    eax,ebp
c00269e7:	88 d1                	mov    cl,dl
c00269e9:	d3 e8                	shr    eax,cl
c00269eb:	09 f0                	or     eax,esi
c00269ed:	89 f9                	mov    ecx,edi
c00269ef:	d3 e5                	shl    ebp,cl
c00269f1:	89 da                	mov    edx,ebx
c00269f3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269f7:	89 d3                	mov    ebx,edx
c00269f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269fd:	89 c6                	mov    esi,eax
c00269ff:	89 d1                	mov    ecx,edx
c0026a01:	39 d3                	cmp    ebx,edx
c0026a03:	72 27                	jb     c0026a2c <__moddi3+0x170>
c0026a05:	74 21                	je     c0026a28 <__moddi3+0x16c>
c0026a07:	29 f5                	sub    ebp,esi
c0026a09:	19 cb                	sbb    ebx,ecx
c0026a0b:	89 de                	mov    esi,ebx
c0026a0d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a11:	d3 e6                	shl    esi,cl
c0026a13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a17:	89 f9                	mov    ecx,edi
c0026a19:	d3 ed                	shr    ebp,cl
c0026a1b:	09 ee                	or     esi,ebp
c0026a1d:	89 f0                	mov    eax,esi
c0026a1f:	d3 eb                	shr    ebx,cl
c0026a21:	89 da                	mov    edx,ebx
c0026a23:	e9 e8 fe ff ff       	jmp    c0026910 <__moddi3+0x54>
c0026a28:	39 c5                	cmp    ebp,eax
c0026a2a:	73 db                	jae    c0026a07 <__moddi3+0x14b>
c0026a2c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a30:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a34:	89 d1                	mov    ecx,edx
c0026a36:	89 c6                	mov    esi,eax
c0026a38:	eb cd                	jmp    c0026a07 <__moddi3+0x14b>
c0026a3a:	66 90                	xchg   ax,ax

c0026a3c <__udivdi3>:
c0026a3c:	55                   	push   ebp
c0026a3d:	57                   	push   edi
c0026a3e:	56                   	push   esi
c0026a3f:	53                   	push   ebx
c0026a40:	83 ec 1c             	sub    esp,0x1c
c0026a43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a4b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a4f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a53:	85 d2                	test   edx,edx
c0026a55:	75 41                	jne    c0026a98 <__udivdi3+0x5c>
c0026a57:	39 f7                	cmp    edi,esi
c0026a59:	76 15                	jbe    c0026a70 <__udivdi3+0x34>
c0026a5b:	89 e8                	mov    eax,ebp
c0026a5d:	89 f2                	mov    edx,esi
c0026a5f:	f7 f7                	div    edi
c0026a61:	31 db                	xor    ebx,ebx
c0026a63:	89 da                	mov    edx,ebx
c0026a65:	83 c4 1c             	add    esp,0x1c
c0026a68:	5b                   	pop    ebx
c0026a69:	5e                   	pop    esi
c0026a6a:	5f                   	pop    edi
c0026a6b:	5d                   	pop    ebp
c0026a6c:	c3                   	ret    
c0026a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a70:	89 f9                	mov    ecx,edi
c0026a72:	85 ff                	test   edi,edi
c0026a74:	75 0b                	jne    c0026a81 <__udivdi3+0x45>
c0026a76:	b8 01 00 00 00       	mov    eax,0x1
c0026a7b:	31 d2                	xor    edx,edx
c0026a7d:	f7 f7                	div    edi
c0026a7f:	89 c1                	mov    ecx,eax
c0026a81:	31 d2                	xor    edx,edx
c0026a83:	89 f0                	mov    eax,esi
c0026a85:	f7 f1                	div    ecx
c0026a87:	89 c3                	mov    ebx,eax
c0026a89:	89 e8                	mov    eax,ebp
c0026a8b:	f7 f1                	div    ecx
c0026a8d:	89 da                	mov    edx,ebx
c0026a8f:	83 c4 1c             	add    esp,0x1c
c0026a92:	5b                   	pop    ebx
c0026a93:	5e                   	pop    esi
c0026a94:	5f                   	pop    edi
c0026a95:	5d                   	pop    ebp
c0026a96:	c3                   	ret    
c0026a97:	90                   	nop
c0026a98:	39 f2                	cmp    edx,esi
c0026a9a:	77 1c                	ja     c0026ab8 <__udivdi3+0x7c>
c0026a9c:	0f bd da             	bsr    ebx,edx
c0026a9f:	83 f3 1f             	xor    ebx,0x1f
c0026aa2:	75 24                	jne    c0026ac8 <__udivdi3+0x8c>
c0026aa4:	39 f2                	cmp    edx,esi
c0026aa6:	72 08                	jb     c0026ab0 <__udivdi3+0x74>
c0026aa8:	39 ef                	cmp    edi,ebp
c0026aaa:	0f 87 84 00 00 00    	ja     c0026b34 <__udivdi3+0xf8>
c0026ab0:	b8 01 00 00 00       	mov    eax,0x1
c0026ab5:	eb ac                	jmp    c0026a63 <__udivdi3+0x27>
c0026ab7:	90                   	nop
c0026ab8:	31 db                	xor    ebx,ebx
c0026aba:	31 c0                	xor    eax,eax
c0026abc:	89 da                	mov    edx,ebx
c0026abe:	83 c4 1c             	add    esp,0x1c
c0026ac1:	5b                   	pop    ebx
c0026ac2:	5e                   	pop    esi
c0026ac3:	5f                   	pop    edi
c0026ac4:	5d                   	pop    ebp
c0026ac5:	c3                   	ret    
c0026ac6:	66 90                	xchg   ax,ax
c0026ac8:	b8 20 00 00 00       	mov    eax,0x20
c0026acd:	29 d8                	sub    eax,ebx
c0026acf:	88 d9                	mov    cl,bl
c0026ad1:	d3 e2                	shl    edx,cl
c0026ad3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026ad7:	89 fa                	mov    edx,edi
c0026ad9:	88 c1                	mov    cl,al
c0026adb:	d3 ea                	shr    edx,cl
c0026add:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ae1:	09 d1                	or     ecx,edx
c0026ae3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ae7:	88 d9                	mov    cl,bl
c0026ae9:	d3 e7                	shl    edi,cl
c0026aeb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aef:	89 f7                	mov    edi,esi
c0026af1:	88 c1                	mov    cl,al
c0026af3:	d3 ef                	shr    edi,cl
c0026af5:	88 d9                	mov    cl,bl
c0026af7:	d3 e6                	shl    esi,cl
c0026af9:	89 ea                	mov    edx,ebp
c0026afb:	88 c1                	mov    cl,al
c0026afd:	d3 ea                	shr    edx,cl
c0026aff:	09 d6                	or     esi,edx
c0026b01:	89 f0                	mov    eax,esi
c0026b03:	89 fa                	mov    edx,edi
c0026b05:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b09:	89 d7                	mov    edi,edx
c0026b0b:	89 c6                	mov    esi,eax
c0026b0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b11:	39 d7                	cmp    edi,edx
c0026b13:	72 13                	jb     c0026b28 <__udivdi3+0xec>
c0026b15:	74 09                	je     c0026b20 <__udivdi3+0xe4>
c0026b17:	89 f0                	mov    eax,esi
c0026b19:	31 db                	xor    ebx,ebx
c0026b1b:	e9 43 ff ff ff       	jmp    c0026a63 <__udivdi3+0x27>
c0026b20:	88 d9                	mov    cl,bl
c0026b22:	d3 e5                	shl    ebp,cl
c0026b24:	39 c5                	cmp    ebp,eax
c0026b26:	73 ef                	jae    c0026b17 <__udivdi3+0xdb>
c0026b28:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b2b:	31 db                	xor    ebx,ebx
c0026b2d:	e9 31 ff ff ff       	jmp    c0026a63 <__udivdi3+0x27>
c0026b32:	66 90                	xchg   ax,ax
c0026b34:	31 c0                	xor    eax,eax
c0026b36:	e9 28 ff ff ff       	jmp    c0026a63 <__udivdi3+0x27>
c0026b3b:	90                   	nop

c0026b3c <__umoddi3>:
c0026b3c:	55                   	push   ebp
c0026b3d:	57                   	push   edi
c0026b3e:	56                   	push   esi
c0026b3f:	53                   	push   ebx
c0026b40:	83 ec 1c             	sub    esp,0x1c
c0026b43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b4b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b53:	89 da                	mov    edx,ebx
c0026b55:	85 c0                	test   eax,eax
c0026b57:	75 37                	jne    c0026b90 <__umoddi3+0x54>
c0026b59:	39 df                	cmp    edi,ebx
c0026b5b:	76 13                	jbe    c0026b70 <__umoddi3+0x34>
c0026b5d:	89 f0                	mov    eax,esi
c0026b5f:	f7 f7                	div    edi
c0026b61:	89 d0                	mov    eax,edx
c0026b63:	31 d2                	xor    edx,edx
c0026b65:	83 c4 1c             	add    esp,0x1c
c0026b68:	5b                   	pop    ebx
c0026b69:	5e                   	pop    esi
c0026b6a:	5f                   	pop    edi
c0026b6b:	5d                   	pop    ebp
c0026b6c:	c3                   	ret    
c0026b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b70:	89 fd                	mov    ebp,edi
c0026b72:	85 ff                	test   edi,edi
c0026b74:	75 0b                	jne    c0026b81 <__umoddi3+0x45>
c0026b76:	b8 01 00 00 00       	mov    eax,0x1
c0026b7b:	31 d2                	xor    edx,edx
c0026b7d:	f7 f7                	div    edi
c0026b7f:	89 c5                	mov    ebp,eax
c0026b81:	89 d8                	mov    eax,ebx
c0026b83:	31 d2                	xor    edx,edx
c0026b85:	f7 f5                	div    ebp
c0026b87:	89 f0                	mov    eax,esi
c0026b89:	f7 f5                	div    ebp
c0026b8b:	89 d0                	mov    eax,edx
c0026b8d:	eb d4                	jmp    c0026b63 <__umoddi3+0x27>
c0026b8f:	90                   	nop
c0026b90:	89 f1                	mov    ecx,esi
c0026b92:	39 d8                	cmp    eax,ebx
c0026b94:	76 0a                	jbe    c0026ba0 <__umoddi3+0x64>
c0026b96:	89 f0                	mov    eax,esi
c0026b98:	83 c4 1c             	add    esp,0x1c
c0026b9b:	5b                   	pop    ebx
c0026b9c:	5e                   	pop    esi
c0026b9d:	5f                   	pop    edi
c0026b9e:	5d                   	pop    ebp
c0026b9f:	c3                   	ret    
c0026ba0:	0f bd e8             	bsr    ebp,eax
c0026ba3:	83 f5 1f             	xor    ebp,0x1f
c0026ba6:	75 1c                	jne    c0026bc4 <__umoddi3+0x88>
c0026ba8:	39 d8                	cmp    eax,ebx
c0026baa:	72 04                	jb     c0026bb0 <__umoddi3+0x74>
c0026bac:	39 f7                	cmp    edi,esi
c0026bae:	77 08                	ja     c0026bb8 <__umoddi3+0x7c>
c0026bb0:	89 da                	mov    edx,ebx
c0026bb2:	29 fe                	sub    esi,edi
c0026bb4:	19 c2                	sbb    edx,eax
c0026bb6:	89 f1                	mov    ecx,esi
c0026bb8:	89 c8                	mov    eax,ecx
c0026bba:	83 c4 1c             	add    esp,0x1c
c0026bbd:	5b                   	pop    ebx
c0026bbe:	5e                   	pop    esi
c0026bbf:	5f                   	pop    edi
c0026bc0:	5d                   	pop    ebp
c0026bc1:	c3                   	ret    
c0026bc2:	66 90                	xchg   ax,ax
c0026bc4:	ba 20 00 00 00       	mov    edx,0x20
c0026bc9:	29 ea                	sub    edx,ebp
c0026bcb:	89 e9                	mov    ecx,ebp
c0026bcd:	d3 e0                	shl    eax,cl
c0026bcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bd3:	89 f8                	mov    eax,edi
c0026bd5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026bd9:	88 d1                	mov    cl,dl
c0026bdb:	d3 e8                	shr    eax,cl
c0026bdd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026be1:	09 c1                	or     ecx,eax
c0026be3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026be7:	89 e9                	mov    ecx,ebp
c0026be9:	d3 e7                	shl    edi,cl
c0026beb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bef:	89 d8                	mov    eax,ebx
c0026bf1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026bf5:	88 d1                	mov    cl,dl
c0026bf7:	d3 e8                	shr    eax,cl
c0026bf9:	89 c7                	mov    edi,eax
c0026bfb:	89 e9                	mov    ecx,ebp
c0026bfd:	d3 e3                	shl    ebx,cl
c0026bff:	89 f0                	mov    eax,esi
c0026c01:	88 d1                	mov    cl,dl
c0026c03:	d3 e8                	shr    eax,cl
c0026c05:	09 d8                	or     eax,ebx
c0026c07:	89 e9                	mov    ecx,ebp
c0026c09:	d3 e6                	shl    esi,cl
c0026c0b:	89 f3                	mov    ebx,esi
c0026c0d:	89 fa                	mov    edx,edi
c0026c0f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c13:	89 d1                	mov    ecx,edx
c0026c15:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c19:	89 c6                	mov    esi,eax
c0026c1b:	89 d7                	mov    edi,edx
c0026c1d:	39 d1                	cmp    ecx,edx
c0026c1f:	72 27                	jb     c0026c48 <__umoddi3+0x10c>
c0026c21:	74 21                	je     c0026c44 <__umoddi3+0x108>
c0026c23:	89 ca                	mov    edx,ecx
c0026c25:	29 f3                	sub    ebx,esi
c0026c27:	19 fa                	sbb    edx,edi
c0026c29:	89 d0                	mov    eax,edx
c0026c2b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c2f:	d3 e0                	shl    eax,cl
c0026c31:	89 e9                	mov    ecx,ebp
c0026c33:	d3 eb                	shr    ebx,cl
c0026c35:	09 d8                	or     eax,ebx
c0026c37:	d3 ea                	shr    edx,cl
c0026c39:	83 c4 1c             	add    esp,0x1c
c0026c3c:	5b                   	pop    ebx
c0026c3d:	5e                   	pop    esi
c0026c3e:	5f                   	pop    edi
c0026c3f:	5d                   	pop    ebp
c0026c40:	c3                   	ret    
c0026c41:	8d 76 00             	lea    esi,[esi+0x0]
c0026c44:	39 c3                	cmp    ebx,eax
c0026c46:	73 db                	jae    c0026c23 <__umoddi3+0xe7>
c0026c48:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c4c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c50:	89 d7                	mov    edi,edx
c0026c52:	89 c6                	mov    esi,eax
c0026c54:	eb cd                	jmp    c0026c23 <__umoddi3+0xe7>

c0026c56 <__addsf3>:
c0026c56:	55                   	push   ebp
c0026c57:	89 e5                	mov    ebp,esp
c0026c59:	57                   	push   edi
c0026c5a:	56                   	push   esi
c0026c5b:	53                   	push   ebx
c0026c5c:	83 ec 08             	sub    esp,0x8
c0026c5f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c62:	89 fa                	mov    edx,edi
c0026c64:	89 f8                	mov    eax,edi
c0026c66:	c1 f8 17             	sar    eax,0x17
c0026c69:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c6c:	c1 e2 08             	shl    edx,0x8
c0026c6f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c75:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c78:	89 de                	mov    esi,ebx
c0026c7a:	c1 fe 17             	sar    esi,0x17
c0026c7d:	c1 e3 08             	shl    ebx,0x8
c0026c80:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c86:	31 f0                	xor    eax,esi
c0026c88:	0f 88 3b 01 00 00    	js     c0026dc9 <__addsf3+0x173>
c0026c8e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c91:	29 f1                	sub    ecx,esi
c0026c93:	85 c9                	test   ecx,ecx
c0026c95:	7e 54                	jle    c0026ceb <__addsf3+0x95>
c0026c97:	89 f0                	mov    eax,esi
c0026c99:	84 c0                	test   al,al
c0026c9b:	75 10                	jne    c0026cad <__addsf3+0x57>
c0026c9d:	85 db                	test   ebx,ebx
c0026c9f:	0f 84 aa 02 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026ca5:	49                   	dec    ecx
c0026ca6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ca9:	74 38                	je     c0026ce3 <__addsf3+0x8d>
c0026cab:	eb 13                	jmp    c0026cc0 <__addsf3+0x6a>
c0026cad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cb0:	f7 d0                	not    eax
c0026cb2:	84 c0                	test   al,al
c0026cb4:	0f 84 95 02 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026cba:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cc0:	83 f9 1f             	cmp    ecx,0x1f
c0026cc3:	0f 8f 86 02 00 00    	jg     c0026f4f <__addsf3+0x2f9>
c0026cc9:	89 de                	mov    esi,ebx
c0026ccb:	d3 ee                	shr    esi,cl
c0026ccd:	b8 20 00 00 00       	mov    eax,0x20
c0026cd2:	29 c8                	sub    eax,ecx
c0026cd4:	89 c1                	mov    ecx,eax
c0026cd6:	d3 e3                	shl    ebx,cl
c0026cd8:	31 c0                	xor    eax,eax
c0026cda:	85 db                	test   ebx,ebx
c0026cdc:	0f 95 c0             	setne  al
c0026cdf:	09 f0                	or     eax,esi
c0026ce1:	01 d0                	add    eax,edx
c0026ce3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ce6:	e9 b6 00 00 00       	jmp    c0026da1 <__addsf3+0x14b>
c0026ceb:	74 5c                	je     c0026d49 <__addsf3+0xf3>
c0026ced:	89 f1                	mov    ecx,esi
c0026cef:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026cf2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cf5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cf9:	75 14                	jne    c0026d0f <__addsf3+0xb9>
c0026cfb:	85 d2                	test   edx,edx
c0026cfd:	0f 84 4c 02 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026d03:	49                   	dec    ecx
c0026d04:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d07:	0f 84 94 00 00 00    	je     c0026da1 <__addsf3+0x14b>
c0026d0d:	eb 12                	jmp    c0026d21 <__addsf3+0xcb>
c0026d0f:	89 f0                	mov    eax,esi
c0026d11:	f7 d0                	not    eax
c0026d13:	84 c0                	test   al,al
c0026d15:	0f 84 34 02 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026d1b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d21:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d24:	83 f9 1f             	cmp    ecx,0x1f
c0026d27:	0f 8f 22 02 00 00    	jg     c0026f4f <__addsf3+0x2f9>
c0026d2d:	89 d7                	mov    edi,edx
c0026d2f:	d3 ef                	shr    edi,cl
c0026d31:	b8 20 00 00 00       	mov    eax,0x20
c0026d36:	29 c8                	sub    eax,ecx
c0026d38:	89 c1                	mov    ecx,eax
c0026d3a:	d3 e2                	shl    edx,cl
c0026d3c:	31 c0                	xor    eax,eax
c0026d3e:	85 d2                	test   edx,edx
c0026d40:	0f 95 c0             	setne  al
c0026d43:	09 f8                	or     eax,edi
c0026d45:	01 d8                	add    eax,ebx
c0026d47:	eb 58                	jmp    c0026da1 <__addsf3+0x14b>
c0026d49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d4c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d4f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d55:	75 32                	jne    c0026d89 <__addsf3+0x133>
c0026d57:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d5b:	75 1f                	jne    c0026d7c <__addsf3+0x126>
c0026d5d:	85 d2                	test   edx,edx
c0026d5f:	0f 84 e0 01 00 00    	je     c0026f45 <__addsf3+0x2ef>
c0026d65:	85 db                	test   ebx,ebx
c0026d67:	0f 84 e2 01 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026d6d:	89 d0                	mov    eax,edx
c0026d6f:	01 d8                	add    eax,ebx
c0026d71:	0f 89 a9 01 00 00    	jns    c0026f20 <__addsf3+0x2ca>
c0026d77:	e9 9d 01 00 00       	jmp    c0026f19 <__addsf3+0x2c3>
c0026d7c:	85 d2                	test   edx,edx
c0026d7e:	0f 85 cb 01 00 00    	jne    c0026f4f <__addsf3+0x2f9>
c0026d84:	e9 bc 01 00 00       	jmp    c0026f45 <__addsf3+0x2ef>
c0026d89:	31 c0                	xor    eax,eax
c0026d8b:	89 f1                	mov    ecx,esi
c0026d8d:	f7 d1                	not    ecx
c0026d8f:	84 c9                	test   cl,cl
c0026d91:	0f 84 90 01 00 00    	je     c0026f27 <__addsf3+0x2d1>
c0026d97:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d9a:	d1 e8                	shr    eax,1
c0026d9c:	e9 86 01 00 00       	jmp    c0026f27 <__addsf3+0x2d1>
c0026da1:	85 c0                	test   eax,eax
c0026da3:	0f 89 7e 01 00 00    	jns    c0026f27 <__addsf3+0x2d1>
c0026da9:	46                   	inc    esi
c0026daa:	89 f2                	mov    edx,esi
c0026dac:	f7 d2                	not    edx
c0026dae:	84 d2                	test   dl,dl
c0026db0:	0f 84 6f 01 00 00    	je     c0026f25 <__addsf3+0x2cf>
c0026db6:	89 c2                	mov    edx,eax
c0026db8:	83 e2 01             	and    edx,0x1
c0026dbb:	d1 e8                	shr    eax,1
c0026dbd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026dc2:	09 d0                	or     eax,edx
c0026dc4:	e9 5e 01 00 00       	jmp    c0026f27 <__addsf3+0x2d1>
c0026dc9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026dcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026dd0:	89 f0                	mov    eax,esi
c0026dd2:	0f b6 c0             	movzx  eax,al
c0026dd5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026dd8:	29 c1                	sub    ecx,eax
c0026dda:	85 c9                	test   ecx,ecx
c0026ddc:	7e 55                	jle    c0026e33 <__addsf3+0x1dd>
c0026dde:	85 c0                	test   eax,eax
c0026de0:	75 11                	jne    c0026df3 <__addsf3+0x19d>
c0026de2:	85 db                	test   ebx,ebx
c0026de4:	0f 84 65 01 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026dea:	49                   	dec    ecx
c0026deb:	75 19                	jne    c0026e06 <__addsf3+0x1b0>
c0026ded:	89 d0                	mov    eax,edx
c0026def:	29 d8                	sub    eax,ebx
c0026df1:	eb 38                	jmp    c0026e2b <__addsf3+0x1d5>
c0026df3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026df6:	f7 d0                	not    eax
c0026df8:	84 c0                	test   al,al
c0026dfa:	0f 84 4f 01 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026e00:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e06:	83 f9 1f             	cmp    ecx,0x1f
c0026e09:	0f 8f 40 01 00 00    	jg     c0026f4f <__addsf3+0x2f9>
c0026e0f:	89 de                	mov    esi,ebx
c0026e11:	d3 ee                	shr    esi,cl
c0026e13:	b8 20 00 00 00       	mov    eax,0x20
c0026e18:	29 c8                	sub    eax,ecx
c0026e1a:	89 c1                	mov    ecx,eax
c0026e1c:	d3 e3                	shl    ebx,cl
c0026e1e:	31 c0                	xor    eax,eax
c0026e20:	85 db                	test   ebx,ebx
c0026e22:	0f 95 c0             	setne  al
c0026e25:	09 f0                	or     eax,esi
c0026e27:	29 c2                	sub    edx,eax
c0026e29:	89 d0                	mov    eax,edx
c0026e2b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e2e:	e9 af 00 00 00       	jmp    c0026ee2 <__addsf3+0x28c>
c0026e33:	74 5c                	je     c0026e91 <__addsf3+0x23b>
c0026e35:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e38:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e3b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e3f:	75 14                	jne    c0026e55 <__addsf3+0x1ff>
c0026e41:	85 d2                	test   edx,edx
c0026e43:	0f 84 06 01 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026e49:	48                   	dec    eax
c0026e4a:	75 1b                	jne    c0026e67 <__addsf3+0x211>
c0026e4c:	89 d8                	mov    eax,ebx
c0026e4e:	29 d0                	sub    eax,edx
c0026e50:	e9 8d 00 00 00       	jmp    c0026ee2 <__addsf3+0x28c>
c0026e55:	89 f1                	mov    ecx,esi
c0026e57:	f7 d1                	not    ecx
c0026e59:	84 c9                	test   cl,cl
c0026e5b:	0f 84 ee 00 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026e61:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e6a:	83 f8 1f             	cmp    eax,0x1f
c0026e6d:	0f 8f dc 00 00 00    	jg     c0026f4f <__addsf3+0x2f9>
c0026e73:	89 d7                	mov    edi,edx
c0026e75:	88 c1                	mov    cl,al
c0026e77:	d3 ef                	shr    edi,cl
c0026e79:	b9 20 00 00 00       	mov    ecx,0x20
c0026e7e:	29 c1                	sub    ecx,eax
c0026e80:	d3 e2                	shl    edx,cl
c0026e82:	31 c0                	xor    eax,eax
c0026e84:	85 d2                	test   edx,edx
c0026e86:	0f 95 c0             	setne  al
c0026e89:	09 f8                	or     eax,edi
c0026e8b:	29 c3                	sub    ebx,eax
c0026e8d:	89 d8                	mov    eax,ebx
c0026e8f:	eb 51                	jmp    c0026ee2 <__addsf3+0x28c>
c0026e91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e94:	40                   	inc    eax
c0026e95:	a8 fe                	test   al,0xfe
c0026e97:	75 3d                	jne    c0026ed6 <__addsf3+0x280>
c0026e99:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e9d:	0f 85 a7 00 00 00    	jne    c0026f4a <__addsf3+0x2f4>
c0026ea3:	85 d2                	test   edx,edx
c0026ea5:	75 12                	jne    c0026eb9 <__addsf3+0x263>
c0026ea7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eaa:	85 db                	test   ebx,ebx
c0026eac:	0f 85 9d 00 00 00    	jne    c0026f4f <__addsf3+0x2f9>
c0026eb2:	31 ff                	xor    edi,edi
c0026eb4:	e9 96 00 00 00       	jmp    c0026f4f <__addsf3+0x2f9>
c0026eb9:	85 db                	test   ebx,ebx
c0026ebb:	0f 84 8e 00 00 00    	je     c0026f4f <__addsf3+0x2f9>
c0026ec1:	89 d0                	mov    eax,edx
c0026ec3:	29 d8                	sub    eax,ebx
c0026ec5:	79 06                	jns    c0026ecd <__addsf3+0x277>
c0026ec7:	89 d8                	mov    eax,ebx
c0026ec9:	29 d0                	sub    eax,edx
c0026ecb:	eb 5a                	jmp    c0026f27 <__addsf3+0x2d1>
c0026ecd:	bf 00 00 00 00       	mov    edi,0x0
c0026ed2:	74 7b                	je     c0026f4f <__addsf3+0x2f9>
c0026ed4:	eb 4a                	jmp    c0026f20 <__addsf3+0x2ca>
c0026ed6:	89 d0                	mov    eax,edx
c0026ed8:	29 d8                	sub    eax,ebx
c0026eda:	79 12                	jns    c0026eee <__addsf3+0x298>
c0026edc:	89 d8                	mov    eax,ebx
c0026ede:	29 d0                	sub    eax,edx
c0026ee0:	eb 09                	jmp    c0026eeb <__addsf3+0x295>
c0026ee2:	85 c0                	test   eax,eax
c0026ee4:	79 41                	jns    c0026f27 <__addsf3+0x2d1>
c0026ee6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eeb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026eee:	31 f6                	xor    esi,esi
c0026ef0:	85 c0                	test   eax,eax
c0026ef2:	74 33                	je     c0026f27 <__addsf3+0x2d1>
c0026ef4:	0f bd c8             	bsr    ecx,eax
c0026ef7:	83 f1 1f             	xor    ecx,0x1f
c0026efa:	d3 e0                	shl    eax,cl
c0026efc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f00:	39 ca                	cmp    edx,ecx
c0026f02:	7f 10                	jg     c0026f14 <__addsf3+0x2be>
c0026f04:	29 d1                	sub    ecx,edx
c0026f06:	41                   	inc    ecx
c0026f07:	d3 e8                	shr    eax,cl
c0026f09:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f0c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f12:	eb 13                	jmp    c0026f27 <__addsf3+0x2d1>
c0026f14:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f17:	29 ce                	sub    esi,ecx
c0026f19:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f1e:	eb 07                	jmp    c0026f27 <__addsf3+0x2d1>
c0026f20:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f23:	eb 02                	jmp    c0026f27 <__addsf3+0x2d1>
c0026f25:	31 c0                	xor    eax,eax
c0026f27:	89 c2                	mov    edx,eax
c0026f29:	c1 ea 08             	shr    edx,0x8
c0026f2c:	a8 7f                	test   al,0x7f
c0026f2e:	0f 95 c1             	setne  cl
c0026f31:	09 d1                	or     ecx,edx
c0026f33:	83 e1 01             	and    ecx,0x1
c0026f36:	c1 e8 07             	shr    eax,0x7
c0026f39:	21 c8                	and    eax,ecx
c0026f3b:	c1 e6 17             	shl    esi,0x17
c0026f3e:	09 d6                	or     esi,edx
c0026f40:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f43:	eb 0a                	jmp    c0026f4f <__addsf3+0x2f9>
c0026f45:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f48:	eb 05                	jmp    c0026f4f <__addsf3+0x2f9>
c0026f4a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f4f:	89 f8                	mov    eax,edi
c0026f51:	5a                   	pop    edx
c0026f52:	59                   	pop    ecx
c0026f53:	5b                   	pop    ebx
c0026f54:	5e                   	pop    esi
c0026f55:	5f                   	pop    edi
c0026f56:	5d                   	pop    ebp
c0026f57:	c3                   	ret    

c0026f58 <__subsf3>:
c0026f58:	55                   	push   ebp
c0026f59:	89 e5                	mov    ebp,esp
c0026f5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f5e:	05 00 00 00 80       	add    eax,0x80000000
c0026f63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f66:	5d                   	pop    ebp
c0026f67:	e9 ea fc ff ff       	jmp    c0026c56 <__addsf3>

c0026f6c <__negsf2>:
c0026f6c:	55                   	push   ebp
c0026f6d:	89 e5                	mov    ebp,esp
c0026f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f72:	05 00 00 00 80       	add    eax,0x80000000
c0026f77:	5d                   	pop    ebp
c0026f78:	c3                   	ret    

c0026f79 <__mulsf3>:
c0026f79:	55                   	push   ebp
c0026f7a:	89 e5                	mov    ebp,esp
c0026f7c:	57                   	push   edi
c0026f7d:	56                   	push   esi
c0026f7e:	53                   	push   ebx
c0026f7f:	83 ec 1c             	sub    esp,0x1c
c0026f82:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f85:	89 f0                	mov    eax,esi
c0026f87:	89 f1                	mov    ecx,esi
c0026f89:	c1 f9 17             	sar    ecx,0x17
c0026f8c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f8f:	c1 e0 08             	shl    eax,0x8
c0026f92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f97:	89 c1                	mov    ecx,eax
c0026f99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f9c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f9f:	89 c7                	mov    edi,eax
c0026fa1:	c1 ff 17             	sar    edi,0x17
c0026fa4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fa8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fab:	89 f8                	mov    eax,edi
c0026fad:	0f b6 c0             	movzx  eax,al
c0026fb0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fb3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026fb7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fba:	42                   	inc    edx
c0026fbb:	80 e2 fe             	and    dl,0xfe
c0026fbe:	75 7b                	jne    c002703b <__mulsf3+0xc2>
c0026fc0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fc4:	74 54                	je     c002701a <__mulsf3+0xa1>
c0026fc6:	85 c9                	test   ecx,ecx
c0026fc8:	0f 85 64 01 00 00    	jne    c0027132 <__mulsf3+0x1b9>
c0026fce:	8d 57 01             	lea    edx,[edi+0x1]
c0026fd1:	80 e2 fe             	and    dl,0xfe
c0026fd4:	75 1f                	jne    c0026ff5 <__mulsf3+0x7c>
c0026fd6:	85 c0                	test   eax,eax
c0026fd8:	b8 00 00 00 00       	mov    eax,0x0
c0026fdd:	74 29                	je     c0027008 <__mulsf3+0x8f>
c0026fdf:	53                   	push   ebx
c0026fe0:	53                   	push   ebx
c0026fe1:	50                   	push   eax
c0026fe2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe5:	e8 96 05 00 00       	call   c0027580 <__nesf2>
c0026fea:	83 c4 10             	add    esp,0x10
c0026fed:	85 c0                	test   eax,eax
c0026fef:	0f 85 3a 01 00 00    	jne    c002712f <__mulsf3+0x1b6>
c0026ff5:	85 ff                	test   edi,edi
c0026ff7:	0f 89 35 01 00 00    	jns    c0027132 <__mulsf3+0x1b9>
c0026ffd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027003:	e9 2a 01 00 00       	jmp    c0027132 <__mulsf3+0x1b9>
c0027008:	51                   	push   ecx
c0027009:	51                   	push   ecx
c002700a:	50                   	push   eax
c002700b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002700e:	e8 6d 05 00 00       	call   c0027580 <__nesf2>
c0027013:	83 c4 10             	add    esp,0x10
c0027016:	85 c0                	test   eax,eax
c0027018:	eb 15                	jmp    c002702f <__mulsf3+0xb6>
c002701a:	85 c9                	test   ecx,ecx
c002701c:	74 0b                	je     c0027029 <__mulsf3+0xb0>
c002701e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027021:	01 c9                	add    ecx,ecx
c0027023:	78 16                	js     c002703b <__mulsf3+0xc2>
c0027025:	89 d3                	mov    ebx,edx
c0027027:	eb f5                	jmp    c002701e <__mulsf3+0xa5>
c0027029:	89 f8                	mov    eax,edi
c002702b:	f7 d0                	not    eax
c002702d:	84 c0                	test   al,al
c002702f:	75 c4                	jne    c0026ff5 <__mulsf3+0x7c>
c0027031:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027036:	e9 f7 00 00 00       	jmp    c0027132 <__mulsf3+0x1b9>
c002703b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002703e:	c1 e6 08             	shl    esi,0x8
c0027041:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027047:	8d 57 01             	lea    edx,[edi+0x1]
c002704a:	80 e2 fe             	and    dl,0xfe
c002704d:	75 63                	jne    c00270b2 <__mulsf3+0x139>
c002704f:	85 c0                	test   eax,eax
c0027051:	74 2f                	je     c0027082 <__mulsf3+0x109>
c0027053:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027057:	0f 89 d2 00 00 00    	jns    c002712f <__mulsf3+0x1b6>
c002705d:	52                   	push   edx
c002705e:	52                   	push   edx
c002705f:	6a 00                	push   0x0
c0027061:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027064:	e8 dc 04 00 00       	call   c0027545 <__eqsf2>
c0027069:	83 c4 10             	add    esp,0x10
c002706c:	85 c0                	test   eax,eax
c002706e:	0f 85 bb 00 00 00    	jne    c002712f <__mulsf3+0x1b6>
c0027074:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027077:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002707d:	e9 b0 00 00 00       	jmp    c0027132 <__mulsf3+0x1b9>
c0027082:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027085:	50                   	push   eax
c0027086:	50                   	push   eax
c0027087:	6a 00                	push   0x0
c0027089:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002708c:	e8 b4 04 00 00       	call   c0027545 <__eqsf2>
c0027091:	83 c4 10             	add    esp,0x10
c0027094:	85 c0                	test   eax,eax
c0027096:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027099:	75 0c                	jne    c00270a7 <__mulsf3+0x12e>
c002709b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002709f:	0f 89 8a 00 00 00    	jns    c002712f <__mulsf3+0x1b6>
c00270a5:	eb cd                	jmp    c0027074 <__mulsf3+0xfb>
c00270a7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00270aa:	01 f6                	add    esi,esi
c00270ac:	78 04                	js     c00270b2 <__mulsf3+0x139>
c00270ae:	89 c3                	mov    ebx,eax
c00270b0:	eb f5                	jmp    c00270a7 <__mulsf3+0x12e>
c00270b2:	89 c8                	mov    eax,ecx
c00270b4:	0d 00 00 00 80       	or     eax,0x80000000
c00270b9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270bf:	f7 e6                	mul    esi
c00270c1:	85 c0                	test   eax,eax
c00270c3:	0f 95 c0             	setne  al
c00270c6:	0f b6 c0             	movzx  eax,al
c00270c9:	09 c2                	or     edx,eax
c00270cb:	78 03                	js     c00270d0 <__mulsf3+0x157>
c00270cd:	01 d2                	add    edx,edx
c00270cf:	4b                   	dec    ebx
c00270d0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00270d6:	7f 22                	jg     c00270fa <__mulsf3+0x181>
c00270d8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00270de:	85 db                	test   ebx,ebx
c00270e0:	7f 23                	jg     c0027105 <__mulsf3+0x18c>
c00270e2:	83 fb e9             	cmp    ebx,0xffffffe9
c00270e5:	7c 1a                	jl     c0027101 <__mulsf3+0x188>
c00270e7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270ed:	b9 01 00 00 00       	mov    ecx,0x1
c00270f2:	29 d9                	sub    ecx,ebx
c00270f4:	d3 ea                	shr    edx,cl
c00270f6:	31 db                	xor    ebx,ebx
c00270f8:	eb 0b                	jmp    c0027105 <__mulsf3+0x18c>
c00270fa:	bb ff 00 00 00       	mov    ebx,0xff
c00270ff:	eb 02                	jmp    c0027103 <__mulsf3+0x18a>
c0027101:	31 db                	xor    ebx,ebx
c0027103:	31 d2                	xor    edx,edx
c0027105:	89 d0                	mov    eax,edx
c0027107:	c1 e8 08             	shr    eax,0x8
c002710a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002710d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027113:	09 fb                	or     ebx,edi
c0027115:	c1 e3 17             	shl    ebx,0x17
c0027118:	09 c3                	or     ebx,eax
c002711a:	f6 c2 7f             	test   dl,0x7f
c002711d:	0f 95 c1             	setne  cl
c0027120:	09 c8                	or     eax,ecx
c0027122:	83 e0 01             	and    eax,0x1
c0027125:	c1 ea 07             	shr    edx,0x7
c0027128:	21 c2                	and    edx,eax
c002712a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002712d:	eb 03                	jmp    c0027132 <__mulsf3+0x1b9>
c002712f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027132:	89 f0                	mov    eax,esi
c0027134:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027137:	5b                   	pop    ebx
c0027138:	5e                   	pop    esi
c0027139:	5f                   	pop    edi
c002713a:	5d                   	pop    ebp
c002713b:	c3                   	ret    

c002713c <__divsf3>:
c002713c:	55                   	push   ebp
c002713d:	89 e5                	mov    ebp,esp
c002713f:	57                   	push   edi
c0027140:	56                   	push   esi
c0027141:	53                   	push   ebx
c0027142:	83 ec 1c             	sub    esp,0x1c
c0027145:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027148:	89 d8                	mov    eax,ebx
c002714a:	89 d9                	mov    ecx,ebx
c002714c:	c1 f9 17             	sar    ecx,0x17
c002714f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027152:	c1 e0 08             	shl    eax,0x8
c0027155:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002715a:	89 c1                	mov    ecx,eax
c002715c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002715f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027162:	89 c7                	mov    edi,eax
c0027164:	c1 ff 17             	sar    edi,0x17
c0027167:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002716b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002716e:	89 f8                	mov    eax,edi
c0027170:	0f b6 c0             	movzx  eax,al
c0027173:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027176:	29 c6                	sub    esi,eax
c0027178:	83 c6 7f             	add    esi,0x7f
c002717b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002717e:	42                   	inc    edx
c002717f:	80 e2 fe             	and    dl,0xfe
c0027182:	0f 85 9c 00 00 00    	jne    c0027224 <__divsf3+0xe8>
c0027188:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002718c:	74 33                	je     c00271c1 <__divsf3+0x85>
c002718e:	85 c9                	test   ecx,ecx
c0027190:	0f 85 c7 01 00 00    	jne    c002735d <__divsf3+0x221>
c0027196:	8d 57 01             	lea    edx,[edi+0x1]
c0027199:	80 e2 fe             	and    dl,0xfe
c002719c:	75 2f                	jne    c00271cd <__divsf3+0x91>
c002719e:	85 c0                	test   eax,eax
c00271a0:	74 2b                	je     c00271cd <__divsf3+0x91>
c00271a2:	51                   	push   ecx
c00271a3:	51                   	push   ecx
c00271a4:	6a 00                	push   0x0
c00271a6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271a9:	e8 d2 03 00 00       	call   c0027580 <__nesf2>
c00271ae:	83 c4 10             	add    esp,0x10
c00271b1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271b4:	85 c0                	test   eax,eax
c00271b6:	0f 85 a1 01 00 00    	jne    c002735d <__divsf3+0x221>
c00271bc:	e9 92 01 00 00       	jmp    c0027353 <__divsf3+0x217>
c00271c1:	85 c9                	test   ecx,ecx
c00271c3:	75 1b                	jne    c00271e0 <__divsf3+0xa4>
c00271c5:	8d 57 01             	lea    edx,[edi+0x1]
c00271c8:	80 e2 fe             	and    dl,0xfe
c00271cb:	74 1e                	je     c00271eb <__divsf3+0xaf>
c00271cd:	85 ff                	test   edi,edi
c00271cf:	0f 89 88 01 00 00    	jns    c002735d <__divsf3+0x221>
c00271d5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00271db:	e9 7d 01 00 00       	jmp    c002735d <__divsf3+0x221>
c00271e0:	8d 56 ff             	lea    edx,[esi-0x1]
c00271e3:	01 c9                	add    ecx,ecx
c00271e5:	78 3d                	js     c0027224 <__divsf3+0xe8>
c00271e7:	89 d6                	mov    esi,edx
c00271e9:	eb f5                	jmp    c00271e0 <__divsf3+0xa4>
c00271eb:	85 c0                	test   eax,eax
c00271ed:	b8 00 00 00 00       	mov    eax,0x0
c00271f2:	74 18                	je     c002720c <__divsf3+0xd0>
c00271f4:	52                   	push   edx
c00271f5:	52                   	push   edx
c00271f6:	50                   	push   eax
c00271f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271fa:	e8 81 03 00 00       	call   c0027580 <__nesf2>
c00271ff:	83 c4 10             	add    esp,0x10
c0027202:	85 c0                	test   eax,eax
c0027204:	0f 85 50 01 00 00    	jne    c002735a <__divsf3+0x21e>
c002720a:	eb c1                	jmp    c00271cd <__divsf3+0x91>
c002720c:	56                   	push   esi
c002720d:	56                   	push   esi
c002720e:	50                   	push   eax
c002720f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027212:	e8 69 03 00 00       	call   c0027580 <__nesf2>
c0027217:	83 c4 10             	add    esp,0x10
c002721a:	85 c0                	test   eax,eax
c002721c:	0f 84 31 01 00 00    	je     c0027353 <__divsf3+0x217>
c0027222:	eb a9                	jmp    c00271cd <__divsf3+0x91>
c0027224:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027227:	c1 e3 08             	shl    ebx,0x8
c002722a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027230:	8d 57 01             	lea    edx,[edi+0x1]
c0027233:	80 e2 fe             	and    dl,0xfe
c0027236:	75 71                	jne    c00272a9 <__divsf3+0x16d>
c0027238:	85 c0                	test   eax,eax
c002723a:	ba 00 00 00 00       	mov    edx,0x0
c002723f:	74 2f                	je     c0027270 <__divsf3+0x134>
c0027241:	51                   	push   ecx
c0027242:	51                   	push   ecx
c0027243:	52                   	push   edx
c0027244:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027247:	e8 f9 02 00 00       	call   c0027545 <__eqsf2>
c002724c:	83 c4 10             	add    esp,0x10
c002724f:	85 c0                	test   eax,eax
c0027251:	0f 85 03 01 00 00    	jne    c002735a <__divsf3+0x21e>
c0027257:	31 d2                	xor    edx,edx
c0027259:	89 d3                	mov    ebx,edx
c002725b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002725e:	31 f8                	xor    eax,edi
c0027260:	0f 89 f7 00 00 00    	jns    c002735d <__divsf3+0x221>
c0027266:	bb 00 00 00 80       	mov    ebx,0x80000000
c002726b:	e9 ed 00 00 00       	jmp    c002735d <__divsf3+0x221>
c0027270:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027273:	50                   	push   eax
c0027274:	50                   	push   eax
c0027275:	52                   	push   edx
c0027276:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027279:	e8 c7 02 00 00       	call   c0027545 <__eqsf2>
c002727e:	83 c4 10             	add    esp,0x10
c0027281:	85 c0                	test   eax,eax
c0027283:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027286:	75 16                	jne    c002729e <__divsf3+0x162>
c0027288:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002728b:	31 fb                	xor    ebx,edi
c002728d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027293:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027299:	e9 bf 00 00 00       	jmp    c002735d <__divsf3+0x221>
c002729e:	8d 46 01             	lea    eax,[esi+0x1]
c00272a1:	01 db                	add    ebx,ebx
c00272a3:	78 04                	js     c00272a9 <__divsf3+0x16d>
c00272a5:	89 c6                	mov    esi,eax
c00272a7:	eb f5                	jmp    c002729e <__divsf3+0x162>
c00272a9:	89 c8                	mov    eax,ecx
c00272ab:	0d 00 00 00 80       	or     eax,0x80000000
c00272b0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272b6:	31 d2                	xor    edx,edx
c00272b8:	39 d8                	cmp    eax,ebx
c00272ba:	72 07                	jb     c00272c3 <__divsf3+0x187>
c00272bc:	29 d8                	sub    eax,ebx
c00272be:	ba 01 00 00 00       	mov    edx,0x1
c00272c3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272ca:	01 d2                	add    edx,edx
c00272cc:	89 c1                	mov    ecx,eax
c00272ce:	01 c0                	add    eax,eax
c00272d0:	85 c9                	test   ecx,ecx
c00272d2:	78 04                	js     c00272d8 <__divsf3+0x19c>
c00272d4:	39 c3                	cmp    ebx,eax
c00272d6:	77 05                	ja     c00272dd <__divsf3+0x1a1>
c00272d8:	29 d8                	sub    eax,ebx
c00272da:	83 ca 01             	or     edx,0x1
c00272dd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272e0:	75 e8                	jne    c00272ca <__divsf3+0x18e>
c00272e2:	85 c0                	test   eax,eax
c00272e4:	0f 95 c0             	setne  al
c00272e7:	0f b6 c0             	movzx  eax,al
c00272ea:	c1 e2 06             	shl    edx,0x6
c00272ed:	09 c2                	or     edx,eax
c00272ef:	78 03                	js     c00272f4 <__divsf3+0x1b8>
c00272f1:	01 d2                	add    edx,edx
c00272f3:	4e                   	dec    esi
c00272f4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272fa:	7f 22                	jg     c002731e <__divsf3+0x1e2>
c00272fc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027302:	85 f6                	test   esi,esi
c0027304:	7f 23                	jg     c0027329 <__divsf3+0x1ed>
c0027306:	83 fe e9             	cmp    esi,0xffffffe9
c0027309:	7c 1a                	jl     c0027325 <__divsf3+0x1e9>
c002730b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027311:	b9 01 00 00 00       	mov    ecx,0x1
c0027316:	29 f1                	sub    ecx,esi
c0027318:	d3 ea                	shr    edx,cl
c002731a:	31 f6                	xor    esi,esi
c002731c:	eb 0b                	jmp    c0027329 <__divsf3+0x1ed>
c002731e:	be ff 00 00 00       	mov    esi,0xff
c0027323:	eb 02                	jmp    c0027327 <__divsf3+0x1eb>
c0027325:	31 f6                	xor    esi,esi
c0027327:	31 d2                	xor    edx,edx
c0027329:	89 d0                	mov    eax,edx
c002732b:	c1 e8 08             	shr    eax,0x8
c002732e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027331:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027337:	09 fe                	or     esi,edi
c0027339:	c1 e6 17             	shl    esi,0x17
c002733c:	09 c6                	or     esi,eax
c002733e:	f6 c2 7f             	test   dl,0x7f
c0027341:	0f 95 c1             	setne  cl
c0027344:	09 c8                	or     eax,ecx
c0027346:	83 e0 01             	and    eax,0x1
c0027349:	c1 ea 07             	shr    edx,0x7
c002734c:	21 c2                	and    edx,eax
c002734e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027351:	eb 0a                	jmp    c002735d <__divsf3+0x221>
c0027353:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027358:	eb 03                	jmp    c002735d <__divsf3+0x221>
c002735a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002735d:	89 d8                	mov    eax,ebx
c002735f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027362:	5b                   	pop    ebx
c0027363:	5e                   	pop    esi
c0027364:	5f                   	pop    edi
c0027365:	5d                   	pop    ebp
c0027366:	c3                   	ret    

c0027367 <__floatsisf>:
c0027367:	55                   	push   ebp
c0027368:	89 e5                	mov    ebp,esp
c002736a:	53                   	push   ebx
c002736b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002736e:	85 d2                	test   edx,edx
c0027370:	7e 2b                	jle    c002739d <__floatsisf+0x36>
c0027372:	0f bd ca             	bsr    ecx,edx
c0027375:	83 f1 1f             	xor    ecx,0x1f
c0027378:	d3 e2                	shl    edx,cl
c002737a:	89 d0                	mov    eax,edx
c002737c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027381:	89 c3                	mov    ebx,eax
c0027383:	c1 eb 08             	shr    ebx,0x8
c0027386:	80 e2 7f             	and    dl,0x7f
c0027389:	0f 95 c2             	setne  dl
c002738c:	09 da                	or     edx,ebx
c002738e:	83 e2 01             	and    edx,0x1
c0027391:	c1 e8 07             	shr    eax,0x7
c0027394:	21 c2                	and    edx,eax
c0027396:	b8 9e 00 00 00       	mov    eax,0x9e
c002739b:	eb 32                	jmp    c00273cf <__floatsisf+0x68>
c002739d:	b8 00 00 00 00       	mov    eax,0x0
c00273a2:	74 34                	je     c00273d8 <__floatsisf+0x71>
c00273a4:	f7 da                	neg    edx
c00273a6:	0f bd ca             	bsr    ecx,edx
c00273a9:	83 f1 1f             	xor    ecx,0x1f
c00273ac:	d3 e2                	shl    edx,cl
c00273ae:	89 d0                	mov    eax,edx
c00273b0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273b5:	89 c3                	mov    ebx,eax
c00273b7:	c1 eb 08             	shr    ebx,0x8
c00273ba:	80 e2 7f             	and    dl,0x7f
c00273bd:	0f 95 c2             	setne  dl
c00273c0:	09 da                	or     edx,ebx
c00273c2:	83 e2 01             	and    edx,0x1
c00273c5:	c1 e8 07             	shr    eax,0x7
c00273c8:	21 c2                	and    edx,eax
c00273ca:	b8 9e 01 00 00       	mov    eax,0x19e
c00273cf:	29 c8                	sub    eax,ecx
c00273d1:	c1 e0 17             	shl    eax,0x17
c00273d4:	09 d8                	or     eax,ebx
c00273d6:	01 d0                	add    eax,edx
c00273d8:	5b                   	pop    ebx
c00273d9:	5d                   	pop    ebp
c00273da:	c3                   	ret    

c00273db <__floatunsisf>:
c00273db:	55                   	push   ebp
c00273dc:	89 e5                	mov    ebp,esp
c00273de:	53                   	push   ebx
c00273df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273e2:	31 c0                	xor    eax,eax
c00273e4:	85 d2                	test   edx,edx
c00273e6:	74 32                	je     c002741a <__floatunsisf+0x3f>
c00273e8:	0f bd ca             	bsr    ecx,edx
c00273eb:	83 f1 1f             	xor    ecx,0x1f
c00273ee:	d3 e2                	shl    edx,cl
c00273f0:	89 d0                	mov    eax,edx
c00273f2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273f7:	89 c3                	mov    ebx,eax
c00273f9:	c1 eb 08             	shr    ebx,0x8
c00273fc:	80 e2 7f             	and    dl,0x7f
c00273ff:	0f 95 c2             	setne  dl
c0027402:	09 da                	or     edx,ebx
c0027404:	83 e2 01             	and    edx,0x1
c0027407:	c1 e8 07             	shr    eax,0x7
c002740a:	21 c2                	and    edx,eax
c002740c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027411:	29 c8                	sub    eax,ecx
c0027413:	c1 e0 17             	shl    eax,0x17
c0027416:	09 d8                	or     eax,ebx
c0027418:	01 d0                	add    eax,edx
c002741a:	5b                   	pop    ebx
c002741b:	5d                   	pop    ebp
c002741c:	c3                   	ret    

c002741d <__fixsfsi>:
c002741d:	55                   	push   ebp
c002741e:	89 e5                	mov    ebp,esp
c0027420:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027423:	89 d1                	mov    ecx,edx
c0027425:	c1 e1 08             	shl    ecx,0x8
c0027428:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002742e:	c1 fa 17             	sar    edx,0x17
c0027431:	78 1c                	js     c002744f <__fixsfsi+0x32>
c0027433:	83 ea 7f             	sub    edx,0x7f
c0027436:	31 c0                	xor    eax,eax
c0027438:	83 fa 1e             	cmp    edx,0x1e
c002743b:	77 40                	ja     c002747d <__fixsfsi+0x60>
c002743d:	89 c8                	mov    eax,ecx
c002743f:	0d 00 00 00 80       	or     eax,0x80000000
c0027444:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027449:	29 d1                	sub    ecx,edx
c002744b:	d3 e8                	shr    eax,cl
c002744d:	eb 2e                	jmp    c002747d <__fixsfsi+0x60>
c002744f:	31 c0                	xor    eax,eax
c0027451:	81 c2 81 00 00 00    	add    edx,0x81
c0027457:	78 24                	js     c002747d <__fixsfsi+0x60>
c0027459:	83 fa 1e             	cmp    edx,0x1e
c002745c:	7e 09                	jle    c0027467 <__fixsfsi+0x4a>
c002745e:	83 fa 1f             	cmp    edx,0x1f
c0027461:	75 18                	jne    c002747b <__fixsfsi+0x5e>
c0027463:	85 c9                	test   ecx,ecx
c0027465:	75 14                	jne    c002747b <__fixsfsi+0x5e>
c0027467:	89 c8                	mov    eax,ecx
c0027469:	0d 00 00 00 80       	or     eax,0x80000000
c002746e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027473:	29 d1                	sub    ecx,edx
c0027475:	d3 e8                	shr    eax,cl
c0027477:	f7 d8                	neg    eax
c0027479:	eb 02                	jmp    c002747d <__fixsfsi+0x60>
c002747b:	31 c0                	xor    eax,eax
c002747d:	5d                   	pop    ebp
c002747e:	c3                   	ret    

c002747f <__fixunssfsi>:
c002747f:	55                   	push   ebp
c0027480:	89 e5                	mov    ebp,esp
c0027482:	53                   	push   ebx
c0027483:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027486:	89 d3                	mov    ebx,edx
c0027488:	c1 fb 17             	sar    ebx,0x17
c002748b:	83 eb 7f             	sub    ebx,0x7f
c002748e:	31 c0                	xor    eax,eax
c0027490:	83 fb 1f             	cmp    ebx,0x1f
c0027493:	77 18                	ja     c00274ad <__fixunssfsi+0x2e>
c0027495:	89 d0                	mov    eax,edx
c0027497:	c1 e0 08             	shl    eax,0x8
c002749a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002749f:	0d 00 00 00 80       	or     eax,0x80000000
c00274a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274a9:	29 d9                	sub    ecx,ebx
c00274ab:	d3 e8                	shr    eax,cl
c00274ad:	5b                   	pop    ebx
c00274ae:	5d                   	pop    ebp
c00274af:	c3                   	ret    

c00274b0 <__cmpsf2>:
c00274b0:	55                   	push   ebp
c00274b1:	89 e5                	mov    ebp,esp
c00274b3:	57                   	push   edi
c00274b4:	56                   	push   esi
c00274b5:	53                   	push   ebx
c00274b6:	83 ec 24             	sub    esp,0x24
c00274b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274bf:	e8 4f 10 00 00       	call   c0028513 <__truncdfsf2>
c00274c4:	5a                   	pop    edx
c00274c5:	59                   	pop    ecx
c00274c6:	89 c3                	mov    ebx,eax
c00274c8:	c1 e8 17             	shr    eax,0x17
c00274cb:	0f b6 f0             	movzx  esi,al
c00274ce:	89 d8                	mov    eax,ebx
c00274d0:	c1 e8 1f             	shr    eax,0x1f
c00274d3:	31 c6                	xor    esi,eax
c00274d5:	c1 e3 08             	shl    ebx,0x8
c00274d8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00274db:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00274de:	e8 30 10 00 00       	call   c0028513 <__truncdfsf2>
c00274e3:	83 c4 10             	add    esp,0x10
c00274e6:	89 c1                	mov    ecx,eax
c00274e8:	c1 e9 17             	shr    ecx,0x17
c00274eb:	0f b6 c9             	movzx  ecx,cl
c00274ee:	89 c7                	mov    edi,eax
c00274f0:	c1 ef 1f             	shr    edi,0x1f
c00274f3:	89 ca                	mov    edx,ecx
c00274f5:	31 fa                	xor    edx,edi
c00274f7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274fa:	c1 e0 08             	shl    eax,0x8
c00274fd:	89 c2                	mov    edx,eax
c00274ff:	89 d8                	mov    eax,ebx
c0027501:	09 d0                	or     eax,edx
c0027503:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027508:	09 f0                	or     eax,esi
c002750a:	75 08                	jne    c0027514 <__cmpsf2+0x64>
c002750c:	31 c0                	xor    eax,eax
c002750e:	39 f9                	cmp    ecx,edi
c0027510:	75 0c                	jne    c002751e <__cmpsf2+0x6e>
c0027512:	eb 29                	jmp    c002753d <__cmpsf2+0x8d>
c0027514:	b8 01 00 00 00       	mov    eax,0x1
c0027519:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002751c:	7f 1f                	jg     c002753d <__cmpsf2+0x8d>
c002751e:	83 c8 ff             	or     eax,0xffffffff
c0027521:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027524:	7c 17                	jl     c002753d <__cmpsf2+0x8d>
c0027526:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002752c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027532:	b8 01 00 00 00       	mov    eax,0x1
c0027537:	39 d3                	cmp    ebx,edx
c0027539:	77 02                	ja     c002753d <__cmpsf2+0x8d>
c002753b:	19 c0                	sbb    eax,eax
c002753d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027540:	5b                   	pop    ebx
c0027541:	5e                   	pop    esi
c0027542:	5f                   	pop    edi
c0027543:	5d                   	pop    ebp
c0027544:	c3                   	ret    

c0027545 <__eqsf2>:
c0027545:	55                   	push   ebp
c0027546:	89 e5                	mov    ebp,esp
c0027548:	83 ec 24             	sub    esp,0x24
c002754b:	6a 01                	push   0x1
c002754d:	83 ec 0c             	sub    esp,0xc
c0027550:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027553:	e8 df 10 00 00       	call   c0028637 <__extendsfdf2>
c0027558:	83 c4 10             	add    esp,0x10
c002755b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002755e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027561:	52                   	push   edx
c0027562:	50                   	push   eax
c0027563:	50                   	push   eax
c0027564:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027567:	e8 cb 10 00 00       	call   c0028637 <__extendsfdf2>
c002756c:	59                   	pop    ecx
c002756d:	59                   	pop    ecx
c002756e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027571:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027574:	52                   	push   edx
c0027575:	50                   	push   eax
c0027576:	e8 35 ff ff ff       	call   c00274b0 <__cmpsf2>
c002757b:	83 c4 20             	add    esp,0x20
c002757e:	c9                   	leave  
c002757f:	c3                   	ret    

c0027580 <__nesf2>:
c0027580:	eb c3                	jmp    c0027545 <__eqsf2>

c0027582 <__gtsf2>:
c0027582:	55                   	push   ebp
c0027583:	89 e5                	mov    ebp,esp
c0027585:	83 ec 24             	sub    esp,0x24
c0027588:	6a ff                	push   0xffffffff
c002758a:	83 ec 0c             	sub    esp,0xc
c002758d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027590:	e8 a2 10 00 00       	call   c0028637 <__extendsfdf2>
c0027595:	83 c4 10             	add    esp,0x10
c0027598:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002759b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002759e:	52                   	push   edx
c002759f:	50                   	push   eax
c00275a0:	50                   	push   eax
c00275a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275a4:	e8 8e 10 00 00       	call   c0028637 <__extendsfdf2>
c00275a9:	59                   	pop    ecx
c00275aa:	59                   	pop    ecx
c00275ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275b1:	52                   	push   edx
c00275b2:	50                   	push   eax
c00275b3:	e8 f8 fe ff ff       	call   c00274b0 <__cmpsf2>
c00275b8:	83 c4 20             	add    esp,0x20
c00275bb:	c9                   	leave  
c00275bc:	c3                   	ret    

c00275bd <__gesf2>:
c00275bd:	eb c3                	jmp    c0027582 <__gtsf2>

c00275bf <__ltsf2>:
c00275bf:	eb 84                	jmp    c0027545 <__eqsf2>

c00275c1 <__lesf2>:
c00275c1:	eb 82                	jmp    c0027545 <__eqsf2>

c00275c3 <__adddf3>:
c00275c3:	55                   	push   ebp
c00275c4:	89 e5                	mov    ebp,esp
c00275c6:	57                   	push   edi
c00275c7:	56                   	push   esi
c00275c8:	53                   	push   ebx
c00275c9:	83 ec 24             	sub    esp,0x24
c00275cc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275cf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00275d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00275d5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00275d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00275db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00275de:	89 c8                	mov    eax,ecx
c00275e0:	89 ce                	mov    esi,ecx
c00275e2:	c1 fe 14             	sar    esi,0x14
c00275e5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275e8:	89 fb                	mov    ebx,edi
c00275ea:	89 fa                	mov    edx,edi
c00275ec:	c1 e2 0b             	shl    edx,0xb
c00275ef:	c1 e0 0b             	shl    eax,0xb
c00275f2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275f7:	c1 eb 15             	shr    ebx,0x15
c00275fa:	09 d8                	or     eax,ebx
c00275fc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275ff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027602:	c1 fe 14             	sar    esi,0x14
c0027605:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027608:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002760b:	89 f3                	mov    ebx,esi
c002760d:	c1 e3 0b             	shl    ebx,0xb
c0027610:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027613:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027616:	c1 e3 0b             	shl    ebx,0xb
c0027619:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002761f:	c1 ee 15             	shr    esi,0x15
c0027622:	09 f3                	or     ebx,esi
c0027624:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027627:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002762a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002762d:	0f 88 5f 02 00 00    	js     c0027892 <__adddf3+0x2cf>
c0027633:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027636:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027639:	85 db                	test   ebx,ebx
c002763b:	0f 8e c7 00 00 00    	jle    c0027708 <__adddf3+0x145>
c0027641:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027648:	75 1a                	jne    c0027664 <__adddf3+0xa1>
c002764a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002764d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027650:	0f 84 b2 05 00 00    	je     c0027c08 <__adddf3+0x645>
c0027656:	4b                   	dec    ebx
c0027657:	75 23                	jne    c002767c <__adddf3+0xb9>
c0027659:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002765c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002765f:	e9 99 00 00 00       	jmp    c00276fd <__adddf3+0x13a>
c0027664:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027667:	f7 d6                	not    esi
c0027669:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002766f:	0f 84 93 05 00 00    	je     c0027c08 <__adddf3+0x645>
c0027675:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002767c:	83 fb 1f             	cmp    ebx,0x1f
c002767f:	7e 42                	jle    c00276c3 <__adddf3+0x100>
c0027681:	83 fb 3f             	cmp    ebx,0x3f
c0027684:	0f 8f 7e 05 00 00    	jg     c0027c08 <__adddf3+0x645>
c002768a:	83 e3 1f             	and    ebx,0x1f
c002768d:	89 d9                	mov    ecx,ebx
c002768f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027692:	d3 ef                	shr    edi,cl
c0027694:	31 db                	xor    ebx,ebx
c0027696:	85 c9                	test   ecx,ecx
c0027698:	74 15                	je     c00276af <__adddf3+0xec>
c002769a:	be 20 00 00 00       	mov    esi,0x20
c002769f:	29 ce                	sub    esi,ecx
c00276a1:	89 f1                	mov    ecx,esi
c00276a3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a6:	d3 e6                	shl    esi,cl
c00276a8:	31 db                	xor    ebx,ebx
c00276aa:	85 f6                	test   esi,esi
c00276ac:	0f 95 c3             	setne  bl
c00276af:	31 c9                	xor    ecx,ecx
c00276b1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276b5:	0f 95 c1             	setne  cl
c00276b8:	09 cf                	or     edi,ecx
c00276ba:	09 fb                	or     ebx,edi
c00276bc:	01 da                	add    edx,ebx
c00276be:	83 d0 00             	adc    eax,0x0
c00276c1:	eb 3a                	jmp    c00276fd <__adddf3+0x13a>
c00276c3:	bf 20 00 00 00       	mov    edi,0x20
c00276c8:	29 df                	sub    edi,ebx
c00276ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276d0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276d3:	d3 e6                	shl    esi,cl
c00276d5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276d8:	88 d9                	mov    cl,bl
c00276da:	d3 ef                	shr    edi,cl
c00276dc:	09 fe                	or     esi,edi
c00276de:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276e1:	88 d9                	mov    cl,bl
c00276e3:	d3 ef                	shr    edi,cl
c00276e5:	89 fb                	mov    ebx,edi
c00276e7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276ea:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276ed:	d3 e7                	shl    edi,cl
c00276ef:	85 ff                	test   edi,edi
c00276f1:	0f 95 c1             	setne  cl
c00276f4:	0f b6 c9             	movzx  ecx,cl
c00276f7:	09 ce                	or     esi,ecx
c00276f9:	01 f2                	add    edx,esi
c00276fb:	11 d8                	adc    eax,ebx
c00276fd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027700:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027703:	e9 52 01 00 00       	jmp    c002785a <__adddf3+0x297>
c0027708:	0f 84 d5 00 00 00    	je     c00277e3 <__adddf3+0x220>
c002770e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027711:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027714:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027717:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002771a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027721:	75 20                	jne    c0027743 <__adddf3+0x180>
c0027723:	89 d6                	mov    esi,edx
c0027725:	09 c6                	or     esi,eax
c0027727:	0f 84 db 04 00 00    	je     c0027c08 <__adddf3+0x645>
c002772d:	4b                   	dec    ebx
c002772e:	75 29                	jne    c0027759 <__adddf3+0x196>
c0027730:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027733:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027736:	01 d1                	add    ecx,edx
c0027738:	11 c6                	adc    esi,eax
c002773a:	89 f0                	mov    eax,esi
c002773c:	89 ca                	mov    edx,ecx
c002773e:	e9 17 01 00 00       	jmp    c002785a <__adddf3+0x297>
c0027743:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027746:	f7 d6                	not    esi
c0027748:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002774e:	0f 84 b4 04 00 00    	je     c0027c08 <__adddf3+0x645>
c0027754:	0d 00 00 00 80       	or     eax,0x80000000
c0027759:	83 fb 1f             	cmp    ebx,0x1f
c002775c:	7e 48                	jle    c00277a6 <__adddf3+0x1e3>
c002775e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027761:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027764:	83 fb 3f             	cmp    ebx,0x3f
c0027767:	0f 8f 9b 04 00 00    	jg     c0027c08 <__adddf3+0x645>
c002776d:	83 e3 1f             	and    ebx,0x1f
c0027770:	89 d9                	mov    ecx,ebx
c0027772:	89 c7                	mov    edi,eax
c0027774:	d3 ef                	shr    edi,cl
c0027776:	31 db                	xor    ebx,ebx
c0027778:	85 c9                	test   ecx,ecx
c002777a:	74 12                	je     c002778e <__adddf3+0x1cb>
c002777c:	be 20 00 00 00       	mov    esi,0x20
c0027781:	29 ce                	sub    esi,ecx
c0027783:	89 f1                	mov    ecx,esi
c0027785:	d3 e0                	shl    eax,cl
c0027787:	31 db                	xor    ebx,ebx
c0027789:	85 c0                	test   eax,eax
c002778b:	0f 95 c3             	setne  bl
c002778e:	31 c0                	xor    eax,eax
c0027790:	85 d2                	test   edx,edx
c0027792:	0f 95 c0             	setne  al
c0027795:	09 c7                	or     edi,eax
c0027797:	09 fb                	or     ebx,edi
c0027799:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002779c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002779f:	01 da                	add    edx,ebx
c00277a1:	83 d6 00             	adc    esi,0x0
c00277a4:	eb 39                	jmp    c00277df <__adddf3+0x21c>
c00277a6:	be 20 00 00 00       	mov    esi,0x20
c00277ab:	29 de                	sub    esi,ebx
c00277ad:	89 c7                	mov    edi,eax
c00277af:	89 f1                	mov    ecx,esi
c00277b1:	d3 e7                	shl    edi,cl
c00277b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277b6:	89 d7                	mov    edi,edx
c00277b8:	88 d9                	mov    cl,bl
c00277ba:	d3 ef                	shr    edi,cl
c00277bc:	89 f9                	mov    ecx,edi
c00277be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277c1:	09 cf                	or     edi,ecx
c00277c3:	88 d9                	mov    cl,bl
c00277c5:	d3 e8                	shr    eax,cl
c00277c7:	89 f1                	mov    ecx,esi
c00277c9:	d3 e2                	shl    edx,cl
c00277cb:	85 d2                	test   edx,edx
c00277cd:	0f 95 c2             	setne  dl
c00277d0:	0f b6 d2             	movzx  edx,dl
c00277d3:	09 d7                	or     edi,edx
c00277d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277db:	01 fa                	add    edx,edi
c00277dd:	11 c6                	adc    esi,eax
c00277df:	89 f0                	mov    eax,esi
c00277e1:	eb 77                	jmp    c002785a <__adddf3+0x297>
c00277e3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277e6:	46                   	inc    esi
c00277e7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277ea:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277f0:	75 41                	jne    c0027833 <__adddf3+0x270>
c00277f2:	89 d3                	mov    ebx,edx
c00277f4:	09 c3                	or     ebx,eax
c00277f6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277fd:	75 27                	jne    c0027826 <__adddf3+0x263>
c00277ff:	85 db                	test   ebx,ebx
c0027801:	0f 84 fb 03 00 00    	je     c0027c02 <__adddf3+0x63f>
c0027807:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002780a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002780d:	0f 84 f5 03 00 00    	je     c0027c08 <__adddf3+0x645>
c0027813:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027816:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027819:	85 c0                	test   eax,eax
c002781b:	0f 89 91 03 00 00    	jns    c0027bb2 <__adddf3+0x5ef>
c0027821:	e9 85 03 00 00       	jmp    c0027bab <__adddf3+0x5e8>
c0027826:	85 db                	test   ebx,ebx
c0027828:	0f 85 da 03 00 00    	jne    c0027c08 <__adddf3+0x645>
c002782e:	e9 cf 03 00 00       	jmp    c0027c02 <__adddf3+0x63f>
c0027833:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027836:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027839:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002783c:	f7 d1                	not    ecx
c002783e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027844:	0f 84 70 03 00 00    	je     c0027bba <__adddf3+0x5f7>
c002784a:	d1 ea                	shr    edx,1
c002784c:	89 c1                	mov    ecx,eax
c002784e:	c1 e1 1f             	shl    ecx,0x1f
c0027851:	09 ca                	or     edx,ecx
c0027853:	d1 e8                	shr    eax,1
c0027855:	e9 6f 03 00 00       	jmp    c0027bc9 <__adddf3+0x606>
c002785a:	85 c0                	test   eax,eax
c002785c:	0f 89 67 03 00 00    	jns    c0027bc9 <__adddf3+0x606>
c0027862:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027865:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027868:	f7 d1                	not    ecx
c002786a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027870:	0f 84 44 03 00 00    	je     c0027bba <__adddf3+0x5f7>
c0027876:	89 d1                	mov    ecx,edx
c0027878:	d1 e9                	shr    ecx,1
c002787a:	83 e2 01             	and    edx,0x1
c002787d:	09 ca                	or     edx,ecx
c002787f:	89 c1                	mov    ecx,eax
c0027881:	c1 e1 1f             	shl    ecx,0x1f
c0027884:	09 ca                	or     edx,ecx
c0027886:	d1 e8                	shr    eax,1
c0027888:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002788d:	e9 37 03 00 00       	jmp    c0027bc9 <__adddf3+0x606>
c0027892:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027895:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002789b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002789e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278a7:	29 de                	sub    esi,ebx
c00278a9:	85 f6                	test   esi,esi
c00278ab:	0f 8e bd 00 00 00    	jle    c002796e <__adddf3+0x3ab>
c00278b1:	85 db                	test   ebx,ebx
c00278b3:	75 17                	jne    c00278cc <__adddf3+0x309>
c00278b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278bb:	0f 84 47 03 00 00    	je     c0027c08 <__adddf3+0x645>
c00278c1:	4e                   	dec    esi
c00278c2:	75 20                	jne    c00278e4 <__adddf3+0x321>
c00278c4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278c7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278ca:	eb 5b                	jmp    c0027927 <__adddf3+0x364>
c00278cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278cf:	f7 d3                	not    ebx
c00278d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278d7:	0f 84 2b 03 00 00    	je     c0027c08 <__adddf3+0x645>
c00278dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278e4:	83 fe 1f             	cmp    esi,0x1f
c00278e7:	7e 49                	jle    c0027932 <__adddf3+0x36f>
c00278e9:	83 fe 3f             	cmp    esi,0x3f
c00278ec:	0f 8f 16 03 00 00    	jg     c0027c08 <__adddf3+0x645>
c00278f2:	83 e6 1f             	and    esi,0x1f
c00278f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278f8:	89 f1                	mov    ecx,esi
c00278fa:	d3 ef                	shr    edi,cl
c00278fc:	31 db                	xor    ebx,ebx
c00278fe:	85 f6                	test   esi,esi
c0027900:	74 13                	je     c0027915 <__adddf3+0x352>
c0027902:	b9 20 00 00 00       	mov    ecx,0x20
c0027907:	29 f1                	sub    ecx,esi
c0027909:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002790c:	d3 e6                	shl    esi,cl
c002790e:	31 db                	xor    ebx,ebx
c0027910:	85 f6                	test   esi,esi
c0027912:	0f 95 c3             	setne  bl
c0027915:	31 c9                	xor    ecx,ecx
c0027917:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002791b:	0f 95 c1             	setne  cl
c002791e:	09 cf                	or     edi,ecx
c0027920:	09 fb                	or     ebx,edi
c0027922:	29 da                	sub    edx,ebx
c0027924:	83 d8 00             	sbb    eax,0x0
c0027927:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002792a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002792d:	e9 aa 01 00 00       	jmp    c0027adc <__adddf3+0x519>
c0027932:	bf 20 00 00 00       	mov    edi,0x20
c0027937:	29 f7                	sub    edi,esi
c0027939:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002793c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002793f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027942:	d3 e3                	shl    ebx,cl
c0027944:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027947:	89 f1                	mov    ecx,esi
c0027949:	d3 ef                	shr    edi,cl
c002794b:	09 fb                	or     ebx,edi
c002794d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027950:	89 f1                	mov    ecx,esi
c0027952:	d3 ef                	shr    edi,cl
c0027954:	89 fe                	mov    esi,edi
c0027956:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027959:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002795c:	d3 e7                	shl    edi,cl
c002795e:	85 ff                	test   edi,edi
c0027960:	0f 95 c1             	setne  cl
c0027963:	0f b6 c9             	movzx  ecx,cl
c0027966:	09 cb                	or     ebx,ecx
c0027968:	29 da                	sub    edx,ebx
c002796a:	19 f0                	sbb    eax,esi
c002796c:	eb b9                	jmp    c0027927 <__adddf3+0x364>
c002796e:	0f 84 cd 00 00 00    	je     c0027a41 <__adddf3+0x47e>
c0027974:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027977:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002797a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002797d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027981:	75 1b                	jne    c002799e <__adddf3+0x3db>
c0027983:	89 d6                	mov    esi,edx
c0027985:	09 c6                	or     esi,eax
c0027987:	0f 84 7b 02 00 00    	je     c0027c08 <__adddf3+0x645>
c002798d:	4b                   	dec    ebx
c002798e:	75 24                	jne    c00279b4 <__adddf3+0x3f1>
c0027990:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027993:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027996:	29 d1                	sub    ecx,edx
c0027998:	19 c6                	sbb    esi,eax
c002799a:	89 ca                	mov    edx,ecx
c002799c:	eb 61                	jmp    c00279ff <__adddf3+0x43c>
c002799e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279a1:	f7 d6                	not    esi
c00279a3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279a9:	0f 84 59 02 00 00    	je     c0027c08 <__adddf3+0x645>
c00279af:	0d 00 00 00 80       	or     eax,0x80000000
c00279b4:	83 fb 1f             	cmp    ebx,0x1f
c00279b7:	7e 4d                	jle    c0027a06 <__adddf3+0x443>
c00279b9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279bf:	83 fb 3f             	cmp    ebx,0x3f
c00279c2:	0f 8f 40 02 00 00    	jg     c0027c08 <__adddf3+0x645>
c00279c8:	83 e3 1f             	and    ebx,0x1f
c00279cb:	89 d9                	mov    ecx,ebx
c00279cd:	89 c7                	mov    edi,eax
c00279cf:	d3 ef                	shr    edi,cl
c00279d1:	31 db                	xor    ebx,ebx
c00279d3:	85 c9                	test   ecx,ecx
c00279d5:	74 12                	je     c00279e9 <__adddf3+0x426>
c00279d7:	be 20 00 00 00       	mov    esi,0x20
c00279dc:	29 ce                	sub    esi,ecx
c00279de:	89 f1                	mov    ecx,esi
c00279e0:	d3 e0                	shl    eax,cl
c00279e2:	31 db                	xor    ebx,ebx
c00279e4:	85 c0                	test   eax,eax
c00279e6:	0f 95 c3             	setne  bl
c00279e9:	31 c0                	xor    eax,eax
c00279eb:	85 d2                	test   edx,edx
c00279ed:	0f 95 c0             	setne  al
c00279f0:	09 c7                	or     edi,eax
c00279f2:	09 fb                	or     ebx,edi
c00279f4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279fa:	29 da                	sub    edx,ebx
c00279fc:	83 de 00             	sbb    esi,0x0
c00279ff:	89 f0                	mov    eax,esi
c0027a01:	e9 d6 00 00 00       	jmp    c0027adc <__adddf3+0x519>
c0027a06:	be 20 00 00 00       	mov    esi,0x20
c0027a0b:	29 de                	sub    esi,ebx
c0027a0d:	89 c7                	mov    edi,eax
c0027a0f:	89 f1                	mov    ecx,esi
c0027a11:	d3 e7                	shl    edi,cl
c0027a13:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a16:	89 d7                	mov    edi,edx
c0027a18:	88 d9                	mov    cl,bl
c0027a1a:	d3 ef                	shr    edi,cl
c0027a1c:	89 f9                	mov    ecx,edi
c0027a1e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a21:	09 cf                	or     edi,ecx
c0027a23:	88 d9                	mov    cl,bl
c0027a25:	d3 e8                	shr    eax,cl
c0027a27:	89 f1                	mov    ecx,esi
c0027a29:	d3 e2                	shl    edx,cl
c0027a2b:	85 d2                	test   edx,edx
c0027a2d:	0f 95 c2             	setne  dl
c0027a30:	0f b6 d2             	movzx  edx,dl
c0027a33:	09 d7                	or     edi,edx
c0027a35:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a38:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a3b:	29 fa                	sub    edx,edi
c0027a3d:	19 c6                	sbb    esi,eax
c0027a3f:	eb be                	jmp    c00279ff <__adddf3+0x43c>
c0027a41:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a44:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a47:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a4d:	75 6a                	jne    c0027ab9 <__adddf3+0x4f6>
c0027a4f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a53:	75 58                	jne    c0027aad <__adddf3+0x4ea>
c0027a55:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a58:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a5b:	89 d6                	mov    esi,edx
c0027a5d:	09 c6                	or     esi,eax
c0027a5f:	75 17                	jne    c0027a78 <__adddf3+0x4b5>
c0027a61:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a64:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a67:	85 db                	test   ebx,ebx
c0027a69:	0f 85 99 01 00 00    	jne    c0027c08 <__adddf3+0x645>
c0027a6f:	31 ff                	xor    edi,edi
c0027a71:	31 c9                	xor    ecx,ecx
c0027a73:	e9 90 01 00 00       	jmp    c0027c08 <__adddf3+0x645>
c0027a78:	85 db                	test   ebx,ebx
c0027a7a:	0f 84 88 01 00 00    	je     c0027c08 <__adddf3+0x645>
c0027a80:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a83:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a86:	85 c0                	test   eax,eax
c0027a88:	79 10                	jns    c0027a9a <__adddf3+0x4d7>
c0027a8a:	31 c9                	xor    ecx,ecx
c0027a8c:	f7 da                	neg    edx
c0027a8e:	0f 95 c1             	setne  cl
c0027a91:	01 c8                	add    eax,ecx
c0027a93:	f7 d8                	neg    eax
c0027a95:	e9 2f 01 00 00       	jmp    c0027bc9 <__adddf3+0x606>
c0027a9a:	31 ff                	xor    edi,edi
c0027a9c:	31 c9                	xor    ecx,ecx
c0027a9e:	89 c3                	mov    ebx,eax
c0027aa0:	09 d3                	or     ebx,edx
c0027aa2:	0f 84 60 01 00 00    	je     c0027c08 <__adddf3+0x645>
c0027aa8:	e9 05 01 00 00       	jmp    c0027bb2 <__adddf3+0x5ef>
c0027aad:	31 ff                	xor    edi,edi
c0027aaf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ab4:	e9 4f 01 00 00       	jmp    c0027c08 <__adddf3+0x645>
c0027ab9:	89 c1                	mov    ecx,eax
c0027abb:	89 d0                	mov    eax,edx
c0027abd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027ac0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027ac3:	89 ca                	mov    edx,ecx
c0027ac5:	85 c9                	test   ecx,ecx
c0027ac7:	79 2c                	jns    c0027af5 <__adddf3+0x532>
c0027ac9:	31 c9                	xor    ecx,ecx
c0027acb:	f7 d8                	neg    eax
c0027acd:	0f 95 c1             	setne  cl
c0027ad0:	01 ca                	add    edx,ecx
c0027ad2:	f7 da                	neg    edx
c0027ad4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ad7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027ada:	eb 19                	jmp    c0027af5 <__adddf3+0x532>
c0027adc:	85 c0                	test   eax,eax
c0027ade:	0f 89 e5 00 00 00    	jns    c0027bc9 <__adddf3+0x606>
c0027ae4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ae9:	89 c1                	mov    ecx,eax
c0027aeb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027aee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027af1:	89 d0                	mov    eax,edx
c0027af3:	89 ca                	mov    edx,ecx
c0027af5:	85 d2                	test   edx,edx
c0027af7:	74 59                	je     c0027b52 <__adddf3+0x58f>
c0027af9:	0f bd da             	bsr    ebx,edx
c0027afc:	83 f3 1f             	xor    ebx,0x1f
c0027aff:	88 d9                	mov    cl,bl
c0027b01:	d3 e2                	shl    edx,cl
c0027b03:	bf 20 00 00 00       	mov    edi,0x20
c0027b08:	89 f9                	mov    ecx,edi
c0027b0a:	29 d9                	sub    ecx,ebx
c0027b0c:	89 c6                	mov    esi,eax
c0027b0e:	d3 ee                	shr    esi,cl
c0027b10:	09 d6                	or     esi,edx
c0027b12:	88 d9                	mov    cl,bl
c0027b14:	d3 e0                	shl    eax,cl
c0027b16:	89 c2                	mov    edx,eax
c0027b18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b1b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b20:	39 d8                	cmp    eax,ebx
c0027b22:	7f 22                	jg     c0027b46 <__adddf3+0x583>
c0027b24:	29 c3                	sub    ebx,eax
c0027b26:	43                   	inc    ebx
c0027b27:	88 d9                	mov    cl,bl
c0027b29:	d3 ea                	shr    edx,cl
c0027b2b:	29 df                	sub    edi,ebx
c0027b2d:	89 f9                	mov    ecx,edi
c0027b2f:	89 f0                	mov    eax,esi
c0027b31:	d3 e0                	shl    eax,cl
c0027b33:	09 c2                	or     edx,eax
c0027b35:	89 f0                	mov    eax,esi
c0027b37:	88 d9                	mov    cl,bl
c0027b39:	d3 e8                	shr    eax,cl
c0027b3b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b3e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b44:	eb 6f                	jmp    c0027bb5 <__adddf3+0x5f2>
c0027b46:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b49:	29 d8                	sub    eax,ebx
c0027b4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b4e:	89 f0                	mov    eax,esi
c0027b50:	eb 59                	jmp    c0027bab <__adddf3+0x5e8>
c0027b52:	85 c0                	test   eax,eax
c0027b54:	74 6a                	je     c0027bc0 <__adddf3+0x5fd>
c0027b56:	0f bd c8             	bsr    ecx,eax
c0027b59:	83 f1 1f             	xor    ecx,0x1f
c0027b5c:	d3 e0                	shl    eax,cl
c0027b5e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b61:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b67:	83 c1 20             	add    ecx,0x20
c0027b6a:	39 cb                	cmp    ebx,ecx
c0027b6c:	7f 35                	jg     c0027ba3 <__adddf3+0x5e0>
c0027b6e:	29 d9                	sub    ecx,ebx
c0027b70:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b73:	83 fe 1f             	cmp    esi,0x1f
c0027b76:	7e 09                	jle    c0027b81 <__adddf3+0x5be>
c0027b78:	83 e9 1f             	sub    ecx,0x1f
c0027b7b:	d3 e8                	shr    eax,cl
c0027b7d:	89 c3                	mov    ebx,eax
c0027b7f:	eb 11                	jmp    c0027b92 <__adddf3+0x5cf>
c0027b81:	b9 20 00 00 00       	mov    ecx,0x20
c0027b86:	29 f1                	sub    ecx,esi
c0027b88:	89 c3                	mov    ebx,eax
c0027b8a:	d3 e3                	shl    ebx,cl
c0027b8c:	89 f1                	mov    ecx,esi
c0027b8e:	d3 e8                	shr    eax,cl
c0027b90:	89 c2                	mov    edx,eax
c0027b92:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b95:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b9d:	89 d0                	mov    eax,edx
c0027b9f:	89 da                	mov    edx,ebx
c0027ba1:	eb 26                	jmp    c0027bc9 <__adddf3+0x606>
c0027ba3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ba6:	29 cf                	sub    edi,ecx
c0027ba8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bab:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bb0:	eb 17                	jmp    c0027bc9 <__adddf3+0x606>
c0027bb2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bb5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bb8:	eb 0f                	jmp    c0027bc9 <__adddf3+0x606>
c0027bba:	31 d2                	xor    edx,edx
c0027bbc:	31 c0                	xor    eax,eax
c0027bbe:	eb 09                	jmp    c0027bc9 <__adddf3+0x606>
c0027bc0:	89 c2                	mov    edx,eax
c0027bc2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027bc9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bcc:	c1 e1 14             	shl    ecx,0x14
c0027bcf:	89 c3                	mov    ebx,eax
c0027bd1:	c1 eb 0b             	shr    ebx,0xb
c0027bd4:	09 d9                	or     ecx,ebx
c0027bd6:	89 d3                	mov    ebx,edx
c0027bd8:	c1 eb 0b             	shr    ebx,0xb
c0027bdb:	c1 e0 15             	shl    eax,0x15
c0027bde:	09 d8                	or     eax,ebx
c0027be0:	89 c7                	mov    edi,eax
c0027be2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027be8:	0f 95 c0             	setne  al
c0027beb:	89 c6                	mov    esi,eax
c0027bed:	09 f3                	or     ebx,esi
c0027bef:	83 e3 01             	and    ebx,0x1
c0027bf2:	c1 ea 0a             	shr    edx,0xa
c0027bf5:	21 da                	and    edx,ebx
c0027bf7:	89 f8                	mov    eax,edi
c0027bf9:	01 d0                	add    eax,edx
c0027bfb:	83 d1 00             	adc    ecx,0x0
c0027bfe:	89 c7                	mov    edi,eax
c0027c00:	eb 06                	jmp    c0027c08 <__adddf3+0x645>
c0027c02:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c05:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c08:	89 f8                	mov    eax,edi
c0027c0a:	89 ca                	mov    edx,ecx
c0027c0c:	83 c4 24             	add    esp,0x24
c0027c0f:	5b                   	pop    ebx
c0027c10:	5e                   	pop    esi
c0027c11:	5f                   	pop    edi
c0027c12:	5d                   	pop    ebp
c0027c13:	c3                   	ret    

c0027c14 <__subdf3>:
c0027c14:	55                   	push   ebp
c0027c15:	89 e5                	mov    ebp,esp
c0027c17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c1d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c23:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c26:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c29:	5d                   	pop    ebp
c0027c2a:	e9 94 f9 ff ff       	jmp    c00275c3 <__adddf3>

c0027c2f <__negdf2>:
c0027c2f:	55                   	push   ebp
c0027c30:	89 e5                	mov    ebp,esp
c0027c32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c35:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c38:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c3e:	5d                   	pop    ebp
c0027c3f:	c3                   	ret    

c0027c40 <__muldf3>:
c0027c40:	55                   	push   ebp
c0027c41:	89 e5                	mov    ebp,esp
c0027c43:	57                   	push   edi
c0027c44:	56                   	push   esi
c0027c45:	53                   	push   ebx
c0027c46:	83 ec 24             	sub    esp,0x24
c0027c49:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c55:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c58:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c5e:	89 c8                	mov    eax,ecx
c0027c60:	c1 f8 14             	sar    eax,0x14
c0027c63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c66:	89 f8                	mov    eax,edi
c0027c68:	89 fb                	mov    ebx,edi
c0027c6a:	c1 e3 0b             	shl    ebx,0xb
c0027c6d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c70:	c1 e1 0b             	shl    ecx,0xb
c0027c73:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c79:	c1 e8 15             	shr    eax,0x15
c0027c7c:	09 c1                	or     ecx,eax
c0027c7e:	89 d6                	mov    esi,edx
c0027c80:	89 d0                	mov    eax,edx
c0027c82:	c1 f8 14             	sar    eax,0x14
c0027c85:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c88:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c8b:	89 c3                	mov    ebx,eax
c0027c8d:	c1 e3 0b             	shl    ebx,0xb
c0027c90:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c93:	c1 e6 0b             	shl    esi,0xb
c0027c96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c9c:	c1 e8 15             	shr    eax,0x15
c0027c9f:	09 c6                	or     esi,eax
c0027ca1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ca4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ca9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027cac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027caf:	25 ff 07 00 00       	and    eax,0x7ff
c0027cb4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027cb7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cba:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027cbd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027cc4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cc7:	40                   	inc    eax
c0027cc8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ccd:	0f 85 8d 00 00 00    	jne    c0027d60 <__muldf3+0x120>
c0027cd3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cd6:	09 c8                	or     eax,ecx
c0027cd8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027cdc:	74 44                	je     c0027d22 <__muldf3+0xe2>
c0027cde:	85 c0                	test   eax,eax
c0027ce0:	0f 85 31 02 00 00    	jne    c0027f17 <__muldf3+0x2d7>
c0027ce6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ce9:	40                   	inc    eax
c0027cea:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cef:	75 13                	jne    c0027d04 <__muldf3+0xc4>
c0027cf1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cf4:	09 f1                	or     ecx,esi
c0027cf6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cfa:	74 22                	je     c0027d1e <__muldf3+0xde>
c0027cfc:	85 c9                	test   ecx,ecx
c0027cfe:	0f 85 0d 02 00 00    	jne    c0027f11 <__muldf3+0x2d1>
c0027d04:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d08:	0f 89 09 02 00 00    	jns    c0027f17 <__muldf3+0x2d7>
c0027d0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d11:	05 00 00 00 80       	add    eax,0x80000000
c0027d16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d19:	e9 f9 01 00 00       	jmp    c0027f17 <__muldf3+0x2d7>
c0027d1e:	85 c9                	test   ecx,ecx
c0027d20:	eb 2e                	jmp    c0027d50 <__muldf3+0x110>
c0027d22:	85 c0                	test   eax,eax
c0027d24:	74 20                	je     c0027d46 <__muldf3+0x106>
c0027d26:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d2c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d2f:	c1 ef 1f             	shr    edi,0x1f
c0027d32:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d35:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d38:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d3b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d3e:	09 f9                	or     ecx,edi
c0027d40:	78 1e                	js     c0027d60 <__muldf3+0x120>
c0027d42:	89 c3                	mov    ebx,eax
c0027d44:	eb e0                	jmp    c0027d26 <__muldf3+0xe6>
c0027d46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d49:	f7 d0                	not    eax
c0027d4b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d50:	75 b2                	jne    c0027d04 <__muldf3+0xc4>
c0027d52:	31 ff                	xor    edi,edi
c0027d54:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d5b:	e9 b7 01 00 00       	jmp    c0027f17 <__muldf3+0x2d7>
c0027d60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d63:	40                   	inc    eax
c0027d64:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d69:	75 57                	jne    c0027dc2 <__muldf3+0x182>
c0027d6b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d6e:	09 f0                	or     eax,esi
c0027d70:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d74:	74 23                	je     c0027d99 <__muldf3+0x159>
c0027d76:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d7a:	0f 89 91 01 00 00    	jns    c0027f11 <__muldf3+0x2d1>
c0027d80:	85 c0                	test   eax,eax
c0027d82:	0f 85 89 01 00 00    	jne    c0027f11 <__muldf3+0x2d1>
c0027d88:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d8b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d94:	e9 7e 01 00 00       	jmp    c0027f17 <__muldf3+0x2d7>
c0027d99:	85 c0                	test   eax,eax
c0027d9b:	75 0c                	jne    c0027da9 <__muldf3+0x169>
c0027d9d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027da1:	0f 89 6a 01 00 00    	jns    c0027f11 <__muldf3+0x2d1>
c0027da7:	eb df                	jmp    c0027d88 <__muldf3+0x148>
c0027da9:	01 f6                	add    esi,esi
c0027dab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dae:	c1 ea 1f             	shr    edx,0x1f
c0027db1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027db4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027db7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dba:	09 d6                	or     esi,edx
c0027dbc:	78 04                	js     c0027dc2 <__muldf3+0x182>
c0027dbe:	89 c3                	mov    ebx,eax
c0027dc0:	eb e7                	jmp    c0027da9 <__muldf3+0x169>
c0027dc2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027dc8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dce:	89 c8                	mov    eax,ecx
c0027dd0:	f7 e6                	mul    esi
c0027dd2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027dd5:	89 c7                	mov    edi,eax
c0027dd7:	89 c8                	mov    eax,ecx
c0027dd9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ddc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ddf:	89 c1                	mov    ecx,eax
c0027de1:	89 f0                	mov    eax,esi
c0027de3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027de6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027de9:	89 c6                	mov    esi,eax
c0027deb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dee:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027df1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027df4:	31 c0                	xor    eax,eax
c0027df6:	01 f1                	add    ecx,esi
c0027df8:	0f 92 c0             	setb   al
c0027dfb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dfe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e01:	83 d6 00             	adc    esi,0x0
c0027e04:	01 c7                	add    edi,eax
c0027e06:	83 d6 00             	adc    esi,0x0
c0027e09:	01 ca                	add    edx,ecx
c0027e0b:	0f 92 c1             	setb   cl
c0027e0e:	0f b6 c9             	movzx  ecx,cl
c0027e11:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e14:	83 d6 00             	adc    esi,0x0
c0027e17:	01 cf                	add    edi,ecx
c0027e19:	83 d6 00             	adc    esi,0x0
c0027e1c:	31 c9                	xor    ecx,ecx
c0027e1e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e21:	0f 95 c1             	setne  cl
c0027e24:	09 cf                	or     edi,ecx
c0027e26:	85 f6                	test   esi,esi
c0027e28:	78 0c                	js     c0027e36 <__muldf3+0x1f6>
c0027e2a:	01 f6                	add    esi,esi
c0027e2c:	89 f8                	mov    eax,edi
c0027e2e:	c1 e8 1f             	shr    eax,0x1f
c0027e31:	09 c6                	or     esi,eax
c0027e33:	01 ff                	add    edi,edi
c0027e35:	4b                   	dec    ebx
c0027e36:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e3c:	0f 8f 85 00 00 00    	jg     c0027ec7 <__muldf3+0x287>
c0027e42:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e48:	85 db                	test   ebx,ebx
c0027e4a:	0f 8f 84 00 00 00    	jg     c0027ed4 <__muldf3+0x294>
c0027e50:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e53:	7c 79                	jl     c0027ece <__muldf3+0x28e>
c0027e55:	ba 01 00 00 00       	mov    edx,0x1
c0027e5a:	29 da                	sub    edx,ebx
c0027e5c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e62:	83 fa 1f             	cmp    edx,0x1f
c0027e65:	7e 30                	jle    c0027e97 <__muldf3+0x257>
c0027e67:	83 fa 20             	cmp    edx,0x20
c0027e6a:	75 0b                	jne    c0027e77 <__muldf3+0x237>
c0027e6c:	31 c0                	xor    eax,eax
c0027e6e:	85 ff                	test   edi,edi
c0027e70:	0f 95 c0             	setne  al
c0027e73:	89 c7                	mov    edi,eax
c0027e75:	eb 1a                	jmp    c0027e91 <__muldf3+0x251>
c0027e77:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e7a:	89 f0                	mov    eax,esi
c0027e7c:	d3 e0                	shl    eax,cl
c0027e7e:	09 f8                	or     eax,edi
c0027e80:	0f 95 c0             	setne  al
c0027e83:	0f b6 c0             	movzx  eax,al
c0027e86:	89 c7                	mov    edi,eax
c0027e88:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e8d:	29 d9                	sub    ecx,ebx
c0027e8f:	d3 ee                	shr    esi,cl
c0027e91:	09 f7                	or     edi,esi
c0027e93:	31 db                	xor    ebx,ebx
c0027e95:	eb 3b                	jmp    c0027ed2 <__muldf3+0x292>
c0027e97:	83 c3 1f             	add    ebx,0x1f
c0027e9a:	89 f0                	mov    eax,esi
c0027e9c:	88 d9                	mov    cl,bl
c0027e9e:	d3 e0                	shl    eax,cl
c0027ea0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ea3:	89 f8                	mov    eax,edi
c0027ea5:	88 d1                	mov    cl,dl
c0027ea7:	d3 e8                	shr    eax,cl
c0027ea9:	89 c1                	mov    ecx,eax
c0027eab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027eae:	09 c8                	or     eax,ecx
c0027eb0:	88 d9                	mov    cl,bl
c0027eb2:	d3 e7                	shl    edi,cl
c0027eb4:	31 db                	xor    ebx,ebx
c0027eb6:	85 ff                	test   edi,edi
c0027eb8:	0f 95 c3             	setne  bl
c0027ebb:	89 df                	mov    edi,ebx
c0027ebd:	09 c7                	or     edi,eax
c0027ebf:	88 d1                	mov    cl,dl
c0027ec1:	d3 ee                	shr    esi,cl
c0027ec3:	31 db                	xor    ebx,ebx
c0027ec5:	eb 0d                	jmp    c0027ed4 <__muldf3+0x294>
c0027ec7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ecc:	eb 02                	jmp    c0027ed0 <__muldf3+0x290>
c0027ece:	31 db                	xor    ebx,ebx
c0027ed0:	31 ff                	xor    edi,edi
c0027ed2:	31 f6                	xor    esi,esi
c0027ed4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ed7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027eda:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027edf:	09 c3                	or     ebx,eax
c0027ee1:	c1 e3 14             	shl    ebx,0x14
c0027ee4:	89 f0                	mov    eax,esi
c0027ee6:	c1 e8 0b             	shr    eax,0xb
c0027ee9:	09 c3                	or     ebx,eax
c0027eeb:	89 f8                	mov    eax,edi
c0027eed:	c1 e8 0b             	shr    eax,0xb
c0027ef0:	c1 e6 15             	shl    esi,0x15
c0027ef3:	09 c6                	or     esi,eax
c0027ef5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027efb:	0f 95 c1             	setne  cl
c0027efe:	09 c8                	or     eax,ecx
c0027f00:	83 e0 01             	and    eax,0x1
c0027f03:	c1 ef 0a             	shr    edi,0xa
c0027f06:	21 c7                	and    edi,eax
c0027f08:	01 f7                	add    edi,esi
c0027f0a:	83 d3 00             	adc    ebx,0x0
c0027f0d:	89 da                	mov    edx,ebx
c0027f0f:	eb 03                	jmp    c0027f14 <__muldf3+0x2d4>
c0027f11:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f14:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f17:	89 f8                	mov    eax,edi
c0027f19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f1c:	83 c4 24             	add    esp,0x24
c0027f1f:	5b                   	pop    ebx
c0027f20:	5e                   	pop    esi
c0027f21:	5f                   	pop    edi
c0027f22:	5d                   	pop    ebp
c0027f23:	c3                   	ret    

c0027f24 <__divdf3>:
c0027f24:	55                   	push   ebp
c0027f25:	89 e5                	mov    ebp,esp
c0027f27:	57                   	push   edi
c0027f28:	56                   	push   esi
c0027f29:	53                   	push   ebx
c0027f2a:	83 ec 2c             	sub    esp,0x2c
c0027f2d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f30:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f36:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f3c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f3f:	89 ce                	mov    esi,ecx
c0027f41:	89 c8                	mov    eax,ecx
c0027f43:	c1 f8 14             	sar    eax,0x14
c0027f46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f49:	89 f8                	mov    eax,edi
c0027f4b:	89 fb                	mov    ebx,edi
c0027f4d:	c1 e3 0b             	shl    ebx,0xb
c0027f50:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f53:	c1 e6 0b             	shl    esi,0xb
c0027f56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f5c:	c1 e8 15             	shr    eax,0x15
c0027f5f:	09 c6                	or     esi,eax
c0027f61:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f64:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f67:	89 c2                	mov    edx,eax
c0027f69:	c1 fa 14             	sar    edx,0x14
c0027f6c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f6f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f72:	89 de                	mov    esi,ebx
c0027f74:	c1 e6 0b             	shl    esi,0xb
c0027f77:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f7a:	c1 e0 0b             	shl    eax,0xb
c0027f7d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f82:	c1 eb 15             	shr    ebx,0x15
c0027f85:	09 d8                	or     eax,ebx
c0027f87:	89 c2                	mov    edx,eax
c0027f89:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f8c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f91:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f94:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f97:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f9d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027fa0:	29 d8                	sub    eax,ebx
c0027fa2:	05 ff 03 00 00       	add    eax,0x3ff
c0027fa7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027faa:	46                   	inc    esi
c0027fab:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fb1:	0f 85 a5 00 00 00    	jne    c002805c <__divdf3+0x138>
c0027fb7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fba:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027fbd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027fc1:	74 2a                	je     c0027fed <__divdf3+0xc9>
c0027fc3:	85 f6                	test   esi,esi
c0027fc5:	0f 85 cc 02 00 00    	jne    c0028297 <__divdf3+0x373>
c0027fcb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fce:	40                   	inc    eax
c0027fcf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fd4:	75 26                	jne    c0027ffc <__divdf3+0xd8>
c0027fd6:	85 db                	test   ebx,ebx
c0027fd8:	74 22                	je     c0027ffc <__divdf3+0xd8>
c0027fda:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fdd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fe0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fe3:	09 d0                	or     eax,edx
c0027fe5:	0f 85 ac 02 00 00    	jne    c0028297 <__divdf3+0x373>
c0027feb:	eb 63                	jmp    c0028050 <__divdf3+0x12c>
c0027fed:	85 f6                	test   esi,esi
c0027fef:	75 22                	jne    c0028013 <__divdf3+0xef>
c0027ff1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ff4:	40                   	inc    eax
c0027ff5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ffa:	74 36                	je     c0028032 <__divdf3+0x10e>
c0027ffc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028000:	0f 89 91 02 00 00    	jns    c0028297 <__divdf3+0x373>
c0028006:	89 f8                	mov    eax,edi
c0028008:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002800e:	e9 80 02 00 00       	jmp    c0028293 <__divdf3+0x36f>
c0028013:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028016:	01 f6                	add    esi,esi
c0028018:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002801b:	c1 ef 1f             	shr    edi,0x1f
c002801e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028021:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028024:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028027:	09 f7                	or     edi,esi
c0028029:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002802c:	78 2e                	js     c002805c <__divdf3+0x138>
c002802e:	89 c8                	mov    eax,ecx
c0028030:	eb e1                	jmp    c0028013 <__divdf3+0xef>
c0028032:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028035:	09 d0                	or     eax,edx
c0028037:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002803b:	74 0f                	je     c002804c <__divdf3+0x128>
c002803d:	85 c0                	test   eax,eax
c002803f:	74 bb                	je     c0027ffc <__divdf3+0xd8>
c0028041:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028044:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028047:	e9 4b 02 00 00       	jmp    c0028297 <__divdf3+0x373>
c002804c:	85 c0                	test   eax,eax
c002804e:	75 ac                	jne    c0027ffc <__divdf3+0xd8>
c0028050:	31 ff                	xor    edi,edi
c0028052:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028057:	e9 3b 02 00 00       	jmp    c0028297 <__divdf3+0x373>
c002805c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002805f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028062:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028068:	75 6b                	jne    c00280d5 <__divdf3+0x1b1>
c002806a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002806d:	09 d6                	or     esi,edx
c002806f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028073:	74 28                	je     c002809d <__divdf3+0x179>
c0028075:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028078:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002807b:	85 f6                	test   esi,esi
c002807d:	0f 85 14 02 00 00    	jne    c0028297 <__divdf3+0x373>
c0028083:	31 ff                	xor    edi,edi
c0028085:	31 c9                	xor    ecx,ecx
c0028087:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002808a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002808d:	0f 89 04 02 00 00    	jns    c0028297 <__divdf3+0x373>
c0028093:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028098:	e9 fa 01 00 00       	jmp    c0028297 <__divdf3+0x373>
c002809d:	85 f6                	test   esi,esi
c002809f:	75 1b                	jne    c00280bc <__divdf3+0x198>
c00280a1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280a4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280a7:	25 00 00 00 80       	and    eax,0x80000000
c00280ac:	31 c9                	xor    ecx,ecx
c00280ae:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280b3:	89 cf                	mov    edi,ecx
c00280b5:	89 c1                	mov    ecx,eax
c00280b7:	e9 db 01 00 00       	jmp    c0028297 <__divdf3+0x373>
c00280bc:	01 d2                	add    edx,edx
c00280be:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280c1:	c1 eb 1f             	shr    ebx,0x1f
c00280c4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280c7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280ca:	8d 48 01             	lea    ecx,[eax+0x1]
c00280cd:	09 da                	or     edx,ebx
c00280cf:	78 04                	js     c00280d5 <__divdf3+0x1b1>
c00280d1:	89 c8                	mov    eax,ecx
c00280d3:	eb e7                	jmp    c00280bc <__divdf3+0x198>
c00280d5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280d8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280de:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280e4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280e7:	39 d6                	cmp    esi,edx
c00280e9:	77 0d                	ja     c00280f8 <__divdf3+0x1d4>
c00280eb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280ee:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280f1:	72 1b                	jb     c002810e <__divdf3+0x1ea>
c00280f3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280f6:	75 16                	jne    c002810e <__divdf3+0x1ea>
c00280f8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280fb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280fe:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028101:	83 de 00             	sbb    esi,0x0
c0028104:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028107:	ba 01 00 00 00       	mov    edx,0x1
c002810c:	eb 02                	jmp    c0028110 <__divdf3+0x1ec>
c002810e:	31 d2                	xor    edx,edx
c0028110:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028117:	31 ff                	xor    edi,edi
c0028119:	01 ff                	add    edi,edi
c002811b:	89 d1                	mov    ecx,edx
c002811d:	c1 e9 1f             	shr    ecx,0x1f
c0028120:	09 cf                	or     edi,ecx
c0028122:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028125:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028128:	89 da                	mov    edx,ebx
c002812a:	89 f3                	mov    ebx,esi
c002812c:	8d 34 36             	lea    esi,[esi+esi*1]
c002812f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028132:	c1 e9 1f             	shr    ecx,0x1f
c0028135:	09 ce                	or     esi,ecx
c0028137:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002813a:	01 c9                	add    ecx,ecx
c002813c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002813f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028142:	85 db                	test   ebx,ebx
c0028144:	78 29                	js     c002816f <__divdf3+0x24b>
c0028146:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028149:	72 07                	jb     c0028152 <__divdf3+0x22e>
c002814b:	75 3c                	jne    c0028189 <__divdf3+0x265>
c002814d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028150:	77 37                	ja     c0028189 <__divdf3+0x265>
c0028152:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028155:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028158:	31 d2                	xor    edx,edx
c002815a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002815d:	0f 97 c2             	seta   dl
c0028160:	29 d6                	sub    esi,edx
c0028162:	89 d9                	mov    ecx,ebx
c0028164:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028167:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002816a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002816d:	eb 17                	jmp    c0028186 <__divdf3+0x262>
c002816f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028172:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028175:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028178:	0f 97 c1             	seta   cl
c002817b:	0f b6 c9             	movzx  ecx,cl
c002817e:	29 ce                	sub    esi,ecx
c0028180:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028183:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028186:	83 ca 01             	or     edx,0x1
c0028189:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002818c:	75 8b                	jne    c0028119 <__divdf3+0x1f5>
c002818e:	c1 e7 09             	shl    edi,0x9
c0028191:	89 d1                	mov    ecx,edx
c0028193:	c1 e9 17             	shr    ecx,0x17
c0028196:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028199:	09 f3                	or     ebx,esi
c002819b:	0f 95 c3             	setne  bl
c002819e:	0f b6 db             	movzx  ebx,bl
c00281a1:	c1 e2 09             	shl    edx,0x9
c00281a4:	09 d3                	or     ebx,edx
c00281a6:	89 ca                	mov    edx,ecx
c00281a8:	09 fa                	or     edx,edi
c00281aa:	78 0c                	js     c00281b8 <__divdf3+0x294>
c00281ac:	01 d2                	add    edx,edx
c00281ae:	89 d9                	mov    ecx,ebx
c00281b0:	c1 e9 1f             	shr    ecx,0x1f
c00281b3:	09 ca                	or     edx,ecx
c00281b5:	01 db                	add    ebx,ebx
c00281b7:	48                   	dec    eax
c00281b8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281bd:	0f 8f 83 00 00 00    	jg     c0028246 <__divdf3+0x322>
c00281c3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281c9:	85 c0                	test   eax,eax
c00281cb:	0f 8f 82 00 00 00    	jg     c0028253 <__divdf3+0x32f>
c00281d1:	83 f8 cc             	cmp    eax,0xffffffcc
c00281d4:	7c 77                	jl     c002824d <__divdf3+0x329>
c00281d6:	be 01 00 00 00       	mov    esi,0x1
c00281db:	29 c6                	sub    esi,eax
c00281dd:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281e3:	83 fe 1f             	cmp    esi,0x1f
c00281e6:	7e 2f                	jle    c0028217 <__divdf3+0x2f3>
c00281e8:	83 fe 20             	cmp    esi,0x20
c00281eb:	75 0a                	jne    c00281f7 <__divdf3+0x2d3>
c00281ed:	85 db                	test   ebx,ebx
c00281ef:	0f 95 c3             	setne  bl
c00281f2:	0f b6 db             	movzx  ebx,bl
c00281f5:	eb 1a                	jmp    c0028211 <__divdf3+0x2ed>
c00281f7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281fa:	89 d7                	mov    edi,edx
c00281fc:	d3 e7                	shl    edi,cl
c00281fe:	89 f9                	mov    ecx,edi
c0028200:	09 d9                	or     ecx,ebx
c0028202:	0f 95 c3             	setne  bl
c0028205:	0f b6 db             	movzx  ebx,bl
c0028208:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002820d:	29 c1                	sub    ecx,eax
c002820f:	d3 ea                	shr    edx,cl
c0028211:	09 d3                	or     ebx,edx
c0028213:	31 c0                	xor    eax,eax
c0028215:	eb 3a                	jmp    c0028251 <__divdf3+0x32d>
c0028217:	83 c0 1f             	add    eax,0x1f
c002821a:	89 d7                	mov    edi,edx
c002821c:	88 c1                	mov    cl,al
c002821e:	d3 e7                	shl    edi,cl
c0028220:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028223:	89 df                	mov    edi,ebx
c0028225:	89 f1                	mov    ecx,esi
c0028227:	d3 ef                	shr    edi,cl
c0028229:	89 f9                	mov    ecx,edi
c002822b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002822e:	09 cf                	or     edi,ecx
c0028230:	88 c1                	mov    cl,al
c0028232:	d3 e3                	shl    ebx,cl
c0028234:	85 db                	test   ebx,ebx
c0028236:	0f 95 c3             	setne  bl
c0028239:	0f b6 db             	movzx  ebx,bl
c002823c:	09 fb                	or     ebx,edi
c002823e:	89 f1                	mov    ecx,esi
c0028240:	d3 ea                	shr    edx,cl
c0028242:	31 c0                	xor    eax,eax
c0028244:	eb 0d                	jmp    c0028253 <__divdf3+0x32f>
c0028246:	b8 ff 07 00 00       	mov    eax,0x7ff
c002824b:	eb 02                	jmp    c002824f <__divdf3+0x32b>
c002824d:	31 c0                	xor    eax,eax
c002824f:	31 db                	xor    ebx,ebx
c0028251:	31 d2                	xor    edx,edx
c0028253:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028256:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028259:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002825f:	09 c8                	or     eax,ecx
c0028261:	c1 e0 14             	shl    eax,0x14
c0028264:	89 d1                	mov    ecx,edx
c0028266:	c1 e9 0b             	shr    ecx,0xb
c0028269:	09 c8                	or     eax,ecx
c002826b:	89 c6                	mov    esi,eax
c002826d:	89 d9                	mov    ecx,ebx
c002826f:	c1 e9 0b             	shr    ecx,0xb
c0028272:	c1 e2 15             	shl    edx,0x15
c0028275:	09 ca                	or     edx,ecx
c0028277:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002827d:	0f 95 c0             	setne  al
c0028280:	09 c1                	or     ecx,eax
c0028282:	83 e1 01             	and    ecx,0x1
c0028285:	c1 eb 0a             	shr    ebx,0xa
c0028288:	21 cb                	and    ebx,ecx
c002828a:	01 d3                	add    ebx,edx
c002828c:	89 d8                	mov    eax,ebx
c002828e:	83 d6 00             	adc    esi,0x0
c0028291:	89 f2                	mov    edx,esi
c0028293:	89 c7                	mov    edi,eax
c0028295:	89 d1                	mov    ecx,edx
c0028297:	89 f8                	mov    eax,edi
c0028299:	89 ca                	mov    edx,ecx
c002829b:	83 c4 2c             	add    esp,0x2c
c002829e:	5b                   	pop    ebx
c002829f:	5e                   	pop    esi
c00282a0:	5f                   	pop    edi
c00282a1:	5d                   	pop    ebp
c00282a2:	c3                   	ret    

c00282a3 <__floatsidf>:
c00282a3:	55                   	push   ebp
c00282a4:	89 e5                	mov    ebp,esp
c00282a6:	56                   	push   esi
c00282a7:	53                   	push   ebx
c00282a8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282ab:	85 db                	test   ebx,ebx
c00282ad:	7e 15                	jle    c00282c4 <__floatsidf+0x21>
c00282af:	0f bd cb             	bsr    ecx,ebx
c00282b2:	83 f1 1f             	xor    ecx,0x1f
c00282b5:	d3 e3                	shl    ebx,cl
c00282b7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282bd:	b8 1e 04 00 00       	mov    eax,0x41e
c00282c2:	eb 21                	jmp    c00282e5 <__floatsidf+0x42>
c00282c4:	b8 00 00 00 00       	mov    eax,0x0
c00282c9:	ba 00 00 00 00       	mov    edx,0x0
c00282ce:	74 2a                	je     c00282fa <__floatsidf+0x57>
c00282d0:	f7 db                	neg    ebx
c00282d2:	0f bd cb             	bsr    ecx,ebx
c00282d5:	83 f1 1f             	xor    ecx,0x1f
c00282d8:	d3 e3                	shl    ebx,cl
c00282da:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282e0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282e5:	29 c8                	sub    eax,ecx
c00282e7:	c1 e0 14             	shl    eax,0x14
c00282ea:	89 c1                	mov    ecx,eax
c00282ec:	89 de                	mov    esi,ebx
c00282ee:	c1 ee 0b             	shr    esi,0xb
c00282f1:	09 f1                	or     ecx,esi
c00282f3:	89 ca                	mov    edx,ecx
c00282f5:	c1 e3 15             	shl    ebx,0x15
c00282f8:	89 d8                	mov    eax,ebx
c00282fa:	5b                   	pop    ebx
c00282fb:	5e                   	pop    esi
c00282fc:	5d                   	pop    ebp
c00282fd:	c3                   	ret    

c00282fe <__floatunsidf>:
c00282fe:	55                   	push   ebp
c00282ff:	89 e5                	mov    ebp,esp
c0028301:	56                   	push   esi
c0028302:	53                   	push   ebx
c0028303:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028306:	85 db                	test   ebx,ebx
c0028308:	74 2a                	je     c0028334 <__floatunsidf+0x36>
c002830a:	0f bd cb             	bsr    ecx,ebx
c002830d:	83 f1 1f             	xor    ecx,0x1f
c0028310:	d3 e3                	shl    ebx,cl
c0028312:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028318:	b8 1e 04 00 00       	mov    eax,0x41e
c002831d:	29 c8                	sub    eax,ecx
c002831f:	c1 e0 14             	shl    eax,0x14
c0028322:	89 c1                	mov    ecx,eax
c0028324:	89 de                	mov    esi,ebx
c0028326:	c1 ee 0b             	shr    esi,0xb
c0028329:	09 f1                	or     ecx,esi
c002832b:	89 ca                	mov    edx,ecx
c002832d:	c1 e3 15             	shl    ebx,0x15
c0028330:	89 d8                	mov    eax,ebx
c0028332:	eb 04                	jmp    c0028338 <__floatunsidf+0x3a>
c0028334:	31 c0                	xor    eax,eax
c0028336:	31 d2                	xor    edx,edx
c0028338:	5b                   	pop    ebx
c0028339:	5e                   	pop    esi
c002833a:	5d                   	pop    ebp
c002833b:	c3                   	ret    

c002833c <__fixdfsi>:
c002833c:	55                   	push   ebp
c002833d:	89 e5                	mov    ebp,esp
c002833f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028342:	89 d1                	mov    ecx,edx
c0028344:	c1 e1 0b             	shl    ecx,0xb
c0028347:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002834d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028350:	c1 e8 15             	shr    eax,0x15
c0028353:	09 c1                	or     ecx,eax
c0028355:	c1 fa 14             	sar    edx,0x14
c0028358:	78 1f                	js     c0028379 <__fixdfsi+0x3d>
c002835a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028360:	31 c0                	xor    eax,eax
c0028362:	83 fa 1e             	cmp    edx,0x1e
c0028365:	77 40                	ja     c00283a7 <__fixdfsi+0x6b>
c0028367:	89 c8                	mov    eax,ecx
c0028369:	0d 00 00 00 80       	or     eax,0x80000000
c002836e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028373:	29 d1                	sub    ecx,edx
c0028375:	d3 e8                	shr    eax,cl
c0028377:	eb 2e                	jmp    c00283a7 <__fixdfsi+0x6b>
c0028379:	31 c0                	xor    eax,eax
c002837b:	81 c2 01 04 00 00    	add    edx,0x401
c0028381:	78 24                	js     c00283a7 <__fixdfsi+0x6b>
c0028383:	83 fa 1e             	cmp    edx,0x1e
c0028386:	7e 09                	jle    c0028391 <__fixdfsi+0x55>
c0028388:	83 fa 1f             	cmp    edx,0x1f
c002838b:	75 18                	jne    c00283a5 <__fixdfsi+0x69>
c002838d:	85 c9                	test   ecx,ecx
c002838f:	75 14                	jne    c00283a5 <__fixdfsi+0x69>
c0028391:	89 c8                	mov    eax,ecx
c0028393:	0d 00 00 00 80       	or     eax,0x80000000
c0028398:	b9 1f 00 00 00       	mov    ecx,0x1f
c002839d:	29 d1                	sub    ecx,edx
c002839f:	d3 e8                	shr    eax,cl
c00283a1:	f7 d8                	neg    eax
c00283a3:	eb 02                	jmp    c00283a7 <__fixdfsi+0x6b>
c00283a5:	31 c0                	xor    eax,eax
c00283a7:	5d                   	pop    ebp
c00283a8:	c3                   	ret    

c00283a9 <__fixunsdfsi>:
c00283a9:	55                   	push   ebp
c00283aa:	89 e5                	mov    ebp,esp
c00283ac:	53                   	push   ebx
c00283ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283b3:	89 d3                	mov    ebx,edx
c00283b5:	c1 fb 14             	sar    ebx,0x14
c00283b8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283be:	31 c0                	xor    eax,eax
c00283c0:	83 fb 1f             	cmp    ebx,0x1f
c00283c3:	77 1d                	ja     c00283e2 <__fixunsdfsi+0x39>
c00283c5:	89 d0                	mov    eax,edx
c00283c7:	c1 e0 0b             	shl    eax,0xb
c00283ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283cf:	c1 e9 15             	shr    ecx,0x15
c00283d2:	09 c8                	or     eax,ecx
c00283d4:	0d 00 00 00 80       	or     eax,0x80000000
c00283d9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283de:	29 d9                	sub    ecx,ebx
c00283e0:	d3 e8                	shr    eax,cl
c00283e2:	5b                   	pop    ebx
c00283e3:	5d                   	pop    ebp
c00283e4:	c3                   	ret    

c00283e5 <__cmpdf2>:
c00283e5:	55                   	push   ebp
c00283e6:	89 e5                	mov    ebp,esp
c00283e8:	57                   	push   edi
c00283e9:	56                   	push   esi
c00283ea:	53                   	push   ebx
c00283eb:	83 ec 0c             	sub    esp,0xc
c00283ee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283f1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283f4:	89 ca                	mov    edx,ecx
c00283f6:	c1 ea 14             	shr    edx,0x14
c00283f9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283ff:	89 cb                	mov    ebx,ecx
c0028401:	c1 fb 1f             	sar    ebx,0x1f
c0028404:	31 da                	xor    edx,ebx
c0028406:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028409:	89 df                	mov    edi,ebx
c002840b:	c1 e7 0b             	shl    edi,0xb
c002840e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028411:	c1 e1 0b             	shl    ecx,0xb
c0028414:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002841a:	c1 eb 15             	shr    ebx,0x15
c002841d:	09 d9                	or     ecx,ebx
c002841f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028422:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028425:	89 ce                	mov    esi,ecx
c0028427:	c1 ee 14             	shr    esi,0x14
c002842a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028430:	89 cb                	mov    ebx,ecx
c0028432:	c1 fb 1f             	sar    ebx,0x1f
c0028435:	31 de                	xor    esi,ebx
c0028437:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002843a:	89 df                	mov    edi,ebx
c002843c:	c1 e7 0b             	shl    edi,0xb
c002843f:	c1 e1 0b             	shl    ecx,0xb
c0028442:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028448:	c1 eb 15             	shr    ebx,0x15
c002844b:	09 d9                	or     ecx,ebx
c002844d:	89 d3                	mov    ebx,edx
c002844f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028455:	43                   	inc    ebx
c0028456:	83 fb 01             	cmp    ebx,0x1
c0028459:	77 08                	ja     c0028463 <__cmpdf2+0x7e>
c002845b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002845e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028461:	75 68                	jne    c00284cb <__cmpdf2+0xe6>
c0028463:	89 f3                	mov    ebx,esi
c0028465:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002846b:	43                   	inc    ebx
c002846c:	83 fb 01             	cmp    ebx,0x1
c002846f:	77 06                	ja     c0028477 <__cmpdf2+0x92>
c0028471:	89 fb                	mov    ebx,edi
c0028473:	09 cb                	or     ebx,ecx
c0028475:	75 54                	jne    c00284cb <__cmpdf2+0xe6>
c0028477:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002847a:	09 f8                	or     eax,edi
c002847c:	09 c8                	or     eax,ecx
c002847e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028481:	75 12                	jne    c0028495 <__cmpdf2+0xb0>
c0028483:	8d 42 01             	lea    eax,[edx+0x1]
c0028486:	83 f8 01             	cmp    eax,0x1
c0028489:	77 0a                	ja     c0028495 <__cmpdf2+0xb0>
c002848b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002848e:	31 c0                	xor    eax,eax
c0028490:	83 fb 01             	cmp    ebx,0x1
c0028493:	76 36                	jbe    c00284cb <__cmpdf2+0xe6>
c0028495:	b8 01 00 00 00       	mov    eax,0x1
c002849a:	39 f2                	cmp    edx,esi
c002849c:	7f 2d                	jg     c00284cb <__cmpdf2+0xe6>
c002849e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00284a3:	7c 26                	jl     c00284cb <__cmpdf2+0xe6>
c00284a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284a8:	77 07                	ja     c00284b1 <__cmpdf2+0xcc>
c00284aa:	72 16                	jb     c00284c2 <__cmpdf2+0xdd>
c00284ac:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00284af:	76 0a                	jbe    c00284bb <__cmpdf2+0xd6>
c00284b1:	89 d0                	mov    eax,edx
c00284b3:	c1 f8 1f             	sar    eax,0x1f
c00284b6:	83 c8 01             	or     eax,0x1
c00284b9:	eb 10                	jmp    c00284cb <__cmpdf2+0xe6>
c00284bb:	b8 00 00 00 00       	mov    eax,0x0
c00284c0:	73 09                	jae    c00284cb <__cmpdf2+0xe6>
c00284c2:	89 d0                	mov    eax,edx
c00284c4:	c1 f8 1f             	sar    eax,0x1f
c00284c7:	83 e0 02             	and    eax,0x2
c00284ca:	48                   	dec    eax
c00284cb:	83 c4 0c             	add    esp,0xc
c00284ce:	5b                   	pop    ebx
c00284cf:	5e                   	pop    esi
c00284d0:	5f                   	pop    edi
c00284d1:	5d                   	pop    ebp
c00284d2:	c3                   	ret    

c00284d3 <__eqdf2>:
c00284d3:	55                   	push   ebp
c00284d4:	89 e5                	mov    ebp,esp
c00284d6:	50                   	push   eax
c00284d7:	6a 01                	push   0x1
c00284d9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284dc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284e5:	e8 fb fe ff ff       	call   c00283e5 <__cmpdf2>
c00284ea:	83 c4 18             	add    esp,0x18
c00284ed:	c9                   	leave  
c00284ee:	c3                   	ret    

c00284ef <__nedf2>:
c00284ef:	eb e2                	jmp    c00284d3 <__eqdf2>

c00284f1 <__gtdf2>:
c00284f1:	55                   	push   ebp
c00284f2:	89 e5                	mov    ebp,esp
c00284f4:	50                   	push   eax
c00284f5:	6a ff                	push   0xffffffff
c00284f7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284fa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028500:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028503:	e8 dd fe ff ff       	call   c00283e5 <__cmpdf2>
c0028508:	83 c4 18             	add    esp,0x18
c002850b:	c9                   	leave  
c002850c:	c3                   	ret    

c002850d <__gedf2>:
c002850d:	eb e2                	jmp    c00284f1 <__gtdf2>

c002850f <__ltdf2>:
c002850f:	eb c2                	jmp    c00284d3 <__eqdf2>

c0028511 <__ledf2>:
c0028511:	eb c0                	jmp    c00284d3 <__eqdf2>

c0028513 <__truncdfsf2>:
c0028513:	55                   	push   ebp
c0028514:	89 e5                	mov    ebp,esp
c0028516:	57                   	push   edi
c0028517:	56                   	push   esi
c0028518:	53                   	push   ebx
c0028519:	83 ec 0c             	sub    esp,0xc
c002851c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002851f:	89 d1                	mov    ecx,edx
c0028521:	c1 f9 14             	sar    ecx,0x14
c0028524:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028527:	89 df                	mov    edi,ebx
c0028529:	c1 e7 0b             	shl    edi,0xb
c002852c:	89 d0                	mov    eax,edx
c002852e:	c1 e0 0b             	shl    eax,0xb
c0028531:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028536:	c1 eb 15             	shr    ebx,0x15
c0028539:	09 d8                	or     eax,ebx
c002853b:	89 cb                	mov    ebx,ecx
c002853d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028543:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028549:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002854f:	0f 86 9e 00 00 00    	jbe    c00285f3 <__truncdfsf2+0xe0>
c0028555:	85 db                	test   ebx,ebx
c0028557:	75 0a                	jne    c0028563 <__truncdfsf2+0x50>
c0028559:	c1 fa 17             	sar    edx,0x17
c002855c:	30 d2                	xor    dl,dl
c002855e:	e9 84 00 00 00       	jmp    c00285e7 <__truncdfsf2+0xd4>
c0028563:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028569:	83 fe 83             	cmp    esi,0xffffff83
c002856c:	7d 4b                	jge    c00285b9 <__truncdfsf2+0xa6>
c002856e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028573:	29 f1                	sub    ecx,esi
c0028575:	83 f9 1f             	cmp    ecx,0x1f
c0028578:	7f 6b                	jg     c00285e5 <__truncdfsf2+0xd2>
c002857a:	0d 00 00 00 80       	or     eax,0x80000000
c002857f:	89 c3                	mov    ebx,eax
c0028581:	d3 eb                	shr    ebx,cl
c0028583:	be 01 00 00 00       	mov    esi,0x1
c0028588:	d3 e6                	shl    esi,cl
c002858a:	4e                   	dec    esi
c002858b:	21 f0                	and    eax,esi
c002858d:	09 f8                	or     eax,edi
c002858f:	0f 95 c0             	setne  al
c0028592:	0f b6 c0             	movzx  eax,al
c0028595:	09 c3                	or     ebx,eax
c0028597:	89 d9                	mov    ecx,ebx
c0028599:	c1 e9 08             	shr    ecx,0x8
c002859c:	f6 c3 7f             	test   bl,0x7f
c002859f:	0f 95 c0             	setne  al
c00285a2:	09 c8                	or     eax,ecx
c00285a4:	83 e0 01             	and    eax,0x1
c00285a7:	c1 eb 07             	shr    ebx,0x7
c00285aa:	21 c3                	and    ebx,eax
c00285ac:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285b2:	09 d1                	or     ecx,edx
c00285b4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285b7:	eb 76                	jmp    c002862f <__truncdfsf2+0x11c>
c00285b9:	83 c6 80             	add    esi,0xffffff80
c00285bc:	7e 1d                	jle    c00285db <__truncdfsf2+0xc8>
c00285be:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285c4:	75 0b                	jne    c00285d1 <__truncdfsf2+0xbe>
c00285c6:	09 f8                	or     eax,edi
c00285c8:	74 09                	je     c00285d3 <__truncdfsf2+0xc0>
c00285ca:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00285cf:	eb 02                	jmp    c00285d3 <__truncdfsf2+0xc0>
c00285d1:	31 c0                	xor    eax,eax
c00285d3:	c1 fa 17             	sar    edx,0x17
c00285d6:	80 ca ff             	or     dl,0xff
c00285d9:	eb 0e                	jmp    c00285e9 <__truncdfsf2+0xd6>
c00285db:	c1 fa 1f             	sar    edx,0x1f
c00285de:	c1 e2 08             	shl    edx,0x8
c00285e1:	09 ca                	or     edx,ecx
c00285e3:	eb 04                	jmp    c00285e9 <__truncdfsf2+0xd6>
c00285e5:	31 d2                	xor    edx,edx
c00285e7:	31 c0                	xor    eax,eax
c00285e9:	c1 e2 17             	shl    edx,0x17
c00285ec:	c1 e8 08             	shr    eax,0x8
c00285ef:	09 d0                	or     eax,edx
c00285f1:	eb 3c                	jmp    c002862f <__truncdfsf2+0x11c>
c00285f3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285f9:	89 ca                	mov    edx,ecx
c00285fb:	c1 fa 0b             	sar    edx,0xb
c00285fe:	c1 e2 08             	shl    edx,0x8
c0028601:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028604:	31 db                	xor    ebx,ebx
c0028606:	85 ff                	test   edi,edi
c0028608:	0f 95 c3             	setne  bl
c002860b:	09 d8                	or     eax,ebx
c002860d:	89 c3                	mov    ebx,eax
c002860f:	c1 eb 08             	shr    ebx,0x8
c0028612:	a8 7f                	test   al,0x7f
c0028614:	0f 95 c2             	setne  dl
c0028617:	89 d6                	mov    esi,edx
c0028619:	09 de                	or     esi,ebx
c002861b:	83 e6 01             	and    esi,0x1
c002861e:	c1 e8 07             	shr    eax,0x7
c0028621:	21 f0                	and    eax,esi
c0028623:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028626:	09 ca                	or     edx,ecx
c0028628:	c1 e2 17             	shl    edx,0x17
c002862b:	09 da                	or     edx,ebx
c002862d:	01 d0                	add    eax,edx
c002862f:	83 c4 0c             	add    esp,0xc
c0028632:	5b                   	pop    ebx
c0028633:	5e                   	pop    esi
c0028634:	5f                   	pop    edi
c0028635:	5d                   	pop    ebp
c0028636:	c3                   	ret    

c0028637 <__extendsfdf2>:
c0028637:	55                   	push   ebp
c0028638:	89 e5                	mov    ebp,esp
c002863a:	57                   	push   edi
c002863b:	56                   	push   esi
c002863c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002863f:	89 d1                	mov    ecx,edx
c0028641:	c1 f9 17             	sar    ecx,0x17
c0028644:	c1 e2 08             	shl    edx,0x8
c0028647:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002864d:	89 c8                	mov    eax,ecx
c002864f:	80 e4 f8             	and    ah,0xf8
c0028652:	8d 71 01             	lea    esi,[ecx+0x1]
c0028655:	81 e6 fe 00 00 00    	and    esi,0xfe
c002865b:	75 27                	jne    c0028684 <__extendsfdf2+0x4d>
c002865d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028663:	75 18                	jne    c002867d <__extendsfdf2+0x46>
c0028665:	85 d2                	test   edx,edx
c0028667:	74 20                	je     c0028689 <__extendsfdf2+0x52>
c0028669:	41                   	inc    ecx
c002866a:	01 d2                	add    edx,edx
c002866c:	79 fb                	jns    c0028669 <__extendsfdf2+0x32>
c002866e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028674:	29 c8                	sub    eax,ecx
c0028676:	05 81 03 00 00       	add    eax,0x381
c002867b:	eb 0c                	jmp    c0028689 <__extendsfdf2+0x52>
c002867d:	05 00 07 00 00       	add    eax,0x700
c0028682:	eb 05                	jmp    c0028689 <__extendsfdf2+0x52>
c0028684:	05 80 03 00 00       	add    eax,0x380
c0028689:	c1 e0 14             	shl    eax,0x14
c002868c:	89 c1                	mov    ecx,eax
c002868e:	89 d0                	mov    eax,edx
c0028690:	c1 e8 0b             	shr    eax,0xb
c0028693:	09 c1                	or     ecx,eax
c0028695:	c1 e2 15             	shl    edx,0x15
c0028698:	89 d0                	mov    eax,edx
c002869a:	89 ca                	mov    edx,ecx
c002869c:	5e                   	pop    esi
c002869d:	5f                   	pop    edi
c002869e:	5d                   	pop    ebp
c002869f:	c3                   	ret    

c00286a0 <fabs>:
c00286a0:	83 ec 0c             	sub    esp,0xc
c00286a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00286aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286b7:	dd 04 24             	fld    QWORD PTR [esp]
c00286ba:	83 c4 0c             	add    esp,0xc
c00286bd:	c3                   	ret    
c00286be:	66 90                	xchg   ax,ax

c00286c0 <lrint>:
c00286c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00286c4:	83 ec 04             	sub    esp,0x4
c00286c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00286ca:	58                   	pop    eax
c00286cb:	c3                   	ret    

c00286cc <lrintf>:
c00286cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00286d0:	83 ec 04             	sub    esp,0x4
c00286d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00286d6:	58                   	pop    eax
c00286d7:	c3                   	ret    

Disassembly of section .init:

c00286d8 <_init>:
c00286d8:	55                   	push   ebp
c00286d9:	89 e5                	mov    ebp,esp
c00286db:	e8 38 7a fd ff       	call   c0000118 <frame_dummy>
c00286e0:	e8 63 e0 ff ff       	call   c0026748 <__do_global_ctors_aux>
c00286e5:	5d                   	pop    ebp
c00286e6:	c3                   	ret    

Disassembly of section .fini:

c00286e7 <_fini>:
c00286e7:	55                   	push   ebp
c00286e8:	89 e5                	mov    ebp,esp
c00286ea:	e8 b9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286ef:	5d                   	pop    ebp
c00286f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286f2 <Computer::~Computer()>:
c00286f2:	83 ec 0c             	sub    esp,0xc
c00286f5:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c00286fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fe:	89 10                	mov    DWORD PTR [eax],edx
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	83 ec 0c             	sub    esp,0xc
c0028707:	50                   	push   eax
c0028708:	e8 a3 bb fe ff       	call   c00142b0 <Device::~Device()>
c002870d:	83 c4 10             	add    esp,0x10
c0028710:	90                   	nop
c0028711:	83 c4 0c             	add    esp,0xc
c0028714:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028716 <Computer::~Computer()>:
c0028716:	83 ec 0c             	sub    esp,0xc
c0028719:	83 ec 0c             	sub    esp,0xc
c002871c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028720:	e8 cd ff ff ff       	call   c00286f2 <Computer::~Computer()>
c0028725:	83 c4 10             	add    esp,0x10
c0028728:	83 ec 08             	sub    esp,0x8
c002872b:	68 ec 01 00 00       	push   0x1ec
c0028730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028734:	e8 9e a7 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028739:	83 c4 10             	add    esp,0x10
c002873c:	83 c4 0c             	add    esp,0xc
c002873f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028740 <idleCommon()>:
c0028740:	83 ec 0c             	sub    esp,0xc
c0028743:	e8 12 57 ff ff       	call   c001de5a <lockScheduler()>
c0028748:	e8 49 5a ff ff       	call   c001e196 <schedule()>
c002874d:	83 c4 0c             	add    esp,0xc
c0028750:	e9 07 57 ff ff       	jmp    c001de5c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028756 <LinkedList<UnixFile>::~LinkedList()>:
c0028756:	90                   	nop
c0028757:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028758 <LinkedList<UnixFile>::LinkedList()>:
c0028758:	83 ec 0c             	sub    esp,0xc
c002875b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028769:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028774:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002877b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028789:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028794:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002879b:	83 ec 0c             	sub    esp,0xc
c002879e:	68 f2 a4 02 c0       	push   0xc002a4f2
c00287a3:	e8 0f a8 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c00287a8:	83 c4 10             	add    esp,0x10
c00287ab:	90                   	nop
c00287ac:	83 c4 0c             	add    esp,0xc
c00287af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287b0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287b0:	83 ec 0c             	sub    esp,0xc
c00287b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287b8:	75 10                	jne    c00287ca <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287ba:	83 ec 0c             	sub    esp,0xc
c00287bd:	68 0c a5 02 c0       	push   0xc002a50c
c00287c2:	e8 9e 1e ff ff       	call   c001a665 <Krnl::panic(char const*)>
c00287c7:	83 c4 10             	add    esp,0x10
c00287ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00287d0:	85 c0                	test   eax,eax
c00287d2:	74 34                	je     c0028808 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287db:	85 c0                	test   eax,eax
c00287dd:	74 29                	je     c0028808 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028806:	eb 65                	jmp    c002886d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880c:	8b 00                	mov    eax,DWORD PTR [eax]
c002880e:	85 c0                	test   eax,eax
c0028810:	75 4b                	jne    c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028819:	85 c0                	test   eax,eax
c002881b:	75 40                	jne    c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002881d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028821:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028825:	89 10                	mov    DWORD PTR [eax],edx
c0028827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002882f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028839:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028847:	85 c0                	test   eax,eax
c0028849:	74 22                	je     c002886d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002884b:	83 ec 0c             	sub    esp,0xc
c002884e:	68 2e a5 02 c0       	push   0xc002a52e
c0028853:	e8 0d 1e ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028858:	83 c4 10             	add    esp,0x10
c002885b:	eb 10                	jmp    c002886d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002885d:	83 ec 0c             	sub    esp,0xc
c0028860:	68 38 a5 02 c0       	push   0xc002a538
c0028865:	e8 fb 1d ff ff       	call   c001a665 <Krnl::panic(char const*)>
c002886a:	83 c4 10             	add    esp,0x10
c002886d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028871:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028874:	8d 50 01             	lea    edx,[eax+0x1]
c0028877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002887e:	90                   	nop
c002887f:	83 c4 0c             	add    esp,0xc
c0028882:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028884 <LinkedList<UnixFile>::getFirstElement()>:
c0028884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028888:	8b 00                	mov    eax,DWORD PTR [eax]
c002888a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002888c <LinkedList<UnixFile>::removeFirst()>:
c002888c:	83 ec 0c             	sub    esp,0xc
c002888f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028893:	8b 00                	mov    eax,DWORD PTR [eax]
c0028895:	85 c0                	test   eax,eax
c0028897:	75 12                	jne    c00288ab <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028899:	83 ec 0c             	sub    esp,0xc
c002889c:	68 44 a5 02 c0       	push   0xc002a544
c00288a1:	e8 bf 1d ff ff       	call   c001a665 <Krnl::panic(char const*)>
c00288a6:	83 c4 10             	add    esp,0x10
c00288a9:	eb 7e                	jmp    c0028929 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00288ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b5:	85 c0                	test   eax,eax
c00288b7:	74 10                	je     c00288c9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288b9:	83 ec 0c             	sub    esp,0xc
c00288bc:	68 8f a5 02 c0       	push   0xc002a58f
c00288c1:	e8 9f 1d ff ff       	call   c001a665 <Krnl::panic(char const*)>
c00288c6:	83 c4 10             	add    esp,0x10
c00288c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d2:	85 c0                	test   eax,eax
c00288d4:	75 33                	jne    c0028909 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00288d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f2:	83 f8 01             	cmp    eax,0x1
c00288f5:	74 21                	je     c0028918 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288f7:	83 ec 0c             	sub    esp,0xc
c00288fa:	68 68 a5 02 c0       	push   0xc002a568
c00288ff:	e8 61 1d ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028904:	83 c4 10             	add    esp,0x10
c0028907:	eb 0f                	jmp    c0028918 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890d:	8b 00                	mov    eax,DWORD PTR [eax]
c002890f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	89 10                	mov    DWORD PTR [eax],edx
c0028918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002891f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028929:	83 c4 0c             	add    esp,0xc
c002892c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002892e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002892e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028932:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028935:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028936 <DriverlessDevice::~DriverlessDevice()>:
c0028936:	ba 64 ad 02 c0       	mov    edx,0xc002ad64
c002893b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002893f:	89 10                	mov    DWORD PTR [eax],edx
c0028941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028945:	50                   	push   eax
c0028946:	e8 65 b9 fe ff       	call   c00142b0 <Device::~Device()>
c002894b:	83 c4 04             	add    esp,0x4
c002894e:	90                   	nop
c002894f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028950 <DriverlessDevice::~DriverlessDevice()>:
c0028950:	83 ec 0c             	sub    esp,0xc
c0028953:	83 ec 0c             	sub    esp,0xc
c0028956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002895a:	e8 d7 ff ff ff       	call   c0028936 <DriverlessDevice::~DriverlessDevice()>
c002895f:	83 c4 10             	add    esp,0x10
c0028962:	83 ec 08             	sub    esp,0x8
c0028965:	68 58 01 00 00       	push   0x158
c002896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002896e:	e8 64 a5 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028973:	83 c4 10             	add    esp,0x10
c0028976:	83 c4 0c             	add    esp,0xc
c0028979:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002897a <LinkedList<Device>::addElement(Device*)>:
c002897a:	83 ec 0c             	sub    esp,0xc
c002897d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028982:	75 10                	jne    c0028994 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028984:	83 ec 0c             	sub    esp,0xc
c0028987:	68 0c a5 02 c0       	push   0xc002a50c
c002898c:	e8 d4 1c ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028991:	83 c4 10             	add    esp,0x10
c0028994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028998:	8b 00                	mov    eax,DWORD PTR [eax]
c002899a:	85 c0                	test   eax,eax
c002899c:	74 3a                	je     c00289d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a5:	85 c0                	test   eax,eax
c00289a7:	74 2f                	je     c00289d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289b4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289cc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289d6:	eb 68                	jmp    c0028a40 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00289de:	85 c0                	test   eax,eax
c00289e0:	75 4e                	jne    c0028a30 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e9:	85 c0                	test   eax,eax
c00289eb:	75 43                	jne    c0028a30 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289f5:	89 10                	mov    DWORD PTR [eax],edx
c00289f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a09:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a1a:	85 c0                	test   eax,eax
c0028a1c:	74 22                	je     c0028a40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a1e:	83 ec 0c             	sub    esp,0xc
c0028a21:	68 2e a5 02 c0       	push   0xc002a52e
c0028a26:	e8 3a 1c ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028a2b:	83 c4 10             	add    esp,0x10
c0028a2e:	eb 10                	jmp    c0028a40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a30:	83 ec 0c             	sub    esp,0xc
c0028a33:	68 38 a5 02 c0       	push   0xc002a538
c0028a38:	e8 28 1c ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028a3d:	83 c4 10             	add    esp,0x10
c0028a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a47:	8d 50 01             	lea    edx,[eax+0x1]
c0028a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a51:	90                   	nop
c0028a52:	83 c4 0c             	add    esp,0xc
c0028a55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a56 <LinkedList<Device>::LinkedList()>:
c0028a56:	83 ec 0c             	sub    esp,0xc
c0028a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a99:	83 ec 0c             	sub    esp,0xc
c0028a9c:	68 f2 a4 02 c0       	push   0xc002a4f2
c0028aa1:	e8 11 a5 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0028aa6:	83 c4 10             	add    esp,0x10
c0028aa9:	90                   	nop
c0028aaa:	83 c4 0c             	add    esp,0xc
c0028aad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028aae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ab4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028ab6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0028abc:	85 c0                	test   eax,eax
c0028abe:	75 0e                	jne    c0028ace <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ac7:	85 c0                	test   eax,eax
c0028ac9:	75 03                	jne    c0028ace <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028acb:	b0 01                	mov    al,0x1
c0028acd:	c3                   	ret    
c0028ace:	b0 00                	mov    al,0x0
c0028ad0:	90                   	nop
c0028ad1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028ad2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028ad2:	83 ec 0c             	sub    esp,0xc
c0028ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028adb:	85 c0                	test   eax,eax
c0028add:	75 15                	jne    c0028af4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028adf:	83 ec 0c             	sub    esp,0xc
c0028ae2:	68 44 a5 02 c0       	push   0xc002a544
c0028ae7:	e8 79 1b ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028aec:	83 c4 10             	add    esp,0x10
c0028aef:	e9 88 00 00 00       	jmp    c0028b7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028afb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028afe:	85 c0                	test   eax,eax
c0028b00:	0f 95 c0             	setne  al
c0028b03:	84 c0                	test   al,al
c0028b05:	74 10                	je     c0028b17 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b07:	83 ec 0c             	sub    esp,0xc
c0028b0a:	68 8f a5 02 c0       	push   0xc002a58f
c0028b0f:	e8 51 1b ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028b14:	83 c4 10             	add    esp,0x10
c0028b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b20:	85 c0                	test   eax,eax
c0028b22:	0f 94 c0             	sete   al
c0028b25:	84 c0                	test   al,al
c0028b27:	74 33                	je     c0028b5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b45:	83 f8 01             	cmp    eax,0x1
c0028b48:	74 21                	je     c0028b6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b4a:	83 ec 0c             	sub    esp,0xc
c0028b4d:	68 68 a5 02 c0       	push   0xc002a568
c0028b52:	e8 0e 1b ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028b57:	83 c4 10             	add    esp,0x10
c0028b5a:	eb 0f                	jmp    c0028b6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b62:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b69:	89 10                	mov    DWORD PTR [eax],edx
c0028b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b72:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b7c:	83 c4 0c             	add    esp,0xc
c0028b7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b80:	83 ec 0c             	sub    esp,0xc
c0028b83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b88:	75 10                	jne    c0028b9a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b8a:	83 ec 0c             	sub    esp,0xc
c0028b8d:	68 0c a5 02 c0       	push   0xc002a50c
c0028b92:	e8 ce 1a ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028b97:	83 c4 10             	add    esp,0x10
c0028b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ba0:	85 c0                	test   eax,eax
c0028ba2:	74 34                	je     c0028bd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bab:	85 c0                	test   eax,eax
c0028bad:	74 29                	je     c0028bd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bcf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bd6:	eb 65                	jmp    c0028c3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bde:	85 c0                	test   eax,eax
c0028be0:	75 4b                	jne    c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028be9:	85 c0                	test   eax,eax
c0028beb:	75 40                	jne    c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bf5:	89 10                	mov    DWORD PTR [eax],edx
c0028bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c17:	85 c0                	test   eax,eax
c0028c19:	74 22                	je     c0028c3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c1b:	83 ec 0c             	sub    esp,0xc
c0028c1e:	68 2e a5 02 c0       	push   0xc002a52e
c0028c23:	e8 3d 1a ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028c28:	83 c4 10             	add    esp,0x10
c0028c2b:	eb 10                	jmp    c0028c3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c2d:	83 ec 0c             	sub    esp,0xc
c0028c30:	68 38 a5 02 c0       	push   0xc002a538
c0028c35:	e8 2b 1a ff ff       	call   c001a665 <Krnl::panic(char const*)>
c0028c3a:	83 c4 10             	add    esp,0x10
c0028c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c44:	8d 50 01             	lea    edx,[eax+0x1]
c0028c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c4e:	90                   	nop
c0028c4f:	83 c4 0c             	add    esp,0xc
c0028c52:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c54 <ACPI::~ACPI()>:
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	ba c8 b6 02 c0       	mov    edx,0xc002b6c8
c0028c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c60:	89 10                	mov    DWORD PTR [eax],edx
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	83 ec 0c             	sub    esp,0xc
c0028c69:	50                   	push   eax
c0028c6a:	e8 41 b6 fe ff       	call   c00142b0 <Device::~Device()>
c0028c6f:	83 c4 10             	add    esp,0x10
c0028c72:	90                   	nop
c0028c73:	83 c4 0c             	add    esp,0xc
c0028c76:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c78 <ACPI::~ACPI()>:
c0028c78:	83 ec 0c             	sub    esp,0xc
c0028c7b:	83 ec 0c             	sub    esp,0xc
c0028c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c82:	e8 cd ff ff ff       	call   c0028c54 <ACPI::~ACPI()>
c0028c87:	83 c4 10             	add    esp,0x10
c0028c8a:	83 ec 08             	sub    esp,0x8
c0028c8d:	68 68 12 00 00       	push   0x1268
c0028c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c96:	e8 3c a2 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028c9b:	83 c4 10             	add    esp,0x10
c0028c9e:	83 c4 0c             	add    esp,0xc
c0028ca1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ca2 <CPU::~CPU()>:
c0028ca2:	83 ec 0c             	sub    esp,0xc
c0028ca5:	ba b8 ba 02 c0       	mov    edx,0xc002bab8
c0028caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cae:	89 10                	mov    DWORD PTR [eax],edx
c0028cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb4:	83 ec 0c             	sub    esp,0xc
c0028cb7:	50                   	push   eax
c0028cb8:	e8 f3 b5 fe ff       	call   c00142b0 <Device::~Device()>
c0028cbd:	83 c4 10             	add    esp,0x10
c0028cc0:	90                   	nop
c0028cc1:	83 c4 0c             	add    esp,0xc
c0028cc4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028cc6 <CPU::~CPU()>:
c0028cc6:	83 ec 0c             	sub    esp,0xc
c0028cc9:	83 ec 0c             	sub    esp,0xc
c0028ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd0:	e8 cd ff ff ff       	call   c0028ca2 <CPU::~CPU()>
c0028cd5:	83 c4 10             	add    esp,0x10
c0028cd8:	83 ec 08             	sub    esp,0x8
c0028cdb:	68 98 11 00 00       	push   0x1198
c0028ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce4:	e8 ee a1 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028ce9:	83 c4 10             	add    esp,0x10
c0028cec:	83 c4 0c             	add    esp,0xc
c0028cef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028cf0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028cf0:	90                   	nop
c0028cf1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028cf2 <ThreadControlBlock::ThreadControlBlock()>:
c0028cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d01:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d0c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d17:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d22:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d2a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d2e:	90                   	nop
c0028d2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d73:	83 ec 0c             	sub    esp,0xc
c0028d76:	68 f2 a4 02 c0       	push   0xc002a4f2
c0028d7b:	e8 37 a2 fe ff       	call   c0012fb7 <Dbg::kprintf(char const*, ...)>
c0028d80:	83 c4 10             	add    esp,0x10
c0028d83:	90                   	nop
c0028d84:	83 c4 0c             	add    esp,0xc
c0028d87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d88 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d8f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d90 <Vm::_FPUState::_FPUState()>:
c0028d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d94:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d9b:	90                   	nop
c0028d9c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d9e <PCI::~PCI()>:
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	ba 44 cb 02 c0       	mov    edx,0xc002cb44
c0028da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028daa:	89 10                	mov    DWORD PTR [eax],edx
c0028dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db0:	83 ec 0c             	sub    esp,0xc
c0028db3:	50                   	push   eax
c0028db4:	e8 cf ae fe ff       	call   c0013c88 <Bus::~Bus()>
c0028db9:	83 c4 10             	add    esp,0x10
c0028dbc:	90                   	nop
c0028dbd:	83 c4 0c             	add    esp,0xc
c0028dc0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028dc2 <PCI::~PCI()>:
c0028dc2:	83 ec 0c             	sub    esp,0xc
c0028dc5:	83 ec 0c             	sub    esp,0xc
c0028dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dcc:	e8 cd ff ff ff       	call   c0028d9e <PCI::~PCI()>
c0028dd1:	83 c4 10             	add    esp,0x10
c0028dd4:	83 ec 08             	sub    esp,0x8
c0028dd7:	68 58 01 00 00       	push   0x158
c0028ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de0:	e8 f2 a0 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028de5:	83 c4 10             	add    esp,0x10
c0028de8:	83 c4 0c             	add    esp,0xc
c0028deb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028dec <IDE::~IDE()>:
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	ba a8 cd 02 c0       	mov    edx,0xc002cda8
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	89 10                	mov    DWORD PTR [eax],edx
c0028dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	50                   	push   eax
c0028e02:	e8 99 b9 fe ff       	call   c00147a0 <HardDiskController::~HardDiskController()>
c0028e07:	83 c4 10             	add    esp,0x10
c0028e0a:	90                   	nop
c0028e0b:	83 c4 0c             	add    esp,0xc
c0028e0e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e10 <IDE::~IDE()>:
c0028e10:	83 ec 0c             	sub    esp,0xc
c0028e13:	83 ec 0c             	sub    esp,0xc
c0028e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e1a:	e8 cd ff ff ff       	call   c0028dec <IDE::~IDE()>
c0028e1f:	83 c4 10             	add    esp,0x10
c0028e22:	83 ec 08             	sub    esp,0x8
c0028e25:	68 70 02 00 00       	push   0x270
c0028e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2e:	e8 a4 a0 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028e33:	83 c4 10             	add    esp,0x10
c0028e36:	83 c4 0c             	add    esp,0xc
c0028e39:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e3a <SATABus::~SATABus()>:
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	ba 88 ce 02 c0       	mov    edx,0xc002ce88
c0028e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e46:	89 10                	mov    DWORD PTR [eax],edx
c0028e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4c:	83 ec 0c             	sub    esp,0xc
c0028e4f:	50                   	push   eax
c0028e50:	e8 4b b9 fe ff       	call   c00147a0 <HardDiskController::~HardDiskController()>
c0028e55:	83 c4 10             	add    esp,0x10
c0028e58:	90                   	nop
c0028e59:	83 c4 0c             	add    esp,0xc
c0028e5c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e5e <SATABus::~SATABus()>:
c0028e5e:	83 ec 0c             	sub    esp,0xc
c0028e61:	83 ec 0c             	sub    esp,0xc
c0028e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e68:	e8 cd ff ff ff       	call   c0028e3a <SATABus::~SATABus()>
c0028e6d:	83 c4 10             	add    esp,0x10
c0028e70:	83 ec 08             	sub    esp,0x8
c0028e73:	68 64 01 00 00       	push   0x164
c0028e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7c:	e8 56 a0 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028e81:	83 c4 10             	add    esp,0x10
c0028e84:	83 c4 0c             	add    esp,0xc
c0028e87:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e88 <ATA::~ATA()>:
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	ba d4 ce 02 c0       	mov    edx,0xc002ced4
c0028e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e94:	89 10                	mov    DWORD PTR [eax],edx
c0028e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9a:	83 ec 0c             	sub    esp,0xc
c0028e9d:	50                   	push   eax
c0028e9e:	e8 ef b9 fe ff       	call   c0014892 <PhysicalDisk::~PhysicalDisk()>
c0028ea3:	83 c4 10             	add    esp,0x10
c0028ea6:	90                   	nop
c0028ea7:	83 c4 0c             	add    esp,0xc
c0028eaa:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028eac <ATA::~ATA()>:
c0028eac:	83 ec 0c             	sub    esp,0xc
c0028eaf:	83 ec 0c             	sub    esp,0xc
c0028eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb6:	e8 cd ff ff ff       	call   c0028e88 <ATA::~ATA()>
c0028ebb:	83 c4 10             	add    esp,0x10
c0028ebe:	83 ec 08             	sub    esp,0x8
c0028ec1:	68 7c 01 00 00       	push   0x17c
c0028ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eca:	e8 08 a0 fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028ecf:	83 c4 10             	add    esp,0x10
c0028ed2:	83 c4 0c             	add    esp,0xc
c0028ed5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ed6 <ATAPI::~ATAPI()>:
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	ba 0c cf 02 c0       	mov    edx,0xc002cf0c
c0028ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee2:	89 10                	mov    DWORD PTR [eax],edx
c0028ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee8:	83 ec 0c             	sub    esp,0xc
c0028eeb:	50                   	push   eax
c0028eec:	e8 a1 b9 fe ff       	call   c0014892 <PhysicalDisk::~PhysicalDisk()>
c0028ef1:	83 c4 10             	add    esp,0x10
c0028ef4:	90                   	nop
c0028ef5:	83 c4 0c             	add    esp,0xc
c0028ef8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028efa <ATAPI::~ATAPI()>:
c0028efa:	83 ec 0c             	sub    esp,0xc
c0028efd:	83 ec 0c             	sub    esp,0xc
c0028f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f04:	e8 cd ff ff ff       	call   c0028ed6 <ATAPI::~ATAPI()>
c0028f09:	83 c4 10             	add    esp,0x10
c0028f0c:	83 ec 08             	sub    esp,0x8
c0028f0f:	68 80 01 00 00       	push   0x180
c0028f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f18:	e8 ba 9f fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028f1d:	83 c4 10             	add    esp,0x10
c0028f20:	83 c4 0c             	add    esp,0xc
c0028f23:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f24 <SATA::~SATA()>:
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	ba c0 cf 02 c0       	mov    edx,0xc002cfc0
c0028f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f30:	89 10                	mov    DWORD PTR [eax],edx
c0028f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	50                   	push   eax
c0028f3a:	e8 53 b9 fe ff       	call   c0014892 <PhysicalDisk::~PhysicalDisk()>
c0028f3f:	83 c4 10             	add    esp,0x10
c0028f42:	90                   	nop
c0028f43:	83 c4 0c             	add    esp,0xc
c0028f46:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f48 <SATA::~SATA()>:
c0028f48:	83 ec 0c             	sub    esp,0xc
c0028f4b:	83 ec 0c             	sub    esp,0xc
c0028f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f52:	e8 cd ff ff ff       	call   c0028f24 <SATA::~SATA()>
c0028f57:	83 c4 10             	add    esp,0x10
c0028f5a:	83 ec 08             	sub    esp,0x8
c0028f5d:	68 7c 01 00 00       	push   0x17c
c0028f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f66:	e8 6c 9f fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028f6b:	83 c4 10             	add    esp,0x10
c0028f6e:	83 c4 0c             	add    esp,0xc
c0028f71:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f72 <SATAPI::~SATAPI()>:
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c0028f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7e:	89 10                	mov    DWORD PTR [eax],edx
c0028f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	50                   	push   eax
c0028f88:	e8 05 b9 fe ff       	call   c0014892 <PhysicalDisk::~PhysicalDisk()>
c0028f8d:	83 c4 10             	add    esp,0x10
c0028f90:	90                   	nop
c0028f91:	83 c4 0c             	add    esp,0xc
c0028f94:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f96 <SATAPI::~SATAPI()>:
c0028f96:	83 ec 0c             	sub    esp,0xc
c0028f99:	83 ec 0c             	sub    esp,0xc
c0028f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa0:	e8 cd ff ff ff       	call   c0028f72 <SATAPI::~SATAPI()>
c0028fa5:	83 c4 10             	add    esp,0x10
c0028fa8:	83 ec 08             	sub    esp,0x8
c0028fab:	68 80 01 00 00       	push   0x180
c0028fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb4:	e8 1e 9f fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0028fb9:	83 c4 10             	add    esp,0x10
c0028fbc:	83 c4 0c             	add    esp,0xc
c0028fbf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028fc0 <AVX::~AVX()>:
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c0028fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcc:	89 10                	mov    DWORD PTR [eax],edx
c0028fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	50                   	push   eax
c0028fd6:	e8 3b b9 fe ff       	call   c0014916 <FPU::~FPU()>
c0028fdb:	83 c4 10             	add    esp,0x10
c0028fde:	90                   	nop
c0028fdf:	83 c4 0c             	add    esp,0xc
c0028fe2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028fe4 <AVX::~AVX()>:
c0028fe4:	83 ec 0c             	sub    esp,0xc
c0028fe7:	83 ec 0c             	sub    esp,0xc
c0028fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fee:	e8 cd ff ff ff       	call   c0028fc0 <AVX::~AVX()>
c0028ff3:	83 c4 10             	add    esp,0x10
c0028ff6:	83 ec 08             	sub    esp,0x8
c0028ff9:	68 58 01 00 00       	push   0x158
c0028ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029002:	e8 d0 9e fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0029007:	83 c4 10             	add    esp,0x10
c002900a:	83 c4 0c             	add    esp,0xc
c002900d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002900e <MMX::~MMX()>:
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0029016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901a:	89 10                	mov    DWORD PTR [eax],edx
c002901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029020:	83 ec 0c             	sub    esp,0xc
c0029023:	50                   	push   eax
c0029024:	e8 ed b8 fe ff       	call   c0014916 <FPU::~FPU()>
c0029029:	83 c4 10             	add    esp,0x10
c002902c:	90                   	nop
c002902d:	83 c4 0c             	add    esp,0xc
c0029030:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029032 <MMX::~MMX()>:
c0029032:	83 ec 0c             	sub    esp,0xc
c0029035:	83 ec 0c             	sub    esp,0xc
c0029038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903c:	e8 cd ff ff ff       	call   c002900e <MMX::~MMX()>
c0029041:	83 c4 10             	add    esp,0x10
c0029044:	83 ec 08             	sub    esp,0x8
c0029047:	68 58 01 00 00       	push   0x158
c002904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029050:	e8 82 9e fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0029055:	83 c4 10             	add    esp,0x10
c0029058:	83 c4 0c             	add    esp,0xc
c002905b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002905c <SSE::~SSE()>:
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c0029064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029068:	89 10                	mov    DWORD PTR [eax],edx
c002906a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906e:	83 ec 0c             	sub    esp,0xc
c0029071:	50                   	push   eax
c0029072:	e8 9f b8 fe ff       	call   c0014916 <FPU::~FPU()>
c0029077:	83 c4 10             	add    esp,0x10
c002907a:	90                   	nop
c002907b:	83 c4 0c             	add    esp,0xc
c002907e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029080 <SSE::~SSE()>:
c0029080:	83 ec 0c             	sub    esp,0xc
c0029083:	83 ec 0c             	sub    esp,0xc
c0029086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908a:	e8 cd ff ff ff       	call   c002905c <SSE::~SSE()>
c002908f:	83 c4 10             	add    esp,0x10
c0029092:	83 ec 08             	sub    esp,0x8
c0029095:	68 58 01 00 00       	push   0x158
c002909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909e:	e8 34 9e fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	83 c4 0c             	add    esp,0xc
c00290a9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00290aa <x87::~x87()>:
c00290aa:	83 ec 0c             	sub    esp,0xc
c00290ad:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c00290b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b6:	89 10                	mov    DWORD PTR [eax],edx
c00290b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290bc:	83 ec 0c             	sub    esp,0xc
c00290bf:	50                   	push   eax
c00290c0:	e8 51 b8 fe ff       	call   c0014916 <FPU::~FPU()>
c00290c5:	83 c4 10             	add    esp,0x10
c00290c8:	90                   	nop
c00290c9:	83 c4 0c             	add    esp,0xc
c00290cc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290ce <x87::~x87()>:
c00290ce:	83 ec 0c             	sub    esp,0xc
c00290d1:	83 ec 0c             	sub    esp,0xc
c00290d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d8:	e8 cd ff ff ff       	call   c00290aa <x87::~x87()>
c00290dd:	83 c4 10             	add    esp,0x10
c00290e0:	83 ec 08             	sub    esp,0x8
c00290e3:	68 58 01 00 00       	push   0x158
c00290e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ec:	e8 e6 9d fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00290f1:	83 c4 10             	add    esp,0x10
c00290f4:	83 c4 0c             	add    esp,0xc
c00290f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290f8 <IOAPIC::~IOAPIC()>:
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c0029100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029104:	89 10                	mov    DWORD PTR [eax],edx
c0029106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002910a:	83 ec 0c             	sub    esp,0xc
c002910d:	50                   	push   eax
c002910e:	e8 9d b1 fe ff       	call   c00142b0 <Device::~Device()>
c0029113:	83 c4 10             	add    esp,0x10
c0029116:	90                   	nop
c0029117:	83 c4 0c             	add    esp,0xc
c002911a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002911c <IOAPIC::~IOAPIC()>:
c002911c:	83 ec 0c             	sub    esp,0xc
c002911f:	83 ec 0c             	sub    esp,0xc
c0029122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029126:	e8 cd ff ff ff       	call   c00290f8 <IOAPIC::~IOAPIC()>
c002912b:	83 c4 10             	add    esp,0x10
c002912e:	83 ec 08             	sub    esp,0x8
c0029131:	68 68 01 00 00       	push   0x168
c0029136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913a:	e8 98 9d fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c002913f:	83 c4 10             	add    esp,0x10
c0029142:	83 c4 0c             	add    esp,0xc
c0029145:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029146 <APIC::~APIC()>:
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	ba ac d2 02 c0       	mov    edx,0xc002d2ac
c002914e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029152:	89 10                	mov    DWORD PTR [eax],edx
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	83 ec 0c             	sub    esp,0xc
c002915b:	50                   	push   eax
c002915c:	e8 7f bc fe ff       	call   c0014de0 <InterruptController::~InterruptController()>
c0029161:	83 c4 10             	add    esp,0x10
c0029164:	90                   	nop
c0029165:	83 c4 0c             	add    esp,0xc
c0029168:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002916a <APIC::~APIC()>:
c002916a:	83 ec 0c             	sub    esp,0xc
c002916d:	83 ec 0c             	sub    esp,0xc
c0029170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029174:	e8 cd ff ff ff       	call   c0029146 <APIC::~APIC()>
c0029179:	83 c4 10             	add    esp,0x10
c002917c:	83 ec 08             	sub    esp,0x8
c002917f:	68 58 21 00 00       	push   0x2158
c0029184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029188:	e8 4a 9d fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c002918d:	83 c4 10             	add    esp,0x10
c0029190:	83 c4 0c             	add    esp,0xc
c0029193:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029194 <PIC::~PIC()>:
c0029194:	83 ec 0c             	sub    esp,0xc
c0029197:	ba 44 d3 02 c0       	mov    edx,0xc002d344
c002919c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a0:	89 10                	mov    DWORD PTR [eax],edx
c00291a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a6:	83 ec 0c             	sub    esp,0xc
c00291a9:	50                   	push   eax
c00291aa:	e8 31 bc fe ff       	call   c0014de0 <InterruptController::~InterruptController()>
c00291af:	83 c4 10             	add    esp,0x10
c00291b2:	90                   	nop
c00291b3:	83 c4 0c             	add    esp,0xc
c00291b6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291b8 <PIC::~PIC()>:
c00291b8:	83 ec 0c             	sub    esp,0xc
c00291bb:	83 ec 0c             	sub    esp,0xc
c00291be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c2:	e8 cd ff ff ff       	call   c0029194 <PIC::~PIC()>
c00291c7:	83 c4 10             	add    esp,0x10
c00291ca:	83 ec 08             	sub    esp,0x8
c00291cd:	68 58 21 00 00       	push   0x2158
c00291d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d6:	e8 fc 9c fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c00291db:	83 c4 10             	add    esp,0x10
c00291de:	83 c4 0c             	add    esp,0xc
c00291e1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291e2 <APICTimer::~APICTimer()>:
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	ba 98 d3 02 c0       	mov    edx,0xc002d398
c00291ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ee:	89 10                	mov    DWORD PTR [eax],edx
c00291f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	50                   	push   eax
c00291f8:	e8 3b db fe ff       	call   c0016d38 <Timer::~Timer()>
c00291fd:	83 c4 10             	add    esp,0x10
c0029200:	90                   	nop
c0029201:	83 c4 0c             	add    esp,0xc
c0029204:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029206 <APICTimer::~APICTimer()>:
c0029206:	83 ec 0c             	sub    esp,0xc
c0029209:	83 ec 0c             	sub    esp,0xc
c002920c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029210:	e8 cd ff ff ff       	call   c00291e2 <APICTimer::~APICTimer()>
c0029215:	83 c4 10             	add    esp,0x10
c0029218:	83 ec 08             	sub    esp,0x8
c002921b:	68 60 01 00 00       	push   0x160
c0029220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029224:	e8 ae 9c fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0029229:	83 c4 10             	add    esp,0x10
c002922c:	83 c4 0c             	add    esp,0xc
c002922f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029230 <PIT::~PIT()>:
c0029230:	83 ec 0c             	sub    esp,0xc
c0029233:	ba e8 d3 02 c0       	mov    edx,0xc002d3e8
c0029238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923c:	89 10                	mov    DWORD PTR [eax],edx
c002923e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029242:	83 ec 0c             	sub    esp,0xc
c0029245:	50                   	push   eax
c0029246:	e8 ed da fe ff       	call   c0016d38 <Timer::~Timer()>
c002924b:	83 c4 10             	add    esp,0x10
c002924e:	90                   	nop
c002924f:	83 c4 0c             	add    esp,0xc
c0029252:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029254 <PIT::~PIT()>:
c0029254:	83 ec 0c             	sub    esp,0xc
c0029257:	83 ec 0c             	sub    esp,0xc
c002925a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002925e:	e8 cd ff ff ff       	call   c0029230 <PIT::~PIT()>
c0029263:	83 c4 10             	add    esp,0x10
c0029266:	83 ec 08             	sub    esp,0x8
c0029269:	68 5c 01 00 00       	push   0x15c
c002926e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029272:	e8 60 9c fe ff       	call   c0012ed7 <operator delete(void*, unsigned long)>
c0029277:	83 c4 10             	add    esp,0x10
c002927a:	83 c4 0c             	add    esp,0xc
c002927d:	c3                   	ret    
