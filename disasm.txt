
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 94 fc 00 00       	call   c000fcb4 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 87 02 00       	call   c0028758 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 93 02 c0       	mov    ebx,0xc0029302
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 10 93 02 c0    	cmp    ebx,0xc0029310
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 dc 02 c0       	mov    eax,0xc002dcf8
c0000049:	3d f8 dc 02 c0       	cmp    eax,0xc002dcf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 dc 02 c0       	push   0xc002dcf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 dc 02 c0       	mov    eax,0xc002dcf8
c0000075:	2d f8 dc 02 c0       	sub    eax,0xc002dcf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 dc 02 c0       	push   0xc002dcf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e328,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 18 93 02 c0       	mov    ebx,0xc0029318
c00000bb:	81 eb 14 93 02 c0    	sub    ebx,0xc0029314
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 14 93 02 c0       	mov    esi,0xc0029314
c00000ca:	a1 2c e3 02 c0       	mov    eax,ds:0xc002e32c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e3 02 c0       	mov    ds:0xc002e32c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e3 02 c0       	mov    eax,ds:0xc002e32c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 dc 02 c0       	push   0xc002dcf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e328,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e3 02 c0       	push   0xc002e330
c000012c:	68 f8 dc 02 c0       	push   0xc002dcf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 09 d7 01 00       	call   c001daa4 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 32 2a 01 00       	call   c0012de5 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 e7 d6 01 00       	call   c001daa4 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 35 db 01 00       	call   c001df11 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 e3 e0 01 00       	call   c001e4c8 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 70 e7 02 c0 	lgdtd  ds:0xc002e770
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 10 47 01 00       	call   c0014ce9 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 48 e3 02 c0       	mov    ds:0xc002e348,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 48 e3 02 c0    	mov    DWORD PTR ds:0xc002e348,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 48 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e348
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6ce0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ce0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6ce0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6ce0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ce0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 60 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e360
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 60 e3 02 c0    	mov    DWORD PTR ds:0xc002e360,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 64 e3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1c9c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 64 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c9c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 60 e3 02 c0    	mov    DWORD PTR ds:0xc002e360,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 8c e3 02 c0    	cmp    DWORD PTR ds:0xc002e38c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 9c e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e39c
c0000e60:	c7 42 0c 94 e3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e394
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 9c e3 02 c0    	mov    DWORD PTR ds:0xc002e39c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 8c e3 02 c0    	mov    DWORD PTR ds:0xc002e38c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 60 e3 02 c0 02 	test   BYTE PTR ds:0xc002e360,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 12 e8 00 00       	call   c000f753 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 54 e7 00 00       	call   c000f753 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 3e e7 00 00       	call   c000f753 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 1a e7 00 00       	call   c000f753 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 60 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e360
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 64 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c9c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 64 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c9c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 94 e3 02 c0 	lea    edx,[eax*8-0x3ffd1c6c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d a0 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a0
c00011e2:	81 fb 94 e3 02 c0    	cmp    ebx,0xc002e394
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 94 e3 02 c0       	cmp    eax,0xc002e394
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 90 e3 02 c0    	cmp    DWORD PTR ds:0xc002e390,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 9c e3 02 c0       	mov    ds:0xc002e39c,eax
c000121e:	a3 a0 e3 02 c0       	mov    ds:0xc002e3a0,eax
c0001223:	a3 90 e3 02 c0       	mov    ds:0xc002e390,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 94 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e394
c0001231:	c7 40 0c 94 e3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e394
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 a0 e3 02 c0       	mov    ds:0xc002e3a0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 94 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e394
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 58 e3 02 c0 	lea    ebp,[edx*4-0x3ffd1ca8]
c0001282:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 60 e3 02 c0 	lea    ecx,[edx*4-0x3ffd1ca0]
c000129d:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 94 e6 02 c0 	or     DWORD PTR [edi*4-0x3ffd196c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 94 e3 02 c0 	lea    eax,[eax*8-0x3ffd1c6c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 9c e3 02 c0    	mov    DWORD PTR ds:0xc002e39c,ecx
c0001357:	89 0d a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,ecx
c000135d:	c7 41 08 94 e3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e394
c0001364:	c7 41 0c 94 e3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e394
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 8c e3 02 c0 	lea    edx,[ecx*8-0x3ffd1c74]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 94 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd196c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 94 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd196c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 8c e3 02 c0 	lea    edx,[eax*4-0x3ffd1c74]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 94 e6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd196c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 9c e3 02 c0    	mov    DWORD PTR ds:0xc002e39c,edi
c000142a:	89 3d a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,edi
c0001430:	c7 47 08 94 e3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e394
c0001437:	c7 47 0c 94 e3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e394
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 90 e3 02 c0    	mov    DWORD PTR ds:0xc002e390,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 8c e3 02 c0       	mov    eax,ds:0xc002e38c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 8c e3 02 c0    	mov    DWORD PTR ds:0xc002e38c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 60 e3 02 c0       	mov    edx,0xc002e360
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 60 e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e360,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d b4 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6b4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 b4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6b4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d b4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6b4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 8c e3 02 c0    	cmp    DWORD PTR ds:0xc002e38c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 8c e3 02 c0    	mov    DWORD PTR ds:0xc002e38c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 60 e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e360,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 bc e6 02 c0    	push   DWORD PTR ds:0xc002e6bc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 60 e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e360,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 bc e6 02 c0       	mov    eax,ds:0xc002e6bc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 8c e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e38c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 8c e3 02 c0       	mov    eax,ds:0xc002e38c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 64 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c9c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 94 e3 02 c0       	mov    eax,0xc002e394
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 8c e6 02 c0       	cmp    eax,0xc002e68c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 c8 e6 02 c0       	mov    eax,ds:0xc002e6c8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 b0 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6b0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 c4 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6c4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 d4 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6d4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6bdc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 60 e3 02 c0       	mov    eax,ds:0xc002e360
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d a8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ac e6 02 c0    	mov    DWORD PTR ds:0xc002e6ac,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 b4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6b4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 40 1e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce1c0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 94 f2 01 00       	jmp    c0020ec0 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 40 1e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce1c0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 c5 f2 01 00       	jmp    c0020f07 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 40 1e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce1c0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 ed f2 01 00       	jmp    c0020f4e <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 78 4b 02 00       	call   c0026abc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ac0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ac0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 94 02 c0       	mov    edx,0xc0029440
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 95 02 c0       	mov    edx,0xc0029560
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 78 cb 02 c0       	mov    edx,0xc002cb78
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 95 02 c0       	mov    edx,0xc002956c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 95 02 c0       	mov    edx,0xc0029550
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 00 e7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1900]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 e0 e6 02 c0    	mov    ax,ds:0xc002e6e0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 e0 e6 02 c0    	mov    ds:0xc002e6e0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 75 39 02 00       	call   c0026abc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 95 02 c0       	mov    eax,0xc0029572
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 95 02 c0       	mov    eax,0xc002957b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ac0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 40 23 02 00       	call   c0026abc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 95 02 c0       	mov    edx,0xc0029550
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 94 02 c0       	mov    edx,0xc0029440
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 00 e7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1900]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 00 e7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1900],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 07 0d 02 00       	call   c0026abc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ed 0c 02 00       	call   c0026abc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 94 02 c0       	mov    eax,0xc0029497
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 94 02 c0       	mov    eax,0xc0029490
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 00 e7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1900]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 94 02 c0       	mov    esi,0xc0029480
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 30 f4 01 00       	call   c0026abc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 95 02 c0       	mov    edx,0xc0029560
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 94 02 c0       	mov    edx,0xc0029470
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 95 02 c0       	mov    edx,0xc0029582
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 95 02 c0       	mov    edx,0xc002958e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 95 02 c0       	mov    edx,0xc00295a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 59 74 00 00       	call   c000f8fc <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 53 74 00 00       	call   c000f90c <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc00298c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc00298c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 96 02 c0       	mov    eax,0xc00296c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 96 02 c0       	mov    eax,0xc0029600
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 98 71 00 00       	call   c000f90c <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 82 71 00 00       	call   c000f90c <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 84 fd 01 00       	call   c002858f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 47 fd 01 00       	call   c0028571 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 1b fd 01 00       	call   c002858f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ce f3 01 00       	call   c0027c94 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 48 fe 01 00       	call   c0028720 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 95 fc 01 00       	call   c002858f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 d7 fb 01 00       	call   c002858f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 a4 fb 01 00       	call   c0028571 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 91 fa 01 00       	call   c002858f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 59 fa 01 00       	call   c0028571 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 61 6d 00 00       	call   c000f92c <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 fc 6c 00 00       	call   c000f90c <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 65 f8 01 00       	call   c002858f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 2a f8 01 00       	call   c0028571 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 3a f5 01 00       	call   c0028323 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 b8 ee 01 00       	call   c0027cc0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 74 f7 01 00       	call   c0028593 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 62 f8 01 00       	call   c00286b7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 4c ee 01 00       	call   c0027cc0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 f7 f6 01 00       	call   c002858d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 d8 f6 01 00       	call   c0028591 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 66 f8 01 00       	call   c0028740 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 18 f4 01 00       	call   c0028323 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 96 ed 01 00       	call   c0027cc0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 52 f6 01 00       	call   c0028593 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 40 f7 01 00       	call   c00286b7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 2a ed 01 00       	call   c0027cc0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 d5 f5 01 00       	call   c002858d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 b5 f5 01 00       	call   c0028591 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 42 f7 01 00       	call   c0028740 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 f0 f4 01 00       	call   c002858f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ae f4 01 00       	call   c0028571 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 96 f4 01 00       	call   c002858f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 08 f2 01 00       	call   c0028323 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 0a e5 01 00       	call   c0027643 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 6d eb 01 00       	call   c0027cc0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 bf f1 01 00       	call   c0028323 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 c5 e4 01 00       	call   c0027643 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 94 f1 01 00       	call   c0028323 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 e4 f3 01 00       	call   c002858d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 c1 ea 01 00       	call   c0027c94 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 3b f5 01 00       	call   c0028720 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 6a f3 01 00       	call   c0028571 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 65 ea 01 00       	call   c0027c94 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 e3 f0 01 00       	call   c0028323 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 66 ea 01 00       	call   c0027cc0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 b8 f0 01 00       	call   c0028323 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 1f ed 01 00       	call   c0027fa4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 9e e3 01 00       	call   c0027643 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 fe dc 01 00       	call   c0026fd8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 d5 f3 01 00       	call   c00286b7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 be e9 01 00       	call   c0027cc0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 a5 f3 01 00       	call   c00286b7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 17 e3 01 00       	call   c0027643 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 50 f2 01 00       	call   c0028593 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 38 ec 01 00       	call   c0027fa4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 be e2 01 00       	call   c0027643 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 a4 f3 01 00       	call   c0028740 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 7e ef 01 00       	call   c0028323 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 d5 e8 01 00       	call   c0027c94 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 b4 f1 01 00       	call   c002858f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 4d e2 01 00       	call   c0027643 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 79 e8 01 00       	call   c0027c94 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 13 f3 01 00       	call   c0028740 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 cc ee 01 00       	call   c0028323 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 49 e8 01 00       	call   c0027cc0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 9c ee 01 00       	call   c0028323 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 a2 e1 01 00       	call   c0027643 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 72 ee 01 00       	call   c0028323 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 c4 f0 01 00       	call   c002858f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 9b e7 01 00       	call   c0027c94 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 15 f2 01 00       	call   c0028720 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 44 f0 01 00       	call   c0028571 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 3e e7 01 00       	call   c0027c94 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 bc ed 01 00       	call   c0028323 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 3f e7 01 00       	call   c0027cc0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 91 ed 01 00       	call   c0028323 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 f8 e9 01 00       	call   c0027fa4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 77 e0 01 00       	call   c0027643 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 c7 d9 01 00       	call   c0026fd8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 9e f0 01 00       	call   c00286b7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 87 e6 01 00       	call   c0027cc0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 6e f0 01 00       	call   c00286b7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 e0 df 01 00       	call   c0027643 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 19 ef 01 00       	call   c0028593 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 00 e9 01 00       	call   c0027fa4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 7f df 01 00       	call   c0027643 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 65 f0 01 00       	call   c0028740 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 3f ec 01 00       	call   c0028323 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 96 e5 01 00       	call   c0027c94 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 75 ee 01 00       	call   c002858f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 0e df 01 00       	call   c0027643 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 3a e5 01 00       	call   c0027c94 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 af eb 01 00       	call   c0028323 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 b5 de 01 00       	call   c0027643 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9e 02 c0       	mov    eax,0xc0029e94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 95 60 00 00       	call   c000f90c <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 97 60 00 00       	call   c000f92c <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 2a ea 01 00       	call   c0028323 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 a8 e3 01 00       	call   c0027cc0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 3a d6 01 00       	call   c0026fd8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 11 ed 01 00       	call   c00286b7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 fa e2 01 00       	call   c0027cc0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 dd ec 01 00       	call   c00286b7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 4f dc 01 00       	call   c0027643 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 af ec 01 00       	call   c00286b7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 9e e2 01 00       	call   c0027cc0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 07 dc 01 00       	call   c0027643 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 28 d5 01 00       	call   c0026fd8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ff eb 01 00       	call   c00286b7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 e8 e1 01 00       	call   c0027cc0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 cb eb 01 00       	call   c00286b7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 3d db 01 00       	call   c0027643 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 9d eb 01 00       	call   c00286b7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 8c e1 01 00       	call   c0027cc0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 f5 da 01 00       	call   c0027643 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 d3 da 01 00       	call   c0027643 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 af d3 01 00       	call   c0026fd8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 86 ea 01 00       	call   c00286b7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 6f e0 01 00       	call   c0027cc0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 52 ea 01 00       	call   c00286b7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 c4 d9 01 00       	call   c0027643 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 24 ea 01 00       	call   c00286b7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 0d e0 01 00       	call   c0027cc0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 76 d9 01 00       	call   c0027643 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 d6 e9 01 00       	call   c00286b7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 bf df 01 00       	call   c0027cc0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 28 d9 01 00       	call   c0027643 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 3d d2 01 00       	call   c0026fd8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 14 e9 01 00       	call   c00286b7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 fd de 01 00       	call   c0027cc0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 e4 e8 01 00       	call   c00286b7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 56 d8 01 00       	call   c0027643 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 b6 e8 01 00       	call   c00286b7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 9f de 01 00       	call   c0027cc0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 08 d8 01 00       	call   c0027643 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 68 e8 01 00       	call   c00286b7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 51 de 01 00       	call   c0027cc0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ba d7 01 00       	call   c0027643 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 8e d7 01 00       	call   c0027643 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 eb dd 01 00       	call   c0027cc0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 a7 e6 01 00       	call   c0028593 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 36 d7 01 00       	call   c0027643 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 93 dd 01 00       	call   c0027cc0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 4f e6 01 00       	call   c0028593 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 c9 cf 01 00       	call   c0026fd8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 a0 e6 01 00       	call   c00286b7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 89 dc 01 00       	call   c0027cc0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 6c e6 01 00       	call   c00286b7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 de d5 01 00       	call   c0027643 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 3e e6 01 00       	call   c00286b7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 27 dc 01 00       	call   c0027cc0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 90 d5 01 00       	call   c0027643 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 f0 e5 01 00       	call   c00286b7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 d9 db 01 00       	call   c0027cc0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 42 d5 01 00       	call   c0027643 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 a2 e5 01 00       	call   c00286b7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 8b db 01 00       	call   c0027cc0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 f4 d4 01 00       	call   c0027643 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 54 e5 01 00       	call   c00286b7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 3d db 01 00       	call   c0027cc0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 a6 d4 01 00       	call   c0027643 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 a8 cd 01 00       	call   c0026fd8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 7f e4 01 00       	call   c00286b7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 68 da 01 00       	call   c0027cc0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 4f e4 01 00       	call   c00286b7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 c1 d3 01 00       	call   c0027643 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 21 e4 01 00       	call   c00286b7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 0a da 01 00       	call   c0027cc0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 73 d3 01 00       	call   c0027643 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 d3 e3 01 00       	call   c00286b7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 bc d9 01 00       	call   c0027cc0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 25 d3 01 00       	call   c0027643 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 85 e3 01 00       	call   c00286b7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 6e d9 01 00       	call   c0027cc0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 d7 d2 01 00       	call   c0027643 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 37 e3 01 00       	call   c00286b7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 20 d9 01 00       	call   c0027cc0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 89 d2 01 00       	call   c0027643 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 5d d2 01 00       	call   c0027643 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ba d8 01 00       	call   c0027cc0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 76 e1 01 00       	call   c0028593 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 05 d2 01 00       	call   c0027643 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 62 d8 01 00       	call   c0027cc0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 1e e1 01 00       	call   c0028593 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ac d1 01 00       	call   c0027643 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 09 d8 01 00       	call   c0027cc0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 c5 e0 01 00       	call   c0028593 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 53 d1 01 00       	call   c0027643 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 b0 d7 01 00       	call   c0027cc0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 6c e0 01 00       	call   c0028593 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ca c9 01 00       	call   c0026fd8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 a1 e0 01 00       	call   c00286b7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 8a d6 01 00       	call   c0027cc0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 6d e0 01 00       	call   c00286b7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 df cf 01 00       	call   c0027643 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 3f e0 01 00       	call   c00286b7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 28 d6 01 00       	call   c0027cc0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 91 cf 01 00       	call   c0027643 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 f1 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 da d5 01 00       	call   c0027cc0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 43 cf 01 00       	call   c0027643 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 a3 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 8c d5 01 00       	call   c0027cc0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 f5 ce 01 00       	call   c0027643 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 55 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 3e d5 01 00       	call   c0027cc0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 a7 ce 01 00       	call   c0027643 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 07 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 f0 d4 01 00       	call   c0027cc0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 56 ce 01 00       	call   c0027643 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 b6 de 01 00       	call   c00286b7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 9f d4 01 00       	call   c0027cc0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 08 ce 01 00       	call   c0027643 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 02 c7 01 00       	call   c0026fd8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 d9 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 c2 d3 01 00       	call   c0027cc0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 a2 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 14 cd 01 00       	call   c0027643 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 74 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 5d d3 01 00       	call   c0027cc0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 c6 cc 01 00       	call   c0027643 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 26 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 0f d3 01 00       	call   c0027cc0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 78 cc 01 00       	call   c0027643 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 d8 dc 01 00       	call   c00286b7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 c1 d2 01 00       	call   c0027cc0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 2a cc 01 00       	call   c0027643 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 8a dc 01 00       	call   c00286b7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 73 d2 01 00       	call   c0027cc0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 dc cb 01 00       	call   c0027643 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 3c dc 01 00       	call   c00286b7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 25 d2 01 00       	call   c0027cc0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 8b cb 01 00       	call   c0027643 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 eb db 01 00       	call   c00286b7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 d4 d1 01 00       	call   c0027cc0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 43 cb 01 00       	call   c0027643 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 1c cb 01 00       	call   c0027643 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 7a d1 01 00       	call   c0027cc0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 36 da 01 00       	call   c0028593 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 c5 ca 01 00       	call   c0027643 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 23 d1 01 00       	call   c0027cc0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 df d9 01 00       	call   c0028593 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 6d ca 01 00       	call   c0027643 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 cb d0 01 00       	call   c0027cc0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 87 d9 01 00       	call   c0028593 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 15 ca 01 00       	call   c0027643 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 73 d0 01 00       	call   c0027cc0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 2f d9 01 00       	call   c0028593 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 bd c9 01 00       	call   c0027643 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 1b d0 01 00       	call   c0027cc0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 d7 d8 01 00       	call   c0028593 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 6b c9 01 00       	call   c0027643 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 c9 cf 01 00       	call   c0027cc0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 85 d8 01 00       	call   c0028593 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 99 c1 01 00       	call   c0026fd8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 70 d8 01 00       	call   c00286b7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 59 ce 01 00       	call   c0027cc0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 40 d8 01 00       	call   c00286b7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 b2 c7 01 00       	call   c0027643 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd613c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 e6 d7 01 00       	call   c00286b7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 cf cd 01 00       	call   c0027cc0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 3a c7 01 00       	call   c0027643 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 87 d7 01 00       	call   c00286b7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 70 cd 01 00       	call   c0027cc0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 db c6 01 00       	call   c0027643 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 28 d7 01 00       	call   c00286b7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 11 cd 01 00       	call   c0027cc0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 7c c6 01 00       	call   c0027643 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 c9 d6 01 00       	call   c00286b7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 b2 cc 01 00       	call   c0027cc0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 1d c6 01 00       	call   c0027643 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 6a d6 01 00       	call   c00286b7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 53 cc 01 00       	call   c0027cc0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 be c5 01 00       	call   c0027643 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 0b d6 01 00       	call   c00286b7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 f4 cb 01 00       	call   c0027cc0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 5f c5 01 00       	call   c0027643 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ac d5 01 00       	call   c00286b7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 95 cb 01 00       	call   c0027cc0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 00 c5 01 00       	call   c0027643 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 4d d5 01 00       	call   c00286b7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 36 cb 01 00       	call   c0027cc0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 a1 c4 01 00       	call   c0027643 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 ab bd 01 00       	call   c0026fd8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 82 d4 01 00       	call   c00286b7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 6b ca 01 00       	call   c0027cc0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 52 d4 01 00       	call   c00286b7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 c4 c3 01 00       	call   c0027643 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6120]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 f7 d3 01 00       	call   c00286b7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 e0 c9 01 00       	call   c0027cc0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 4b c3 01 00       	call   c0027643 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 97 d3 01 00       	call   c00286b7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 80 c9 01 00       	call   c0027cc0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 eb c2 01 00       	call   c0027643 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 37 d3 01 00       	call   c00286b7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 20 c9 01 00       	call   c0027cc0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 8b c2 01 00       	call   c0027643 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 d7 d2 01 00       	call   c00286b7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 c0 c8 01 00       	call   c0027cc0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 2b c2 01 00       	call   c0027643 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 77 d2 01 00       	call   c00286b7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 60 c8 01 00       	call   c0027cc0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 cb c1 01 00       	call   c0027643 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 17 d2 01 00       	call   c00286b7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 00 c8 01 00       	call   c0027cc0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 6b c1 01 00       	call   c0027643 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 b7 d1 01 00       	call   c00286b7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 a0 c7 01 00       	call   c0027cc0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 0b c1 01 00       	call   c0027643 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 57 d1 01 00       	call   c00286b7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 40 c7 01 00       	call   c0027cc0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 ab c0 01 00       	call   c0027643 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6104]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 50 c0 01 00       	call   c0027643 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ad c6 01 00       	call   c0027cc0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 69 cf 01 00       	call   c0028593 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 f3 bf 01 00       	call   c0027643 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 50 c6 01 00       	call   c0027cc0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 0c cf 01 00       	call   c0028593 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 96 bf 01 00       	call   c0027643 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 f3 c5 01 00       	call   c0027cc0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 af ce 01 00       	call   c0028593 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 39 bf 01 00       	call   c0027643 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 96 c5 01 00       	call   c0027cc0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 52 ce 01 00       	call   c0028593 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 dc be 01 00       	call   c0027643 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 39 c5 01 00       	call   c0027cc0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 f5 cd 01 00       	call   c0028593 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 7f be 01 00       	call   c0027643 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 dc c4 01 00       	call   c0027cc0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 98 cd 01 00       	call   c0028593 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 22 be 01 00       	call   c0027643 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 7f c4 01 00       	call   c0027cc0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 3b cd 01 00       	call   c0028593 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 c5 bd 01 00       	call   c0027643 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 22 c4 01 00       	call   c0027cc0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 de cc 01 00       	call   c0028593 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 da c3 01 00       	call   c0027cc0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 4a ce 01 00       	jmp    c0028740 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 bc ca 01 00       	call   c002858f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 7a ca 01 00       	call   c0028571 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 11 c8 01 00       	call   c0028323 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 12 bb 01 00       	call   c0027643 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 e1 c7 01 00       	call   c0028323 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 48 c4 01 00       	call   c0027fa4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 e7 c9 01 00       	call   c0028571 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ea c9 01 00       	call   c002858f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 bd c9 01 00       	call   c002858f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 b6 c3 01 00       	call   c0027fa4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 38 cb 01 00       	call   c0028740 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 13 cb 01 00       	call   c0028740 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ed c6 01 00       	call   c0028323 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 44 c0 01 00       	call   c0027c94 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 23 c9 01 00       	call   c002858f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 bc b9 01 00       	call   c0027643 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 e0 bf 01 00       	call   c0027c94 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 7a ca 01 00       	call   c0028740 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ba c2 01 00       	call   c0027fa4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 37 b9 01 00       	call   c0027643 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 63 c5 01 00       	call   c0028323 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 63 b8 01 00       	call   c0027643 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 43 b8 01 00       	call   c0027643 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 13 c5 01 00       	call   c0028323 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 63 c7 01 00       	call   c002858d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 42 be 01 00       	call   c0027c94 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 bc c8 01 00       	call   c0028720 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 eb c6 01 00       	call   c0028571 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 e9 bd 01 00       	call   c0027c94 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 67 c4 01 00       	call   c0028323 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ea bd 01 00       	call   c0027cc0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 3c c4 01 00       	call   c0028323 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 a3 c0 01 00       	call   c0027fa4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 22 b7 01 00       	call   c0027643 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ec c3 01 00       	call   c0028323 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 38 c6 01 00       	call   c002858f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 2d bd 01 00       	call   c0027cc0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ff bc 01 00       	call   c0027cc0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 38 c3 01 00       	call   c0028323 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 9c bf 01 00       	call   c0027fa4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 64 bf 01 00       	call   c0027fa4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 e3 b5 01 00       	call   c0027643 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 c8 c6 01 00       	call   c0028740 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 a2 c2 01 00       	call   c0028323 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 f9 bb 01 00       	call   c0027c94 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 d8 c4 01 00       	call   c002858f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 70 b5 01 00       	call   c0027643 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 94 bb 01 00       	call   c0027c94 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 2e c6 01 00       	call   c0028740 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 f7 c3 01 00       	call   c002858f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 b5 c3 01 00       	call   c0028571 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 4c c1 01 00       	call   c0028323 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 4d b4 01 00       	call   c0027643 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 1c c1 01 00       	call   c0028323 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 83 bd 01 00       	call   c0027fa4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 22 c3 01 00       	call   c0028571 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 25 c3 01 00       	call   c002858f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 f8 c2 01 00       	call   c002858f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 f1 bc 01 00       	call   c0027fa4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 73 c4 01 00       	call   c0028740 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 4e c4 01 00       	call   c0028740 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 28 c0 01 00       	call   c0028323 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 7f b9 01 00       	call   c0027c94 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 5e c2 01 00       	call   c002858f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 f7 b2 01 00       	call   c0027643 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 1b b9 01 00       	call   c0027c94 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 b5 c3 01 00       	call   c0028740 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 f5 bb 01 00       	call   c0027fa4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 72 b2 01 00       	call   c0027643 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 9d be 01 00       	call   c0028323 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 9d b1 01 00       	call   c0027643 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 7d b1 01 00       	call   c0027643 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 4d be 01 00       	call   c0028323 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 9d c0 01 00       	call   c002858d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 7b b7 01 00       	call   c0027c94 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 f5 c1 01 00       	call   c0028720 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 24 c0 01 00       	call   c0028571 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 21 b7 01 00       	call   c0027c94 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 9f bd 01 00       	call   c0028323 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 22 b7 01 00       	call   c0027cc0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 74 bd 01 00       	call   c0028323 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 db b9 01 00       	call   c0027fa4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 5a b0 01 00       	call   c0027643 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 24 bd 01 00       	call   c0028323 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 70 bf 01 00       	call   c002858f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 65 b6 01 00       	call   c0027cc0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 37 b6 01 00       	call   c0027cc0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 6e bc 01 00       	call   c0028323 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 d2 b8 01 00       	call   c0027fa4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 9f b8 01 00       	call   c0027fa4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 1e af 01 00       	call   c0027643 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 03 c0 01 00       	call   c0028740 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 dd bb 01 00       	call   c0028323 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 34 b5 01 00       	call   c0027c94 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 13 be 01 00       	call   c002858f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 ab ae 01 00       	call   c0027643 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 cf b4 01 00       	call   c0027c94 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 69 bf 01 00       	call   c0028740 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 32 bd 01 00       	call   c002858f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 f0 bc 01 00       	call   c0028571 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 87 ba 01 00       	call   c0028323 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 88 ad 01 00       	call   c0027643 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 57 ba 01 00       	call   c0028323 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 be b6 01 00       	call   c0027fa4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 5d bc 01 00       	call   c0028571 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 60 bc 01 00       	call   c002858f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 33 bc 01 00       	call   c002858f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 2c b6 01 00       	call   c0027fa4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ae bd 01 00       	call   c0028740 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 89 bd 01 00       	call   c0028740 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 63 b9 01 00       	call   c0028323 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ba b2 01 00       	call   c0027c94 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 99 bb 01 00       	call   c002858f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 32 ac 01 00       	call   c0027643 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 56 b2 01 00       	call   c0027c94 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 f0 bc 01 00       	call   c0028740 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 30 b5 01 00       	call   c0027fa4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ad ab 01 00       	call   c0027643 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 d8 b7 01 00       	call   c0028323 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 d8 aa 01 00       	call   c0027643 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 b8 aa 01 00       	call   c0027643 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 88 b7 01 00       	call   c0028323 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 d8 b9 01 00       	call   c002858d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 b6 b0 01 00       	call   c0027c94 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 30 bb 01 00       	call   c0028720 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 5f b9 01 00       	call   c0028571 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 5c b0 01 00       	call   c0027c94 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 da b6 01 00       	call   c0028323 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 5d b0 01 00       	call   c0027cc0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 af b6 01 00       	call   c0028323 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 16 b3 01 00       	call   c0027fa4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 95 a9 01 00       	call   c0027643 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 5f b6 01 00       	call   c0028323 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 ab b8 01 00       	call   c002858f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 a0 af 01 00       	call   c0027cc0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 72 af 01 00       	call   c0027cc0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 a9 b5 01 00       	call   c0028323 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 0d b2 01 00       	call   c0027fa4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 da b1 01 00       	call   c0027fa4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 59 a8 01 00       	call   c0027643 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 3e b9 01 00       	call   c0028740 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 18 b5 01 00       	call   c0028323 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 6f ae 01 00       	call   c0027c94 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 4e b7 01 00       	call   c002858f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 e6 a7 01 00       	call   c0027643 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 0a ae 01 00       	call   c0027c94 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 a4 b8 01 00       	call   c0028740 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 6d b6 01 00       	call   c002858f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 2b b6 01 00       	call   c0028571 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 c2 b3 01 00       	call   c0028323 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 c3 a6 01 00       	call   c0027643 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 92 b3 01 00       	call   c0028323 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 f9 af 01 00       	call   c0027fa4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 98 b5 01 00       	call   c0028571 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 9b b5 01 00       	call   c002858f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 6e b5 01 00       	call   c002858f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 67 af 01 00       	call   c0027fa4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 e9 b6 01 00       	call   c0028740 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 c4 b6 01 00       	call   c0028740 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 9e b2 01 00       	call   c0028323 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 f5 ab 01 00       	call   c0027c94 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 d4 b4 01 00       	call   c002858f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 6d a5 01 00       	call   c0027643 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 91 ab 01 00       	call   c0027c94 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 2b b6 01 00       	call   c0028740 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 6b ae 01 00       	call   c0027fa4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 e8 a4 01 00       	call   c0027643 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 13 b1 01 00       	call   c0028323 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 13 a4 01 00       	call   c0027643 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 f3 a3 01 00       	call   c0027643 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 c3 b0 01 00       	call   c0028323 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 13 b3 01 00       	call   c002858d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 f1 a9 01 00       	call   c0027c94 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 6b b4 01 00       	call   c0028720 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 9a b2 01 00       	call   c0028571 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 97 a9 01 00       	call   c0027c94 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 15 b0 01 00       	call   c0028323 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 98 a9 01 00       	call   c0027cc0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ea af 01 00       	call   c0028323 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 51 ac 01 00       	call   c0027fa4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 d0 a2 01 00       	call   c0027643 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 9a af 01 00       	call   c0028323 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 e6 b1 01 00       	call   c002858f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 db a8 01 00       	call   c0027cc0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ad a8 01 00       	call   c0027cc0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 e4 ae 01 00       	call   c0028323 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 48 ab 01 00       	call   c0027fa4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 15 ab 01 00       	call   c0027fa4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 94 a1 01 00       	call   c0027643 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 79 b2 01 00       	call   c0028740 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 53 ae 01 00       	call   c0028323 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 aa a7 01 00       	call   c0027c94 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 89 b0 01 00       	call   c002858f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 21 a1 01 00       	call   c0027643 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 45 a7 01 00       	call   c0027c94 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 df b1 01 00       	call   c0028740 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 a5 af 01 00       	call   c002858f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 63 af 01 00       	call   c0028571 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 fa ac 01 00       	call   c0028323 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 fb 9f 01 00       	call   c0027643 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ca ac 01 00       	call   c0028323 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 31 a9 01 00       	call   c0027fa4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 d0 ae 01 00       	call   c0028571 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 d3 ae 01 00       	call   c002858f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 a6 ae 01 00       	call   c002858f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 9f a8 01 00       	call   c0027fa4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 21 b0 01 00       	call   c0028740 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 f8 af 01 00       	call   c0028740 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 d2 ab 01 00       	call   c0028323 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 29 a5 01 00       	call   c0027c94 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 08 ae 01 00       	call   c002858f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 a1 9e 01 00       	call   c0027643 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 c9 a4 01 00       	call   c0027c94 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 63 af 01 00       	call   c0028740 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 a4 a7 01 00       	call   c0027fa4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 21 9e 01 00       	call   c0027643 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 4d aa 01 00       	call   c0028323 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 4d 9d 01 00       	call   c0027643 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 2d 9d 01 00       	call   c0027643 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 fd a9 01 00       	call   c0028323 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 31 ac 01 00       	call   c0028571 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 28 a3 01 00       	call   c0027c94 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 a2 ad 01 00       	call   c0028720 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 d1 ab 01 00       	call   c0028571 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 cb a2 01 00       	call   c0027c94 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 49 a9 01 00       	call   c0028323 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 cc a2 01 00       	call   c0027cc0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 1e a9 01 00       	call   c0028323 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 85 a5 01 00       	call   c0027fa4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 04 9c 01 00       	call   c0027643 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ce a8 01 00       	call   c0028323 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 1a ab 01 00       	call   c002858f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 0f a2 01 00       	call   c0027cc0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 e1 a1 01 00       	call   c0027cc0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 25 a8 01 00       	call   c0028323 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 8c a4 01 00       	call   c0027fa4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 75 a1 01 00       	call   c0027cc0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 31 aa 01 00       	call   c0028593 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 24 a4 01 00       	call   c0027fa4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 a3 9a 01 00       	call   c0027643 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 88 ab 01 00       	call   c0028740 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 62 a7 01 00       	call   c0028323 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 b9 a0 01 00       	call   c0027c94 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 98 a9 01 00       	call   c002858f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 30 9a 01 00       	call   c0027643 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 58 a0 01 00       	call   c0027c94 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 f2 aa 01 00       	call   c0028740 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 5b 1c 00 00       	call   c000f90c <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ad a7 01 00       	call   c002858f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 6b a7 01 00       	call   c0028571 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 57 a7 01 00       	call   c002858f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 c9 a4 01 00       	call   c0028323 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 47 9e 01 00       	call   c0027cc0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 99 a4 01 00       	call   c0028323 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 9f 97 01 00       	call   c0027643 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 6e a4 01 00       	call   c0028323 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 be a6 01 00       	call   c002858d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 9f 9d 01 00       	call   c0027c94 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 19 a8 01 00       	call   c0028720 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 48 a6 01 00       	call   c0028571 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 47 9d 01 00       	call   c0027c94 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 c5 a3 01 00       	call   c0028323 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 48 9d 01 00       	call   c0027cc0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 9a a3 01 00       	call   c0028323 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 01 a0 01 00       	call   c0027fa4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 80 96 01 00       	call   c0027643 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 a8 9f 01 00       	call   c0027fa4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 2e 96 01 00       	call   c0027643 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 14 a7 01 00       	call   c0028740 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ee a2 01 00       	call   c0028323 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 45 9c 01 00       	call   c0027c94 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 24 a5 01 00       	call   c002858f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 bd 95 01 00       	call   c0027643 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 e9 9b 01 00       	call   c0027c94 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 83 a6 01 00       	call   c0028740 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 38 a2 01 00       	call   c0028323 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 b5 9b 01 00       	call   c0027cc0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 06 a2 01 00       	call   c0028323 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 0c 95 01 00       	call   c0027643 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 dc a1 01 00       	call   c0028323 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 30 a4 01 00       	call   c0028591 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 09 9b 01 00       	call   c0027c94 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 83 a5 01 00       	call   c0028720 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 b2 a3 01 00       	call   c0028571 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 b0 9a 01 00       	call   c0027c94 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 2e a1 01 00       	call   c0028323 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 b1 9a 01 00       	call   c0027cc0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 03 a1 01 00       	call   c0028323 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 6a 9d 01 00       	call   c0027fa4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 e9 93 01 00       	call   c0027643 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 05 9d 01 00       	call   c0027fa4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 84 93 01 00       	call   c0027643 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 6a a4 01 00       	call   c0028740 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 44 a0 01 00       	call   c0028323 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 9b 99 01 00       	call   c0027c94 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 7a a2 01 00       	call   c002858f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 13 93 01 00       	call   c0027643 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 3f 99 01 00       	call   c0027c94 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 b0 9f 01 00       	call   c0028323 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 b6 92 01 00       	call   c0027643 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e a0 02 c0       	mov    eax,0xc002a03e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f a0 02 c0       	mov    eax,0xc002a04f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 9d 14 00 00       	call   c000f90c <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 9f 14 00 00       	call   c000f92c <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 0e 14 00 00       	call   c000f8fc <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 a0 02 c0       	push   0xc002a086
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 68 e7 02 c0       	mov    eax,0xc002e768
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f a0 02 c0       	push   0xc002a08f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 bc 6a 02 c0       	mov    eax,0xc0026abc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 a0 02 c0       	push   0xc002a099
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 f0 67 02 c0       	mov    eax,0xc00267f0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 a0 02 c0       	push   0xc002a0a2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 bc 6b 02 c0       	mov    eax,0xc0026bbc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac a0 02 c0       	push   0xc002a0ac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 3c 69 02 c0       	mov    eax,0xc002693c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 a0 02 c0       	push   0xc002a0b5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 6c e7 02 c0       	mov    eax,0xc002e76c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 a0 02 c0       	push   0xc002a0c2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 6d e7 02 c0       	mov    eax,0xc002e76d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 81 5f 00 00       	call   c00145a4 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <swapper(void*)>:
c000e64a:	55                   	push   ebp
c000e64b:	89 e5                	mov    ebp,esp
c000e64d:	83 ec 14             	sub    esp,0x14
c000e650:	68 cf a0 02 c0       	push   0xc002a0cf
c000e655:	e8 ad 49 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000e65a:	e8 81 f8 00 00       	call   c001dee0 <unlockScheduler()>
c000e65f:	c7 04 24 e9 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0e9
c000e666:	e8 9c 49 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000e66b:	83 c4 10             	add    esp,0x10
c000e66e:	83 ec 0c             	sub    esp,0xc
c000e671:	68 05 a1 02 c0       	push   0xc002a105
c000e676:	e8 8c 49 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000e67b:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e682:	e8 ed fc 00 00       	call   c001e374 <blockTask(TaskState)>
c000e687:	c7 04 24 17 a1 02 c0 	mov    DWORD PTR [esp],0xc002a117
c000e68e:	e8 74 49 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000e693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e698:	83 c4 10             	add    esp,0x10
c000e69b:	85 c0                	test   eax,eax
c000e69d:	74 cf                	je     c000e66e <swapper(void*)+0x24>
c000e69f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6a2:	85 c0                	test   eax,eax
c000e6a4:	74 c8                	je     c000e66e <swapper(void*)+0x24>
c000e6a6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6ac:	85 c0                	test   eax,eax
c000e6ae:	74 be                	je     c000e66e <swapper(void*)+0x24>
c000e6b0:	83 ec 0c             	sub    esp,0xc
c000e6b3:	68 29 a1 02 c0       	push   0xc002a129
c000e6b8:	e8 4a 49 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000e6bd:	83 c4 0c             	add    esp,0xc
c000e6c0:	a1 ac e7 02 c0       	mov    eax,ds:0xc002e7ac
c000e6c5:	85 c0                	test   eax,eax
c000e6c7:	79 03                	jns    c000e6cc <swapper(void*)+0x82>
c000e6c9:	83 c0 1f             	add    eax,0x1f
c000e6cc:	c1 f8 05             	sar    eax,0x5
c000e6cf:	83 c0 02             	add    eax,0x2
c000e6d2:	50                   	push   eax
c000e6d3:	6a 04                	push   0x4
c000e6d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6dd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e6e3:	e8 fc 45 00 00       	call   c0012ce4 <VAS::scanForEviction(int, int)>
c000e6e8:	83 c4 10             	add    esp,0x10
c000e6eb:	eb 81                	jmp    c000e66e <swapper(void*)+0x24>

c000e6ed <Krnl::firstTask()>:
c000e6ed:	53                   	push   ebx
c000e6ee:	83 ec 14             	sub    esp,0x14
c000e6f1:	fb                   	sti    
c000e6f2:	68 3f 07 00 00       	push   0x73f
c000e6f7:	e8 00 12 00 00       	call   c000f8fc <malloc>
c000e6fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e703:	89 c3                	mov    ebx,eax
c000e705:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c000e70b:	68 3d a1 02 c0       	push   0xc002a13d
c000e710:	6a 01                	push   0x1
c000e712:	50                   	push   eax
c000e713:	e8 fa f5 00 00       	call   c001dd12 <Process::Process(bool, char const*, Process*, char**)>
c000e718:	83 c4 20             	add    esp,0x20
c000e71b:	68 ff 00 00 00       	push   0xff
c000e720:	6a 00                	push   0x0
c000e722:	68 91 f2 00 c0       	push   0xc000f291
c000e727:	53                   	push   ebx
c000e728:	e8 e3 f8 00 00       	call   c001e010 <Process::createThread(void (*)(void*), void*, int)>
c000e72d:	6a 7a                	push   0x7a
c000e72f:	6a 00                	push   0x0
c000e731:	68 6e e8 01 c0       	push   0xc001e86e
c000e736:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c000e73c:	e8 cf f8 00 00       	call   c001e010 <Process::createThread(void (*)(void*), void*, int)>
c000e741:	83 c4 20             	add    esp,0x20
c000e744:	a3 8c 1c 03 c0       	mov    ds:0xc0031c8c,eax
c000e749:	6a 01                	push   0x1
c000e74b:	6a 00                	push   0x0
c000e74d:	68 4a e6 00 c0       	push   0xc000e64a
c000e752:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c000e758:	e8 b3 f8 00 00       	call   c001e010 <Process::createThread(void (*)(void*), void*, int)>
c000e75d:	c6 05 6d e7 02 c0 01 	mov    BYTE PTR ds:0xc002e76d,0x1
c000e764:	a3 88 1c 03 c0       	mov    ds:0xc0031c88,eax
c000e769:	e8 81 04 01 00       	call   c001ebef <Vm::initialise8086()>
c000e76e:	e8 19 4c 00 00       	call   c001338c <Fs::initVFS()>
c000e773:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c000e778:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e77e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e780:	6a 00                	push   0x0
c000e782:	6a 00                	push   0x0
c000e784:	6a 00                	push   0x0
c000e786:	50                   	push   eax
c000e787:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e78a:	83 c4 20             	add    esp,0x20
c000e78d:	e8 10 df 00 00       	call   c001c6a2 <Sys::loadSyscalls()>
c000e792:	e8 e9 bd 00 00       	call   c001a580 <Krnl::loadSystemEnv()>
c000e797:	50                   	push   eax
c000e798:	6a 3a                	push   0x3a
c000e79a:	68 4a a1 02 c0       	push   0xc002a14a
c000e79f:	68 53 a1 02 c0       	push   0xc002a153
c000e7a4:	e8 fd ca 00 00       	call   c001b2a6 <Reg::readIntWithDefault(char*, char*, int)>
c000e7a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7ac:	e8 c3 56 00 00       	call   c0013e74 <User::loadClockSettings(int)>
c000e7b1:	5a                   	pop    edx
c000e7b2:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c000e7b7:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7bd:	e8 b6 5d 00 00       	call   c0014578 <Device::loadDriversForAll()>
c000e7c2:	e8 ff b8 00 00       	call   c001a0c6 <Krnl::startCPUs()>
c000e7c7:	59                   	pop    ecx
c000e7c8:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c000e7ce:	58                   	pop    eax
c000e7cf:	6a 01                	push   0x1
c000e7d1:	68 5b a1 02 c0       	push   0xc002a15b
c000e7d6:	e8 5b f0 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c000e7db:	5a                   	pop    edx
c000e7dc:	59                   	pop    ecx
c000e7dd:	53                   	push   ebx
c000e7de:	50                   	push   eax
c000e7df:	e8 86 f2 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c000e7e4:	83 c4 10             	add    esp,0x10
c000e7e7:	83 ec 0c             	sub    esp,0xc
c000e7ea:	6a 02                	push   0x2
c000e7ec:	e8 83 fb 00 00       	call   c001e374 <blockTask(TaskState)>
c000e7f1:	83 c4 10             	add    esp,0x10
c000e7f4:	eb f1                	jmp    c000e7e7 <Krnl::firstTask()+0xfa>

c000e7f6 <Computer::Computer()>:
c000e7f6:	83 ec 0c             	sub    esp,0xc
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	83 ec 08             	sub    esp,0x8
c000e800:	68 77 a1 02 c0       	push   0xc002a177
c000e805:	50                   	push   eax
c000e806:	e8 13 5e 00 00       	call   c001461e <Device::Device(char const*)>
c000e80b:	83 c4 10             	add    esp,0x10
c000e80e:	ba 18 a3 02 c0       	mov    edx,0xc002a318
c000e813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e817:	89 10                	mov    DWORD PTR [eax],edx
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e83f:	83 ca 04             	or     edx,0x4
c000e842:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e852:	0f b6 d0             	movzx  edx,al
c000e855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e859:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e864:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86a:	0f b6 d0             	movzx  edx,al
c000e86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e871:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e880:	8d 50 01             	lea    edx,[eax+0x1]
c000e883:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e887:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e88d:	0f b6 d0             	movzx  edx,al
c000e890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e894:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e898:	83 e1 3f             	and    ecx,0x3f
c000e89b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a9:	0f b6 d0             	movzx  edx,al
c000e8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b0:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c1:	0f b6 d0             	movzx  edx,al
c000e8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8de:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8e4:	0f b6 d0             	movzx  edx,al
c000e8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8ef:	83 e1 3f             	and    ecx,0x3f
c000e8f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e900:	0f b6 d0             	movzx  edx,al
c000e903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e907:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e912:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e918:	0f b6 d0             	movzx  edx,al
c000e91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e928:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e92e:	8d 50 01             	lea    edx,[eax+0x1]
c000e931:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e935:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e93b:	0f b6 d0             	movzx  edx,al
c000e93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e942:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e946:	83 e1 3f             	and    ecx,0x3f
c000e949:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e94d:	90                   	nop
c000e94e:	83 c4 0c             	add    esp,0xc
c000e951:	c3                   	ret    

c000e952 <Computer::setBootMessage(char const*)>:
c000e952:	c3                   	ret    
c000e953:	90                   	nop

c000e954 <Computer::detectFeatures()>:
c000e954:	55                   	push   ebp
c000e955:	57                   	push   edi
c000e956:	56                   	push   esi
c000e957:	53                   	push   ebx
c000e958:	83 ec 1c             	sub    esp,0x1c
c000e95b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e95f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e969:	e8 76 19 ff ff       	call   c00002e4 <detectCPUID>
c000e96e:	85 c0                	test   eax,eax
c000e970:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e976:	0f 95 c2             	setne  dl
c000e979:	83 e0 fd             	and    eax,0xfffffffd
c000e97c:	d1 e2                	shl    edx,1
c000e97e:	09 d0                	or     eax,edx
c000e980:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e986:	a8 02                	test   al,0x2
c000e988:	75 46                	jne    c000e9d0 <Computer::detectFeatures()+0x7c>
c000e98a:	f6 05 81 e7 02 c0 04 	test   BYTE PTR ds:0xc002e781,0x4
c000e991:	74 07                	je     c000e99a <Computer::detectFeatures()+0x46>
c000e993:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e99a:	e8 e7 7d 01 00       	call   c0026786 <x87Detect>
c000e99f:	83 e0 01             	and    eax,0x1
c000e9a2:	c1 e0 04             	shl    eax,0x4
c000e9a5:	88 c2                	mov    dl,al
c000e9a7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ad:	83 e0 ef             	and    eax,0xffffffef
c000e9b0:	09 d0                	or     eax,edx
c000e9b2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b8:	a8 10                	test   al,0x10
c000e9ba:	0f 85 2a 01 00 00    	jne    c000eaea <Computer::detectFeatures()+0x196>
c000e9c0:	84 c0                	test   al,al
c000e9c2:	0f 88 45 01 00 00    	js     c000eb0d <Computer::detectFeatures()+0x1b9>
c000e9c8:	83 c4 1c             	add    esp,0x1c
c000e9cb:	5b                   	pop    ebx
c000e9cc:	5e                   	pop    esi
c000e9cd:	5f                   	pop    edi
c000e9ce:	5d                   	pop    ebp
c000e9cf:	c3                   	ret    
c000e9d0:	83 ec 0c             	sub    esp,0xc
c000e9d3:	6a 20                	push   0x20
c000e9d5:	e8 fe a3 00 00       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c000e9da:	83 e0 01             	and    eax,0x1
c000e9dd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ea:	83 e0 f7             	and    eax,0xfffffff7
c000e9ed:	09 d0                	or     eax,edx
c000e9ef:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9fc:	e8 d7 a3 00 00       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c000ea01:	83 e0 01             	and    eax,0x1
c000ea04:	88 c2                	mov    dl,al
c000ea06:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0c:	83 e0 fe             	and    eax,0xfffffffe
c000ea0f:	09 d0                	or     eax,edx
c000ea11:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea17:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea1e:	e8 b5 a3 00 00       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c000ea23:	c1 e0 07             	shl    eax,0x7
c000ea26:	88 c2                	mov    dl,al
c000ea28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea2e:	83 e0 7f             	and    eax,0x7f
c000ea31:	09 d0                	or     eax,edx
c000ea33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea39:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea40:	e8 93 a3 00 00       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c000ea45:	83 c4 10             	add    esp,0x10
c000ea48:	83 e0 01             	and    eax,0x1
c000ea4b:	c1 e0 05             	shl    eax,0x5
c000ea4e:	88 c2                	mov    dl,al
c000ea50:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea56:	83 e0 df             	and    eax,0xffffffdf
c000ea59:	09 d0                	or     eax,edx
c000ea5b:	f7 05 80 e7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e780,0x401
c000ea65:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea6b:	0f 84 c2 00 00 00    	je     c000eb33 <Computer::detectFeatures()+0x1df>
c000ea71:	83 e0 fe             	and    eax,0xfffffffe
c000ea74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea7a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea80:	88 c2                	mov    dl,al
c000ea82:	83 e2 09             	and    edx,0x9
c000ea85:	fe ca                	dec    dl
c000ea87:	75 09                	jne    c000ea92 <Computer::detectFeatures()+0x13e>
c000ea89:	83 e0 fe             	and    eax,0xfffffffe
c000ea8c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea92:	83 ec 0c             	sub    esp,0xc
c000ea95:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea99:	50                   	push   eax
c000ea9a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea9e:	55                   	push   ebp
c000ea9f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000eaa3:	57                   	push   edi
c000eaa4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000eaa8:	56                   	push   esi
c000eaa9:	68 00 00 00 80       	push   0x80000000
c000eaae:	e8 a1 a2 00 00       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab3:	83 c4 20             	add    esp,0x20
c000eab6:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000eabd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eac1:	0f 86 c3 fe ff ff    	jbe    c000e98a <Computer::detectFeatures()+0x36>
c000eac7:	83 ec 0c             	sub    esp,0xc
c000eaca:	50                   	push   eax
c000eacb:	55                   	push   ebp
c000eacc:	57                   	push   edi
c000eacd:	56                   	push   esi
c000eace:	68 01 00 00 80       	push   0x80000001
c000ead3:	e8 7c a2 00 00       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ead8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eae2:	83 c4 20             	add    esp,0x20
c000eae5:	e9 a0 fe ff ff       	jmp    c000e98a <Computer::detectFeatures()+0x36>
c000eaea:	e8 51 7c 01 00       	call   c0026740 <absolutelyNoChanceInHell>
c000eaef:	88 c2                	mov    dl,al
c000eaf1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaf7:	c1 e2 07             	shl    edx,0x7
c000eafa:	83 e0 7f             	and    eax,0x7f
c000eafd:	09 d0                	or     eax,edx
c000eaff:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb05:	84 c0                	test   al,al
c000eb07:	0f 89 bb fe ff ff    	jns    c000e9c8 <Computer::detectFeatures()+0x74>
c000eb0d:	e8 0e 7c 01 00       	call   c0026720 <avxDetect>
c000eb12:	83 e0 01             	and    eax,0x1
c000eb15:	c1 e0 05             	shl    eax,0x5
c000eb18:	88 c2                	mov    dl,al
c000eb1a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb20:	83 e0 df             	and    eax,0xffffffdf
c000eb23:	09 d0                	or     eax,edx
c000eb25:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb2b:	83 c4 1c             	add    esp,0x1c
c000eb2e:	5b                   	pop    ebx
c000eb2f:	5e                   	pop    esi
c000eb30:	5f                   	pop    edi
c000eb31:	5d                   	pop    ebp
c000eb32:	c3                   	ret    
c000eb33:	83 ec 0c             	sub    esp,0xc
c000eb36:	68 00 02 00 00       	push   0x200
c000eb3b:	e8 98 a2 00 00       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	83 e0 01             	and    eax,0x1
c000eb46:	88 c2                	mov    dl,al
c000eb48:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb4e:	83 e0 fe             	and    eax,0xfffffffe
c000eb51:	09 d0                	or     eax,edx
c000eb53:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb59:	e9 1c ff ff ff       	jmp    c000ea7a <Computer::detectFeatures()+0x126>

c000eb5e <Computer::displayFeatures()>:
c000eb5e:	53                   	push   ebx
c000eb5f:	83 ec 14             	sub    esp,0x14
c000eb62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb66:	68 87 a1 02 c0       	push   0xc002a187
c000eb6b:	e8 97 44 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb7a:	0f 85 73 02 00 00    	jne    c000edf3 <Computer::displayFeatures()+0x295>
c000eb80:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000eb85:	83 ec 08             	sub    esp,0x8
c000eb88:	50                   	push   eax
c000eb89:	68 9a a1 02 c0       	push   0xc002a19a
c000eb8e:	e8 74 44 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb9d:	0f 85 8c 02 00 00    	jne    c000ee2f <Computer::displayFeatures()+0x2d1>
c000eba3:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000eba8:	83 ec 08             	sub    esp,0x8
c000ebab:	50                   	push   eax
c000ebac:	68 ab a1 02 c0       	push   0xc002a1ab
c000ebb1:	e8 51 44 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ebb6:	83 c4 10             	add    esp,0x10
c000ebb9:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000ebc0:	0f 85 5f 02 00 00    	jne    c000ee25 <Computer::displayFeatures()+0x2c7>
c000ebc6:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ebcb:	83 ec 08             	sub    esp,0x8
c000ebce:	50                   	push   eax
c000ebcf:	68 bc a1 02 c0       	push   0xc002a1bc
c000ebd4:	e8 2e 44 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ebd9:	83 c4 10             	add    esp,0x10
c000ebdc:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebe3:	0f 85 32 02 00 00    	jne    c000ee1b <Computer::displayFeatures()+0x2bd>
c000ebe9:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ebee:	83 ec 08             	sub    esp,0x8
c000ebf1:	50                   	push   eax
c000ebf2:	68 cd a1 02 c0       	push   0xc002a1cd
c000ebf7:	e8 0b 44 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ebfc:	83 c4 10             	add    esp,0x10
c000ebff:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ec06:	0f 85 05 02 00 00    	jne    c000ee11 <Computer::displayFeatures()+0x2b3>
c000ec0c:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ec11:	83 ec 08             	sub    esp,0x8
c000ec14:	50                   	push   eax
c000ec15:	68 de a1 02 c0       	push   0xc002a1de
c000ec1a:	e8 e8 43 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ec1f:	83 c4 10             	add    esp,0x10
c000ec22:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec29:	0f 85 d8 01 00 00    	jne    c000ee07 <Computer::displayFeatures()+0x2a9>
c000ec2f:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ec34:	83 ec 08             	sub    esp,0x8
c000ec37:	50                   	push   eax
c000ec38:	68 ef a1 02 c0       	push   0xc002a1ef
c000ec3d:	e8 c5 43 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ec42:	83 c4 10             	add    esp,0x10
c000ec45:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec4c:	0f 85 ab 01 00 00    	jne    c000edfd <Computer::displayFeatures()+0x29f>
c000ec52:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ec57:	83 ec 08             	sub    esp,0x8
c000ec5a:	50                   	push   eax
c000ec5b:	68 00 a2 02 c0       	push   0xc002a200
c000ec60:	e8 a2 43 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ec65:	83 c4 10             	add    esp,0x10
c000ec68:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec6f:	0f 88 1b 02 00 00    	js     c000ee90 <Computer::displayFeatures()+0x332>
c000ec75:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ec7a:	83 ec 08             	sub    esp,0x8
c000ec7d:	50                   	push   eax
c000ec7e:	68 11 a2 02 c0       	push   0xc002a211
c000ec83:	e8 7f 43 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ec88:	83 c4 10             	add    esp,0x10
c000ec8b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec92:	0f 85 a1 01 00 00    	jne    c000ee39 <Computer::displayFeatures()+0x2db>
c000ec98:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ec9d:	83 ec 08             	sub    esp,0x8
c000eca0:	50                   	push   eax
c000eca1:	68 22 a2 02 c0       	push   0xc002a222
c000eca6:	e8 5c 43 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ecab:	83 c4 10             	add    esp,0x10
c000ecae:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ecb5:	0f 85 cb 01 00 00    	jne    c000ee86 <Computer::displayFeatures()+0x328>
c000ecbb:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ecc0:	83 ec 08             	sub    esp,0x8
c000ecc3:	50                   	push   eax
c000ecc4:	68 33 a2 02 c0       	push   0xc002a233
c000ecc9:	e8 39 43 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ecce:	83 c4 10             	add    esp,0x10
c000ecd1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecd8:	0f 85 9e 01 00 00    	jne    c000ee7c <Computer::displayFeatures()+0x31e>
c000ecde:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ece3:	83 ec 08             	sub    esp,0x8
c000ece6:	50                   	push   eax
c000ece7:	68 44 a2 02 c0       	push   0xc002a244
c000ecec:	e8 16 43 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ecf1:	83 c4 10             	add    esp,0x10
c000ecf4:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecfb:	0f 85 71 01 00 00    	jne    c000ee72 <Computer::displayFeatures()+0x314>
c000ed01:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ed06:	83 ec 08             	sub    esp,0x8
c000ed09:	50                   	push   eax
c000ed0a:	68 55 a2 02 c0       	push   0xc002a255
c000ed0f:	e8 f3 42 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ed14:	83 c4 10             	add    esp,0x10
c000ed17:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed1e:	0f 85 44 01 00 00    	jne    c000ee68 <Computer::displayFeatures()+0x30a>
c000ed24:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ed29:	83 ec 08             	sub    esp,0x8
c000ed2c:	50                   	push   eax
c000ed2d:	68 66 a2 02 c0       	push   0xc002a266
c000ed32:	e8 d0 42 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ed37:	83 c4 10             	add    esp,0x10
c000ed3a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed41:	0f 85 17 01 00 00    	jne    c000ee5e <Computer::displayFeatures()+0x300>
c000ed47:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ed4c:	83 ec 08             	sub    esp,0x8
c000ed4f:	50                   	push   eax
c000ed50:	68 77 a2 02 c0       	push   0xc002a277
c000ed55:	e8 ad 42 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ed5a:	83 c4 10             	add    esp,0x10
c000ed5d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed64:	0f 85 ea 00 00 00    	jne    c000ee54 <Computer::displayFeatures()+0x2f6>
c000ed6a:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ed6f:	83 ec 08             	sub    esp,0x8
c000ed72:	50                   	push   eax
c000ed73:	68 88 a2 02 c0       	push   0xc002a288
c000ed78:	e8 8a 42 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed87:	0f 88 0d 01 00 00    	js     c000ee9a <Computer::displayFeatures()+0x33c>
c000ed8d:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000ed92:	83 ec 08             	sub    esp,0x8
c000ed95:	50                   	push   eax
c000ed96:	68 99 a2 02 c0       	push   0xc002a299
c000ed9b:	e8 67 42 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000eda0:	83 c4 10             	add    esp,0x10
c000eda3:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000edaa:	0f 85 9a 00 00 00    	jne    c000ee4a <Computer::displayFeatures()+0x2ec>
c000edb0:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000edb5:	83 ec 08             	sub    esp,0x8
c000edb8:	50                   	push   eax
c000edb9:	68 aa a2 02 c0       	push   0xc002a2aa
c000edbe:	e8 44 42 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000edc3:	83 c4 10             	add    esp,0x10
c000edc6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edcd:	75 74                	jne    c000ee43 <Computer::displayFeatures()+0x2e5>
c000edcf:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c000edd4:	83 ec 08             	sub    esp,0x8
c000edd7:	50                   	push   eax
c000edd8:	68 bb a2 02 c0       	push   0xc002a2bb
c000eddd:	e8 25 42 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ede2:	c7 44 24 20 dc bd 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bddc
c000edea:	83 c4 18             	add    esp,0x18
c000eded:	5b                   	pop    ebx
c000edee:	e9 14 42 00 00       	jmp    c0013007 <Dbg::kprintf(char const*, ...)>
c000edf3:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000edf8:	e9 88 fd ff ff       	jmp    c000eb85 <Computer::displayFeatures()+0x27>
c000edfd:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee02:	e9 50 fe ff ff       	jmp    c000ec57 <Computer::displayFeatures()+0xf9>
c000ee07:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee0c:	e9 23 fe ff ff       	jmp    c000ec34 <Computer::displayFeatures()+0xd6>
c000ee11:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee16:	e9 f6 fd ff ff       	jmp    c000ec11 <Computer::displayFeatures()+0xb3>
c000ee1b:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee20:	e9 c9 fd ff ff       	jmp    c000ebee <Computer::displayFeatures()+0x90>
c000ee25:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee2a:	e9 9c fd ff ff       	jmp    c000ebcb <Computer::displayFeatures()+0x6d>
c000ee2f:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee34:	e9 6f fd ff ff       	jmp    c000eba8 <Computer::displayFeatures()+0x4a>
c000ee39:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee3e:	e9 5a fe ff ff       	jmp    c000ec9d <Computer::displayFeatures()+0x13f>
c000ee43:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee48:	eb 8a                	jmp    c000edd4 <Computer::displayFeatures()+0x276>
c000ee4a:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee4f:	e9 61 ff ff ff       	jmp    c000edb5 <Computer::displayFeatures()+0x257>
c000ee54:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee59:	e9 11 ff ff ff       	jmp    c000ed6f <Computer::displayFeatures()+0x211>
c000ee5e:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee63:	e9 e4 fe ff ff       	jmp    c000ed4c <Computer::displayFeatures()+0x1ee>
c000ee68:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee6d:	e9 b7 fe ff ff       	jmp    c000ed29 <Computer::displayFeatures()+0x1cb>
c000ee72:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee77:	e9 8a fe ff ff       	jmp    c000ed06 <Computer::displayFeatures()+0x1a8>
c000ee7c:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee81:	e9 5d fe ff ff       	jmp    c000ece3 <Computer::displayFeatures()+0x185>
c000ee86:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee8b:	e9 30 fe ff ff       	jmp    c000ecc0 <Computer::displayFeatures()+0x162>
c000ee90:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee95:	e9 e0 fd ff ff       	jmp    c000ec7a <Computer::displayFeatures()+0x11c>
c000ee9a:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c000ee9f:	e9 ee fe ff ff       	jmp    c000ed92 <Computer::displayFeatures()+0x234>

c000eea4 <Computer::rdmsr(unsigned int)>:
c000eea4:	83 ec 0c             	sub    esp,0xc
c000eea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eeab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eeb2:	74 0a                	je     c000eebe <Computer::rdmsr(unsigned int)+0x1a>
c000eeb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeb8:	0f 32                	rdmsr  
c000eeba:	83 c4 0c             	add    esp,0xc
c000eebd:	c3                   	ret    
c000eebe:	83 ec 0c             	sub    esp,0xc
c000eec1:	68 cc a2 02 c0       	push   0xc002a2cc
c000eec6:	e8 ee b7 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000eecb:	83 c4 10             	add    esp,0x10
c000eece:	eb e4                	jmp    c000eeb4 <Computer::rdmsr(unsigned int)+0x10>

c000eed0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eed0:	57                   	push   edi
c000eed1:	56                   	push   esi
c000eed2:	52                   	push   edx
c000eed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eed7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eedb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eedf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eee6:	74 0e                	je     c000eef6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eee8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeec:	89 f0                	mov    eax,esi
c000eeee:	89 fa                	mov    edx,edi
c000eef0:	0f 30                	wrmsr  
c000eef2:	58                   	pop    eax
c000eef3:	5e                   	pop    esi
c000eef4:	5f                   	pop    edi
c000eef5:	c3                   	ret    
c000eef6:	83 ec 0c             	sub    esp,0xc
c000eef9:	68 d2 a2 02 c0       	push   0xc002a2d2
c000eefe:	e8 b6 b7 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000ef03:	83 c4 10             	add    esp,0x10
c000ef06:	eb e0                	jmp    c000eee8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ef08 <Computer::nmiEnabled()>:
c000ef08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef0c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ef12:	c3                   	ret    
c000ef13:	90                   	nop

c000ef14 <Computer::readCMOS(unsigned char)>:
c000ef14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef18:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef1f:	19 c0                	sbb    eax,eax
c000ef21:	83 e0 80             	and    eax,0xffffff80
c000ef24:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef28:	e6 70                	out    0x70,al
c000ef2a:	e4 71                	in     al,0x71
c000ef2c:	c3                   	ret    
c000ef2d:	90                   	nop

c000ef2e <Computer::enableNMI(bool)>:
c000ef2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef36:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef3c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef44:	eb ce                	jmp    c000ef14 <Computer::readCMOS(unsigned char)>

c000ef46 <Computer::open(int, int, void*)>:
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	83 ec 10             	sub    esp,0x10
c000ef4b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef4f:	f6 05 80 e7 02 c0 04 	test   BYTE PTR ds:0xc002e780,0x4
c000ef56:	68 68 12 00 00       	push   0x1268
c000ef5b:	0f 94 05 a4 d6 02 c0 	sete   BYTE PTR ds:0xc002d6a4
c000ef62:	e8 95 09 00 00       	call   c000f8fc <malloc>
c000ef67:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef6a:	89 c6                	mov    esi,eax
c000ef6c:	e8 37 93 00 00       	call   c00182a8 <ACPI::ACPI()>
c000ef71:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef77:	58                   	pop    eax
c000ef78:	5a                   	pop    edx
c000ef79:	56                   	push   esi
c000ef7a:	53                   	push   ebx
c000ef7b:	e8 ae 54 00 00       	call   c001442e <Device::addChild(Device*)>
c000ef80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef83:	e8 cc f9 ff ff       	call   c000e954 <Computer::detectFeatures()>
c000ef88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef8b:	e8 ce fb ff ff       	call   c000eb5e <Computer::displayFeatures()>
c000ef90:	59                   	pop    ecx
c000ef91:	5e                   	pop    esi
c000ef92:	6a 01                	push   0x1
c000ef94:	53                   	push   ebx
c000ef95:	e8 94 ff ff ff       	call   c000ef2e <Computer::enableNMI(bool)>
c000ef9a:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000efa1:	e8 56 09 00 00       	call   c000f8fc <malloc>
c000efa6:	89 04 24             	mov    DWORD PTR [esp],eax
c000efa9:	89 c6                	mov    esi,eax
c000efab:	e8 e0 9e 00 00       	call   c0018e90 <CPU::CPU()>
c000efb0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efb6:	58                   	pop    eax
c000efb7:	5a                   	pop    edx
c000efb8:	56                   	push   esi
c000efb9:	53                   	push   ebx
c000efba:	e8 6f 54 00 00       	call   c001442e <Device::addChild(Device*)>
c000efbf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efc5:	8b 10                	mov    edx,DWORD PTR [eax]
c000efc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efcb:	6a 00                	push   0x0
c000efcd:	6a 00                	push   0x0
c000efcf:	50                   	push   eax
c000efd0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efd3:	83 c4 20             	add    esp,0x20
c000efd6:	e8 d9 59 00 00       	call   c00149b4 <setupFPU()>
c000efdb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efe1:	85 c0                	test   eax,eax
c000efe3:	74 1f                	je     c000f004 <Computer::open(int, int, void*)+0xbe>
c000efe5:	83 ec 08             	sub    esp,0x8
c000efe8:	50                   	push   eax
c000efe9:	53                   	push   ebx
c000efea:	e8 3f 54 00 00       	call   c001442e <Device::addChild(Device*)>
c000efef:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eff5:	8b 10                	mov    edx,DWORD PTR [eax]
c000eff7:	6a 00                	push   0x0
c000eff9:	6a 00                	push   0x0
c000effb:	6a 00                	push   0x0
c000effd:	50                   	push   eax
c000effe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f001:	83 c4 20             	add    esp,0x20
c000f004:	83 ec 0c             	sub    esp,0xc
c000f007:	68 ed e6 00 c0       	push   0xc000e6ed
c000f00c:	e8 ff f0 00 00       	call   c001e110 <setupMultitasking(void (*)())>
c000f011:	83 c4 14             	add    esp,0x14
c000f014:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f019:	5b                   	pop    ebx
c000f01a:	5e                   	pop    esi
c000f01b:	c3                   	ret    

c000f01c <Computer::disableNMI()>:
c000f01c:	6a 00                	push   0x0
c000f01e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f022:	e8 07 ff ff ff       	call   c000ef2e <Computer::enableNMI(bool)>
c000f027:	58                   	pop    eax
c000f028:	5a                   	pop    edx
c000f029:	c3                   	ret    

c000f02a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f02e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f035:	19 c0                	sbb    eax,eax
c000f037:	83 e0 80             	and    eax,0xffffff80
c000f03a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f03e:	e6 70                	out    0x70,al
c000f040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f044:	e6 71                	out    0x71,al
c000f046:	c3                   	ret    
c000f047:	90                   	nop

c000f048 <Computer::handleNMI()>:
c000f048:	56                   	push   esi
c000f049:	53                   	push   ebx
c000f04a:	83 ec 10             	sub    esp,0x10
c000f04d:	e4 92                	in     al,0x92
c000f04f:	89 c6                	mov    esi,eax
c000f051:	e4 61                	in     al,0x61
c000f053:	68 d8 a2 02 c0       	push   0xc002a2d8
c000f058:	88 c3                	mov    bl,al
c000f05a:	e8 a8 3f 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000f05f:	83 c4 10             	add    esp,0x10
c000f062:	83 e6 10             	and    esi,0x10
c000f065:	75 0d                	jne    c000f074 <Computer::handleNMI()+0x2c>
c000f067:	f6 c3 40             	test   bl,0x40
c000f06a:	75 1d                	jne    c000f089 <Computer::handleNMI()+0x41>
c000f06c:	84 db                	test   bl,bl
c000f06e:	78 2d                	js     c000f09d <Computer::handleNMI()+0x55>
c000f070:	58                   	pop    eax
c000f071:	5b                   	pop    ebx
c000f072:	5e                   	pop    esi
c000f073:	c3                   	ret    
c000f074:	83 ec 0c             	sub    esp,0xc
c000f077:	68 e9 a2 02 c0       	push   0xc002a2e9
c000f07c:	e8 38 b6 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000f081:	83 c4 10             	add    esp,0x10
c000f084:	f6 c3 40             	test   bl,0x40
c000f087:	74 e3                	je     c000f06c <Computer::handleNMI()+0x24>
c000f089:	83 ec 0c             	sub    esp,0xc
c000f08c:	68 f6 a2 02 c0       	push   0xc002a2f6
c000f091:	e8 23 b6 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000f096:	83 c4 10             	add    esp,0x10
c000f099:	84 db                	test   bl,bl
c000f09b:	79 d3                	jns    c000f070 <Computer::handleNMI()+0x28>
c000f09d:	c7 44 24 10 00 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a300
c000f0a5:	5a                   	pop    edx
c000f0a6:	5b                   	pop    ebx
c000f0a7:	5e                   	pop    esi
c000f0a8:	e9 0c b6 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>
c000f0ad:	90                   	nop

c000f0ae <Computer::setDiskActivityLight(int, bool)>:
c000f0ae:	56                   	push   esi
c000f0af:	53                   	push   ebx
c000f0b0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0b4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0b9:	77 1b                	ja     c000f0d6 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0bb:	e4 92                	in     al,0x92
c000f0bd:	bb 40 00 00 00       	mov    ebx,0x40
c000f0c2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0c6:	89 da                	mov    edx,ebx
c000f0c8:	d3 e2                	shl    edx,cl
c000f0ca:	89 f1                	mov    ecx,esi
c000f0cc:	f7 d2                	not    edx
c000f0ce:	d3 e3                	shl    ebx,cl
c000f0d0:	21 d0                	and    eax,edx
c000f0d2:	09 d8                	or     eax,ebx
c000f0d4:	e6 92                	out    0x92,al
c000f0d6:	5b                   	pop    ebx
c000f0d7:	5e                   	pop    esi
c000f0d8:	c3                   	ret    
c000f0d9:	90                   	nop

c000f0da <GDTEntry::setBase(unsigned int)>:
c000f0da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0e2:	89 c1                	mov    ecx,eax
c000f0e4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0e8:	c1 e9 10             	shr    ecx,0x10
c000f0eb:	c1 e8 18             	shr    eax,0x18
c000f0ee:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0f1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0f4:	c3                   	ret    
c000f0f5:	90                   	nop

c000f0f6 <GDTEntry::setLimit(unsigned int)>:
c000f0f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0fe:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f101:	66 89 01             	mov    WORD PTR [ecx],ax
c000f104:	83 e2 f0             	and    edx,0xfffffff0
c000f107:	c1 e8 10             	shr    eax,0x10
c000f10a:	83 e0 0f             	and    eax,0xf
c000f10d:	09 d0                	or     eax,edx
c000f10f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f112:	c3                   	ret    
c000f113:	90                   	nop

c000f114 <GDT::GDT()>:
c000f114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f118:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f11e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f122:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f128:	90                   	nop
c000f129:	c3                   	ret    

c000f12a <GDT::addEntry(GDTEntry)>:
c000f12a:	53                   	push   ebx
c000f12b:	83 ec 0c             	sub    esp,0xc
c000f12e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f132:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f134:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f13b:	52                   	push   edx
c000f13c:	50                   	push   eax
c000f13d:	68 3c a3 02 c0       	push   0xc002a33c
c000f142:	e8 c0 3e 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000f147:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f149:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f14d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f151:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f155:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f159:	8d 50 01             	lea    edx,[eax+0x1]
c000f15c:	c1 e0 03             	shl    eax,0x3
c000f15f:	89 13                	mov    DWORD PTR [ebx],edx
c000f161:	83 c4 18             	add    esp,0x18
c000f164:	5b                   	pop    ebx
c000f165:	c3                   	ret    

c000f166 <GDT::getNumberOfEntries()>:
c000f166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f16a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f16c:	c3                   	ret    
c000f16d:	90                   	nop

c000f16e <GDT::flush()>:
c000f16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f172:	8b 10                	mov    edx,DWORD PTR [eax]
c000f174:	83 c0 04             	add    eax,0x4
c000f177:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f17e:	a3 72 e7 02 c0       	mov    ds:0xc002e772,eax
c000f183:	66 89 15 70 e7 02 c0 	mov    WORD PTR ds:0xc002e770,dx
c000f18a:	e9 b9 12 ff ff       	jmp    c0000448 <loadGDT>
c000f18f:	90                   	nop

c000f190 <GDT::setup()>:
c000f190:	55                   	push   ebp
c000f191:	57                   	push   edi
c000f192:	56                   	push   esi
c000f193:	53                   	push   ebx
c000f194:	83 ec 3c             	sub    esp,0x3c
c000f197:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f19b:	6a 00                	push   0x0
c000f19d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1a1:	53                   	push   ebx
c000f1a2:	e8 33 ff ff ff       	call   c000f0da <GDTEntry::setBase(unsigned int)>
c000f1a7:	6a 00                	push   0x0
c000f1a9:	53                   	push   ebx
c000f1aa:	e8 47 ff ff ff       	call   c000f0f6 <GDTEntry::setLimit(unsigned int)>
c000f1af:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1b7:	6a 00                	push   0x0
c000f1b9:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1bd:	53                   	push   ebx
c000f1be:	e8 17 ff ff ff       	call   c000f0da <GDTEntry::setBase(unsigned int)>
c000f1c3:	68 ff ff ff 00       	push   0xffffff
c000f1c8:	53                   	push   ebx
c000f1c9:	e8 28 ff ff ff       	call   c000f0f6 <GDTEntry::setLimit(unsigned int)>
c000f1ce:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1d2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1d7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1dc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1e0:	83 c4 20             	add    esp,0x20
c000f1e3:	6a 00                	push   0x0
c000f1e5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1e9:	53                   	push   ebx
c000f1ea:	e8 eb fe ff ff       	call   c000f0da <GDTEntry::setBase(unsigned int)>
c000f1ef:	68 ff ff ff 00       	push   0xffffff
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 fc fe ff ff       	call   c000f0f6 <GDTEntry::setLimit(unsigned int)>
c000f1fa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f202:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f206:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f20a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f20e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f213:	0d 00 92 c0 00       	or     eax,0xc09200
c000f218:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f21c:	89 d8                	mov    eax,ebx
c000f21e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f222:	80 cc 60             	or     ah,0x60
c000f225:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f229:	83 c4 0c             	add    esp,0xc
c000f22c:	89 f8                	mov    eax,edi
c000f22e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f232:	80 cc 60             	or     ah,0x60
c000f235:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f239:	89 c7                	mov    edi,eax
c000f23b:	55                   	push   ebp
c000f23c:	e8 e9 fe ff ff       	call   c000f12a <GDT::addEntry(GDTEntry)>
c000f241:	83 c4 0c             	add    esp,0xc
c000f244:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f248:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f24c:	55                   	push   ebp
c000f24d:	e8 d8 fe ff ff       	call   c000f12a <GDT::addEntry(GDTEntry)>
c000f252:	83 c4 0c             	add    esp,0xc
c000f255:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f259:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f25d:	55                   	push   ebp
c000f25e:	e8 c7 fe ff ff       	call   c000f12a <GDT::addEntry(GDTEntry)>
c000f263:	83 c4 0c             	add    esp,0xc
c000f266:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f26a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f26e:	53                   	push   ebx
c000f26f:	51                   	push   ecx
c000f270:	55                   	push   ebp
c000f271:	e8 b4 fe ff ff       	call   c000f12a <GDT::addEntry(GDTEntry)>
c000f276:	83 c4 0c             	add    esp,0xc
c000f279:	57                   	push   edi
c000f27a:	56                   	push   esi
c000f27b:	55                   	push   ebp
c000f27c:	e8 a9 fe ff ff       	call   c000f12a <GDT::addEntry(GDTEntry)>
c000f281:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f284:	e8 e5 fe ff ff       	call   c000f16e <GDT::flush()>
c000f289:	83 c4 4c             	add    esp,0x4c
c000f28c:	5b                   	pop    ebx
c000f28d:	5e                   	pop    esi
c000f28e:	5f                   	pop    edi
c000f28f:	5d                   	pop    ebp
c000f290:	c3                   	ret    

c000f291 <idleFunction(void*)>:
c000f291:	53                   	push   ebx
c000f292:	83 ec 08             	sub    esp,0x8
c000f295:	e8 46 ec 00 00       	call   c001dee0 <unlockScheduler()>
c000f29a:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c000f29f:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2a5:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2ac:	74 3c                	je     c000f2ea <idleFunction(void*)+0x59>
c000f2ae:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2b5:	74 33                	je     c000f2ea <idleFunction(void*)+0x59>
c000f2b7:	31 db                	xor    ebx,ebx
c000f2b9:	52                   	push   edx
c000f2ba:	52                   	push   edx
c000f2bb:	68 e1 00 00 00       	push   0xe1
c000f2c0:	50                   	push   eax
c000f2c1:	e8 de fb ff ff       	call   c000eea4 <Computer::rdmsr(unsigned int)>
c000f2c6:	53                   	push   ebx
c000f2c7:	83 e0 02             	and    eax,0x2
c000f2ca:	50                   	push   eax
c000f2cb:	68 e1 00 00 00       	push   0xe1
c000f2d0:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c000f2d6:	e8 f5 fb ff ff       	call   c000eed0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2db:	83 c4 20             	add    esp,0x20
c000f2de:	e8 9c 0f ff ff       	call   c000027f <doTPAUSE>
c000f2e3:	e8 d8 94 01 00       	call   c00287c0 <idleCommon()>
c000f2e8:	eb f4                	jmp    c000f2de <idleFunction(void*)+0x4d>
c000f2ea:	fb                   	sti    
c000f2eb:	f4                   	hlt    
c000f2ec:	e8 cf 94 01 00       	call   c00287c0 <idleCommon()>
c000f2f1:	eb f7                	jmp    c000f2ea <idleFunction(void*)+0x59>
c000f2f3:	90                   	nop

c000f2f4 <IDTEntry::IDTEntry(bool)>:
c000f2f4:	83 ec 04             	sub    esp,0x4
c000f2f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2fb:	88 04 24             	mov    BYTE PTR [esp],al
c000f2fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f302:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f308:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f310:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f314:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f317:	83 e2 f0             	and    edx,0xfffffff0
c000f31a:	83 ca 0e             	or     edx,0xe
c000f31d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f324:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f327:	83 e2 ef             	and    edx,0xffffffef
c000f32a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f32d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f331:	74 04                	je     c000f337 <IDTEntry::IDTEntry(bool)+0x43>
c000f333:	b2 03                	mov    dl,0x3
c000f335:	eb 02                	jmp    c000f339 <IDTEntry::IDTEntry(bool)+0x45>
c000f337:	b2 00                	mov    dl,0x0
c000f339:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f33d:	83 e2 03             	and    edx,0x3
c000f340:	88 d1                	mov    cl,dl
c000f342:	c1 e1 05             	shl    ecx,0x5
c000f345:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f348:	83 e2 9f             	and    edx,0xffffff9f
c000f34b:	09 ca                	or     edx,ecx
c000f34d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f354:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f357:	83 ca 80             	or     edx,0xffffff80
c000f35a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f35d:	90                   	nop
c000f35e:	83 c4 04             	add    esp,0x4
c000f361:	c3                   	ret    

c000f362 <IDTEntry::setOffset(unsigned int)>:
c000f362:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f366:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f36a:	66 89 02             	mov    WORD PTR [edx],ax
c000f36d:	c1 e8 10             	shr    eax,0x10
c000f370:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f374:	c3                   	ret    
c000f375:	90                   	nop

c000f376 <IDT::IDT()>:
c000f376:	90                   	nop
c000f377:	c3                   	ret    

c000f378 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f37c:	83 c0 30             	add    eax,0x30
c000f37f:	c3                   	ret    

c000f380 <IDT::addEntry(IDTEntry, int)>:
c000f380:	53                   	push   ebx
c000f381:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f385:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f389:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f38d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f391:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f394:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f398:	5b                   	pop    ebx
c000f399:	c3                   	ret    

c000f39a <IDT::addEntry(int, void (*)(), bool)>:
c000f39a:	53                   	push   ebx
c000f39b:	83 ec 10             	sub    esp,0x10
c000f39e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3a3:	50                   	push   eax
c000f3a4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3a8:	53                   	push   ebx
c000f3a9:	e8 46 ff ff ff       	call   c000f2f4 <IDTEntry::IDTEntry(bool)>
c000f3ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3b2:	53                   	push   ebx
c000f3b3:	e8 aa ff ff ff       	call   c000f362 <IDTEntry::setOffset(unsigned int)>
c000f3b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3c8:	e8 b3 ff ff ff       	call   c000f380 <IDT::addEntry(IDTEntry, int)>
c000f3cd:	83 c4 30             	add    esp,0x30
c000f3d0:	5b                   	pop    ebx
c000f3d1:	c3                   	ret    

c000f3d2 <IDT::flush()>:
c000f3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3d6:	66 c7 05 78 e7 02 c0 ff 07 	mov    WORD PTR ds:0xc002e778,0x7ff
c000f3df:	a3 7a e7 02 c0       	mov    ds:0xc002e77a,eax
c000f3e4:	0f 01 1d 78 e7 02 c0 	lidtd  ds:0xc002e778
c000f3eb:	c3                   	ret    

c000f3ec <IDT::setup()>:
c000f3ec:	57                   	push   edi
c000f3ed:	56                   	push   esi
c000f3ee:	53                   	push   ebx
c000f3ef:	83 ec 10             	sub    esp,0x10
c000f3f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 68 04 00 c0       	push   0xc0000468
c000f3fd:	6a 00                	push   0x0
c000f3ff:	53                   	push   ebx
c000f400:	e8 95 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f405:	6a 00                	push   0x0
c000f407:	68 78 04 00 c0       	push   0xc0000478
c000f40c:	6a 01                	push   0x1
c000f40e:	53                   	push   ebx
c000f40f:	e8 86 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f414:	83 c4 20             	add    esp,0x20
c000f417:	6a 00                	push   0x0
c000f419:	68 82 04 00 c0       	push   0xc0000482
c000f41e:	6a 02                	push   0x2
c000f420:	53                   	push   ebx
c000f421:	e8 74 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f426:	6a 00                	push   0x0
c000f428:	68 8c 04 00 c0       	push   0xc000048c
c000f42d:	6a 03                	push   0x3
c000f42f:	53                   	push   ebx
c000f430:	e8 65 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f435:	83 c4 20             	add    esp,0x20
c000f438:	6a 00                	push   0x0
c000f43a:	68 96 04 00 c0       	push   0xc0000496
c000f43f:	6a 04                	push   0x4
c000f441:	53                   	push   ebx
c000f442:	e8 53 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f447:	6a 00                	push   0x0
c000f449:	68 a0 04 00 c0       	push   0xc00004a0
c000f44e:	6a 05                	push   0x5
c000f450:	53                   	push   ebx
c000f451:	e8 44 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f456:	83 c4 20             	add    esp,0x20
c000f459:	6a 00                	push   0x0
c000f45b:	68 aa 04 00 c0       	push   0xc00004aa
c000f460:	6a 06                	push   0x6
c000f462:	53                   	push   ebx
c000f463:	e8 32 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f468:	6a 00                	push   0x0
c000f46a:	68 b4 04 00 c0       	push   0xc00004b4
c000f46f:	6a 07                	push   0x7
c000f471:	53                   	push   ebx
c000f472:	e8 23 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f477:	83 c4 20             	add    esp,0x20
c000f47a:	6a 00                	push   0x0
c000f47c:	68 be 04 00 c0       	push   0xc00004be
c000f481:	6a 08                	push   0x8
c000f483:	53                   	push   ebx
c000f484:	e8 11 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f489:	6a 00                	push   0x0
c000f48b:	68 c6 04 00 c0       	push   0xc00004c6
c000f490:	6a 09                	push   0x9
c000f492:	53                   	push   ebx
c000f493:	e8 02 ff ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f498:	83 c4 20             	add    esp,0x20
c000f49b:	6a 00                	push   0x0
c000f49d:	68 d0 04 00 c0       	push   0xc00004d0
c000f4a2:	6a 0a                	push   0xa
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 f0 fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	6a 00                	push   0x0
c000f4ac:	68 d8 04 00 c0       	push   0xc00004d8
c000f4b1:	6a 0b                	push   0xb
c000f4b3:	53                   	push   ebx
c000f4b4:	e8 e1 fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f4b9:	83 c4 20             	add    esp,0x20
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 e0 04 00 c0       	push   0xc00004e0
c000f4c3:	6a 0c                	push   0xc
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 cf fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	6a 00                	push   0x0
c000f4cd:	68 e8 04 00 c0       	push   0xc00004e8
c000f4d2:	6a 0d                	push   0xd
c000f4d4:	53                   	push   ebx
c000f4d5:	e8 c0 fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f4da:	83 c4 20             	add    esp,0x20
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 f0 04 00 c0       	push   0xc00004f0
c000f4e4:	6a 0e                	push   0xe
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 ae fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	6a 00                	push   0x0
c000f4ee:	68 f8 04 00 c0       	push   0xc00004f8
c000f4f3:	6a 0f                	push   0xf
c000f4f5:	53                   	push   ebx
c000f4f6:	e8 9f fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f4fb:	83 c4 20             	add    esp,0x20
c000f4fe:	6a 00                	push   0x0
c000f500:	68 02 05 00 c0       	push   0xc0000502
c000f505:	6a 10                	push   0x10
c000f507:	53                   	push   ebx
c000f508:	e8 8d fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	6a 00                	push   0x0
c000f50f:	68 0c 05 00 c0       	push   0xc000050c
c000f514:	6a 11                	push   0x11
c000f516:	53                   	push   ebx
c000f517:	e8 7e fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f51c:	83 c4 20             	add    esp,0x20
c000f51f:	6a 00                	push   0x0
c000f521:	68 16 05 00 c0       	push   0xc0000516
c000f526:	6a 12                	push   0x12
c000f528:	53                   	push   ebx
c000f529:	e8 6c fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	6a 01                	push   0x1
c000f530:	68 b0 05 00 c0       	push   0xc00005b0
c000f535:	6a 60                	push   0x60
c000f537:	53                   	push   ebx
c000f538:	e8 5d fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f53d:	83 c4 20             	add    esp,0x20
c000f540:	6a 00                	push   0x0
c000f542:	68 b7 05 00 c0       	push   0xc00005b7
c000f547:	6a 20                	push   0x20
c000f549:	53                   	push   ebx
c000f54a:	e8 4b fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	6a 00                	push   0x0
c000f551:	68 a2 05 00 c0       	push   0xc00005a2
c000f556:	6a 21                	push   0x21
c000f558:	53                   	push   ebx
c000f559:	e8 3c fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f55e:	83 c4 20             	add    esp,0x20
c000f561:	6a 00                	push   0x0
c000f563:	68 a9 05 00 c0       	push   0xc00005a9
c000f568:	6a 22                	push   0x22
c000f56a:	53                   	push   ebx
c000f56b:	e8 2a fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f570:	6a 00                	push   0x0
c000f572:	68 20 05 00 c0       	push   0xc0000520
c000f577:	6a 23                	push   0x23
c000f579:	53                   	push   ebx
c000f57a:	e8 1b fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f57f:	83 c4 20             	add    esp,0x20
c000f582:	6a 00                	push   0x0
c000f584:	68 2a 05 00 c0       	push   0xc000052a
c000f589:	6a 24                	push   0x24
c000f58b:	53                   	push   ebx
c000f58c:	e8 09 fe ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f591:	6a 00                	push   0x0
c000f593:	68 34 05 00 c0       	push   0xc0000534
c000f598:	6a 25                	push   0x25
c000f59a:	53                   	push   ebx
c000f59b:	e8 fa fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f5a0:	83 c4 20             	add    esp,0x20
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 3e 05 00 c0       	push   0xc000053e
c000f5aa:	6a 26                	push   0x26
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 e8 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	6a 00                	push   0x0
c000f5b4:	68 48 05 00 c0       	push   0xc0000548
c000f5b9:	6a 27                	push   0x27
c000f5bb:	53                   	push   ebx
c000f5bc:	e8 d9 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f5c1:	83 c4 20             	add    esp,0x20
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 52 05 00 c0       	push   0xc0000552
c000f5cb:	6a 28                	push   0x28
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 c7 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	6a 00                	push   0x0
c000f5d5:	68 5c 05 00 c0       	push   0xc000055c
c000f5da:	6a 29                	push   0x29
c000f5dc:	53                   	push   ebx
c000f5dd:	e8 b8 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f5e2:	83 c4 20             	add    esp,0x20
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 66 05 00 c0       	push   0xc0000566
c000f5ec:	6a 2a                	push   0x2a
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 a6 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	6a 00                	push   0x0
c000f5f6:	68 70 05 00 c0       	push   0xc0000570
c000f5fb:	6a 2b                	push   0x2b
c000f5fd:	53                   	push   ebx
c000f5fe:	e8 97 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f603:	83 c4 20             	add    esp,0x20
c000f606:	6a 00                	push   0x0
c000f608:	68 7a 05 00 c0       	push   0xc000057a
c000f60d:	6a 2c                	push   0x2c
c000f60f:	53                   	push   ebx
c000f610:	e8 85 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f615:	6a 00                	push   0x0
c000f617:	68 84 05 00 c0       	push   0xc0000584
c000f61c:	6a 2d                	push   0x2d
c000f61e:	53                   	push   ebx
c000f61f:	e8 76 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f624:	83 c4 20             	add    esp,0x20
c000f627:	6a 00                	push   0x0
c000f629:	68 8e 05 00 c0       	push   0xc000058e
c000f62e:	6a 2e                	push   0x2e
c000f630:	53                   	push   ebx
c000f631:	e8 64 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f636:	6a 00                	push   0x0
c000f638:	68 98 05 00 c0       	push   0xc0000598
c000f63d:	6a 2f                	push   0x2f
c000f63f:	53                   	push   ebx
c000f640:	e8 55 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f645:	83 c4 20             	add    esp,0x20
c000f648:	6a 00                	push   0x0
c000f64a:	68 ed 05 00 c0       	push   0xc00005ed
c000f64f:	6a 30                	push   0x30
c000f651:	53                   	push   ebx
c000f652:	e8 43 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f657:	6a 00                	push   0x0
c000f659:	68 f7 05 00 c0       	push   0xc00005f7
c000f65e:	6a 31                	push   0x31
c000f660:	53                   	push   ebx
c000f661:	e8 34 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f666:	83 c4 20             	add    esp,0x20
c000f669:	6a 00                	push   0x0
c000f66b:	68 01 06 00 c0       	push   0xc0000601
c000f670:	6a 32                	push   0x32
c000f672:	53                   	push   ebx
c000f673:	e8 22 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f678:	6a 00                	push   0x0
c000f67a:	68 0b 06 00 c0       	push   0xc000060b
c000f67f:	6a 33                	push   0x33
c000f681:	53                   	push   ebx
c000f682:	e8 13 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f687:	83 c4 20             	add    esp,0x20
c000f68a:	6a 00                	push   0x0
c000f68c:	68 15 06 00 c0       	push   0xc0000615
c000f691:	6a 34                	push   0x34
c000f693:	53                   	push   ebx
c000f694:	e8 01 fd ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f699:	6a 00                	push   0x0
c000f69b:	68 1f 06 00 c0       	push   0xc000061f
c000f6a0:	6a 35                	push   0x35
c000f6a2:	53                   	push   ebx
c000f6a3:	e8 f2 fc ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f6a8:	83 c4 20             	add    esp,0x20
c000f6ab:	6a 00                	push   0x0
c000f6ad:	68 29 06 00 c0       	push   0xc0000629
c000f6b2:	6a 36                	push   0x36
c000f6b4:	53                   	push   ebx
c000f6b5:	e8 e0 fc ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f6ba:	6a 00                	push   0x0
c000f6bc:	68 33 06 00 c0       	push   0xc0000633
c000f6c1:	6a 37                	push   0x37
c000f6c3:	53                   	push   ebx
c000f6c4:	e8 d1 fc ff ff       	call   c000f39a <IDT::addEntry(int, void (*)(), bool)>
c000f6c9:	83 c4 20             	add    esp,0x20
c000f6cc:	e8 11 28 00 00       	call   c0011ee2 <Virt::getAKernelVAS()>
c000f6d1:	52                   	push   edx
c000f6d2:	6a 03                	push   0x3
c000f6d4:	6a 02                	push   0x2
c000f6d6:	50                   	push   eax
c000f6d7:	e8 42 2e 00 00       	call   c001251e <VAS::allocatePages(int, int)>
c000f6dc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6e3:	89 c6                	mov    esi,eax
c000f6e5:	e8 12 02 00 00       	call   c000f8fc <malloc>
c000f6ea:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6f3:	89 c7                	mov    edi,eax
c000f6f5:	e8 7e 1e 00 00       	call   c0011578 <TSS::TSS()>
c000f6fa:	83 c4 0c             	add    esp,0xc
c000f6fd:	68 be 04 00 c0       	push   0xc00004be
c000f702:	56                   	push   esi
c000f703:	57                   	push   edi
c000f704:	e8 af 1e 00 00       	call   c00115b8 <TSS::setup(unsigned long, unsigned long)>
c000f709:	59                   	pop    ecx
c000f70a:	89 c6                	mov    esi,eax
c000f70c:	5f                   	pop    edi
c000f70d:	6a 00                	push   0x0
c000f70f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f713:	50                   	push   eax
c000f714:	e8 db fb ff ff       	call   c000f2f4 <IDTEntry::IDTEntry(bool)>
c000f719:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f71d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f722:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f729:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f72f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f733:	80 ce 05             	or     dh,0x5
c000f736:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f739:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f73d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f741:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f744:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f747:	e8 86 fc ff ff       	call   c000f3d2 <IDT::flush()>
c000f74c:	83 c4 20             	add    esp,0x20
c000f74f:	5b                   	pop    ebx
c000f750:	5e                   	pop    esi
c000f751:	5f                   	pop    edi
c000f752:	c3                   	ret    

c000f753 <sbrk>:
c000f753:	55                   	push   ebp
c000f754:	57                   	push   edi
c000f755:	56                   	push   esi
c000f756:	53                   	push   ebx
c000f757:	83 ec 1c             	sub    esp,0x1c
c000f75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f75e:	85 c0                	test   eax,eax
c000f760:	74 3e                	je     c000f7a0 <sbrk+0x4d>
c000f762:	78 43                	js     c000f7a7 <sbrk+0x54>
c000f764:	8b 15 68 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e768
c000f76a:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f770:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f776:	83 e2 01             	and    edx,0x1
c000f779:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f77d:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c000f783:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f787:	05 ff 0f 00 00       	add    eax,0xfff
c000f78c:	89 c2                	mov    edx,eax
c000f78e:	78 2f                	js     c000f7bf <sbrk+0x6c>
c000f790:	c1 fa 0c             	sar    edx,0xc
c000f793:	89 d7                	mov    edi,edx
c000f795:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f799:	be 00 00 00 00       	mov    esi,0x0
c000f79e:	eb 36                	jmp    c000f7d6 <sbrk+0x83>
c000f7a0:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c000f7a5:	eb 74                	jmp    c000f81b <sbrk+0xc8>
c000f7a7:	83 ec 08             	sub    esp,0x8
c000f7aa:	50                   	push   eax
c000f7ab:	68 58 a3 02 c0       	push   0xc002a358
c000f7b0:	e8 52 38 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000f7b5:	83 c4 10             	add    esp,0x10
c000f7b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7bd:	eb 5c                	jmp    c000f81b <sbrk+0xc8>
c000f7bf:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7c5:	eb c9                	jmp    c000f790 <sbrk+0x3d>
c000f7c7:	81 05 8c d6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d68c,0x1000
c000f7d1:	46                   	inc    esi
c000f7d2:	39 f7                	cmp    edi,esi
c000f7d4:	74 34                	je     c000f80a <sbrk+0xb7>
c000f7d6:	e8 07 27 00 00       	call   c0011ee2 <Virt::getAKernelVAS()>
c000f7db:	89 c3                	mov    ebx,eax
c000f7dd:	8b 2d 8c d6 02 c0    	mov    ebp,DWORD PTR ds:0xc002d68c
c000f7e3:	e8 b6 07 00 00       	call   c000ff9e <Phys::allocatePage()>
c000f7e8:	68 01 04 00 00       	push   0x401
c000f7ed:	55                   	push   ebp
c000f7ee:	50                   	push   eax
c000f7ef:	53                   	push   ebx
c000f7f0:	e8 29 2c 00 00       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7f5:	83 c4 10             	add    esp,0x10
c000f7f8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7fd:	74 c8                	je     c000f7c7 <sbrk+0x74>
c000f7ff:	8b 1d 8c d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d68c
c000f805:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f808:	eb bd                	jmp    c000f7c7 <sbrk+0x74>
c000f80a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f80f:	75 12                	jne    c000f823 <sbrk+0xd0>
c000f811:	0f 20 d8             	mov    eax,cr3
c000f814:	0f 22 d8             	mov    cr3,eax
c000f817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f81b:	83 c4 1c             	add    esp,0x1c
c000f81e:	5b                   	pop    ebx
c000f81f:	5e                   	pop    esi
c000f820:	5f                   	pop    edi
c000f821:	5d                   	pop    ebp
c000f822:	c3                   	ret    
c000f823:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f827:	89 cb                	mov    ebx,ecx
c000f829:	c1 eb 0a             	shr    ebx,0xa
c000f82c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f832:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f838:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f83c:	c1 e0 0c             	shl    eax,0xc
c000f83f:	01 c8                	add    eax,ecx
c000f841:	c1 e8 0a             	shr    eax,0xa
c000f844:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f849:	2d 00 00 40 00       	sub    eax,0x400000
c000f84e:	39 c3                	cmp    ebx,eax
c000f850:	77 c5                	ja     c000f817 <sbrk+0xc4>
c000f852:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f855:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f85b:	39 d8                	cmp    eax,ebx
c000f85d:	73 f3                	jae    c000f852 <sbrk+0xff>
c000f85f:	eb b6                	jmp    c000f817 <sbrk+0xc4>

c000f861 <mmap>:
c000f861:	83 ec 18             	sub    esp,0x18
c000f864:	68 88 a3 02 c0       	push   0xc002a388
c000f869:	e8 4b ae 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000f86e:	b8 00 00 00 00       	mov    eax,0x0
c000f873:	83 c4 1c             	add    esp,0x1c
c000f876:	c3                   	ret    

c000f877 <munmap>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 8d a3 02 c0       	push   0xc002a38d
c000f87f:	e8 35 ae 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000f884:	b8 00 00 00 00       	mov    eax,0x0
c000f889:	83 c4 1c             	add    esp,0x1c
c000f88c:	c3                   	ret    

c000f88d <liballoc_lock()>:
c000f88d:	83 ec 0c             	sub    esp,0xc
c000f890:	e8 49 e6 00 00       	call   c001dede <lockScheduler()>
c000f895:	b8 00 00 00 00       	mov    eax,0x0
c000f89a:	83 c4 0c             	add    esp,0xc
c000f89d:	c3                   	ret    

c000f89e <liballoc_unlock()>:
c000f89e:	83 ec 0c             	sub    esp,0xc
c000f8a1:	e8 3a e6 00 00       	call   c001dee0 <unlockScheduler()>
c000f8a6:	b8 00 00 00 00       	mov    eax,0x0
c000f8ab:	83 c4 0c             	add    esp,0xc
c000f8ae:	c3                   	ret    

c000f8af <liballoc_alloc(int)>:
c000f8af:	83 ec 0c             	sub    esp,0xc
c000f8b2:	e8 2b 26 00 00       	call   c0011ee2 <Virt::getAKernelVAS()>
c000f8b7:	83 ec 04             	sub    esp,0x4
c000f8ba:	6a 01                	push   0x1
c000f8bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8c0:	50                   	push   eax
c000f8c1:	e8 58 2c 00 00       	call   c001251e <VAS::allocatePages(int, int)>
c000f8c6:	83 c4 1c             	add    esp,0x1c
c000f8c9:	c3                   	ret    

c000f8ca <liballoc_free(void*, int)>:
c000f8ca:	83 ec 0c             	sub    esp,0xc
c000f8cd:	e8 10 26 00 00       	call   c0011ee2 <Virt::getAKernelVAS()>
c000f8d2:	83 ec 08             	sub    esp,0x8
c000f8d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8d9:	50                   	push   eax
c000f8da:	e8 fb 28 00 00       	call   c00121da <VAS::freeAllocatedPages(unsigned long)>
c000f8df:	b8 00 00 00 00       	mov    eax,0x0
c000f8e4:	83 c4 1c             	add    esp,0x1c
c000f8e7:	c3                   	ret    

c000f8e8 <realloc>:
c000f8e8:	83 ec 14             	sub    esp,0x14
c000f8eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f3:	e8 5c 1d ff ff       	call   c0001654 <dlrealloc>
c000f8f8:	83 c4 1c             	add    esp,0x1c
c000f8fb:	c3                   	ret    

c000f8fc <malloc>:
c000f8fc:	83 ec 18             	sub    esp,0x18
c000f8ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f903:	e8 0f 18 ff ff       	call   c0001117 <dlmalloc>
c000f908:	83 c4 1c             	add    esp,0x1c
c000f90b:	c3                   	ret    

c000f90c <free>:
c000f90c:	83 ec 18             	sub    esp,0x18
c000f90f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f913:	e8 a4 14 ff ff       	call   c0000dbc <dlfree>
c000f918:	83 c4 1c             	add    esp,0x1c
c000f91b:	c3                   	ret    

c000f91c <rfree>:
c000f91c:	83 ec 18             	sub    esp,0x18
c000f91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f923:	e8 94 14 ff ff       	call   c0000dbc <dlfree>
c000f928:	83 c4 1c             	add    esp,0x1c
c000f92b:	c3                   	ret    

c000f92c <calloc>:
c000f92c:	56                   	push   esi
c000f92d:	53                   	push   ebx
c000f92e:	83 ec 10             	sub    esp,0x10
c000f931:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f935:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f93a:	53                   	push   ebx
c000f93b:	e8 bc ff ff ff       	call   c000f8fc <malloc>
c000f940:	89 c6                	mov    esi,eax
c000f942:	83 c4 0c             	add    esp,0xc
c000f945:	53                   	push   ebx
c000f946:	6a 00                	push   0x0
c000f948:	50                   	push   eax
c000f949:	e8 2a 0e ff ff       	call   c0000778 <memset>
c000f94e:	89 f0                	mov    eax,esi
c000f950:	83 c4 14             	add    esp,0x14
c000f953:	5b                   	pop    ebx
c000f954:	5e                   	pop    esi
c000f955:	c3                   	ret    

c000f956 <hwTextMode_loadInData(VgaText*)>:
c000f956:	55                   	push   ebp
c000f957:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c000f95c:	57                   	push   edi
c000f95d:	56                   	push   esi
c000f95e:	53                   	push   ebx
c000f95f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f963:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f969:	85 d2                	test   edx,edx
c000f96b:	7e 2f                	jle    c000f99c <hwTextMode_loadInData(VgaText*)+0x46>
c000f96d:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f973:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f976:	31 f6                	xor    esi,esi
c000f978:	29 fd                	sub    ebp,edi
c000f97a:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f97d:	31 c0                	xor    eax,eax
c000f97f:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f983:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f987:	40                   	inc    eax
c000f988:	83 f8 50             	cmp    eax,0x50
c000f98b:	75 f2                	jne    c000f97f <hwTextMode_loadInData(VgaText*)+0x29>
c000f98d:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f993:	46                   	inc    esi
c000f994:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f99a:	7f de                	jg     c000f97a <hwTextMode_loadInData(VgaText*)+0x24>
c000f99c:	5b                   	pop    ebx
c000f99d:	5e                   	pop    esi
c000f99e:	5f                   	pop    edi
c000f99f:	5d                   	pop    ebp
c000f9a0:	c3                   	ret    

c000f9a1 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f9a1:	55                   	push   ebp
c000f9a2:	80 3d 00 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e800,0x0
c000f9a9:	57                   	push   edi
c000f9aa:	56                   	push   esi
c000f9ab:	53                   	push   ebx
c000f9ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9b0:	75 50                	jne    c000fa02 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f9b2:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f9b8:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f9be:	8b 15 a0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a0
c000f9c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9c8:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9ce:	eb 0e                	jmp    c000f9de <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f9d0:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f9d6:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f9dc:	89 da                	mov    edx,ebx
c000f9de:	83 e5 0f             	and    ebp,0xf
c000f9e1:	c1 e0 04             	shl    eax,0x4
c000f9e4:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f9e7:	0f b6 c0             	movzx  eax,al
c000f9ea:	41                   	inc    ecx
c000f9eb:	09 e8                	or     eax,ebp
c000f9ed:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9f1:	c1 e0 08             	shl    eax,0x8
c000f9f4:	09 e8                	or     eax,ebp
c000f9f6:	39 fb                	cmp    ebx,edi
c000f9f8:	66 89 02             	mov    WORD PTR [edx],ax
c000f9fb:	75 d3                	jne    c000f9d0 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f9fd:	5b                   	pop    ebx
c000f9fe:	5e                   	pop    esi
c000f9ff:	5f                   	pop    edi
c000fa00:	5d                   	pop    ebp
c000fa01:	c3                   	ret    
c000fa02:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000fa0c:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000fa16:	31 c0                	xor    eax,eax
c000fa18:	bd 02 00 00 00       	mov    ebp,0x2
c000fa1d:	eb 9f                	jmp    c000f9be <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000fa1f <hwTextMode_showCursor(VgaText*, bool)>:
c000fa1f:	56                   	push   esi
c000fa20:	80 3d 00 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e800,0x0
c000fa27:	53                   	push   ebx
c000fa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2c:	75 39                	jne    c000fa67 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa2e:	84 c0                	test   al,al
c000fa30:	74 38                	je     c000fa6a <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000fa32:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa37:	b0 0a                	mov    al,0xa
c000fa39:	89 da                	mov    edx,ebx
c000fa3b:	ee                   	out    dx,al
c000fa3c:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa41:	89 ca                	mov    edx,ecx
c000fa43:	ec                   	in     al,dx
c000fa44:	b2 0f                	mov    dl,0xf
c000fa46:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa4a:	83 e0 c0             	and    eax,0xffffffc0
c000fa4d:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000fa53:	09 d0                	or     eax,edx
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	b0 0b                	mov    al,0xb
c000fa5a:	89 da                	mov    edx,ebx
c000fa5c:	ee                   	out    dx,al
c000fa5d:	89 ca                	mov    edx,ecx
c000fa5f:	ec                   	in     al,dx
c000fa60:	83 e0 e0             	and    eax,0xffffffe0
c000fa63:	83 c8 0f             	or     eax,0xf
c000fa66:	ee                   	out    dx,al
c000fa67:	5b                   	pop    ebx
c000fa68:	5e                   	pop    esi
c000fa69:	c3                   	ret    
c000fa6a:	b0 0a                	mov    al,0xa
c000fa6c:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa71:	ee                   	out    dx,al
c000fa72:	b0 20                	mov    al,0x20
c000fa74:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa79:	ee                   	out    dx,al
c000fa7a:	5b                   	pop    ebx
c000fa7b:	5e                   	pop    esi
c000fa7c:	c3                   	ret    

c000fa7d <hwTextMode_update(VgaText*)>:
c000fa7d:	c3                   	ret    

c000fa7e <hwTextMode_updateCursor(VgaText*)>:
c000fa7e:	56                   	push   esi
c000fa7f:	80 3d 00 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e800,0x0
c000fa86:	53                   	push   ebx
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	75 3f                	jne    c000facc <hwTextMode_updateCursor(VgaText*)+0x4e>
c000fa8d:	be d4 03 00 00       	mov    esi,0x3d4
c000fa92:	b9 19 00 00 00       	mov    ecx,0x19
c000fa97:	89 f2                	mov    edx,esi
c000fa99:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000fa9f:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000faa5:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000faa8:	c1 e1 04             	shl    ecx,0x4
c000faab:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000fab1:	b0 0f                	mov    al,0xf
c000fab3:	ee                   	out    dx,al
c000fab4:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fab9:	88 c8                	mov    al,cl
c000fabb:	89 da                	mov    edx,ebx
c000fabd:	ee                   	out    dx,al
c000fabe:	b0 0e                	mov    al,0xe
c000fac0:	89 f2                	mov    edx,esi
c000fac2:	ee                   	out    dx,al
c000fac3:	89 c8                	mov    eax,ecx
c000fac5:	89 da                	mov    edx,ebx
c000fac7:	66 c1 e8 08          	shr    ax,0x8
c000facb:	ee                   	out    dx,al
c000facc:	5b                   	pop    ebx
c000facd:	5e                   	pop    esi
c000face:	c3                   	ret    

c000facf <hwTextMode_disableBlink(VgaText*, bool)>:
c000facf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fad3:	80 3d 00 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e800,0x0
c000fada:	75 38                	jne    c000fb14 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fadc:	ba da 03 00 00       	mov    edx,0x3da
c000fae1:	84 c0                	test   al,al
c000fae3:	75 18                	jne    c000fafd <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fae5:	ec                   	in     al,dx
c000fae6:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faeb:	b0 30                	mov    al,0x30
c000faed:	89 ca                	mov    edx,ecx
c000faef:	ee                   	out    dx,al
c000faf0:	ba c1 03 00 00       	mov    edx,0x3c1
c000faf5:	ec                   	in     al,dx
c000faf6:	83 c8 08             	or     eax,0x8
c000faf9:	89 ca                	mov    edx,ecx
c000fafb:	ee                   	out    dx,al
c000fafc:	c3                   	ret    
c000fafd:	ec                   	in     al,dx
c000fafe:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fb03:	b0 30                	mov    al,0x30
c000fb05:	89 ca                	mov    edx,ecx
c000fb07:	ee                   	out    dx,al
c000fb08:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb0d:	ec                   	in     al,dx
c000fb0e:	83 e0 f7             	and    eax,0xfffffff7
c000fb11:	89 ca                	mov    edx,ecx
c000fb13:	ee                   	out    dx,al
c000fb14:	c3                   	ret    

c000fb15 <hwTextMode_scrollScreen(VgaText*)>:
c000fb15:	55                   	push   ebp
c000fb16:	57                   	push   edi
c000fb17:	56                   	push   esi
c000fb18:	53                   	push   ebx
c000fb19:	83 ec 1c             	sub    esp,0x1c
c000fb1c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb20:	80 3d 00 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e800,0x0
c000fb27:	74 14                	je     c000fb3d <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fb29:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fb33:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fb3d:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c000fb42:	bd 02 00 00 00       	mov    ebp,0x2
c000fb47:	05 a0 00 00 00       	add    eax,0xa0
c000fb4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb50:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb54:	31 c0                	xor    eax,eax
c000fb56:	eb 0b                	jmp    c000fb63 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fb58:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb5e:	74 57                	je     c000fbb7 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000fb60:	43                   	inc    ebx
c000fb61:	89 f0                	mov    eax,esi
c000fb63:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb69:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb6f:	88 13                	mov    BYTE PTR [ebx],dl
c000fb71:	8d 70 01             	lea    esi,[eax+0x1]
c000fb74:	83 fd 18             	cmp    ebp,0x18
c000fb77:	75 df                	jne    c000fb58 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fb79:	a8 01                	test   al,0x1
c000fb7b:	75 13                	jne    c000fb90 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fb7d:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb80:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb86:	75 d8                	jne    c000fb60 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fb88:	83 c4 1c             	add    esp,0x1c
c000fb8b:	5b                   	pop    ebx
c000fb8c:	5e                   	pop    esi
c000fb8d:	5f                   	pop    edi
c000fb8e:	5d                   	pop    ebp
c000fb8f:	c3                   	ret    
c000fb90:	83 ec 08             	sub    esp,0x8
c000fb93:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fb9a:	50                   	push   eax
c000fb9b:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb9f:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000fba6:	50                   	push   eax
c000fba7:	e8 9e 0c 00 00       	call   c001084a <VgaText::combineColours(unsigned char, unsigned char)>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	88 07                	mov    BYTE PTR [edi],al
c000fbb1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fbb5:	eb c9                	jmp    c000fb80 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fbb7:	45                   	inc    ebp
c000fbb8:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fbc0:	eb 8e                	jmp    c000fb50 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fbc2 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fbc2:	57                   	push   edi
c000fbc3:	80 3d 00 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e800,0x0
c000fbca:	56                   	push   esi
c000fbcb:	53                   	push   ebx
c000fbcc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbd0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbd4:	75 65                	jne    c000fc3b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fbd6:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbdb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbe0:	83 ec 08             	sub    esp,0x8
c000fbe3:	52                   	push   edx
c000fbe4:	50                   	push   eax
c000fbe5:	e8 60 0c 00 00       	call   c001084a <VgaText::combineColours(unsigned char, unsigned char)>
c000fbea:	5a                   	pop    edx
c000fbeb:	0f b6 c0             	movzx  eax,al
c000fbee:	59                   	pop    ecx
c000fbef:	50                   	push   eax
c000fbf0:	0f be c3             	movsx  eax,bl
c000fbf3:	50                   	push   eax
c000fbf4:	e8 f7 0c 00 00       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c000fbf9:	83 c4 10             	add    esp,0x10
c000fbfc:	8b 35 a0 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6a0
c000fc02:	80 3d 00 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e800,0x0
c000fc09:	74 07                	je     c000fc12 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fc0b:	66 0f be c3          	movsx  ax,bl
c000fc0f:	80 cc 02             	or     ah,0x2
c000fc12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc16:	ba 19 00 00 00       	mov    edx,0x19
c000fc1b:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fc21:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc24:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc27:	c1 e1 04             	shl    ecx,0x4
c000fc2a:	c1 e2 04             	shl    edx,0x4
c000fc2d:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc31:	01 ca                	add    edx,ecx
c000fc33:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc37:	5b                   	pop    ebx
c000fc38:	5e                   	pop    esi
c000fc39:	5f                   	pop    edi
c000fc3a:	c3                   	ret    
c000fc3b:	b8 02 00 00 00       	mov    eax,0x2
c000fc40:	31 d2                	xor    edx,edx
c000fc42:	eb 9c                	jmp    c000fbe0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc44 <setupTextMode()>:
c000fc44:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc49:	83 e0 30             	and    eax,0x30
c000fc4c:	66 83 f8 30          	cmp    ax,0x30
c000fc50:	75 11                	jne    c000fc63 <setupTextMode()+0x1f>
c000fc52:	81 2d a0 d6 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d6a0,0x8000
c000fc5c:	c6 05 00 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e800,0x1
c000fc63:	c7 05 38 e8 02 c0 cf fa 00 c0 	mov    DWORD PTR ds:0xc002e838,0xc000facf
c000fc6d:	c7 05 24 e8 02 c0 56 f9 00 c0 	mov    DWORD PTR ds:0xc002e824,0xc000f956
c000fc77:	c7 05 20 e8 02 c0 a1 f9 00 c0 	mov    DWORD PTR ds:0xc002e820,0xc000f9a1
c000fc81:	c7 05 2c e8 02 c0 15 fb 00 c0 	mov    DWORD PTR ds:0xc002e82c,0xc000fb15
c000fc8b:	c7 05 34 e8 02 c0 1f fa 00 c0 	mov    DWORD PTR ds:0xc002e834,0xc000fa1f
c000fc95:	c7 05 28 e8 02 c0 7d fa 00 c0 	mov    DWORD PTR ds:0xc002e828,0xc000fa7d
c000fc9f:	c7 05 30 e8 02 c0 7e fa 00 c0 	mov    DWORD PTR ds:0xc002e830,0xc000fa7e
c000fca9:	c7 05 3c e8 02 c0 c2 fb 00 c0 	mov    DWORD PTR ds:0xc002e83c,0xc000fbc2
c000fcb3:	c3                   	ret    

c000fcb4 <kernel_main>:
c000fcb4:	57                   	push   edi
c000fcb5:	bf f9 03 00 00       	mov    edi,0x3f9
c000fcba:	56                   	push   esi
c000fcbb:	31 f6                	xor    esi,esi
c000fcbd:	53                   	push   ebx
c000fcbe:	83 ec 10             	sub    esp,0x10
c000fcc1:	e8 de 09 00 00       	call   c00106a4 <installVgaTextImplementation()>
c000fcc6:	e8 79 ff ff ff       	call   c000fc44 <setupTextMode()>
c000fccb:	89 f0                	mov    eax,esi
c000fccd:	89 fa                	mov    edx,edi
c000fccf:	ee                   	out    dx,al
c000fcd0:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcd5:	b0 80                	mov    al,0x80
c000fcd7:	89 da                	mov    edx,ebx
c000fcd9:	ee                   	out    dx,al
c000fcda:	b1 03                	mov    cl,0x3
c000fcdc:	ba f8 03 00 00       	mov    edx,0x3f8
c000fce1:	88 c8                	mov    al,cl
c000fce3:	ee                   	out    dx,al
c000fce4:	89 f0                	mov    eax,esi
c000fce6:	89 fa                	mov    edx,edi
c000fce8:	ee                   	out    dx,al
c000fce9:	88 c8                	mov    al,cl
c000fceb:	89 da                	mov    edx,ebx
c000fced:	ee                   	out    dx,al
c000fcee:	b0 c7                	mov    al,0xc7
c000fcf0:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcf5:	ee                   	out    dx,al
c000fcf6:	b0 0b                	mov    al,0xb
c000fcf8:	ba fc 03 00 00       	mov    edx,0x3fc
c000fcfd:	ee                   	out    dx,al
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	68 94 a3 02 c0       	push   0xc002a394
c000fd06:	e8 fc 32 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000fd0b:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd10:	05 ff 0f 00 00       	add    eax,0xfff
c000fd15:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd1d:	e8 3d 04 00 00       	call   c001015f <Phys::physicalMemorySetup(unsigned int)>
c000fd22:	e8 df 20 00 00       	call   c0011e06 <Virt::virtualMemorySetup()>
c000fd27:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd36:	75 0e                	jne    c000fd46 <kernel_main+0x92>
c000fd38:	89 d8                	mov    eax,ebx
c000fd3a:	25 48 03 00 00       	and    eax,0x348
c000fd3f:	3d 00 03 00 00       	cmp    eax,0x300
c000fd44:	74 10                	je     c000fd56 <kernel_main+0xa2>
c000fd46:	83 ec 0c             	sub    esp,0xc
c000fd49:	68 dd bd 02 c0       	push   0xc002bddd
c000fd4e:	e8 66 a9 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000fd53:	83 c4 10             	add    esp,0x10
c000fd56:	83 ec 0c             	sub    esp,0xc
c000fd59:	89 1d 80 e7 02 c0    	mov    DWORD PTR ds:0xc002e780,ebx
c000fd5f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fd63:	53                   	push   ebx
c000fd64:	e8 af 22 00 00       	call   c0012018 <VAS::VAS()>
c000fd69:	89 1d e8 e8 02 c0    	mov    DWORD PTR ds:0xc002e8e8,ebx
c000fd6f:	e8 ac 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd74:	c7 04 24 ab a3 02 c0 	mov    DWORD PTR [esp],0xc002a3ab
c000fd7b:	e8 87 32 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000fd80:	e8 00 21 00 00       	call   c0011e85 <Virt::swappingSetup()>
c000fd85:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd8c:	e8 6b fb ff ff       	call   c000f8fc <malloc>
c000fd91:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd94:	89 c6                	mov    esi,eax
c000fd96:	e8 5b ea ff ff       	call   c000e7f6 <Computer::Computer()>
c000fd9b:	58                   	pop    eax
c000fd9c:	89 35 68 e7 02 c0    	mov    DWORD PTR ds:0xc002e768,esi
c000fda2:	5a                   	pop    edx
c000fda3:	56                   	push   esi
c000fda4:	68 c8 a3 02 c0       	push   0xc002a3c8
c000fda9:	e8 59 32 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000fdae:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c000fdb3:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdb5:	6a 00                	push   0x0
c000fdb7:	6a 00                	push   0x0
c000fdb9:	6a 00                	push   0x0
c000fdbb:	50                   	push   eax
c000fdbc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fdbf:	83 c4 14             	add    esp,0x14
c000fdc2:	53                   	push   ebx
c000fdc3:	e8 ea 24 00 00       	call   c00122b2 <VAS::~VAS()>
c000fdc8:	c7 04 24 db a3 02 c0 	mov    DWORD PTR [esp],0xc002a3db
c000fdcf:	e8 e5 a8 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c000fdd4:	83 c4 20             	add    esp,0x20
c000fdd7:	5b                   	pop    ebx
c000fdd8:	5e                   	pop    esi
c000fdd9:	5f                   	pop    edi
c000fdda:	c3                   	ret    

c000fddb <Phys::allocateDMA(unsigned long)>:
c000fddb:	55                   	push   ebp
c000fddc:	31 d2                	xor    edx,edx
c000fdde:	57                   	push   edi
c000fddf:	31 ed                	xor    ebp,ebp
c000fde1:	56                   	push   esi
c000fde2:	31 c9                	xor    ecx,ecx
c000fde4:	53                   	push   ebx
c000fde5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdef:	31 c0                	xor    eax,eax
c000fdf1:	c1 ee 0c             	shr    esi,0xc
c000fdf4:	eb 17                	jmp    c000fe0d <Phys::allocateDMA(unsigned long)+0x32>
c000fdf6:	85 c9                	test   ecx,ecx
c000fdf8:	75 04                	jne    c000fdfe <Phys::allocateDMA(unsigned long)+0x23>
c000fdfa:	89 d5                	mov    ebp,edx
c000fdfc:	89 d0                	mov    eax,edx
c000fdfe:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fe01:	39 de                	cmp    esi,ebx
c000fe03:	74 20                	je     c000fe25 <Phys::allocateDMA(unsigned long)+0x4a>
c000fe05:	42                   	inc    edx
c000fe06:	89 d9                	mov    ecx,ebx
c000fe08:	83 fa 2f             	cmp    edx,0x2f
c000fe0b:	7f 11                	jg     c000fe1e <Phys::allocateDMA(unsigned long)+0x43>
c000fe0d:	80 ba c0 e7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1840],0x0
c000fe14:	74 e0                	je     c000fdf6 <Phys::allocateDMA(unsigned long)+0x1b>
c000fe16:	31 c9                	xor    ecx,ecx
c000fe18:	42                   	inc    edx
c000fe19:	83 fa 2f             	cmp    edx,0x2f
c000fe1c:	7e ef                	jle    c000fe0d <Phys::allocateDMA(unsigned long)+0x32>
c000fe1e:	5b                   	pop    ebx
c000fe1f:	31 c0                	xor    eax,eax
c000fe21:	5e                   	pop    esi
c000fe22:	5f                   	pop    edi
c000fe23:	5d                   	pop    ebp
c000fe24:	c3                   	ret    
c000fe25:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe28:	89 d7                	mov    edi,edx
c000fe2a:	4f                   	dec    edi
c000fe2b:	79 03                	jns    c000fe30 <Phys::allocateDMA(unsigned long)+0x55>
c000fe2d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe30:	c1 ff 04             	sar    edi,0x4
c000fe33:	89 c2                	mov    edx,eax
c000fe35:	c1 fa 04             	sar    edx,0x4
c000fe38:	39 fa                	cmp    edx,edi
c000fe3a:	75 2f                	jne    c000fe6b <Phys::allocateDMA(unsigned long)+0x90>
c000fe3c:	85 db                	test   ebx,ebx
c000fe3e:	74 1a                	je     c000fe5a <Phys::allocateDMA(unsigned long)+0x7f>
c000fe40:	be c0 e7 02 c0       	mov    esi,0xc002e7c0
c000fe45:	8d 90 c0 e7 02 c0    	lea    edx,[eax-0x3ffd1840]
c000fe4b:	f7 d6                	not    esi
c000fe4d:	29 c6                	sub    esi,eax
c000fe4f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe52:	42                   	inc    edx
c000fe53:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe56:	39 d9                	cmp    ecx,ebx
c000fe58:	7f f5                	jg     c000fe4f <Phys::allocateDMA(unsigned long)+0x74>
c000fe5a:	85 ff                	test   edi,edi
c000fe5c:	74 13                	je     c000fe71 <Phys::allocateDMA(unsigned long)+0x96>
c000fe5e:	5b                   	pop    ebx
c000fe5f:	05 50 20 0c 00       	add    eax,0xc2050
c000fe64:	5e                   	pop    esi
c000fe65:	c1 e0 0c             	shl    eax,0xc
c000fe68:	5f                   	pop    edi
c000fe69:	5d                   	pop    ebp
c000fe6a:	c3                   	ret    
c000fe6b:	89 ea                	mov    edx,ebp
c000fe6d:	31 c9                	xor    ecx,ecx
c000fe6f:	eb a7                	jmp    c000fe18 <Phys::allocateDMA(unsigned long)+0x3d>
c000fe71:	5b                   	pop    ebx
c000fe72:	c1 e0 0c             	shl    eax,0xc
c000fe75:	5e                   	pop    esi
c000fe76:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe7b:	5f                   	pop    edi
c000fe7c:	5d                   	pop    ebp
c000fe7d:	c3                   	ret    

c000fe7e <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe86:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe8c:	c1 e9 0c             	shr    ecx,0xc
c000fe8f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe94:	76 25                	jbe    c000febb <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe96:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe9b:	c1 e8 0c             	shr    eax,0xc
c000fe9e:	8d 50 10             	lea    edx,[eax+0x10]
c000fea1:	85 c9                	test   ecx,ecx
c000fea3:	74 15                	je     c000feba <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fea5:	8d 82 c0 e7 02 c0    	lea    eax,[edx-0x3ffd1840]
c000feab:	8d 94 11 c0 e7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1840]
c000feb2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000feb5:	40                   	inc    eax
c000feb6:	39 d0                	cmp    eax,edx
c000feb8:	75 f8                	jne    c000feb2 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000feba:	c3                   	ret    
c000febb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fec1:	c1 ea 0c             	shr    edx,0xc
c000fec4:	eb db                	jmp    c000fea1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fec6 <Phys::setPageState(unsigned long, bool)>:
c000fec6:	56                   	push   esi
c000fec7:	ba 01 00 00 00       	mov    edx,0x1
c000fecc:	53                   	push   ebx
c000fecd:	8b 35 90 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d690
c000fed3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fed7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fedb:	89 c8                	mov    eax,ecx
c000fedd:	83 e1 07             	and    ecx,0x7
c000fee0:	c1 e8 03             	shr    eax,0x3
c000fee3:	d3 e3                	shl    ebx,cl
c000fee5:	01 c6                	add    esi,eax
c000fee7:	d3 e2                	shl    edx,cl
c000fee9:	f7 d2                	not    edx
c000feeb:	20 16                	and    BYTE PTR [esi],dl
c000feed:	03 05 90 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d690
c000fef3:	08 18                	or     BYTE PTR [eax],bl
c000fef5:	5b                   	pop    ebx
c000fef6:	5e                   	pop    esi
c000fef7:	c3                   	ret    

c000fef8 <Phys::getPageState(unsigned long)>:
c000fef8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fefc:	8b 15 90 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d690
c000ff02:	89 c8                	mov    eax,ecx
c000ff04:	83 e1 07             	and    ecx,0x7
c000ff07:	c1 e8 03             	shr    eax,0x3
c000ff0a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ff0e:	d3 f8                	sar    eax,cl
c000ff10:	83 e0 01             	and    eax,0x1
c000ff13:	c3                   	ret    

c000ff14 <Phys::freePage(unsigned long)>:
c000ff14:	53                   	push   ebx
c000ff15:	83 ec 08             	sub    esp,0x8
c000ff18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff1c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff22:	76 57                	jbe    c000ff7b <Phys::freePage(unsigned long)+0x67>
c000ff24:	c1 eb 0c             	shr    ebx,0xc
c000ff27:	53                   	push   ebx
c000ff28:	e8 cb ff ff ff       	call   c000fef8 <Phys::getPageState(unsigned long)>
c000ff2d:	5a                   	pop    edx
c000ff2e:	84 c0                	test   al,al
c000ff30:	74 5b                	je     c000ff8d <Phys::freePage(unsigned long)+0x79>
c000ff32:	a1 ac e7 02 c0       	mov    eax,ds:0xc002e7ac
c000ff37:	48                   	dec    eax
c000ff38:	a3 ac e7 02 c0       	mov    ds:0xc002e7ac,eax
c000ff3d:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff40:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff43:	c1 e0 02             	shl    eax,0x2
c000ff46:	99                   	cdq    
c000ff47:	f7 3d b0 e7 02 c0    	idiv   DWORD PTR ds:0xc002e7b0
c000ff4d:	39 05 a8 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a8,eax
c000ff53:	75 13                	jne    c000ff68 <Phys::freePage(unsigned long)+0x54>
c000ff55:	83 ec 08             	sub    esp,0x8
c000ff58:	6a 00                	push   0x0
c000ff5a:	53                   	push   ebx
c000ff5b:	e8 66 ff ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	83 c4 08             	add    esp,0x8
c000ff66:	5b                   	pop    ebx
c000ff67:	c3                   	ret    
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	a3 a8 e7 02 c0       	mov    ds:0xc002e7a8,eax
c000ff70:	50                   	push   eax
c000ff71:	e8 c2 0a 00 00       	call   c0010a38 <VgaText::updateRAMUsageDisplay(int)>
c000ff76:	83 c4 10             	add    esp,0x10
c000ff79:	eb da                	jmp    c000ff55 <Phys::freePage(unsigned long)+0x41>
c000ff7b:	68 00 10 00 00       	push   0x1000
c000ff80:	53                   	push   ebx
c000ff81:	e8 f8 fe ff ff       	call   c000fe7e <Phys::freeDMA(unsigned long, unsigned long)>
c000ff86:	59                   	pop    ecx
c000ff87:	5b                   	pop    ebx
c000ff88:	83 c4 08             	add    esp,0x8
c000ff8b:	5b                   	pop    ebx
c000ff8c:	c3                   	ret    
c000ff8d:	c7 44 24 10 f6 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3f6
c000ff95:	83 c4 08             	add    esp,0x8
c000ff98:	5b                   	pop    ebx
c000ff99:	e9 1b a7 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>

c000ff9e <Phys::allocatePage()>:
c000ff9e:	56                   	push   esi
c000ff9f:	53                   	push   ebx
c000ffa0:	83 ec 14             	sub    esp,0x14
c000ffa3:	8b 35 a0 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e7a0
c000ffa9:	89 f3                	mov    ebx,esi
c000ffab:	eb 0a                	jmp    c000ffb7 <Phys::allocatePage()+0x19>
c000ffad:	89 1d a0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a0,ebx
c000ffb3:	39 de                	cmp    esi,ebx
c000ffb5:	74 24                	je     c000ffdb <Phys::allocatePage()+0x3d>
c000ffb7:	53                   	push   ebx
c000ffb8:	e8 3b ff ff ff       	call   c000fef8 <Phys::getPageState(unsigned long)>
c000ffbd:	5a                   	pop    edx
c000ffbe:	84 c0                	test   al,al
c000ffc0:	74 5a                	je     c001001c <Phys::allocatePage()+0x7e>
c000ffc2:	43                   	inc    ebx
c000ffc3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffc9:	75 e2                	jne    c000ffad <Phys::allocatePage()+0xf>
c000ffcb:	31 db                	xor    ebx,ebx
c000ffcd:	c7 05 a0 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7a0,0x0
c000ffd7:	39 de                	cmp    esi,ebx
c000ffd9:	75 dc                	jne    c000ffb7 <Phys::allocatePage()+0x19>
c000ffdb:	83 ec 0c             	sub    esp,0xc
c000ffde:	68 4b a4 02 c0       	push   0xc002a44b
c000ffe3:	e8 1f 30 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c000ffe8:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ffef:	e8 e7 fd ff ff       	call   c000fddb <Phys::allocateDMA(unsigned long)>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	85 c0                	test   eax,eax
c000fff9:	75 5b                	jne    c0010056 <Phys::allocatePage()+0xb8>
c000fffb:	83 ec 0c             	sub    esp,0xc
c000fffe:	68 5c a4 02 c0       	push   0xc002a45c
c0010003:	e8 b1 a6 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0010008:	83 c4 10             	add    esp,0x10
c001000b:	8b 1d a0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7a0
c0010011:	53                   	push   ebx
c0010012:	e8 e1 fe ff ff       	call   c000fef8 <Phys::getPageState(unsigned long)>
c0010017:	5a                   	pop    edx
c0010018:	84 c0                	test   al,al
c001001a:	75 a6                	jne    c000ffc2 <Phys::allocatePage()+0x24>
c001001c:	6a 01                	push   0x1
c001001e:	53                   	push   ebx
c001001f:	e8 a2 fe ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c0010024:	a1 ac e7 02 c0       	mov    eax,ds:0xc002e7ac
c0010029:	40                   	inc    eax
c001002a:	a3 ac e7 02 c0       	mov    ds:0xc002e7ac,eax
c001002f:	8d 04 80             	lea    eax,[eax+eax*4]
c0010032:	8d 04 80             	lea    eax,[eax+eax*4]
c0010035:	c1 e0 02             	shl    eax,0x2
c0010038:	99                   	cdq    
c0010039:	f7 3d b0 e7 02 c0    	idiv   DWORD PTR ds:0xc002e7b0
c001003f:	5a                   	pop    edx
c0010040:	39 05 a8 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a8,eax
c0010046:	59                   	pop    ecx
c0010047:	75 13                	jne    c001005c <Phys::allocatePage()+0xbe>
c0010049:	83 f8 46             	cmp    eax,0x46
c001004c:	7f 2c                	jg     c001007a <Phys::allocatePage()+0xdc>
c001004e:	a1 a0 e7 02 c0       	mov    eax,ds:0xc002e7a0
c0010053:	c1 e0 0c             	shl    eax,0xc
c0010056:	83 c4 14             	add    esp,0x14
c0010059:	5b                   	pop    ebx
c001005a:	5e                   	pop    esi
c001005b:	c3                   	ret    
c001005c:	83 ec 0c             	sub    esp,0xc
c001005f:	a3 a8 e7 02 c0       	mov    ds:0xc002e7a8,eax
c0010064:	50                   	push   eax
c0010065:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010069:	e8 ca 09 00 00       	call   c0010a38 <VgaText::updateRAMUsageDisplay(int)>
c001006e:	83 c4 10             	add    esp,0x10
c0010071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010075:	83 f8 46             	cmp    eax,0x46
c0010078:	7e d4                	jle    c001004e <Phys::allocatePage()+0xb0>
c001007a:	e8 5f de 00 00       	call   c001dede <lockScheduler()>
c001007f:	83 ec 0c             	sub    esp,0xc
c0010082:	68 0c a4 02 c0       	push   0xc002a40c
c0010087:	e8 7b 2f 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001008c:	a1 88 1c 03 c0       	mov    eax,ds:0xc0031c88
c0010091:	83 c4 10             	add    esp,0x10
c0010094:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010097:	83 f8 02             	cmp    eax,0x2
c001009a:	74 07                	je     c00100a3 <Phys::allocatePage()+0x105>
c001009c:	e8 3f de 00 00       	call   c001dee0 <unlockScheduler()>
c00100a1:	eb ab                	jmp    c001004e <Phys::allocatePage()+0xb0>
c00100a3:	83 ec 0c             	sub    esp,0xc
c00100a6:	68 1a a4 02 c0       	push   0xc002a41a
c00100ab:	e8 57 2f 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00100b0:	58                   	pop    eax
c00100b1:	ff 35 88 1c 03 c0    	push   DWORD PTR ds:0xc0031c88
c00100b7:	e8 3a e4 00 00       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c00100bc:	c7 04 24 33 a4 02 c0 	mov    DWORD PTR [esp],0xc002a433
c00100c3:	e8 3f 2f 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00100c8:	83 c4 10             	add    esp,0x10
c00100cb:	eb cf                	jmp    c001009c <Phys::allocatePage()+0xfe>

c00100cd <Phys::allocateContiguousPages(int)>:
c00100cd:	57                   	push   edi
c00100ce:	56                   	push   esi
c00100cf:	53                   	push   ebx
c00100d0:	31 db                	xor    ebx,ebx
c00100d2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00100d6:	e8 03 de 00 00       	call   c001dede <lockScheduler()>
c00100db:	85 db                	test   ebx,ebx
c00100dd:	75 11                	jne    c00100f0 <Phys::allocateContiguousPages(int)+0x23>
c00100df:	e8 ba fe ff ff       	call   c000ff9e <Phys::allocatePage()>
c00100e4:	83 ff 01             	cmp    edi,0x1
c00100e7:	89 c6                	mov    esi,eax
c00100e9:	74 21                	je     c001010c <Phys::allocateContiguousPages(int)+0x3f>
c00100eb:	bb 01 00 00 00       	mov    ebx,0x1
c00100f0:	e8 a9 fe ff ff       	call   c000ff9e <Phys::allocatePage()>
c00100f5:	89 da                	mov    edx,ebx
c00100f7:	c1 e2 0c             	shl    edx,0xc
c00100fa:	01 f2                	add    edx,esi
c00100fc:	39 c2                	cmp    edx,eax
c00100fe:	74 17                	je     c0010117 <Phys::allocateContiguousPages(int)+0x4a>
c0010100:	bb 01 00 00 00       	mov    ebx,0x1
c0010105:	89 c6                	mov    esi,eax
c0010107:	83 ff 01             	cmp    edi,0x1
c001010a:	75 e4                	jne    c00100f0 <Phys::allocateContiguousPages(int)+0x23>
c001010c:	e8 cf dd 00 00       	call   c001dee0 <unlockScheduler()>
c0010111:	89 f0                	mov    eax,esi
c0010113:	5b                   	pop    ebx
c0010114:	5e                   	pop    esi
c0010115:	5f                   	pop    edi
c0010116:	c3                   	ret    
c0010117:	43                   	inc    ebx
c0010118:	39 fb                	cmp    ebx,edi
c001011a:	75 bf                	jne    c00100db <Phys::allocateContiguousPages(int)+0xe>
c001011c:	e8 bf dd 00 00       	call   c001dee0 <unlockScheduler()>
c0010121:	89 f0                	mov    eax,esi
c0010123:	5b                   	pop    ebx
c0010124:	5e                   	pop    esi
c0010125:	5f                   	pop    edi
c0010126:	c3                   	ret    

c0010127 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010127:	56                   	push   esi
c0010128:	53                   	push   ebx
c0010129:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001012d:	39 1d a4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a4,ebx
c0010133:	73 06                	jae    c001013b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010135:	89 1d a4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a4,ebx
c001013b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001013f:	c1 eb 0c             	shr    ebx,0xc
c0010142:	c1 e8 0c             	shr    eax,0xc
c0010145:	39 d8                	cmp    eax,ebx
c0010147:	73 13                	jae    c001015c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010149:	6a 00                	push   0x0
c001014b:	8d 70 01             	lea    esi,[eax+0x1]
c001014e:	50                   	push   eax
c001014f:	e8 72 fd ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c0010154:	5a                   	pop    edx
c0010155:	89 f0                	mov    eax,esi
c0010157:	59                   	pop    ecx
c0010158:	39 f3                	cmp    ebx,esi
c001015a:	75 ed                	jne    c0010149 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001015c:	5b                   	pop    ebx
c001015d:	5e                   	pop    esi
c001015e:	c3                   	ret    

c001015f <Phys::physicalMemorySetup(unsigned int)>:
c001015f:	55                   	push   ebp
c0010160:	57                   	push   edi
c0010161:	56                   	push   esi
c0010162:	53                   	push   ebx
c0010163:	31 db                	xor    ebx,ebx
c0010165:	83 ec 40             	sub    esp,0x40
c0010168:	6a 30                	push   0x30
c001016a:	6a 00                	push   0x0
c001016c:	68 c0 e7 02 c0       	push   0xc002e7c0
c0010171:	e8 02 06 ff ff       	call   c0000778 <memset>
c0010176:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001017a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001017f:	05 00 10 00 00       	add    eax,0x1000
c0010184:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010188:	83 c4 10             	add    esp,0x10
c001018b:	83 ec 08             	sub    esp,0x8
c001018e:	6a 01                	push   0x1
c0010190:	53                   	push   ebx
c0010191:	43                   	inc    ebx
c0010192:	e8 2f fd ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c0010197:	83 c4 10             	add    esp,0x10
c001019a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101a0:	75 e9                	jne    c001018b <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00101a2:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00101a9:	66 85 c0             	test   ax,ax
c00101ac:	0f 84 8e 01 00 00    	je     c0010340 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00101b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00101b6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00101be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00101c2:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00101c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00101cb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00101d3:	eb 15                	jmp    c00101ea <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00101d5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00101d9:	83 c3 18             	add    ebx,0x18
c00101dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00101e4:	0f 84 66 01 00 00    	je     c0010350 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101ea:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00101ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101f0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00101f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00101fb:	8b 33                	mov    esi,DWORD PTR [ebx]
c00101fd:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010200:	01 f0                	add    eax,esi
c0010202:	55                   	push   ebp
c0010203:	11 fa                	adc    edx,edi
c0010205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010209:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001020d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010211:	56                   	push   esi
c0010212:	68 94 a4 02 c0       	push   0xc002a494
c0010217:	e8 eb 2d 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001021c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010220:	83 c4 10             	add    esp,0x10
c0010223:	09 f8                	or     eax,edi
c0010225:	0f 85 25 01 00 00    	jne    c0010350 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001022b:	4d                   	dec    ebp
c001022c:	75 a7                	jne    c00101d5 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022e:	ba 00 00 08 00       	mov    edx,0x80000
c0010233:	89 c1                	mov    ecx,eax
c0010235:	39 f2                	cmp    edx,esi
c0010237:	19 f9                	sbb    ecx,edi
c0010239:	0f 82 a7 00 00 00    	jb     c00102e6 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001023f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010243:	89 c1                	mov    ecx,eax
c0010245:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010249:	0f 83 97 00 00 00    	jae    c00102e6 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001024f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010254:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010258:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001025c:	39 fa                	cmp    edx,edi
c001025e:	19 e8                	sbb    eax,ebp
c0010260:	0f 82 14 01 00 00    	jb     c001037a <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010266:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001026a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001026e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010274:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010279:	83 d5 ff             	adc    ebp,0xffffffff
c001027c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010280:	31 c0                	xor    eax,eax
c0010282:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010286:	39 fa                	cmp    edx,edi
c0010288:	89 c1                	mov    ecx,eax
c001028a:	19 e9                	sbb    ecx,ebp
c001028c:	0f 83 43 ff ff ff    	jae    c00101d5 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010292:	be 00 00 08 00       	mov    esi,0x80000
c0010297:	50                   	push   eax
c0010298:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001029c:	57                   	push   edi
c001029d:	56                   	push   esi
c001029e:	68 b8 a4 02 c0       	push   0xc002a4b8
c00102a3:	e8 5f 2d 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00102a8:	5a                   	pop    edx
c00102a9:	59                   	pop    ecx
c00102aa:	57                   	push   edi
c00102ab:	56                   	push   esi
c00102ac:	e8 76 fe ff ff       	call   c0010127 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00102b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00102b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102b9:	83 c4 0c             	add    esp,0xc
c00102bc:	0f ac d0 0c          	shrd   eax,edx,0xc
c00102c0:	03 05 b0 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e7b0
c00102c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00102cd:	a3 b0 e7 02 c0       	mov    ds:0xc002e7b0,eax
c00102d2:	52                   	push   edx
c00102d3:	50                   	push   eax
c00102d4:	68 78 a4 02 c0       	push   0xc002a478
c00102d9:	e8 29 2d 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	e9 ef fe ff ff       	jmp    c00101d5 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102e6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00102ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102f2:	39 ea                	cmp    edx,ebp
c00102f4:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00102f8:	0f 82 d7 fe ff ff    	jb     c00101d5 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102fe:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010303:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010307:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001030b:	0f 83 c4 fe ff ff    	jae    c00101d5 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010311:	39 ee                	cmp    esi,ebp
c0010313:	89 f8                	mov    eax,edi
c0010315:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010319:	0f 83 78 ff ff ff    	jae    c0010297 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001031f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010323:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010327:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001032b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001032f:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010333:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010337:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001033b:	e9 57 ff ff ff       	jmp    c0010297 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010340:	83 ec 0c             	sub    esp,0xc
c0010343:	68 6a a4 02 c0       	push   0xc002a46a
c0010348:	e8 6c a3 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c001034d:	83 c4 10             	add    esp,0x10
c0010350:	bb 40 01 00 00       	mov    ebx,0x140
c0010355:	83 ec 08             	sub    esp,0x8
c0010358:	6a 00                	push   0x0
c001035a:	53                   	push   ebx
c001035b:	43                   	inc    ebx
c001035c:	e8 65 fb ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c0010361:	ff 05 b0 e7 02 c0    	inc    DWORD PTR ds:0xc002e7b0
c0010367:	83 c4 10             	add    esp,0x10
c001036a:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010370:	75 e3                	jne    c0010355 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010372:	83 c4 3c             	add    esp,0x3c
c0010375:	5b                   	pop    ebx
c0010376:	5e                   	pop    esi
c0010377:	5f                   	pop    edi
c0010378:	5d                   	pop    ebp
c0010379:	c3                   	ret    
c001037a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010382:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001038a:	e9 d7 fe ff ff       	jmp    c0010266 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001038f:	90                   	nop

c0010390 <Pipe::isAtty()>:
c0010390:	31 c0                	xor    eax,eax
c0010392:	c3                   	ret    
c0010393:	90                   	nop

c0010394 <Pipe::~Pipe()>:
c0010394:	83 ec 0c             	sub    esp,0xc
c0010397:	ba 24 a5 02 c0       	mov    edx,0xc002a524
c001039c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a0:	89 10                	mov    DWORD PTR [eax],edx
c00103a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a6:	83 ec 0c             	sub    esp,0xc
c00103a9:	50                   	push   eax
c00103aa:	e8 37 16 00 00       	call   c00119e6 <UnixFile::~UnixFile()>
c00103af:	83 c4 10             	add    esp,0x10
c00103b2:	90                   	nop
c00103b3:	83 c4 0c             	add    esp,0xc
c00103b6:	c3                   	ret    
c00103b7:	90                   	nop

c00103b8 <Pipe::~Pipe()>:
c00103b8:	83 ec 0c             	sub    esp,0xc
c00103bb:	83 ec 0c             	sub    esp,0xc
c00103be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c2:	e8 cd ff ff ff       	call   c0010394 <Pipe::~Pipe()>
c00103c7:	83 c4 10             	add    esp,0x10
c00103ca:	83 ec 08             	sub    esp,0x8
c00103cd:	6a 20                	push   0x20
c00103cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d3:	e8 4f 2b 00 00       	call   c0012f27 <operator delete(void*, unsigned long)>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	83 c4 0c             	add    esp,0xc
c00103de:	c3                   	ret    
c00103df:	90                   	nop

c00103e0 <Pipe::read(unsigned long long, void*, int*)>:
c00103e0:	55                   	push   ebp
c00103e1:	57                   	push   edi
c00103e2:	56                   	push   esi
c00103e3:	53                   	push   ebx
c00103e4:	83 ec 1c             	sub    esp,0x1c
c00103e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00103eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00103ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103f3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00103f6:	89 c8                	mov    eax,ecx
c00103f8:	99                   	cdq    
c00103f9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00103fd:	74 19                	je     c0010418 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00103ff:	39 f9                	cmp    ecx,edi
c0010401:	89 d1                	mov    ecx,edx
c0010403:	19 f1                	sbb    ecx,esi
c0010405:	73 11                	jae    c0010418 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010407:	e8 d2 da 00 00       	call   c001dede <lockScheduler()>
c001040c:	e8 09 de 00 00       	call   c001e21a <schedule()>
c0010411:	e8 ca da 00 00       	call   c001dee0 <unlockScheduler()>
c0010416:	eb db                	jmp    c00103f3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010418:	39 f8                	cmp    eax,edi
c001041a:	89 d1                	mov    ecx,edx
c001041c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010420:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010424:	19 f1                	sbb    ecx,esi
c0010426:	73 08                	jae    c0010430 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010428:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001042c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010430:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010433:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010436:	29 c6                	sub    esi,eax
c0010438:	89 f1                	mov    ecx,esi
c001043a:	c1 f9 1f             	sar    ecx,0x1f
c001043d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010441:	89 ca                	mov    edx,ecx
c0010443:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010447:	19 d1                	sbb    ecx,edx
c0010449:	73 04                	jae    c001044f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001044b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001044f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010453:	89 fd                	mov    ebp,edi
c0010455:	29 f5                	sub    ebp,esi
c0010457:	85 f6                	test   esi,esi
c0010459:	74 12                	je     c001046d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001045b:	52                   	push   edx
c001045c:	56                   	push   esi
c001045d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010460:	50                   	push   eax
c0010461:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010465:	e8 da 02 ff ff       	call   c0000744 <memcpy>
c001046a:	83 c4 10             	add    esp,0x10
c001046d:	85 ed                	test   ebp,ebp
c001046f:	74 12                	je     c0010483 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010471:	50                   	push   eax
c0010472:	55                   	push   ebp
c0010473:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010476:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001047a:	56                   	push   esi
c001047b:	e8 c4 02 ff ff       	call   c0000744 <memcpy>
c0010480:	83 c4 10             	add    esp,0x10
c0010483:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010486:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010489:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001048c:	99                   	cdq    
c001048d:	89 f7                	mov    edi,esi
c001048f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010493:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010497:	c1 ff 1f             	sar    edi,0x1f
c001049a:	57                   	push   edi
c001049b:	56                   	push   esi
c001049c:	52                   	push   edx
c001049d:	50                   	push   eax
c001049e:	e8 19 67 01 00       	call   c0026bbc <__umoddi3>
c00104a3:	83 c4 10             	add    esp,0x10
c00104a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00104a9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ae:	75 10                	jne    c00104c0 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00104b0:	83 ec 0c             	sub    esp,0xc
c00104b3:	68 e1 a4 02 c0       	push   0xc002a4e1
c00104b8:	e8 fc a1 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c00104bd:	83 c4 10             	add    esp,0x10
c00104c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c8:	89 10                	mov    DWORD PTR [eax],edx
c00104ca:	83 c4 1c             	add    esp,0x1c
c00104cd:	31 c0                	xor    eax,eax
c00104cf:	5b                   	pop    ebx
c00104d0:	5e                   	pop    esi
c00104d1:	5f                   	pop    edi
c00104d2:	5d                   	pop    ebp
c00104d3:	c3                   	ret    

c00104d4 <Pipe::write(unsigned long long, void*, int*)>:
c00104d4:	55                   	push   ebp
c00104d5:	57                   	push   edi
c00104d6:	56                   	push   esi
c00104d7:	53                   	push   ebx
c00104d8:	83 ec 1c             	sub    esp,0x1c
c00104db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00104df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00104e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00104ea:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00104ed:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00104f0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104f4:	89 de                	mov    esi,ebx
c00104f6:	89 df                	mov    edi,ebx
c00104f8:	c1 ff 1f             	sar    edi,0x1f
c00104fb:	01 c6                	add    esi,eax
c00104fd:	89 c8                	mov    eax,ecx
c00104ff:	11 d7                	adc    edi,edx
c0010501:	99                   	cdq    
c0010502:	39 f1                	cmp    ecx,esi
c0010504:	89 d0                	mov    eax,edx
c0010506:	19 f8                	sbb    eax,edi
c0010508:	b8 01 00 00 00       	mov    eax,0x1
c001050d:	0f 82 80 00 00 00    	jb     c0010593 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010513:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010516:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010519:	01 d8                	add    eax,ebx
c001051b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001051f:	99                   	cdq    
c0010520:	f7 f9                	idiv   ecx
c0010522:	29 d1                	sub    ecx,edx
c0010524:	89 d7                	mov    edi,edx
c0010526:	89 c8                	mov    eax,ecx
c0010528:	99                   	cdq    
c0010529:	39 ce                	cmp    esi,ecx
c001052b:	19 d3                	sbb    ebx,edx
c001052d:	bb 00 00 00 00       	mov    ebx,0x0
c0010532:	72 04                	jb     c0010538 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010534:	89 f3                	mov    ebx,esi
c0010536:	29 cb                	sub    ebx,ecx
c0010538:	89 f1                	mov    ecx,esi
c001053a:	29 d9                	sub    ecx,ebx
c001053c:	74 1a                	je     c0010558 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001053e:	52                   	push   edx
c001053f:	51                   	push   ecx
c0010540:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010544:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010548:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001054b:	57                   	push   edi
c001054c:	e8 f3 01 ff ff       	call   c0000744 <memcpy>
c0010551:	83 c4 10             	add    esp,0x10
c0010554:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010558:	85 db                	test   ebx,ebx
c001055a:	74 12                	je     c001056e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001055c:	50                   	push   eax
c001055d:	53                   	push   ebx
c001055e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010562:	51                   	push   ecx
c0010563:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010566:	e8 d9 01 ff ff       	call   c0000744 <memcpy>
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010571:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010576:	75 10                	jne    c0010588 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	68 fd a4 02 c0       	push   0xc002a4fd
c0010580:	e8 34 a1 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001058c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001058f:	89 38                	mov    DWORD PTR [eax],edi
c0010591:	31 c0                	xor    eax,eax
c0010593:	83 c4 1c             	add    esp,0x1c
c0010596:	5b                   	pop    ebx
c0010597:	5e                   	pop    esi
c0010598:	5f                   	pop    edi
c0010599:	5d                   	pop    ebp
c001059a:	c3                   	ret    
c001059b:	90                   	nop

c001059c <Pipe::Pipe(int)>:
c001059c:	83 ec 0c             	sub    esp,0xc
c001059f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a3:	83 ec 08             	sub    esp,0x8
c00105a6:	6a 00                	push   0x0
c00105a8:	50                   	push   eax
c00105a9:	e8 56 12 00 00       	call   c0011804 <UnixFile::UnixFile(int)>
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	ba 24 a5 02 c0       	mov    edx,0xc002a524
c00105b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ba:	89 10                	mov    DWORD PTR [eax],edx
c00105bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00105c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00105c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105cb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00105d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00105dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	50                   	push   eax
c00105e5:	e8 12 f3 ff ff       	call   c000f8fc <malloc>
c00105ea:	83 c4 10             	add    esp,0x10
c00105ed:	89 c2                	mov    edx,eax
c00105ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fa:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105fe:	90                   	nop
c00105ff:	83 c4 0c             	add    esp,0xc
c0010602:	c3                   	ret    
c0010603:	90                   	nop

c0010604 <VgaText::isAtty()>:
c0010604:	b0 01                	mov    al,0x1
c0010606:	c3                   	ret    
c0010607:	90                   	nop

c0010608 <VgaText::~VgaText()>:
c0010608:	83 ec 0c             	sub    esp,0xc
c001060b:	ba e0 a5 02 c0       	mov    edx,0xc002a5e0
c0010610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010614:	89 10                	mov    DWORD PTR [eax],edx
c0010616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	50                   	push   eax
c001061e:	e8 c3 13 00 00       	call   c00119e6 <UnixFile::~UnixFile()>
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	90                   	nop
c0010627:	83 c4 0c             	add    esp,0xc
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::~VgaText()>:
c001062c:	83 ec 0c             	sub    esp,0xc
c001062f:	83 ec 0c             	sub    esp,0xc
c0010632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010636:	e8 cd ff ff ff       	call   c0010608 <VgaText::~VgaText()>
c001063b:	83 c4 10             	add    esp,0x10
c001063e:	83 ec 08             	sub    esp,0x8
c0010641:	68 60 12 00 00       	push   0x1260
c0010646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001064a:	e8 d8 28 00 00       	call   c0012f27 <operator delete(void*, unsigned long)>
c001064f:	83 c4 10             	add    esp,0x10
c0010652:	83 c4 0c             	add    esp,0xc
c0010655:	c3                   	ret    

c0010656 <VgaText::read(unsigned long long, void*, int*)>:
c0010656:	83 ec 10             	sub    esp,0x10
c0010659:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001065d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010665:	e8 50 5d 00 00       	call   c00163ba <readKeyboard(VgaText*, char*, unsigned long)>
c001066a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001066e:	89 02                	mov    DWORD PTR [edx],eax
c0010670:	31 c0                	xor    eax,eax
c0010672:	83 c4 1c             	add    esp,0x1c
c0010675:	c3                   	ret    

c0010676 <setTerminalScrollLock(bool)>:
c0010676:	c3                   	ret    

c0010677 <addToTerminalCycle(VgaText*)>:
c0010677:	8b 15 40 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e840
c001067d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010681:	85 d2                	test   edx,edx
c0010683:	75 0c                	jne    c0010691 <addToTerminalCycle(VgaText*)+0x1a>
c0010685:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001068b:	a3 40 e8 02 c0       	mov    ds:0xc002e840,eax
c0010690:	c3                   	ret    
c0010691:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010697:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001069d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00106a3:	c3                   	ret    

c00106a4 <installVgaTextImplementation()>:
c00106a4:	83 ec 10             	sub    esp,0x10
c00106a7:	6a 20                	push   0x20
c00106a9:	6a 00                	push   0x0
c00106ab:	68 20 e8 02 c0       	push   0xc002e820
c00106b0:	e8 c3 00 ff ff       	call   c0000778 <memset>
c00106b5:	83 c4 1c             	add    esp,0x1c
c00106b8:	c3                   	ret    

c00106b9 <scrollTerminalScrollLock(int)>:
c00106b9:	c3                   	ret    

c00106ba <VgaText::load()>:
c00106ba:	53                   	push   ebx
c00106bb:	31 c0                	xor    eax,eax
c00106bd:	83 ec 58             	sub    esp,0x58
c00106c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00106c4:	89 e2                	mov    edx,esp
c00106c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00106ca:	40                   	inc    eax
c00106cb:	83 f8 50             	cmp    eax,0x50
c00106ce:	75 f6                	jne    c00106c6 <VgaText::load()+0xc>
c00106d0:	31 c0                	xor    eax,eax
c00106d2:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00106d9:	84 c9                	test   cl,cl
c00106db:	74 06                	je     c00106e3 <VgaText::load()+0x29>
c00106dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00106e0:	40                   	inc    eax
c00106e1:	eb ef                	jmp    c00106d2 <VgaText::load()+0x18>
c00106e3:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00106e9:	85 c0                	test   eax,eax
c00106eb:	74 09                	je     c00106f6 <VgaText::load()+0x3c>
c00106ed:	51                   	push   ecx
c00106ee:	51                   	push   ecx
c00106ef:	52                   	push   edx
c00106f0:	53                   	push   ebx
c00106f1:	ff d0                	call   eax
c00106f3:	83 c4 10             	add    esp,0x10
c00106f6:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00106fc:	85 c0                	test   eax,eax
c00106fe:	74 09                	je     c0010709 <VgaText::load()+0x4f>
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	53                   	push   ebx
c0010704:	ff d0                	call   eax
c0010706:	83 c4 10             	add    esp,0x10
c0010709:	83 c4 58             	add    esp,0x58
c001070c:	5b                   	pop    ebx
c001070d:	c3                   	ret    

c001070e <VgaText::updateCursor()>:
c001070e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010712:	39 05 44 e8 02 c0    	cmp    DWORD PTR ds:0xc002e844,eax
c0010718:	75 0c                	jne    c0010726 <VgaText::updateCursor()+0x18>
c001071a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010720:	85 c0                	test   eax,eax
c0010722:	74 02                	je     c0010726 <VgaText::updateCursor()+0x18>
c0010724:	ff e0                	jmp    eax
c0010726:	c3                   	ret    
c0010727:	90                   	nop

c0010728 <VgaText::showCursor(bool)>:
c0010728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010730:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010736:	c3                   	ret    
c0010737:	90                   	nop

c0010738 <VgaText::disableBlink(bool)>:
c0010738:	56                   	push   esi
c0010739:	53                   	push   ebx
c001073a:	51                   	push   ecx
c001073b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001073f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010743:	39 1d 44 e8 02 c0    	cmp    DWORD PTR ds:0xc002e844,ebx
c0010749:	75 18                	jne    c0010763 <VgaText::disableBlink(bool)+0x2b>
c001074b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010751:	85 c0                	test   eax,eax
c0010753:	74 0e                	je     c0010763 <VgaText::disableBlink(bool)+0x2b>
c0010755:	89 f1                	mov    ecx,esi
c0010757:	52                   	push   edx
c0010758:	52                   	push   edx
c0010759:	0f b6 d1             	movzx  edx,cl
c001075c:	52                   	push   edx
c001075d:	53                   	push   ebx
c001075e:	ff d0                	call   eax
c0010760:	83 c4 10             	add    esp,0x10
c0010763:	89 f0                	mov    eax,esi
c0010765:	83 f0 01             	xor    eax,0x1
c0010768:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001076e:	58                   	pop    eax
c001076f:	5b                   	pop    ebx
c0010770:	5e                   	pop    esi
c0010771:	c3                   	ret    

c0010772 <VgaText::doANSI_SGR(int)>:
c0010772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001077a:	85 d2                	test   edx,edx
c001077c:	75 14                	jne    c0010792 <VgaText::doANSI_SGR(int)+0x20>
c001077e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010784:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001078a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010790:	eb 65                	jmp    c00107f7 <VgaText::doANSI_SGR(int)+0x85>
c0010792:	83 fa 07             	cmp    edx,0x7
c0010795:	75 14                	jne    c00107ab <VgaText::doANSI_SGR(int)+0x39>
c0010797:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001079d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00107a3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00107a9:	eb 4c                	jmp    c00107f7 <VgaText::doANSI_SGR(int)+0x85>
c00107ab:	83 fa 1b             	cmp    edx,0x1b
c00107ae:	74 ce                	je     c001077e <VgaText::doANSI_SGR(int)+0xc>
c00107b0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00107b3:	83 f9 07             	cmp    ecx,0x7
c00107b6:	77 09                	ja     c00107c1 <VgaText::doANSI_SGR(int)+0x4f>
c00107b8:	8b 14 8d c0 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2940]
c00107bf:	eb 20                	jmp    c00107e1 <VgaText::doANSI_SGR(int)+0x6f>
c00107c1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00107c4:	83 f9 07             	cmp    ecx,0x7
c00107c7:	77 09                	ja     c00107d2 <VgaText::doANSI_SGR(int)+0x60>
c00107c9:	8b 14 8d c0 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2940]
c00107d0:	eb 25                	jmp    c00107f7 <VgaText::doANSI_SGR(int)+0x85>
c00107d2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00107d5:	83 f9 07             	cmp    ecx,0x7
c00107d8:	77 0e                	ja     c00107e8 <VgaText::doANSI_SGR(int)+0x76>
c00107da:	8b 14 95 78 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a88]
c00107e1:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00107e7:	c3                   	ret    
c00107e8:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00107eb:	83 f9 07             	cmp    ecx,0x7
c00107ee:	77 0d                	ja     c00107fd <VgaText::doANSI_SGR(int)+0x8b>
c00107f0:	8b 14 95 50 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ab0]
c00107f7:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107fd:	c3                   	ret    

c00107fe <VgaText::setDefaultBgColour(VgaColour)>:
c00107fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010802:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010806:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001080c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010812:	c3                   	ret    
c0010813:	90                   	nop

c0010814 <VgaText::setDefaultFgColour(VgaColour)>:
c0010814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010818:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001081c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010822:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010828:	c3                   	ret    
c0010829:	90                   	nop

c001082a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001082a:	53                   	push   ebx
c001082b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001082f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010837:	51                   	push   ecx
c0010838:	e8 c1 ff ff ff       	call   c00107fe <VgaText::setDefaultBgColour(VgaColour)>
c001083d:	58                   	pop    eax
c001083e:	5a                   	pop    edx
c001083f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010843:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010847:	5b                   	pop    ebx
c0010848:	eb ca                	jmp    c0010814 <VgaText::setDefaultFgColour(VgaColour)>

c001084a <VgaText::combineColours(unsigned char, unsigned char)>:
c001084a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001084e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010853:	83 e0 0f             	and    eax,0xf
c0010856:	c1 e2 04             	shl    edx,0x4
c0010859:	09 d0                	or     eax,edx
c001085b:	c3                   	ret    

c001085c <VgaText::scrollScreen()>:
c001085c:	57                   	push   edi
c001085d:	56                   	push   esi
c001085e:	be 01 00 00 00       	mov    esi,0x1
c0010863:	53                   	push   ebx
c0010864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010868:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001086e:	31 ff                	xor    edi,edi
c0010870:	01 d9                	add    ecx,ebx
c0010872:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010875:	83 fe 17             	cmp    esi,0x17
c0010878:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001087e:	75 28                	jne    c00108a8 <VgaText::scrollScreen()+0x4c>
c0010880:	f7 c7 01 00 00 00    	test   edi,0x1
c0010886:	74 1c                	je     c00108a4 <VgaText::scrollScreen()+0x48>
c0010888:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001088f:	50                   	push   eax
c0010890:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010897:	50                   	push   eax
c0010898:	e8 ad ff ff ff       	call   c001084a <VgaText::combineColours(unsigned char, unsigned char)>
c001089d:	5a                   	pop    edx
c001089e:	5a                   	pop    edx
c001089f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00108a2:	eb 04                	jmp    c00108a8 <VgaText::scrollScreen()+0x4c>
c00108a4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00108a8:	47                   	inc    edi
c00108a9:	41                   	inc    ecx
c00108aa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00108b0:	75 c0                	jne    c0010872 <VgaText::scrollScreen()+0x16>
c00108b2:	46                   	inc    esi
c00108b3:	83 fe 18             	cmp    esi,0x18
c00108b6:	75 b0                	jne    c0010868 <VgaText::scrollScreen()+0xc>
c00108b8:	39 1d 44 e8 02 c0    	cmp    DWORD PTR ds:0xc002e844,ebx
c00108be:	75 24                	jne    c00108e4 <VgaText::scrollScreen()+0x88>
c00108c0:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108c7:	74 08                	je     c00108d1 <VgaText::scrollScreen()+0x75>
c00108c9:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00108cf:	eb 13                	jmp    c00108e4 <VgaText::scrollScreen()+0x88>
c00108d1:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00108d7:	85 c0                	test   eax,eax
c00108d9:	74 09                	je     c00108e4 <VgaText::scrollScreen()+0x88>
c00108db:	83 ec 0c             	sub    esp,0xc
c00108de:	53                   	push   ebx
c00108df:	ff d0                	call   eax
c00108e1:	83 c4 10             	add    esp,0x10
c00108e4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108e8:	5b                   	pop    ebx
c00108e9:	5e                   	pop    esi
c00108ea:	5f                   	pop    edi
c00108eb:	e9 1e fe ff ff       	jmp    c001070e <VgaText::updateCursor()>

c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00108f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00108f5:	c1 e0 08             	shl    eax,0x8
c00108f8:	89 c2                	mov    edx,eax
c00108fa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00108ff:	09 d0                	or     eax,edx
c0010901:	c3                   	ret    

c0010902 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010902:	53                   	push   ebx
c0010903:	83 ec 08             	sub    esp,0x8
c0010906:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001090a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001090f:	50                   	push   eax
c0010910:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010915:	50                   	push   eax
c0010916:	e8 2f ff ff ff       	call   c001084a <VgaText::combineColours(unsigned char, unsigned char)>
c001091b:	5a                   	pop    edx
c001091c:	0f b6 c0             	movzx  eax,al
c001091f:	5b                   	pop    ebx
c0010920:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010925:	50                   	push   eax
c0010926:	53                   	push   ebx
c0010927:	e8 c4 ff ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c001092c:	5a                   	pop    edx
c001092d:	5a                   	pop    edx
c001092e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010934:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010938:	0f b7 d2             	movzx  edx,dx
c001093b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010940:	39 0d 44 e8 02 c0    	cmp    DWORD PTR ds:0xc002e844,ecx
c0010946:	75 14                	jne    c001095c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010948:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001094e:	85 c0                	test   eax,eax
c0010950:	74 0a                	je     c001095c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010952:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010956:	83 c4 08             	add    esp,0x8
c0010959:	5b                   	pop    ebx
c001095a:	ff e0                	jmp    eax
c001095c:	83 c4 08             	add    esp,0x8
c001095f:	5b                   	pop    ebx
c0010960:	c3                   	ret    
c0010961:	90                   	nop

c0010962 <VgaText::getCursorX()>:
c0010962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010966:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001096c:	c3                   	ret    
c001096d:	90                   	nop

c001096e <VgaText::getCursorY()>:
c001096e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010972:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010978:	c3                   	ret    
c0010979:	90                   	nop

c001097a <VgaText::setCursor(int, int)>:
c001097a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001097e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010982:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010988:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001098c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010992:	e9 77 fd ff ff       	jmp    c001070e <VgaText::updateCursor()>
c0010997:	90                   	nop

c0010998 <VgaText::setCursorX(int)>:
c0010998:	83 ec 10             	sub    esp,0x10
c001099b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001099f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00109a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a9:	50                   	push   eax
c00109aa:	e8 cb ff ff ff       	call   c001097a <VgaText::setCursor(int, int)>
c00109af:	83 c4 1c             	add    esp,0x1c
c00109b2:	c3                   	ret    
c00109b3:	90                   	nop

c00109b4 <VgaText::setCursorY(int)>:
c00109b4:	83 ec 10             	sub    esp,0x10
c00109b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109bf:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00109c5:	50                   	push   eax
c00109c6:	e8 af ff ff ff       	call   c001097a <VgaText::setCursor(int, int)>
c00109cb:	83 c4 1c             	add    esp,0x1c
c00109ce:	c3                   	ret    
c00109cf:	90                   	nop

c00109d0 <VgaText::incrementCursor(bool)>:
c00109d0:	56                   	push   esi
c00109d1:	53                   	push   ebx
c00109d2:	51                   	push   ecx
c00109d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00109db:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00109e1:	40                   	inc    eax
c00109e2:	83 f8 50             	cmp    eax,0x50
c00109e5:	74 08                	je     c00109ef <VgaText::incrementCursor(bool)+0x1f>
c00109e7:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00109ed:	eb 33                	jmp    c0010a22 <VgaText::incrementCursor(bool)+0x52>
c00109ef:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109f5:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109ff:	8d 50 01             	lea    edx,[eax+0x1]
c0010a02:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010a08:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010a0e:	75 12                	jne    c0010a22 <VgaText::incrementCursor(bool)+0x52>
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010a19:	53                   	push   ebx
c0010a1a:	e8 3d fe ff ff       	call   c001085c <VgaText::scrollScreen()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	89 f0                	mov    eax,esi
c0010a24:	84 c0                	test   al,al
c0010a26:	74 0c                	je     c0010a34 <VgaText::incrementCursor(bool)+0x64>
c0010a28:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a2c:	5a                   	pop    edx
c0010a2d:	5b                   	pop    ebx
c0010a2e:	5e                   	pop    esi
c0010a2f:	e9 da fc ff ff       	jmp    c001070e <VgaText::updateCursor()>
c0010a34:	58                   	pop    eax
c0010a35:	5b                   	pop    ebx
c0010a36:	5e                   	pop    esi
c0010a37:	c3                   	ret    

c0010a38 <VgaText::updateRAMUsageDisplay(int)>:
c0010a38:	56                   	push   esi
c0010a39:	8b 35 a0 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6a0
c0010a3f:	53                   	push   ebx
c0010a40:	bb 0a 00 00 00       	mov    ebx,0xa
c0010a45:	6a 0f                	push   0xf
c0010a47:	6a 00                	push   0x0
c0010a49:	e8 fc fd ff ff       	call   c001084a <VgaText::combineColours(unsigned char, unsigned char)>
c0010a4e:	5a                   	pop    edx
c0010a4f:	59                   	pop    ecx
c0010a50:	0f b6 c8             	movzx  ecx,al
c0010a53:	51                   	push   ecx
c0010a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a58:	99                   	cdq    
c0010a59:	f7 fb                	idiv   ebx
c0010a5b:	89 d3                	mov    ebx,edx
c0010a5d:	83 c0 30             	add    eax,0x30
c0010a60:	83 c3 30             	add    ebx,0x30
c0010a63:	0f be c0             	movsx  eax,al
c0010a66:	0f b6 db             	movzx  ebx,bl
c0010a69:	50                   	push   eax
c0010a6a:	e8 81 fe ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6f:	5a                   	pop    edx
c0010a70:	5a                   	pop    edx
c0010a71:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010a78:	51                   	push   ecx
c0010a79:	53                   	push   ebx
c0010a7a:	e8 71 fe ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7f:	5b                   	pop    ebx
c0010a80:	5a                   	pop    edx
c0010a81:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010a88:	51                   	push   ecx
c0010a89:	6a 25                	push   0x25
c0010a8b:	e8 60 fe ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a90:	59                   	pop    ecx
c0010a91:	5b                   	pop    ebx
c0010a92:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010a99:	5b                   	pop    ebx
c0010a9a:	5e                   	pop    esi
c0010a9b:	c3                   	ret    

c0010a9c <VgaText::updateDiskUsage()>:
c0010a9c:	55                   	push   ebp
c0010a9d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aa2:	57                   	push   edi
c0010aa3:	8b 3d a0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6a0
c0010aa9:	56                   	push   esi
c0010aaa:	53                   	push   ebx
c0010aab:	6a 0f                	push   0xf
c0010aad:	6a 00                	push   0x0
c0010aaf:	e8 96 fd ff ff       	call   c001084a <VgaText::combineColours(unsigned char, unsigned char)>
c0010ab4:	5a                   	pop    edx
c0010ab5:	0f b6 d8             	movzx  ebx,al
c0010ab8:	59                   	pop    ecx
c0010ab9:	8b 35 c8 2a 03 c0    	mov    esi,DWORD PTR ds:0xc0032ac8
c0010abf:	53                   	push   ebx
c0010ac0:	b9 0a 00 00 00       	mov    ecx,0xa
c0010ac5:	89 f0                	mov    eax,esi
c0010ac7:	99                   	cdq    
c0010ac8:	f7 fd                	idiv   ebp
c0010aca:	99                   	cdq    
c0010acb:	f7 f9                	idiv   ecx
c0010acd:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad0:	0f b6 c0             	movzx  eax,al
c0010ad3:	50                   	push   eax
c0010ad4:	e8 17 fe ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad9:	5d                   	pop    ebp
c0010ada:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010adf:	5a                   	pop    edx
c0010ae0:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010ae4:	53                   	push   ebx
c0010ae5:	89 f0                	mov    eax,esi
c0010ae7:	99                   	cdq    
c0010ae8:	f7 fd                	idiv   ebp
c0010aea:	99                   	cdq    
c0010aeb:	f7 f9                	idiv   ecx
c0010aed:	8d 42 30             	lea    eax,[edx+0x30]
c0010af0:	0f b6 c0             	movzx  eax,al
c0010af3:	50                   	push   eax
c0010af4:	e8 f7 fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af9:	5d                   	pop    ebp
c0010afa:	bd 64 00 00 00       	mov    ebp,0x64
c0010aff:	5a                   	pop    edx
c0010b00:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010b07:	53                   	push   ebx
c0010b08:	89 f0                	mov    eax,esi
c0010b0a:	99                   	cdq    
c0010b0b:	f7 fd                	idiv   ebp
c0010b0d:	99                   	cdq    
c0010b0e:	f7 f9                	idiv   ecx
c0010b10:	8d 42 30             	lea    eax,[edx+0x30]
c0010b13:	0f b6 c0             	movzx  eax,al
c0010b16:	50                   	push   eax
c0010b17:	e8 d4 fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1c:	5d                   	pop    ebp
c0010b1d:	5a                   	pop    edx
c0010b1e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010b25:	53                   	push   ebx
c0010b26:	89 f0                	mov    eax,esi
c0010b28:	99                   	cdq    
c0010b29:	f7 f9                	idiv   ecx
c0010b2b:	89 d6                	mov    esi,edx
c0010b2d:	99                   	cdq    
c0010b2e:	f7 f9                	idiv   ecx
c0010b30:	8d 42 30             	lea    eax,[edx+0x30]
c0010b33:	0f b6 c0             	movzx  eax,al
c0010b36:	50                   	push   eax
c0010b37:	e8 b4 fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3c:	5d                   	pop    ebp
c0010b3d:	5a                   	pop    edx
c0010b3e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010b45:	53                   	push   ebx
c0010b46:	8d 46 30             	lea    eax,[esi+0x30]
c0010b49:	0f b6 f0             	movzx  esi,al
c0010b4c:	56                   	push   esi
c0010b4d:	e8 9e fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b52:	5e                   	pop    esi
c0010b53:	8b 35 c4 2a 03 c0    	mov    esi,DWORD PTR ds:0xc0032ac4
c0010b59:	5d                   	pop    ebp
c0010b5a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010b61:	bd 10 27 00 00       	mov    ebp,0x2710
c0010b66:	53                   	push   ebx
c0010b67:	89 f0                	mov    eax,esi
c0010b69:	99                   	cdq    
c0010b6a:	f7 fd                	idiv   ebp
c0010b6c:	99                   	cdq    
c0010b6d:	f7 f9                	idiv   ecx
c0010b6f:	8d 42 30             	lea    eax,[edx+0x30]
c0010b72:	0f b6 c0             	movzx  eax,al
c0010b75:	50                   	push   eax
c0010b76:	e8 75 fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b7b:	5a                   	pop    edx
c0010b7c:	5d                   	pop    ebp
c0010b7d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010b84:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010b89:	53                   	push   ebx
c0010b8a:	89 f0                	mov    eax,esi
c0010b8c:	99                   	cdq    
c0010b8d:	f7 fd                	idiv   ebp
c0010b8f:	99                   	cdq    
c0010b90:	f7 f9                	idiv   ecx
c0010b92:	8d 42 30             	lea    eax,[edx+0x30]
c0010b95:	0f b6 c0             	movzx  eax,al
c0010b98:	50                   	push   eax
c0010b99:	e8 52 fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b9e:	5a                   	pop    edx
c0010b9f:	5d                   	pop    ebp
c0010ba0:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010ba7:	bd 64 00 00 00       	mov    ebp,0x64
c0010bac:	53                   	push   ebx
c0010bad:	89 f0                	mov    eax,esi
c0010baf:	99                   	cdq    
c0010bb0:	f7 fd                	idiv   ebp
c0010bb2:	99                   	cdq    
c0010bb3:	f7 f9                	idiv   ecx
c0010bb5:	83 c2 30             	add    edx,0x30
c0010bb8:	0f b6 d2             	movzx  edx,dl
c0010bbb:	52                   	push   edx
c0010bbc:	e8 2f fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010bc1:	5a                   	pop    edx
c0010bc2:	5d                   	pop    ebp
c0010bc3:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010bca:	53                   	push   ebx
c0010bcb:	89 f0                	mov    eax,esi
c0010bcd:	99                   	cdq    
c0010bce:	f7 f9                	idiv   ecx
c0010bd0:	89 d6                	mov    esi,edx
c0010bd2:	99                   	cdq    
c0010bd3:	f7 f9                	idiv   ecx
c0010bd5:	8d 42 30             	lea    eax,[edx+0x30]
c0010bd8:	0f b6 c0             	movzx  eax,al
c0010bdb:	50                   	push   eax
c0010bdc:	e8 0f fd ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010be1:	5a                   	pop    edx
c0010be2:	59                   	pop    ecx
c0010be3:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010bea:	53                   	push   ebx
c0010beb:	8d 46 30             	lea    eax,[esi+0x30]
c0010bee:	0f b6 f0             	movzx  esi,al
c0010bf1:	56                   	push   esi
c0010bf2:	e8 f9 fc ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010bf7:	5b                   	pop    ebx
c0010bf8:	5e                   	pop    esi
c0010bf9:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010c00:	5b                   	pop    ebx
c0010c01:	5e                   	pop    esi
c0010c02:	5f                   	pop    edi
c0010c03:	5d                   	pop    ebp
c0010c04:	c3                   	ret    
c0010c05:	90                   	nop

c0010c06 <VgaText::updateTitle()>:
c0010c06:	53                   	push   ebx
c0010c07:	31 c0                	xor    eax,eax
c0010c09:	83 ec 58             	sub    esp,0x58
c0010c0c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010c10:	89 e1                	mov    ecx,esp
c0010c12:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010c16:	40                   	inc    eax
c0010c17:	83 f8 50             	cmp    eax,0x50
c0010c1a:	75 f6                	jne    c0010c12 <VgaText::updateTitle()+0xc>
c0010c1c:	31 c0                	xor    eax,eax
c0010c1e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010c25:	84 db                	test   bl,bl
c0010c27:	74 06                	je     c0010c2f <VgaText::updateTitle()+0x29>
c0010c29:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010c2c:	40                   	inc    eax
c0010c2d:	eb ef                	jmp    c0010c1e <VgaText::updateTitle()+0x18>
c0010c2f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010c35:	85 c0                	test   eax,eax
c0010c37:	74 09                	je     c0010c42 <VgaText::updateTitle()+0x3c>
c0010c39:	53                   	push   ebx
c0010c3a:	53                   	push   ebx
c0010c3b:	51                   	push   ecx
c0010c3c:	52                   	push   edx
c0010c3d:	ff d0                	call   eax
c0010c3f:	83 c4 10             	add    esp,0x10
c0010c42:	e8 55 fe ff ff       	call   c0010a9c <VgaText::updateDiskUsage()>
c0010c47:	83 c4 58             	add    esp,0x58
c0010c4a:	5b                   	pop    ebx
c0010c4b:	c3                   	ret    

c0010c4c <VgaText::setTitleTextColour(VgaColour)>:
c0010c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c54:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010c5a:	eb aa                	jmp    c0010c06 <VgaText::updateTitle()>

c0010c5c <VgaText::setTitleColour(VgaColour)>:
c0010c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c64:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010c6a:	eb 9a                	jmp    c0010c06 <VgaText::updateTitle()>

c0010c6c <VgaText::setTitle(char*)>:
c0010c6c:	53                   	push   ebx
c0010c6d:	83 ec 10             	sub    esp,0x10
c0010c70:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c78:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010c7e:	50                   	push   eax
c0010c7f:	e8 b0 fb fe ff       	call   c0000834 <strcpy>
c0010c84:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010c88:	83 c4 18             	add    esp,0x18
c0010c8b:	5b                   	pop    ebx
c0010c8c:	e9 75 ff ff ff       	jmp    c0010c06 <VgaText::updateTitle()>
c0010c91:	90                   	nop

c0010c92 <VgaText::decrementCursor(bool)>:
c0010c92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010c9a:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010ca0:	85 c0                	test   eax,eax
c0010ca2:	74 07                	je     c0010cab <VgaText::decrementCursor(bool)+0x19>
c0010ca4:	48                   	dec    eax
c0010ca5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010cab:	84 c9                	test   cl,cl
c0010cad:	74 09                	je     c0010cb8 <VgaText::decrementCursor(bool)+0x26>
c0010caf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010cb3:	e9 56 fa ff ff       	jmp    c001070e <VgaText::updateCursor()>
c0010cb8:	c3                   	ret    
c0010cb9:	90                   	nop

c0010cba <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010cba:	53                   	push   ebx
c0010cbb:	83 ec 08             	sub    esp,0x8
c0010cbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cc6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010cca:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010cce:	3c 07                	cmp    al,0x7
c0010cd0:	75 2a                	jne    c0010cfc <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010cd2:	a1 f0 e8 02 c0       	mov    eax,ds:0xc002e8f0
c0010cd7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010cdf:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010ce7:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010cef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010cf3:	83 c4 08             	add    esp,0x8
c0010cf6:	5b                   	pop    ebx
c0010cf7:	e9 0a 31 00 00       	jmp    c0013e06 <Buzzer::beep(int, int, bool)>
c0010cfc:	3c 0d                	cmp    al,0xd
c0010cfe:	75 0c                	jne    c0010d0c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010d00:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010d0a:	eb 3b                	jmp    c0010d47 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010d0c:	3c 0a                	cmp    al,0xa
c0010d0e:	75 40                	jne    c0010d50 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010d10:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010d16:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010d20:	8d 50 01             	lea    edx,[eax+0x1]
c0010d23:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010d29:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010d2f:	75 12                	jne    c0010d43 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010d31:	83 ec 0c             	sub    esp,0xc
c0010d34:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010d3a:	53                   	push   ebx
c0010d3b:	e8 1c fb ff ff       	call   c001085c <VgaText::scrollScreen()>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d47:	83 c4 08             	add    esp,0x8
c0010d4a:	5b                   	pop    ebx
c0010d4b:	e9 be f9 ff ff       	jmp    c001070e <VgaText::updateCursor()>
c0010d50:	3c 08                	cmp    al,0x8
c0010d52:	75 31                	jne    c0010d85 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010d54:	50                   	push   eax
c0010d55:	50                   	push   eax
c0010d56:	6a 01                	push   0x1
c0010d58:	53                   	push   ebx
c0010d59:	e8 34 ff ff ff       	call   c0010c92 <VgaText::decrementCursor(bool)>
c0010d5e:	5a                   	pop    edx
c0010d5f:	59                   	pop    ecx
c0010d60:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d66:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d6c:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d72:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d78:	6a 20                	push   0x20
c0010d7a:	53                   	push   ebx
c0010d7b:	e8 82 fb ff ff       	call   c0010902 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d80:	83 c4 28             	add    esp,0x28
c0010d83:	5b                   	pop    ebx
c0010d84:	c3                   	ret    
c0010d85:	83 ec 08             	sub    esp,0x8
c0010d88:	0f be c0             	movsx  eax,al
c0010d8b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d91:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d97:	51                   	push   ecx
c0010d98:	52                   	push   edx
c0010d99:	50                   	push   eax
c0010d9a:	53                   	push   ebx
c0010d9b:	e8 62 fb ff ff       	call   c0010902 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010da0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010da4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010dac:	83 c4 28             	add    esp,0x28
c0010daf:	5b                   	pop    ebx
c0010db0:	e9 1b fc ff ff       	jmp    c00109d0 <VgaText::incrementCursor(bool)>
c0010db5:	90                   	nop

c0010db6 <VgaText::isShowingCursor()>:
c0010db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dba:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010dc0:	c3                   	ret    
c0010dc1:	90                   	nop

c0010dc2 <VgaText::isBlinkDisabled()>:
c0010dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc6:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010dcc:	83 f0 01             	xor    eax,0x1
c0010dcf:	c3                   	ret    

c0010dd0 <VgaText::setCursorHeight(int)>:
c0010dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dd8:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010dde:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010de5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010de9:	e9 3a f9 ff ff       	jmp    c0010728 <VgaText::showCursor(bool)>

c0010dee <VgaText::getCursorHeight()>:
c0010dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010df2:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010df8:	c3                   	ret    

c0010df9 <setActiveTerminal(VgaText*)>:
c0010df9:	53                   	push   ebx
c0010dfa:	83 ec 08             	sub    esp,0x8
c0010dfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e01:	85 db                	test   ebx,ebx
c0010e03:	75 11                	jne    c0010e16 <setActiveTerminal(VgaText*)+0x1d>
c0010e05:	c7 44 24 10 38 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a538
c0010e0d:	83 c4 08             	add    esp,0x8
c0010e10:	5b                   	pop    ebx
c0010e11:	e9 a3 98 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>
c0010e16:	50                   	push   eax
c0010e17:	50                   	push   eax
c0010e18:	53                   	push   ebx
c0010e19:	68 46 a5 02 c0       	push   0xc002a546
c0010e1e:	e8 e4 21 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0010e23:	a1 44 e8 02 c0       	mov    eax,ds:0xc002e844
c0010e28:	83 c4 10             	add    esp,0x10
c0010e2b:	85 c0                	test   eax,eax
c0010e2d:	74 0c                	je     c0010e3b <setActiveTerminal(VgaText*)+0x42>
c0010e2f:	83 ec 0c             	sub    esp,0xc
c0010e32:	50                   	push   eax
c0010e33:	e8 d6 f8 ff ff       	call   c001070e <VgaText::updateCursor()>
c0010e38:	83 c4 10             	add    esp,0x10
c0010e3b:	89 1d 44 e8 02 c0    	mov    DWORD PTR ds:0xc002e844,ebx
c0010e41:	51                   	push   ecx
c0010e42:	51                   	push   ecx
c0010e43:	53                   	push   ebx
c0010e44:	68 5e a5 02 c0       	push   0xc002a55e
c0010e49:	e8 b9 21 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0010e4e:	83 c4 0c             	add    esp,0xc
c0010e51:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010e57:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010e5d:	53                   	push   ebx
c0010e5e:	e8 17 fb ff ff       	call   c001097a <VgaText::setCursor(int, int)>
c0010e63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e66:	e8 57 ff ff ff       	call   c0010dc2 <VgaText::isBlinkDisabled()>
c0010e6b:	5a                   	pop    edx
c0010e6c:	0f b6 c0             	movzx  eax,al
c0010e6f:	59                   	pop    ecx
c0010e70:	50                   	push   eax
c0010e71:	53                   	push   ebx
c0010e72:	e8 c1 f8 ff ff       	call   c0010738 <VgaText::disableBlink(bool)>
c0010e77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e7a:	e8 6f ff ff ff       	call   c0010dee <VgaText::getCursorHeight()>
c0010e7f:	5a                   	pop    edx
c0010e80:	59                   	pop    ecx
c0010e81:	50                   	push   eax
c0010e82:	53                   	push   ebx
c0010e83:	e8 48 ff ff ff       	call   c0010dd0 <VgaText::setCursorHeight(int)>
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e92:	75 0a                	jne    c0010e9e <setActiveTerminal(VgaText*)+0xa5>
c0010e94:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010e9e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ea2:	83 c4 08             	add    esp,0x8
c0010ea5:	5b                   	pop    ebx
c0010ea6:	e9 0f f8 ff ff       	jmp    c00106ba <VgaText::load()>

c0010eab <doTerminalCycle()>:
c0010eab:	83 ec 18             	sub    esp,0x18
c0010eae:	a1 40 e8 02 c0       	mov    eax,ds:0xc002e840
c0010eb3:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010eb9:	50                   	push   eax
c0010eba:	a3 40 e8 02 c0       	mov    ds:0xc002e840,eax
c0010ebf:	e8 35 ff ff ff       	call   c0010df9 <setActiveTerminal(VgaText*)>
c0010ec4:	83 c4 1c             	add    esp,0x1c
c0010ec7:	c3                   	ret    

c0010ec8 <VgaText::doUpdate()>:
c0010ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ecc:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010ed2:	85 c0                	test   eax,eax
c0010ed4:	74 02                	je     c0010ed8 <VgaText::doUpdate()+0x10>
c0010ed6:	ff e0                	jmp    eax
c0010ed8:	c3                   	ret    
c0010ed9:	90                   	nop

c0010eda <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010eda:	55                   	push   ebp
c0010edb:	57                   	push   edi
c0010edc:	56                   	push   esi
c0010edd:	53                   	push   ebx
c0010ede:	83 ec 1c             	sub    esp,0x1c
c0010ee1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ee5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010eea:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ef1:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010ef4:	50                   	push   eax
c0010ef5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010efa:	50                   	push   eax
c0010efb:	e8 4a f9 ff ff       	call   c001084a <VgaText::combineColours(unsigned char, unsigned char)>
c0010f00:	59                   	pop    ecx
c0010f01:	0f b6 c0             	movzx  eax,al
c0010f04:	5b                   	pop    ebx
c0010f05:	31 c9                	xor    ecx,ecx
c0010f07:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010f13:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f1d:	0f b7 db             	movzx  ebx,bx
c0010f20:	01 db                	add    ebx,ebx
c0010f22:	01 fb                	add    ebx,edi
c0010f24:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010f27:	84 c0                	test   al,al
c0010f29:	0f 84 38 01 00 00    	je     c0011067 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010f2f:	3c 0d                	cmp    al,0xd
c0010f31:	75 0f                	jne    c0010f42 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010f33:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010f3d:	e9 1f 01 00 00       	jmp    c0011061 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f42:	3c 0a                	cmp    al,0xa
c0010f44:	75 5b                	jne    c0010fa1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010f46:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010f4c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010f56:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f59:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010f5f:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010f65:	75 12                	jne    c0010f79 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010f67:	83 ec 0c             	sub    esp,0xc
c0010f6a:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010f70:	55                   	push   ebp
c0010f71:	e8 e6 f8 ff ff       	call   c001085c <VgaText::scrollScreen()>
c0010f76:	83 c4 10             	add    esp,0x10
c0010f79:	83 ec 0c             	sub    esp,0xc
c0010f7c:	55                   	push   ebp
c0010f7d:	e8 8c f7 ff ff       	call   c001070e <VgaText::updateCursor()>
c0010f82:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f93:	31 c9                	xor    ecx,ecx
c0010f95:	0f b7 db             	movzx  ebx,bx
c0010f98:	01 db                	add    ebx,ebx
c0010f9a:	01 fb                	add    ebx,edi
c0010f9c:	e9 c0 00 00 00       	jmp    c0011061 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010fa1:	3c 08                	cmp    al,0x8
c0010fa3:	75 4e                	jne    c0010ff3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010fa5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010fa9:	53                   	push   ebx
c0010faa:	53                   	push   ebx
c0010fab:	6a 01                	push   0x1
c0010fad:	55                   	push   ebp
c0010fae:	e8 df fc ff ff       	call   c0010c92 <VgaText::decrementCursor(bool)>
c0010fb3:	58                   	pop    eax
c0010fb4:	5a                   	pop    edx
c0010fb5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010fbb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010fc1:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010fc7:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010fcd:	6a 20                	push   0x20
c0010fcf:	55                   	push   ebp
c0010fd0:	e8 2d f9 ff ff       	call   c0010902 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fd5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fdd:	83 c4 20             	add    esp,0x20
c0010fe0:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010fe6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fea:	0f b7 db             	movzx  ebx,bx
c0010fed:	01 db                	add    ebx,ebx
c0010fef:	01 fb                	add    ebx,edi
c0010ff1:	eb 6e                	jmp    c0011061 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ff3:	51                   	push   ecx
c0010ff4:	51                   	push   ecx
c0010ff5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ff9:	50                   	push   eax
c0010ffa:	e8 f1 f8 ff ff       	call   c00108f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010fff:	83 c4 10             	add    esp,0x10
c0011002:	66 89 03             	mov    WORD PTR [ebx],ax
c0011005:	39 2d 44 e8 02 c0    	cmp    DWORD PTR ds:0xc002e844,ebp
c001100b:	75 2a                	jne    c0011037 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001100d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0011013:	85 c0                	test   eax,eax
c0011015:	74 20                	je     c0011037 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0011017:	52                   	push   edx
c0011018:	52                   	push   edx
c0011019:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001101f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0011025:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011029:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001102d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0011030:	51                   	push   ecx
c0011031:	55                   	push   ebp
c0011032:	ff d0                	call   eax
c0011034:	83 c4 20             	add    esp,0x20
c0011037:	83 c3 02             	add    ebx,0x2
c001103a:	50                   	push   eax
c001103b:	50                   	push   eax
c001103c:	6a 00                	push   0x0
c001103e:	55                   	push   ebp
c001103f:	e8 8c f9 ff ff       	call   c00109d0 <VgaText::incrementCursor(bool)>
c0011044:	83 c4 10             	add    esp,0x10
c0011047:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c001104e:	75 0f                	jne    c001105f <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0011050:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0011058:	0f b7 db             	movzx  ebx,bx
c001105b:	01 db                	add    ebx,ebx
c001105d:	01 fb                	add    ebx,edi
c001105f:	b1 01                	mov    cl,0x1
c0011061:	46                   	inc    esi
c0011062:	e9 bd fe ff ff       	jmp    c0010f24 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0011067:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001106b:	83 ec 0c             	sub    esp,0xc
c001106e:	55                   	push   ebp
c001106f:	e8 9a f6 ff ff       	call   c001070e <VgaText::updateCursor()>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001107b:	84 c9                	test   cl,cl
c001107d:	74 0c                	je     c001108b <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001107f:	83 ec 0c             	sub    esp,0xc
c0011082:	55                   	push   ebp
c0011083:	e8 40 fe ff ff       	call   c0010ec8 <VgaText::doUpdate()>
c0011088:	83 c4 10             	add    esp,0x10
c001108b:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0011092:	83 c4 1c             	add    esp,0x1c
c0011095:	5b                   	pop    ebx
c0011096:	5e                   	pop    esi
c0011097:	5f                   	pop    edi
c0011098:	5d                   	pop    ebp
c0011099:	c3                   	ret    

c001109a <VgaText::clearScreen()>:
c001109a:	57                   	push   edi
c001109b:	56                   	push   esi
c001109c:	31 f6                	xor    esi,esi
c001109e:	53                   	push   ebx
c001109f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110a3:	52                   	push   edx
c00110a4:	6a 00                	push   0x0
c00110a6:	6a 00                	push   0x0
c00110a8:	53                   	push   ebx
c00110a9:	e8 cc f8 ff ff       	call   c001097a <VgaText::setCursor(int, int)>
c00110ae:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c00110b5:	83 c4 10             	add    esp,0x10
c00110b8:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c00110be:	7e 26                	jle    c00110e6 <VgaText::clearScreen()+0x4c>
c00110c0:	31 ff                	xor    edi,edi
c00110c2:	50                   	push   eax
c00110c3:	50                   	push   eax
c00110c4:	56                   	push   esi
c00110c5:	57                   	push   edi
c00110c6:	47                   	inc    edi
c00110c7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110cd:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110d3:	6a 20                	push   0x20
c00110d5:	53                   	push   ebx
c00110d6:	e8 27 f8 ff ff       	call   c0010902 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00110db:	83 c4 20             	add    esp,0x20
c00110de:	83 ff 50             	cmp    edi,0x50
c00110e1:	75 df                	jne    c00110c2 <VgaText::clearScreen()+0x28>
c00110e3:	46                   	inc    esi
c00110e4:	eb d2                	jmp    c00110b8 <VgaText::clearScreen()+0x1e>
c00110e6:	83 ec 0c             	sub    esp,0xc
c00110e9:	53                   	push   ebx
c00110ea:	e8 d9 fd ff ff       	call   c0010ec8 <VgaText::doUpdate()>
c00110ef:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00110f6:	83 c4 10             	add    esp,0x10
c00110f9:	5b                   	pop    ebx
c00110fa:	5e                   	pop    esi
c00110fb:	5f                   	pop    edi
c00110fc:	c3                   	ret    
c00110fd:	90                   	nop

c00110fe <VgaText::putchar(char)>:
c00110fe:	56                   	push   esi
c00110ff:	53                   	push   ebx
c0011100:	83 ec 14             	sub    esp,0x14
c0011103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011107:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001110b:	3c 5b                	cmp    al,0x5b
c001110d:	75 21                	jne    c0011130 <VgaText::putchar(char)+0x32>
c001110f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011116:	74 28                	je     c0011140 <VgaText::putchar(char)+0x42>
c0011118:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011121:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001112b:	e9 e2 00 00 00       	jmp    c0011212 <VgaText::putchar(char)+0x114>
c0011130:	3c 1b                	cmp    al,0x1b
c0011132:	75 0c                	jne    c0011140 <VgaText::putchar(char)+0x42>
c0011134:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001113b:	e9 d2 00 00 00       	jmp    c0011212 <VgaText::putchar(char)+0x114>
c0011140:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011146:	84 c9                	test   cl,cl
c0011148:	0f 84 ab 00 00 00    	je     c00111f9 <VgaText::putchar(char)+0xfb>
c001114e:	8d 50 c0             	lea    edx,[eax-0x40]
c0011151:	80 fa 3e             	cmp    dl,0x3e
c0011154:	0f 87 82 00 00 00    	ja     c00111dc <VgaText::putchar(char)+0xde>
c001115a:	3c 6d                	cmp    al,0x6d
c001115c:	75 4d                	jne    c00111ab <VgaText::putchar(char)+0xad>
c001115e:	31 f6                	xor    esi,esi
c0011160:	31 d2                	xor    edx,edx
c0011162:	31 c0                	xor    eax,eax
c0011164:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001116a:	7e 30                	jle    c001119c <VgaText::putchar(char)+0x9e>
c001116c:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011174:	80 fa 3b             	cmp    dl,0x3b
c0011177:	75 17                	jne    c0011190 <VgaText::putchar(char)+0x92>
c0011179:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001117d:	50                   	push   eax
c001117e:	53                   	push   ebx
c001117f:	e8 ee f5 ff ff       	call   c0010772 <VgaText::doANSI_SGR(int)>
c0011184:	59                   	pop    ecx
c0011185:	31 d2                	xor    edx,edx
c0011187:	58                   	pop    eax
c0011188:	31 c0                	xor    eax,eax
c001118a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001118e:	eb 09                	jmp    c0011199 <VgaText::putchar(char)+0x9b>
c0011190:	6b c0 0a             	imul   eax,eax,0xa
c0011193:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011197:	88 ca                	mov    dl,cl
c0011199:	46                   	inc    esi
c001119a:	eb c8                	jmp    c0011164 <VgaText::putchar(char)+0x66>
c001119c:	84 d2                	test   dl,dl
c001119e:	74 31                	je     c00111d1 <VgaText::putchar(char)+0xd3>
c00111a0:	50                   	push   eax
c00111a1:	53                   	push   ebx
c00111a2:	e8 cb f5 ff ff       	call   c0010772 <VgaText::doANSI_SGR(int)>
c00111a7:	58                   	pop    eax
c00111a8:	5a                   	pop    edx
c00111a9:	eb 26                	jmp    c00111d1 <VgaText::putchar(char)+0xd3>
c00111ab:	3c 4a                	cmp    al,0x4a
c00111ad:	75 22                	jne    c00111d1 <VgaText::putchar(char)+0xd3>
c00111af:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00111b6:	75 19                	jne    c00111d1 <VgaText::putchar(char)+0xd3>
c00111b8:	83 ec 0c             	sub    esp,0xc
c00111bb:	53                   	push   ebx
c00111bc:	e8 d9 fe ff ff       	call   c001109a <VgaText::clearScreen()>
c00111c1:	83 c4 0c             	add    esp,0xc
c00111c4:	6a 00                	push   0x0
c00111c6:	6a 00                	push   0x0
c00111c8:	53                   	push   ebx
c00111c9:	e8 ac f7 ff ff       	call   c001097a <VgaText::setCursor(int, int)>
c00111ce:	83 c4 10             	add    esp,0x10
c00111d1:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00111da:	eb 36                	jmp    c0011212 <VgaText::putchar(char)+0x114>
c00111dc:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00111e2:	83 fa 0e             	cmp    edx,0xe
c00111e5:	7f 2b                	jg     c0011212 <VgaText::putchar(char)+0x114>
c00111e7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00111ea:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00111f0:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00111f7:	eb 19                	jmp    c0011212 <VgaText::putchar(char)+0x114>
c00111f9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00111ff:	0f be c0             	movsx  eax,al
c0011202:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011208:	50                   	push   eax
c0011209:	53                   	push   ebx
c001120a:	e8 ab fa ff ff       	call   c0010cba <VgaText::putchar(char, VgaColour, VgaColour)>
c001120f:	83 c4 10             	add    esp,0x10
c0011212:	83 c4 14             	add    esp,0x14
c0011215:	5b                   	pop    ebx
c0011216:	5e                   	pop    esi
c0011217:	c3                   	ret    

c0011218 <VgaText::puts(char const*)>:
c0011218:	53                   	push   ebx
c0011219:	83 ec 08             	sub    esp,0x8
c001121c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011220:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011223:	84 c0                	test   al,al
c0011225:	74 12                	je     c0011239 <VgaText::puts(char const*)+0x21>
c0011227:	43                   	inc    ebx
c0011228:	51                   	push   ecx
c0011229:	51                   	push   ecx
c001122a:	50                   	push   eax
c001122b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122f:	e8 ca fe ff ff       	call   c00110fe <VgaText::putchar(char)>
c0011234:	83 c4 10             	add    esp,0x10
c0011237:	eb e7                	jmp    c0011220 <VgaText::puts(char const*)+0x8>
c0011239:	83 c4 08             	add    esp,0x8
c001123c:	5b                   	pop    ebx
c001123d:	c3                   	ret    

c001123e <VgaText::putx(unsigned int)>:
c001123e:	57                   	push   edi
c001123f:	b9 11 00 00 00       	mov    ecx,0x11
c0011244:	56                   	push   esi
c0011245:	be 7a a5 02 c0       	mov    esi,0xc002a57a
c001124a:	53                   	push   ebx
c001124b:	83 ec 20             	sub    esp,0x20
c001124e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011252:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011256:	fc                   	cld    
c0011257:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011259:	be 08 00 00 00       	mov    esi,0x8
c001125e:	50                   	push   eax
c001125f:	50                   	push   eax
c0011260:	89 d8                	mov    eax,ebx
c0011262:	c1 e3 04             	shl    ebx,0x4
c0011265:	c1 e8 1c             	shr    eax,0x1c
c0011268:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001126d:	50                   	push   eax
c001126e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011272:	e8 87 fe ff ff       	call   c00110fe <VgaText::putchar(char)>
c0011277:	83 c4 10             	add    esp,0x10
c001127a:	4e                   	dec    esi
c001127b:	75 e1                	jne    c001125e <VgaText::putx(unsigned int)+0x20>
c001127d:	83 c4 20             	add    esp,0x20
c0011280:	5b                   	pop    ebx
c0011281:	5e                   	pop    esi
c0011282:	5f                   	pop    edi
c0011283:	c3                   	ret    

c0011284 <VgaText::VgaText(char const*)>:
c0011284:	57                   	push   edi
c0011285:	56                   	push   esi
c0011286:	53                   	push   ebx
c0011287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128b:	83 ec 08             	sub    esp,0x8
c001128e:	6a 00                	push   0x0
c0011290:	50                   	push   eax
c0011291:	e8 6e 05 00 00       	call   c0011804 <UnixFile::UnixFile(int)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	ba e0 a5 02 c0       	mov    edx,0xc002a5e0
c001129e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a2:	89 10                	mov    DWORD PTR [eax],edx
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00112b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b6:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00112c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c4:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00112cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112cf:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00112d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112da:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00112e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e8:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00112f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f6:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00112fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011301:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011312:	bb 20 e8 02 c0       	mov    ebx,0xc002e820
c0011317:	b8 08 00 00 00       	mov    eax,0x8
c001131c:	fc                   	cld    
c001131d:	89 d7                	mov    edi,edx
c001131f:	89 de                	mov    esi,ebx
c0011321:	89 c1                	mov    ecx,eax
c0011323:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011329:	05 1e 10 00 00       	add    eax,0x101e
c001132e:	83 ec 08             	sub    esp,0x8
c0011331:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011335:	50                   	push   eax
c0011336:	e8 f9 f4 fe ff       	call   c0000834 <strcpy>
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011342:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001134c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011350:	83 c0 0c             	add    eax,0xc
c0011353:	83 ec 04             	sub    esp,0x4
c0011356:	68 00 0f 00 00       	push   0xf00
c001135b:	6a 00                	push   0x0
c001135d:	50                   	push   eax
c001135e:	e8 15 f4 fe ff       	call   c0000778 <memset>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	83 ec 04             	sub    esp,0x4
c0011369:	6a 00                	push   0x0
c001136b:	6a 07                	push   0x7
c001136d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011371:	e8 b4 f4 ff ff       	call   c001082a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	83 ec 08             	sub    esp,0x8
c001137c:	6a 02                	push   0x2
c001137e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011382:	e8 49 fa ff ff       	call   c0010dd0 <VgaText::setCursorHeight(int)>
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	83 ec 04             	sub    esp,0x4
c001138d:	6a 00                	push   0x0
c001138f:	6a 00                	push   0x0
c0011391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011395:	e8 e0 f5 ff ff       	call   c001097a <VgaText::setCursor(int, int)>
c001139a:	83 c4 10             	add    esp,0x10
c001139d:	83 ec 08             	sub    esp,0x8
c00113a0:	6a 01                	push   0x1
c00113a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a6:	e8 7d f3 ff ff       	call   c0010728 <VgaText::showCursor(bool)>
c00113ab:	83 c4 10             	add    esp,0x10
c00113ae:	83 ec 08             	sub    esp,0x8
c00113b1:	6a 01                	push   0x1
c00113b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113b7:	e8 7c f3 ff ff       	call   c0010738 <VgaText::disableBlink(bool)>
c00113bc:	83 c4 10             	add    esp,0x10
c00113bf:	83 ec 0c             	sub    esp,0xc
c00113c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113c6:	e8 cf fc ff ff       	call   c001109a <VgaText::clearScreen()>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d2:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00113d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dd:	05 9e 10 00 00       	add    eax,0x109e
c00113e2:	83 ec 04             	sub    esp,0x4
c00113e5:	68 96 00 00 00       	push   0x96
c00113ea:	6a 00                	push   0x0
c00113ec:	50                   	push   eax
c00113ed:	e8 86 f3 fe ff       	call   c0000778 <memset>
c00113f2:	83 c4 10             	add    esp,0x10
c00113f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f9:	05 34 11 00 00       	add    eax,0x1134
c00113fe:	83 ec 04             	sub    esp,0x4
c0011401:	68 2c 01 00 00       	push   0x12c
c0011406:	6a 00                	push   0x0
c0011408:	50                   	push   eax
c0011409:	e8 6a f3 fe ff       	call   c0000778 <memset>
c001140e:	83 c4 10             	add    esp,0x10
c0011411:	90                   	nop
c0011412:	5b                   	pop    ebx
c0011413:	5e                   	pop    esi
c0011414:	5f                   	pop    edi
c0011415:	c3                   	ret    

c0011416 <VgaText::receiveKey(unsigned char)>:
c0011416:	55                   	push   ebp
c0011417:	57                   	push   edi
c0011418:	56                   	push   esi
c0011419:	53                   	push   ebx
c001141a:	83 ec 1c             	sub    esp,0x1c
c001141d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011421:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011425:	84 db                	test   bl,bl
c0011427:	0f 84 c9 00 00 00    	je     c00114f6 <VgaText::receiveKey(unsigned char)+0xe0>
c001142d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011433:	80 fb 08             	cmp    bl,0x8
c0011436:	75 2c                	jne    c0011464 <VgaText::receiveKey(unsigned char)+0x4e>
c0011438:	83 ec 0c             	sub    esp,0xc
c001143b:	57                   	push   edi
c001143c:	e8 53 f3 fe ff       	call   c0000794 <strlen>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	85 c0                	test   eax,eax
c0011446:	74 41                	je     c0011489 <VgaText::receiveKey(unsigned char)+0x73>
c0011448:	50                   	push   eax
c0011449:	50                   	push   eax
c001144a:	6a 08                	push   0x8
c001144c:	56                   	push   esi
c001144d:	e8 ac fc ff ff       	call   c00110fe <VgaText::putchar(char)>
c0011452:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011455:	e8 3a f3 fe ff       	call   c0000794 <strlen>
c001145a:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011462:	eb 22                	jmp    c0011486 <VgaText::receiveKey(unsigned char)+0x70>
c0011464:	0f be c3             	movsx  eax,bl
c0011467:	52                   	push   edx
c0011468:	52                   	push   edx
c0011469:	50                   	push   eax
c001146a:	56                   	push   esi
c001146b:	e8 8e fc ff ff       	call   c00110fe <VgaText::putchar(char)>
c0011470:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011474:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011479:	59                   	pop    ecx
c001147a:	5d                   	pop    ebp
c001147b:	8d 44 24 16          	lea    eax,[esp+0x16]
c001147f:	50                   	push   eax
c0011480:	57                   	push   edi
c0011481:	e8 ee f4 fe ff       	call   c0000974 <strcat>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011490:	75 05                	jne    c0011497 <VgaText::receiveKey(unsigned char)+0x81>
c0011492:	80 fb 0a             	cmp    bl,0xa
c0011495:	75 53                	jne    c00114ea <VgaText::receiveKey(unsigned char)+0xd4>
c0011497:	83 ec 0c             	sub    esp,0xc
c001149a:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00114a0:	53                   	push   ebx
c00114a1:	e8 ee f2 fe ff       	call   c0000794 <strlen>
c00114a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114a9:	89 c5                	mov    ebp,eax
c00114ab:	e8 e4 f2 fe ff       	call   c0000794 <strlen>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00114b7:	3d 2c 01 00 00       	cmp    eax,0x12c
c00114bc:	76 10                	jbe    c00114ce <VgaText::receiveKey(unsigned char)+0xb8>
c00114be:	83 ec 0c             	sub    esp,0xc
c00114c1:	68 8b a5 02 c0       	push   0xc002a58b
c00114c6:	e8 ee 91 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c00114cb:	83 c4 10             	add    esp,0x10
c00114ce:	50                   	push   eax
c00114cf:	50                   	push   eax
c00114d0:	57                   	push   edi
c00114d1:	53                   	push   ebx
c00114d2:	e8 9d f4 fe ff       	call   c0000974 <strcat>
c00114d7:	83 c4 0c             	add    esp,0xc
c00114da:	68 96 00 00 00       	push   0x96
c00114df:	6a 00                	push   0x0
c00114e1:	57                   	push   edi
c00114e2:	e8 91 f2 fe ff       	call   c0000778 <memset>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	83 ec 0c             	sub    esp,0xc
c00114ed:	56                   	push   esi
c00114ee:	e8 d5 f9 ff ff       	call   c0010ec8 <VgaText::doUpdate()>
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	83 c4 1c             	add    esp,0x1c
c00114f9:	5b                   	pop    ebx
c00114fa:	5e                   	pop    esi
c00114fb:	5f                   	pop    edi
c00114fc:	5d                   	pop    ebp
c00114fd:	c3                   	ret    

c00114fe <VgaText::write(unsigned long long, void*, int*)>:
c00114fe:	55                   	push   ebp
c00114ff:	57                   	push   edi
c0011500:	56                   	push   esi
c0011501:	53                   	push   ebx
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011509:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001150d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011511:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011518:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001151b:	39 eb                	cmp    ebx,ebp
c001151d:	74 13                	je     c0011532 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001151f:	43                   	inc    ebx
c0011520:	50                   	push   eax
c0011521:	50                   	push   eax
c0011522:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011526:	50                   	push   eax
c0011527:	56                   	push   esi
c0011528:	e8 d1 fb ff ff       	call   c00110fe <VgaText::putchar(char)>
c001152d:	83 c4 10             	add    esp,0x10
c0011530:	eb e9                	jmp    c001151b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011532:	83 ec 0c             	sub    esp,0xc
c0011535:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001153c:	56                   	push   esi
c001153d:	e8 86 f9 ff ff       	call   c0010ec8 <VgaText::doUpdate()>
c0011542:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011546:	89 38                	mov    DWORD PTR [eax],edi
c0011548:	83 c4 1c             	add    esp,0x1c
c001154b:	31 c0                	xor    eax,eax
c001154d:	5b                   	pop    ebx
c001154e:	5e                   	pop    esi
c001154f:	5f                   	pop    edi
c0011550:	5d                   	pop    ebp
c0011551:	c3                   	ret    

c0011552 <newTerminal(char*)>:
c0011552:	83 ec 28             	sub    esp,0x28
c0011555:	68 60 12 00 00       	push   0x1260
c001155a:	e8 9d e3 ff ff       	call   c000f8fc <malloc>
c001155f:	5a                   	pop    edx
c0011560:	59                   	pop    ecx
c0011561:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011565:	50                   	push   eax
c0011566:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001156a:	e8 15 fd ff ff       	call   c0011284 <VgaText::VgaText(char const*)>
c001156f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011573:	83 c4 2c             	add    esp,0x2c
c0011576:	c3                   	ret    
c0011577:	90                   	nop

c0011578 <TSS::TSS()>:
c0011578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011583:	90                   	nop
c0011584:	c3                   	ret    
c0011585:	90                   	nop

c0011586 <TSS::setESP(unsigned long)>:
c0011586:	55                   	push   ebp
c0011587:	89 e5                	mov    ebp,esp
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011592:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011595:	90                   	nop
c0011596:	5d                   	pop    ebp
c0011597:	c3                   	ret    

c0011598 <TSS::flush()>:
c0011598:	55                   	push   ebp
c0011599:	89 e5                	mov    ebp,esp
c001159b:	83 ec 10             	sub    esp,0x10
c001159e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00115a3:	83 c8 03             	or     eax,0x3
c00115a6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00115aa:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00115ae:	66 89 d0             	mov    ax,dx
c00115b1:	0f 00 d8             	ltr    ax
c00115b4:	90                   	nop
c00115b5:	c9                   	leave  
c00115b6:	c3                   	ret    
c00115b7:	90                   	nop

c00115b8 <TSS::setup(unsigned long, unsigned long)>:
c00115b8:	55                   	push   ebp
c00115b9:	89 e5                	mov    ebp,esp
c00115bb:	83 ec 18             	sub    esp,0x18
c00115be:	83 ec 0c             	sub    esp,0xc
c00115c1:	6a 68                	push   0x68
c00115c3:	e8 34 e3 ff ff       	call   c000f8fc <malloc>
c00115c8:	83 c4 10             	add    esp,0x10
c00115cb:	89 c2                	mov    edx,eax
c00115cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d9:	83 ec 04             	sub    esp,0x4
c00115dc:	6a 68                	push   0x68
c00115de:	6a 00                	push   0x0
c00115e0:	50                   	push   eax
c00115e1:	e8 92 f1 fe ff       	call   c0000778 <memset>
c00115e6:	83 c4 10             	add    esp,0x10
c00115e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ef:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00115f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115fb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011607:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001160a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001160d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011610:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011613:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001161f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011637:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001163d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011640:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011643:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001164f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001165b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001165e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011667:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001166a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001166d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011670:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011673:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001167a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011680:	0f 20 da             	mov    edx,cr3
c0011683:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011686:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011689:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001168c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011692:	83 ec 08             	sub    esp,0x8
c0011695:	50                   	push   eax
c0011696:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011699:	50                   	push   eax
c001169a:	e8 3b da ff ff       	call   c000f0da <GDTEntry::setBase(unsigned int)>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	83 ec 08             	sub    esp,0x8
c00116a5:	6a 68                	push   0x68
c00116a7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00116aa:	50                   	push   eax
c00116ab:	e8 46 da ff ff       	call   c000f0f6 <GDTEntry::setLimit(unsigned int)>
c00116b0:	83 c4 10             	add    esp,0x10
c00116b3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00116b7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00116ba:	83 e0 0f             	and    eax,0xf
c00116bd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00116c0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00116c3:	83 c8 40             	or     eax,0x40
c00116c6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00116c9:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00116ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00116d4:	05 78 01 00 00       	add    eax,0x178
c00116d9:	83 ec 04             	sub    esp,0x4
c00116dc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00116df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00116e2:	50                   	push   eax
c00116e3:	e8 42 da ff ff       	call   c000f12a <GDT::addEntry(GDTEntry)>
c00116e8:	83 c4 10             	add    esp,0x10
c00116eb:	89 c2                	mov    edx,eax
c00116ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f0:	89 10                	mov    DWORD PTR [eax],edx
c00116f2:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00116f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00116fd:	05 78 01 00 00       	add    eax,0x178
c0011702:	83 ec 0c             	sub    esp,0xc
c0011705:	50                   	push   eax
c0011706:	e8 63 da ff ff       	call   c000f16e <GDT::flush()>
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011711:	8b 00                	mov    eax,DWORD PTR [eax]
c0011713:	83 ec 08             	sub    esp,0x8
c0011716:	50                   	push   eax
c0011717:	68 f4 a5 02 c0       	push   0xc002a5f4
c001171c:	e8 e6 18 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0011721:	83 c4 10             	add    esp,0x10
c0011724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011727:	8b 00                	mov    eax,DWORD PTR [eax]
c0011729:	c9                   	leave  
c001172a:	c3                   	ret    
c001172b:	90                   	nop

c001172c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001172c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011730:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011737:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001173c:	75 08                	jne    c0011746 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001173e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011744:	eb 38                	jmp    c001177e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011746:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001174b:	75 17                	jne    c0011764 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001174d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011752:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011755:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001175b:	8b 10                	mov    edx,DWORD PTR [eax]
c001175d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011761:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011764:	89 c1                	mov    ecx,eax
c0011766:	83 e1 fd             	and    ecx,0xfffffffd
c0011769:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001176f:	74 cd                	je     c001173e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011771:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011776:	83 e0 ef             	and    eax,0xffffffef
c0011779:	83 f8 08             	cmp    eax,0x8
c001177c:	76 c0                	jbe    c001173e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001177e:	31 c0                	xor    eax,eax
c0011780:	c3                   	ret    
c0011781:	90                   	nop

c0011782 <ReservedFilename::isAtty()>:
c0011782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011786:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011789:	31 c0                	xor    eax,eax
c001178b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011791:	74 09                	je     c001179c <ReservedFilename::isAtty()+0x1a>
c0011793:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011799:	0f 94 c0             	sete   al
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <ReservedFilename::write(unsigned long long, void*, int*)>:
c001179e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00117a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117ad:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00117b2:	75 08                	jne    c00117bc <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00117b4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00117ba:	eb 3d                	jmp    c00117f9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00117bc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00117c1:	75 17                	jne    c00117da <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00117c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117cb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00117d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00117d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117d7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00117da:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117df:	75 04                	jne    c00117e5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00117e1:	89 0a                	mov    DWORD PTR [edx],ecx
c00117e3:	eb 14                	jmp    c00117f9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00117e5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00117ea:	74 c8                	je     c00117b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00117ec:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00117f1:	83 e0 ef             	and    eax,0xffffffef
c00117f4:	83 f8 08             	cmp    eax,0x8
c00117f7:	76 bb                	jbe    c00117b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00117f9:	31 c0                	xor    eax,eax
c00117fb:	c3                   	ret    

c00117fc <UnixFile::getFileDescriptor()>:
c00117fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011800:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011803:	c3                   	ret    

c0011804 <UnixFile::UnixFile(int)>:
c0011804:	53                   	push   ebx
c0011805:	83 ec 28             	sub    esp,0x28
c0011808:	ba e0 a6 02 c0       	mov    edx,0xc002a6e0
c001180d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011811:	89 10                	mov    DWORD PTR [eax],edx
c0011813:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001181b:	0f 8f 8c 01 00 00    	jg     c00119ad <UnixFile::UnixFile(int)+0x1a9>
c0011821:	a1 00 d7 02 c0       	mov    eax,ds:0xc002d700
c0011826:	8d 50 01             	lea    edx,[eax+0x1]
c0011829:	89 15 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,edx
c001182f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011833:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011836:	83 ec 08             	sub    esp,0x8
c0011839:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001183d:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011842:	e8 e9 6f 01 00       	call   c0028830 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011847:	83 c4 10             	add    esp,0x10
c001184a:	a0 d4 e8 02 c0       	mov    al,ds:0xc002e8d4
c001184f:	83 f0 01             	xor    eax,0x1
c0011852:	84 c0                	test   al,al
c0011854:	0f 84 54 01 00 00    	je     c00119ae <UnixFile::UnixFile(int)+0x1aa>
c001185a:	c6 05 d4 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e8d4,0x1
c0011861:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011869:	83 ec 0c             	sub    esp,0xc
c001186c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011870:	e8 87 e0 ff ff       	call   c000f8fc <malloc>
c0011875:	83 c4 10             	add    esp,0x10
c0011878:	89 c3                	mov    ebx,eax
c001187a:	83 ec 08             	sub    esp,0x8
c001187d:	68 03 ff ff 0f       	push   0xfffff03
c0011882:	53                   	push   ebx
c0011883:	e8 2c 01 00 00       	call   c00119b4 <ReservedFilename::ReservedFilename(int)>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	89 1d cc e8 02 c0    	mov    DWORD PTR ds:0xc002e8cc,ebx
c0011891:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011899:	83 ec 0c             	sub    esp,0xc
c001189c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a0:	e8 57 e0 ff ff       	call   c000f8fc <malloc>
c00118a5:	83 c4 10             	add    esp,0x10
c00118a8:	89 c3                	mov    ebx,eax
c00118aa:	83 ec 08             	sub    esp,0x8
c00118ad:	68 01 ff ff 0f       	push   0xfffff01
c00118b2:	53                   	push   ebx
c00118b3:	e8 fc 00 00 00       	call   c00119b4 <ReservedFilename::ReservedFilename(int)>
c00118b8:	83 c4 10             	add    esp,0x10
c00118bb:	89 1d d0 e8 02 c0    	mov    DWORD PTR ds:0xc002e8d0,ebx
c00118c1:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00118c9:	83 ec 0c             	sub    esp,0xc
c00118cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00118d0:	e8 27 e0 ff ff       	call   c000f8fc <malloc>
c00118d5:	83 c4 10             	add    esp,0x10
c00118d8:	89 c3                	mov    ebx,eax
c00118da:	83 ec 08             	sub    esp,0x8
c00118dd:	68 00 ff ff 0f       	push   0xfffff00
c00118e2:	53                   	push   ebx
c00118e3:	e8 cc 00 00 00       	call   c00119b4 <ReservedFilename::ReservedFilename(int)>
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	89 1d c4 e8 02 c0    	mov    DWORD PTR ds:0xc002e8c4,ebx
c00118f1:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00118f9:	83 ec 0c             	sub    esp,0xc
c00118fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011900:	e8 f7 df ff ff       	call   c000f8fc <malloc>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	89 c3                	mov    ebx,eax
c001190a:	83 ec 08             	sub    esp,0x8
c001190d:	68 02 ff ff 0f       	push   0xfffff02
c0011912:	53                   	push   ebx
c0011913:	e8 9c 00 00 00       	call   c00119b4 <ReservedFilename::ReservedFilename(int)>
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	89 1d c8 e8 02 c0    	mov    DWORD PTR ds:0xc002e8c8,ebx
c0011921:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011929:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001192e:	7f 7e                	jg     c00119ae <UnixFile::UnixFile(int)+0x1aa>
c0011930:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011938:	83 ec 0c             	sub    esp,0xc
c001193b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001193f:	e8 b8 df ff ff       	call   c000f8fc <malloc>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	89 c3                	mov    ebx,eax
c0011949:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001194d:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011952:	83 ec 08             	sub    esp,0x8
c0011955:	50                   	push   eax
c0011956:	53                   	push   ebx
c0011957:	e8 58 00 00 00       	call   c00119b4 <ReservedFilename::ReservedFilename(int)>
c001195c:	83 c4 10             	add    esp,0x10
c001195f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011963:	89 1c 85 a0 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1760],ebx
c001196a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011972:	83 ec 0c             	sub    esp,0xc
c0011975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011979:	e8 7e df ff ff       	call   c000f8fc <malloc>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	89 c3                	mov    ebx,eax
c0011983:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011987:	05 20 ff ff 0f       	add    eax,0xfffff20
c001198c:	83 ec 08             	sub    esp,0x8
c001198f:	50                   	push   eax
c0011990:	53                   	push   ebx
c0011991:	e8 1e 00 00 00       	call   c00119b4 <ReservedFilename::ReservedFilename(int)>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001199d:	89 1c 85 60 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd17a0],ebx
c00119a4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119a8:	e9 7c ff ff ff       	jmp    c0011929 <UnixFile::UnixFile(int)+0x125>
c00119ad:	90                   	nop
c00119ae:	83 c4 28             	add    esp,0x28
c00119b1:	5b                   	pop    ebx
c00119b2:	c3                   	ret    
c00119b3:	90                   	nop

c00119b4 <ReservedFilename::ReservedFilename(int)>:
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119bb:	83 ec 08             	sub    esp,0x8
c00119be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c2:	50                   	push   eax
c00119c3:	e8 3c fe ff ff       	call   c0011804 <UnixFile::UnixFile(int)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	ba fc a6 02 c0       	mov    edx,0xc002a6fc
c00119d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119d4:	89 10                	mov    DWORD PTR [eax],edx
c00119d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00119de:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119e1:	90                   	nop
c00119e2:	83 c4 0c             	add    esp,0xc
c00119e5:	c3                   	ret    

c00119e6 <UnixFile::~UnixFile()>:
c00119e6:	83 ec 1c             	sub    esp,0x1c
c00119e9:	ba e0 a6 02 c0       	mov    edx,0xc002a6e0
c00119ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119f2:	89 10                	mov    DWORD PTR [eax],edx
c00119f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119fb:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011a00:	7f 73                	jg     c0011a75 <UnixFile::~UnixFile()+0x8f>
c0011a02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a0a:	83 ec 0c             	sub    esp,0xc
c0011a0d:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011a12:	e8 ed 6e 01 00       	call   c0028904 <LinkedList<UnixFile>::getFirstElement()>
c0011a17:	83 c4 10             	add    esp,0x10
c0011a1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a1e:	83 ec 0c             	sub    esp,0xc
c0011a21:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011a26:	e8 e1 6e 01 00       	call   c002890c <LinkedList<UnixFile>::removeFirst()>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a32:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011a36:	74 40                	je     c0011a78 <UnixFile::~UnixFile()+0x92>
c0011a38:	83 ec 08             	sub    esp,0x8
c0011a3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011a3f:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011a44:	e8 e7 6d 01 00       	call   c0028830 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a50:	8d 50 01             	lea    edx,[eax+0x1]
c0011a53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a57:	3d 88 13 00 00       	cmp    eax,0x1388
c0011a5c:	0f 94 c0             	sete   al
c0011a5f:	84 c0                	test   al,al
c0011a61:	74 a7                	je     c0011a0a <UnixFile::~UnixFile()+0x24>
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 b8 a6 02 c0       	push   0xc002a6b8
c0011a6b:	e8 49 8c 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0011a70:	83 c4 10             	add    esp,0x10
c0011a73:	eb 95                	jmp    c0011a0a <UnixFile::~UnixFile()+0x24>
c0011a75:	90                   	nop
c0011a76:	eb 01                	jmp    c0011a79 <UnixFile::~UnixFile()+0x93>
c0011a78:	90                   	nop
c0011a79:	90                   	nop
c0011a7a:	83 c4 1c             	add    esp,0x1c
c0011a7d:	c3                   	ret    

c0011a7e <UnixFile::~UnixFile()>:
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	83 ec 0c             	sub    esp,0xc
c0011a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a88:	e8 59 ff ff ff       	call   c00119e6 <UnixFile::~UnixFile()>
c0011a8d:	83 c4 10             	add    esp,0x10
c0011a90:	83 ec 08             	sub    esp,0x8
c0011a93:	6a 0c                	push   0xc
c0011a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a99:	e8 89 14 00 00       	call   c0012f27 <operator delete(void*, unsigned long)>
c0011a9e:	83 c4 10             	add    esp,0x10
c0011aa1:	83 c4 0c             	add    esp,0xc
c0011aa4:	c3                   	ret    
c0011aa5:	90                   	nop

c0011aa6 <ReservedFilename::~ReservedFilename()>:
c0011aa6:	83 ec 0c             	sub    esp,0xc
c0011aa9:	ba fc a6 02 c0       	mov    edx,0xc002a6fc
c0011aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ab2:	89 10                	mov    DWORD PTR [eax],edx
c0011ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ab8:	83 ec 0c             	sub    esp,0xc
c0011abb:	50                   	push   eax
c0011abc:	e8 25 ff ff ff       	call   c00119e6 <UnixFile::~UnixFile()>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	90                   	nop
c0011ac5:	83 c4 0c             	add    esp,0xc
c0011ac8:	c3                   	ret    
c0011ac9:	90                   	nop

c0011aca <ReservedFilename::~ReservedFilename()>:
c0011aca:	83 ec 0c             	sub    esp,0xc
c0011acd:	83 ec 0c             	sub    esp,0xc
c0011ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ad4:	e8 cd ff ff ff       	call   c0011aa6 <ReservedFilename::~ReservedFilename()>
c0011ad9:	83 c4 10             	add    esp,0x10
c0011adc:	83 ec 08             	sub    esp,0x8
c0011adf:	6a 0c                	push   0xc
c0011ae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ae5:	e8 3d 14 00 00       	call   c0012f27 <operator delete(void*, unsigned long)>
c0011aea:	83 c4 10             	add    esp,0x10
c0011aed:	83 c4 0c             	add    esp,0xc
c0011af0:	c3                   	ret    

c0011af1 <getFromFileDescriptor(int)>:
c0011af1:	53                   	push   ebx
c0011af2:	83 ec 08             	sub    esp,0x8
c0011af5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011af9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011aff:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011b05:	7f 2c                	jg     c0011b33 <getFromFileDescriptor(int)+0x42>
c0011b07:	83 ec 0c             	sub    esp,0xc
c0011b0a:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011b0f:	e8 f0 6d 01 00       	call   c0028904 <LinkedList<UnixFile>::getFirstElement()>
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	85 c0                	test   eax,eax
c0011b19:	75 04                	jne    c0011b1f <getFromFileDescriptor(int)+0x2e>
c0011b1b:	31 c0                	xor    eax,eax
c0011b1d:	eb 6e                	jmp    c0011b8d <getFromFileDescriptor(int)+0x9c>
c0011b1f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011b22:	74 69                	je     c0011b8d <getFromFileDescriptor(int)+0x9c>
c0011b24:	52                   	push   edx
c0011b25:	52                   	push   edx
c0011b26:	50                   	push   eax
c0011b27:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011b2c:	e8 7d 6e 01 00       	call   c00289ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011b31:	eb e1                	jmp    c0011b14 <getFromFileDescriptor(int)+0x23>
c0011b33:	a1 cc e8 02 c0       	mov    eax,ds:0xc002e8cc
c0011b38:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011b3e:	74 4d                	je     c0011b8d <getFromFileDescriptor(int)+0x9c>
c0011b40:	a1 d0 e8 02 c0       	mov    eax,ds:0xc002e8d0
c0011b45:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011b4b:	74 40                	je     c0011b8d <getFromFileDescriptor(int)+0x9c>
c0011b4d:	a1 c8 e8 02 c0       	mov    eax,ds:0xc002e8c8
c0011b52:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011b58:	74 33                	je     c0011b8d <getFromFileDescriptor(int)+0x9c>
c0011b5a:	a1 c4 e8 02 c0       	mov    eax,ds:0xc002e8c4
c0011b5f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011b65:	74 26                	je     c0011b8d <getFromFileDescriptor(int)+0x9c>
c0011b67:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011b6d:	83 f8 08             	cmp    eax,0x8
c0011b70:	77 09                	ja     c0011b7b <getFromFileDescriptor(int)+0x8a>
c0011b72:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0011b79:	eb 12                	jmp    c0011b8d <getFromFileDescriptor(int)+0x9c>
c0011b7b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011b81:	83 fb 08             	cmp    ebx,0x8
c0011b84:	77 95                	ja     c0011b1b <getFromFileDescriptor(int)+0x2a>
c0011b86:	8b 04 9d 60 e8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd17a0]
c0011b8d:	83 c4 08             	add    esp,0x8
c0011b90:	5b                   	pop    ebx
c0011b91:	c3                   	ret    

c0011b92 <__static_initialization_and_destruction_0(int, int)>:
c0011b92:	83 ec 0c             	sub    esp,0xc
c0011b95:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011b9a:	75 34                	jne    c0011bd0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b9c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ba4:	75 2a                	jne    c0011bd0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ba6:	83 ec 0c             	sub    esp,0xc
c0011ba9:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011bae:	e8 25 6c 01 00       	call   c00287d8 <LinkedList<UnixFile>::LinkedList()>
c0011bb3:	83 c4 10             	add    esp,0x10
c0011bb6:	83 ec 04             	sub    esp,0x4
c0011bb9:	68 88 d6 02 c0       	push   0xc002d688
c0011bbe:	68 d8 e8 02 c0       	push   0xc002e8d8
c0011bc3:	68 d6 87 02 c0       	push   0xc00287d6
c0011bc8:	e8 d4 12 00 00       	call   c0012ea1 <__cxa_atexit>
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	90                   	nop
c0011bd1:	83 c4 0c             	add    esp,0xc
c0011bd4:	c3                   	ret    

c0011bd5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011bd5:	83 ec 0c             	sub    esp,0xc
c0011bd8:	83 ec 08             	sub    esp,0x8
c0011bdb:	68 ff ff 00 00       	push   0xffff
c0011be0:	6a 01                	push   0x1
c0011be2:	e8 ab ff ff ff       	call   c0011b92 <__static_initialization_and_destruction_0(int, int)>
c0011be7:	83 c4 10             	add    esp,0x10
c0011bea:	83 c4 0c             	add    esp,0xc
c0011bed:	c3                   	ret    

c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011bee:	53                   	push   ebx
c0011bef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bf3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bf7:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011bfd:	89 c8                	mov    eax,ecx
c0011bff:	d1 e8                	shr    eax,1
c0011c01:	03 05 08 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d708
c0011c07:	83 e1 01             	and    ecx,0x1
c0011c0a:	8a 10                	mov    dl,BYTE PTR [eax]
c0011c0c:	75 09                	jne    c0011c17 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011c0e:	83 e2 f0             	and    edx,0xfffffff0
c0011c11:	09 da                	or     edx,ebx
c0011c13:	88 10                	mov    BYTE PTR [eax],dl
c0011c15:	5b                   	pop    ebx
c0011c16:	c3                   	ret    
c0011c17:	c1 e3 04             	shl    ebx,0x4
c0011c1a:	83 e2 0f             	and    edx,0xf
c0011c1d:	09 da                	or     edx,ebx
c0011c1f:	88 10                	mov    BYTE PTR [eax],dl
c0011c21:	5b                   	pop    ebx
c0011c22:	c3                   	ret    

c0011c23 <Virt::getPageState(unsigned long)>:
c0011c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c27:	8b 0d 08 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d708
c0011c2d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011c33:	89 d0                	mov    eax,edx
c0011c35:	d1 e8                	shr    eax,1
c0011c37:	83 e2 01             	and    edx,0x1
c0011c3a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011c3d:	75 04                	jne    c0011c43 <Virt::getPageState(unsigned long)+0x20>
c0011c3f:	83 e0 0f             	and    eax,0xf
c0011c42:	c3                   	ret    
c0011c43:	c0 e8 04             	shr    al,0x4
c0011c46:	c3                   	ret    

c0011c47 <Virt::allocateKernelVirtualPages(int)>:
c0011c47:	55                   	push   ebp
c0011c48:	31 ed                	xor    ebp,ebp
c0011c4a:	57                   	push   edi
c0011c4b:	56                   	push   esi
c0011c4c:	53                   	push   ebx
c0011c4d:	31 db                	xor    ebx,ebx
c0011c4f:	83 ec 1c             	sub    esp,0x1c
c0011c52:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011c56:	8b 3d 04 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d704
c0011c5c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011c61:	57                   	push   edi
c0011c62:	e8 bc ff ff ff       	call   c0011c23 <Virt::getPageState(unsigned long)>
c0011c67:	5a                   	pop    edx
c0011c68:	84 c0                	test   al,al
c0011c6a:	75 3a                	jne    c0011ca6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011c6c:	85 db                	test   ebx,ebx
c0011c6e:	75 02                	jne    c0011c72 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011c70:	89 fd                	mov    ebp,edi
c0011c72:	43                   	inc    ebx
c0011c73:	39 f3                	cmp    ebx,esi
c0011c75:	74 5a                	je     c0011cd1 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011c77:	47                   	inc    edi
c0011c78:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c7e:	76 31                	jbe    c0011cb1 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011c80:	c7 05 04 d7 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d704,0xc8000
c0011c8a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c8f:	75 28                	jne    c0011cb9 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011c91:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011c96:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011c9b:	57                   	push   edi
c0011c9c:	e8 82 ff ff ff       	call   c0011c23 <Virt::getPageState(unsigned long)>
c0011ca1:	5a                   	pop    edx
c0011ca2:	84 c0                	test   al,al
c0011ca4:	74 c6                	je     c0011c6c <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ca6:	31 db                	xor    ebx,ebx
c0011ca8:	47                   	inc    edi
c0011ca9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011caf:	77 cf                	ja     c0011c80 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011cb1:	89 3d 04 d7 02 c0    	mov    DWORD PTR ds:0xc002d704,edi
c0011cb7:	eb a8                	jmp    c0011c61 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011cb9:	83 ec 0c             	sub    esp,0xc
c0011cbc:	68 10 a7 02 c0       	push   0xc002a710
c0011cc1:	e8 f3 89 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0011cc6:	8b 3d 04 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d704
c0011ccc:	83 c4 10             	add    esp,0x10
c0011ccf:	eb 90                	jmp    c0011c61 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011cd1:	89 2d 04 d7 02 c0    	mov    DWORD PTR ds:0xc002d704,ebp
c0011cd7:	4b                   	dec    ebx
c0011cd8:	74 5f                	je     c0011d39 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011cda:	85 f6                	test   esi,esi
c0011cdc:	74 3d                	je     c0011d1b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011cde:	89 e8                	mov    eax,ebp
c0011ce0:	31 db                	xor    ebx,ebx
c0011ce2:	8d 7e ff             	lea    edi,[esi-0x1]
c0011ce5:	eb 14                	jmp    c0011cfb <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011ce7:	6a 01                	push   0x1
c0011ce9:	43                   	inc    ebx
c0011cea:	50                   	push   eax
c0011ceb:	e8 fe fe ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cf0:	58                   	pop    eax
c0011cf1:	39 f3                	cmp    ebx,esi
c0011cf3:	5a                   	pop    edx
c0011cf4:	74 25                	je     c0011d1b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011cf6:	a1 04 d7 02 c0       	mov    eax,ds:0xc002d704
c0011cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cfe:	85 db                	test   ebx,ebx
c0011d00:	89 15 04 d7 02 c0    	mov    DWORD PTR ds:0xc002d704,edx
c0011d06:	74 20                	je     c0011d28 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011d08:	39 df                	cmp    edi,ebx
c0011d0a:	75 db                	jne    c0011ce7 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011d0c:	6a 03                	push   0x3
c0011d0e:	43                   	inc    ebx
c0011d0f:	50                   	push   eax
c0011d10:	e8 d9 fe ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d15:	59                   	pop    ecx
c0011d16:	39 f3                	cmp    ebx,esi
c0011d18:	58                   	pop    eax
c0011d19:	75 db                	jne    c0011cf6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011d1b:	83 c4 1c             	add    esp,0x1c
c0011d1e:	89 e8                	mov    eax,ebp
c0011d20:	5b                   	pop    ebx
c0011d21:	c1 e0 0c             	shl    eax,0xc
c0011d24:	5e                   	pop    esi
c0011d25:	5f                   	pop    edi
c0011d26:	5d                   	pop    ebp
c0011d27:	c3                   	ret    
c0011d28:	6a 02                	push   0x2
c0011d2a:	bb 01 00 00 00       	mov    ebx,0x1
c0011d2f:	50                   	push   eax
c0011d30:	e8 b9 fe ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d35:	58                   	pop    eax
c0011d36:	5a                   	pop    edx
c0011d37:	eb bd                	jmp    c0011cf6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011d39:	6a 04                	push   0x4
c0011d3b:	8d 45 01             	lea    eax,[ebp+0x1]
c0011d3e:	55                   	push   ebp
c0011d3f:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c0011d44:	e8 a5 fe ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d49:	59                   	pop    ecx
c0011d4a:	89 e8                	mov    eax,ebp
c0011d4c:	5b                   	pop    ebx
c0011d4d:	c1 e0 0c             	shl    eax,0xc
c0011d50:	83 c4 1c             	add    esp,0x1c
c0011d53:	5b                   	pop    ebx
c0011d54:	5e                   	pop    esi
c0011d55:	5f                   	pop    edi
c0011d56:	5d                   	pop    ebp
c0011d57:	c3                   	ret    

c0011d58 <Virt::freeSwapfilePage(unsigned long)>:
c0011d58:	53                   	push   ebx
c0011d59:	8b 15 e4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8e4
c0011d5f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011d63:	b8 01 00 00 00       	mov    eax,0x1
c0011d68:	89 cb                	mov    ebx,ecx
c0011d6a:	d3 e0                	shl    eax,cl
c0011d6c:	c1 eb 05             	shr    ebx,0x5
c0011d6f:	f7 d0                	not    eax
c0011d71:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011d74:	5b                   	pop    ebx
c0011d75:	c3                   	ret    

c0011d76 <Virt::swapIDToSector(unsigned long)>:
c0011d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d7a:	0f af 05 0c d7 02 c0 	imul   eax,DWORD PTR ds:0xc002d70c
c0011d81:	03 05 14 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d714
c0011d87:	c3                   	ret    

c0011d88 <Virt::allocateSwapfilePage()>:
c0011d88:	55                   	push   ebp
c0011d89:	31 d2                	xor    edx,edx
c0011d8b:	57                   	push   edi
c0011d8c:	56                   	push   esi
c0011d8d:	53                   	push   ebx
c0011d8e:	83 ec 0c             	sub    esp,0xc
c0011d91:	8b 0d 0c d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d70c
c0011d97:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c0011d9c:	f7 f1                	div    ecx
c0011d9e:	39 0d 10 d7 02 c0    	cmp    DWORD PTR ds:0xc002d710,ecx
c0011da4:	72 2d                	jb     c0011dd3 <Virt::allocateSwapfilePage()+0x4b>
c0011da6:	8b 35 e4 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8e4
c0011dac:	8b 16                	mov    edx,DWORD PTR [esi]
c0011dae:	f6 c2 01             	test   dl,0x1
c0011db1:	74 3c                	je     c0011def <Virt::allocateSwapfilePage()+0x67>
c0011db3:	31 c9                	xor    ecx,ecx
c0011db5:	bf 01 00 00 00       	mov    edi,0x1
c0011dba:	eb 12                	jmp    c0011dce <Virt::allocateSwapfilePage()+0x46>
c0011dbc:	89 fd                	mov    ebp,edi
c0011dbe:	89 ca                	mov    edx,ecx
c0011dc0:	d3 e5                	shl    ebp,cl
c0011dc2:	c1 ea 05             	shr    edx,0x5
c0011dc5:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011dc8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dca:	85 ea                	test   edx,ebp
c0011dcc:	74 2a                	je     c0011df8 <Virt::allocateSwapfilePage()+0x70>
c0011dce:	41                   	inc    ecx
c0011dcf:	39 c8                	cmp    eax,ecx
c0011dd1:	77 e9                	ja     c0011dbc <Virt::allocateSwapfilePage()+0x34>
c0011dd3:	83 ec 0c             	sub    esp,0xc
c0011dd6:	68 82 a9 02 c0       	push   0xc002a982
c0011ddb:	e8 d9 88 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0011de0:	83 c4 10             	add    esp,0x10
c0011de3:	31 c9                	xor    ecx,ecx
c0011de5:	83 c4 0c             	add    esp,0xc
c0011de8:	89 c8                	mov    eax,ecx
c0011dea:	5b                   	pop    ebx
c0011deb:	5e                   	pop    esi
c0011dec:	5f                   	pop    edi
c0011ded:	5d                   	pop    ebp
c0011dee:	c3                   	ret    
c0011def:	89 f3                	mov    ebx,esi
c0011df1:	bd 01 00 00 00       	mov    ebp,0x1
c0011df6:	31 c9                	xor    ecx,ecx
c0011df8:	09 ea                	or     edx,ebp
c0011dfa:	89 c8                	mov    eax,ecx
c0011dfc:	89 13                	mov    DWORD PTR [ebx],edx
c0011dfe:	83 c4 0c             	add    esp,0xc
c0011e01:	5b                   	pop    ebx
c0011e02:	5e                   	pop    esi
c0011e03:	5f                   	pop    edi
c0011e04:	5d                   	pop    ebp
c0011e05:	c3                   	ret    

c0011e06 <Virt::virtualMemorySetup()>:
c0011e06:	53                   	push   ebx
c0011e07:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011e0c:	83 ec 08             	sub    esp,0x8
c0011e0f:	6a 0f                	push   0xf
c0011e11:	53                   	push   ebx
c0011e12:	43                   	inc    ebx
c0011e13:	e8 d6 fd ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e18:	59                   	pop    ecx
c0011e19:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011e1f:	58                   	pop    eax
c0011e20:	75 ed                	jne    c0011e0f <Virt::virtualMemorySetup()+0x9>
c0011e22:	83 ec 08             	sub    esp,0x8
c0011e25:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011e2a:	68 00 00 00 c8       	push   0xc8000000
c0011e2f:	68 99 a9 02 c0       	push   0xc002a999
c0011e34:	e8 ce 11 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0011e39:	58                   	pop    eax
c0011e3a:	5a                   	pop    edx
c0011e3b:	68 00 f0 ff ef       	push   0xeffff000
c0011e40:	68 ad a9 02 c0       	push   0xc002a9ad
c0011e45:	e8 bd 11 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	83 ec 08             	sub    esp,0x8
c0011e50:	6a 00                	push   0x0
c0011e52:	53                   	push   ebx
c0011e53:	43                   	inc    ebx
c0011e54:	e8 95 fd ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e59:	83 c4 10             	add    esp,0x10
c0011e5c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011e62:	75 e9                	jne    c0011e4d <Virt::virtualMemorySetup()+0x47>
c0011e64:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011e69:	83 ec 08             	sub    esp,0x8
c0011e6c:	6a 0f                	push   0xf
c0011e6e:	53                   	push   ebx
c0011e6f:	43                   	inc    ebx
c0011e70:	e8 79 fd ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011e7e:	75 e9                	jne    c0011e69 <Virt::virtualMemorySetup()+0x63>
c0011e80:	83 c4 08             	add    esp,0x8
c0011e83:	5b                   	pop    ebx
c0011e84:	c3                   	ret    

c0011e85 <Virt::swappingSetup()>:
c0011e85:	83 ec 14             	sub    esp,0x14
c0011e88:	31 d2                	xor    edx,edx
c0011e8a:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c0011e8f:	f7 35 0c d7 02 c0    	div    DWORD PTR ds:0xc002d70c
c0011e95:	c1 e8 05             	shr    eax,0x5
c0011e98:	50                   	push   eax
c0011e99:	68 c1 a9 02 c0       	push   0xc002a9c1
c0011e9e:	e8 64 11 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0011ea3:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c0011ea8:	31 d2                	xor    edx,edx
c0011eaa:	f7 35 0c d7 02 c0    	div    DWORD PTR ds:0xc002d70c
c0011eb0:	c1 e8 05             	shr    eax,0x5
c0011eb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0011eb6:	e8 41 da ff ff       	call   c000f8fc <malloc>
c0011ebb:	83 c4 0c             	add    esp,0xc
c0011ebe:	89 c1                	mov    ecx,eax
c0011ec0:	a3 e4 e8 02 c0       	mov    ds:0xc002e8e4,eax
c0011ec5:	31 d2                	xor    edx,edx
c0011ec7:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c0011ecc:	f7 35 0c d7 02 c0    	div    DWORD PTR ds:0xc002d70c
c0011ed2:	c1 e8 05             	shr    eax,0x5
c0011ed5:	50                   	push   eax
c0011ed6:	6a 00                	push   0x0
c0011ed8:	51                   	push   ecx
c0011ed9:	e8 9a e8 fe ff       	call   c0000778 <memset>
c0011ede:	83 c4 1c             	add    esp,0x1c
c0011ee1:	c3                   	ret    

c0011ee2 <Virt::getAKernelVAS()>:
c0011ee2:	a1 e8 e8 02 c0       	mov    eax,ds:0xc002e8e8
c0011ee7:	c3                   	ret    

c0011ee8 <Virt::setupPageSwapping(int)>:
c0011ee8:	57                   	push   edi
c0011ee9:	56                   	push   esi
c0011eea:	53                   	push   ebx
c0011eeb:	83 ec 1c             	sub    esp,0x1c
c0011eee:	68 14 01 00 00       	push   0x114
c0011ef3:	e8 04 da ff ff       	call   c000f8fc <malloc>
c0011ef8:	83 c4 0c             	add    esp,0xc
c0011efb:	89 c6                	mov    esi,eax
c0011efd:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c0011f03:	68 dc a9 02 c0       	push   0xc002a9dc
c0011f08:	50                   	push   eax
c0011f09:	e8 52 16 00 00       	call   c0013560 <File::File(char const*, Process*)>
c0011f0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f11:	e8 26 18 00 00       	call   c001373c <File::unlink()>
c0011f16:	58                   	pop    eax
c0011f17:	5a                   	pop    edx
c0011f18:	6a 12                	push   0x12
c0011f1a:	56                   	push   esi
c0011f1b:	e8 a4 16 00 00       	call   c00135c4 <File::open(FileOpenMode)>
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	85 c0                	test   eax,eax
c0011f25:	0f 85 ca 00 00 00    	jne    c0011ff5 <Virt::setupPageSwapping(int)+0x10d>
c0011f2b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f2f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f37:	c1 e3 08             	shl    ebx,0x8
c0011f3a:	83 ec 0c             	sub    esp,0xc
c0011f3d:	68 00 00 01 00       	push   0x10000
c0011f42:	e8 b5 d9 ff ff       	call   c000f8fc <malloc>
c0011f47:	83 c4 0c             	add    esp,0xc
c0011f4a:	89 c7                	mov    edi,eax
c0011f4c:	68 00 00 01 00       	push   0x10000
c0011f51:	6a 00                	push   0x0
c0011f53:	50                   	push   eax
c0011f54:	e8 1f e8 fe ff       	call   c0000778 <memset>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	85 db                	test   ebx,ebx
c0011f5e:	79 03                	jns    c0011f63 <Virt::setupPageSwapping(int)+0x7b>
c0011f60:	83 c3 0f             	add    ebx,0xf
c0011f63:	c1 fb 04             	sar    ebx,0x4
c0011f66:	4b                   	dec    ebx
c0011f67:	83 fb ff             	cmp    ebx,0xffffffff
c0011f6a:	74 4b                	je     c0011fb7 <Virt::setupPageSwapping(int)+0xcf>
c0011f6c:	83 ec 0c             	sub    esp,0xc
c0011f6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f71:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f75:	52                   	push   edx
c0011f76:	57                   	push   edi
c0011f77:	6a 00                	push   0x0
c0011f79:	68 00 00 01 00       	push   0x10000
c0011f7e:	56                   	push   esi
c0011f7f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f82:	83 c4 20             	add    esp,0x20
c0011f85:	85 c0                	test   eax,eax
c0011f87:	75 59                	jne    c0011fe2 <Virt::setupPageSwapping(int)+0xfa>
c0011f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f8d:	3d 00 00 01 00       	cmp    eax,0x10000
c0011f92:	74 d2                	je     c0011f66 <Virt::setupPageSwapping(int)+0x7e>
c0011f94:	83 ec 08             	sub    esp,0x8
c0011f97:	4b                   	dec    ebx
c0011f98:	50                   	push   eax
c0011f99:	68 2f aa 02 c0       	push   0xc002aa2f
c0011f9e:	e8 64 10 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0011fa3:	c7 04 24 38 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa38
c0011faa:	e8 0a 87 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0011faf:	83 c4 10             	add    esp,0x10
c0011fb2:	83 fb ff             	cmp    ebx,0xffffffff
c0011fb5:	75 b5                	jne    c0011f6c <Virt::setupPageSwapping(int)+0x84>
c0011fb7:	83 ec 0c             	sub    esp,0xc
c0011fba:	56                   	push   esi
c0011fbb:	e8 62 16 00 00       	call   c0013622 <File::close()>
c0011fc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011fc3:	e8 54 d9 ff ff       	call   c000f91c <rfree>
c0011fc8:	83 c4 10             	add    esp,0x10
c0011fcb:	85 f6                	test   esi,esi
c0011fcd:	74 0c                	je     c0011fdb <Virt::setupPageSwapping(int)+0xf3>
c0011fcf:	83 ec 0c             	sub    esp,0xc
c0011fd2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011fd4:	56                   	push   esi
c0011fd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fd8:	83 c4 10             	add    esp,0x10
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	5b                   	pop    ebx
c0011fdf:	5e                   	pop    esi
c0011fe0:	5f                   	pop    edi
c0011fe1:	c3                   	ret    
c0011fe2:	83 ec 08             	sub    esp,0x8
c0011fe5:	50                   	push   eax
c0011fe6:	68 17 aa 02 c0       	push   0xc002aa17
c0011feb:	e8 17 10 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0011ff0:	83 c4 10             	add    esp,0x10
c0011ff3:	eb 94                	jmp    c0011f89 <Virt::setupPageSwapping(int)+0xa1>
c0011ff5:	83 ec 08             	sub    esp,0x8
c0011ff8:	50                   	push   eax
c0011ff9:	68 f3 a9 02 c0       	push   0xc002a9f3
c0011ffe:	e8 04 10 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012003:	c7 04 24 fc a9 02 c0 	mov    DWORD PTR [esp],0xc002a9fc
c001200a:	e8 aa 86 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c001200f:	83 c4 10             	add    esp,0x10
c0012012:	e9 14 ff ff ff       	jmp    c0011f2b <Virt::setupPageSwapping(int)+0x43>
c0012017:	90                   	nop

c0012018 <VAS::VAS()>:
c0012018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001201c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012027:	a3 e8 e8 02 c0       	mov    ds:0xc002e8e8,eax
c001202c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012030:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012038:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001203b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001203f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0012046:	90                   	nop
c0012047:	c3                   	ret    

c0012048 <VAS::VAS(VAS*)>:
c0012048:	83 ec 0c             	sub    esp,0xc
c001204b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001204f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	68 30 a7 02 c0       	push   0xc002a730
c001205e:	e8 56 86 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0012063:	83 c4 10             	add    esp,0x10
c0012066:	90                   	nop
c0012067:	83 c4 0c             	add    esp,0xc
c001206a:	c3                   	ret    
c001206b:	90                   	nop

c001206c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001206c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012070:	89 c2                	mov    edx,eax
c0012072:	c1 e8 0a             	shr    eax,0xa
c0012075:	c1 ea 16             	shr    edx,0x16
c0012078:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001207d:	19 c9                	sbb    ecx,ecx
c001207f:	c1 e2 0c             	shl    edx,0xc
c0012082:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012088:	25 fc 0f 00 00       	and    eax,0xffc
c001208d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012094:	01 d0                	add    eax,edx
c0012096:	c3                   	ret    
c0012097:	90                   	nop

c0012098 <VAS::getPageTableEntry(unsigned long)>:
c0012098:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001209c:	89 ca                	mov    edx,ecx
c001209e:	c1 e9 0a             	shr    ecx,0xa
c00120a1:	c1 ea 16             	shr    edx,0x16
c00120a4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00120aa:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00120b0:	c1 e0 0c             	shl    eax,0xc
c00120b3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00120b6:	c3                   	ret    

c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00120b7:	57                   	push   edi
c00120b8:	56                   	push   esi
c00120b9:	be 01 00 00 00       	mov    esi,0x1
c00120be:	53                   	push   ebx
c00120bf:	83 ec 10             	sub    esp,0x10
c00120c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120c6:	c1 eb 0c             	shr    ebx,0xc
c00120c9:	eb 3f                	jmp    c001210a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00120cb:	e8 12 fe ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c00120d0:	83 ec 08             	sub    esp,0x8
c00120d3:	57                   	push   edi
c00120d4:	50                   	push   eax
c00120d5:	e8 be ff ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c00120da:	83 c4 10             	add    esp,0x10
c00120dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00120df:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120e3:	f6 c4 04             	test   ah,0x4
c00120e6:	75 5f                	jne    c0012147 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00120e8:	80 fa 04             	cmp    dl,0x4
c00120eb:	74 78                	je     c0012165 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00120ed:	80 fa 02             	cmp    dl,0x2
c00120f0:	0f 84 88 00 00 00    	je     c001217e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00120f6:	80 fa 03             	cmp    dl,0x3
c00120f9:	0f 84 ad 00 00 00    	je     c00121ac <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00120ff:	fe ca                	dec    dl
c0012101:	0f 84 92 00 00 00    	je     c0012199 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012107:	43                   	inc    ebx
c0012108:	31 f6                	xor    esi,esi
c001210a:	53                   	push   ebx
c001210b:	e8 13 fb ff ff       	call   c0011c23 <Virt::getPageState(unsigned long)>
c0012110:	5f                   	pop    edi
c0012111:	89 df                	mov    edi,ebx
c0012113:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012117:	c1 e7 0c             	shl    edi,0xc
c001211a:	84 c0                	test   al,al
c001211c:	75 ad                	jne    c00120cb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001211e:	83 ec 0c             	sub    esp,0xc
c0012121:	68 3e aa 02 c0       	push   0xc002aa3e
c0012126:	e8 8e 85 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c001212b:	e8 b2 fd ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c0012130:	5a                   	pop    edx
c0012131:	59                   	pop    ecx
c0012132:	57                   	push   edi
c0012133:	50                   	push   eax
c0012134:	e8 5f ff ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c0012139:	83 c4 10             	add    esp,0x10
c001213c:	8b 00                	mov    eax,DWORD PTR [eax]
c001213e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012142:	f6 c4 04             	test   ah,0x4
c0012145:	74 c0                	je     c0012107 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012147:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001214b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012150:	83 ec 0c             	sub    esp,0xc
c0012153:	50                   	push   eax
c0012154:	e8 bb dd ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012160:	80 fa 04             	cmp    dl,0x4
c0012163:	75 88                	jne    c00120ed <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012165:	89 f0                	mov    eax,esi
c0012167:	84 c0                	test   al,al
c0012169:	75 47                	jne    c00121b2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001216b:	c7 44 24 20 54 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a754
c0012173:	83 c4 10             	add    esp,0x10
c0012176:	5b                   	pop    ebx
c0012177:	5e                   	pop    esi
c0012178:	5f                   	pop    edi
c0012179:	e9 3b 85 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>
c001217e:	89 f0                	mov    eax,esi
c0012180:	84 c0                	test   al,al
c0012182:	75 15                	jne    c0012199 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012184:	83 ec 0c             	sub    esp,0xc
c0012187:	68 5a aa 02 c0       	push   0xc002aa5a
c001218c:	e8 28 85 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0012191:	83 c4 10             	add    esp,0x10
c0012194:	e9 6e ff ff ff       	jmp    c0012107 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012199:	83 ec 08             	sub    esp,0x8
c001219c:	6a 00                	push   0x0
c001219e:	53                   	push   ebx
c001219f:	e8 4a fa ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	e9 5b ff ff ff       	jmp    c0012107 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00121ac:	89 f0                	mov    eax,esi
c00121ae:	84 c0                	test   al,al
c00121b0:	75 15                	jne    c00121c7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00121b2:	83 ec 08             	sub    esp,0x8
c00121b5:	6a 00                	push   0x0
c00121b7:	53                   	push   ebx
c00121b8:	e8 31 fa ff ff       	call   c0011bee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	83 c4 10             	add    esp,0x10
c00121c3:	5b                   	pop    ebx
c00121c4:	5e                   	pop    esi
c00121c5:	5f                   	pop    edi
c00121c6:	c3                   	ret    
c00121c7:	c7 44 24 20 76 aa 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aa76
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	5b                   	pop    ebx
c00121d3:	5e                   	pop    esi
c00121d4:	5f                   	pop    edi
c00121d5:	e9 df 84 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>

c00121da <VAS::freeAllocatedPages(unsigned long)>:
c00121da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00121e6:	74 09                	je     c00121f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00121e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00121ec:	e9 c6 fe ff ff       	jmp    c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>
c00121f1:	c7 44 24 04 78 a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a778
c00121f9:	e9 09 0e 00 00       	jmp    c0013007 <Dbg::kprintf(char const*, ...)>

c00121fe <VAS::virtualToPhysical(unsigned long)>:
c00121fe:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012202:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012206:	e8 8d fe ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c001220b:	5a                   	pop    edx
c001220c:	8b 00                	mov    eax,DWORD PTR [eax]
c001220e:	59                   	pop    ecx
c001220f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012214:	c3                   	ret    
c0012215:	90                   	nop

c0012216 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012216:	55                   	push   ebp
c0012217:	57                   	push   edi
c0012218:	56                   	push   esi
c0012219:	53                   	push   ebx
c001221a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001221e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012222:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012226:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001222a:	85 db                	test   ebx,ebx
c001222c:	7e 22                	jle    c0012250 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001222e:	c1 e3 0c             	shl    ebx,0xc
c0012231:	01 f3                	add    ebx,esi
c0012233:	56                   	push   esi
c0012234:	81 c6 00 10 00 00    	add    esi,0x1000
c001223a:	55                   	push   ebp
c001223b:	e8 58 fe ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c0012240:	5a                   	pop    edx
c0012241:	59                   	pop    ecx
c0012242:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012244:	21 f9                	and    ecx,edi
c0012246:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001224a:	39 f3                	cmp    ebx,esi
c001224c:	89 08                	mov    DWORD PTR [eax],ecx
c001224e:	75 e3                	jne    c0012233 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012250:	5b                   	pop    ebx
c0012251:	5e                   	pop    esi
c0012252:	5f                   	pop    edi
c0012253:	5d                   	pop    ebp
c0012254:	c3                   	ret    
c0012255:	90                   	nop

c0012256 <VAS::setToWriteCombining(unsigned long, int)>:
c0012256:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001225b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012261:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012268:	75 01                	jne    c001226b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001226a:	c3                   	ret    
c001226b:	68 80 00 00 00       	push   0x80
c0012270:	6a ff                	push   0xffffffff
c0012272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001227a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001227e:	e8 93 ff ff ff       	call   c0012216 <VAS::reflagRange(unsigned long, int, int, int)>
c0012283:	83 c4 14             	add    esp,0x14
c0012286:	c3                   	ret    
c0012287:	90                   	nop

c0012288 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012288:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001228d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012291:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012298:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001229b:	19 c0                	sbb    eax,eax
c001229d:	83 ca 03             	or     edx,0x3
c00122a0:	83 e0 fc             	and    eax,0xfffffffc
c00122a3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00122aa:	0f 20 d8             	mov    eax,cr3
c00122ad:	0f 22 d8             	mov    cr3,eax
c00122b0:	c3                   	ret    
c00122b1:	90                   	nop

c00122b2 <VAS::~VAS()>:
c00122b2:	83 ec 2c             	sub    esp,0x2c
c00122b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00122bd:	e8 1c bc 00 00       	call   c001dede <lockScheduler()>
c00122c2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122cc:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122d2:	83 ec 04             	sub    esp,0x4
c00122d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00122d9:	6a 01                	push   0x1
c00122db:	50                   	push   eax
c00122dc:	e8 a7 ff ff ff       	call   c0012288 <VAS::mapOtherVASIn(bool, VAS*)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00122ec:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00122f4:	0f 8f d7 00 00 00    	jg     c00123d1 <VAS::~VAS()+0x11f>
c00122fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012301:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012305:	c1 e2 02             	shl    edx,0x2
c0012308:	01 d0                	add    eax,edx
c001230a:	8b 00                	mov    eax,DWORD PTR [eax]
c001230c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012314:	83 e0 01             	and    eax,0x1
c0012317:	0f 84 ab 00 00 00    	je     c00123c8 <VAS::~VAS()+0x116>
c001231d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012325:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001232d:	7f 75                	jg     c00123a4 <VAS::~VAS()+0xf2>
c001232f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012333:	c1 e0 0a             	shl    eax,0xa
c0012336:	89 c2                	mov    edx,eax
c0012338:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001233c:	01 d0                	add    eax,edx
c001233e:	c1 e0 0c             	shl    eax,0xc
c0012341:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012345:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001234a:	8b 00                	mov    eax,DWORD PTR [eax]
c001234c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001234f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012355:	83 ec 04             	sub    esp,0x4
c0012358:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001235c:	6a 01                	push   0x1
c001235e:	50                   	push   eax
c001235f:	e8 08 fd ff ff       	call   c001206c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012364:	83 c4 10             	add    esp,0x10
c0012367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001236b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001236f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012371:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012375:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012379:	25 01 04 00 00       	and    eax,0x401
c001237e:	3d 01 04 00 00       	cmp    eax,0x401
c0012383:	75 19                	jne    c001239e <VAS::~VAS()+0xec>
c0012385:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012389:	25 00 f0 ff ff       	and    eax,0xfffff000
c001238e:	83 ec 0c             	sub    esp,0xc
c0012391:	50                   	push   eax
c0012392:	e8 7d db ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c0012397:	83 c4 10             	add    esp,0x10
c001239a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001239e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00123a2:	eb 81                	jmp    c0012325 <VAS::~VAS()+0x73>
c00123a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123a8:	25 00 04 00 00       	and    eax,0x400
c00123ad:	74 19                	je     c00123c8 <VAS::~VAS()+0x116>
c00123af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123b8:	83 ec 0c             	sub    esp,0xc
c00123bb:	50                   	push   eax
c00123bc:	e8 53 db ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c00123c1:	83 c4 10             	add    esp,0x10
c00123c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123c8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00123cc:	e9 1b ff ff ff       	jmp    c00122ec <VAS::~VAS()+0x3a>
c00123d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123d8:	83 ec 0c             	sub    esp,0xc
c00123db:	50                   	push   eax
c00123dc:	e8 d6 fc ff ff       	call   c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00123eb:	83 ec 0c             	sub    esp,0xc
c00123ee:	50                   	push   eax
c00123ef:	e8 20 db ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123ff:	c1 e0 02             	shl    eax,0x2
c0012402:	83 ec 08             	sub    esp,0x8
c0012405:	50                   	push   eax
c0012406:	68 9c a7 02 c0       	push   0xc002a79c
c001240b:	e8 f7 0b 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	e8 c8 ba 00 00       	call   c001dee0 <unlockScheduler()>
c0012418:	90                   	nop
c0012419:	83 c4 2c             	add    esp,0x2c
c001241c:	c3                   	ret    
c001241d:	90                   	nop

c001241e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001241e:	55                   	push   ebp
c001241f:	57                   	push   edi
c0012420:	56                   	push   esi
c0012421:	53                   	push   ebx
c0012422:	83 ec 1c             	sub    esp,0x1c
c0012425:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012429:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001242d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012433:	77 08                	ja     c001243d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012435:	0f 20 d8             	mov    eax,cr3
c0012438:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001243b:	75 47                	jne    c0012484 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001243d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012441:	09 d8                	or     eax,ebx
c0012443:	a9 ff 0f 00 00       	test   eax,0xfff
c0012448:	75 57                	jne    c00124a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001244a:	89 de                	mov    esi,ebx
c001244c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001244f:	c1 ee 16             	shr    esi,0x16
c0012452:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012459:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001245d:	74 54                	je     c00124b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001245f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012463:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012469:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001246d:	c1 e6 0c             	shl    esi,0xc
c0012470:	c1 eb 0a             	shr    ebx,0xa
c0012473:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012479:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001247c:	83 c4 1c             	add    esp,0x1c
c001247f:	5b                   	pop    ebx
c0012480:	5e                   	pop    esi
c0012481:	5f                   	pop    edi
c0012482:	5d                   	pop    ebp
c0012483:	c3                   	ret    
c0012484:	83 ec 0c             	sub    esp,0xc
c0012487:	68 bc a7 02 c0       	push   0xc002a7bc
c001248c:	e8 76 0b 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012491:	83 c4 10             	add    esp,0x10
c0012494:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012498:	09 d8                	or     eax,ebx
c001249a:	a9 ff 0f 00 00       	test   eax,0xfff
c001249f:	74 a9                	je     c001244a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00124a1:	83 ec 0c             	sub    esp,0xc
c00124a4:	68 24 a8 02 c0       	push   0xc002a824
c00124a9:	e8 0b 82 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c00124ae:	83 c4 10             	add    esp,0x10
c00124b1:	eb 97                	jmp    c001244a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00124b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124b7:	e8 e2 da ff ff       	call   c000ff9e <Phys::allocatePage()>
c00124bc:	89 c5                	mov    ebp,eax
c00124be:	e8 1f fa ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c00124c3:	83 ec 0c             	sub    esp,0xc
c00124c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124ca:	6a 01                	push   0x1
c00124cc:	e8 76 f7 ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c00124d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00124d8:	6a 01                	push   0x1
c00124da:	50                   	push   eax
c00124db:	55                   	push   ebp
c00124dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00124e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00124e6:	51                   	push   ecx
c00124e7:	e8 26 02 00 00       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124ec:	83 c4 1c             	add    esp,0x1c
c00124ef:	68 00 10 00 00       	push   0x1000
c00124f4:	6a 00                	push   0x0
c00124f6:	50                   	push   eax
c00124f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124fb:	e8 78 e2 fe ff       	call   c0000778 <memset>
c0012500:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012504:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012507:	e8 ab fb ff ff       	call   c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001250c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012510:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012519:	e9 41 ff ff ff       	jmp    c001245f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001251e <VAS::allocatePages(int, int)>:
c001251e:	55                   	push   ebp
c001251f:	57                   	push   edi
c0012520:	56                   	push   esi
c0012521:	53                   	push   ebx
c0012522:	83 ec 1c             	sub    esp,0x1c
c0012525:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012529:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001252e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012534:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001253a:	83 e0 01             	and    eax,0x1
c001253d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012541:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012545:	0f 85 cc 00 00 00    	jne    c0012617 <VAS::allocatePages(int, int)+0xf9>
c001254b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012552:	85 c0                	test   eax,eax
c0012554:	0f 84 a1 00 00 00    	je     c00125fb <VAS::allocatePages(int, int)+0xdd>
c001255a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001255e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012562:	c1 e6 0c             	shl    esi,0xc
c0012565:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012569:	85 c0                	test   eax,eax
c001256b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001256e:	7e 33                	jle    c00125a3 <VAS::allocatePages(int, int)+0x85>
c0012570:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012574:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012578:	81 cd 00 04 00 00    	or     ebp,0x400
c001257e:	e8 1b da ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012583:	55                   	push   ebp
c0012584:	53                   	push   ebx
c0012585:	50                   	push   eax
c0012586:	57                   	push   edi
c0012587:	e8 92 fe ff ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012594:	74 03                	je     c0012599 <VAS::allocatePages(int, int)+0x7b>
c0012596:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012599:	81 c3 00 10 00 00    	add    ebx,0x1000
c001259f:	39 de                	cmp    esi,ebx
c00125a1:	75 db                	jne    c001257e <VAS::allocatePages(int, int)+0x60>
c00125a3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125a8:	75 12                	jne    c00125bc <VAS::allocatePages(int, int)+0x9e>
c00125aa:	0f 20 d8             	mov    eax,cr3
c00125ad:	0f 22 d8             	mov    cr3,eax
c00125b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125b4:	83 c4 1c             	add    esp,0x1c
c00125b7:	5b                   	pop    ebx
c00125b8:	5e                   	pop    esi
c00125b9:	5f                   	pop    edi
c00125ba:	5d                   	pop    ebp
c00125bb:	c3                   	ret    
c00125bc:	c1 ee 0a             	shr    esi,0xa
c00125bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125c3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00125c9:	c1 eb 0a             	shr    ebx,0xa
c00125cc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00125d2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125d8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125de:	39 c3                	cmp    ebx,eax
c00125e0:	77 ce                	ja     c00125b0 <VAS::allocatePages(int, int)+0x92>
c00125e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125eb:	39 d8                	cmp    eax,ebx
c00125ed:	73 f3                	jae    c00125e2 <VAS::allocatePages(int, int)+0xc4>
c00125ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125f3:	83 c4 1c             	add    esp,0x1c
c00125f6:	5b                   	pop    ebx
c00125f7:	5e                   	pop    esi
c00125f8:	5f                   	pop    edi
c00125f9:	5d                   	pop    ebp
c00125fa:	c3                   	ret    
c00125fb:	83 ec 0c             	sub    esp,0xc
c00125fe:	68 48 a8 02 c0       	push   0xc002a848
c0012603:	e8 b1 80 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0012608:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001260b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001260f:	83 c4 10             	add    esp,0x10
c0012612:	e9 43 ff ff ff       	jmp    c001255a <VAS::allocatePages(int, int)+0x3c>
c0012617:	83 ec 0c             	sub    esp,0xc
c001261a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001261e:	e8 24 f6 ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0012623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012627:	83 c4 10             	add    esp,0x10
c001262a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001262f:	0f 87 9b 00 00 00    	ja     c00126d0 <VAS::allocatePages(int, int)+0x1b2>
c0012635:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012639:	85 d2                	test   edx,edx
c001263b:	7e 3c                	jle    c0012679 <VAS::allocatePages(int, int)+0x15b>
c001263d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012641:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012645:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012649:	c1 e5 0c             	shl    ebp,0xc
c001264c:	81 ce 00 04 00 00    	or     esi,0x400
c0012652:	01 dd                	add    ebp,ebx
c0012654:	e8 45 d9 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012659:	56                   	push   esi
c001265a:	53                   	push   ebx
c001265b:	50                   	push   eax
c001265c:	57                   	push   edi
c001265d:	e8 bc fd ff ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012662:	83 c4 10             	add    esp,0x10
c0012665:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001266a:	74 03                	je     c001266f <VAS::allocatePages(int, int)+0x151>
c001266c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001266f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012675:	39 dd                	cmp    ebp,ebx
c0012677:	75 db                	jne    c0012654 <VAS::allocatePages(int, int)+0x136>
c0012679:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001267e:	0f 84 26 ff ff ff    	je     c00125aa <VAS::allocatePages(int, int)+0x8c>
c0012684:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012688:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001268c:	89 d3                	mov    ebx,edx
c001268e:	c1 e0 0c             	shl    eax,0xc
c0012691:	c1 eb 0a             	shr    ebx,0xa
c0012694:	01 d0                	add    eax,edx
c0012696:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001269c:	c1 e8 0a             	shr    eax,0xa
c001269f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126aa:	2d 00 00 40 00       	sub    eax,0x400000
c00126af:	39 c3                	cmp    ebx,eax
c00126b1:	0f 87 f9 fe ff ff    	ja     c00125b0 <VAS::allocatePages(int, int)+0x92>
c00126b7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ba:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126c0:	39 d8                	cmp    eax,ebx
c00126c2:	73 f3                	jae    c00126b7 <VAS::allocatePages(int, int)+0x199>
c00126c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126c8:	83 c4 1c             	add    esp,0x1c
c00126cb:	5b                   	pop    ebx
c00126cc:	5e                   	pop    esi
c00126cd:	5f                   	pop    edi
c00126ce:	5d                   	pop    ebp
c00126cf:	c3                   	ret    
c00126d0:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00126d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126db:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00126e2:	0f 84 4d ff ff ff    	je     c0012635 <VAS::allocatePages(int, int)+0x117>
c00126e8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00126f0:	e9 40 ff ff ff       	jmp    c0012635 <VAS::allocatePages(int, int)+0x117>
c00126f5:	90                   	nop

c00126f6 <VAS::setCPUSpecific(unsigned long)>:
c00126f6:	83 ec 0c             	sub    esp,0xc
c00126f9:	6a 05                	push   0x5
c00126fb:	68 00 00 40 c2       	push   0xc2400000
c0012700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012708:	e8 11 fd ff ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c001270d:	83 c4 1c             	add    esp,0x1c
c0012710:	c3                   	ret    
c0012711:	90                   	nop

c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012712:	55                   	push   ebp
c0012713:	57                   	push   edi
c0012714:	56                   	push   esi
c0012715:	53                   	push   ebx
c0012716:	83 ec 1c             	sub    esp,0x1c
c0012719:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001271e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012722:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012728:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001272c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012732:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012736:	83 e0 01             	and    eax,0x1
c0012739:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001273d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012741:	85 c0                	test   eax,eax
c0012743:	7e 39                	jle    c001277e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012745:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012749:	89 f3                	mov    ebx,esi
c001274b:	c1 e0 0c             	shl    eax,0xc
c001274e:	01 f0                	add    eax,esi
c0012750:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012754:	55                   	push   ebp
c0012755:	53                   	push   ebx
c0012756:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001275a:	29 f0                	sub    eax,esi
c001275c:	01 d8                	add    eax,ebx
c001275e:	50                   	push   eax
c001275f:	57                   	push   edi
c0012760:	e8 b9 fc ff ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012765:	83 c4 10             	add    esp,0x10
c0012768:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001276d:	74 03                	je     c0012772 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001276f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012772:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012778:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001277c:	75 d6                	jne    c0012754 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001277e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012783:	75 10                	jne    c0012795 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012785:	0f 20 d8             	mov    eax,cr3
c0012788:	0f 22 d8             	mov    cr3,eax
c001278b:	83 c4 1c             	add    esp,0x1c
c001278e:	89 f0                	mov    eax,esi
c0012790:	5b                   	pop    ebx
c0012791:	5e                   	pop    esi
c0012792:	5f                   	pop    edi
c0012793:	5d                   	pop    ebp
c0012794:	c3                   	ret    
c0012795:	89 f3                	mov    ebx,esi
c0012797:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001279b:	c1 eb 0a             	shr    ebx,0xa
c001279e:	c1 e0 0c             	shl    eax,0xc
c00127a1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00127a7:	01 f0                	add    eax,esi
c00127a9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00127af:	c1 e8 0a             	shr    eax,0xa
c00127b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00127b7:	2d 00 00 40 00       	sub    eax,0x400000
c00127bc:	39 c3                	cmp    ebx,eax
c00127be:	77 cb                	ja     c001278b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00127c0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00127c3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00127c9:	39 d8                	cmp    eax,ebx
c00127cb:	73 f3                	jae    c00127c0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00127cd:	83 c4 1c             	add    esp,0x1c
c00127d0:	89 f0                	mov    eax,esi
c00127d2:	5b                   	pop    ebx
c00127d3:	5e                   	pop    esi
c00127d4:	5f                   	pop    edi
c00127d5:	5d                   	pop    ebp
c00127d6:	c3                   	ret    
c00127d7:	90                   	nop

c00127d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00127d8:	55                   	push   ebp
c00127d9:	57                   	push   edi
c00127da:	56                   	push   esi
c00127db:	53                   	push   ebx
c00127dc:	83 ec 1c             	sub    esp,0x1c
c00127df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00127e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127e7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00127eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127ef:	a9 ff 0f 00 00       	test   eax,0xfff
c00127f4:	75 4a                	jne    c0012840 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00127f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00127fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127fd:	c1 eb 16             	shr    ebx,0x16
c0012800:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012807:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001280b:	74 4d                	je     c001285a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001280d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012811:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012815:	c1 e8 0a             	shr    eax,0xa
c0012818:	80 fa 01             	cmp    dl,0x1
c001281b:	19 d2                	sbb    edx,edx
c001281d:	c1 e3 0c             	shl    ebx,0xc
c0012820:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012824:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001282a:	25 fc 0f 00 00       	and    eax,0xffc
c001282f:	01 d8                	add    eax,ebx
c0012831:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012838:	83 c4 1c             	add    esp,0x1c
c001283b:	5b                   	pop    ebx
c001283c:	5e                   	pop    esi
c001283d:	5f                   	pop    edi
c001283e:	5d                   	pop    ebp
c001283f:	c3                   	ret    
c0012840:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012844:	83 ec 0c             	sub    esp,0xc
c0012847:	68 74 a8 02 c0       	push   0xc002a874
c001284c:	e8 68 7e 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0012851:	83 c4 10             	add    esp,0x10
c0012854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012858:	eb 9c                	jmp    c00127f6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001285a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001285e:	e8 3b d7 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012863:	89 c5                	mov    ebp,eax
c0012865:	e8 78 f6 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c001286a:	83 ec 0c             	sub    esp,0xc
c001286d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012871:	6a 01                	push   0x1
c0012873:	e8 cf f3 ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0012878:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001287f:	6a 01                	push   0x1
c0012881:	50                   	push   eax
c0012882:	55                   	push   ebp
c0012883:	81 cd 07 04 00 00    	or     ebp,0x407
c0012889:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001288d:	51                   	push   ecx
c001288e:	e8 7f fe ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012893:	83 c4 1c             	add    esp,0x1c
c0012896:	68 00 10 00 00       	push   0x1000
c001289b:	6a 00                	push   0x0
c001289d:	50                   	push   eax
c001289e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128a2:	e8 d1 de fe ff       	call   c0000778 <memset>
c00128a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00128ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00128ae:	e8 04 f8 ff ff       	call   c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>
c00128b3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00128b6:	83 c4 10             	add    esp,0x10
c00128b9:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00128bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128c0:	e9 48 ff ff ff       	jmp    c001280d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00128c5:	90                   	nop

c00128c6 <VAS::VAS(bool)>:
c00128c6:	53                   	push   ebx
c00128c7:	83 ec 28             	sub    esp,0x28
c00128ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00128ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00128d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128e1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00128e5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00128e8:	e8 b1 d6 ff ff       	call   c000ff9e <Phys::allocatePage()>
c00128ed:	89 c2                	mov    edx,eax
c00128ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00128f6:	e8 e7 f5 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c00128fb:	89 c3                	mov    ebx,eax
c00128fd:	83 ec 0c             	sub    esp,0xc
c0012900:	6a 01                	push   0x1
c0012902:	e8 40 f3 ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	89 c2                	mov    edx,eax
c001290c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012910:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012913:	83 ec 0c             	sub    esp,0xc
c0012916:	6a 03                	push   0x3
c0012918:	6a 01                	push   0x1
c001291a:	52                   	push   edx
c001291b:	50                   	push   eax
c001291c:	53                   	push   ebx
c001291d:	e8 f0 fd ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012922:	83 c4 20             	add    esp,0x20
c0012925:	89 c2                	mov    edx,eax
c0012927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001292e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012936:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001293e:	7f 1c                	jg     c001295c <VAS::VAS(bool)+0x96>
c0012940:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012944:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012947:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001294b:	c1 e2 02             	shl    edx,0x2
c001294e:	01 d0                	add    eax,edx
c0012950:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012956:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001295a:	eb da                	jmp    c0012936 <VAS::VAS(bool)+0x70>
c001295c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012964:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001296c:	7f 7a                	jg     c00129e8 <VAS::VAS(bool)+0x122>
c001296e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012972:	2d 00 02 00 00       	sub    eax,0x200
c0012977:	c1 e0 0c             	shl    eax,0xc
c001297a:	83 c8 03             	or     eax,0x3
c001297d:	89 c2                	mov    edx,eax
c001297f:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0012984:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001298a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012990:	83 e0 10             	and    eax,0x10
c0012993:	84 c0                	test   al,al
c0012995:	74 07                	je     c001299e <VAS::VAS(bool)+0xd8>
c0012997:	b8 00 01 00 00       	mov    eax,0x100
c001299c:	eb 05                	jmp    c00129a3 <VAS::VAS(bool)+0xdd>
c001299e:	b8 00 00 00 00       	mov    eax,0x0
c00129a3:	09 d0                	or     eax,edx
c00129a5:	89 c1                	mov    ecx,eax
c00129a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00129b2:	c1 e2 02             	shl    edx,0x2
c00129b5:	01 d0                	add    eax,edx
c00129b7:	89 ca                	mov    edx,ecx
c00129b9:	89 10                	mov    DWORD PTR [eax],edx
c00129bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129bf:	2d 40 03 00 00       	sub    eax,0x340
c00129c4:	83 f8 7f             	cmp    eax,0x7f
c00129c7:	77 16                	ja     c00129df <VAS::VAS(bool)+0x119>
c00129c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00129d4:	c1 e2 02             	shl    edx,0x2
c00129d7:	01 d0                	add    eax,edx
c00129d9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00129df:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00129e3:	e9 7c ff ff ff       	jmp    c0012964 <VAS::VAS(bool)+0x9e>
c00129e8:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00129ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129f3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129f9:	83 e0 10             	and    eax,0x10
c00129fc:	84 c0                	test   al,al
c00129fe:	74 07                	je     c0012a07 <VAS::VAS(bool)+0x141>
c0012a00:	b8 03 41 00 00       	mov    eax,0x4103
c0012a05:	eb 05                	jmp    c0012a0c <VAS::VAS(bool)+0x146>
c0012a07:	b8 03 40 00 00       	mov    eax,0x4003
c0012a0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012a10:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012a13:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012a19:	89 02                	mov    DWORD PTR [edx],eax
c0012a1b:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0012a20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a26:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012a2c:	83 ec 08             	sub    esp,0x8
c0012a2f:	50                   	push   eax
c0012a30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a34:	e8 bd fc ff ff       	call   c00126f6 <VAS::setCPUSpecific(unsigned long)>
c0012a39:	83 c4 10             	add    esp,0x10
c0012a3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a40:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012a43:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0012a48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a4e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012a54:	83 e0 10             	and    eax,0x10
c0012a57:	84 c0                	test   al,al
c0012a59:	74 07                	je     c0012a62 <VAS::VAS(bool)+0x19c>
c0012a5b:	b8 00 01 00 00       	mov    eax,0x100
c0012a60:	eb 05                	jmp    c0012a67 <VAS::VAS(bool)+0x1a1>
c0012a62:	b8 00 00 00 00       	mov    eax,0x0
c0012a67:	09 c2                	or     edx,eax
c0012a69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a6d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a70:	05 fc 0f 00 00       	add    eax,0xffc
c0012a75:	83 ca 03             	or     edx,0x3
c0012a78:	89 10                	mov    DWORD PTR [eax],edx
c0012a7a:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0012a7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a85:	83 ec 0c             	sub    esp,0xc
c0012a88:	50                   	push   eax
c0012a89:	e8 8c 1c 00 00       	call   c001471a <Device::getName()>
c0012a8e:	83 c4 10             	add    esp,0x10
c0012a91:	83 ec 08             	sub    esp,0x8
c0012a94:	68 90 aa 02 c0       	push   0xc002aa90
c0012a99:	50                   	push   eax
c0012a9a:	e8 21 de fe ff       	call   c00008c0 <strcmp>
c0012a9f:	83 c4 10             	add    esp,0x10
c0012aa2:	85 c0                	test   eax,eax
c0012aa4:	0f 94 c0             	sete   al
c0012aa7:	84 c0                	test   al,al
c0012aa9:	74 70                	je     c0012b1b <VAS::VAS(bool)+0x255>
c0012aab:	e8 11 b4 00 00       	call   c001dec1 <disableIRQs()>
c0012ab0:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0012ab5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012abb:	05 7c 09 00 00       	add    eax,0x97c
c0012ac0:	83 ec 0c             	sub    esp,0xc
c0012ac3:	50                   	push   eax
c0012ac4:	e8 af c8 ff ff       	call   c000f378 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012ac9:	83 c4 10             	add    esp,0x10
c0012acc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ad1:	89 c3                	mov    ebx,eax
c0012ad3:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0012ad8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ade:	05 7c 09 00 00       	add    eax,0x97c
c0012ae3:	83 ec 0c             	sub    esp,0xc
c0012ae6:	50                   	push   eax
c0012ae7:	e8 8c c8 ff ff       	call   c000f378 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012aec:	83 c4 10             	add    esp,0x10
c0012aef:	83 ec 08             	sub    esp,0x8
c0012af2:	50                   	push   eax
c0012af3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012af7:	e8 9c f5 ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c0012afc:	83 c4 10             	add    esp,0x10
c0012aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b01:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b06:	6a 11                	push   0x11
c0012b08:	53                   	push   ebx
c0012b09:	50                   	push   eax
c0012b0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b0e:	e8 0b f9 ff ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	e8 b4 b3 00 00       	call   c001decf <enableIRQs()>
c0012b1b:	90                   	nop
c0012b1c:	83 c4 28             	add    esp,0x28
c0012b1f:	5b                   	pop    ebx
c0012b20:	c3                   	ret    
c0012b21:	90                   	nop

c0012b22 <VAS::evict(unsigned long)>:
c0012b22:	57                   	push   edi
c0012b23:	56                   	push   esi
c0012b24:	53                   	push   ebx
c0012b25:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012b29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b2d:	e8 ac b3 00 00       	call   c001dede <lockScheduler()>
c0012b32:	83 ec 08             	sub    esp,0x8
c0012b35:	56                   	push   esi
c0012b36:	68 98 a8 02 c0       	push   0xc002a898
c0012b3b:	e8 c7 04 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012b40:	e8 43 f2 ff ff       	call   c0011d88 <Virt::allocateSwapfilePage()>
c0012b45:	83 c4 0c             	add    esp,0xc
c0012b48:	89 c3                	mov    ebx,eax
c0012b4a:	50                   	push   eax
c0012b4b:	50                   	push   eax
c0012b4c:	68 9e aa 02 c0       	push   0xc002aa9e
c0012b51:	e8 b1 04 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b59:	e8 18 f2 ff ff       	call   c0011d76 <Virt::swapIDToSector(unsigned long)>
c0012b5e:	c1 e3 0b             	shl    ebx,0xb
c0012b61:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b64:	31 d2                	xor    edx,edx
c0012b66:	6a 08                	push   0x8
c0012b68:	52                   	push   edx
c0012b69:	50                   	push   eax
c0012b6a:	0f be 05 18 d7 02 c0 	movsx  eax,BYTE PTR ds:0xc002d718
c0012b71:	ff 34 85 7c ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1384]
c0012b78:	e8 17 3d 00 00       	call   c0016894 <LogicalDisk::write(unsigned long long, int, void*)>
c0012b7d:	83 c4 18             	add    esp,0x18
c0012b80:	56                   	push   esi
c0012b81:	57                   	push   edi
c0012b82:	e8 11 f5 ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c0012b87:	89 c6                	mov    esi,eax
c0012b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b8b:	c1 e8 0c             	shr    eax,0xc
c0012b8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b91:	e8 7e d3 ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c0012b96:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b98:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b9e:	09 d3                	or     ebx,edx
c0012ba0:	89 1e                	mov    DWORD PTR [esi],ebx
c0012ba2:	c7 04 24 ae aa 02 c0 	mov    DWORD PTR [esp],0xc002aaae
c0012ba9:	e8 59 04 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012bae:	83 c4 10             	add    esp,0x10
c0012bb1:	5b                   	pop    ebx
c0012bb2:	5e                   	pop    esi
c0012bb3:	5f                   	pop    edi
c0012bb4:	e9 27 b3 00 00       	jmp    c001dee0 <unlockScheduler()>
c0012bb9:	90                   	nop

c0012bba <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012bba:	57                   	push   edi
c0012bbb:	56                   	push   esi
c0012bbc:	53                   	push   ebx
c0012bbd:	83 ec 10             	sub    esp,0x10
c0012bc0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012bc4:	e8 15 b3 00 00       	call   c001dede <lockScheduler()>
c0012bc9:	83 ec 08             	sub    esp,0x8
c0012bcc:	56                   	push   esi
c0012bcd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012bd3:	68 b8 a8 02 c0       	push   0xc002a8b8
c0012bd8:	e8 2a 04 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012bdd:	58                   	pop    eax
c0012bde:	5a                   	pop    edx
c0012bdf:	56                   	push   esi
c0012be0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012be4:	e8 af f4 ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c0012be9:	59                   	pop    ecx
c0012bea:	5b                   	pop    ebx
c0012beb:	89 c3                	mov    ebx,eax
c0012bed:	ff 30                	push   DWORD PTR [eax]
c0012bef:	68 be aa 02 c0       	push   0xc002aabe
c0012bf4:	e8 0e 04 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012bf9:	5f                   	pop    edi
c0012bfa:	58                   	pop    eax
c0012bfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bfd:	c1 e8 0b             	shr    eax,0xb
c0012c00:	50                   	push   eax
c0012c01:	68 cf aa 02 c0       	push   0xc002aacf
c0012c06:	e8 fc 03 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012c0b:	83 c4 10             	add    esp,0x10
c0012c0e:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012c14:	75 1e                	jne    c0012c34 <VAS::tryLoadBackOffDisk(unsigned long)+0x7a>
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	68 44 ab 02 c0       	push   0xc002ab44
c0012c1e:	e8 e4 03 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012c23:	e8 b8 b2 00 00       	call   c001dee0 <unlockScheduler()>
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	31 c0                	xor    eax,eax
c0012c2d:	83 c4 10             	add    esp,0x10
c0012c30:	5b                   	pop    ebx
c0012c31:	5e                   	pop    esi
c0012c32:	5f                   	pop    edi
c0012c33:	c3                   	ret    
c0012c34:	83 ec 0c             	sub    esp,0xc
c0012c37:	68 ec aa 02 c0       	push   0xc002aaec
c0012c3c:	e8 c6 03 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012c41:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012c43:	e8 56 d3 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012c48:	c1 ef 0b             	shr    edi,0xb
c0012c4b:	5a                   	pop    edx
c0012c4c:	59                   	pop    ecx
c0012c4d:	50                   	push   eax
c0012c4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c52:	68 04 ab 02 c0       	push   0xc002ab04
c0012c57:	e8 ab 03 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012c5c:	58                   	pop    eax
c0012c5d:	5a                   	pop    edx
c0012c5e:	ff 33                	push   DWORD PTR [ebx]
c0012c60:	68 1e ab 02 c0       	push   0xc002ab1e
c0012c65:	e8 9d 03 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012c6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c6e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c70:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c76:	09 d0                	or     eax,edx
c0012c78:	0d 01 08 00 00       	or     eax,0x801
c0012c7d:	89 03                	mov    DWORD PTR [ebx],eax
c0012c7f:	59                   	pop    ecx
c0012c80:	5b                   	pop    ebx
c0012c81:	50                   	push   eax
c0012c82:	68 31 ab 02 c0       	push   0xc002ab31
c0012c87:	e8 7b 03 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012c8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c8f:	e8 e2 f0 ff ff       	call   c0011d76 <Virt::swapIDToSector(unsigned long)>
c0012c94:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c97:	31 d2                	xor    edx,edx
c0012c99:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0012c9f:	52                   	push   edx
c0012ca0:	50                   	push   eax
c0012ca1:	0f be 05 18 d7 02 c0 	movsx  eax,BYTE PTR ds:0xc002d718
c0012ca8:	ff 34 85 7c ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1384]
c0012caf:	e8 74 3b 00 00       	call   c0016828 <LogicalDisk::read(unsigned long long, int, void*)>
c0012cb4:	83 c4 14             	add    esp,0x14
c0012cb7:	57                   	push   edi
c0012cb8:	e8 9b f0 ff ff       	call   c0011d58 <Virt::freeSwapfilePage(unsigned long)>
c0012cbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cc0:	e8 b1 f0 ff ff       	call   c0011d76 <Virt::swapIDToSector(unsigned long)>
c0012cc5:	5e                   	pop    esi
c0012cc6:	5f                   	pop    edi
c0012cc7:	50                   	push   eax
c0012cc8:	68 e4 a8 02 c0       	push   0xc002a8e4
c0012ccd:	e8 35 03 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012cd2:	e8 09 b2 00 00       	call   c001dee0 <unlockScheduler()>
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	b0 01                	mov    al,0x1
c0012cdc:	83 c4 10             	add    esp,0x10
c0012cdf:	5b                   	pop    ebx
c0012ce0:	5e                   	pop    esi
c0012ce1:	5f                   	pop    edi
c0012ce2:	c3                   	ret    
c0012ce3:	90                   	nop

c0012ce4 <VAS::scanForEviction(int, int)>:
c0012ce4:	55                   	push   ebp
c0012ce5:	57                   	push   edi
c0012ce6:	56                   	push   esi
c0012ce7:	53                   	push   ebx
c0012ce8:	83 ec 1c             	sub    esp,0x1c
c0012ceb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012cef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012cf3:	85 c9                	test   ecx,ecx
c0012cf5:	75 08                	jne    c0012cff <VAS::scanForEviction(int, int)+0x1b>
c0012cf7:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012cff:	83 ec 0c             	sub    esp,0xc
c0012d02:	bb 00 00 40 00       	mov    ebx,0x400000
c0012d07:	68 04 a9 02 c0       	push   0xc002a904
c0012d0c:	31 ff                	xor    edi,edi
c0012d0e:	e8 f4 02 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012d13:	83 c4 10             	add    esp,0x10
c0012d16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012d1e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012d26:	eb 17                	jmp    c0012d3f <VAS::scanForEviction(int, int)+0x5b>
c0012d28:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012d2d:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012d33:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012d39:	0f 84 88 00 00 00    	je     c0012dc7 <VAS::scanForEviction(int, int)+0xe3>
c0012d3f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012d42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d46:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012d4a:	74 dc                	je     c0012d28 <VAS::scanForEviction(int, int)+0x44>
c0012d4c:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012d52:	eb 0a                	jmp    c0012d5e <VAS::scanForEviction(int, int)+0x7a>
c0012d54:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012d5a:	39 eb                	cmp    ebx,ebp
c0012d5c:	74 ca                	je     c0012d28 <VAS::scanForEviction(int, int)+0x44>
c0012d5e:	83 ec 08             	sub    esp,0x8
c0012d61:	55                   	push   ebp
c0012d62:	56                   	push   esi
c0012d63:	e8 30 f3 ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d6d:	89 c2                	mov    edx,eax
c0012d6f:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012d75:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012d7b:	75 d7                	jne    c0012d54 <VAS::scanForEviction(int, int)+0x70>
c0012d7d:	a8 01                	test   al,0x1
c0012d7f:	74 4e                	je     c0012dcf <VAS::scanForEviction(int, int)+0xeb>
c0012d81:	83 ec 08             	sub    esp,0x8
c0012d84:	55                   	push   ebp
c0012d85:	68 28 a9 02 c0       	push   0xc002a928
c0012d8a:	e8 78 02 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012d8f:	89 f8                	mov    eax,edi
c0012d91:	99                   	cdq    
c0012d92:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	85 d2                	test   edx,edx
c0012d9b:	74 03                	je     c0012da0 <VAS::scanForEviction(int, int)+0xbc>
c0012d9d:	47                   	inc    edi
c0012d9e:	eb b4                	jmp    c0012d54 <VAS::scanForEviction(int, int)+0x70>
c0012da0:	83 ec 0c             	sub    esp,0xc
c0012da3:	68 5d ab 02 c0       	push   0xc002ab5d
c0012da8:	e8 5a 02 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012dad:	58                   	pop    eax
c0012dae:	5a                   	pop    edx
c0012daf:	55                   	push   ebp
c0012db0:	56                   	push   esi
c0012db1:	e8 6c fd ff ff       	call   c0012b22 <VAS::evict(unsigned long)>
c0012db6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012dba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012dc5:	75 d6                	jne    c0012d9d <VAS::scanForEviction(int, int)+0xb9>
c0012dc7:	83 c4 1c             	add    esp,0x1c
c0012dca:	5b                   	pop    ebx
c0012dcb:	5e                   	pop    esi
c0012dcc:	5f                   	pop    edi
c0012dcd:	5d                   	pop    ebp
c0012dce:	c3                   	ret    
c0012dcf:	83 ec 08             	sub    esp,0x8
c0012dd2:	55                   	push   ebp
c0012dd3:	68 54 a9 02 c0       	push   0xc002a954
c0012dd8:	e8 2a 02 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012ddd:	83 c4 10             	add    esp,0x10
c0012de0:	e9 6f ff ff ff       	jmp    c0012d54 <VAS::scanForEviction(int, int)+0x70>

c0012de5 <mapVASFirstTime>:
c0012de5:	55                   	push   ebp
c0012de6:	57                   	push   edi
c0012de7:	56                   	push   esi
c0012de8:	53                   	push   ebx
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012df1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012df4:	4a                   	dec    edx
c0012df5:	0f 84 8e 00 00 00    	je     c0012e89 <mapVASFirstTime+0xa4>
c0012dfb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012dfe:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012e01:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012e06:	c1 e5 15             	shl    ebp,0x15
c0012e09:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012e0e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012e14:	29 eb                	sub    ebx,ebp
c0012e16:	29 ee                	sub    esi,ebp
c0012e18:	e8 81 d1 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012e1d:	83 ec 0c             	sub    esp,0xc
c0012e20:	68 03 04 00 00       	push   0x403
c0012e25:	6a 01                	push   0x1
c0012e27:	53                   	push   ebx
c0012e28:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e2e:	50                   	push   eax
c0012e2f:	57                   	push   edi
c0012e30:	e8 dd f8 ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e35:	83 c4 20             	add    esp,0x20
c0012e38:	39 f3                	cmp    ebx,esi
c0012e3a:	75 dc                	jne    c0012e18 <mapVASFirstTime+0x33>
c0012e3c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e41:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e46:	29 ee                	sub    esi,ebp
c0012e48:	29 e8                	sub    eax,ebp
c0012e4a:	89 c5                	mov    ebp,eax
c0012e4c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e50:	19 db                	sbb    ebx,ebx
c0012e52:	e8 47 d1 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012e57:	83 e3 04             	and    ebx,0x4
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e63:	53                   	push   ebx
c0012e64:	6a 01                	push   0x1
c0012e66:	56                   	push   esi
c0012e67:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e6d:	50                   	push   eax
c0012e6e:	57                   	push   edi
c0012e6f:	e8 9e f8 ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e74:	83 c4 20             	add    esp,0x20
c0012e77:	39 f5                	cmp    ebp,esi
c0012e79:	75 d1                	jne    c0012e4c <mapVASFirstTime+0x67>
c0012e7b:	0f 20 d8             	mov    eax,cr3
c0012e7e:	0f 22 d8             	mov    cr3,eax
c0012e81:	83 c4 0c             	add    esp,0xc
c0012e84:	5b                   	pop    ebx
c0012e85:	5e                   	pop    esi
c0012e86:	5f                   	pop    edi
c0012e87:	5d                   	pop    ebp
c0012e88:	c3                   	ret    
c0012e89:	83 ec 0c             	sub    esp,0xc
c0012e8c:	68 68 ab 02 c0       	push   0xc002ab68
c0012e91:	e8 71 01 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	83 c4 0c             	add    esp,0xc
c0012e9c:	5b                   	pop    ebx
c0012e9d:	5e                   	pop    esi
c0012e9e:	5f                   	pop    edi
c0012e9f:	5d                   	pop    ebp
c0012ea0:	c3                   	ret    

c0012ea1 <__cxa_atexit>:
c0012ea1:	31 c0                	xor    eax,eax
c0012ea3:	c3                   	ret    

c0012ea4 <__cxa_finalize>:
c0012ea4:	c3                   	ret    

c0012ea5 <__stack_chk_fail>:
c0012ea5:	55                   	push   ebp
c0012ea6:	89 e5                	mov    ebp,esp
c0012ea8:	83 ec 14             	sub    esp,0x14
c0012eab:	68 81 ab 02 c0       	push   0xc002ab81
c0012eb0:	e8 52 01 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012eb5:	58                   	pop    eax
c0012eb6:	5a                   	pop    edx
c0012eb7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012eba:	68 d1 ab 02 c0       	push   0xc002abd1
c0012ebf:	e8 43 01 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012ec4:	59                   	pop    ecx
c0012ec5:	58                   	pop    eax
c0012ec6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ec9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ecc:	68 d1 ab 02 c0       	push   0xc002abd1
c0012ed1:	e8 31 01 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012ed6:	5a                   	pop    edx
c0012ed7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eda:	59                   	pop    ecx
c0012edb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012edd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ee0:	68 d1 ab 02 c0       	push   0xc002abd1
c0012ee5:	e8 1d 01 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012eea:	5a                   	pop    edx
c0012eeb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eee:	59                   	pop    ecx
c0012eef:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ef3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ef6:	68 d1 ab 02 c0       	push   0xc002abd1
c0012efb:	e8 07 01 00 00       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0012f00:	c7 04 24 d9 ab 02 c0 	mov    DWORD PTR [esp],0xc002abd9
c0012f07:	e8 ad 77 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0012f0c:	83 c4 10             	add    esp,0x10
c0012f0f:	c9                   	leave  
c0012f10:	c3                   	ret    

c0012f11 <__cxa_pure_virtual>:
c0012f11:	83 ec 18             	sub    esp,0x18
c0012f14:	68 f1 ab 02 c0       	push   0xc002abf1
c0012f19:	e8 9b 77 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0012f1e:	83 c4 1c             	add    esp,0x1c
c0012f21:	c3                   	ret    

c0012f22 <operator new[](unsigned long)>:
c0012f22:	e9 d5 c9 ff ff       	jmp    c000f8fc <malloc>

c0012f27 <operator delete(void*, unsigned long)>:
c0012f27:	e9 f0 c9 ff ff       	jmp    c000f91c <rfree>

c0012f2c <operator delete[](void*)>:
c0012f2c:	e9 eb c9 ff ff       	jmp    c000f91c <rfree>

c0012f31 <operator delete[](void*, unsigned long)>:
c0012f31:	e9 e6 c9 ff ff       	jmp    c000f91c <rfree>

c0012f36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f36:	57                   	push   edi
c0012f37:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f3c:	56                   	push   esi
c0012f3d:	be 04 ac 02 c0       	mov    esi,0xc002ac04
c0012f42:	53                   	push   ebx
c0012f43:	83 ec 40             	sub    esp,0x40
c0012f46:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f4a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f4e:	fc                   	cld    
c0012f4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f51:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f55:	83 f9 3e             	cmp    ecx,0x3e
c0012f58:	7e 05                	jle    c0012f5f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f5a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f5f:	89 df                	mov    edi,ebx
c0012f61:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f65:	eb 02                	jmp    c0012f69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f67:	89 c7                	mov    edi,eax
c0012f69:	31 d2                	xor    edx,edx
c0012f6b:	46                   	inc    esi
c0012f6c:	89 f8                	mov    eax,edi
c0012f6e:	f7 f1                	div    ecx
c0012f70:	39 cf                	cmp    edi,ecx
c0012f72:	73 f3                	jae    c0012f67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f74:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f77:	eb 02                	jmp    c0012f7b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f79:	89 c3                	mov    ebx,eax
c0012f7b:	31 d2                	xor    edx,edx
c0012f7d:	4e                   	dec    esi
c0012f7e:	89 d8                	mov    eax,ebx
c0012f80:	f7 f1                	div    ecx
c0012f82:	39 cb                	cmp    ebx,ecx
c0012f84:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f88:	88 16                	mov    BYTE PTR [esi],dl
c0012f8a:	73 ed                	jae    c0012f79 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f8c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f90:	83 c4 40             	add    esp,0x40
c0012f93:	5b                   	pop    ebx
c0012f94:	5e                   	pop    esi
c0012f95:	5f                   	pop    edi
c0012f96:	c3                   	ret    

c0012f97 <Dbg::logc(char)>:
c0012f97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f9b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012fa0:	ec                   	in     al,dx
c0012fa1:	a8 20                	test   al,0x20
c0012fa3:	74 fb                	je     c0012fa0 <Dbg::logc(char)+0x9>
c0012fa5:	ba f8 03 00 00       	mov    edx,0x3f8
c0012faa:	88 c8                	mov    al,cl
c0012fac:	ee                   	out    dx,al
c0012fad:	c3                   	ret    

c0012fae <Dbg::logs(char*)>:
c0012fae:	53                   	push   ebx
c0012faf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012fb3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fb6:	84 c0                	test   al,al
c0012fb8:	74 0f                	je     c0012fc9 <Dbg::logs(char*)+0x1b>
c0012fba:	50                   	push   eax
c0012fbb:	43                   	inc    ebx
c0012fbc:	e8 d6 ff ff ff       	call   c0012f97 <Dbg::logc(char)>
c0012fc1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fc4:	5a                   	pop    edx
c0012fc5:	84 c0                	test   al,al
c0012fc7:	75 f1                	jne    c0012fba <Dbg::logs(char*)+0xc>
c0012fc9:	5b                   	pop    ebx
c0012fca:	c3                   	ret    

c0012fcb <Dbg::logWriteInt(unsigned int)>:
c0012fcb:	83 ec 10             	sub    esp,0x10
c0012fce:	6a 0a                	push   0xa
c0012fd0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fd4:	50                   	push   eax
c0012fd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd9:	e8 58 ff ff ff       	call   c0012f36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fde:	50                   	push   eax
c0012fdf:	e8 ca ff ff ff       	call   c0012fae <Dbg::logs(char*)>
c0012fe4:	83 c4 20             	add    esp,0x20
c0012fe7:	c3                   	ret    

c0012fe8 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012fe8:	83 ec 10             	sub    esp,0x10
c0012feb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fef:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ff3:	50                   	push   eax
c0012ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff8:	e8 39 ff ff ff       	call   c0012f36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ffd:	50                   	push   eax
c0012ffe:	e8 ab ff ff ff       	call   c0012fae <Dbg::logs(char*)>
c0013003:	83 c4 20             	add    esp,0x20
c0013006:	c3                   	ret    

c0013007 <Dbg::kprintf(char const*, ...)>:
c0013007:	55                   	push   ebp
c0013008:	57                   	push   edi
c0013009:	56                   	push   esi
c001300a:	53                   	push   ebx
c001300b:	83 ec 0c             	sub    esp,0xc
c001300e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013012:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013016:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001301a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001301d:	84 c0                	test   al,al
c001301f:	74 4a                	je     c001306b <Dbg::kprintf(char const*, ...)+0x64>
c0013021:	31 db                	xor    ebx,ebx
c0013023:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013026:	3c 25                	cmp    al,0x25
c0013028:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001302b:	0f 85 e4 00 00 00    	jne    c0013115 <Dbg::kprintf(char const*, ...)+0x10e>
c0013031:	83 c3 02             	add    ebx,0x2
c0013034:	8a 07                	mov    al,BYTE PTR [edi]
c0013036:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0013039:	83 e8 25             	sub    eax,0x25
c001303c:	3c 53                	cmp    al,0x53
c001303e:	0f 87 ba 00 00 00    	ja     c00130fe <Dbg::kprintf(char const*, ...)+0xf7>
c0013044:	0f b6 c0             	movzx  eax,al
c0013047:	ff 24 85 44 ac 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd53bc]
c001304e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013052:	89 c8                	mov    eax,ecx
c0013054:	83 c1 04             	add    ecx,0x4
c0013057:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001305b:	ff 30                	push   DWORD PTR [eax]
c001305d:	e8 4c ff ff ff       	call   c0012fae <Dbg::logs(char*)>
c0013062:	58                   	pop    eax
c0013063:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0013067:	84 c0                	test   al,al
c0013069:	75 b8                	jne    c0013023 <Dbg::kprintf(char const*, ...)+0x1c>
c001306b:	83 c4 0c             	add    esp,0xc
c001306e:	5b                   	pop    ebx
c001306f:	5e                   	pop    esi
c0013070:	5f                   	pop    edi
c0013071:	5d                   	pop    ebp
c0013072:	c3                   	ret    
c0013073:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013077:	89 d0                	mov    eax,edx
c0013079:	83 c2 04             	add    edx,0x4
c001307c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013080:	ff 30                	push   DWORD PTR [eax]
c0013082:	e8 44 ff ff ff       	call   c0012fcb <Dbg::logWriteInt(unsigned int)>
c0013087:	58                   	pop    eax
c0013088:	eb d9                	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c001308a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001308e:	89 d0                	mov    eax,edx
c0013090:	83 c2 04             	add    edx,0x4
c0013093:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013096:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001309a:	50                   	push   eax
c001309b:	e8 f7 fe ff ff       	call   c0012f97 <Dbg::logc(char)>
c00130a0:	58                   	pop    eax
c00130a1:	eb c0                	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c00130a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130a7:	89 c8                	mov    eax,ecx
c00130a9:	83 c1 04             	add    ecx,0x4
c00130ac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130b0:	ff 30                	push   DWORD PTR [eax]
c00130b2:	e8 14 ff ff ff       	call   c0012fcb <Dbg::logWriteInt(unsigned int)>
c00130b7:	5f                   	pop    edi
c00130b8:	eb a9                	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c00130ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130be:	89 c8                	mov    eax,ecx
c00130c0:	83 c1 04             	add    ecx,0x4
c00130c3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130c7:	6a 10                	push   0x10
c00130c9:	ff 30                	push   DWORD PTR [eax]
c00130cb:	e8 18 ff ff ff       	call   c0012fe8 <Dbg::logWriteIntBase(unsigned int, int)>
c00130d0:	59                   	pop    ecx
c00130d1:	5f                   	pop    edi
c00130d2:	eb 8f                	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c00130d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130d8:	89 d0                	mov    eax,edx
c00130da:	83 c2 08             	add    edx,0x8
c00130dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130e1:	6a 10                	push   0x10
c00130e3:	ff 30                	push   DWORD PTR [eax]
c00130e5:	e8 fe fe ff ff       	call   c0012fe8 <Dbg::logWriteIntBase(unsigned int, int)>
c00130ea:	58                   	pop    eax
c00130eb:	5a                   	pop    edx
c00130ec:	e9 72 ff ff ff       	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c00130f1:	6a 25                	push   0x25
c00130f3:	e8 9f fe ff ff       	call   c0012f97 <Dbg::logc(char)>
c00130f8:	58                   	pop    eax
c00130f9:	e9 65 ff ff ff       	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c00130fe:	6a 25                	push   0x25
c0013100:	e8 92 fe ff ff       	call   c0012f97 <Dbg::logc(char)>
c0013105:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013108:	50                   	push   eax
c0013109:	e8 89 fe ff ff       	call   c0012f97 <Dbg::logc(char)>
c001310e:	5a                   	pop    edx
c001310f:	59                   	pop    ecx
c0013110:	e9 4e ff ff ff       	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c0013115:	50                   	push   eax
c0013116:	89 eb                	mov    ebx,ebp
c0013118:	e8 7a fe ff ff       	call   c0012f97 <Dbg::logc(char)>
c001311d:	89 fd                	mov    ebp,edi
c001311f:	58                   	pop    eax
c0013120:	e9 3e ff ff ff       	jmp    c0013063 <Dbg::kprintf(char const*, ...)+0x5c>
c0013125:	90                   	nop

c0013126 <File::read(unsigned long long, void*, int*)>:
c0013126:	53                   	push   ebx
c0013127:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001312b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001312f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013136:	3c 19                	cmp    al,0x19
c0013138:	77 35                	ja     c001316f <File::read(unsigned long long, void*, int*)+0x49>
c001313a:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0013141:	85 c0                	test   eax,eax
c0013143:	74 2a                	je     c001316f <File::read(unsigned long long, void*, int*)+0x49>
c0013145:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001314b:	85 c0                	test   eax,eax
c001314d:	74 20                	je     c001316f <File::read(unsigned long long, void*, int*)+0x49>
c001314f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013153:	74 21                	je     c0013176 <File::read(unsigned long long, void*, int*)+0x50>
c0013155:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013157:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001315b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013161:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013165:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013169:	5b                   	pop    ebx
c001316a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001316d:	ff e0                	jmp    eax
c001316f:	b8 0b 00 00 00       	mov    eax,0xb
c0013174:	eb 05                	jmp    c001317b <File::read(unsigned long long, void*, int*)+0x55>
c0013176:	b8 05 00 00 00       	mov    eax,0x5
c001317b:	5b                   	pop    ebx
c001317c:	c3                   	ret    
c001317d:	90                   	nop

c001317e <File::write(unsigned long long, void*, int*)>:
c001317e:	53                   	push   ebx
c001317f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013183:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013187:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001318e:	3c 19                	cmp    al,0x19
c0013190:	77 35                	ja     c00131c7 <File::write(unsigned long long, void*, int*)+0x49>
c0013192:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0013199:	85 c0                	test   eax,eax
c001319b:	74 2a                	je     c00131c7 <File::write(unsigned long long, void*, int*)+0x49>
c001319d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131a3:	85 c0                	test   eax,eax
c00131a5:	74 20                	je     c00131c7 <File::write(unsigned long long, void*, int*)+0x49>
c00131a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131ab:	74 21                	je     c00131ce <File::write(unsigned long long, void*, int*)+0x50>
c00131ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131b3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131c1:	5b                   	pop    ebx
c00131c2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131c5:	ff e0                	jmp    eax
c00131c7:	b8 0b 00 00 00       	mov    eax,0xb
c00131cc:	eb 05                	jmp    c00131d3 <File::write(unsigned long long, void*, int*)+0x55>
c00131ce:	b8 05 00 00 00       	mov    eax,0x5
c00131d3:	5b                   	pop    ebx
c00131d4:	c3                   	ret    
c00131d5:	90                   	nop

c00131d6 <Directory::read(unsigned long long, void*, int*)>:
c00131d6:	53                   	push   ebx
c00131d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131e6:	3c 19                	cmp    al,0x19
c00131e8:	77 35                	ja     c001321f <Directory::read(unsigned long long, void*, int*)+0x49>
c00131ea:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c00131f1:	85 c0                	test   eax,eax
c00131f3:	74 2a                	je     c001321f <Directory::read(unsigned long long, void*, int*)+0x49>
c00131f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131fb:	85 c0                	test   eax,eax
c00131fd:	74 20                	je     c001321f <Directory::read(unsigned long long, void*, int*)+0x49>
c00131ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013203:	74 21                	je     c0013226 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013205:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013207:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001320b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013211:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013215:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013219:	5b                   	pop    ebx
c001321a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001321d:	ff e0                	jmp    eax
c001321f:	b8 0b 00 00 00       	mov    eax,0xb
c0013224:	eb 05                	jmp    c001322b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013226:	b8 05 00 00 00       	mov    eax,0x5
c001322b:	5b                   	pop    ebx
c001322c:	c3                   	ret    
c001322d:	90                   	nop

c001322e <Directory::write(unsigned long long, void*, int*)>:
c001322e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013232:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013239:	b8 0b 00 00 00       	mov    eax,0xb
c001323e:	80 fa 19             	cmp    dl,0x19
c0013241:	77 18                	ja     c001325b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013243:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c001324a:	85 d2                	test   edx,edx
c001324c:	74 0d                	je     c001325b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001324e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013255:	19 c0                	sbb    eax,eax
c0013257:	83 e0 0a             	and    eax,0xa
c001325a:	40                   	inc    eax
c001325b:	c3                   	ret    

c001325c <File::isAtty()>:
c001325c:	31 c0                	xor    eax,eax
c001325e:	c3                   	ret    
c001325f:	90                   	nop

c0013260 <Directory::isAtty()>:
c0013260:	31 c0                	xor    eax,eax
c0013262:	c3                   	ret    
c0013263:	90                   	nop

c0013264 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013264:	b8 0a 00 00 00       	mov    eax,0xa
c0013269:	c3                   	ret    

c001326a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001326a:	b8 0a 00 00 00       	mov    eax,0xa
c001326f:	c3                   	ret    

c0013270 <File::~File()>:
c0013270:	83 ec 0c             	sub    esp,0xc
c0013273:	ba 00 ae 02 c0       	mov    edx,0xc002ae00
c0013278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001327c:	89 10                	mov    DWORD PTR [eax],edx
c001327e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013282:	83 ec 0c             	sub    esp,0xc
c0013285:	50                   	push   eax
c0013286:	e8 5b e7 ff ff       	call   c00119e6 <UnixFile::~UnixFile()>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	90                   	nop
c001328f:	83 c4 0c             	add    esp,0xc
c0013292:	c3                   	ret    
c0013293:	90                   	nop

c0013294 <File::~File()>:
c0013294:	83 ec 0c             	sub    esp,0xc
c0013297:	83 ec 0c             	sub    esp,0xc
c001329a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329e:	e8 cd ff ff ff       	call   c0013270 <File::~File()>
c00132a3:	83 c4 10             	add    esp,0x10
c00132a6:	83 ec 08             	sub    esp,0x8
c00132a9:	68 14 01 00 00       	push   0x114
c00132ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b2:	e8 70 fc ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00132b7:	83 c4 10             	add    esp,0x10
c00132ba:	83 c4 0c             	add    esp,0xc
c00132bd:	c3                   	ret    

c00132be <Directory::~Directory()>:
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	ba 1c ae 02 c0       	mov    edx,0xc002ae1c
c00132c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ca:	89 10                	mov    DWORD PTR [eax],edx
c00132cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	50                   	push   eax
c00132d4:	e8 0d e7 ff ff       	call   c00119e6 <UnixFile::~UnixFile()>
c00132d9:	83 c4 10             	add    esp,0x10
c00132dc:	90                   	nop
c00132dd:	83 c4 0c             	add    esp,0xc
c00132e0:	c3                   	ret    
c00132e1:	90                   	nop

c00132e2 <Directory::~Directory()>:
c00132e2:	83 ec 0c             	sub    esp,0xc
c00132e5:	83 ec 0c             	sub    esp,0xc
c00132e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ec:	e8 cd ff ff ff       	call   c00132be <Directory::~Directory()>
c00132f1:	83 c4 10             	add    esp,0x10
c00132f4:	83 ec 08             	sub    esp,0x8
c00132f7:	68 14 01 00 00       	push   0x114
c00132fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013300:	e8 22 fc ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0013305:	83 c4 10             	add    esp,0x10
c0013308:	83 c4 0c             	add    esp,0xc
c001330b:	c3                   	ret    

c001330c <Filesystem::Filesystem()>:
c001330c:	ba 9c ad 02 c0       	mov    edx,0xc002ad9c
c0013311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013315:	89 10                	mov    DWORD PTR [eax],edx
c0013317:	8b 15 ec e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8ec
c001331d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013321:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013328:	a3 ec e8 02 c0       	mov    ds:0xc002e8ec,eax
c001332d:	90                   	nop
c001332e:	c3                   	ret    
c001332f:	90                   	nop

c0013330 <Filesystem::~Filesystem()>:
c0013330:	ba 9c ad 02 c0       	mov    edx,0xc002ad9c
c0013335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013339:	89 10                	mov    DWORD PTR [eax],edx
c001333b:	90                   	nop
c001333c:	c3                   	ret    
c001333d:	90                   	nop

c001333e <Filesystem::~Filesystem()>:
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013345:	e8 e6 ff ff ff       	call   c0013330 <Filesystem::~Filesystem()>
c001334a:	83 c4 04             	add    esp,0x4
c001334d:	83 ec 08             	sub    esp,0x8
c0013350:	6a 08                	push   0x8
c0013352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013356:	e8 cc fb ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c001335b:	83 c4 10             	add    esp,0x10
c001335e:	83 c4 0c             	add    esp,0xc
c0013361:	c3                   	ret    

c0013362 <Fs::getcwd(Process*, char*, int)>:
c0013362:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013366:	31 c0                	xor    eax,eax
c0013368:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001336b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001336f:	7d 15                	jge    c0013386 <Fs::getcwd(Process*, char*, int)+0x24>
c0013371:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013375:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001337c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001337f:	84 c9                	test   cl,cl
c0013381:	74 06                	je     c0013389 <Fs::getcwd(Process*, char*, int)+0x27>
c0013383:	40                   	inc    eax
c0013384:	eb e2                	jmp    c0013368 <Fs::getcwd(Process*, char*, int)+0x6>
c0013386:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013389:	31 c0                	xor    eax,eax
c001338b:	c3                   	ret    

c001338c <Fs::initVFS()>:
c001338c:	83 ec 18             	sub    esp,0x18
c001338f:	6a 08                	push   0x8
c0013391:	e8 66 c5 ff ff       	call   c000f8fc <malloc>
c0013396:	89 04 24             	mov    DWORD PTR [esp],eax
c0013399:	e8 b4 dc 00 00       	call   c0021052 <FAT::FAT()>
c001339e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00133a5:	e8 52 c5 ff ff       	call   c000f8fc <malloc>
c00133aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00133ad:	e8 f8 ee 00 00       	call   c00222aa <ISO9660::ISO9660()>
c00133b2:	83 c4 1c             	add    esp,0x1c
c00133b5:	c3                   	ret    

c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00133b6:	55                   	push   ebp
c00133b7:	57                   	push   edi
c00133b8:	56                   	push   esi
c00133b9:	53                   	push   ebx
c00133ba:	81 ec 10 04 00 00    	sub    esp,0x410
c00133c0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133c7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133ce:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00133d5:	68 00 04 00 00       	push   0x400
c00133da:	6a 00                	push   0x0
c00133dc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00133e0:	56                   	push   esi
c00133e1:	e8 92 d3 fe ff       	call   c0000778 <memset>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00133ed:	75 0b                	jne    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00133ef:	50                   	push   eax
c00133f0:	50                   	push   eax
c00133f1:	57                   	push   edi
c00133f2:	56                   	push   esi
c00133f3:	e8 3c d4 fe ff       	call   c0000834 <strcpy>
c00133f8:	eb 41                	jmp    c001343b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133fa:	8a 07                	mov    al,BYTE PTR [edi]
c00133fc:	3c 5c                	cmp    al,0x5c
c00133fe:	74 04                	je     c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013400:	3c 2f                	cmp    al,0x2f
c0013402:	75 18                	jne    c001341c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013404:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013407:	3c 60                	cmp    al,0x60
c0013409:	7e 03                	jle    c001340e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001340b:	83 e8 20             	sub    eax,0x20
c001340e:	88 04 24             	mov    BYTE PTR [esp],al
c0013411:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013418:	50                   	push   eax
c0013419:	50                   	push   eax
c001341a:	eb 18                	jmp    c0013434 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001341c:	50                   	push   eax
c001341d:	50                   	push   eax
c001341e:	55                   	push   ebp
c001341f:	56                   	push   esi
c0013420:	e8 0f d4 fe ff       	call   c0000834 <strcpy>
c0013425:	5a                   	pop    edx
c0013426:	59                   	pop    ecx
c0013427:	68 4d c5 02 c0       	push   0xc002c54d
c001342c:	56                   	push   esi
c001342d:	e8 42 d5 fe ff       	call   c0000974 <strcat>
c0013432:	5d                   	pop    ebp
c0013433:	58                   	pop    eax
c0013434:	57                   	push   edi
c0013435:	56                   	push   esi
c0013436:	e8 39 d5 fe ff       	call   c0000974 <strcat>
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013441:	3c 60                	cmp    al,0x60
c0013443:	7e 03                	jle    c0013448 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013445:	83 e8 20             	sub    eax,0x20
c0013448:	88 04 24             	mov    BYTE PTR [esp],al
c001344b:	88 03                	mov    BYTE PTR [ebx],al
c001344d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013454:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001345a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001345e:	bf 03 00 00 00       	mov    edi,0x3
c0013463:	b8 03 00 00 00       	mov    eax,0x3
c0013468:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001346b:	84 d2                	test   dl,dl
c001346d:	0f 84 91 00 00 00    	je     c0013504 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013473:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013476:	80 fa 5c             	cmp    dl,0x5c
c0013479:	74 05                	je     c0013480 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001347b:	80 fa 2f             	cmp    dl,0x2f
c001347e:	75 12                	jne    c0013492 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013480:	89 c5                	mov    ebp,eax
c0013482:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013487:	74 09                	je     c0013492 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013489:	40                   	inc    eax
c001348a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001348e:	89 cf                	mov    edi,ecx
c0013490:	eb d6                	jmp    c0013468 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013492:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013497:	75 5b                	jne    c00134f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013499:	80 fa 2e             	cmp    dl,0x2e
c001349c:	75 56                	jne    c00134f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001349e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00134a2:	74 19                	je     c00134bd <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00134a4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134a9:	74 53                	je     c00134fe <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134ab:	89 f9                	mov    ecx,edi
c00134ad:	41                   	inc    ecx
c00134ae:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134b1:	80 fa 2f             	cmp    dl,0x2f
c00134b4:	74 f7                	je     c00134ad <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134b6:	80 fa 5c             	cmp    dl,0x5c
c00134b9:	74 f2                	je     c00134ad <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134bb:	eb d1                	jmp    c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134bd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134c2:	74 3a                	je     c00134fe <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134c4:	83 f8 03             	cmp    eax,0x3
c00134c7:	74 c5                	je     c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134c9:	41                   	inc    ecx
c00134ca:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134cd:	80 fa 2f             	cmp    dl,0x2f
c00134d0:	74 f7                	je     c00134c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134d2:	80 fa 5c             	cmp    dl,0x5c
c00134d5:	74 f2                	je     c00134c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134d7:	48                   	dec    eax
c00134d8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134dc:	75 06                	jne    c00134e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134de:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134e2:	eb f3                	jmp    c00134d7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00134e4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134e8:	74 07                	je     c00134f1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00134ea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134ee:	48                   	dec    eax
c00134ef:	eb f3                	jmp    c00134e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134f1:	40                   	inc    eax
c00134f2:	eb 9a                	jmp    c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134f4:	80 fa 2f             	cmp    dl,0x2f
c00134f7:	74 95                	je     c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134f9:	80 fa 5c             	cmp    dl,0x5c
c00134fc:	74 90                	je     c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134fe:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013501:	40                   	inc    eax
c0013502:	eb 8a                	jmp    c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013504:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	53                   	push   ebx
c001350c:	e8 83 d2 fe ff       	call   c0000794 <strlen>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013519:	75 26                	jne    c0013541 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001351b:	83 ec 0c             	sub    esp,0xc
c001351e:	53                   	push   ebx
c001351f:	e8 70 d2 fe ff       	call   c0000794 <strlen>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001352c:	74 26                	je     c0013554 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001352e:	83 ec 0c             	sub    esp,0xc
c0013531:	53                   	push   ebx
c0013532:	e8 5d d2 fe ff       	call   c0000794 <strlen>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001353f:	eb c7                	jmp    c0013508 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013541:	83 ec 0c             	sub    esp,0xc
c0013544:	53                   	push   ebx
c0013545:	e8 4a d2 fe ff       	call   c0000794 <strlen>
c001354a:	83 c4 10             	add    esp,0x10
c001354d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013552:	74 c7                	je     c001351b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013554:	81 c4 0c 04 00 00    	add    esp,0x40c
c001355a:	5b                   	pop    ebx
c001355b:	5e                   	pop    esi
c001355c:	5f                   	pop    edi
c001355d:	5d                   	pop    ebp
c001355e:	c3                   	ret    
c001355f:	90                   	nop

c0013560 <File::File(char const*, Process*)>:
c0013560:	83 ec 0c             	sub    esp,0xc
c0013563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013567:	83 ec 08             	sub    esp,0x8
c001356a:	6a 00                	push   0x0
c001356c:	50                   	push   eax
c001356d:	e8 92 e2 ff ff       	call   c0011804 <UnixFile::UnixFile(int)>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	ba 00 ae 02 c0       	mov    edx,0xc002ae00
c001357a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357e:	89 10                	mov    DWORD PTR [eax],edx
c0013580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013584:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001358a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358e:	83 c0 0d             	add    eax,0xd
c0013591:	83 ec 04             	sub    esp,0x4
c0013594:	52                   	push   edx
c0013595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013599:	50                   	push   eax
c001359a:	e8 17 fe ff ff       	call   c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001359f:	83 c4 10             	add    esp,0x10
c00135a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00135a9:	8d 50 bf             	lea    edx,[eax-0x41]
c00135ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00135b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ba:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135be:	90                   	nop
c00135bf:	83 c4 0c             	add    esp,0xc
c00135c2:	c3                   	ret    
c00135c3:	90                   	nop

c00135c4 <File::open(FileOpenMode)>:
c00135c4:	53                   	push   ebx
c00135c5:	b8 0b 00 00 00       	mov    eax,0xb
c00135ca:	83 ec 08             	sub    esp,0x8
c00135cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135d1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135d8:	80 fa 19             	cmp    dl,0x19
c00135db:	77 40                	ja     c001361d <File::open(FileOpenMode)+0x59>
c00135dd:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c00135e4:	85 d2                	test   edx,edx
c00135e6:	74 35                	je     c001361d <File::open(FileOpenMode)+0x59>
c00135e8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135ee:	85 d2                	test   edx,edx
c00135f0:	74 2b                	je     c001361d <File::open(FileOpenMode)+0x59>
c00135f2:	b8 06 00 00 00       	mov    eax,0x6
c00135f7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135fb:	75 20                	jne    c001361d <File::open(FileOpenMode)+0x59>
c00135fd:	8b 02                	mov    eax,DWORD PTR [edx]
c00135ff:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013609:	51                   	push   ecx
c001360a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001360d:	51                   	push   ecx
c001360e:	52                   	push   edx
c001360f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013612:	83 c4 10             	add    esp,0x10
c0013615:	85 c0                	test   eax,eax
c0013617:	75 04                	jne    c001361d <File::open(FileOpenMode)+0x59>
c0013619:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001361d:	83 c4 08             	add    esp,0x8
c0013620:	5b                   	pop    ebx
c0013621:	c3                   	ret    

c0013622 <File::close()>:
c0013622:	53                   	push   ebx
c0013623:	b8 0b 00 00 00       	mov    eax,0xb
c0013628:	83 ec 08             	sub    esp,0x8
c001362b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001362f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013636:	80 fa 19             	cmp    dl,0x19
c0013639:	77 41                	ja     c001367c <File::close()+0x5a>
c001363b:	8b 1c 95 80 ed 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1280]
c0013642:	85 db                	test   ebx,ebx
c0013644:	74 36                	je     c001367c <File::close()+0x5a>
c0013646:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001364d:	74 2d                	je     c001367c <File::close()+0x5a>
c001364f:	b8 05 00 00 00       	mov    eax,0x5
c0013654:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013658:	74 22                	je     c001367c <File::close()+0x5a>
c001365a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001365e:	8b 04 95 80 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1280]
c0013665:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001366b:	53                   	push   ebx
c001366c:	53                   	push   ebx
c001366d:	8b 10                	mov    edx,DWORD PTR [eax]
c001366f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013675:	50                   	push   eax
c0013676:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013679:	83 c4 10             	add    esp,0x10
c001367c:	83 c4 08             	add    esp,0x8
c001367f:	5b                   	pop    ebx
c0013680:	c3                   	ret    
c0013681:	90                   	nop

c0013682 <File::seek(unsigned long long)>:
c0013682:	56                   	push   esi
c0013683:	53                   	push   ebx
c0013684:	b8 0b 00 00 00       	mov    eax,0xb
c0013689:	51                   	push   ecx
c001368a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001368e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013692:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013699:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001369d:	80 fa 19             	cmp    dl,0x19
c00136a0:	77 31                	ja     c00136d3 <File::seek(unsigned long long)+0x51>
c00136a2:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c00136a9:	85 d2                	test   edx,edx
c00136ab:	74 26                	je     c00136d3 <File::seek(unsigned long long)+0x51>
c00136ad:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136b3:	85 d2                	test   edx,edx
c00136b5:	74 1c                	je     c00136d3 <File::seek(unsigned long long)+0x51>
c00136b7:	b8 05 00 00 00       	mov    eax,0x5
c00136bc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00136c0:	74 11                	je     c00136d3 <File::seek(unsigned long long)+0x51>
c00136c2:	8b 02                	mov    eax,DWORD PTR [edx]
c00136c4:	53                   	push   ebx
c00136c5:	51                   	push   ecx
c00136c6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136cc:	52                   	push   edx
c00136cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136d0:	83 c4 10             	add    esp,0x10
c00136d3:	5a                   	pop    edx
c00136d4:	5b                   	pop    ebx
c00136d5:	5e                   	pop    esi
c00136d6:	c3                   	ret    
c00136d7:	90                   	nop

c00136d8 <File::tell(unsigned long long*)>:
c00136d8:	83 ec 0c             	sub    esp,0xc
c00136db:	b8 0b 00 00 00       	mov    eax,0xb
c00136e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136e4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136eb:	80 fa 19             	cmp    dl,0x19
c00136ee:	77 34                	ja     c0013724 <File::tell(unsigned long long*)+0x4c>
c00136f0:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c00136f7:	85 d2                	test   edx,edx
c00136f9:	74 29                	je     c0013724 <File::tell(unsigned long long*)+0x4c>
c00136fb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013701:	85 d2                	test   edx,edx
c0013703:	74 1f                	je     c0013724 <File::tell(unsigned long long*)+0x4c>
c0013705:	b8 05 00 00 00       	mov    eax,0x5
c001370a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001370e:	74 14                	je     c0013724 <File::tell(unsigned long long*)+0x4c>
c0013710:	50                   	push   eax
c0013711:	8b 02                	mov    eax,DWORD PTR [edx]
c0013713:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013717:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001371d:	52                   	push   edx
c001371e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013721:	83 c4 10             	add    esp,0x10
c0013724:	83 c4 0c             	add    esp,0xc
c0013727:	c3                   	ret    

c0013728 <File::rewind()>:
c0013728:	83 ec 10             	sub    esp,0x10
c001372b:	6a 00                	push   0x0
c001372d:	6a 00                	push   0x0
c001372f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013733:	e8 4a ff ff ff       	call   c0013682 <File::seek(unsigned long long)>
c0013738:	83 c4 1c             	add    esp,0x1c
c001373b:	c3                   	ret    

c001373c <File::unlink()>:
c001373c:	83 ec 0c             	sub    esp,0xc
c001373f:	b8 0b 00 00 00       	mov    eax,0xb
c0013744:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013748:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001374f:	80 f9 19             	cmp    cl,0x19
c0013752:	77 2f                	ja     c0013783 <File::unlink()+0x47>
c0013754:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c001375b:	85 c9                	test   ecx,ecx
c001375d:	74 24                	je     c0013783 <File::unlink()+0x47>
c001375f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013765:	85 c9                	test   ecx,ecx
c0013767:	74 1a                	je     c0013783 <File::unlink()+0x47>
c0013769:	b8 06 00 00 00       	mov    eax,0x6
c001376e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013772:	75 0f                	jne    c0013783 <File::unlink()+0x47>
c0013774:	83 c2 0d             	add    edx,0xd
c0013777:	50                   	push   eax
c0013778:	50                   	push   eax
c0013779:	8b 01                	mov    eax,DWORD PTR [ecx]
c001377b:	52                   	push   edx
c001377c:	51                   	push   ecx
c001377d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	83 c4 0c             	add    esp,0xc
c0013786:	c3                   	ret    
c0013787:	90                   	nop

c0013788 <File::rename(char const*)>:
c0013788:	83 ec 0c             	sub    esp,0xc
c001378b:	b8 0b 00 00 00       	mov    eax,0xb
c0013790:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013794:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001379b:	80 f9 19             	cmp    cl,0x19
c001379e:	77 32                	ja     c00137d2 <File::rename(char const*)+0x4a>
c00137a0:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c00137a7:	85 c9                	test   ecx,ecx
c00137a9:	74 27                	je     c00137d2 <File::rename(char const*)+0x4a>
c00137ab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137b1:	85 c9                	test   ecx,ecx
c00137b3:	74 1d                	je     c00137d2 <File::rename(char const*)+0x4a>
c00137b5:	b8 06 00 00 00       	mov    eax,0x6
c00137ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137be:	75 12                	jne    c00137d2 <File::rename(char const*)+0x4a>
c00137c0:	83 c2 0d             	add    edx,0xd
c00137c3:	50                   	push   eax
c00137c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137ca:	52                   	push   edx
c00137cb:	51                   	push   ecx
c00137cc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137cf:	83 c4 10             	add    esp,0x10
c00137d2:	83 c4 0c             	add    esp,0xc
c00137d5:	c3                   	ret    

c00137d6 <File::chfatattr(unsigned char, unsigned char)>:
c00137d6:	57                   	push   edi
c00137d7:	b8 0b 00 00 00       	mov    eax,0xb
c00137dc:	56                   	push   esi
c00137dd:	53                   	push   ebx
c00137de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137f1:	80 f9 19             	cmp    cl,0x19
c00137f4:	77 37                	ja     c001382d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137f6:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c00137fd:	85 c9                	test   ecx,ecx
c00137ff:	74 2c                	je     c001382d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013801:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013807:	85 c9                	test   ecx,ecx
c0013809:	74 22                	je     c001382d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001380b:	b8 06 00 00 00       	mov    eax,0x6
c0013810:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013814:	75 17                	jne    c001382d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013816:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013818:	89 f0                	mov    eax,esi
c001381a:	83 c2 0d             	add    edx,0xd
c001381d:	0f b6 f0             	movzx  esi,al
c0013820:	0f b6 db             	movzx  ebx,bl
c0013823:	56                   	push   esi
c0013824:	53                   	push   ebx
c0013825:	52                   	push   edx
c0013826:	51                   	push   ecx
c0013827:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001382a:	83 c4 10             	add    esp,0x10
c001382d:	5b                   	pop    ebx
c001382e:	5e                   	pop    esi
c001382f:	5f                   	pop    edi
c0013830:	c3                   	ret    
c0013831:	90                   	nop

c0013832 <File::exists()>:
c0013832:	83 ec 0c             	sub    esp,0xc
c0013835:	31 c0                	xor    eax,eax
c0013837:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001383b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013842:	80 f9 19             	cmp    cl,0x19
c0013845:	77 24                	ja     c001386b <File::exists()+0x39>
c0013847:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c001384e:	85 c9                	test   ecx,ecx
c0013850:	74 19                	je     c001386b <File::exists()+0x39>
c0013852:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013858:	85 c9                	test   ecx,ecx
c001385a:	74 0f                	je     c001386b <File::exists()+0x39>
c001385c:	83 c2 0d             	add    edx,0xd
c001385f:	50                   	push   eax
c0013860:	50                   	push   eax
c0013861:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013863:	52                   	push   edx
c0013864:	51                   	push   ecx
c0013865:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	83 c4 0c             	add    esp,0xc
c001386e:	c3                   	ret    
c001386f:	90                   	nop

c0013870 <File::stat(unsigned long long*, bool*)>:
c0013870:	56                   	push   esi
c0013871:	53                   	push   ebx
c0013872:	50                   	push   eax
c0013873:	b8 0b 00 00 00       	mov    eax,0xb
c0013878:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001387c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013880:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013887:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001388b:	80 f9 19             	cmp    cl,0x19
c001388e:	77 3d                	ja     c00138cd <File::stat(unsigned long long*, bool*)+0x5d>
c0013890:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c0013897:	85 c9                	test   ecx,ecx
c0013899:	74 32                	je     c00138cd <File::stat(unsigned long long*, bool*)+0x5d>
c001389b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138a1:	85 c9                	test   ecx,ecx
c00138a3:	74 28                	je     c00138cd <File::stat(unsigned long long*, bool*)+0x5d>
c00138a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138ab:	74 13                	je     c00138c0 <File::stat(unsigned long long*, bool*)+0x50>
c00138ad:	83 ec 04             	sub    esp,0x4
c00138b0:	56                   	push   esi
c00138b1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00138b7:	51                   	push   ecx
c00138b8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00138bb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138be:	eb 0a                	jmp    c00138ca <File::stat(unsigned long long*, bool*)+0x5a>
c00138c0:	53                   	push   ebx
c00138c1:	83 c2 0d             	add    edx,0xd
c00138c4:	56                   	push   esi
c00138c5:	52                   	push   edx
c00138c6:	51                   	push   ecx
c00138c7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138ca:	83 c4 10             	add    esp,0x10
c00138cd:	5a                   	pop    edx
c00138ce:	5b                   	pop    ebx
c00138cf:	5e                   	pop    esi
c00138d0:	c3                   	ret    

c00138d1 <Fs::setcwd(Process*, char*)>:
c00138d1:	55                   	push   ebp
c00138d2:	57                   	push   edi
c00138d3:	56                   	push   esi
c00138d4:	53                   	push   ebx
c00138d5:	81 ec 20 02 00 00    	sub    esp,0x220
c00138db:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00138e2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00138e8:	57                   	push   edi
c00138e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138f0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138f4:	56                   	push   esi
c00138f5:	e8 bc fa ff ff       	call   c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00138fd:	e8 92 ce fe ff       	call   c0000794 <strlen>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	83 f8 02             	cmp    eax,0x2
c0013908:	77 17                	ja     c0013921 <Fs::setcwd(Process*, char*)+0x50>
c001390a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001390f:	83 e8 41             	sub    eax,0x41
c0013912:	83 f8 19             	cmp    eax,0x19
c0013915:	76 24                	jbe    c001393b <Fs::setcwd(Process*, char*)+0x6a>
c0013917:	b8 03 00 00 00       	mov    eax,0x3
c001391c:	e9 e0 00 00 00       	jmp    c0013a01 <Fs::setcwd(Process*, char*)+0x130>
c0013921:	83 ec 0c             	sub    esp,0xc
c0013924:	56                   	push   esi
c0013925:	e8 6a ce fe ff       	call   c0000794 <strlen>
c001392a:	83 c4 10             	add    esp,0x10
c001392d:	83 f8 03             	cmp    eax,0x3
c0013930:	75 34                	jne    c0013966 <Fs::setcwd(Process*, char*)+0x95>
c0013932:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013937:	75 2d                	jne    c0013966 <Fs::setcwd(Process*, char*)+0x95>
c0013939:	eb cf                	jmp    c001390a <Fs::setcwd(Process*, char*)+0x39>
c001393b:	8b 14 85 80 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1280]
c0013942:	b8 05 00 00 00       	mov    eax,0x5
c0013947:	85 d2                	test   edx,edx
c0013949:	0f 84 b2 00 00 00    	je     c0013a01 <Fs::setcwd(Process*, char*)+0x130>
c001394f:	b8 06 00 00 00       	mov    eax,0x6
c0013954:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001395b:	0f 85 92 00 00 00    	jne    c00139f3 <Fs::setcwd(Process*, char*)+0x122>
c0013961:	e9 9b 00 00 00       	jmp    c0013a01 <Fs::setcwd(Process*, char*)+0x130>
c0013966:	83 ec 0c             	sub    esp,0xc
c0013969:	68 14 01 00 00       	push   0x114
c001396e:	e8 89 bf ff ff       	call   c000f8fc <malloc>
c0013973:	83 c4 0c             	add    esp,0xc
c0013976:	89 c3                	mov    ebx,eax
c0013978:	55                   	push   ebp
c0013979:	56                   	push   esi
c001397a:	50                   	push   eax
c001397b:	e8 e0 fb ff ff       	call   c0013560 <File::File(char const*, Process*)>
c0013980:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013985:	83 c4 0c             	add    esp,0xc
c0013988:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001398c:	50                   	push   eax
c001398d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013991:	50                   	push   eax
c0013992:	53                   	push   ebx
c0013993:	e8 d8 fe ff ff       	call   c0013870 <File::stat(unsigned long long*, bool*)>
c0013998:	83 c4 10             	add    esp,0x10
c001399b:	83 f8 02             	cmp    eax,0x2
c001399e:	74 04                	je     c00139a4 <Fs::setcwd(Process*, char*)+0xd3>
c00139a0:	85 c0                	test   eax,eax
c00139a2:	74 1c                	je     c00139c0 <Fs::setcwd(Process*, char*)+0xef>
c00139a4:	b8 01 00 00 00       	mov    eax,0x1
c00139a9:	85 db                	test   ebx,ebx
c00139ab:	74 54                	je     c0013a01 <Fs::setcwd(Process*, char*)+0x130>
c00139ad:	83 ec 0c             	sub    esp,0xc
c00139b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139b2:	53                   	push   ebx
c00139b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	b8 01 00 00 00       	mov    eax,0x1
c00139be:	eb 41                	jmp    c0013a01 <Fs::setcwd(Process*, char*)+0x130>
c00139c0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139c5:	75 1c                	jne    c00139e3 <Fs::setcwd(Process*, char*)+0x112>
c00139c7:	b8 02 00 00 00       	mov    eax,0x2
c00139cc:	85 db                	test   ebx,ebx
c00139ce:	74 31                	je     c0013a01 <Fs::setcwd(Process*, char*)+0x130>
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139d5:	53                   	push   ebx
c00139d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	b8 02 00 00 00       	mov    eax,0x2
c00139e1:	eb 1e                	jmp    c0013a01 <Fs::setcwd(Process*, char*)+0x130>
c00139e3:	85 db                	test   ebx,ebx
c00139e5:	74 0c                	je     c00139f3 <Fs::setcwd(Process*, char*)+0x122>
c00139e7:	83 ec 0c             	sub    esp,0xc
c00139ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139ec:	53                   	push   ebx
c00139ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139f0:	83 c4 10             	add    esp,0x10
c00139f3:	50                   	push   eax
c00139f4:	50                   	push   eax
c00139f5:	56                   	push   esi
c00139f6:	57                   	push   edi
c00139f7:	e8 38 ce fe ff       	call   c0000834 <strcpy>
c00139fc:	83 c4 10             	add    esp,0x10
c00139ff:	31 c0                	xor    eax,eax
c0013a01:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013a07:	5b                   	pop    ebx
c0013a08:	5e                   	pop    esi
c0013a09:	5f                   	pop    edi
c0013a0a:	5d                   	pop    ebp
c0013a0b:	c3                   	ret    

c0013a0c <Directory::Directory(char const*, Process*)>:
c0013a0c:	83 ec 0c             	sub    esp,0xc
c0013a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a13:	83 ec 08             	sub    esp,0x8
c0013a16:	6a 00                	push   0x0
c0013a18:	50                   	push   eax
c0013a19:	e8 e6 dd ff ff       	call   c0011804 <UnixFile::UnixFile(int)>
c0013a1e:	83 c4 10             	add    esp,0x10
c0013a21:	ba 1c ae 02 c0       	mov    edx,0xc002ae1c
c0013a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2a:	89 10                	mov    DWORD PTR [eax],edx
c0013a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a30:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3a:	83 c0 0d             	add    eax,0xd
c0013a3d:	83 ec 04             	sub    esp,0x4
c0013a40:	52                   	push   edx
c0013a41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a45:	50                   	push   eax
c0013a46:	e8 6b f9 ff ff       	call   c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a52:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a55:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a66:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a6a:	90                   	nop
c0013a6b:	83 c4 0c             	add    esp,0xc
c0013a6e:	c3                   	ret    
c0013a6f:	90                   	nop

c0013a70 <Directory::open()>:
c0013a70:	53                   	push   ebx
c0013a71:	b8 0b 00 00 00       	mov    eax,0xb
c0013a76:	83 ec 08             	sub    esp,0x8
c0013a79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a7d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a84:	80 fa 19             	cmp    dl,0x19
c0013a87:	77 3d                	ja     c0013ac6 <Directory::open()+0x56>
c0013a89:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c0013a90:	85 d2                	test   edx,edx
c0013a92:	74 32                	je     c0013ac6 <Directory::open()+0x56>
c0013a94:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a9a:	85 d2                	test   edx,edx
c0013a9c:	74 28                	je     c0013ac6 <Directory::open()+0x56>
c0013a9e:	b8 06 00 00 00       	mov    eax,0x6
c0013aa3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013aa7:	75 1d                	jne    c0013ac6 <Directory::open()+0x56>
c0013aa9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013aaf:	50                   	push   eax
c0013ab0:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ab2:	51                   	push   ecx
c0013ab3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013ab6:	51                   	push   ecx
c0013ab7:	52                   	push   edx
c0013ab8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013abb:	83 c4 10             	add    esp,0x10
c0013abe:	85 c0                	test   eax,eax
c0013ac0:	75 04                	jne    c0013ac6 <Directory::open()+0x56>
c0013ac2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013ac6:	83 c4 08             	add    esp,0x8
c0013ac9:	5b                   	pop    ebx
c0013aca:	c3                   	ret    
c0013acb:	90                   	nop

c0013acc <Directory::close()>:
c0013acc:	53                   	push   ebx
c0013acd:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad2:	83 ec 08             	sub    esp,0x8
c0013ad5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ad9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ae0:	80 fa 19             	cmp    dl,0x19
c0013ae3:	77 41                	ja     c0013b26 <Directory::close()+0x5a>
c0013ae5:	8b 1c 95 80 ed 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1280]
c0013aec:	85 db                	test   ebx,ebx
c0013aee:	74 36                	je     c0013b26 <Directory::close()+0x5a>
c0013af0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013af7:	74 2d                	je     c0013b26 <Directory::close()+0x5a>
c0013af9:	b8 05 00 00 00       	mov    eax,0x5
c0013afe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013b02:	74 22                	je     c0013b26 <Directory::close()+0x5a>
c0013b04:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013b08:	8b 04 95 80 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1280]
c0013b0f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013b15:	53                   	push   ebx
c0013b16:	53                   	push   ebx
c0013b17:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b19:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013b1f:	50                   	push   eax
c0013b20:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	83 c4 08             	add    esp,0x8
c0013b29:	5b                   	pop    ebx
c0013b2a:	c3                   	ret    
c0013b2b:	90                   	nop

c0013b2c <Directory::unlink()>:
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	b8 0b 00 00 00       	mov    eax,0xb
c0013b34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b38:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b3f:	80 f9 19             	cmp    cl,0x19
c0013b42:	77 2f                	ja     c0013b73 <Directory::unlink()+0x47>
c0013b44:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c0013b4b:	85 c9                	test   ecx,ecx
c0013b4d:	74 24                	je     c0013b73 <Directory::unlink()+0x47>
c0013b4f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b55:	85 c9                	test   ecx,ecx
c0013b57:	74 1a                	je     c0013b73 <Directory::unlink()+0x47>
c0013b59:	b8 06 00 00 00       	mov    eax,0x6
c0013b5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b62:	75 0f                	jne    c0013b73 <Directory::unlink()+0x47>
c0013b64:	83 c2 0d             	add    edx,0xd
c0013b67:	50                   	push   eax
c0013b68:	50                   	push   eax
c0013b69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b6b:	52                   	push   edx
c0013b6c:	51                   	push   ecx
c0013b6d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	83 c4 0c             	add    esp,0xc
c0013b76:	c3                   	ret    
c0013b77:	90                   	nop

c0013b78 <Directory::rename(char const*)>:
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b8b:	80 f9 19             	cmp    cl,0x19
c0013b8e:	77 32                	ja     c0013bc2 <Directory::rename(char const*)+0x4a>
c0013b90:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c0013b97:	85 c9                	test   ecx,ecx
c0013b99:	74 27                	je     c0013bc2 <Directory::rename(char const*)+0x4a>
c0013b9b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ba1:	85 c9                	test   ecx,ecx
c0013ba3:	74 1d                	je     c0013bc2 <Directory::rename(char const*)+0x4a>
c0013ba5:	b8 06 00 00 00       	mov    eax,0x6
c0013baa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bae:	75 12                	jne    c0013bc2 <Directory::rename(char const*)+0x4a>
c0013bb0:	83 c2 0d             	add    edx,0xd
c0013bb3:	50                   	push   eax
c0013bb4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bba:	52                   	push   edx
c0013bbb:	51                   	push   ecx
c0013bbc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013bbf:	83 c4 10             	add    esp,0x10
c0013bc2:	83 c4 0c             	add    esp,0xc
c0013bc5:	c3                   	ret    

c0013bc6 <Directory::exists()>:
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	31 c0                	xor    eax,eax
c0013bcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bcf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bd6:	80 f9 19             	cmp    cl,0x19
c0013bd9:	77 24                	ja     c0013bff <Directory::exists()+0x39>
c0013bdb:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c0013be2:	85 c9                	test   ecx,ecx
c0013be4:	74 19                	je     c0013bff <Directory::exists()+0x39>
c0013be6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bec:	85 c9                	test   ecx,ecx
c0013bee:	74 0f                	je     c0013bff <Directory::exists()+0x39>
c0013bf0:	83 c2 0d             	add    edx,0xd
c0013bf3:	50                   	push   eax
c0013bf4:	50                   	push   eax
c0013bf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bf7:	52                   	push   edx
c0013bf8:	51                   	push   ecx
c0013bf9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	83 c4 0c             	add    esp,0xc
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Directory::read(dirent*)>:
c0013c04:	83 ec 1c             	sub    esp,0x1c
c0013c07:	b8 0b 00 00 00       	mov    eax,0xb
c0013c0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013c10:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013c17:	80 fa 19             	cmp    dl,0x19
c0013c1a:	77 30                	ja     c0013c4c <Directory::read(dirent*)+0x48>
c0013c1c:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c0013c23:	85 d2                	test   edx,edx
c0013c25:	74 25                	je     c0013c4c <Directory::read(dirent*)+0x48>
c0013c27:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c2e:	74 1c                	je     c0013c4c <Directory::read(dirent*)+0x48>
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c35:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c39:	52                   	push   edx
c0013c3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c3e:	6a 00                	push   0x0
c0013c40:	68 10 01 00 00       	push   0x110
c0013c45:	51                   	push   ecx
c0013c46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c49:	83 c4 20             	add    esp,0x20
c0013c4c:	83 c4 1c             	add    esp,0x1c
c0013c4f:	c3                   	ret    

c0013c50 <Directory::create()>:
c0013c50:	83 ec 0c             	sub    esp,0xc
c0013c53:	b8 0b 00 00 00       	mov    eax,0xb
c0013c58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c63:	80 f9 19             	cmp    cl,0x19
c0013c66:	77 2f                	ja     c0013c97 <Directory::create()+0x47>
c0013c68:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c0013c6f:	85 c9                	test   ecx,ecx
c0013c71:	74 24                	je     c0013c97 <Directory::create()+0x47>
c0013c73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c79:	85 c9                	test   ecx,ecx
c0013c7b:	74 1a                	je     c0013c97 <Directory::create()+0x47>
c0013c7d:	b8 06 00 00 00       	mov    eax,0x6
c0013c82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c86:	75 0f                	jne    c0013c97 <Directory::create()+0x47>
c0013c88:	83 c2 0d             	add    edx,0xd
c0013c8b:	50                   	push   eax
c0013c8c:	50                   	push   eax
c0013c8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c8f:	52                   	push   edx
c0013c90:	51                   	push   ecx
c0013c91:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c94:	83 c4 10             	add    esp,0x10
c0013c97:	83 c4 0c             	add    esp,0xc
c0013c9a:	c3                   	ret    
c0013c9b:	90                   	nop

c0013c9c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c9c:	b8 0a 00 00 00       	mov    eax,0xa
c0013ca1:	c3                   	ret    

c0013ca2 <Bus::Bus(char const*)>:
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca9:	83 ec 08             	sub    esp,0x8
c0013cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb0:	50                   	push   eax
c0013cb1:	e8 68 09 00 00       	call   c001461e <Device::Device(char const*)>
c0013cb6:	83 c4 10             	add    esp,0x10
c0013cb9:	ba 38 ae 02 c0       	mov    edx,0xc002ae38
c0013cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc2:	89 10                	mov    DWORD PTR [eax],edx
c0013cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013cd2:	90                   	nop
c0013cd3:	83 c4 0c             	add    esp,0xc
c0013cd6:	c3                   	ret    
c0013cd7:	90                   	nop

c0013cd8 <Bus::~Bus()>:
c0013cd8:	83 ec 0c             	sub    esp,0xc
c0013cdb:	ba 38 ae 02 c0       	mov    edx,0xc002ae38
c0013ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce4:	89 10                	mov    DWORD PTR [eax],edx
c0013ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cea:	83 ec 0c             	sub    esp,0xc
c0013ced:	50                   	push   eax
c0013cee:	e8 0d 06 00 00       	call   c0014300 <Device::~Device()>
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	90                   	nop
c0013cf7:	83 c4 0c             	add    esp,0xc
c0013cfa:	c3                   	ret    
c0013cfb:	90                   	nop

c0013cfc <Bus::~Bus()>:
c0013cfc:	83 ec 0c             	sub    esp,0xc
c0013cff:	83 ec 0c             	sub    esp,0xc
c0013d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d06:	e8 cd ff ff ff       	call   c0013cd8 <Bus::~Bus()>
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	83 ec 08             	sub    esp,0x8
c0013d11:	68 58 01 00 00       	push   0x158
c0013d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d1a:	e8 08 f2 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	83 c4 0c             	add    esp,0xc
c0013d25:	c3                   	ret    

c0013d26 <Buzzer::Buzzer(char const*)>:
c0013d26:	83 ec 0c             	sub    esp,0xc
c0013d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2d:	83 ec 08             	sub    esp,0x8
c0013d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d34:	50                   	push   eax
c0013d35:	e8 e4 08 00 00       	call   c001461e <Device::Device(char const*)>
c0013d3a:	83 c4 10             	add    esp,0x10
c0013d3d:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0013d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d46:	89 10                	mov    DWORD PTR [eax],edx
c0013d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d64:	90                   	nop
c0013d65:	83 c4 0c             	add    esp,0xc
c0013d68:	c3                   	ret    
c0013d69:	90                   	nop

c0013d6a <Buzzer::~Buzzer()>:
c0013d6a:	83 ec 0c             	sub    esp,0xc
c0013d6d:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0013d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d76:	89 10                	mov    DWORD PTR [eax],edx
c0013d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7c:	83 ec 0c             	sub    esp,0xc
c0013d7f:	50                   	push   eax
c0013d80:	e8 7b 05 00 00       	call   c0014300 <Device::~Device()>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	90                   	nop
c0013d89:	83 c4 0c             	add    esp,0xc
c0013d8c:	c3                   	ret    
c0013d8d:	90                   	nop

c0013d8e <Buzzer::~Buzzer()>:
c0013d8e:	83 ec 0c             	sub    esp,0xc
c0013d91:	83 ec 0c             	sub    esp,0xc
c0013d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d98:	e8 cd ff ff ff       	call   c0013d6a <Buzzer::~Buzzer()>
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	83 ec 08             	sub    esp,0x8
c0013da3:	68 5c 01 00 00       	push   0x15c
c0013da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dac:	e8 76 f1 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0013db1:	83 c4 10             	add    esp,0x10
c0013db4:	83 c4 0c             	add    esp,0xc
c0013db7:	c3                   	ret    

c0013db8 <Buzzer::stop()>:
c0013db8:	83 ec 14             	sub    esp,0x14
c0013dbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dc1:	6a 00                	push   0x0
c0013dc3:	50                   	push   eax
c0013dc4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013dc7:	83 c4 1c             	add    esp,0x1c
c0013dca:	c3                   	ret    

c0013dcb <beepThread(void*)>:
c0013dcb:	53                   	push   ebx
c0013dcc:	83 ec 08             	sub    esp,0x8
c0013dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd3:	e8 08 a1 00 00       	call   c001dee0 <unlockScheduler()>
c0013dd8:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ddd:	52                   	push   edx
c0013dde:	52                   	push   edx
c0013ddf:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013de5:	52                   	push   edx
c0013de6:	50                   	push   eax
c0013de7:	e8 42 a6 00 00       	call   c001e42e <nanoSleep(unsigned long long)>
c0013dec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013def:	e8 c4 ff ff ff       	call   c0013db8 <Buzzer::stop()>
c0013df4:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013dfc:	83 c4 18             	add    esp,0x18
c0013dff:	5b                   	pop    ebx
c0013e00:	e9 6f a5 00 00       	jmp    c001e374 <blockTask(TaskState)>
c0013e05:	90                   	nop

c0013e06 <Buzzer::beep(int, int, bool)>:
c0013e06:	57                   	push   edi
c0013e07:	56                   	push   esi
c0013e08:	53                   	push   ebx
c0013e09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e0d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e15:	52                   	push   edx
c0013e16:	52                   	push   edx
c0013e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1d:	56                   	push   esi
c0013e1e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013e21:	83 c4 10             	add    esp,0x10
c0013e24:	89 f8                	mov    eax,edi
c0013e26:	84 c0                	test   al,al
c0013e28:	74 1f                	je     c0013e49 <Buzzer::beep(int, int, bool)+0x43>
c0013e2a:	50                   	push   eax
c0013e2b:	50                   	push   eax
c0013e2c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e32:	99                   	cdq    
c0013e33:	52                   	push   edx
c0013e34:	50                   	push   eax
c0013e35:	e8 f4 a5 00 00       	call   c001e42e <nanoSleep(unsigned long long)>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e41:	5b                   	pop    ebx
c0013e42:	5e                   	pop    esi
c0013e43:	5f                   	pop    edi
c0013e44:	e9 6f ff ff ff       	jmp    c0013db8 <Buzzer::stop()>
c0013e49:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e4f:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0013e54:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e5c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e60:	c7 44 24 14 cb 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013dcb
c0013e68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e6c:	5b                   	pop    ebx
c0013e6d:	5e                   	pop    esi
c0013e6e:	5f                   	pop    edi
c0013e6f:	e9 9c a1 00 00       	jmp    c001e010 <Process::createThread(void (*)(void*), void*, int)>

c0013e74 <User::loadClockSettings(int)>:
c0013e74:	53                   	push   ebx
c0013e75:	83 ec 14             	sub    esp,0x14
c0013e78:	68 14 01 00 00       	push   0x114
c0013e7d:	e8 7a ba ff ff       	call   c000f8fc <malloc>
c0013e82:	83 c4 0c             	add    esp,0xc
c0013e85:	89 c3                	mov    ebx,eax
c0013e87:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c0013e8d:	68 8c ae 02 c0       	push   0xc002ae8c
c0013e92:	50                   	push   eax
c0013e93:	e8 c8 f6 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c0013e98:	58                   	pop    eax
c0013e99:	5a                   	pop    edx
c0013e9a:	6a 01                	push   0x1
c0013e9c:	53                   	push   ebx
c0013e9d:	e8 22 f7 ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c0013ea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ea5:	e8 78 f7 ff ff       	call   c0013622 <File::close()>
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	85 db                	test   ebx,ebx
c0013eaf:	74 0f                	je     c0013ec0 <User::loadClockSettings(int)+0x4c>
c0013eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013eb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eba:	83 c4 08             	add    esp,0x8
c0013ebd:	5b                   	pop    ebx
c0013ebe:	ff e0                	jmp    eax
c0013ec0:	83 c4 08             	add    esp,0x8
c0013ec3:	5b                   	pop    ebx
c0013ec4:	c3                   	ret    
c0013ec5:	90                   	nop

c0013ec6 <Clock::Clock(char const*)>:
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ecd:	83 ec 08             	sub    esp,0x8
c0013ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ed4:	50                   	push   eax
c0013ed5:	e8 44 07 00 00       	call   c001461e <Device::Device(char const*)>
c0013eda:	83 c4 10             	add    esp,0x10
c0013edd:	ba b4 ae 02 c0       	mov    edx,0xc002aeb4
c0013ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee6:	89 10                	mov    DWORD PTR [eax],edx
c0013ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eec:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ef6:	90                   	nop
c0013ef7:	83 c4 0c             	add    esp,0xc
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <Clock::~Clock()>:
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	ba b4 ae 02 c0       	mov    edx,0xc002aeb4
c0013f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f08:	89 10                	mov    DWORD PTR [eax],edx
c0013f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0e:	83 ec 0c             	sub    esp,0xc
c0013f11:	50                   	push   eax
c0013f12:	e8 e9 03 00 00       	call   c0014300 <Device::~Device()>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	90                   	nop
c0013f1b:	83 c4 0c             	add    esp,0xc
c0013f1e:	c3                   	ret    
c0013f1f:	90                   	nop

c0013f20 <Clock::~Clock()>:
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	83 ec 0c             	sub    esp,0xc
c0013f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2a:	e8 cd ff ff ff       	call   c0013efc <Clock::~Clock()>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	83 ec 08             	sub    esp,0x8
c0013f35:	68 58 01 00 00       	push   0x158
c0013f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f3e:	e8 e4 ef ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	83 c4 0c             	add    esp,0xc
c0013f49:	c3                   	ret    

c0013f4a <Clock::timeInSecondsLocal()>:
c0013f4a:	53                   	push   ebx
c0013f4b:	83 ec 14             	sub    esp,0x14
c0013f4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f52:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f54:	50                   	push   eax
c0013f55:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f58:	0f b6 0d f4 e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e8f4
c0013f5f:	03 0d f8 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e8f8
c0013f65:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f6b:	89 cb                	mov    ebx,ecx
c0013f6d:	c1 fb 1f             	sar    ebx,0x1f
c0013f70:	01 c8                	add    eax,ecx
c0013f72:	11 da                	adc    edx,ebx
c0013f74:	83 c4 10             	add    esp,0x10
c0013f77:	31 c9                	xor    ecx,ecx
c0013f79:	80 3d f5 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8f5,0x0
c0013f80:	74 05                	je     c0013f87 <Clock::timeInSecondsLocal()+0x3d>
c0013f82:	b9 08 07 00 00       	mov    ecx,0x708
c0013f87:	31 db                	xor    ebx,ebx
c0013f89:	01 c8                	add    eax,ecx
c0013f8b:	11 da                	adc    edx,ebx
c0013f8d:	83 c4 08             	add    esp,0x8
c0013f90:	5b                   	pop    ebx
c0013f91:	c3                   	ret    

c0013f92 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f92:	57                   	push   edi
c0013f93:	56                   	push   esi
c0013f94:	53                   	push   ebx
c0013f95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f9f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fa3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013fa6:	0f b6 05 f4 e8 02 c0 	movzx  eax,BYTE PTR ds:0xc002e8f4
c0013fad:	03 05 f8 e8 02 c0    	add    eax,DWORD PTR ds:0xc002e8f8
c0013fb3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013fb9:	99                   	cdq    
c0013fba:	29 c6                	sub    esi,eax
c0013fbc:	19 d7                	sbb    edi,edx
c0013fbe:	89 f0                	mov    eax,esi
c0013fc0:	89 fa                	mov    edx,edi
c0013fc2:	31 f6                	xor    esi,esi
c0013fc4:	80 3d f5 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8f5,0x0
c0013fcb:	74 05                	je     c0013fd2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013fcd:	be 08 07 00 00       	mov    esi,0x708
c0013fd2:	31 ff                	xor    edi,edi
c0013fd4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013fd8:	29 f0                	sub    eax,esi
c0013fda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fde:	19 fa                	sbb    edx,edi
c0013fe0:	89 d8                	mov    eax,ebx
c0013fe2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fe6:	5b                   	pop    ebx
c0013fe7:	5e                   	pop    esi
c0013fe8:	5f                   	pop    edi
c0013fe9:	ff e0                	jmp    eax

c0013feb <datetimeToSeconds(datetime_t)>:
c0013feb:	55                   	push   ebp
c0013fec:	57                   	push   edi
c0013fed:	56                   	push   esi
c0013fee:	53                   	push   ebx
c0013fef:	83 ec 14             	sub    esp,0x14
c0013ff2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ff6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ffa:	89 d3                	mov    ebx,edx
c0013ffc:	0f b6 c6             	movzx  eax,dh
c0013fff:	c1 eb 10             	shr    ebx,0x10
c0014002:	48                   	dec    eax
c0014003:	66 81 eb 6c 07       	sub    bx,0x76c
c0014008:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001400c:	0f b6 f5             	movzx  esi,ch
c001400f:	89 cf                	mov    edi,ecx
c0014011:	6b f6 3c             	imul   esi,esi,0x3c
c0014014:	c1 ef 10             	shr    edi,0x10
c0014017:	0f b6 c9             	movzx  ecx,cl
c001401a:	89 f8                	mov    eax,edi
c001401c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014022:	0f b6 f8             	movzx  edi,al
c0014025:	0f b6 d2             	movzx  edx,dl
c0014028:	01 fe                	add    esi,edi
c001402a:	01 f1                	add    ecx,esi
c001402c:	0f b7 f3             	movzx  esi,bx
c001402f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014033:	c1 f9 1f             	sar    ecx,0x1f
c0014036:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001403b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001403f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0014044:	8b 0c 8d 00 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5100]
c001404b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001404f:	76 29                	jbe    c001407a <datetimeToSeconds(datetime_t)+0x8f>
c0014051:	f6 c3 03             	test   bl,0x3
c0014054:	75 24                	jne    c001407a <datetimeToSeconds(datetime_t)+0x8f>
c0014056:	31 d2                	xor    edx,edx
c0014058:	bf 64 00 00 00       	mov    edi,0x64
c001405d:	89 d8                	mov    eax,ebx
c001405f:	66 f7 f7             	div    di
c0014062:	66 85 d2             	test   dx,dx
c0014065:	75 12                	jne    c0014079 <datetimeToSeconds(datetime_t)+0x8e>
c0014067:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001406d:	bf 90 01 00 00       	mov    edi,0x190
c0014072:	99                   	cdq    
c0014073:	f7 ff                	idiv   edi
c0014075:	85 d2                	test   edx,edx
c0014077:	75 01                	jne    c001407a <datetimeToSeconds(datetime_t)+0x8f>
c0014079:	41                   	inc    ecx
c001407a:	66 83 fb 46          	cmp    bx,0x46
c001407e:	76 45                	jbe    c00140c5 <datetimeToSeconds(datetime_t)+0xda>
c0014080:	bb 46 00 00 00       	mov    ebx,0x46
c0014085:	bf 64 00 00 00       	mov    edi,0x64
c001408a:	bd 90 01 00 00       	mov    ebp,0x190
c001408f:	b8 6d 01 00 00       	mov    eax,0x16d
c0014094:	f6 c3 03             	test   bl,0x3
c0014097:	75 23                	jne    c00140bc <datetimeToSeconds(datetime_t)+0xd1>
c0014099:	89 d8                	mov    eax,ebx
c001409b:	99                   	cdq    
c001409c:	f7 ff                	idiv   edi
c001409e:	b8 6e 01 00 00       	mov    eax,0x16e
c00140a3:	85 d2                	test   edx,edx
c00140a5:	75 15                	jne    c00140bc <datetimeToSeconds(datetime_t)+0xd1>
c00140a7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00140ad:	99                   	cdq    
c00140ae:	f7 fd                	idiv   ebp
c00140b0:	83 fa 01             	cmp    edx,0x1
c00140b3:	19 c0                	sbb    eax,eax
c00140b5:	f7 d0                	not    eax
c00140b7:	05 6e 01 00 00       	add    eax,0x16e
c00140bc:	01 c1                	add    ecx,eax
c00140be:	43                   	inc    ebx
c00140bf:	39 f3                	cmp    ebx,esi
c00140c1:	7c cc                	jl     c001408f <datetimeToSeconds(datetime_t)+0xa4>
c00140c3:	eb 35                	jmp    c00140fa <datetimeToSeconds(datetime_t)+0x10f>
c00140c5:	74 33                	je     c00140fa <datetimeToSeconds(datetime_t)+0x10f>
c00140c7:	b8 45 00 00 00       	mov    eax,0x45
c00140cc:	89 c2                	mov    edx,eax
c00140ce:	83 e2 03             	and    edx,0x3
c00140d1:	39 f0                	cmp    eax,esi
c00140d3:	7e 0f                	jle    c00140e4 <datetimeToSeconds(datetime_t)+0xf9>
c00140d5:	83 fa 01             	cmp    edx,0x1
c00140d8:	19 d2                	sbb    edx,edx
c00140da:	48                   	dec    eax
c00140db:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00140e2:	eb e8                	jmp    c00140cc <datetimeToSeconds(datetime_t)+0xe1>
c00140e4:	b8 6d 01 00 00       	mov    eax,0x16d
c00140e9:	85 d2                	test   edx,edx
c00140eb:	75 0b                	jne    c00140f8 <datetimeToSeconds(datetime_t)+0x10d>
c00140ed:	66 83 fb 01          	cmp    bx,0x1
c00140f1:	19 c0                	sbb    eax,eax
c00140f3:	05 6e 01 00 00       	add    eax,0x16e
c00140f8:	29 c1                	sub    ecx,eax
c00140fa:	b8 80 51 01 00       	mov    eax,0x15180
c00140ff:	f7 e9                	imul   ecx
c0014101:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014105:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014109:	83 c4 14             	add    esp,0x14
c001410c:	5b                   	pop    ebx
c001410d:	5e                   	pop    esi
c001410e:	5f                   	pop    edi
c001410f:	5d                   	pop    ebp
c0014110:	c3                   	ret    
c0014111:	90                   	nop

c0014112 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014112:	57                   	push   edi
c0014113:	56                   	push   esi
c0014114:	53                   	push   ebx
c0014115:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014119:	8b 06                	mov    eax,DWORD PTR [esi]
c001411b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001411e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014126:	e8 c0 fe ff ff       	call   c0013feb <datetimeToSeconds(datetime_t)>
c001412b:	59                   	pop    ecx
c001412c:	0f b6 0d f4 e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e8f4
c0014133:	5b                   	pop    ebx
c0014134:	03 0d f8 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e8f8
c001413a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014140:	89 cb                	mov    ebx,ecx
c0014142:	c1 fb 1f             	sar    ebx,0x1f
c0014145:	29 c8                	sub    eax,ecx
c0014147:	19 da                	sbb    edx,ebx
c0014149:	31 c9                	xor    ecx,ecx
c001414b:	80 3d f5 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8f5,0x0
c0014152:	74 05                	je     c0014159 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014154:	b9 08 07 00 00       	mov    ecx,0x708
c0014159:	31 db                	xor    ebx,ebx
c001415b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001415f:	29 c8                	sub    eax,ecx
c0014161:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014165:	19 da                	sbb    edx,ebx
c0014167:	89 f8                	mov    eax,edi
c0014169:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001416d:	5b                   	pop    ebx
c001416e:	5e                   	pop    esi
c001416f:	5f                   	pop    edi
c0014170:	ff e0                	jmp    eax

c0014172 <secondsToDatetime(unsigned long long)>:
c0014172:	55                   	push   ebp
c0014173:	57                   	push   edi
c0014174:	56                   	push   esi
c0014175:	53                   	push   ebx
c0014176:	83 ec 1c             	sub    esp,0x1c
c0014179:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001417d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014181:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014185:	6a 00                	push   0x0
c0014187:	68 80 51 01 00       	push   0x15180
c001418c:	55                   	push   ebp
c001418d:	57                   	push   edi
c001418e:	e8 29 29 01 00       	call   c0026abc <__udivdi3>
c0014193:	83 c4 10             	add    esp,0x10
c0014196:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001419c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141a0:	6a 00                	push   0x0
c00141a2:	68 80 51 01 00       	push   0x15180
c00141a7:	55                   	push   ebp
c00141a8:	57                   	push   edi
c00141a9:	bf 10 0e 00 00       	mov    edi,0xe10
c00141ae:	e8 09 2a 01 00       	call   c0026bbc <__umoddi3>
c00141b3:	83 c4 10             	add    esp,0x10
c00141b6:	99                   	cdq    
c00141b7:	f7 ff                	idiv   edi
c00141b9:	bf 3c 00 00 00       	mov    edi,0x3c
c00141be:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00141c1:	89 d0                	mov    eax,edx
c00141c3:	99                   	cdq    
c00141c4:	f7 ff                	idiv   edi
c00141c6:	85 db                	test   ebx,ebx
c00141c8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141cb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141ce:	79 11                	jns    c00141e1 <secondsToDatetime(unsigned long long)+0x6f>
c00141d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00141d4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00141da:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141df:	eb 07                	jmp    c00141e8 <secondsToDatetime(unsigned long long)+0x76>
c00141e1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141e6:	89 d8                	mov    eax,ebx
c00141e8:	bf b4 05 00 00       	mov    edi,0x5b4
c00141ed:	99                   	cdq    
c00141ee:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141f3:	f7 f9                	idiv   ecx
c00141f5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141fe:	31 d2                	xor    edx,edx
c0014200:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014208:	01 c3                	add    ebx,eax
c001420a:	89 d8                	mov    eax,ebx
c001420c:	f7 f1                	div    ecx
c001420e:	31 d2                	xor    edx,edx
c0014210:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014213:	89 d8                	mov    eax,ebx
c0014215:	f7 f7                	div    edi
c0014217:	31 d2                	xor    edx,edx
c0014219:	29 c1                	sub    ecx,eax
c001421b:	89 d8                	mov    eax,ebx
c001421d:	f7 f5                	div    ebp
c001421f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014224:	29 c1                	sub    ecx,eax
c0014226:	31 d2                	xor    edx,edx
c0014228:	89 c8                	mov    eax,ecx
c001422a:	f7 f5                	div    ebp
c001422c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014235:	31 d2                	xor    edx,edx
c0014237:	89 c8                	mov    eax,ecx
c0014239:	f7 f5                	div    ebp
c001423b:	31 d2                	xor    edx,edx
c001423d:	01 c3                	add    ebx,eax
c001423f:	89 c8                	mov    eax,ecx
c0014241:	f7 f7                	div    edi
c0014243:	bf 99 00 00 00       	mov    edi,0x99
c0014248:	29 c3                	sub    ebx,eax
c001424a:	31 d2                	xor    edx,edx
c001424c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014254:	29 c3                	sub    ebx,eax
c0014256:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014259:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001425c:	bb 05 00 00 00       	mov    ebx,0x5
c0014261:	83 c1 02             	add    ecx,0x2
c0014264:	89 c8                	mov    eax,ecx
c0014266:	f7 f7                	div    edi
c0014268:	31 d2                	xor    edx,edx
c001426a:	89 c7                	mov    edi,eax
c001426c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014272:	83 c0 02             	add    eax,0x2
c0014275:	f7 f3                	div    ebx
c0014277:	89 eb                	mov    ebx,ebp
c0014279:	29 c3                	sub    ebx,eax
c001427b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014281:	88 1e                	mov    BYTE PTR [esi],bl
c0014283:	19 c0                	sbb    eax,eax
c0014285:	31 d2                	xor    edx,edx
c0014287:	83 e0 0c             	and    eax,0xc
c001428a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001428e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014296:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001429a:	83 f9 01             	cmp    ecx,0x1
c001429d:	0f 96 c2             	setbe  dl
c00142a0:	41                   	inc    ecx
c00142a1:	01 d0                	add    eax,edx
c00142a3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00142a6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00142aa:	83 c4 1c             	add    esp,0x1c
c00142ad:	89 f0                	mov    eax,esi
c00142af:	5b                   	pop    ebx
c00142b0:	5e                   	pop    esi
c00142b1:	5f                   	pop    edi
c00142b2:	5d                   	pop    ebp
c00142b3:	c2 04 00             	ret    0x4

c00142b6 <Clock::timeInDatetimeLocal()>:
c00142b6:	53                   	push   ebx
c00142b7:	83 ec 14             	sub    esp,0x14
c00142ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142c2:	e8 83 fc ff ff       	call   c0013f4a <Clock::timeInSecondsLocal()>
c00142c7:	83 c4 0c             	add    esp,0xc
c00142ca:	52                   	push   edx
c00142cb:	50                   	push   eax
c00142cc:	53                   	push   ebx
c00142cd:	e8 a0 fe ff ff       	call   c0014172 <secondsToDatetime(unsigned long long)>
c00142d2:	89 d8                	mov    eax,ebx
c00142d4:	83 c4 14             	add    esp,0x14
c00142d7:	5b                   	pop    ebx
c00142d8:	c2 04 00             	ret    0x4
c00142db:	90                   	nop

c00142dc <Device::hibernate()>:
c00142dc:	c3                   	ret    
c00142dd:	90                   	nop

c00142de <Device::wake()>:
c00142de:	c3                   	ret    
c00142df:	90                   	nop

c00142e0 <Device::detect()>:
c00142e0:	c3                   	ret    
c00142e1:	90                   	nop

c00142e2 <Device::disableLegacy()>:
c00142e2:	c3                   	ret    
c00142e3:	90                   	nop

c00142e4 <Device::powerSaving(PowerSavingLevel)>:
c00142e4:	c3                   	ret    
c00142e5:	90                   	nop

c00142e6 <DriverlessDevice::close(int, int, void*)>:
c00142e6:	31 c0                	xor    eax,eax
c00142e8:	c3                   	ret    
c00142e9:	90                   	nop

c00142ea <DriverlessDevice::detect()>:
c00142ea:	c3                   	ret    
c00142eb:	90                   	nop

c00142ec <DriverlessDevice::open(int, int, void*)>:
c00142ec:	83 ec 18             	sub    esp,0x18
c00142ef:	68 30 af 02 c0       	push   0xc002af30
c00142f4:	e8 c0 63 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c00142f9:	83 c8 ff             	or     eax,0xffffffff
c00142fc:	83 c4 1c             	add    esp,0x1c
c00142ff:	c3                   	ret    

c0014300 <Device::~Device()>:
c0014300:	ba 58 af 02 c0       	mov    edx,0xc002af58
c0014305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014309:	89 10                	mov    DWORD PTR [eax],edx
c001430b:	90                   	nop
c001430c:	c3                   	ret    
c001430d:	90                   	nop

c001430e <Device::~Device()>:
c001430e:	83 ec 0c             	sub    esp,0xc
c0014311:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014315:	e8 e6 ff ff ff       	call   c0014300 <Device::~Device()>
c001431a:	83 c4 04             	add    esp,0x4
c001431d:	83 ec 08             	sub    esp,0x8
c0014320:	68 58 01 00 00       	push   0x158
c0014325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014329:	e8 f9 eb ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c001432e:	83 c4 10             	add    esp,0x10
c0014331:	83 c4 0c             	add    esp,0xc
c0014334:	c3                   	ret    
c0014335:	90                   	nop

c0014336 <Device::findAndLoadDriver()>:
c0014336:	c3                   	ret    
c0014337:	90                   	nop

c0014338 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014338:	57                   	push   edi
c0014339:	b9 09 00 00 00       	mov    ecx,0x9
c001433e:	56                   	push   esi
c001433f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014343:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014347:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014351:	81 c7 18 01 00 00    	add    edi,0x118
c0014357:	fc                   	cld    
c0014358:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001435a:	5e                   	pop    esi
c001435b:	5f                   	pop    edi
c001435c:	c3                   	ret    
c001435d:	90                   	nop

c001435e <Device::preOpenACPI(void*, char*, char*)>:
c001435e:	56                   	push   esi
c001435f:	53                   	push   ebx
c0014360:	83 ec 08             	sub    esp,0x8
c0014363:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014367:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001436b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014375:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014379:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001437f:	6a 1e                	push   0x1e
c0014381:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014387:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001438b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014391:	50                   	push   eax
c0014392:	e8 ad c3 fe ff       	call   c0000744 <memcpy>
c0014397:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001439b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001439f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00143a7:	83 c4 14             	add    esp,0x14
c00143aa:	5b                   	pop    ebx
c00143ab:	5e                   	pop    esi
c00143ac:	e9 93 c3 fe ff       	jmp    c0000744 <memcpy>
c00143b1:	90                   	nop

c00143b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143c2:	75 0b                	jne    c00143cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00143c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143cd:	eb 1e                	jmp    c00143ed <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143cf:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00143d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00143ed:	ff e0                	jmp    eax
c00143ef:	90                   	nop

c00143f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143f4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143f9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014400:	75 0b                	jne    c001440d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014402:	8b 00                	mov    eax,DWORD PTR [eax]
c0014404:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014408:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001440b:	eb 1e                	jmp    c001442b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001440d:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0014412:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014418:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001441e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014420:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014424:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014428:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001442b:	ff e0                	jmp    eax
c001442d:	90                   	nop

c001442e <Device::addChild(Device*)>:
c001442e:	53                   	push   ebx
c001442f:	83 ec 08             	sub    esp,0x8
c0014432:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014436:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001443a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014440:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014446:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014448:	85 d2                	test   edx,edx
c001444a:	74 04                	je     c0014450 <Device::addChild(Device*)+0x22>
c001444c:	89 d3                	mov    ebx,edx
c001444e:	eb f6                	jmp    c0014446 <Device::addChild(Device*)+0x18>
c0014450:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014453:	83 ec 0c             	sub    esp,0xc
c0014456:	6a 08                	push   0x8
c0014458:	e8 9f b4 ff ff       	call   c000f8fc <malloc>
c001445d:	89 03                	mov    DWORD PTR [ebx],eax
c001445f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014465:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001446c:	83 c4 18             	add    esp,0x18
c001446f:	5b                   	pop    ebx
c0014470:	c3                   	ret    
c0014471:	90                   	nop

c0014472 <Device::removeAllChildren()>:
c0014472:	56                   	push   esi
c0014473:	53                   	push   ebx
c0014474:	52                   	push   edx
c0014475:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014479:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001447f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014482:	74 17                	je     c001449b <Device::removeAllChildren()+0x29>
c0014484:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014487:	85 c0                	test   eax,eax
c0014489:	74 0c                	je     c0014497 <Device::removeAllChildren()+0x25>
c001448b:	83 ec 0c             	sub    esp,0xc
c001448e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014490:	50                   	push   eax
c0014491:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014494:	83 c4 10             	add    esp,0x10
c0014497:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014499:	eb e4                	jmp    c001447f <Device::removeAllChildren()+0xd>
c001449b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144b4:	58                   	pop    eax
c00144b5:	5b                   	pop    ebx
c00144b6:	5e                   	pop    esi
c00144b7:	c3                   	ret    

c00144b8 <Device::hibernateAll()>:
c00144b8:	53                   	push   ebx
c00144b9:	83 ec 14             	sub    esp,0x14
c00144bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c2:	53                   	push   ebx
c00144c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144cc:	83 c4 10             	add    esp,0x10
c00144cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144d2:	74 0f                	je     c00144e3 <Device::hibernateAll()+0x2b>
c00144d4:	83 ec 0c             	sub    esp,0xc
c00144d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144da:	e8 d9 ff ff ff       	call   c00144b8 <Device::hibernateAll()>
c00144df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144e1:	eb e9                	jmp    c00144cc <Device::hibernateAll()+0x14>
c00144e3:	83 c4 08             	add    esp,0x8
c00144e6:	5b                   	pop    ebx
c00144e7:	c3                   	ret    

c00144e8 <Device::wakeAll()>:
c00144e8:	53                   	push   ebx
c00144e9:	83 ec 14             	sub    esp,0x14
c00144ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f2:	53                   	push   ebx
c00144f3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014502:	74 0f                	je     c0014513 <Device::wakeAll()+0x2b>
c0014504:	83 ec 0c             	sub    esp,0xc
c0014507:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001450a:	e8 d9 ff ff ff       	call   c00144e8 <Device::wakeAll()>
c001450f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014511:	eb e9                	jmp    c00144fc <Device::wakeAll()+0x14>
c0014513:	83 c4 08             	add    esp,0x8
c0014516:	5b                   	pop    ebx
c0014517:	c3                   	ret    

c0014518 <Device::detectAll()>:
c0014518:	53                   	push   ebx
c0014519:	83 ec 14             	sub    esp,0x14
c001451c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014520:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014522:	53                   	push   ebx
c0014523:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014526:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001452c:	83 c4 10             	add    esp,0x10
c001452f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014532:	74 0f                	je     c0014543 <Device::detectAll()+0x2b>
c0014534:	83 ec 0c             	sub    esp,0xc
c0014537:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001453a:	e8 d9 ff ff ff       	call   c0014518 <Device::detectAll()>
c001453f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014541:	eb e9                	jmp    c001452c <Device::detectAll()+0x14>
c0014543:	83 c4 08             	add    esp,0x8
c0014546:	5b                   	pop    ebx
c0014547:	c3                   	ret    

c0014548 <Device::disableLegacyAll()>:
c0014548:	53                   	push   ebx
c0014549:	83 ec 14             	sub    esp,0x14
c001454c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014552:	53                   	push   ebx
c0014553:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014556:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001455c:	83 c4 10             	add    esp,0x10
c001455f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014562:	74 0f                	je     c0014573 <Device::disableLegacyAll()+0x2b>
c0014564:	83 ec 0c             	sub    esp,0xc
c0014567:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001456a:	e8 d9 ff ff ff       	call   c0014548 <Device::disableLegacyAll()>
c001456f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014571:	eb e9                	jmp    c001455c <Device::disableLegacyAll()+0x14>
c0014573:	83 c4 08             	add    esp,0x8
c0014576:	5b                   	pop    ebx
c0014577:	c3                   	ret    

c0014578 <Device::loadDriversForAll()>:
c0014578:	53                   	push   ebx
c0014579:	83 ec 08             	sub    esp,0x8
c001457c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014580:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014586:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014588:	85 db                	test   ebx,ebx
c001458a:	74 12                	je     c001459e <Device::loadDriversForAll()+0x26>
c001458c:	83 ec 0c             	sub    esp,0xc
c001458f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014592:	e8 e1 ff ff ff       	call   c0014578 <Device::loadDriversForAll()>
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	89 d8                	mov    eax,ebx
c001459c:	eb e8                	jmp    c0014586 <Device::loadDriversForAll()+0xe>
c001459e:	83 c4 08             	add    esp,0x8
c00145a1:	5b                   	pop    ebx
c00145a2:	c3                   	ret    
c00145a3:	90                   	nop

c00145a4 <Device::closeAll()>:
c00145a4:	53                   	push   ebx
c00145a5:	83 ec 08             	sub    esp,0x8
c00145a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ae:	6a 00                	push   0x0
c00145b0:	6a 00                	push   0x0
c00145b2:	6a 00                	push   0x0
c00145b4:	53                   	push   ebx
c00145b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145be:	83 c4 10             	add    esp,0x10
c00145c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145c4:	74 0f                	je     c00145d5 <Device::closeAll()+0x31>
c00145c6:	83 ec 0c             	sub    esp,0xc
c00145c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145cc:	e8 d3 ff ff ff       	call   c00145a4 <Device::closeAll()>
c00145d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145d3:	eb e9                	jmp    c00145be <Device::closeAll()+0x1a>
c00145d5:	83 c4 08             	add    esp,0x8
c00145d8:	5b                   	pop    ebx
c00145d9:	c3                   	ret    

c00145da <Device::powerSavingAll(PowerSavingLevel)>:
c00145da:	56                   	push   esi
c00145db:	53                   	push   ebx
c00145dc:	83 ec 0c             	sub    esp,0xc
c00145df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145e3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e9:	56                   	push   esi
c00145ea:	53                   	push   ebx
c00145eb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00145ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145fa:	74 0f                	je     c001460b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145fc:	52                   	push   edx
c00145fd:	52                   	push   edx
c00145fe:	56                   	push   esi
c00145ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014602:	e8 d3 ff ff ff       	call   c00145da <Device::powerSavingAll(PowerSavingLevel)>
c0014607:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014609:	eb e9                	jmp    c00145f4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001460b:	58                   	pop    eax
c001460c:	5b                   	pop    ebx
c001460d:	5e                   	pop    esi
c001460e:	c3                   	ret    
c001460f:	90                   	nop

c0014610 <Device::setName(char const*)>:
c0014610:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014618:	e9 17 c2 fe ff       	jmp    c0000834 <strcpy>
c001461d:	90                   	nop

c001461e <Device::Device(char const*)>:
c001461e:	83 ec 1c             	sub    esp,0x1c
c0014621:	ba 58 af 02 c0       	mov    edx,0xc002af58
c0014626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462a:	89 10                	mov    DWORD PTR [eax],edx
c001462c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014630:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001463a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014664:	83 ec 08             	sub    esp,0x8
c0014667:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001466b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001466f:	e8 9c ff ff ff       	call   c0014610 <Device::setName(char const*)>
c0014674:	83 c4 10             	add    esp,0x10
c0014677:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001467f:	83 ec 0c             	sub    esp,0xc
c0014682:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014686:	e8 71 b2 ff ff       	call   c000f8fc <malloc>
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014694:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001469b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001469f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00146a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00146b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ca:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00146d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00146dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00146ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146fc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001470a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014714:	90                   	nop
c0014715:	83 c4 1c             	add    esp,0x1c
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <Device::getName()>:
c001471a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001471e:	05 d0 00 00 00       	add    eax,0xd0
c0014723:	c3                   	ret    

c0014724 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014724:	83 ec 0c             	sub    esp,0xc
c0014727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472b:	83 ec 08             	sub    esp,0x8
c001472e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014732:	50                   	push   eax
c0014733:	e8 e6 fe ff ff       	call   c001461e <Device::Device(char const*)>
c0014738:	83 c4 10             	add    esp,0x10
c001473b:	ba 84 af 02 c0       	mov    edx,0xc002af84
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	89 10                	mov    DWORD PTR [eax],edx
c0014746:	90                   	nop
c0014747:	83 c4 0c             	add    esp,0xc
c001474a:	c3                   	ret    
c001474b:	90                   	nop

c001474c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001474c:	57                   	push   edi
c001474d:	56                   	push   esi
c001474e:	53                   	push   ebx
c001474f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014753:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001475b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014761:	75 0c                	jne    c001476f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014763:	52                   	push   edx
c0014764:	52                   	push   edx
c0014765:	53                   	push   ebx
c0014766:	56                   	push   esi
c0014767:	e8 8e 42 01 00       	call   c00289fa <LinkedList<Device>::addElement(Device*)>
c001476c:	83 c4 10             	add    esp,0x10
c001476f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014775:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014778:	74 12                	je     c001478c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001477a:	50                   	push   eax
c001477b:	57                   	push   edi
c001477c:	56                   	push   esi
c001477d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014780:	e8 c7 ff ff ff       	call   c001474c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014785:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014787:	83 c4 10             	add    esp,0x10
c001478a:	eb e9                	jmp    c0014775 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001478c:	5b                   	pop    ebx
c001478d:	5e                   	pop    esi
c001478e:	5f                   	pop    edi
c001478f:	c3                   	ret    

c0014790 <getDevicesOfType(DeviceType)>:
c0014790:	53                   	push   ebx
c0014791:	83 ec 14             	sub    esp,0x14
c0014794:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014798:	53                   	push   ebx
c0014799:	e8 38 43 01 00       	call   c0028ad6 <LinkedList<Device>::LinkedList()>
c001479e:	83 c4 0c             	add    esp,0xc
c00147a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147a5:	53                   	push   ebx
c00147a6:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c00147ac:	e8 9b ff ff ff       	call   c001474c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00147b1:	89 d8                	mov    eax,ebx
c00147b3:	83 c4 18             	add    esp,0x18
c00147b6:	5b                   	pop    ebx
c00147b7:	c2 04 00             	ret    0x4

c00147ba <HardDiskController::HardDiskController(char const*)>:
c00147ba:	83 ec 0c             	sub    esp,0xc
c00147bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c1:	83 ec 08             	sub    esp,0x8
c00147c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c8:	50                   	push   eax
c00147c9:	e8 50 fe ff ff       	call   c001461e <Device::Device(char const*)>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	ba b0 af 02 c0       	mov    edx,0xc002afb0
c00147d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147da:	89 10                	mov    DWORD PTR [eax],edx
c00147dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00147ea:	90                   	nop
c00147eb:	83 c4 0c             	add    esp,0xc
c00147ee:	c3                   	ret    
c00147ef:	90                   	nop

c00147f0 <HardDiskController::~HardDiskController()>:
c00147f0:	83 ec 0c             	sub    esp,0xc
c00147f3:	ba b0 af 02 c0       	mov    edx,0xc002afb0
c00147f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fc:	89 10                	mov    DWORD PTR [eax],edx
c00147fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014802:	83 ec 0c             	sub    esp,0xc
c0014805:	50                   	push   eax
c0014806:	e8 f5 fa ff ff       	call   c0014300 <Device::~Device()>
c001480b:	83 c4 10             	add    esp,0x10
c001480e:	90                   	nop
c001480f:	83 c4 0c             	add    esp,0xc
c0014812:	c3                   	ret    
c0014813:	90                   	nop

c0014814 <HardDiskController::~HardDiskController()>:
c0014814:	83 ec 0c             	sub    esp,0xc
c0014817:	83 ec 0c             	sub    esp,0xc
c001481a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481e:	e8 cd ff ff ff       	call   c00147f0 <HardDiskController::~HardDiskController()>
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	83 ec 08             	sub    esp,0x8
c0014829:	68 58 01 00 00       	push   0x158
c001482e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014832:	e8 f0 e6 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	83 c4 0c             	add    esp,0xc
c001483d:	c3                   	ret    

c001483e <PhysicalDisk::eject()>:
c001483e:	83 ec 18             	sub    esp,0x18
c0014841:	68 d4 af 02 c0       	push   0xc002afd4
c0014846:	e8 bc e7 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001484b:	83 c8 ff             	or     eax,0xffffffff
c001484e:	83 c4 1c             	add    esp,0x1c
c0014851:	c3                   	ret    

c0014852 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014852:	83 ec 0c             	sub    esp,0xc
c0014855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014859:	83 ec 08             	sub    esp,0x8
c001485c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014860:	50                   	push   eax
c0014861:	e8 b8 fd ff ff       	call   c001461e <Device::Device(char const*)>
c0014866:	83 c4 10             	add    esp,0x10
c0014869:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c001486e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014872:	89 10                	mov    DWORD PTR [eax],edx
c0014874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014878:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001487f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014883:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001488a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00148a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148aa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148b4:	90                   	nop
c00148b5:	83 c4 0c             	add    esp,0xc
c00148b8:	c3                   	ret    
c00148b9:	90                   	nop

c00148ba <PhysicalDisk::startCache()>:
c00148ba:	56                   	push   esi
c00148bb:	53                   	push   ebx
c00148bc:	83 ec 10             	sub    esp,0x10
c00148bf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148c3:	6a 44                	push   0x44
c00148c5:	e8 32 b0 ff ff       	call   c000f8fc <malloc>
c00148ca:	89 c6                	mov    esi,eax
c00148cc:	58                   	pop    eax
c00148cd:	5a                   	pop    edx
c00148ce:	53                   	push   ebx
c00148cf:	56                   	push   esi
c00148d0:	e8 39 27 00 00       	call   c001700e <VCache::VCache(PhysicalDisk*)>
c00148d5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00148db:	83 c4 14             	add    esp,0x14
c00148de:	5b                   	pop    ebx
c00148df:	5e                   	pop    esi
c00148e0:	c3                   	ret    
c00148e1:	90                   	nop

c00148e2 <PhysicalDisk::~PhysicalDisk()>:
c00148e2:	83 ec 0c             	sub    esp,0xc
c00148e5:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c00148ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ee:	89 10                	mov    DWORD PTR [eax],edx
c00148f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148f4:	83 ec 0c             	sub    esp,0xc
c00148f7:	50                   	push   eax
c00148f8:	e8 03 fa ff ff       	call   c0014300 <Device::~Device()>
c00148fd:	83 c4 10             	add    esp,0x10
c0014900:	90                   	nop
c0014901:	83 c4 0c             	add    esp,0xc
c0014904:	c3                   	ret    
c0014905:	90                   	nop

c0014906 <PhysicalDisk::~PhysicalDisk()>:
c0014906:	83 ec 0c             	sub    esp,0xc
c0014909:	83 ec 0c             	sub    esp,0xc
c001490c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014910:	e8 cd ff ff ff       	call   c00148e2 <PhysicalDisk::~PhysicalDisk()>
c0014915:	83 c4 10             	add    esp,0x10
c0014918:	83 ec 08             	sub    esp,0x8
c001491b:	68 6c 01 00 00       	push   0x16c
c0014920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014924:	e8 fe e5 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0014929:	83 c4 10             	add    esp,0x10
c001492c:	83 c4 0c             	add    esp,0xc
c001492f:	c3                   	ret    

c0014930 <FPU::FPU(char const*)>:
c0014930:	83 ec 0c             	sub    esp,0xc
c0014933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014937:	83 ec 08             	sub    esp,0x8
c001493a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001493e:	50                   	push   eax
c001493f:	e8 da fc ff ff       	call   c001461e <Device::Device(char const*)>
c0014944:	83 c4 10             	add    esp,0x10
c0014947:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c001494c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014950:	89 10                	mov    DWORD PTR [eax],edx
c0014952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014956:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014960:	90                   	nop
c0014961:	83 c4 0c             	add    esp,0xc
c0014964:	c3                   	ret    
c0014965:	90                   	nop

c0014966 <FPU::~FPU()>:
c0014966:	83 ec 0c             	sub    esp,0xc
c0014969:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c001496e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014972:	89 10                	mov    DWORD PTR [eax],edx
c0014974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014978:	83 ec 0c             	sub    esp,0xc
c001497b:	50                   	push   eax
c001497c:	e8 7f f9 ff ff       	call   c0014300 <Device::~Device()>
c0014981:	83 c4 10             	add    esp,0x10
c0014984:	90                   	nop
c0014985:	83 c4 0c             	add    esp,0xc
c0014988:	c3                   	ret    
c0014989:	90                   	nop

c001498a <FPU::~FPU()>:
c001498a:	83 ec 0c             	sub    esp,0xc
c001498d:	83 ec 0c             	sub    esp,0xc
c0014990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014994:	e8 cd ff ff ff       	call   c0014966 <FPU::~FPU()>
c0014999:	83 c4 10             	add    esp,0x10
c001499c:	83 ec 08             	sub    esp,0x8
c001499f:	68 58 01 00 00       	push   0x158
c00149a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149a8:	e8 7a e5 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00149ad:	83 c4 10             	add    esp,0x10
c00149b0:	83 c4 0c             	add    esp,0xc
c00149b3:	c3                   	ret    

c00149b4 <setupFPU()>:
c00149b4:	53                   	push   ebx
c00149b5:	83 ec 08             	sub    esp,0x8
c00149b8:	8b 15 68 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e768
c00149be:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149c5:	74 19                	je     c00149e0 <setupFPU()+0x2c>
c00149c7:	83 ec 0c             	sub    esp,0xc
c00149ca:	68 58 01 00 00       	push   0x158
c00149cf:	e8 28 af ff ff       	call   c000f8fc <malloc>
c00149d4:	89 c3                	mov    ebx,eax
c00149d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00149d9:	e8 66 0c 01 00       	call   c0025644 <AVX::AVX()>
c00149de:	eb 5b                	jmp    c0014a3b <setupFPU()+0x87>
c00149e0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149e6:	84 c0                	test   al,al
c00149e8:	79 19                	jns    c0014a03 <setupFPU()+0x4f>
c00149ea:	83 ec 0c             	sub    esp,0xc
c00149ed:	68 58 01 00 00       	push   0x158
c00149f2:	e8 05 af ff ff       	call   c000f8fc <malloc>
c00149f7:	89 c3                	mov    ebx,eax
c00149f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00149fc:	e8 69 0d 01 00       	call   c002576a <SSE::SSE()>
c0014a01:	eb 38                	jmp    c0014a3b <setupFPU()+0x87>
c0014a03:	a8 20                	test   al,0x20
c0014a05:	74 19                	je     c0014a20 <setupFPU()+0x6c>
c0014a07:	83 ec 0c             	sub    esp,0xc
c0014a0a:	68 58 01 00 00       	push   0x158
c0014a0f:	e8 e8 ae ff ff       	call   c000f8fc <malloc>
c0014a14:	89 c3                	mov    ebx,eax
c0014a16:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a19:	e8 b6 0c 01 00       	call   c00256d4 <MMX::MMX()>
c0014a1e:	eb 1b                	jmp    c0014a3b <setupFPU()+0x87>
c0014a20:	a8 10                	test   al,0x10
c0014a22:	74 1c                	je     c0014a40 <setupFPU()+0x8c>
c0014a24:	83 ec 0c             	sub    esp,0xc
c0014a27:	68 58 01 00 00       	push   0x158
c0014a2c:	e8 cb ae ff ff       	call   c000f8fc <malloc>
c0014a31:	89 c3                	mov    ebx,eax
c0014a33:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a36:	e8 bd 0d 01 00       	call   c00257f8 <x87::x87()>
c0014a3b:	83 c4 10             	add    esp,0x10
c0014a3e:	eb 24                	jmp    c0014a64 <setupFPU()+0xb0>
c0014a40:	83 e0 ef             	and    eax,0xffffffef
c0014a43:	83 ec 0c             	sub    esp,0xc
c0014a46:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a4c:	68 34 b0 02 c0       	push   0xc002b034
c0014a51:	e8 b1 e5 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014a56:	0f 20 c0             	mov    eax,cr0
c0014a59:	83 c8 04             	or     eax,0x4
c0014a5c:	0f 22 c0             	mov    cr0,eax
c0014a5f:	31 db                	xor    ebx,ebx
c0014a61:	83 c4 10             	add    esp,0x10
c0014a64:	89 d8                	mov    eax,ebx
c0014a66:	83 c4 08             	add    esp,0x8
c0014a69:	5b                   	pop    ebx
c0014a6a:	c3                   	ret    
c0014a6b:	90                   	nop

c0014a6c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a74:	c1 e0 04             	shl    eax,0x4
c0014a77:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a7b:	8d 50 10             	lea    edx,[eax+0x10]
c0014a7e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a84:	74 08                	je     c0014a8e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a86:	83 c0 04             	add    eax,0x4
c0014a89:	39 d0                	cmp    eax,edx
c0014a8b:	75 f1                	jne    c0014a7e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a8d:	c3                   	ret    
c0014a8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a98:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014aa2:	eb e2                	jmp    c0014a86 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014aa4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014aa4:	57                   	push   edi
c0014aa5:	31 c0                	xor    eax,eax
c0014aa7:	56                   	push   esi
c0014aa8:	53                   	push   ebx
c0014aa9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014aad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ab1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014ab5:	89 da                	mov    edx,ebx
c0014ab7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014abb:	c1 e2 04             	shl    edx,0x4
c0014abe:	01 ca                	add    edx,ecx
c0014ac0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014ac8:	74 16                	je     c0014ae0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014aca:	40                   	inc    eax
c0014acb:	83 f8 04             	cmp    eax,0x4
c0014ace:	75 f0                	jne    c0014ac0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014ad0:	c7 44 24 10 78 b0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b078
c0014ad8:	5b                   	pop    ebx
c0014ad9:	5e                   	pop    esi
c0014ada:	5f                   	pop    edi
c0014adb:	e9 d9 5b 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>
c0014ae0:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014ae3:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014ae6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014aec:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014af2:	5b                   	pop    ebx
c0014af3:	5e                   	pop    esi
c0014af4:	5f                   	pop    edi
c0014af5:	c3                   	ret    

c0014af6 <doubleFault(regs*, void*)>:
c0014af6:	55                   	push   ebp
c0014af7:	89 e5                	mov    ebp,esp
c0014af9:	83 ec 08             	sub    esp,0x8
c0014afc:	83 ec 0c             	sub    esp,0xc
c0014aff:	68 b3 b0 02 c0       	push   0xc002b0b3
c0014b04:	e8 b0 5b 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0014b09:	83 c4 10             	add    esp,0x10
c0014b0c:	90                   	nop
c0014b0d:	c9                   	leave  
c0014b0e:	c3                   	ret    
c0014b0f:	90                   	nop

c0014b10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014b10:	56                   	push   esi
c0014b11:	53                   	push   ebx
c0014b12:	50                   	push   eax
c0014b13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b1b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b20:	75 35                	jne    c0014b57 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014b22:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b25:	31 d2                	xor    edx,edx
c0014b27:	89 c1                	mov    ecx,eax
c0014b29:	c1 e1 04             	shl    ecx,0x4
c0014b2c:	01 f1                	add    ecx,esi
c0014b2e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b36:	74 3e                	je     c0014b76 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b38:	42                   	inc    edx
c0014b39:	83 fa 04             	cmp    edx,0x4
c0014b3c:	75 f0                	jne    c0014b2e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b3e:	83 ec 0c             	sub    esp,0xc
c0014b41:	68 f8 b0 02 c0       	push   0xc002b0f8
c0014b46:	e8 6e 5b 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0014b4b:	83 c4 10             	add    esp,0x10
c0014b4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b53:	5a                   	pop    edx
c0014b54:	5b                   	pop    ebx
c0014b55:	5e                   	pop    esi
c0014b56:	c3                   	ret    
c0014b57:	83 ec 0c             	sub    esp,0xc
c0014b5a:	56                   	push   esi
c0014b5b:	e8 ba fb ff ff       	call   c001471a <Device::getName()>
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b66:	75 ba                	jne    c0014b22 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b68:	83 fb 0f             	cmp    ebx,0xf
c0014b6b:	7f 29                	jg     c0014b96 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b6d:	0f b6 9b c0 d9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2640]
c0014b74:	eb ac                	jmp    c0014b22 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b76:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b7d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b80:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b86:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b8a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b90:	89 d8                	mov    eax,ebx
c0014b92:	5a                   	pop    edx
c0014b93:	5b                   	pop    ebx
c0014b94:	5e                   	pop    esi
c0014b95:	c3                   	ret    
c0014b96:	83 ec 0c             	sub    esp,0xc
c0014b99:	68 c0 b0 02 c0       	push   0xc002b0c0
c0014b9e:	e8 16 5b 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	e9 77 ff ff ff       	jmp    c0014b22 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014bab:	90                   	nop

c0014bac <InterruptController::clearAllHandlers(int, bool)>:
c0014bac:	56                   	push   esi
c0014bad:	53                   	push   ebx
c0014bae:	52                   	push   edx
c0014baf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bb3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014bb7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014bbc:	75 61                	jne    c0014c1f <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014bbe:	8d 46 20             	lea    eax,[esi+0x20]
c0014bc1:	c1 e6 04             	shl    esi,0x4
c0014bc4:	c1 e0 04             	shl    eax,0x4
c0014bc7:	01 de                	add    esi,ebx
c0014bc9:	01 d8                	add    eax,ebx
c0014bcb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014bd5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014bdf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014be9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014bf3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014bfd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014c07:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014c11:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014c1b:	58                   	pop    eax
c0014c1c:	5b                   	pop    ebx
c0014c1d:	5e                   	pop    esi
c0014c1e:	c3                   	ret    
c0014c1f:	83 ec 0c             	sub    esp,0xc
c0014c22:	53                   	push   ebx
c0014c23:	e8 f2 fa ff ff       	call   c001471a <Device::getName()>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c2e:	75 8e                	jne    c0014bbe <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c30:	83 fe 0f             	cmp    esi,0xf
c0014c33:	7f 09                	jg     c0014c3e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c35:	0f b6 b6 c0 d9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2640]
c0014c3c:	eb 80                	jmp    c0014bbe <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c3e:	83 ec 0c             	sub    esp,0xc
c0014c41:	68 34 b1 02 c0       	push   0xc002b134
c0014c46:	e8 6e 5a 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0014c4b:	83 c4 10             	add    esp,0x10
c0014c4e:	e9 6b ff ff ff       	jmp    c0014bbe <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c53:	90                   	nop

c0014c54 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c54:	56                   	push   esi
c0014c55:	53                   	push   ebx
c0014c56:	52                   	push   edx
c0014c57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c5f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c64:	75 3a                	jne    c0014ca0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c6a:	8d 50 20             	lea    edx,[eax+0x20]
c0014c6d:	c1 e2 04             	shl    edx,0x4
c0014c70:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c73:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c77:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c7d:	74 0b                	je     c0014c8a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c7f:	83 c0 04             	add    eax,0x4
c0014c82:	39 d0                	cmp    eax,edx
c0014c84:	75 f1                	jne    c0014c77 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c86:	58                   	pop    eax
c0014c87:	5b                   	pop    ebx
c0014c88:	5e                   	pop    esi
c0014c89:	c3                   	ret    
c0014c8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c94:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c9e:	eb df                	jmp    c0014c7f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ca0:	83 ec 0c             	sub    esp,0xc
c0014ca3:	56                   	push   esi
c0014ca4:	e8 71 fa ff ff       	call   c001471a <Device::getName()>
c0014ca9:	83 c4 10             	add    esp,0x10
c0014cac:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014caf:	75 b5                	jne    c0014c66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cb1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014cb6:	7f 11                	jg     c0014cc9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014cb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014cbc:	0f b6 80 c0 d9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2640]
c0014cc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cc7:	eb 9d                	jmp    c0014c66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cc9:	83 ec 0c             	sub    esp,0xc
c0014ccc:	68 34 b1 02 c0       	push   0xc002b134
c0014cd1:	e8 e3 59 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0014cd6:	83 c4 10             	add    esp,0x10
c0014cd9:	eb 8b                	jmp    c0014c66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014cdb <nmiHandler(regs*, void*)>:
c0014cdb:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0014ce0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ce4:	e9 5f a3 ff ff       	jmp    c000f048 <Computer::handleNMI()>

c0014ce9 <int_handler>:
c0014ce9:	55                   	push   ebp
c0014cea:	57                   	push   edi
c0014ceb:	56                   	push   esi
c0014cec:	53                   	push   ebx
c0014ced:	83 ec 0c             	sub    esp,0xc
c0014cf0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cf4:	80 3d c4 12 03 c0 00 	cmp    BYTE PTR ds:0xc00312c4,0x0
c0014cfb:	74 0b                	je     c0014d08 <int_handler+0x1f>
c0014cfd:	fa                   	cli    
c0014cfe:	f4                   	hlt    
c0014cff:	80 3d c4 12 03 c0 00 	cmp    BYTE PTR ds:0xc00312c4,0x0
c0014d06:	75 f5                	jne    c0014cfd <int_handler+0x14>
c0014d08:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0014d0d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014d10:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d16:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014d1c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d1f:	83 f8 17             	cmp    eax,0x17
c0014d22:	77 13                	ja     c0014d37 <int_handler+0x4e>
c0014d24:	83 ec 08             	sub    esp,0x8
c0014d27:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d29:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d2c:	0f b6 c0             	movzx  eax,al
c0014d2f:	50                   	push   eax
c0014d30:	57                   	push   edi
c0014d31:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	83 c3 15             	add    ebx,0x15
c0014d3a:	c1 e3 04             	shl    ebx,0x4
c0014d3d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d41:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d48:	31 db                	xor    ebx,ebx
c0014d4a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d4e:	85 c0                	test   eax,eax
c0014d50:	74 13                	je     c0014d65 <int_handler+0x7c>
c0014d52:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d55:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d59:	74 1c                	je     c0014d77 <int_handler+0x8e>
c0014d5b:	83 ec 08             	sub    esp,0x8
c0014d5e:	52                   	push   edx
c0014d5f:	56                   	push   esi
c0014d60:	ff d0                	call   eax
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	43                   	inc    ebx
c0014d66:	83 fb 04             	cmp    ebx,0x4
c0014d69:	75 df                	jne    c0014d4a <int_handler+0x61>
c0014d6b:	83 c4 0c             	add    esp,0xc
c0014d6e:	31 c0                	xor    eax,eax
c0014d70:	5b                   	pop    ebx
c0014d71:	31 d2                	xor    edx,edx
c0014d73:	5e                   	pop    esi
c0014d74:	5f                   	pop    edi
c0014d75:	5d                   	pop    ebp
c0014d76:	c3                   	ret    
c0014d77:	83 ec 08             	sub    esp,0x8
c0014d7a:	52                   	push   edx
c0014d7b:	56                   	push   esi
c0014d7c:	ff d0                	call   eax
c0014d7e:	83 c4 10             	add    esp,0x10
c0014d81:	83 c4 0c             	add    esp,0xc
c0014d84:	5b                   	pop    ebx
c0014d85:	5e                   	pop    esi
c0014d86:	5f                   	pop    edi
c0014d87:	5d                   	pop    ebp
c0014d88:	c3                   	ret    
c0014d89:	90                   	nop

c0014d8a <InterruptController::InterruptController(char const*)>:
c0014d8a:	83 ec 1c             	sub    esp,0x1c
c0014d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d91:	83 ec 08             	sub    esp,0x8
c0014d94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d98:	50                   	push   eax
c0014d99:	e8 80 f8 ff ff       	call   c001461e <Device::Device(char const*)>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	ba dc b3 02 c0       	mov    edx,0xc002b3dc
c0014da6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014daa:	89 10                	mov    DWORD PTR [eax],edx
c0014dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014dba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014dc2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014dca:	7f 5e                	jg     c0014e2a <InterruptController::InterruptController(char const*)+0xa0>
c0014dcc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014dd4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014dd9:	7f 49                	jg     c0014e24 <InterruptController::InterruptController(char const*)+0x9a>
c0014ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ddf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014de3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dee:	01 ca                	add    edx,ecx
c0014df0:	83 c2 54             	add    edx,0x54
c0014df3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e03:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014e0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e0e:	01 ca                	add    edx,ecx
c0014e10:	81 c2 54 04 00 00    	add    edx,0x454
c0014e16:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e1e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e22:	eb b0                	jmp    c0014dd4 <InterruptController::InterruptController(char const*)+0x4a>
c0014e24:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e28:	eb 98                	jmp    c0014dc2 <InterruptController::InterruptController(char const*)+0x38>
c0014e2a:	90                   	nop
c0014e2b:	83 c4 1c             	add    esp,0x1c
c0014e2e:	c3                   	ret    
c0014e2f:	90                   	nop

c0014e30 <InterruptController::~InterruptController()>:
c0014e30:	83 ec 0c             	sub    esp,0xc
c0014e33:	ba dc b3 02 c0       	mov    edx,0xc002b3dc
c0014e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e3c:	89 10                	mov    DWORD PTR [eax],edx
c0014e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e42:	83 ec 0c             	sub    esp,0xc
c0014e45:	50                   	push   eax
c0014e46:	e8 b5 f4 ff ff       	call   c0014300 <Device::~Device()>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	90                   	nop
c0014e4f:	83 c4 0c             	add    esp,0xc
c0014e52:	c3                   	ret    
c0014e53:	90                   	nop

c0014e54 <InterruptController::~InterruptController()>:
c0014e54:	83 ec 0c             	sub    esp,0xc
c0014e57:	83 ec 0c             	sub    esp,0xc
c0014e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e5e:	e8 cd ff ff ff       	call   c0014e30 <InterruptController::~InterruptController()>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	83 ec 08             	sub    esp,0x8
c0014e69:	68 58 21 00 00       	push   0x2158
c0014e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e72:	e8 b0 e0 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0014e77:	83 c4 10             	add    esp,0x10
c0014e7a:	83 c4 0c             	add    esp,0xc
c0014e7d:	c3                   	ret    

c0014e7e <displayDebugInfo(regs*)>:
c0014e7e:	55                   	push   ebp
c0014e7f:	57                   	push   edi
c0014e80:	56                   	push   esi
c0014e81:	53                   	push   ebx
c0014e82:	83 ec 24             	sub    esp,0x24
c0014e85:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e89:	0f 20 c2             	mov    edx,cr0
c0014e8c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e90:	0f 20 d7             	mov    edi,cr2
c0014e93:	0f 20 de             	mov    esi,cr3
c0014e96:	0f 20 e5             	mov    ebp,cr4
c0014e99:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e9c:	68 6e b1 02 c0       	push   0xc002b16e
c0014ea1:	e8 61 e1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014ea6:	59                   	pop    ecx
c0014ea7:	58                   	pop    eax
c0014ea8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014eab:	68 79 b1 02 c0       	push   0xc002b179
c0014eb0:	e8 52 e1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014eb5:	58                   	pop    eax
c0014eb6:	5a                   	pop    edx
c0014eb7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014eba:	68 84 b1 02 c0       	push   0xc002b184
c0014ebf:	e8 43 e1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014ec4:	59                   	pop    ecx
c0014ec5:	58                   	pop    eax
c0014ec6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ec9:	68 8f b1 02 c0       	push   0xc002b18f
c0014ece:	e8 34 e1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014ed3:	58                   	pop    eax
c0014ed4:	5a                   	pop    edx
c0014ed5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014ed8:	68 9a b1 02 c0       	push   0xc002b19a
c0014edd:	e8 25 e1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014ee2:	59                   	pop    ecx
c0014ee3:	58                   	pop    eax
c0014ee4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ee7:	68 a5 b1 02 c0       	push   0xc002b1a5
c0014eec:	e8 16 e1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014ef1:	58                   	pop    eax
c0014ef2:	5a                   	pop    edx
c0014ef3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ef6:	68 b0 b1 02 c0       	push   0xc002b1b0
c0014efb:	e8 07 e1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014f00:	59                   	pop    ecx
c0014f01:	58                   	pop    eax
c0014f02:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014f05:	68 bb b1 02 c0       	push   0xc002b1bb
c0014f0a:	e8 f8 e0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014f0f:	58                   	pop    eax
c0014f10:	5a                   	pop    edx
c0014f11:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f14:	68 c6 b1 02 c0       	push   0xc002b1c6
c0014f19:	e8 e9 e0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014f1e:	59                   	pop    ecx
c0014f1f:	58                   	pop    eax
c0014f20:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f23:	68 d5 b1 02 c0       	push   0xc002b1d5
c0014f28:	e8 da e0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014f2d:	58                   	pop    eax
c0014f2e:	5a                   	pop    edx
c0014f2f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f32:	68 e0 b1 02 c0       	push   0xc002b1e0
c0014f37:	e8 cb e0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014f3c:	59                   	pop    ecx
c0014f3d:	58                   	pop    eax
c0014f3e:	57                   	push   edi
c0014f3f:	68 eb b1 02 c0       	push   0xc002b1eb
c0014f44:	e8 be e0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014f49:	58                   	pop    eax
c0014f4a:	5a                   	pop    edx
c0014f4b:	56                   	push   esi
c0014f4c:	68 f6 b1 02 c0       	push   0xc002b1f6
c0014f51:	e8 b1 e0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0014f56:	59                   	pop    ecx
c0014f57:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0014f5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f62:	e8 92 be ff ff       	call   c0010df9 <setActiveTerminal(VgaText*)>
c0014f67:	58                   	pop    eax
c0014f68:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f6b:	5a                   	pop    edx
c0014f6c:	c1 e0 05             	shl    eax,0x5
c0014f6f:	05 20 d7 02 c0       	add    eax,0xc002d720
c0014f74:	50                   	push   eax
c0014f75:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0014f7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f80:	e8 93 c2 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0014f85:	59                   	pop    ecx
c0014f86:	58                   	pop    eax
c0014f87:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0014f8c:	68 01 b2 02 c0       	push   0xc002b201
c0014f91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f97:	e8 7c c2 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0014f9c:	58                   	pop    eax
c0014f9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fa2:	5a                   	pop    edx
c0014fa3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fa6:	83 c0 0c             	add    eax,0xc
c0014fa9:	50                   	push   eax
c0014faa:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0014faf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb5:	e8 5e c2 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0014fba:	59                   	pop    ecx
c0014fbb:	58                   	pop    eax
c0014fbc:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0014fc1:	68 0a b2 02 c0       	push   0xc002b20a
c0014fc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcc:	e8 47 c2 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0014fd1:	58                   	pop    eax
c0014fd2:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0014fd7:	5a                   	pop    edx
c0014fd8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014fdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe1:	e8 58 c2 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c0014fe6:	59                   	pop    ecx
c0014fe7:	58                   	pop    eax
c0014fe8:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0014fed:	68 12 b2 02 c0       	push   0xc002b212
c0014ff2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff8:	e8 1b c2 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0014ffd:	58                   	pop    eax
c0014ffe:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015003:	5a                   	pop    edx
c0015004:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015007:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500d:	e8 2c c2 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c0015012:	59                   	pop    ecx
c0015013:	58                   	pop    eax
c0015014:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015019:	68 1a b2 02 c0       	push   0xc002b21a
c001501e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015024:	e8 ef c1 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015029:	58                   	pop    eax
c001502a:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001502f:	5a                   	pop    edx
c0015030:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0015033:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015039:	e8 00 c2 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001503e:	59                   	pop    ecx
c001503f:	58                   	pop    eax
c0015040:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015045:	68 22 b2 02 c0       	push   0xc002b222
c001504a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015050:	e8 c3 c1 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015055:	58                   	pop    eax
c0015056:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001505b:	5a                   	pop    edx
c001505c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001505f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015065:	e8 d4 c1 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001506a:	59                   	pop    ecx
c001506b:	58                   	pop    eax
c001506c:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015071:	68 2a b2 02 c0       	push   0xc002b22a
c0015076:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507c:	e8 97 c1 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015081:	58                   	pop    eax
c0015082:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015087:	5a                   	pop    edx
c0015088:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001508b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015091:	e8 a8 c1 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c0015096:	59                   	pop    ecx
c0015097:	58                   	pop    eax
c0015098:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001509d:	68 32 b2 02 c0       	push   0xc002b232
c00150a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a8:	e8 6b c1 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c00150ad:	58                   	pop    eax
c00150ae:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00150b3:	5a                   	pop    edx
c00150b4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00150b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bd:	e8 7c c1 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c00150c2:	59                   	pop    ecx
c00150c3:	58                   	pop    eax
c00150c4:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00150c9:	68 3a b2 02 c0       	push   0xc002b23a
c00150ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d4:	e8 3f c1 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c00150d9:	58                   	pop    eax
c00150da:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00150df:	5a                   	pop    edx
c00150e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150e4:	52                   	push   edx
c00150e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150eb:	e8 4e c1 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c00150f0:	59                   	pop    ecx
c00150f1:	58                   	pop    eax
c00150f2:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00150f7:	68 43 b2 02 c0       	push   0xc002b243
c00150fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015102:	e8 11 c1 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015107:	58                   	pop    eax
c0015108:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001510d:	5a                   	pop    edx
c001510e:	57                   	push   edi
c001510f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015115:	e8 24 c1 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001511a:	59                   	pop    ecx
c001511b:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015120:	5f                   	pop    edi
c0015121:	68 4b b2 02 c0       	push   0xc002b24b
c0015126:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512c:	e8 e7 c0 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015131:	58                   	pop    eax
c0015132:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015137:	5a                   	pop    edx
c0015138:	56                   	push   esi
c0015139:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513f:	e8 fa c0 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c0015144:	59                   	pop    ecx
c0015145:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001514a:	5e                   	pop    esi
c001514b:	68 53 b2 02 c0       	push   0xc002b253
c0015150:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015156:	e8 bd c0 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001515b:	5f                   	pop    edi
c001515c:	58                   	pop    eax
c001515d:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015162:	55                   	push   ebp
c0015163:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015169:	e8 d0 c0 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001516e:	58                   	pop    eax
c001516f:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015174:	5a                   	pop    edx
c0015175:	68 5b b2 02 c0       	push   0xc002b25b
c001517a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015180:	e8 93 c0 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015185:	0f 21 c0             	mov    eax,db0
c0015188:	59                   	pop    ecx
c0015189:	5e                   	pop    esi
c001518a:	50                   	push   eax
c001518b:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015190:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015196:	e8 a3 c0 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001519b:	5f                   	pop    edi
c001519c:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00151a1:	5d                   	pop    ebp
c00151a2:	68 64 b2 02 c0       	push   0xc002b264
c00151a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ad:	e8 66 c0 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c00151b2:	0f 21 c8             	mov    eax,db1
c00151b5:	5a                   	pop    edx
c00151b6:	59                   	pop    ecx
c00151b7:	50                   	push   eax
c00151b8:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00151bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c3:	e8 76 c0 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c00151c8:	5e                   	pop    esi
c00151c9:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00151ce:	5f                   	pop    edi
c00151cf:	68 6c b2 02 c0       	push   0xc002b26c
c00151d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151da:	e8 39 c0 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c00151df:	0f 21 d0             	mov    eax,db2
c00151e2:	5d                   	pop    ebp
c00151e3:	5a                   	pop    edx
c00151e4:	50                   	push   eax
c00151e5:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00151ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f0:	e8 49 c0 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c00151f5:	59                   	pop    ecx
c00151f6:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00151fb:	5e                   	pop    esi
c00151fc:	68 74 b2 02 c0       	push   0xc002b274
c0015201:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015207:	e8 0c c0 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001520c:	0f 21 d8             	mov    eax,db3
c001520f:	5f                   	pop    edi
c0015210:	5d                   	pop    ebp
c0015211:	50                   	push   eax
c0015212:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015217:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001521d:	e8 1c c0 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c0015222:	58                   	pop    eax
c0015223:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015228:	5a                   	pop    edx
c0015229:	68 7c b2 02 c0       	push   0xc002b27c
c001522e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015234:	e8 df bf ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015239:	0f 21 f0             	mov    eax,db6
c001523c:	59                   	pop    ecx
c001523d:	5e                   	pop    esi
c001523e:	50                   	push   eax
c001523f:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015244:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001524a:	e8 ef bf ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001524f:	5f                   	pop    edi
c0015250:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015255:	5d                   	pop    ebp
c0015256:	68 84 b2 02 c0       	push   0xc002b284
c001525b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015261:	e8 b2 bf ff ff       	call   c0011218 <VgaText::puts(char const*)>
c0015266:	0f 21 f8             	mov    eax,db7
c0015269:	5a                   	pop    edx
c001526a:	59                   	pop    ecx
c001526b:	50                   	push   eax
c001526c:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c0015271:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015277:	e8 c2 bf ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001527c:	5e                   	pop    esi
c001527d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015280:	e8 60 85 00 00       	call   c001d7e5 <Thr::getDriverNameFromAddress(unsigned long)>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	85 c0                	test   eax,eax
c001528a:	74 7d                	je     c0015309 <displayDebugInfo(regs*)+0x48b>
c001528c:	89 c6                	mov    esi,eax
c001528e:	50                   	push   eax
c001528f:	50                   	push   eax
c0015290:	56                   	push   esi
c0015291:	68 8c b2 02 c0       	push   0xc002b28c
c0015296:	e8 6c dd ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001529b:	5a                   	pop    edx
c001529c:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00152a1:	59                   	pop    ecx
c00152a2:	68 9a b2 02 c0       	push   0xc002b29a
c00152a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152ad:	e8 66 bf ff ff       	call   c0011218 <VgaText::puts(char const*)>
c00152b2:	5f                   	pop    edi
c00152b3:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00152b8:	5d                   	pop    ebp
c00152b9:	56                   	push   esi
c00152ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152c0:	e8 53 bf ff ff       	call   c0011218 <VgaText::puts(char const*)>
c00152c5:	58                   	pop    eax
c00152c6:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00152cb:	5a                   	pop    edx
c00152cc:	68 a6 b2 02 c0       	push   0xc002b2a6
c00152d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152d7:	e8 3c bf ff ff       	call   c0011218 <VgaText::puts(char const*)>
c00152dc:	59                   	pop    ecx
c00152dd:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c00152e2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00152e8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152eb:	e8 2c 85 00 00       	call   c001d81c <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152f0:	5b                   	pop    ebx
c00152f1:	5d                   	pop    ebp
c00152f2:	50                   	push   eax
c00152f3:	57                   	push   edi
c00152f4:	e8 45 bf ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c00152f9:	58                   	pop    eax
c00152fa:	5a                   	pop    edx
c00152fb:	56                   	push   esi
c00152fc:	68 b2 b2 02 c0       	push   0xc002b2b2
c0015301:	e8 01 dd ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0015306:	83 c4 10             	add    esp,0x10
c0015309:	fa                   	cli    
c001530a:	f4                   	hlt    
c001530b:	eb fe                	jmp    c001530b <displayDebugInfo(regs*)+0x48d>

c001530d <x87EmulHandler(regs*, void*)>:
c001530d:	53                   	push   ebx
c001530e:	83 ec 14             	sub    esp,0x14
c0015311:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015315:	53                   	push   ebx
c0015316:	e8 57 a8 00 00       	call   c001fb72 <Vm::x87Handler(regs*)>
c001531b:	83 c4 10             	add    esp,0x10
c001531e:	84 c0                	test   al,al
c0015320:	74 05                	je     c0015327 <x87EmulHandler(regs*, void*)+0x1a>
c0015322:	83 c4 08             	add    esp,0x8
c0015325:	5b                   	pop    ebx
c0015326:	c3                   	ret    
c0015327:	83 ec 0c             	sub    esp,0xc
c001532a:	68 c2 b2 02 c0       	push   0xc002b2c2
c001532f:	e8 d3 dc ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0015334:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015337:	e8 42 fb ff ff       	call   c0014e7e <displayDebugInfo(regs*)>

c001533c <gpFault(regs*, void*)>:
c001533c:	53                   	push   ebx
c001533d:	83 ec 14             	sub    esp,0x14
c0015340:	c7 05 14 e9 02 c0 ef ee 01 c0 	mov    DWORD PTR ds:0xc002e914,0xc001eeef
c001534a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001534e:	53                   	push   ebx
c001534f:	e8 9b 9b 00 00       	call   c001eeef <Vm::faultHandler(regs*)>
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	84 c0                	test   al,al
c0015359:	74 05                	je     c0015360 <gpFault(regs*, void*)+0x24>
c001535b:	83 c4 08             	add    esp,0x8
c001535e:	5b                   	pop    ebx
c001535f:	c3                   	ret    
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	68 d8 b2 02 c0       	push   0xc002b2d8
c0015368:	e8 9a dc ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001536d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015370:	e8 09 fb ff ff       	call   c0014e7e <displayDebugInfo(regs*)>

c0015375 <pgFault(regs*, void*)>:
c0015375:	53                   	push   ebx
c0015376:	83 ec 14             	sub    esp,0x14
c0015379:	68 f3 b2 02 c0       	push   0xc002b2f3
c001537e:	e8 84 dc ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0015383:	0f 20 d3             	mov    ebx,cr2
c0015386:	58                   	pop    eax
c0015387:	5a                   	pop    edx
c0015388:	53                   	push   ebx
c0015389:	68 00 b3 02 c0       	push   0xc002b300
c001538e:	e8 74 dc ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0015393:	59                   	pop    ecx
c0015394:	58                   	pop    eax
c0015395:	53                   	push   ebx
c0015396:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001539b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001539e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00153a4:	e8 11 d8 ff ff       	call   c0012bba <VAS::tryLoadBackOffDisk(unsigned long)>
c00153a9:	83 c4 10             	add    esp,0x10
c00153ac:	84 c0                	test   al,al
c00153ae:	74 05                	je     c00153b5 <pgFault(regs*, void*)+0x40>
c00153b0:	83 c4 08             	add    esp,0x8
c00153b3:	5b                   	pop    ebx
c00153b4:	c3                   	ret    
c00153b5:	83 ec 0c             	sub    esp,0xc
c00153b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153bc:	e8 bd fa ff ff       	call   c0014e7e <displayDebugInfo(regs*)>

c00153c1 <otherISRHandler(regs*, void*)>:
c00153c1:	53                   	push   ebx
c00153c2:	83 ec 0c             	sub    esp,0xc
c00153c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153c9:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00153cc:	50                   	push   eax
c00153cd:	50                   	push   eax
c00153ce:	68 0c b3 02 c0       	push   0xc002b30c
c00153d3:	e8 2f dc ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00153d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153db:	e8 9e fa ff ff       	call   c0014e7e <displayDebugInfo(regs*)>

c00153e0 <opcodeFault(regs*, void*)>:
c00153e0:	55                   	push   ebp
c00153e1:	89 e5                	mov    ebp,esp
c00153e3:	56                   	push   esi
c00153e4:	53                   	push   ebx
c00153e5:	83 ec 40             	sub    esp,0x40
c00153e8:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00153ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153f3:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153f9:	84 c0                	test   al,al
c00153fb:	74 24                	je     c0015421 <opcodeFault(regs*, void*)+0x41>
c00153fd:	83 ec 0c             	sub    esp,0xc
c0015400:	68 2c b3 02 c0       	push   0xc002b32c
c0015405:	e8 fd db ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015410:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015413:	8d 50 19             	lea    edx,[eax+0x19]
c0015416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015419:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001541c:	e9 be 05 00 00       	jmp    c00159df <opcodeFault(regs*, void*)+0x5ff>
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015427:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001542a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001542e:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015435:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015438:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001543b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543e:	8a 00                	mov    al,BYTE PTR [eax]
c0015440:	3c f0                	cmp    al,0xf0
c0015442:	75 17                	jne    c001545b <opcodeFault(regs*, void*)+0x7b>
c0015444:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001544d:	8d 50 01             	lea    edx,[eax+0x1]
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015456:	e9 da 00 00 00       	jmp    c0015535 <opcodeFault(regs*, void*)+0x155>
c001545b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545e:	8a 00                	mov    al,BYTE PTR [eax]
c0015460:	3c f2                	cmp    al,0xf2
c0015462:	74 09                	je     c001546d <opcodeFault(regs*, void*)+0x8d>
c0015464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015467:	8a 00                	mov    al,BYTE PTR [eax]
c0015469:	3c f3                	cmp    al,0xf3
c001546b:	75 1b                	jne    c0015488 <opcodeFault(regs*, void*)+0xa8>
c001546d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015471:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547a:	8d 50 01             	lea    edx,[eax+0x1]
c001547d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015480:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015483:	e9 ad 00 00 00       	jmp    c0015535 <opcodeFault(regs*, void*)+0x155>
c0015488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548b:	8a 00                	mov    al,BYTE PTR [eax]
c001548d:	3c 66                	cmp    al,0x66
c001548f:	75 1f                	jne    c00154b0 <opcodeFault(regs*, void*)+0xd0>
c0015491:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015495:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015499:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001549c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a2:	8d 50 01             	lea    edx,[eax+0x1]
c00154a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ab:	e9 85 00 00 00       	jmp    c0015535 <opcodeFault(regs*, void*)+0x155>
c00154b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b3:	8a 00                	mov    al,BYTE PTR [eax]
c00154b5:	3c 67                	cmp    al,0x67
c00154b7:	75 18                	jne    c00154d1 <opcodeFault(regs*, void*)+0xf1>
c00154b9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154bd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c6:	8d 50 01             	lea    edx,[eax+0x1]
c00154c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154cf:	eb 64                	jmp    c0015535 <opcodeFault(regs*, void*)+0x155>
c00154d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d4:	8a 00                	mov    al,BYTE PTR [eax]
c00154d6:	3c 2e                	cmp    al,0x2e
c00154d8:	74 09                	je     c00154e3 <opcodeFault(regs*, void*)+0x103>
c00154da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154dd:	8a 00                	mov    al,BYTE PTR [eax]
c00154df:	3c 3e                	cmp    al,0x3e
c00154e1:	75 18                	jne    c00154fb <opcodeFault(regs*, void*)+0x11b>
c00154e3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f0:	8d 50 01             	lea    edx,[eax+0x1]
c00154f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154f9:	eb 3a                	jmp    c0015535 <opcodeFault(regs*, void*)+0x155>
c00154fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015500:	3c 36                	cmp    al,0x36
c0015502:	74 1b                	je     c001551f <opcodeFault(regs*, void*)+0x13f>
c0015504:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015507:	8a 00                	mov    al,BYTE PTR [eax]
c0015509:	3c 26                	cmp    al,0x26
c001550b:	74 12                	je     c001551f <opcodeFault(regs*, void*)+0x13f>
c001550d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015510:	8a 00                	mov    al,BYTE PTR [eax]
c0015512:	3c 64                	cmp    al,0x64
c0015514:	74 09                	je     c001551f <opcodeFault(regs*, void*)+0x13f>
c0015516:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015519:	8a 00                	mov    al,BYTE PTR [eax]
c001551b:	3c 65                	cmp    al,0x65
c001551d:	75 16                	jne    c0015535 <opcodeFault(regs*, void*)+0x155>
c001551f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015523:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015529:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552c:	8d 50 01             	lea    edx,[eax+0x1]
c001552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015532:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015538:	8a 00                	mov    al,BYTE PTR [eax]
c001553a:	3c 0f                	cmp    al,0xf
c001553c:	0f 85 ad 00 00 00    	jne    c00155ef <opcodeFault(regs*, void*)+0x20f>
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	40                   	inc    eax
c0015546:	8a 00                	mov    al,BYTE PTR [eax]
c0015548:	3c c2                	cmp    al,0xc2
c001554a:	74 0e                	je     c001555a <opcodeFault(regs*, void*)+0x17a>
c001554c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554f:	40                   	inc    eax
c0015550:	8a 00                	mov    al,BYTE PTR [eax]
c0015552:	3c c3                	cmp    al,0xc3
c0015554:	0f 85 95 00 00 00    	jne    c00155ef <opcodeFault(regs*, void*)+0x20f>
c001555a:	83 ec 0c             	sub    esp,0xc
c001555d:	68 4f b3 02 c0       	push   0xc002b34f
c0015562:	e8 a0 da ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015570:	8d 50 01             	lea    edx,[eax+0x1]
c0015573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015576:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015579:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001557c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557f:	8a 00                	mov    al,BYTE PTR [eax]
c0015581:	8d 50 fe             	lea    edx,[eax-0x2]
c0015584:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015587:	88 10                	mov    BYTE PTR [eax],dl
c0015589:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001558c:	50                   	push   eax
c001558d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015590:	50                   	push   eax
c0015591:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015594:	50                   	push   eax
c0015595:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015598:	e8 e3 47 00 00       	call   c0019d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155a6:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155a9:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00155ac:	01 d0                	add    eax,edx
c00155ae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00155b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155b7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155ba:	48                   	dec    eax
c00155bb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00155be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c1:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00155c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ca:	83 ec 04             	sub    esp,0x4
c00155cd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155d0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155d3:	50                   	push   eax
c00155d4:	e8 db ab fe ff       	call   c00001b4 <voodooXADD>
c00155d9:	83 c4 10             	add    esp,0x10
c00155dc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00155df:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00155e2:	01 c2                	add    edx,eax
c00155e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155ea:	e9 f0 03 00 00       	jmp    c00159df <opcodeFault(regs*, void*)+0x5ff>
c00155ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f2:	8a 00                	mov    al,BYTE PTR [eax]
c00155f4:	3c 0f                	cmp    al,0xf
c00155f6:	0f 85 8b 01 00 00    	jne    c0015787 <opcodeFault(regs*, void*)+0x3a7>
c00155fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ff:	40                   	inc    eax
c0015600:	8a 00                	mov    al,BYTE PTR [eax]
c0015602:	3c c7                	cmp    al,0xc7
c0015604:	0f 86 7d 01 00 00    	jbe    c0015787 <opcodeFault(regs*, void*)+0x3a7>
c001560a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560d:	40                   	inc    eax
c001560e:	8a 00                	mov    al,BYTE PTR [eax]
c0015610:	3c cf                	cmp    al,0xcf
c0015612:	0f 87 6f 01 00 00    	ja     c0015787 <opcodeFault(regs*, void*)+0x3a7>
c0015618:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561b:	40                   	inc    eax
c001561c:	8a 00                	mov    al,BYTE PTR [eax]
c001561e:	83 c0 38             	add    eax,0x38
c0015621:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015624:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015628:	75 0b                	jne    c0015635 <opcodeFault(regs*, void*)+0x255>
c001562a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015630:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015633:	eb 75                	jmp    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c0015635:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015639:	75 0b                	jne    c0015646 <opcodeFault(regs*, void*)+0x266>
c001563b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015641:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015644:	eb 64                	jmp    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c0015646:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001564a:	75 0b                	jne    c0015657 <opcodeFault(regs*, void*)+0x277>
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015652:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015655:	eb 53                	jmp    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c0015657:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001565b:	75 0b                	jne    c0015668 <opcodeFault(regs*, void*)+0x288>
c001565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015660:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015663:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015666:	eb 42                	jmp    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c0015668:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001566c:	75 0b                	jne    c0015679 <opcodeFault(regs*, void*)+0x299>
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015674:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015677:	eb 31                	jmp    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c0015679:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001567d:	75 0b                	jne    c001568a <opcodeFault(regs*, void*)+0x2aa>
c001567f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015682:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015685:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015688:	eb 20                	jmp    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c001568a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001568e:	75 0b                	jne    c001569b <opcodeFault(regs*, void*)+0x2bb>
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015696:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015699:	eb 0f                	jmp    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c001569b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001569f:	75 09                	jne    c00156aa <opcodeFault(regs*, void*)+0x2ca>
c00156a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00156a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156aa:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00156ae:	74 10                	je     c00156c0 <opcodeFault(regs*, void*)+0x2e0>
c00156b0:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00156b7:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00156be:	eb 2d                	jmp    c00156ed <opcodeFault(regs*, void*)+0x30d>
c00156c0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156c3:	c1 e0 18             	shl    eax,0x18
c00156c6:	89 c2                	mov    edx,eax
c00156c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156cb:	c1 e0 08             	shl    eax,0x8
c00156ce:	25 00 00 ff 00       	and    eax,0xff0000
c00156d3:	09 c2                	or     edx,eax
c00156d5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156d8:	c1 e8 08             	shr    eax,0x8
c00156db:	25 00 ff 00 00       	and    eax,0xff00
c00156e0:	09 c2                	or     edx,eax
c00156e2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156e5:	c1 e8 18             	shr    eax,0x18
c00156e8:	09 d0                	or     eax,edx
c00156ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156ed:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00156f1:	75 0b                	jne    c00156fe <opcodeFault(regs*, void*)+0x31e>
c00156f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156f9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156fc:	eb 75                	jmp    c0015773 <opcodeFault(regs*, void*)+0x393>
c00156fe:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015702:	75 0b                	jne    c001570f <opcodeFault(regs*, void*)+0x32f>
c0015704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015707:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001570a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001570d:	eb 64                	jmp    c0015773 <opcodeFault(regs*, void*)+0x393>
c001570f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015713:	75 0b                	jne    c0015720 <opcodeFault(regs*, void*)+0x340>
c0015715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015718:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001571b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001571e:	eb 53                	jmp    c0015773 <opcodeFault(regs*, void*)+0x393>
c0015720:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015724:	75 0b                	jne    c0015731 <opcodeFault(regs*, void*)+0x351>
c0015726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015729:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001572c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001572f:	eb 42                	jmp    c0015773 <opcodeFault(regs*, void*)+0x393>
c0015731:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015735:	75 0b                	jne    c0015742 <opcodeFault(regs*, void*)+0x362>
c0015737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001573d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015740:	eb 31                	jmp    c0015773 <opcodeFault(regs*, void*)+0x393>
c0015742:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015746:	75 0b                	jne    c0015753 <opcodeFault(regs*, void*)+0x373>
c0015748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001574e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015751:	eb 20                	jmp    c0015773 <opcodeFault(regs*, void*)+0x393>
c0015753:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015757:	75 0b                	jne    c0015764 <opcodeFault(regs*, void*)+0x384>
c0015759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001575f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015762:	eb 0f                	jmp    c0015773 <opcodeFault(regs*, void*)+0x393>
c0015764:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015768:	75 09                	jne    c0015773 <opcodeFault(regs*, void*)+0x393>
c001576a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015770:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015776:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015779:	8d 50 02             	lea    edx,[eax+0x2]
c001577c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015782:	e9 58 02 00 00       	jmp    c00159df <opcodeFault(regs*, void*)+0x5ff>
c0015787:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001578a:	8a 00                	mov    al,BYTE PTR [eax]
c001578c:	3c 0f                	cmp    al,0xf
c001578e:	0f 85 76 01 00 00    	jne    c001590a <opcodeFault(regs*, void*)+0x52a>
c0015794:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015797:	40                   	inc    eax
c0015798:	8a 00                	mov    al,BYTE PTR [eax]
c001579a:	3c c7                	cmp    al,0xc7
c001579c:	0f 85 68 01 00 00    	jne    c001590a <opcodeFault(regs*, void*)+0x52a>
c00157a2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00157a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157ab:	8d 50 01             	lea    edx,[eax+0x1]
c00157ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157b4:	8d 45 ba             	lea    eax,[ebp-0x46]
c00157b7:	50                   	push   eax
c00157b8:	8d 45 bb             	lea    eax,[ebp-0x45]
c00157bb:	50                   	push   eax
c00157bc:	8d 45 bc             	lea    eax,[ebp-0x44]
c00157bf:	50                   	push   eax
c00157c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157c3:	e8 b8 45 00 00       	call   c0019d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157ce:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157d1:	83 f0 01             	xor    eax,0x1
c00157d4:	84 c0                	test   al,al
c00157d6:	0f 84 2e 01 00 00    	je     c001590a <opcodeFault(regs*, void*)+0x52a>
c00157dc:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00157df:	3c 01                	cmp    al,0x1
c00157e1:	0f 85 23 01 00 00    	jne    c001590a <opcodeFault(regs*, void*)+0x52a>
c00157e7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157ea:	83 f0 01             	xor    eax,0x1
c00157ed:	84 c0                	test   al,al
c00157ef:	0f 84 15 01 00 00    	je     c001590a <opcodeFault(regs*, void*)+0x52a>
c00157f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157fb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157fe:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015805:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015808:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001580b:	89 c2                	mov    edx,eax
c001580d:	b8 00 00 00 00       	mov    eax,0x0
c0015812:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015815:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001581e:	ba 00 00 00 00       	mov    edx,0x0
c0015823:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015826:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001582f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015832:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015839:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001583c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001583f:	89 c2                	mov    edx,eax
c0015841:	b8 00 00 00 00       	mov    eax,0x0
c0015846:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015849:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001584c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015852:	ba 00 00 00 00       	mov    edx,0x0
c0015857:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001585a:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001585d:	e8 7c 86 00 00       	call   c001dede <lockScheduler()>
c0015862:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015865:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015868:	8b 00                	mov    eax,DWORD PTR [eax]
c001586a:	89 c1                	mov    ecx,eax
c001586c:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001586f:	89 cb                	mov    ebx,ecx
c0015871:	89 d0                	mov    eax,edx
c0015873:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015876:	89 c6                	mov    esi,eax
c0015878:	89 f0                	mov    eax,esi
c001587a:	09 d8                	or     eax,ebx
c001587c:	85 c0                	test   eax,eax
c001587e:	75 21                	jne    c00158a1 <opcodeFault(regs*, void*)+0x4c1>
c0015880:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015883:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015886:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015889:	89 01                	mov    DWORD PTR [ecx],eax
c001588b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015894:	83 c8 40             	or     eax,0x40
c0015897:	89 c2                	mov    edx,eax
c0015899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001589f:	eb 3e                	jmp    c00158df <opcodeFault(regs*, void*)+0x4ff>
c00158a1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00158a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00158a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00158ac:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00158af:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00158b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00158b8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00158bb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00158be:	89 d0                	mov    eax,edx
c00158c0:	31 d2                	xor    edx,edx
c00158c2:	89 c3                	mov    ebx,eax
c00158c4:	89 d6                	mov    esi,edx
c00158c6:	89 da                	mov    edx,ebx
c00158c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cb:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158d4:	83 e0 bf             	and    eax,0xffffffbf
c00158d7:	89 c2                	mov    edx,eax
c00158d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158dc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158df:	e8 fc 85 00 00       	call   c001dee0 <unlockScheduler()>
c00158e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ea:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00158ed:	01 c2                	add    edx,eax
c00158ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158f5:	83 ec 0c             	sub    esp,0xc
c00158f8:	68 5e b3 02 c0       	push   0xc002b35e
c00158fd:	e8 05 d7 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	e9 d5 00 00 00       	jmp    c00159df <opcodeFault(regs*, void*)+0x5ff>
c001590a:	83 ec 0c             	sub    esp,0xc
c001590d:	68 71 b3 02 c0       	push   0xc002b371
c0015912:	e8 f0 d6 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015923:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015926:	c1 e0 04             	shl    eax,0x4
c0015929:	01 d0                	add    eax,edx
c001592b:	83 c0 03             	add    eax,0x3
c001592e:	8a 00                	mov    al,BYTE PTR [eax]
c0015930:	0f b6 d8             	movzx  ebx,al
c0015933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015936:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001593f:	c1 e0 04             	shl    eax,0x4
c0015942:	01 d0                	add    eax,edx
c0015944:	83 c0 02             	add    eax,0x2
c0015947:	8a 00                	mov    al,BYTE PTR [eax]
c0015949:	0f b6 c8             	movzx  ecx,al
c001594c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015958:	c1 e0 04             	shl    eax,0x4
c001595b:	01 d0                	add    eax,edx
c001595d:	40                   	inc    eax
c001595e:	8a 00                	mov    al,BYTE PTR [eax]
c0015960:	0f b6 d0             	movzx  edx,al
c0015963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015966:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001596f:	c1 e0 04             	shl    eax,0x4
c0015972:	01 f0                	add    eax,esi
c0015974:	8a 00                	mov    al,BYTE PTR [eax]
c0015976:	0f b6 c0             	movzx  eax,al
c0015979:	83 ec 0c             	sub    esp,0xc
c001597c:	53                   	push   ebx
c001597d:	51                   	push   ecx
c001597e:	52                   	push   edx
c001597f:	50                   	push   eax
c0015980:	68 84 b3 02 c0       	push   0xc002b384
c0015985:	e8 7d d6 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001598a:	83 c4 20             	add    esp,0x20
c001598d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015990:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015993:	83 c0 03             	add    eax,0x3
c0015996:	8a 00                	mov    al,BYTE PTR [eax]
c0015998:	0f b6 d8             	movzx  ebx,al
c001599b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159a1:	83 c0 02             	add    eax,0x2
c00159a4:	8a 00                	mov    al,BYTE PTR [eax]
c00159a6:	0f b6 c8             	movzx  ecx,al
c00159a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159af:	40                   	inc    eax
c00159b0:	8a 00                	mov    al,BYTE PTR [eax]
c00159b2:	0f b6 d0             	movzx  edx,al
c00159b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159bb:	8a 00                	mov    al,BYTE PTR [eax]
c00159bd:	0f b6 c0             	movzx  eax,al
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	53                   	push   ebx
c00159c4:	51                   	push   ecx
c00159c5:	52                   	push   edx
c00159c6:	50                   	push   eax
c00159c7:	68 ac b3 02 c0       	push   0xc002b3ac
c00159cc:	e8 36 d6 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00159d1:	83 c4 20             	add    esp,0x20
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00159da:	e8 9f f4 ff ff       	call   c0014e7e <displayDebugInfo(regs*)>
c00159df:	8d 65 f8             	lea    esp,[ebp-0x8]
c00159e2:	5b                   	pop    ebx
c00159e3:	5e                   	pop    esi
c00159e4:	5d                   	pop    ebp
c00159e5:	c3                   	ret    

c00159e6 <displayProgramFault(char const*)>:
c00159e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159ee:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159f4:	85 c0                	test   eax,eax
c00159f6:	74 15                	je     c0015a0d <displayProgramFault(char const*)+0x27>
c00159f8:	83 ec 0c             	sub    esp,0xc
c00159fb:	6a 04                	push   0x4
c00159fd:	6a 0f                	push   0xf
c00159ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a03:	50                   	push   eax
c0015a04:	e8 d1 b4 ff ff       	call   c0010eda <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015a09:	83 c4 1c             	add    esp,0x1c
c0015a0c:	c3                   	ret    
c0015a0d:	c3                   	ret    

c0015a0e <setupInterruptController()>:
c0015a0e:	55                   	push   ebp
c0015a0f:	89 e5                	mov    ebp,esp
c0015a11:	53                   	push   ebx
c0015a12:	83 ec 24             	sub    esp,0x24
c0015a15:	b8 00 00 00 00       	mov    eax,0x0
c0015a1a:	85 c0                	test   eax,eax
c0015a1c:	0f 95 c0             	setne  al
c0015a1f:	84 c0                	test   al,al
c0015a21:	74 5b                	je     c0015a7e <setupInterruptController()+0x70>
c0015a23:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015a2a:	83 ec 0c             	sub    esp,0xc
c0015a2d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a30:	e8 c7 9e ff ff       	call   c000f8fc <malloc>
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	89 c3                	mov    ebx,eax
c0015a3a:	83 ec 0c             	sub    esp,0xc
c0015a3d:	53                   	push   ebx
c0015a3e:	e8 f3 ff 00 00       	call   c0025a36 <APIC::APIC()>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a49:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a51:	83 c0 08             	add    eax,0x8
c0015a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a56:	6a 00                	push   0x0
c0015a58:	6a 00                	push   0x0
c0015a5a:	6a 00                	push   0x0
c0015a5c:	52                   	push   edx
c0015a5d:	ff d0                	call   eax
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0015a67:	83 ec 08             	sub    esp,0x8
c0015a6a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a6d:	50                   	push   eax
c0015a6e:	e8 bb e9 ff ff       	call   c001442e <Device::addChild(Device*)>
c0015a73:	83 c4 10             	add    esp,0x10
c0015a76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a79:	e9 52 03 00 00       	jmp    c0015dd0 <setupInterruptController()+0x3c2>
c0015a7e:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0015a83:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a89:	83 e0 01             	and    eax,0x1
c0015a8c:	84 c0                	test   al,al
c0015a8e:	0f 95 c0             	setne  al
c0015a91:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a94:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a9b:	83 ec 0c             	sub    esp,0xc
c0015a9e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015aa1:	e8 56 9e ff ff       	call   c000f8fc <malloc>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	89 c3                	mov    ebx,eax
c0015aab:	83 ec 0c             	sub    esp,0xc
c0015aae:	53                   	push   ebx
c0015aaf:	e8 da 04 01 00       	call   c0025f8e <PIC::PIC()>
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015aba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015abd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac2:	83 c0 08             	add    eax,0x8
c0015ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac7:	6a 00                	push   0x0
c0015ac9:	6a 00                	push   0x0
c0015acb:	6a 00                	push   0x0
c0015acd:	52                   	push   edx
c0015ace:	ff d0                	call   eax
c0015ad0:	83 c4 10             	add    esp,0x10
c0015ad3:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015ad7:	74 73                	je     c0015b4c <setupInterruptController()+0x13e>
c0015ad9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae1:	83 c0 0c             	add    eax,0xc
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	6a 00                	push   0x0
c0015ae8:	6a 00                	push   0x0
c0015aea:	6a 00                	push   0x0
c0015aec:	52                   	push   edx
c0015aed:	ff d0                	call   eax
c0015aef:	83 c4 10             	add    esp,0x10
c0015af2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015af6:	74 15                	je     c0015b0d <setupInterruptController()+0xff>
c0015af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	83 c0 04             	add    eax,0x4
c0015b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b02:	83 ec 0c             	sub    esp,0xc
c0015b05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b08:	ff d0                	call   eax
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015b1a:	e8 dd 9d ff ff       	call   c000f8fc <malloc>
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	89 c3                	mov    ebx,eax
c0015b24:	83 ec 0c             	sub    esp,0xc
c0015b27:	53                   	push   ebx
c0015b28:	e8 09 ff 00 00       	call   c0025a36 <APIC::APIC()>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b33:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3b:	83 c0 08             	add    eax,0x8
c0015b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b40:	6a 00                	push   0x0
c0015b42:	6a 00                	push   0x0
c0015b44:	6a 00                	push   0x0
c0015b46:	52                   	push   edx
c0015b47:	ff d0                	call   eax
c0015b49:	83 c4 10             	add    esp,0x10
c0015b4c:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0015b51:	83 ec 08             	sub    esp,0x8
c0015b54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b57:	50                   	push   eax
c0015b58:	e8 d1 e8 ff ff       	call   c001442e <Device::addChild(Device*)>
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b65:	83 c0 24             	add    eax,0x24
c0015b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6a:	6a 00                	push   0x0
c0015b6c:	68 c1 53 01 c0       	push   0xc00153c1
c0015b71:	6a 00                	push   0x0
c0015b73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b76:	ff d0                	call   eax
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b80:	83 c0 24             	add    eax,0x24
c0015b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b85:	6a 00                	push   0x0
c0015b87:	68 c1 53 01 c0       	push   0xc00153c1
c0015b8c:	6a 01                	push   0x1
c0015b8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b91:	ff d0                	call   eax
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9b:	83 c0 24             	add    eax,0x24
c0015b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba0:	6a 00                	push   0x0
c0015ba2:	68 db 4c 01 c0       	push   0xc0014cdb
c0015ba7:	6a 02                	push   0x2
c0015ba9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bac:	ff d0                	call   eax
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb6:	83 c0 24             	add    eax,0x24
c0015bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbb:	6a 00                	push   0x0
c0015bbd:	68 c1 53 01 c0       	push   0xc00153c1
c0015bc2:	6a 03                	push   0x3
c0015bc4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc7:	ff d0                	call   eax
c0015bc9:	83 c4 10             	add    esp,0x10
c0015bcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd1:	83 c0 24             	add    eax,0x24
c0015bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd6:	6a 00                	push   0x0
c0015bd8:	68 c1 53 01 c0       	push   0xc00153c1
c0015bdd:	6a 04                	push   0x4
c0015bdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be2:	ff d0                	call   eax
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bec:	83 c0 24             	add    eax,0x24
c0015bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf1:	6a 00                	push   0x0
c0015bf3:	68 c1 53 01 c0       	push   0xc00153c1
c0015bf8:	6a 05                	push   0x5
c0015bfa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfd:	ff d0                	call   eax
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c07:	83 c0 24             	add    eax,0x24
c0015c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0c:	6a 00                	push   0x0
c0015c0e:	68 e0 53 01 c0       	push   0xc00153e0
c0015c13:	6a 06                	push   0x6
c0015c15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c18:	ff d0                	call   eax
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c22:	83 c0 24             	add    eax,0x24
c0015c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c27:	6a 00                	push   0x0
c0015c29:	68 0d 53 01 c0       	push   0xc001530d
c0015c2e:	6a 07                	push   0x7
c0015c30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c33:	ff d0                	call   eax
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3d:	83 c0 24             	add    eax,0x24
c0015c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c42:	6a 00                	push   0x0
c0015c44:	68 f6 4a 01 c0       	push   0xc0014af6
c0015c49:	6a 08                	push   0x8
c0015c4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4e:	ff d0                	call   eax
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c58:	83 c0 24             	add    eax,0x24
c0015c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5d:	6a 00                	push   0x0
c0015c5f:	68 c1 53 01 c0       	push   0xc00153c1
c0015c64:	6a 09                	push   0x9
c0015c66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c69:	ff d0                	call   eax
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c73:	83 c0 24             	add    eax,0x24
c0015c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c78:	6a 00                	push   0x0
c0015c7a:	68 c1 53 01 c0       	push   0xc00153c1
c0015c7f:	6a 0a                	push   0xa
c0015c81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c84:	ff d0                	call   eax
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8e:	83 c0 24             	add    eax,0x24
c0015c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c93:	6a 00                	push   0x0
c0015c95:	68 c1 53 01 c0       	push   0xc00153c1
c0015c9a:	6a 0b                	push   0xb
c0015c9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9f:	ff d0                	call   eax
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca9:	83 c0 24             	add    eax,0x24
c0015cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cae:	6a 00                	push   0x0
c0015cb0:	68 c1 53 01 c0       	push   0xc00153c1
c0015cb5:	6a 0c                	push   0xc
c0015cb7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cba:	ff d0                	call   eax
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc4:	83 c0 24             	add    eax,0x24
c0015cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc9:	6a 00                	push   0x0
c0015ccb:	68 3c 53 01 c0       	push   0xc001533c
c0015cd0:	6a 0d                	push   0xd
c0015cd2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd5:	ff d0                	call   eax
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdf:	83 c0 24             	add    eax,0x24
c0015ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce4:	6a 00                	push   0x0
c0015ce6:	68 75 53 01 c0       	push   0xc0015375
c0015ceb:	6a 0e                	push   0xe
c0015ced:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf0:	ff d0                	call   eax
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfa:	83 c0 24             	add    eax,0x24
c0015cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cff:	6a 00                	push   0x0
c0015d01:	68 c1 53 01 c0       	push   0xc00153c1
c0015d06:	6a 0f                	push   0xf
c0015d08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0b:	ff d0                	call   eax
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d15:	83 c0 24             	add    eax,0x24
c0015d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d1a:	6a 00                	push   0x0
c0015d1c:	68 c1 53 01 c0       	push   0xc00153c1
c0015d21:	6a 10                	push   0x10
c0015d23:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d26:	ff d0                	call   eax
c0015d28:	83 c4 10             	add    esp,0x10
c0015d2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d30:	83 c0 24             	add    eax,0x24
c0015d33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d35:	6a 00                	push   0x0
c0015d37:	68 c1 53 01 c0       	push   0xc00153c1
c0015d3c:	6a 11                	push   0x11
c0015d3e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d41:	ff d0                	call   eax
c0015d43:	83 c4 10             	add    esp,0x10
c0015d46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d4b:	83 c0 24             	add    eax,0x24
c0015d4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d50:	6a 00                	push   0x0
c0015d52:	68 c1 53 01 c0       	push   0xc00153c1
c0015d57:	6a 12                	push   0x12
c0015d59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d5c:	ff d0                	call   eax
c0015d5e:	83 c4 10             	add    esp,0x10
c0015d61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d66:	83 c0 24             	add    eax,0x24
c0015d69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d6b:	6a 00                	push   0x0
c0015d6d:	68 c1 53 01 c0       	push   0xc00153c1
c0015d72:	6a 13                	push   0x13
c0015d74:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d77:	ff d0                	call   eax
c0015d79:	83 c4 10             	add    esp,0x10
c0015d7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d81:	83 c0 24             	add    eax,0x24
c0015d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d86:	6a 00                	push   0x0
c0015d88:	68 c1 53 01 c0       	push   0xc00153c1
c0015d8d:	6a 14                	push   0x14
c0015d8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d92:	ff d0                	call   eax
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d9c:	83 c0 24             	add    eax,0x24
c0015d9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015da1:	6a 00                	push   0x0
c0015da3:	68 c1 53 01 c0       	push   0xc00153c1
c0015da8:	6a 1e                	push   0x1e
c0015daa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dad:	ff d0                	call   eax
c0015daf:	83 c4 10             	add    esp,0x10
c0015db2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015db7:	83 c0 24             	add    eax,0x24
c0015dba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dbc:	6a 00                	push   0x0
c0015dbe:	68 8d c8 01 c0       	push   0xc001c88d
c0015dc3:	6a 60                	push   0x60
c0015dc5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dc8:	ff d0                	call   eax
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dd0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dd3:	c9                   	leave  
c0015dd4:	c3                   	ret    
c0015dd5:	90                   	nop

c0015dd6 <InterruptController::convertLegacyIRQNumber(int)>:
c0015dd6:	55                   	push   ebp
c0015dd7:	89 e5                	mov    ebp,esp
c0015dd9:	83 ec 08             	sub    esp,0x8
c0015ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddf:	83 ec 0c             	sub    esp,0xc
c0015de2:	50                   	push   eax
c0015de3:	e8 32 e9 ff ff       	call   c001471a <Device::getName()>
c0015de8:	83 c4 10             	add    esp,0x10
c0015deb:	8a 00                	mov    al,BYTE PTR [eax]
c0015ded:	3c 41                	cmp    al,0x41
c0015def:	0f 94 c0             	sete   al
c0015df2:	84 c0                	test   al,al
c0015df4:	74 28                	je     c0015e1e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015df6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015dfa:	7f 12                	jg     c0015e0e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015dfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dff:	05 c0 d9 02 c0       	add    eax,0xc002d9c0
c0015e04:	8a 00                	mov    al,BYTE PTR [eax]
c0015e06:	0f b6 c0             	movzx  eax,al
c0015e09:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015e0c:	eb 10                	jmp    c0015e1e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015e0e:	83 ec 0c             	sub    esp,0xc
c0015e11:	68 c0 b0 02 c0       	push   0xc002b0c0
c0015e16:	e8 9e 48 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c0015e1b:	83 c4 10             	add    esp,0x10
c0015e1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e21:	c9                   	leave  
c0015e22:	c3                   	ret    
c0015e23:	90                   	nop

c0015e24 <startGUI(void*)>:
c0015e24:	55                   	push   ebp
c0015e25:	89 e5                	mov    ebp,esp
c0015e27:	53                   	push   ebx
c0015e28:	83 ec 04             	sub    esp,0x4
c0015e2b:	e8 b0 80 00 00       	call   c001dee0 <unlockScheduler()>
c0015e30:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c0015e36:	83 ec 08             	sub    esp,0x8
c0015e39:	6a 01                	push   0x1
c0015e3b:	68 1c b4 02 c0       	push   0xc002b41c
c0015e40:	e8 f1 79 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	83 ec 08             	sub    esp,0x8
c0015e4b:	53                   	push   ebx
c0015e4c:	50                   	push   eax
c0015e4d:	e8 18 7c 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c0015e52:	83 c4 10             	add    esp,0x10
c0015e55:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c0015e5b:	83 ec 08             	sub    esp,0x8
c0015e5e:	6a 01                	push   0x1
c0015e60:	68 36 b4 02 c0       	push   0xc002b436
c0015e65:	e8 cc 79 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	83 ec 08             	sub    esp,0x8
c0015e70:	53                   	push   ebx
c0015e71:	50                   	push   eax
c0015e72:	e8 f3 7b 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c0015e77:	83 c4 10             	add    esp,0x10
c0015e7a:	90                   	nop
c0015e7b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e7e:	c9                   	leave  
c0015e7f:	c3                   	ret    

c0015e80 <startGUIVESA(void*)>:
c0015e80:	55                   	push   ebp
c0015e81:	89 e5                	mov    ebp,esp
c0015e83:	53                   	push   ebx
c0015e84:	83 ec 04             	sub    esp,0x4
c0015e87:	e8 54 80 00 00       	call   c001dee0 <unlockScheduler()>
c0015e8c:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c0015e92:	83 ec 08             	sub    esp,0x8
c0015e95:	6a 01                	push   0x1
c0015e97:	68 50 b4 02 c0       	push   0xc002b450
c0015e9c:	e8 95 79 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c0015ea1:	83 c4 10             	add    esp,0x10
c0015ea4:	83 ec 08             	sub    esp,0x8
c0015ea7:	53                   	push   ebx
c0015ea8:	50                   	push   eax
c0015ea9:	e8 bc 7b 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c0015eae:	83 c4 10             	add    esp,0x10
c0015eb1:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c0015eb7:	83 ec 08             	sub    esp,0x8
c0015eba:	6a 01                	push   0x1
c0015ebc:	68 36 b4 02 c0       	push   0xc002b436
c0015ec1:	e8 70 79 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	83 ec 08             	sub    esp,0x8
c0015ecc:	53                   	push   ebx
c0015ecd:	50                   	push   eax
c0015ece:	e8 97 7b 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c0015ed3:	83 c4 10             	add    esp,0x10
c0015ed6:	90                   	nop
c0015ed7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015eda:	c9                   	leave  
c0015edb:	c3                   	ret    

c0015edc <sendKeyToTerminal(unsigned char)>:
c0015edc:	55                   	push   ebp
c0015edd:	89 e5                	mov    ebp,esp
c0015edf:	83 ec 28             	sub    esp,0x28
c0015ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015ee8:	a1 44 e8 02 c0       	mov    eax,ds:0xc002e844
c0015eed:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ef1:	83 ec 08             	sub    esp,0x8
c0015ef4:	52                   	push   edx
c0015ef5:	50                   	push   eax
c0015ef6:	e8 1b b5 ff ff       	call   c0011416 <VgaText::receiveKey(unsigned char)>
c0015efb:	83 c4 10             	add    esp,0x10
c0015efe:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015f02:	75 41                	jne    c0015f45 <sendKeyToTerminal(unsigned char)+0x69>
c0015f04:	e8 fc 7f 00 00       	call   c001df05 <lockStuff()>
c0015f09:	a1 20 e9 02 c0       	mov    eax,ds:0xc002e920
c0015f0e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f11:	c7 05 20 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e920,0x0
c0015f1b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015f1f:	74 1f                	je     c0015f40 <sendKeyToTerminal(unsigned char)+0x64>
c0015f21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f24:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015f27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f2a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f2d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f30:	83 ec 0c             	sub    esp,0xc
c0015f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f36:	e8 bb 85 00 00       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c0015f3b:	83 c4 10             	add    esp,0x10
c0015f3e:	eb db                	jmp    c0015f1b <sendKeyToTerminal(unsigned char)+0x3f>
c0015f40:	e8 5a 83 00 00       	call   c001e29f <unlockStuff()>
c0015f45:	90                   	nop
c0015f46:	c9                   	leave  
c0015f47:	c3                   	ret    

c0015f48 <sendKeyboardToken(KeyboardToken)>:
c0015f48:	55                   	push   ebp
c0015f49:	89 e5                	mov    ebp,esp
c0015f4b:	83 ec 18             	sub    esp,0x18
c0015f4e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f54:	0f b7 c0             	movzx  eax,ax
c0015f57:	83 f2 01             	xor    edx,0x1
c0015f5a:	88 90 40 e9 02 c0    	mov    BYTE PTR [eax-0x3ffd16c0],dl
c0015f60:	a1 28 e9 02 c0       	mov    eax,ds:0xc002e928
c0015f65:	85 c0                	test   eax,eax
c0015f67:	74 24                	je     c0015f8d <sendKeyboardToken(KeyboardToken)+0x45>
c0015f69:	8b 0d 28 e9 02 c0    	mov    ecx,DWORD PTR ds:0xc002e928
c0015f6f:	83 ec 04             	sub    esp,0x4
c0015f72:	68 40 e9 02 c0       	push   0xc002e940
c0015f77:	83 ec 08             	sub    esp,0x8
c0015f7a:	89 e2                	mov    edx,esp
c0015f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7f:	89 02                	mov    DWORD PTR [edx],eax
c0015f81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f84:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f88:	ff d1                	call   ecx
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f90:	66 3d 03 02          	cmp    ax,0x203
c0015f94:	75 07                	jne    c0015f9d <sendKeyboardToken(KeyboardToken)+0x55>
c0015f96:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c0015f9b:	84 c0                	test   al,al
c0015f9d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015fa1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015fa4:	a0 48 ed 02 c0       	mov    al,ds:0xc002ed48
c0015fa9:	38 c2                	cmp    dl,al
c0015fab:	74 1c                	je     c0015fc9 <sendKeyboardToken(KeyboardToken)+0x81>
c0015fad:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015fb0:	a2 48 ed 02 c0       	mov    ds:0xc002ed48,al
c0015fb5:	a0 48 ed 02 c0       	mov    al,ds:0xc002ed48
c0015fba:	0f b6 c0             	movzx  eax,al
c0015fbd:	83 ec 0c             	sub    esp,0xc
c0015fc0:	50                   	push   eax
c0015fc1:	e8 b0 a6 ff ff       	call   c0010676 <setTerminalScrollLock(bool)>
c0015fc6:	83 c4 10             	add    esp,0x10
c0015fc9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fcc:	84 c0                	test   al,al
c0015fce:	0f 84 ae 00 00 00    	je     c0016082 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd7:	66 3d 10 03          	cmp    ax,0x310
c0015fdb:	75 06                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fdd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 11 03          	cmp    ax,0x311
c0015fea:	75 06                	jne    c0015ff2 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fec:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff5:	66 3d 12 03          	cmp    ax,0x312
c0015ff9:	75 06                	jne    c0016001 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ffb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0016001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016004:	66 3d 13 03          	cmp    ax,0x313
c0016008:	75 06                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0xc8>
c001600a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 14 03          	cmp    ax,0x314
c0016017:	75 06                	jne    c001601f <sendKeyboardToken(KeyboardToken)+0xd7>
c0016019:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001601f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016022:	66 3d 15 03          	cmp    ax,0x315
c0016026:	75 06                	jne    c001602e <sendKeyboardToken(KeyboardToken)+0xe6>
c0016028:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001602e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016031:	66 3d 16 03          	cmp    ax,0x316
c0016035:	75 06                	jne    c001603d <sendKeyboardToken(KeyboardToken)+0xf5>
c0016037:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001603d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016040:	66 3d 17 03          	cmp    ax,0x317
c0016044:	75 06                	jne    c001604c <sendKeyboardToken(KeyboardToken)+0x104>
c0016046:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001604c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604f:	66 3d 18 03          	cmp    ax,0x318
c0016053:	75 06                	jne    c001605b <sendKeyboardToken(KeyboardToken)+0x113>
c0016055:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001605b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605e:	66 3d 19 03          	cmp    ax,0x319
c0016062:	75 06                	jne    c001606a <sendKeyboardToken(KeyboardToken)+0x122>
c0016064:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001606a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606d:	66 3d 1a 03          	cmp    ax,0x31a
c0016071:	0f 85 c9 00 00 00    	jne    c0016140 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016077:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001607d:	e9 be 00 00 00       	jmp    c0016140 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016085:	66 3d 10 03          	cmp    ax,0x310
c0016089:	75 0a                	jne    c0016095 <sendKeyboardToken(KeyboardToken)+0x14d>
c001608b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016091:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016098:	66 3d 11 03          	cmp    ax,0x311
c001609c:	75 0a                	jne    c00160a8 <sendKeyboardToken(KeyboardToken)+0x160>
c001609e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00160a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ab:	66 3d 12 03          	cmp    ax,0x312
c00160af:	75 0a                	jne    c00160bb <sendKeyboardToken(KeyboardToken)+0x173>
c00160b1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00160b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160be:	66 3d 13 03          	cmp    ax,0x313
c00160c2:	75 0a                	jne    c00160ce <sendKeyboardToken(KeyboardToken)+0x186>
c00160c4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d1:	66 3d 14 03          	cmp    ax,0x314
c00160d5:	75 0a                	jne    c00160e1 <sendKeyboardToken(KeyboardToken)+0x199>
c00160d7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e4:	66 3d 15 03          	cmp    ax,0x315
c00160e8:	75 0a                	jne    c00160f4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160ea:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f7:	66 3d 16 03          	cmp    ax,0x316
c00160fb:	75 0a                	jne    c0016107 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160fd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016103:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610a:	66 3d 17 03          	cmp    ax,0x317
c001610e:	75 0a                	jne    c001611a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016110:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016116:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001611a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611d:	66 3d 18 03          	cmp    ax,0x318
c0016121:	75 0a                	jne    c001612d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016123:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016129:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001612d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016130:	66 3d 19 03          	cmp    ax,0x319
c0016134:	75 0a                	jne    c0016140 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016136:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001613c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016143:	66 3d 00 02          	cmp    ax,0x200
c0016147:	75 2c                	jne    c0016175 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016149:	a0 40 ed 02 c0       	mov    al,ds:0xc002ed40
c001614e:	83 f0 01             	xor    eax,0x1
c0016151:	84 c0                	test   al,al
c0016153:	74 20                	je     c0016175 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016155:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001615a:	6a 01                	push   0x1
c001615c:	6a 00                	push   0x0
c001615e:	68 24 5e 01 c0       	push   0xc0015e24
c0016163:	50                   	push   eax
c0016164:	e8 a7 7e 00 00       	call   c001e010 <Process::createThread(void (*)(void*), void*, int)>
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	c6 05 40 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed40,0x1
c0016173:	eb 33                	jmp    c00161a8 <sendKeyboardToken(KeyboardToken)+0x260>
c0016175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016178:	66 3d 01 02          	cmp    ax,0x201
c001617c:	75 2a                	jne    c00161a8 <sendKeyboardToken(KeyboardToken)+0x260>
c001617e:	a0 40 ed 02 c0       	mov    al,ds:0xc002ed40
c0016183:	83 f0 01             	xor    eax,0x1
c0016186:	84 c0                	test   al,al
c0016188:	74 1e                	je     c00161a8 <sendKeyboardToken(KeyboardToken)+0x260>
c001618a:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001618f:	6a 01                	push   0x1
c0016191:	6a 00                	push   0x0
c0016193:	68 80 5e 01 c0       	push   0xc0015e80
c0016198:	50                   	push   eax
c0016199:	e8 72 7e 00 00       	call   c001e010 <Process::createThread(void (*)(void*), void*, int)>
c001619e:	83 c4 10             	add    esp,0x10
c00161a1:	c6 05 40 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed40,0x1
c00161a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ab:	66 3d 1d 03          	cmp    ax,0x31d
c00161af:	75 06                	jne    c00161b7 <sendKeyboardToken(KeyboardToken)+0x26f>
c00161b1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00161b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ba:	66 3d 1c 03          	cmp    ax,0x31c
c00161be:	75 06                	jne    c00161c6 <sendKeyboardToken(KeyboardToken)+0x27e>
c00161c0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c9:	66 3d 1b 03          	cmp    ax,0x31b
c00161cd:	75 06                	jne    c00161d5 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161cf:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d8:	66 3d 1e 03          	cmp    ax,0x31e
c00161dc:	75 06                	jne    c00161e4 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161de:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e7:	66 3d 1f 03          	cmp    ax,0x31f
c00161eb:	75 06                	jne    c00161f3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161ed:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f6:	66 3d 1a 03          	cmp    ax,0x31a
c00161fa:	75 06                	jne    c0016202 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161fc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016202:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016206:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016209:	83 f0 01             	xor    eax,0x1
c001620c:	84 c0                	test   al,al
c001620e:	74 77                	je     c0016287 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016210:	a0 41 ea 02 c0       	mov    al,ds:0xc002ea41
c0016215:	84 c0                	test   al,al
c0016217:	74 41                	je     c001625a <sendKeyboardToken(KeyboardToken)+0x312>
c0016219:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001621d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016221:	74 2b                	je     c001624e <sendKeyboardToken(KeyboardToken)+0x306>
c0016223:	8b 15 44 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed44
c0016229:	89 d0                	mov    eax,edx
c001622b:	c1 e0 02             	shl    eax,0x2
c001622e:	01 d0                	add    eax,edx
c0016230:	01 c0                	add    eax,eax
c0016232:	a3 44 ed 02 c0       	mov    ds:0xc002ed44,eax
c0016237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623a:	0f b7 c0             	movzx  eax,ax
c001623d:	8d 50 d0             	lea    edx,[eax-0x30]
c0016240:	a1 44 ed 02 c0       	mov    eax,ds:0xc002ed44
c0016245:	01 d0                	add    eax,edx
c0016247:	a3 44 ed 02 c0       	mov    ds:0xc002ed44,eax
c001624c:	eb 6d                	jmp    c00162bb <sendKeyboardToken(KeyboardToken)+0x373>
c001624e:	c7 05 44 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed44,0x0
c0016258:	eb 61                	jmp    c00162bb <sendKeyboardToken(KeyboardToken)+0x373>
c001625a:	a1 44 ed 02 c0       	mov    eax,ds:0xc002ed44
c001625f:	85 c0                	test   eax,eax
c0016261:	74 18                	je     c001627b <sendKeyboardToken(KeyboardToken)+0x333>
c0016263:	a1 44 ed 02 c0       	mov    eax,ds:0xc002ed44
c0016268:	0f b6 c0             	movzx  eax,al
c001626b:	83 ec 0c             	sub    esp,0xc
c001626e:	50                   	push   eax
c001626f:	e8 68 fc ff ff       	call   c0015edc <sendKeyToTerminal(unsigned char)>
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001627b:	c7 05 44 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed44,0x0
c0016285:	eb 34                	jmp    c00162bb <sendKeyboardToken(KeyboardToken)+0x373>
c0016287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628a:	66 3d 01 01          	cmp    ax,0x101
c001628e:	75 2b                	jne    c00162bb <sendKeyboardToken(KeyboardToken)+0x373>
c0016290:	a1 44 ed 02 c0       	mov    eax,ds:0xc002ed44
c0016295:	85 c0                	test   eax,eax
c0016297:	74 18                	je     c00162b1 <sendKeyboardToken(KeyboardToken)+0x369>
c0016299:	a1 44 ed 02 c0       	mov    eax,ds:0xc002ed44
c001629e:	0f b6 c0             	movzx  eax,al
c00162a1:	83 ec 0c             	sub    esp,0xc
c00162a4:	50                   	push   eax
c00162a5:	e8 32 fc ff ff       	call   c0015edc <sendKeyToTerminal(unsigned char)>
c00162aa:	83 c4 10             	add    esp,0x10
c00162ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00162b1:	c7 05 44 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed44,0x0
c00162bb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162be:	83 f0 01             	xor    eax,0x1
c00162c1:	84 c0                	test   al,al
c00162c3:	74 4c                	je     c0016311 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162c5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162c8:	83 f0 01             	xor    eax,0x1
c00162cb:	84 c0                	test   al,al
c00162cd:	74 42                	je     c0016311 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162cf:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c00162d4:	83 f0 01             	xor    eax,0x1
c00162d7:	84 c0                	test   al,al
c00162d9:	74 36                	je     c0016311 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162de:	66 83 f8 1f          	cmp    ax,0x1f
c00162e2:	76 09                	jbe    c00162ed <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e7:	66 83 f8 7e          	cmp    ax,0x7e
c00162eb:	76 12                	jbe    c00162ff <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f0:	66 83 f8 0a          	cmp    ax,0xa
c00162f4:	74 09                	je     c00162ff <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f9:	66 83 f8 08          	cmp    ax,0x8
c00162fd:	75 12                	jne    c0016311 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016302:	0f b6 c0             	movzx  eax,al
c0016305:	83 ec 0c             	sub    esp,0xc
c0016308:	50                   	push   eax
c0016309:	e8 ce fb ff ff       	call   c0015edc <sendKeyToTerminal(unsigned char)>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016314:	83 f0 01             	xor    eax,0x1
c0016317:	84 c0                	test   al,al
c0016319:	74 4f                	je     c001636a <sendKeyboardToken(KeyboardToken)+0x422>
c001631b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001631e:	83 f0 01             	xor    eax,0x1
c0016321:	84 c0                	test   al,al
c0016323:	74 45                	je     c001636a <sendKeyboardToken(KeyboardToken)+0x422>
c0016325:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c001632a:	84 c0                	test   al,al
c001632c:	74 3c                	je     c001636a <sendKeyboardToken(KeyboardToken)+0x422>
c001632e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016331:	66 83 f8 3f          	cmp    ax,0x3f
c0016335:	76 33                	jbe    c001636a <sendKeyboardToken(KeyboardToken)+0x422>
c0016337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633a:	66 83 f8 7f          	cmp    ax,0x7f
c001633e:	77 2a                	ja     c001636a <sendKeyboardToken(KeyboardToken)+0x422>
c0016340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016343:	88 c2                	mov    dl,al
c0016345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016348:	66 83 f8 5f          	cmp    ax,0x5f
c001634c:	76 04                	jbe    c0016352 <sendKeyboardToken(KeyboardToken)+0x40a>
c001634e:	b0 20                	mov    al,0x20
c0016350:	eb 02                	jmp    c0016354 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016352:	b0 00                	mov    al,0x0
c0016354:	29 c2                	sub    edx,eax
c0016356:	88 d0                	mov    al,dl
c0016358:	83 e8 40             	sub    eax,0x40
c001635b:	0f b6 c0             	movzx  eax,al
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	50                   	push   eax
c0016362:	e8 75 fb ff ff       	call   c0015edc <sendKeyToTerminal(unsigned char)>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001636d:	66 3d 00 03          	cmp    ax,0x300
c0016371:	75 0f                	jne    c0016382 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016373:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016376:	83 f0 01             	xor    eax,0x1
c0016379:	84 c0                	test   al,al
c001637b:	74 05                	je     c0016382 <sendKeyboardToken(KeyboardToken)+0x43a>
c001637d:	e8 29 ab ff ff       	call   c0010eab <doTerminalCycle()>
c0016382:	90                   	nop
c0016383:	c9                   	leave  
c0016384:	c3                   	ret    

c0016385 <clearInternalKeybuffer(VgaText*)>:
c0016385:	55                   	push   ebp
c0016386:	89 e5                	mov    ebp,esp
c0016388:	83 ec 08             	sub    esp,0x8
c001638b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001638e:	05 34 11 00 00       	add    eax,0x1134
c0016393:	83 ec 0c             	sub    esp,0xc
c0016396:	50                   	push   eax
c0016397:	e8 f8 a3 fe ff       	call   c0000794 <strlen>
c001639c:	83 c4 10             	add    esp,0x10
c001639f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163a2:	81 c2 34 11 00 00    	add    edx,0x1134
c00163a8:	83 ec 04             	sub    esp,0x4
c00163ab:	50                   	push   eax
c00163ac:	6a 00                	push   0x0
c00163ae:	52                   	push   edx
c00163af:	e8 c4 a3 fe ff       	call   c0000778 <memset>
c00163b4:	83 c4 10             	add    esp,0x10
c00163b7:	90                   	nop
c00163b8:	c9                   	leave  
c00163b9:	c3                   	ret    

c00163ba <readKeyboard(VgaText*, char*, unsigned long)>:
c00163ba:	55                   	push   ebp
c00163bb:	89 e5                	mov    ebp,esp
c00163bd:	83 ec 18             	sub    esp,0x18
c00163c0:	fb                   	sti    
c00163c1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163c8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163cc:	0f 84 8a 00 00 00    	je     c001645c <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00163d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163d5:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163db:	84 c0                	test   al,al
c00163dd:	75 11                	jne    c00163f0 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00163df:	e8 fa 7a 00 00       	call   c001dede <lockScheduler()>
c00163e4:	e8 31 7e 00 00       	call   c001e21a <schedule()>
c00163e9:	e8 f2 7a 00 00       	call   c001dee0 <unlockScheduler()>
c00163ee:	eb e2                	jmp    c00163d2 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163f3:	8d 50 01             	lea    edx,[eax+0x1]
c00163f6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163fc:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016402:	88 10                	mov    BYTE PTR [eax],dl
c0016404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016407:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001640d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016413:	05 34 11 00 00       	add    eax,0x1134
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	50                   	push   eax
c001641c:	e8 73 a3 fe ff       	call   c0000794 <strlen>
c0016421:	83 c4 10             	add    esp,0x10
c0016424:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016427:	81 c2 34 11 00 00    	add    edx,0x1134
c001642d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016430:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016433:	81 c2 34 11 00 00    	add    edx,0x1134
c0016439:	83 ec 04             	sub    esp,0x4
c001643c:	50                   	push   eax
c001643d:	51                   	push   ecx
c001643e:	52                   	push   edx
c001643f:	e8 38 a2 fe ff       	call   c000067c <memmove>
c0016444:	83 c4 10             	add    esp,0x10
c0016447:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001644a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001644d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016451:	0f 85 71 ff ff ff    	jne    c00163c8 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001645a:	eb 03                	jmp    c001645f <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001645c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001645f:	c9                   	leave  
c0016460:	c3                   	ret    
c0016461:	90                   	nop

c0016462 <Keyboard::Keyboard(char const*)>:
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016469:	83 ec 08             	sub    esp,0x8
c001646c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016470:	50                   	push   eax
c0016471:	e8 a8 e1 ff ff       	call   c001461e <Device::Device(char const*)>
c0016476:	83 c4 10             	add    esp,0x10
c0016479:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c001647e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016482:	89 10                	mov    DWORD PTR [eax],edx
c0016484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016488:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016492:	c6 05 24 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e924,0x1
c0016499:	90                   	nop
c001649a:	83 c4 0c             	add    esp,0xc
c001649d:	c3                   	ret    

c001649e <Keyboard::~Keyboard()>:
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c00164a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164aa:	89 10                	mov    DWORD PTR [eax],edx
c00164ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	50                   	push   eax
c00164b4:	e8 47 de ff ff       	call   c0014300 <Device::~Device()>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	90                   	nop
c00164bd:	83 c4 0c             	add    esp,0xc
c00164c0:	c3                   	ret    
c00164c1:	90                   	nop

c00164c2 <Keyboard::~Keyboard()>:
c00164c2:	83 ec 0c             	sub    esp,0xc
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164cc:	e8 cd ff ff ff       	call   c001649e <Keyboard::~Keyboard()>
c00164d1:	83 c4 10             	add    esp,0x10
c00164d4:	83 ec 08             	sub    esp,0x8
c00164d7:	68 5c 01 00 00       	push   0x15c
c00164dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e0:	e8 42 ca ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	83 c4 0c             	add    esp,0xc
c00164eb:	c3                   	ret    

c00164ec <LogicalDisk::close(int, int, void*)>:
c00164ec:	83 c8 ff             	or     eax,0xffffffff
c00164ef:	c3                   	ret    

c00164f0 <LogicalDisk::~LogicalDisk()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c00164f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fc:	89 10                	mov    DWORD PTR [eax],edx
c00164fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016502:	83 ec 0c             	sub    esp,0xc
c0016505:	50                   	push   eax
c0016506:	e8 f5 dd ff ff       	call   c0014300 <Device::~Device()>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	90                   	nop
c001650f:	83 c4 0c             	add    esp,0xc
c0016512:	c3                   	ret    
c0016513:	90                   	nop

c0016514 <LogicalDisk::~LogicalDisk()>:
c0016514:	83 ec 0c             	sub    esp,0xc
c0016517:	83 ec 0c             	sub    esp,0xc
c001651a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651e:	e8 cd ff ff ff       	call   c00164f0 <LogicalDisk::~LogicalDisk()>
c0016523:	83 c4 10             	add    esp,0x10
c0016526:	83 ec 08             	sub    esp,0x8
c0016529:	68 74 01 00 00       	push   0x174
c001652e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016532:	e8 f0 c9 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	83 c4 0c             	add    esp,0xc
c001653d:	c3                   	ret    

c001653e <LogicalDisk::open(int, int, void*)>:
c001653e:	83 ec 18             	sub    esp,0x18
c0016541:	68 a0 b4 02 c0       	push   0xc002b4a0
c0016546:	e8 6e 41 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c001654b:	83 c8 ff             	or     eax,0xffffffff
c001654e:	83 c4 1c             	add    esp,0x1c
c0016551:	c3                   	ret    

c0016552 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016552:	53                   	push   ebx
c0016553:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001655b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016565:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001656b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016571:	77 10                	ja     c0016583 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016573:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016579:	89 d3                	mov    ebx,edx
c001657b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016581:	72 05                	jb     c0016588 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016583:	83 c8 ff             	or     eax,0xffffffff
c0016586:	89 c2                	mov    edx,eax
c0016588:	5b                   	pop    ebx
c0016589:	c3                   	ret    

c001658a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001658a:	56                   	push   esi
c001658b:	83 c8 ff             	or     eax,0xffffffff
c001658e:	53                   	push   ebx
c001658f:	89 c2                	mov    edx,eax
c0016591:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016599:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001659d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165a3:	77 27                	ja     c00165cc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165a5:	89 d8                	mov    eax,ebx
c00165a7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165ad:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165b8:	89 c2                	mov    edx,eax
c00165ba:	73 10                	jae    c00165cc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165bc:	89 c8                	mov    eax,ecx
c00165be:	89 da                	mov    edx,ebx
c00165c0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165c6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165cc:	5b                   	pop    ebx
c00165cd:	5e                   	pop    esi
c00165ce:	c3                   	ret    
c00165cf:	90                   	nop

c00165d0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165d0:	83 ec 1c             	sub    esp,0x1c
c00165d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00165ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f6:	83 ec 08             	sub    esp,0x8
c00165f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165fd:	50                   	push   eax
c00165fe:	e8 1b e0 ff ff       	call   c001461e <Device::Device(char const*)>
c0016603:	83 c4 10             	add    esp,0x10
c0016606:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c001660b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660f:	89 10                	mov    DWORD PTR [eax],edx
c0016611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016615:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001661c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016620:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016635:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001663d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016641:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016647:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001664d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016651:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016654:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016658:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001665e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016668:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001666c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016676:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016680:	90                   	nop
c0016681:	83 c4 1c             	add    esp,0x1c
c0016684:	c3                   	ret    
c0016685:	90                   	nop

c0016686 <LogicalDisk::assignDriveLetter()>:
c0016686:	55                   	push   ebp
c0016687:	57                   	push   edi
c0016688:	56                   	push   esi
c0016689:	53                   	push   ebx
c001668a:	83 ec 14             	sub    esp,0x14
c001668d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016691:	8b 3d 60 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed60
c0016697:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001669d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166a1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166a7:	8b 3d 64 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed64
c00166ad:	3c 01                	cmp    al,0x1
c00166af:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166b7:	19 c0                	sbb    eax,eax
c00166b9:	83 e0 02             	and    eax,0x2
c00166bc:	83 c0 41             	add    eax,0x41
c00166bf:	0f be e8             	movsx  ebp,al
c00166c2:	3c 43                	cmp    al,0x43
c00166c4:	75 10                	jne    c00166d6 <LogicalDisk::assignDriveLetter()+0x50>
c00166c6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166cd:	75 5d                	jne    c001672c <LogicalDisk::assignDriveLetter()+0xa6>
c00166cf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166d4:	75 56                	jne    c001672c <LogicalDisk::assignDriveLetter()+0xa6>
c00166d6:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166d9:	ba 01 00 00 00       	mov    edx,0x1
c00166de:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166e2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166e6:	d3 e2                	shl    edx,cl
c00166e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166ec:	89 d7                	mov    edi,edx
c00166ee:	89 d6                	mov    esi,edx
c00166f0:	c1 ff 1f             	sar    edi,0x1f
c00166f3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166f7:	21 f9                	and    ecx,edi
c00166f9:	09 d1                	or     ecx,edx
c00166fb:	75 2f                	jne    c001672c <LogicalDisk::assignDriveLetter()+0xa6>
c00166fd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016701:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016705:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001670b:	09 f2                	or     edx,esi
c001670d:	89 15 60 ed 02 c0    	mov    DWORD PTR ds:0xc002ed60,edx
c0016713:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016717:	09 fa                	or     edx,edi
c0016719:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001671d:	89 15 64 ed 02 c0    	mov    DWORD PTR ds:0xc002ed64,edx
c0016723:	89 1c bd 80 ed 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1280],ebx
c001672a:	eb 08                	jmp    c0016734 <LogicalDisk::assignDriveLetter()+0xae>
c001672c:	45                   	inc    ebp
c001672d:	40                   	inc    eax
c001672e:	3c 5b                	cmp    al,0x5b
c0016730:	75 90                	jne    c00166c2 <LogicalDisk::assignDriveLetter()+0x3c>
c0016732:	31 c0                	xor    eax,eax
c0016734:	83 c4 14             	add    esp,0x14
c0016737:	5b                   	pop    ebx
c0016738:	5e                   	pop    esi
c0016739:	5f                   	pop    edi
c001673a:	5d                   	pop    ebp
c001673b:	c3                   	ret    

c001673c <LogicalDisk::mount()>:
c001673c:	56                   	push   esi
c001673d:	53                   	push   ebx
c001673e:	51                   	push   ecx
c001673f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016743:	8b 1d ec e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e8ec
c0016749:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016753:	85 db                	test   ebx,ebx
c0016755:	74 50                	je     c00167a7 <LogicalDisk::mount()+0x6b>
c0016757:	e8 6d 77 00 00       	call   c001dec9 <getIRQNestingLevel()>
c001675c:	52                   	push   edx
c001675d:	52                   	push   edx
c001675e:	50                   	push   eax
c001675f:	68 c4 b4 02 c0       	push   0xc002b4c4
c0016764:	e8 9e c8 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0016769:	83 c4 0c             	add    esp,0xc
c001676c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016773:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016775:	83 e8 41             	sub    eax,0x41
c0016778:	50                   	push   eax
c0016779:	56                   	push   esi
c001677a:	53                   	push   ebx
c001677b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	84 c0                	test   al,al
c0016783:	74 08                	je     c001678d <LogicalDisk::mount()+0x51>
c0016785:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001678b:	eb 1c                	jmp    c00167a9 <LogicalDisk::mount()+0x6d>
c001678d:	e8 37 77 00 00       	call   c001dec9 <getIRQNestingLevel()>
c0016792:	51                   	push   ecx
c0016793:	51                   	push   ecx
c0016794:	50                   	push   eax
c0016795:	68 df b4 02 c0       	push   0xc002b4df
c001679a:	e8 68 c8 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001679f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167a2:	83 c4 10             	add    esp,0x10
c00167a5:	eb ac                	jmp    c0016753 <LogicalDisk::mount()+0x17>
c00167a7:	31 c0                	xor    eax,eax
c00167a9:	5a                   	pop    edx
c00167aa:	5b                   	pop    ebx
c00167ab:	5e                   	pop    esi
c00167ac:	c3                   	ret    
c00167ad:	90                   	nop

c00167ae <LogicalDisk::unmount()>:
c00167ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167b2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167bc:	c3                   	ret    
c00167bd:	90                   	nop

c00167be <LogicalDisk::eject()>:
c00167be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00167ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167ce:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167d1:	90                   	nop

c00167d2 <LogicalDisk::unassignDriveLetter()>:
c00167d2:	57                   	push   edi
c00167d3:	56                   	push   esi
c00167d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167d8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167df:	84 c9                	test   cl,cl
c00167e1:	75 0f                	jne    c00167f2 <LogicalDisk::unassignDriveLetter()+0x20>
c00167e3:	c7 44 24 0c fa b4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b4fa
c00167eb:	5e                   	pop    esi
c00167ec:	5f                   	pop    edi
c00167ed:	e9 c7 3e 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>
c00167f2:	83 e9 41             	sub    ecx,0x41
c00167f5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167fc:	b8 01 00 00 00       	mov    eax,0x1
c0016801:	c7 04 8d 80 ed 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1280],0x0
c001680c:	d3 e0                	shl    eax,cl
c001680e:	89 c7                	mov    edi,eax
c0016810:	f7 d0                	not    eax
c0016812:	c1 ff 1f             	sar    edi,0x1f
c0016815:	21 05 60 ed 02 c0    	and    DWORD PTR ds:0xc002ed60,eax
c001681b:	89 fe                	mov    esi,edi
c001681d:	f7 d6                	not    esi
c001681f:	21 35 64 ed 02 c0    	and    DWORD PTR ds:0xc002ed64,esi
c0016825:	5e                   	pop    esi
c0016826:	5f                   	pop    edi
c0016827:	c3                   	ret    

c0016828 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016828:	57                   	push   edi
c0016829:	56                   	push   esi
c001682a:	53                   	push   ebx
c001682b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001682f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016833:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001683b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016841:	77 41                	ja     c0016884 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016843:	99                   	cdq    
c0016844:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001684a:	01 c8                	add    eax,ecx
c001684c:	11 da                	adc    edx,ebx
c001684e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016854:	19 d7                	sbb    edi,edx
c0016856:	72 33                	jb     c001688b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016858:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001685e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016864:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016868:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001686c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016872:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016878:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001687c:	5b                   	pop    ebx
c001687d:	5e                   	pop    esi
c001687e:	5f                   	pop    edi
c001687f:	e9 b0 0a 00 00       	jmp    c0017334 <VCache::read(unsigned long long, int, void*)>
c0016884:	b8 05 00 00 00       	mov    eax,0x5
c0016889:	eb 05                	jmp    c0016890 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001688b:	b8 07 00 00 00       	mov    eax,0x7
c0016890:	5b                   	pop    ebx
c0016891:	5e                   	pop    esi
c0016892:	5f                   	pop    edi
c0016893:	c3                   	ret    

c0016894 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016894:	57                   	push   edi
c0016895:	56                   	push   esi
c0016896:	53                   	push   ebx
c0016897:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001689b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001689f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168a7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168ad:	77 41                	ja     c00168f0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168af:	99                   	cdq    
c00168b0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168b6:	01 c8                	add    eax,ecx
c00168b8:	11 da                	adc    edx,ebx
c00168ba:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168c0:	19 d7                	sbb    edi,edx
c00168c2:	72 33                	jb     c00168f7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168c4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168ca:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168d4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168d8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168e8:	5b                   	pop    ebx
c00168e9:	5e                   	pop    esi
c00168ea:	5f                   	pop    edi
c00168eb:	e9 4e 09 00 00       	jmp    c001723e <VCache::write(unsigned long long, int, void*)>
c00168f0:	b8 05 00 00 00       	mov    eax,0x5
c00168f5:	eb 05                	jmp    c00168fc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168f7:	b8 07 00 00 00       	mov    eax,0x7
c00168fc:	5b                   	pop    ebx
c00168fd:	5e                   	pop    esi
c00168fe:	5f                   	pop    edi
c00168ff:	c3                   	ret    

c0016900 <Mouse::Mouse(char const*)>:
c0016900:	83 ec 0c             	sub    esp,0xc
c0016903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016907:	83 ec 08             	sub    esp,0x8
c001690a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001690e:	50                   	push   eax
c001690f:	e8 0a dd ff ff       	call   c001461e <Device::Device(char const*)>
c0016914:	83 c4 10             	add    esp,0x10
c0016917:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c001691c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016920:	89 10                	mov    DWORD PTR [eax],edx
c0016922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016926:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016930:	90                   	nop
c0016931:	83 c4 0c             	add    esp,0xc
c0016934:	c3                   	ret    
c0016935:	90                   	nop

c0016936 <Mouse::~Mouse()>:
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c001693e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016942:	89 10                	mov    DWORD PTR [eax],edx
c0016944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	50                   	push   eax
c001694c:	e8 af d9 ff ff       	call   c0014300 <Device::~Device()>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	90                   	nop
c0016955:	83 c4 0c             	add    esp,0xc
c0016958:	c3                   	ret    
c0016959:	90                   	nop

c001695a <Mouse::~Mouse()>:
c001695a:	83 ec 0c             	sub    esp,0xc
c001695d:	83 ec 0c             	sub    esp,0xc
c0016960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016964:	e8 cd ff ff ff       	call   c0016936 <Mouse::~Mouse()>
c0016969:	83 c4 10             	add    esp,0x10
c001696c:	83 ec 08             	sub    esp,0x8
c001696f:	68 58 01 00 00       	push   0x158
c0016974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016978:	e8 aa c5 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	83 c4 0c             	add    esp,0xc
c0016983:	c3                   	ret    

c0016984 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016984:	55                   	push   ebp
c0016985:	57                   	push   edi
c0016986:	56                   	push   esi
c0016987:	53                   	push   ebx
c0016988:	81 ec 28 01 00 00    	sub    esp,0x128
c001698e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016995:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001699c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169a3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00169b2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169b9:	e8 5c dd ff ff       	call   c001471a <Device::getName()>
c00169be:	5a                   	pop    edx
c00169bf:	59                   	pop    ecx
c00169c0:	50                   	push   eax
c00169c1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00169c5:	55                   	push   ebp
c00169c6:	e8 69 9e fe ff       	call   c0000834 <strcpy>
c00169cb:	5b                   	pop    ebx
c00169cc:	58                   	pop    eax
c00169cd:	68 74 b5 02 c0       	push   0xc002b574
c00169d2:	55                   	push   ebp
c00169d3:	e8 9c 9f fe ff       	call   c0000974 <strcat>
c00169d8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169df:	e8 18 8f ff ff       	call   c000f8fc <malloc>
c00169e4:	83 c4 0c             	add    esp,0xc
c00169e7:	89 c3                	mov    ebx,eax
c00169e9:	57                   	push   edi
c00169ea:	56                   	push   esi
c00169eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169f3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169fa:	55                   	push   ebp
c00169fb:	50                   	push   eax
c00169fc:	e8 cf fb ff ff       	call   c00165d0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a01:	83 c4 14             	add    esp,0x14
c0016a04:	53                   	push   ebx
c0016a05:	e8 7c fc ff ff       	call   c0016686 <LogicalDisk::assignDriveLetter()>
c0016a0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a0d:	89 c6                	mov    esi,eax
c0016a0f:	e8 28 fd ff ff       	call   c001673c <LogicalDisk::mount()>
c0016a14:	58                   	pop    eax
c0016a15:	5a                   	pop    edx
c0016a16:	53                   	push   ebx
c0016a17:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a1e:	e8 0b da ff ff       	call   c001442e <Device::addChild(Device*)>
c0016a23:	59                   	pop    ecx
c0016a24:	89 f0                	mov    eax,esi
c0016a26:	5b                   	pop    ebx
c0016a27:	0f be f0             	movsx  esi,al
c0016a2a:	56                   	push   esi
c0016a2b:	68 7f b5 02 c0       	push   0xc002b57f
c0016a30:	e8 d2 c5 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0016a35:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a3b:	5b                   	pop    ebx
c0016a3c:	5e                   	pop    esi
c0016a3d:	5f                   	pop    edi
c0016a3e:	5d                   	pop    ebp
c0016a3f:	c3                   	ret    

c0016a40 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a40:	55                   	push   ebp
c0016a41:	57                   	push   edi
c0016a42:	56                   	push   esi
c0016a43:	53                   	push   ebx
c0016a44:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a4a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a51:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a57:	3d 00 02 00 00       	cmp    eax,0x200
c0016a5c:	74 27                	je     c0016a85 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a5e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a64:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a6a:	83 ec 10             	sub    esp,0x10
c0016a6d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a71:	99                   	cdq    
c0016a72:	c1 e6 0a             	shl    esi,0xa
c0016a75:	52                   	push   edx
c0016a76:	89 fd                	mov    ebp,edi
c0016a78:	50                   	push   eax
c0016a79:	55                   	push   ebp
c0016a7a:	56                   	push   esi
c0016a7b:	e8 3c 00 01 00       	call   c0026abc <__udivdi3>
c0016a80:	e9 b1 00 00 00       	jmp    c0016b36 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a85:	83 ec 0c             	sub    esp,0xc
c0016a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a8a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a8e:	56                   	push   esi
c0016a8f:	6a 01                	push   0x1
c0016a91:	6a 00                	push   0x0
c0016a93:	6a 00                	push   0x0
c0016a95:	53                   	push   ebx
c0016a96:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a99:	83 c4 20             	add    esp,0x20
c0016a9c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016aa4:	75 0a                	jne    c0016ab0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016aa6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016aae:	74 2c                	je     c0016adc <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016ab0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ab6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016abc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ac2:	83 ec 10             	sub    esp,0x10
c0016ac5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ac9:	89 f7                	mov    edi,esi
c0016acb:	c1 e0 0a             	shl    eax,0xa
c0016ace:	c1 ff 1f             	sar    edi,0x1f
c0016ad1:	57                   	push   edi
c0016ad2:	56                   	push   esi
c0016ad3:	52                   	push   edx
c0016ad4:	50                   	push   eax
c0016ad5:	e8 e2 ff 00 00       	call   c0026abc <__udivdi3>
c0016ada:	eb 5a                	jmp    c0016b36 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016adc:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016ae3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016aea:	83 e1 7f             	and    ecx,0x7f
c0016aed:	83 e0 7f             	and    eax,0x7f
c0016af0:	01 c1                	add    ecx,eax
c0016af2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016af9:	83 e0 7f             	and    eax,0x7f
c0016afc:	01 c1                	add    ecx,eax
c0016afe:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b05:	83 e0 7f             	and    eax,0x7f
c0016b08:	00 c1                	add    cl,al
c0016b0a:	74 41                	je     c0016b4d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b0c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b12:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b18:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b1e:	83 ec 10             	sub    esp,0x10
c0016b21:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b25:	89 f7                	mov    edi,esi
c0016b27:	c1 e0 0a             	shl    eax,0xa
c0016b2a:	c1 ff 1f             	sar    edi,0x1f
c0016b2d:	57                   	push   edi
c0016b2e:	56                   	push   esi
c0016b2f:	52                   	push   edx
c0016b30:	50                   	push   eax
c0016b31:	e8 86 ff 00 00       	call   c0026abc <__udivdi3>
c0016b36:	83 c4 14             	add    esp,0x14
c0016b39:	52                   	push   edx
c0016b3a:	50                   	push   eax
c0016b3b:	6a 00                	push   0x0
c0016b3d:	6a 00                	push   0x0
c0016b3f:	53                   	push   ebx
c0016b40:	e8 3f fe ff ff       	call   c0016984 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b45:	83 c4 20             	add    esp,0x20
c0016b48:	e9 79 01 00 00       	jmp    c0016cc6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b4d:	89 f0                	mov    eax,esi
c0016b4f:	31 f6                	xor    esi,esi
c0016b51:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b58:	75 02                	jne    c0016b5c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b5a:	89 f1                	mov    ecx,esi
c0016b5c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b63:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b6a:	c1 e2 08             	shl    edx,0x8
c0016b6d:	c1 e7 10             	shl    edi,0x10
c0016b70:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b78:	09 fa                	or     edx,edi
c0016b7a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b82:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b89:	83 c0 10             	add    eax,0x10
c0016b8c:	09 fa                	or     edx,edi
c0016b8e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b95:	c1 e7 18             	shl    edi,0x18
c0016b98:	09 fa                	or     edx,edi
c0016b9a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ba1:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016ba5:	c1 e7 10             	shl    edi,0x10
c0016ba8:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016baf:	c1 e2 08             	shl    edx,0x8
c0016bb2:	09 fa                	or     edx,edi
c0016bb4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016bbb:	09 fa                	or     edx,edi
c0016bbd:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bc4:	c1 e7 18             	shl    edi,0x18
c0016bc7:	09 fa                	or     edx,edi
c0016bc9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bcd:	46                   	inc    esi
c0016bce:	83 fe 04             	cmp    esi,0x4
c0016bd1:	0f 85 7a ff ff ff    	jne    c0016b51 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bdb:	83 f0 01             	xor    eax,0x1
c0016bde:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016be2:	75 57                	jne    c0016c3b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016be8:	83 f0 01             	xor    eax,0x1
c0016beb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bef:	75 4a                	jne    c0016c3b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bf1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bf5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bfd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c05:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c0b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c11:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c17:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c1b:	89 f7                	mov    edi,esi
c0016c1d:	c1 e0 0a             	shl    eax,0xa
c0016c20:	c1 ff 1f             	sar    edi,0x1f
c0016c23:	57                   	push   edi
c0016c24:	56                   	push   esi
c0016c25:	52                   	push   edx
c0016c26:	50                   	push   eax
c0016c27:	e8 90 fe 00 00       	call   c0026abc <__udivdi3>
c0016c2c:	83 c4 10             	add    esp,0x10
c0016c2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c37:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c3b:	84 c9                	test   cl,cl
c0016c3d:	74 53                	je     c0016c92 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c3f:	0f b6 c9             	movzx  ecx,cl
c0016c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c4a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c4e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c5a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c5e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c72:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c76:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c7a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c7e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c86:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c8a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c8e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c92:	31 ed                	xor    ebp,ebp
c0016c94:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c98:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c9c:	89 f8                	mov    eax,edi
c0016c9e:	09 f0                	or     eax,esi
c0016ca0:	74 1e                	je     c0016cc0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016ca2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016ca6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016caa:	89 d1                	mov    ecx,edx
c0016cac:	09 c1                	or     ecx,eax
c0016cae:	74 10                	je     c0016cc0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	57                   	push   edi
c0016cb4:	56                   	push   esi
c0016cb5:	52                   	push   edx
c0016cb6:	50                   	push   eax
c0016cb7:	53                   	push   ebx
c0016cb8:	e8 c7 fc ff ff       	call   c0016984 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016cbd:	83 c4 20             	add    esp,0x20
c0016cc0:	45                   	inc    ebp
c0016cc1:	83 fd 04             	cmp    ebp,0x4
c0016cc4:	75 ce                	jne    c0016c94 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016ccc:	5b                   	pop    ebx
c0016ccd:	5e                   	pop    esi
c0016cce:	5f                   	pop    edi
c0016ccf:	5d                   	pop    ebp
c0016cd0:	c3                   	ret    
c0016cd1:	90                   	nop

c0016cd2 <Serial::Serial(char const*)>:
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd9:	83 ec 08             	sub    esp,0x8
c0016cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce0:	50                   	push   eax
c0016ce1:	e8 38 d9 ff ff       	call   c001461e <Device::Device(char const*)>
c0016ce6:	83 c4 10             	add    esp,0x10
c0016ce9:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c0016cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf2:	89 10                	mov    DWORD PTR [eax],edx
c0016cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d02:	90                   	nop
c0016d03:	83 c4 0c             	add    esp,0xc
c0016d06:	c3                   	ret    
c0016d07:	90                   	nop

c0016d08 <Serial::~Serial()>:
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c0016d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d14:	89 10                	mov    DWORD PTR [eax],edx
c0016d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	50                   	push   eax
c0016d1e:	e8 dd d5 ff ff       	call   c0014300 <Device::~Device()>
c0016d23:	83 c4 10             	add    esp,0x10
c0016d26:	90                   	nop
c0016d27:	83 c4 0c             	add    esp,0xc
c0016d2a:	c3                   	ret    
c0016d2b:	90                   	nop

c0016d2c <Serial::~Serial()>:
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	83 ec 0c             	sub    esp,0xc
c0016d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d36:	e8 cd ff ff ff       	call   c0016d08 <Serial::~Serial()>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	83 ec 08             	sub    esp,0x8
c0016d41:	68 58 01 00 00       	push   0x158
c0016d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4a:	e8 d8 c1 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0016d4f:	83 c4 10             	add    esp,0x10
c0016d52:	83 c4 0c             	add    esp,0xc
c0016d55:	c3                   	ret    

c0016d56 <Timer::Timer(char const*)>:
c0016d56:	83 ec 0c             	sub    esp,0xc
c0016d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5d:	83 ec 08             	sub    esp,0x8
c0016d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d64:	50                   	push   eax
c0016d65:	e8 b4 d8 ff ff       	call   c001461e <Device::Device(char const*)>
c0016d6a:	83 c4 10             	add    esp,0x10
c0016d6d:	ba f0 b5 02 c0       	mov    edx,0xc002b5f0
c0016d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d76:	89 10                	mov    DWORD PTR [eax],edx
c0016d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d86:	90                   	nop
c0016d87:	83 c4 0c             	add    esp,0xc
c0016d8a:	c3                   	ret    
c0016d8b:	90                   	nop

c0016d8c <Timer::~Timer()>:
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	ba f0 b5 02 c0       	mov    edx,0xc002b5f0
c0016d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d98:	89 10                	mov    DWORD PTR [eax],edx
c0016d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d9e:	83 ec 0c             	sub    esp,0xc
c0016da1:	50                   	push   eax
c0016da2:	e8 59 d5 ff ff       	call   c0014300 <Device::~Device()>
c0016da7:	83 c4 10             	add    esp,0x10
c0016daa:	90                   	nop
c0016dab:	83 c4 0c             	add    esp,0xc
c0016dae:	c3                   	ret    
c0016daf:	90                   	nop

c0016db0 <Timer::~Timer()>:
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	83 ec 0c             	sub    esp,0xc
c0016db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dba:	e8 cd ff ff ff       	call   c0016d8c <Timer::~Timer()>
c0016dbf:	83 c4 10             	add    esp,0x10
c0016dc2:	83 ec 08             	sub    esp,0x8
c0016dc5:	68 5c 01 00 00       	push   0x15c
c0016dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dce:	e8 54 c1 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	83 c4 0c             	add    esp,0xc
c0016dd9:	c3                   	ret    

c0016dda <Timer::read()>:
c0016dda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dde:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016de4:	c3                   	ret    

c0016de5 <timerHandler(unsigned long long)>:
c0016de5:	55                   	push   ebp
c0016de6:	57                   	push   edi
c0016de7:	56                   	push   esi
c0016de8:	53                   	push   ebx
c0016de9:	83 ec 0c             	sub    esp,0xc
c0016dec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016df0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016df4:	01 35 f0 ed 02 c0    	add    DWORD PTR ds:0xc002edf0,esi
c0016dfa:	11 3d f4 ed 02 c0    	adc    DWORD PTR ds:0xc002edf4,edi
c0016e00:	80 3d 6d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e76d,0x0
c0016e07:	0f 84 07 01 00 00    	je     c0016f14 <timerHandler(unsigned long long)+0x12f>
c0016e0d:	e8 f3 70 00 00       	call   c001df05 <lockStuff()>
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	68 c0 1c 03 c0       	push   0xc0031cc0
c0016e1a:	e8 0f 1d 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e1f:	c7 04 24 c0 1c 03 c0 	mov    DWORD PTR [esp],0xc0031cc0
c0016e26:	89 c3                	mov    ebx,eax
c0016e28:	e8 09 1d 01 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e2d:	83 c4 10             	add    esp,0x10
c0016e30:	84 c0                	test   al,al
c0016e32:	74 60                	je     c0016e94 <timerHandler(unsigned long long)+0xaf>
c0016e34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e3a:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e3d:	85 c0                	test   eax,eax
c0016e3f:	0f 85 91 00 00 00    	jne    c0016ed6 <timerHandler(unsigned long long)+0xf1>
c0016e45:	e9 be 00 00 00       	jmp    c0016f08 <timerHandler(unsigned long long)+0x123>
c0016e4a:	83 ec 0c             	sub    esp,0xc
c0016e4d:	55                   	push   ebp
c0016e4e:	e8 a3 76 00 00       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c0016e53:	83 c4 10             	add    esp,0x10
c0016e56:	39 eb                	cmp    ebx,ebp
c0016e58:	75 12                	jne    c0016e6c <timerHandler(unsigned long long)+0x87>
c0016e5a:	83 ec 0c             	sub    esp,0xc
c0016e5d:	68 c0 1c 03 c0       	push   0xc0031cc0
c0016e62:	e8 c7 1c 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e67:	89 c3                	mov    ebx,eax
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	83 ec 0c             	sub    esp,0xc
c0016e6f:	68 c0 1c 03 c0       	push   0xc0031cc0
c0016e74:	e8 bd 1c 01 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e79:	83 c4 10             	add    esp,0x10
c0016e7c:	84 c0                	test   al,al
c0016e7e:	75 b4                	jne    c0016e34 <timerHandler(unsigned long long)+0x4f>
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	68 c0 1c 03 c0       	push   0xc0031cc0
c0016e88:	e8 a1 1c 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e8d:	83 c4 10             	add    esp,0x10
c0016e90:	39 d8                	cmp    eax,ebx
c0016e92:	74 a0                	je     c0016e34 <timerHandler(unsigned long long)+0x4f>
c0016e94:	83 ec 0c             	sub    esp,0xc
c0016e97:	68 c0 1c 03 c0       	push   0xc0031cc0
c0016e9c:	e8 8d 1c 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ea1:	c7 04 24 c0 1c 03 c0 	mov    DWORD PTR [esp],0xc0031cc0
c0016ea8:	89 c5                	mov    ebp,eax
c0016eaa:	e8 a3 1c 01 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016eaf:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016eb2:	83 c4 10             	add    esp,0x10
c0016eb5:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016eb8:	39 15 f0 ed 02 c0    	cmp    DWORD PTR ds:0xc002edf0,edx
c0016ebe:	a1 f4 ed 02 c0       	mov    eax,ds:0xc002edf4
c0016ec3:	19 c8                	sbb    eax,ecx
c0016ec5:	73 83                	jae    c0016e4a <timerHandler(unsigned long long)+0x65>
c0016ec7:	50                   	push   eax
c0016ec8:	50                   	push   eax
c0016ec9:	55                   	push   ebp
c0016eca:	68 c0 1c 03 c0       	push   0xc0031cc0
c0016ecf:	e8 2c 1d 01 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ed4:	eb 93                	jmp    c0016e69 <timerHandler(unsigned long long)+0x84>
c0016ed6:	80 3d 6c e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e76c,0x0
c0016edd:	74 29                	je     c0016f08 <timerHandler(unsigned long long)+0x123>
c0016edf:	39 c6                	cmp    esi,eax
c0016ee1:	bb 00 00 00 00       	mov    ebx,0x0
c0016ee6:	19 df                	sbb    edi,ebx
c0016ee8:	72 19                	jb     c0016f03 <timerHandler(unsigned long long)+0x11e>
c0016eea:	e8 ef 6f 00 00       	call   c001dede <lockScheduler()>
c0016eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ef7:	e8 1e 73 00 00       	call   c001e21a <schedule()>
c0016efc:	e8 df 6f 00 00       	call   c001dee0 <unlockScheduler()>
c0016f01:	eb 05                	jmp    c0016f08 <timerHandler(unsigned long long)+0x123>
c0016f03:	29 f0                	sub    eax,esi
c0016f05:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016f08:	83 c4 0c             	add    esp,0xc
c0016f0b:	5b                   	pop    ebx
c0016f0c:	5e                   	pop    esi
c0016f0d:	5f                   	pop    edi
c0016f0e:	5d                   	pop    ebp
c0016f0f:	e9 8b 73 00 00       	jmp    c001e29f <unlockStuff()>
c0016f14:	83 c4 0c             	add    esp,0xc
c0016f17:	5b                   	pop    ebx
c0016f18:	5e                   	pop    esi
c0016f19:	5f                   	pop    edi
c0016f1a:	5d                   	pop    ebp
c0016f1b:	c3                   	ret    

c0016f1c <setupTimer(int)>:
c0016f1c:	57                   	push   edi
c0016f1d:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0016f22:	56                   	push   esi
c0016f23:	53                   	push   ebx
c0016f24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f2e:	83 ec 0c             	sub    esp,0xc
c0016f31:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f37:	e8 de d7 ff ff       	call   c001471a <Device::getName()>
c0016f3c:	83 c4 10             	add    esp,0x10
c0016f3f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f42:	0f 85 8d 00 00 00    	jne    c0016fd5 <setupTimer(int)+0xb9>
c0016f48:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0016f4d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f54:	74 7f                	je     c0016fd5 <setupTimer(int)+0xb9>
c0016f56:	83 ec 0c             	sub    esp,0xc
c0016f59:	68 5c 01 00 00       	push   0x15c
c0016f5e:	e8 99 89 ff ff       	call   c000f8fc <malloc>
c0016f63:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f66:	89 c3                	mov    ebx,eax
c0016f68:	e8 2b f7 00 00       	call   c0026698 <PIT::PIT()>
c0016f6d:	59                   	pop    ecx
c0016f6e:	5f                   	pop    edi
c0016f6f:	53                   	push   ebx
c0016f70:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c0016f76:	e8 b3 d4 ff ff       	call   c001442e <Device::addChild(Device*)>
c0016f7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f7d:	6a 00                	push   0x0
c0016f7f:	6a 00                	push   0x0
c0016f81:	56                   	push   esi
c0016f82:	53                   	push   ebx
c0016f83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f86:	83 c4 14             	add    esp,0x14
c0016f89:	68 60 01 00 00       	push   0x160
c0016f8e:	e8 69 89 ff ff       	call   c000f8fc <malloc>
c0016f93:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f96:	89 c7                	mov    edi,eax
c0016f98:	e8 ab f5 00 00       	call   c0026548 <APICTimer::APICTimer()>
c0016f9d:	6a 00                	push   0x0
c0016f9f:	6a 00                	push   0x0
c0016fa1:	56                   	push   esi
c0016fa2:	57                   	push   edi
c0016fa3:	e8 a2 f4 00 00       	call   c002644a <APICTimer::open(int, int, void*)>
c0016fa8:	83 c4 20             	add    esp,0x20
c0016fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fad:	6a 00                	push   0x0
c0016faf:	6a 00                	push   0x0
c0016fb1:	6a 00                	push   0x0
c0016fb3:	53                   	push   ebx
c0016fb4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fb7:	58                   	pop    eax
c0016fb8:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0016fbd:	5a                   	pop    edx
c0016fbe:	57                   	push   edi
c0016fbf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fc5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fcb:	e8 5e d4 ff ff       	call   c001442e <Device::addChild(Device*)>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	eb 33                	jmp    c0017008 <setupTimer(int)+0xec>
c0016fd5:	83 ec 0c             	sub    esp,0xc
c0016fd8:	68 5c 01 00 00       	push   0x15c
c0016fdd:	e8 1a 89 ff ff       	call   c000f8fc <malloc>
c0016fe2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fe5:	89 c3                	mov    ebx,eax
c0016fe7:	e8 ac f6 00 00       	call   c0026698 <PIT::PIT()>
c0016fec:	58                   	pop    eax
c0016fed:	5a                   	pop    edx
c0016fee:	53                   	push   ebx
c0016fef:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c0016ff5:	e8 34 d4 ff ff       	call   c001442e <Device::addChild(Device*)>
c0016ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ffc:	6a 00                	push   0x0
c0016ffe:	6a 00                	push   0x0
c0017000:	56                   	push   esi
c0017001:	53                   	push   ebx
c0017002:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017005:	83 c4 20             	add    esp,0x20
c0017008:	89 d8                	mov    eax,ebx
c001700a:	5b                   	pop    ebx
c001700b:	5e                   	pop    esi
c001700c:	5f                   	pop    edi
c001700d:	c3                   	ret    

c001700e <VCache::VCache(PhysicalDisk*)>:
c001700e:	53                   	push   ebx
c001700f:	83 ec 18             	sub    esp,0x18
c0017012:	ba 20 b6 02 c0       	mov    edx,0xc002b620
c0017017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701b:	89 10                	mov    DWORD PTR [eax],edx
c001701d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017021:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017037:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001703e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017049:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017050:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017066:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001706a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017075:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001707c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017080:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017088:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001708c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017090:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017098:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001709f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170a7:	83 ec 0c             	sub    esp,0xc
c00170aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170ae:	e8 49 88 ff ff       	call   c000f8fc <malloc>
c00170b3:	83 c4 10             	add    esp,0x10
c00170b6:	89 c3                	mov    ebx,eax
c00170b8:	83 ec 0c             	sub    esp,0xc
c00170bb:	53                   	push   ebx
c00170bc:	e8 3d 6f 00 00       	call   c001dffe <Mutex::Mutex()>
c00170c1:	83 c4 10             	add    esp,0x10
c00170c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c8:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170da:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017102:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017106:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017109:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001710c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017110:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017114:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017118:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001711e:	05 00 01 00 00       	add    eax,0x100
c0017123:	c1 e0 04             	shl    eax,0x4
c0017126:	83 ec 0c             	sub    esp,0xc
c0017129:	50                   	push   eax
c001712a:	e8 cd 87 ff ff       	call   c000f8fc <malloc>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	89 c2                	mov    edx,eax
c0017134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017138:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001713b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713f:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001714a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001714e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017152:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017158:	c1 e0 07             	shl    eax,0x7
c001715b:	83 ec 0c             	sub    esp,0xc
c001715e:	50                   	push   eax
c001715f:	e8 98 87 ff ff       	call   c000f8fc <malloc>
c0017164:	83 c4 10             	add    esp,0x10
c0017167:	89 c2                	mov    edx,eax
c0017169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017170:	90                   	nop
c0017171:	83 c4 18             	add    esp,0x18
c0017174:	5b                   	pop    ebx
c0017175:	c3                   	ret    

c0017176 <VCache::invalidateReadBuffer()>:
c0017176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001717a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017180:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017184:	c3                   	ret    
c0017185:	90                   	nop

c0017186 <VCache::writeWriteBuffer()>:
c0017186:	53                   	push   ebx
c0017187:	83 ec 14             	sub    esp,0x14
c001718a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001718e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017191:	8b 10                	mov    edx,DWORD PTR [eax]
c0017193:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017196:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017199:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001719c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001719f:	50                   	push   eax
c00171a0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171a3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171aa:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171b1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171b5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171bc:	83 c4 28             	add    esp,0x28
c00171bf:	5b                   	pop    ebx
c00171c0:	c3                   	ret    
c00171c1:	90                   	nop

c00171c2 <VCache::~VCache()>:
c00171c2:	83 ec 0c             	sub    esp,0xc
c00171c5:	ba 20 b6 02 c0       	mov    edx,0xc002b620
c00171ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ce:	89 10                	mov    DWORD PTR [eax],edx
c00171d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171d7:	84 c0                	test   al,al
c00171d9:	74 0f                	je     c00171ea <VCache::~VCache()+0x28>
c00171db:	83 ec 0c             	sub    esp,0xc
c00171de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171e2:	e8 9f ff ff ff       	call   c0017186 <VCache::writeWriteBuffer()>
c00171e7:	83 c4 10             	add    esp,0x10
c00171ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171f1:	83 ec 0c             	sub    esp,0xc
c00171f4:	50                   	push   eax
c00171f5:	e8 12 87 ff ff       	call   c000f90c <free>
c00171fa:	83 c4 10             	add    esp,0x10
c00171fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017201:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017204:	83 ec 0c             	sub    esp,0xc
c0017207:	50                   	push   eax
c0017208:	e8 ff 86 ff ff       	call   c000f90c <free>
c001720d:	83 c4 10             	add    esp,0x10
c0017210:	90                   	nop
c0017211:	83 c4 0c             	add    esp,0xc
c0017214:	c3                   	ret    
c0017215:	90                   	nop

c0017216 <VCache::~VCache()>:
c0017216:	83 ec 0c             	sub    esp,0xc
c0017219:	83 ec 0c             	sub    esp,0xc
c001721c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017220:	e8 9d ff ff ff       	call   c00171c2 <VCache::~VCache()>
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	83 ec 08             	sub    esp,0x8
c001722b:	6a 44                	push   0x44
c001722d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017231:	e8 f1 bc ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0017236:	83 c4 10             	add    esp,0x10
c0017239:	83 c4 0c             	add    esp,0xc
c001723c:	c3                   	ret    
c001723d:	90                   	nop

c001723e <VCache::write(unsigned long long, int, void*)>:
c001723e:	55                   	push   ebp
c001723f:	57                   	push   edi
c0017240:	56                   	push   esi
c0017241:	53                   	push   ebx
c0017242:	83 ec 28             	sub    esp,0x28
c0017245:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017249:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001724d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017251:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017255:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017258:	e8 03 72 00 00       	call   c001e460 <Semaphore::acquire()>
c001725d:	83 c4 10             	add    esp,0x10
c0017260:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017264:	74 0c                	je     c0017272 <VCache::write(unsigned long long, int, void*)+0x34>
c0017266:	83 ec 0c             	sub    esp,0xc
c0017269:	53                   	push   ebx
c001726a:	e8 07 ff ff ff       	call   c0017176 <VCache::invalidateReadBuffer()>
c001726f:	83 c4 10             	add    esp,0x10
c0017272:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017276:	74 66                	je     c00172de <VCache::write(unsigned long long, int, void*)+0xa0>
c0017278:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001727b:	99                   	cdq    
c001727c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017280:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017283:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017286:	89 c1                	mov    ecx,eax
c0017288:	89 d0                	mov    eax,edx
c001728a:	31 f1                	xor    ecx,esi
c001728c:	31 f8                	xor    eax,edi
c001728e:	89 ca                	mov    edx,ecx
c0017290:	09 c2                	or     edx,eax
c0017292:	75 3e                	jne    c00172d2 <VCache::write(unsigned long long, int, void*)+0x94>
c0017294:	83 fd 01             	cmp    ebp,0x1
c0017297:	75 39                	jne    c00172d2 <VCache::write(unsigned long long, int, void*)+0x94>
c0017299:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001729c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172a2:	51                   	push   ecx
c00172a3:	50                   	push   eax
c00172a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00172ac:	0f af c8             	imul   ecx,eax
c00172af:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00172b2:	51                   	push   ecx
c00172b3:	e8 8c 94 fe ff       	call   c0000744 <memcpy>
c00172b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172bb:	83 c4 10             	add    esp,0x10
c00172be:	40                   	inc    eax
c00172bf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172c2:	83 c0 80             	add    eax,0xffffff80
c00172c5:	75 57                	jne    c001731e <VCache::write(unsigned long long, int, void*)+0xe0>
c00172c7:	83 ec 0c             	sub    esp,0xc
c00172ca:	53                   	push   ebx
c00172cb:	e8 b6 fe ff ff       	call   c0017186 <VCache::writeWriteBuffer()>
c00172d0:	eb 34                	jmp    c0017306 <VCache::write(unsigned long long, int, void*)+0xc8>
c00172d2:	83 ec 0c             	sub    esp,0xc
c00172d5:	53                   	push   ebx
c00172d6:	e8 ab fe ff ff       	call   c0017186 <VCache::writeWriteBuffer()>
c00172db:	83 c4 10             	add    esp,0x10
c00172de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172e1:	83 fd 7f             	cmp    ebp,0x7f
c00172e4:	7f 25                	jg     c001730b <VCache::write(unsigned long long, int, void*)+0xcd>
c00172e6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172e9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172ec:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172ef:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172f3:	52                   	push   edx
c00172f4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172fe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017301:	e8 3e 94 fe ff       	call   c0000744 <memcpy>
c0017306:	83 c4 10             	add    esp,0x10
c0017309:	eb 13                	jmp    c001731e <VCache::write(unsigned long long, int, void*)+0xe0>
c001730b:	83 ec 0c             	sub    esp,0xc
c001730e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017310:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017314:	55                   	push   ebp
c0017315:	57                   	push   edi
c0017316:	56                   	push   esi
c0017317:	50                   	push   eax
c0017318:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001731b:	83 c4 20             	add    esp,0x20
c001731e:	83 ec 0c             	sub    esp,0xc
c0017321:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017324:	e8 e5 76 00 00       	call   c001ea0e <Semaphore::release()>
c0017329:	83 c4 2c             	add    esp,0x2c
c001732c:	31 c0                	xor    eax,eax
c001732e:	5b                   	pop    ebx
c001732f:	5e                   	pop    esi
c0017330:	5f                   	pop    edi
c0017331:	5d                   	pop    ebp
c0017332:	c3                   	ret    
c0017333:	90                   	nop

c0017334 <VCache::read(unsigned long long, int, void*)>:
c0017334:	55                   	push   ebp
c0017335:	57                   	push   edi
c0017336:	56                   	push   esi
c0017337:	53                   	push   ebx
c0017338:	83 ec 28             	sub    esp,0x28
c001733b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001733f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017343:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017347:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001734b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001734f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017353:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017357:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001735a:	e8 01 71 00 00       	call   c001e460 <Semaphore::acquire()>
c001735f:	83 c4 10             	add    esp,0x10
c0017362:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017366:	74 0c                	je     c0017374 <VCache::read(unsigned long long, int, void*)+0x40>
c0017368:	83 ec 0c             	sub    esp,0xc
c001736b:	53                   	push   ebx
c001736c:	e8 15 fe ff ff       	call   c0017186 <VCache::writeWriteBuffer()>
c0017371:	83 c4 10             	add    esp,0x10
c0017374:	83 fe 01             	cmp    esi,0x1
c0017377:	0f 85 80 00 00 00    	jne    c00173fd <VCache::read(unsigned long long, int, void*)+0xc9>
c001737d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017380:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017387:	75 74                	jne    c00173fd <VCache::read(unsigned long long, int, void*)+0xc9>
c0017389:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001738c:	89 d1                	mov    ecx,edx
c001738e:	f7 d9                	neg    ecx
c0017390:	89 cf                	mov    edi,ecx
c0017392:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017396:	c1 ff 1f             	sar    edi,0x1f
c0017399:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001739c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00173a0:	89 ce                	mov    esi,ecx
c00173a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173a6:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00173aa:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173ae:	89 cf                	mov    edi,ecx
c00173b0:	74 0a                	je     c00173bc <VCache::read(unsigned long long, int, void*)+0x88>
c00173b2:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173b5:	75 05                	jne    c00173bc <VCache::read(unsigned long long, int, void*)+0x88>
c00173b7:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00173ba:	74 1c                	je     c00173d8 <VCache::read(unsigned long long, int, void*)+0xa4>
c00173bc:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173c0:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173c3:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173c6:	83 ec 0c             	sub    esp,0xc
c00173c9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173cb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173ce:	52                   	push   edx
c00173cf:	57                   	push   edi
c00173d0:	56                   	push   esi
c00173d1:	50                   	push   eax
c00173d2:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173d5:	83 c4 20             	add    esp,0x20
c00173d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173db:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173e1:	50                   	push   eax
c00173e2:	52                   	push   edx
c00173e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173e6:	48                   	dec    eax
c00173e7:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173eb:	0f af c2             	imul   eax,edx
c00173ee:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173f1:	50                   	push   eax
c00173f2:	55                   	push   ebp
c00173f3:	e8 4c 93 fe ff       	call   c0000744 <memcpy>
c00173f8:	83 c4 10             	add    esp,0x10
c00173fb:	eb 21                	jmp    c001741e <VCache::read(unsigned long long, int, void*)+0xea>
c00173fd:	83 ec 0c             	sub    esp,0xc
c0017400:	53                   	push   ebx
c0017401:	e8 70 fd ff ff       	call   c0017176 <VCache::invalidateReadBuffer()>
c0017406:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017409:	8b 10                	mov    edx,DWORD PTR [eax]
c001740b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001740e:	56                   	push   esi
c001740f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017413:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017417:	50                   	push   eax
c0017418:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001741b:	83 c4 20             	add    esp,0x20
c001741e:	83 ec 0c             	sub    esp,0xc
c0017421:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017424:	e8 e5 75 00 00       	call   c001ea0e <Semaphore::release()>
c0017429:	83 c4 2c             	add    esp,0x2c
c001742c:	31 c0                	xor    eax,eax
c001742e:	5b                   	pop    ebx
c001742f:	5e                   	pop    esi
c0017430:	5f                   	pop    edi
c0017431:	5d                   	pop    ebp
c0017432:	c3                   	ret    
c0017433:	90                   	nop

c0017434 <Video::putrect(int, int, int, int, unsigned int)>:
c0017434:	55                   	push   ebp
c0017435:	57                   	push   edi
c0017436:	56                   	push   esi
c0017437:	53                   	push   ebx
c0017438:	83 ec 1c             	sub    esp,0x1c
c001743b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001743f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017443:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017447:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001744b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001744f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017453:	01 df                	add    edi,ebx
c0017455:	39 fb                	cmp    ebx,edi
c0017457:	7d 1f                	jge    c0017478 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017459:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001745d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017461:	7d 12                	jge    c0017475 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017463:	8b 16                	mov    edx,DWORD PTR [esi]
c0017465:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017469:	53                   	push   ebx
c001746a:	55                   	push   ebp
c001746b:	45                   	inc    ebp
c001746c:	56                   	push   esi
c001746d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017470:	83 c4 10             	add    esp,0x10
c0017473:	eb e8                	jmp    c001745d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017475:	43                   	inc    ebx
c0017476:	eb dd                	jmp    c0017455 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017478:	83 c4 1c             	add    esp,0x1c
c001747b:	5b                   	pop    ebx
c001747c:	5e                   	pop    esi
c001747d:	5f                   	pop    edi
c001747e:	5d                   	pop    ebp
c001747f:	c3                   	ret    

c0017480 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017480:	55                   	push   ebp
c0017481:	57                   	push   edi
c0017482:	31 ff                	xor    edi,edi
c0017484:	56                   	push   esi
c0017485:	53                   	push   ebx
c0017486:	83 ec 1c             	sub    esp,0x1c
c0017489:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001748d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017491:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017498:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001749d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174a1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174a5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174a9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174b0:	01 f9                	add    ecx,edi
c00174b2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174b6:	7d 2f                	jge    c00174e7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174b8:	31 f6                	xor    esi,esi
c00174ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174be:	01 f2                	add    edx,esi
c00174c0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174c4:	7d 1a                	jge    c00174e0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174c9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174cc:	46                   	inc    esi
c00174cd:	51                   	push   ecx
c00174ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174d2:	52                   	push   edx
c00174d3:	55                   	push   ebp
c00174d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174d7:	83 c4 10             	add    esp,0x10
c00174da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174de:	eb da                	jmp    c00174ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174e0:	47                   	inc    edi
c00174e1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174e5:	eb c5                	jmp    c00174ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174e7:	83 c4 1c             	add    esp,0x1c
c00174ea:	5b                   	pop    ebx
c00174eb:	5e                   	pop    esi
c00174ec:	5f                   	pop    edi
c00174ed:	5d                   	pop    ebp
c00174ee:	c3                   	ret    
c00174ef:	90                   	nop

c00174f0 <Video::blit(unsigned int*, int, int, int, int)>:
c00174f0:	55                   	push   ebp
c00174f1:	57                   	push   edi
c00174f2:	56                   	push   esi
c00174f3:	53                   	push   ebx
c00174f4:	83 ec 1c             	sub    esp,0x1c
c00174f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174ff:	85 c0                	test   eax,eax
c0017501:	79 02                	jns    c0017505 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017503:	31 c0                	xor    eax,eax
c0017505:	c1 e0 02             	shl    eax,0x2
c0017508:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001750c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017510:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017514:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017518:	39 d8                	cmp    eax,ebx
c001751a:	7e 49                	jle    c0017565 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001751c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017522:	7c 41                	jl     c0017565 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017524:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017528:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001752c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017530:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017534:	39 f9                	cmp    ecx,edi
c0017536:	7e 22                	jle    c001755a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017538:	83 c5 04             	add    ebp,0x4
c001753b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017541:	7c 14                	jl     c0017557 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017543:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017545:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017548:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001754c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017550:	56                   	push   esi
c0017551:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017554:	83 c4 10             	add    esp,0x10
c0017557:	47                   	inc    edi
c0017558:	eb d2                	jmp    c001752c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001755a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001755e:	43                   	inc    ebx
c001755f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017563:	eb ab                	jmp    c0017510 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017565:	83 c4 1c             	add    esp,0x1c
c0017568:	5b                   	pop    ebx
c0017569:	5e                   	pop    esi
c001756a:	5f                   	pop    edi
c001756b:	5d                   	pop    ebp
c001756c:	c3                   	ret    
c001756d:	90                   	nop

c001756e <Video::clearScreen(unsigned int)>:
c001756e:	57                   	push   edi
c001756f:	56                   	push   esi
c0017570:	53                   	push   ebx
c0017571:	31 db                	xor    ebx,ebx
c0017573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017577:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001757d:	7e 1f                	jle    c001759e <Video::clearScreen(unsigned int)+0x30>
c001757f:	31 ff                	xor    edi,edi
c0017581:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017587:	7e 12                	jle    c001759b <Video::clearScreen(unsigned int)+0x2d>
c0017589:	8b 06                	mov    eax,DWORD PTR [esi]
c001758b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001758f:	53                   	push   ebx
c0017590:	57                   	push   edi
c0017591:	47                   	inc    edi
c0017592:	56                   	push   esi
c0017593:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	eb e6                	jmp    c0017581 <Video::clearScreen(unsigned int)+0x13>
c001759b:	43                   	inc    ebx
c001759c:	eb d9                	jmp    c0017577 <Video::clearScreen(unsigned int)+0x9>
c001759e:	5b                   	pop    ebx
c001759f:	5e                   	pop    esi
c00175a0:	5f                   	pop    edi
c00175a1:	c3                   	ret    

c00175a2 <Video::putpixel(int, int, unsigned int)>:
c00175a2:	c7 44 24 04 28 b6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b628
c00175aa:	e9 0a 31 00 00       	jmp    c001a6b9 <Krnl::panic(char const*)>
c00175af:	90                   	nop

c00175b0 <Video::Video(char const*)>:
c00175b0:	83 ec 0c             	sub    esp,0xc
c00175b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b7:	83 ec 08             	sub    esp,0x8
c00175ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175be:	50                   	push   eax
c00175bf:	e8 5a d0 ff ff       	call   c001461e <Device::Device(char const*)>
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	ba ac b6 02 c0       	mov    edx,0xc002b6ac
c00175cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d0:	89 10                	mov    DWORD PTR [eax],edx
c00175d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175e0:	90                   	nop
c00175e1:	83 c4 0c             	add    esp,0xc
c00175e4:	c3                   	ret    
c00175e5:	90                   	nop

c00175e6 <Video::~Video()>:
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	ba ac b6 02 c0       	mov    edx,0xc002b6ac
c00175ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f2:	89 10                	mov    DWORD PTR [eax],edx
c00175f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f8:	83 ec 0c             	sub    esp,0xc
c00175fb:	50                   	push   eax
c00175fc:	e8 ff cc ff ff       	call   c0014300 <Device::~Device()>
c0017601:	83 c4 10             	add    esp,0x10
c0017604:	90                   	nop
c0017605:	83 c4 0c             	add    esp,0xc
c0017608:	c3                   	ret    
c0017609:	90                   	nop

c001760a <Video::~Video()>:
c001760a:	83 ec 0c             	sub    esp,0xc
c001760d:	83 ec 0c             	sub    esp,0xc
c0017610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017614:	e8 cd ff ff ff       	call   c00175e6 <Video::~Video()>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	83 ec 08             	sub    esp,0x8
c001761f:	68 64 01 00 00       	push   0x164
c0017624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017628:	e8 fa b8 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	83 c4 0c             	add    esp,0xc
c0017633:	c3                   	ret    

c0017634 <Video::isMonochrome()>:
c0017634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017638:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001763e:	c3                   	ret    
c001763f:	90                   	nop

c0017640 <Video::getWidth()>:
c0017640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017644:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001764a:	c3                   	ret    
c001764b:	90                   	nop

c001764c <Video::getHeight()>:
c001764c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017650:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017656:	c3                   	ret    
c0017657:	90                   	nop

c0017658 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017658:	55                   	push   ebp
c0017659:	57                   	push   edi
c001765a:	56                   	push   esi
c001765b:	53                   	push   ebx
c001765c:	83 ec 2c             	sub    esp,0x2c
c001765f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017663:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017667:	83 f8 01             	cmp    eax,0x1
c001766a:	19 c9                	sbb    ecx,ecx
c001766c:	31 db                	xor    ebx,ebx
c001766e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017672:	89 cd                	mov    ebp,ecx
c0017674:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001767c:	f7 d5                	not    ebp
c001767e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017684:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017688:	01 d8                	add    eax,ebx
c001768a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001768e:	56                   	push   esi
c001768f:	e8 b8 ff ff ff       	call   c001764c <Video::getHeight()>
c0017694:	59                   	pop    ecx
c0017695:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017699:	7e 70                	jle    c001770b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001769b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001769f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176a3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176ae:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176b9:	89 f8                	mov    eax,edi
c00176bb:	83 c0 20             	add    eax,0x20
c00176be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176c2:	56                   	push   esi
c00176c3:	e8 78 ff ff ff       	call   c0017640 <Video::getWidth()>
c00176c8:	5a                   	pop    edx
c00176c9:	39 c7                	cmp    edi,eax
c00176cb:	7d 34                	jge    c0017701 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176cd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176d2:	74 05                	je     c00176d9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00176d6:	55                   	push   ebp
c00176d7:	eb 0d                	jmp    c00176e6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176d9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176de:	74 12                	je     c00176f2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00176e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176ea:	57                   	push   edi
c00176eb:	56                   	push   esi
c00176ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176f6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176fa:	47                   	inc    edi
c00176fb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176ff:	75 c1                	jne    c00176c2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017701:	43                   	inc    ebx
c0017702:	83 fb 20             	cmp    ebx,0x20
c0017705:	0f 85 79 ff ff ff    	jne    c0017684 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001770b:	83 c4 2c             	add    esp,0x2c
c001770e:	5b                   	pop    ebx
c001770f:	5e                   	pop    esi
c0017710:	5f                   	pop    edi
c0017711:	5d                   	pop    ebp
c0017712:	c3                   	ret    
c0017713:	90                   	nop

c0017714 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017714:	55                   	push   ebp
c0017715:	57                   	push   edi
c0017716:	56                   	push   esi
c0017717:	53                   	push   ebx
c0017718:	83 ec 28             	sub    esp,0x28
c001771b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001771f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017723:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017727:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001772b:	c1 e7 08             	shl    edi,0x8
c001772e:	01 c7                	add    edi,eax
c0017730:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017734:	c1 e0 08             	shl    eax,0x8
c0017737:	01 d0                	add    eax,edx
c0017739:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001773d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017741:	0f af c7             	imul   eax,edi
c0017744:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001774b:	50                   	push   eax
c001774c:	e8 ab 81 ff ff       	call   c000f8fc <malloc>
c0017751:	83 c4 10             	add    esp,0x10
c0017754:	89 c5                	mov    ebp,eax
c0017756:	85 c0                	test   eax,eax
c0017758:	75 15                	jne    c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	68 49 b6 02 c0       	push   0xc002b649
c0017762:	e8 a0 b8 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	e9 1c 01 00 00       	jmp    c001788b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001776f:	be 12 00 00 00       	mov    esi,0x12
c0017774:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017778:	74 11                	je     c001778b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001777a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001777e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017782:	c1 fe 03             	sar    esi,0x3
c0017785:	0f af f0             	imul   esi,eax
c0017788:	83 c6 12             	add    esi,0x12
c001778b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001778f:	74 04                	je     c0017795 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017791:	85 ff                	test   edi,edi
c0017793:	75 12                	jne    c00177a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017795:	83 ec 0c             	sub    esp,0xc
c0017798:	68 60 b6 02 c0       	push   0xc002b660
c001779d:	e8 65 b8 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00177a2:	e9 ce 00 00 00       	jmp    c0017875 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177a7:	52                   	push   edx
c00177a8:	52                   	push   edx
c00177a9:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177ad:	50                   	push   eax
c00177ae:	68 75 b6 02 c0       	push   0xc002b675
c00177b3:	e8 4f b8 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00177b8:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177bc:	83 c4 10             	add    esp,0x10
c00177bf:	80 fa 02             	cmp    dl,0x2
c00177c2:	0f 85 98 00 00 00    	jne    c0017860 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177c8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177cd:	75 10                	jne    c00177df <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177cf:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177d3:	75 0a                	jne    c00177df <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177d5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177d8:	83 e8 18             	sub    eax,0x18
c00177db:	a8 f7                	test   al,0xf7
c00177dd:	74 0a                	je     c00177e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177df:	83 ec 0c             	sub    esp,0xc
c00177e2:	68 82 b6 02 c0       	push   0xc002b682
c00177e7:	eb 7f                	jmp    c0017868 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017805:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017809:	75 0c                	jne    c0017817 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001780b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017810:	c1 e0 18             	shl    eax,0x18
c0017813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017817:	41                   	inc    ecx
c0017818:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001781d:	c1 e2 10             	shl    edx,0x10
c0017820:	89 d0                	mov    eax,edx
c0017822:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017827:	c1 e2 08             	shl    edx,0x8
c001782a:	09 c2                	or     edx,eax
c001782c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017830:	09 c2                	or     edx,eax
c0017832:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017836:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001783a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001783e:	c1 f8 03             	sar    eax,0x3
c0017841:	01 c6                	add    esi,eax
c0017843:	89 c8                	mov    eax,ecx
c0017845:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017849:	39 c7                	cmp    edi,eax
c001784b:	7f b0                	jg     c00177fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001784d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017851:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017855:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017858:	7e 22                	jle    c001787c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001785a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001785e:	eb 99                	jmp    c00177f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017860:	50                   	push   eax
c0017861:	50                   	push   eax
c0017862:	52                   	push   edx
c0017863:	68 90 b6 02 c0       	push   0xc002b690
c0017868:	e8 9a b7 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001786d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017870:	e8 97 80 ff ff       	call   c000f90c <free>
c0017875:	83 c4 10             	add    esp,0x10
c0017878:	31 ed                	xor    ebp,ebp
c001787a:	eb 0f                	jmp    c001788b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001787c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017880:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017883:	89 38                	mov    DWORD PTR [eax],edi
c0017885:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017889:	89 08                	mov    DWORD PTR [eax],ecx
c001788b:	83 c4 1c             	add    esp,0x1c
c001788e:	89 e8                	mov    eax,ebp
c0017890:	5b                   	pop    ebx
c0017891:	5e                   	pop    esi
c0017892:	5f                   	pop    edi
c0017893:	5d                   	pop    ebp
c0017894:	c3                   	ret    
c0017895:	90                   	nop

c0017896 <Video::putTGA(int, int, unsigned char*, int)>:
c0017896:	55                   	push   ebp
c0017897:	57                   	push   edi
c0017898:	56                   	push   esi
c0017899:	53                   	push   ebx
c001789a:	83 ec 28             	sub    esp,0x28
c001789d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178a5:	50                   	push   eax
c00178a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178aa:	50                   	push   eax
c00178ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178b3:	56                   	push   esi
c00178b4:	e8 5b fe ff ff       	call   c0017714 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178b9:	83 c4 20             	add    esp,0x20
c00178bc:	85 c0                	test   eax,eax
c00178be:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178c2:	74 35                	je     c00178f9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178c4:	89 c7                	mov    edi,eax
c00178c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178ca:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178ce:	39 d8                	cmp    eax,ebx
c00178d0:	7e 27                	jle    c00178f9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178d2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178de:	39 e8                	cmp    eax,ebp
c00178e0:	7e 14                	jle    c00178f6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00178e4:	83 c7 04             	add    edi,0x4
c00178e7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178ea:	53                   	push   ebx
c00178eb:	55                   	push   ebp
c00178ec:	45                   	inc    ebp
c00178ed:	56                   	push   esi
c00178ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178f1:	83 c4 10             	add    esp,0x10
c00178f4:	eb e0                	jmp    c00178d6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178f6:	43                   	inc    ebx
c00178f7:	eb cd                	jmp    c00178c6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178f9:	83 c4 1c             	add    esp,0x1c
c00178fc:	5b                   	pop    ebx
c00178fd:	5e                   	pop    esi
c00178fe:	5f                   	pop    edi
c00178ff:	5d                   	pop    ebp
c0017900:	c3                   	ret    
c0017901:	90                   	nop

c0017902 <ACPI::close(int, int, void*)>:
c0017902:	83 ec 1c             	sub    esp,0x1c
c0017905:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001790d:	74 0a                	je     c0017919 <ACPI::close(int, int, void*)+0x17>
c001790f:	b8 00 00 00 00       	mov    eax,0x0
c0017914:	e9 9a 00 00 00       	jmp    c00179b3 <ACPI::close(int, int, void*)+0xb1>
c0017919:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001791e:	75 37                	jne    c0017957 <ACPI::close(int, int, void*)+0x55>
c0017920:	83 ec 0c             	sub    esp,0xc
c0017923:	68 ec b6 02 c0       	push   0xc002b6ec
c0017928:	e8 da b6 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0017935:	85 c0                	test   eax,eax
c0017937:	74 07                	je     c0017940 <ACPI::close(int, int, void*)+0x3e>
c0017939:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001793e:	ff d0                	call   eax
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	68 10 b8 02 c0       	push   0xc002b810
c0017948:	e8 6c 2d 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017955:	eb 5c                	jmp    c00179b3 <ACPI::close(int, int, void*)+0xb1>
c0017957:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001795c:	75 50                	jne    c00179ae <ACPI::close(int, int, void*)+0xac>
c001795e:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c0017963:	85 c0                	test   eax,eax
c0017965:	74 07                	je     c001796e <ACPI::close(int, int, void*)+0x6c>
c0017967:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001796c:	ff d0                	call   eax
c001796e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017973:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017978:	83 e0 02             	and    eax,0x2
c001797b:	74 1c                	je     c0017999 <ACPI::close(int, int, void*)+0x97>
c001797d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017988:	89 c2                	mov    edx,eax
c001798a:	ec                   	in     al,dx
c001798b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001798f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017993:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017997:	eb da                	jmp    c0017973 <ACPI::close(int, int, void*)+0x71>
c0017999:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179a0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179a5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179ad:	ee                   	out    dx,al
c00179ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179b3:	83 c4 1c             	add    esp,0x1c
c00179b6:	c3                   	ret    

c00179b7 <findRSDP()>:
c00179b7:	83 ec 1c             	sub    esp,0x1c
c00179ba:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00179bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179c5:	83 e0 04             	and    eax,0x4
c00179c8:	84 c0                	test   al,al
c00179ca:	75 07                	jne    c00179d3 <findRSDP()+0x1c>
c00179cc:	b8 00 00 00 00       	mov    eax,0x0
c00179d1:	eb 6a                	jmp    c0017a3d <findRSDP()+0x86>
c00179d3:	a1 b0 e7 02 c0       	mov    eax,ds:0xc002e7b0
c00179d8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179dd:	7f 1b                	jg     c00179fa <findRSDP()+0x43>
c00179df:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00179e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179ea:	83 e2 fb             	and    edx,0xfffffffb
c00179ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179f3:	b8 00 00 00 00       	mov    eax,0x0
c00179f8:	eb 43                	jmp    c0017a3d <findRSDP()+0x86>
c00179fa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a02:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a0a:	77 2c                	ja     c0017a38 <findRSDP()+0x81>
c0017a0c:	83 ec 04             	sub    esp,0x4
c0017a0f:	6a 08                	push   0x8
c0017a11:	68 f9 b6 02 c0       	push   0xc002b6f9
c0017a16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a1a:	e8 21 8c fe ff       	call   c0000640 <memcmp>
c0017a1f:	83 c4 10             	add    esp,0x10
c0017a22:	85 c0                	test   eax,eax
c0017a24:	0f 94 c0             	sete   al
c0017a27:	84 c0                	test   al,al
c0017a29:	74 06                	je     c0017a31 <findRSDP()+0x7a>
c0017a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a2f:	eb 0c                	jmp    c0017a3d <findRSDP()+0x86>
c0017a31:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a36:	eb ca                	jmp    c0017a02 <findRSDP()+0x4b>
c0017a38:	b8 00 00 00 00       	mov    eax,0x0
c0017a3d:	83 c4 1c             	add    esp,0x1c
c0017a40:	c3                   	ret    

c0017a41 <loadACPITables(unsigned char*)>:
c0017a41:	56                   	push   esi
c0017a42:	53                   	push   ebx
c0017a43:	83 ec 44             	sub    esp,0x44
c0017a46:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0017a4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a51:	83 e0 04             	and    eax,0x4
c0017a54:	84 c0                	test   al,al
c0017a56:	0f 84 05 02 00 00    	je     c0017c61 <loadACPITables(unsigned char*)+0x220>
c0017a5c:	a0 40 10 03 c0       	mov    al,ds:0xc0031040
c0017a61:	84 c0                	test   al,al
c0017a63:	74 75                	je     c0017ada <loadACPITables(unsigned char*)+0x99>
c0017a65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a74:	83 e8 24             	sub    eax,0x24
c0017a77:	c1 e8 03             	shr    eax,0x3
c0017a7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a7e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a8a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a8e:	0f 8d b2 00 00 00    	jge    c0017b46 <loadACPITables(unsigned char*)+0x105>
c0017a94:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a98:	83 c0 24             	add    eax,0x24
c0017a9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017aa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017aab:	c1 e0 03             	shl    eax,0x3
c0017aae:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017ab2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ab6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017abb:	89 c1                	mov    ecx,eax
c0017abd:	a1 2c 0e 03 c0       	mov    eax,ds:0xc0030e2c
c0017ac2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ac5:	89 15 2c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e2c,edx
c0017acb:	89 ca                	mov    edx,ecx
c0017acd:	89 14 c5 44 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1bc],edx
c0017ad4:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017ad8:	eb ac                	jmp    c0017a86 <loadACPITables(unsigned char*)+0x45>
c0017ada:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ade:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ae9:	83 e8 24             	sub    eax,0x24
c0017aec:	c1 e8 02             	shr    eax,0x2
c0017aef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017af3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017afb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017aff:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b03:	7d 41                	jge    c0017b46 <loadACPITables(unsigned char*)+0x105>
c0017b05:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b09:	83 c0 24             	add    eax,0x24
c0017b0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b1c:	c1 e0 02             	shl    eax,0x2
c0017b1f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017b23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b27:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b29:	a1 2c 0e 03 c0       	mov    eax,ds:0xc0030e2c
c0017b2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017b31:	89 15 2c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e2c,edx
c0017b37:	89 ca                	mov    edx,ecx
c0017b39:	89 14 c5 44 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1bc],edx
c0017b40:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b44:	eb b5                	jmp    c0017afb <loadACPITables(unsigned char*)+0xba>
c0017b46:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b4e:	a1 2c 0e 03 c0       	mov    eax,ds:0xc0030e2c
c0017b53:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b57:	0f 8d 05 01 00 00    	jge    c0017c62 <loadACPITables(unsigned char*)+0x221>
c0017b5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b61:	8b 04 c5 44 0e 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf1bc]
c0017b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b78:	25 ff 0f 00 00       	and    eax,0xfff
c0017b7d:	89 c6                	mov    esi,eax
c0017b7f:	e8 5e a3 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c0017b84:	89 c3                	mov    ebx,eax
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	6a 01                	push   0x1
c0017b8b:	e8 b7 a0 ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b97:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b9d:	83 ec 0c             	sub    esp,0xc
c0017ba0:	6a 01                	push   0x1
c0017ba2:	6a 01                	push   0x1
c0017ba4:	50                   	push   eax
c0017ba5:	52                   	push   edx
c0017ba6:	53                   	push   ebx
c0017ba7:	e8 66 ab ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bac:	83 c4 20             	add    esp,0x20
c0017baf:	09 f0                	or     eax,esi
c0017bb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bb9:	c1 e0 03             	shl    eax,0x3
c0017bbc:	05 40 0e 03 c0       	add    eax,0xc0030e40
c0017bc1:	83 ec 04             	sub    esp,0x4
c0017bc4:	6a 04                	push   0x4
c0017bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bca:	50                   	push   eax
c0017bcb:	e8 74 8b fe ff       	call   c0000744 <memcpy>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017be2:	05 00 10 00 00       	add    eax,0x1000
c0017be7:	c1 e8 0c             	shr    eax,0xc
c0017bea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf9:	25 ff 0f 00 00       	and    eax,0xfff
c0017bfe:	89 c6                	mov    esi,eax
c0017c00:	e8 dd a2 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c0017c05:	89 c3                	mov    ebx,eax
c0017c07:	83 ec 0c             	sub    esp,0xc
c0017c0a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c0e:	e8 34 a0 ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c1a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c20:	83 ec 0c             	sub    esp,0xc
c0017c23:	6a 01                	push   0x1
c0017c25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c29:	50                   	push   eax
c0017c2a:	52                   	push   edx
c0017c2b:	53                   	push   ebx
c0017c2c:	e8 e1 aa ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c31:	83 c4 20             	add    esp,0x20
c0017c34:	09 f0                	or     eax,esi
c0017c36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c3d:	83 ec 0c             	sub    esp,0xc
c0017c40:	50                   	push   eax
c0017c41:	e8 71 a4 ff ff       	call   c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c46:	83 c4 10             	add    esp,0x10
c0017c49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c51:	89 14 c5 44 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1bc],edx
c0017c58:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c5c:	e9 ed fe ff ff       	jmp    c0017b4e <loadACPITables(unsigned char*)+0x10d>
c0017c61:	90                   	nop
c0017c62:	83 c4 44             	add    esp,0x44
c0017c65:	5b                   	pop    ebx
c0017c66:	5e                   	pop    esi
c0017c67:	c3                   	ret    

c0017c68 <findRSDT(unsigned char*)>:
c0017c68:	56                   	push   esi
c0017c69:	53                   	push   ebx
c0017c6a:	83 ec 44             	sub    esp,0x44
c0017c6d:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0017c72:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c78:	83 e0 04             	and    eax,0x4
c0017c7b:	84 c0                	test   al,al
c0017c7d:	75 0a                	jne    c0017c89 <findRSDT(unsigned char*)+0x21>
c0017c7f:	b8 00 00 00 00       	mov    eax,0x0
c0017c84:	e9 f7 00 00 00       	jmp    c0017d80 <findRSDT(unsigned char*)+0x118>
c0017c89:	83 ec 04             	sub    esp,0x4
c0017c8c:	6a 24                	push   0x24
c0017c8e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c92:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c96:	50                   	push   eax
c0017c97:	e8 a8 8a fe ff       	call   c0000744 <memcpy>
c0017c9c:	83 c4 10             	add    esp,0x10
c0017c9f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ca3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017ca7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cbf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cc7:	25 ff 0f 00 00       	and    eax,0xfff
c0017ccc:	89 c6                	mov    esi,eax
c0017cce:	e8 0f a2 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c0017cd3:	89 c3                	mov    ebx,eax
c0017cd5:	83 ec 0c             	sub    esp,0xc
c0017cd8:	6a 02                	push   0x2
c0017cda:	e8 68 9f ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0017cdf:	83 c4 10             	add    esp,0x10
c0017ce2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017ce6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cec:	83 ec 0c             	sub    esp,0xc
c0017cef:	6a 01                	push   0x1
c0017cf1:	6a 02                	push   0x2
c0017cf3:	50                   	push   eax
c0017cf4:	52                   	push   edx
c0017cf5:	53                   	push   ebx
c0017cf6:	e8 17 aa ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cfb:	83 c4 20             	add    esp,0x20
c0017cfe:	09 f0                	or     eax,esi
c0017d00:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d08:	25 ff 0f 00 00       	and    eax,0xfff
c0017d0d:	89 c6                	mov    esi,eax
c0017d0f:	e8 ce a1 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c0017d14:	89 c3                	mov    ebx,eax
c0017d16:	83 ec 0c             	sub    esp,0xc
c0017d19:	6a 02                	push   0x2
c0017d1b:	e8 27 9f ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d27:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d2d:	83 ec 0c             	sub    esp,0xc
c0017d30:	6a 01                	push   0x1
c0017d32:	6a 02                	push   0x2
c0017d34:	50                   	push   eax
c0017d35:	52                   	push   edx
c0017d36:	53                   	push   ebx
c0017d37:	e8 d6 a9 ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d3c:	83 c4 20             	add    esp,0x20
c0017d3f:	09 f0                	or     eax,esi
c0017d41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d45:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d4a:	75 11                	jne    c0017d5d <findRSDT(unsigned char*)+0xf5>
c0017d4c:	c6 05 40 10 03 c0 00 	mov    BYTE PTR ds:0xc0031040,0x0
c0017d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d57:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d5b:	eb 1f                	jmp    c0017d7c <findRSDT(unsigned char*)+0x114>
c0017d5d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d62:	75 11                	jne    c0017d75 <findRSDT(unsigned char*)+0x10d>
c0017d64:	c6 05 40 10 03 c0 01 	mov    BYTE PTR ds:0xc0031040,0x1
c0017d6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d6f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d73:	eb 07                	jmp    c0017d7c <findRSDT(unsigned char*)+0x114>
c0017d75:	b8 00 00 00 00       	mov    eax,0x0
c0017d7a:	eb 04                	jmp    c0017d80 <findRSDT(unsigned char*)+0x118>
c0017d7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d80:	83 c4 44             	add    esp,0x44
c0017d83:	5b                   	pop    ebx
c0017d84:	5e                   	pop    esi
c0017d85:	c3                   	ret    

c0017d86 <findDataTable(unsigned char*, char*)>:
c0017d86:	83 ec 1c             	sub    esp,0x1c
c0017d89:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0017d8e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d94:	83 e0 04             	and    eax,0x4
c0017d97:	84 c0                	test   al,al
c0017d99:	75 07                	jne    c0017da2 <findDataTable(unsigned char*, char*)+0x1c>
c0017d9b:	b8 00 00 00 00       	mov    eax,0x0
c0017da0:	eb 7c                	jmp    c0017e1e <findDataTable(unsigned char*, char*)+0x98>
c0017da2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017daa:	a1 2c 0e 03 c0       	mov    eax,ds:0xc0030e2c
c0017daf:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017db3:	7d 3a                	jge    c0017def <findDataTable(unsigned char*, char*)+0x69>
c0017db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db9:	c1 e0 03             	shl    eax,0x3
c0017dbc:	05 40 0e 03 c0       	add    eax,0xc0030e40
c0017dc1:	83 ec 04             	sub    esp,0x4
c0017dc4:	6a 04                	push   0x4
c0017dc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dca:	50                   	push   eax
c0017dcb:	e8 70 88 fe ff       	call   c0000640 <memcmp>
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	85 c0                	test   eax,eax
c0017dd5:	0f 94 c0             	sete   al
c0017dd8:	84 c0                	test   al,al
c0017dda:	74 0d                	je     c0017de9 <findDataTable(unsigned char*, char*)+0x63>
c0017ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de0:	8b 04 c5 44 0e 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf1bc]
c0017de7:	eb 35                	jmp    c0017e1e <findDataTable(unsigned char*, char*)+0x98>
c0017de9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ded:	eb bb                	jmp    c0017daa <findDataTable(unsigned char*, char*)+0x24>
c0017def:	a0 40 10 03 c0       	mov    al,ds:0xc0031040
c0017df4:	84 c0                	test   al,al
c0017df6:	74 07                	je     c0017dff <findDataTable(unsigned char*, char*)+0x79>
c0017df8:	b8 58 00 00 00       	mov    eax,0x58
c0017dfd:	eb 05                	jmp    c0017e04 <findDataTable(unsigned char*, char*)+0x7e>
c0017dff:	b8 52 00 00 00       	mov    eax,0x52
c0017e04:	83 ec 04             	sub    esp,0x4
c0017e07:	50                   	push   eax
c0017e08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e0c:	68 34 b8 02 c0       	push   0xc002b834
c0017e11:	e8 f1 b1 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	b8 00 00 00 00       	mov    eax,0x0
c0017e1e:	83 c4 1c             	add    esp,0x1c
c0017e21:	c3                   	ret    

c0017e22 <scanMADT()>:
c0017e22:	53                   	push   ebx
c0017e23:	83 ec 38             	sub    esp,0x38
c0017e26:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0017e2b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e31:	83 e0 04             	and    eax,0x4
c0017e34:	84 c0                	test   al,al
c0017e36:	0f 84 63 04 00 00    	je     c001829f <scanMADT()+0x47d>
c0017e3c:	e8 76 fb ff ff       	call   c00179b7 <findRSDP()>
c0017e41:	a3 4c 10 03 c0       	mov    ds:0xc003104c,eax
c0017e46:	a1 4c 10 03 c0       	mov    eax,ds:0xc003104c
c0017e4b:	85 c0                	test   eax,eax
c0017e4d:	75 19                	jne    c0017e68 <scanMADT()+0x46>
c0017e4f:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0017e54:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e5a:	83 e2 fb             	and    edx,0xfffffffb
c0017e5d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e63:	e9 3b 04 00 00       	jmp    c00182a3 <scanMADT()+0x481>
c0017e68:	a1 4c 10 03 c0       	mov    eax,ds:0xc003104c
c0017e6d:	83 ec 0c             	sub    esp,0xc
c0017e70:	50                   	push   eax
c0017e71:	e8 f2 fd ff ff       	call   c0017c68 <findRSDT(unsigned char*)>
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	a3 48 10 03 c0       	mov    ds:0xc0031048,eax
c0017e7e:	a1 48 10 03 c0       	mov    eax,ds:0xc0031048
c0017e83:	85 c0                	test   eax,eax
c0017e85:	75 19                	jne    c0017ea0 <scanMADT()+0x7e>
c0017e87:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0017e8c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e92:	83 e2 fb             	and    edx,0xfffffffb
c0017e95:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e9b:	e9 03 04 00 00       	jmp    c00182a3 <scanMADT()+0x481>
c0017ea0:	a1 48 10 03 c0       	mov    eax,ds:0xc0031048
c0017ea5:	83 ec 0c             	sub    esp,0xc
c0017ea8:	50                   	push   eax
c0017ea9:	e8 93 fb ff ff       	call   c0017a41 <loadACPITables(unsigned char*)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	a1 48 10 03 c0       	mov    eax,ds:0xc0031048
c0017eb6:	83 ec 08             	sub    esp,0x8
c0017eb9:	68 02 b7 02 c0       	push   0xc002b702
c0017ebe:	50                   	push   eax
c0017ebf:	e8 c2 fe ff ff       	call   c0017d86 <findDataTable(unsigned char*, char*)>
c0017ec4:	83 c4 10             	add    esp,0x10
c0017ec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ecb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ed0:	75 19                	jne    c0017eeb <scanMADT()+0xc9>
c0017ed2:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0017ed7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017edd:	83 e2 fe             	and    edx,0xfffffffe
c0017ee0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ee6:	e9 b8 03 00 00       	jmp    c00182a3 <scanMADT()+0x481>
c0017eeb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017efa:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017efe:	0f 87 9f 03 00 00    	ja     c00182a3 <scanMADT()+0x481>
c0017f04:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f0c:	0f 87 91 03 00 00    	ja     c00182a3 <scanMADT()+0x481>
c0017f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f1e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f29:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f2d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f35:	8d 50 01             	lea    edx,[eax+0x1]
c0017f38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f40:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f44:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f48:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f4d:	0f 86 4f 03 00 00    	jbe    c00182a2 <scanMADT()+0x480>
c0017f53:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f58:	75 57                	jne    c0017fb1 <scanMADT()+0x18f>
c0017f5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f65:	8a 15 40 12 03 c0    	mov    dl,BYTE PTR ds:0xc0031240
c0017f6b:	0f b6 d2             	movzx  edx,dl
c0017f6e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f72:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f76:	88 82 80 12 03 c0    	mov    BYTE PTR [edx-0x3ffced80],al
c0017f7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f80:	8d 50 01             	lea    edx,[eax+0x1]
c0017f83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f87:	8a 15 40 12 03 c0    	mov    dl,BYTE PTR ds:0xc0031240
c0017f8d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f90:	88 0d 40 12 03 c0    	mov    BYTE PTR ds:0xc0031240,cl
c0017f96:	0f b6 d2             	movzx  edx,dl
c0017f99:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f9d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fa1:	88 82 60 12 03 c0    	mov    BYTE PTR [edx-0x3ffceda0],al
c0017fa7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fac:	e9 da 02 00 00       	jmp    c001828b <scanMADT()+0x469>
c0017fb1:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fb6:	0f 85 14 01 00 00    	jne    c00180d0 <scanMADT()+0x2ae>
c0017fbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc7:	8a 15 00 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031100
c0017fcd:	0f b6 d2             	movzx  edx,dl
c0017fd0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fd4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fd8:	88 82 20 11 03 c0    	mov    BYTE PTR [edx-0x3ffceee0],al
c0017fde:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fe2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fea:	01 d0                	add    eax,edx
c0017fec:	83 c0 2c             	add    eax,0x2c
c0017fef:	8a 00                	mov    al,BYTE PTR [eax]
c0017ff1:	0f b6 d0             	movzx  edx,al
c0017ff4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ffb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fff:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018003:	0f b6 c0             	movzx  eax,al
c0018006:	c1 e0 08             	shl    eax,0x8
c0018009:	89 d1                	mov    ecx,edx
c001800b:	09 c1                	or     ecx,eax
c001800d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018011:	8d 50 02             	lea    edx,[eax+0x2]
c0018014:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018018:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001801c:	0f b6 c0             	movzx  eax,al
c001801f:	c1 e0 10             	shl    eax,0x10
c0018022:	09 c1                	or     ecx,eax
c0018024:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018028:	8d 50 03             	lea    edx,[eax+0x3]
c001802b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018033:	0f b6 c0             	movzx  eax,al
c0018036:	c1 e0 18             	shl    eax,0x18
c0018039:	09 c1                	or     ecx,eax
c001803b:	89 ca                	mov    edx,ecx
c001803d:	a0 00 11 03 c0       	mov    al,ds:0xc0031100
c0018042:	0f b6 c0             	movzx  eax,al
c0018045:	89 14 85 40 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceec0],edx
c001804c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018051:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018055:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018059:	01 d0                	add    eax,edx
c001805b:	83 c0 2c             	add    eax,0x2c
c001805e:	8a 00                	mov    al,BYTE PTR [eax]
c0018060:	0f b6 d0             	movzx  edx,al
c0018063:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018067:	8d 48 01             	lea    ecx,[eax+0x1]
c001806a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018072:	0f b6 c0             	movzx  eax,al
c0018075:	c1 e0 08             	shl    eax,0x8
c0018078:	89 d1                	mov    ecx,edx
c001807a:	09 c1                	or     ecx,eax
c001807c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018080:	8d 50 02             	lea    edx,[eax+0x2]
c0018083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018087:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001808b:	0f b6 c0             	movzx  eax,al
c001808e:	c1 e0 10             	shl    eax,0x10
c0018091:	09 c1                	or     ecx,eax
c0018093:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018097:	8d 50 03             	lea    edx,[eax+0x3]
c001809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180a2:	0f b6 c0             	movzx  eax,al
c00180a5:	c1 e0 18             	shl    eax,0x18
c00180a8:	09 c1                	or     ecx,eax
c00180aa:	89 ca                	mov    edx,ecx
c00180ac:	a0 00 11 03 c0       	mov    al,ds:0xc0031100
c00180b1:	0f b6 c0             	movzx  eax,al
c00180b4:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c00180bb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180c0:	a0 00 11 03 c0       	mov    al,ds:0xc0031100
c00180c5:	40                   	inc    eax
c00180c6:	a2 00 11 03 c0       	mov    ds:0xc0031100,al
c00180cb:	e9 bb 01 00 00       	jmp    c001828b <scanMADT()+0x469>
c00180d0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180d5:	0f 85 e9 00 00 00    	jne    c00181c4 <scanMADT()+0x3a2>
c00180db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180df:	8d 50 01             	lea    edx,[eax+0x1]
c00180e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180ee:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f6:	8d 50 01             	lea    edx,[eax+0x1]
c00180f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018101:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018105:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018109:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001810d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018111:	01 d0                	add    eax,edx
c0018113:	83 c0 2c             	add    eax,0x2c
c0018116:	8a 00                	mov    al,BYTE PTR [eax]
c0018118:	0f b6 d0             	movzx  edx,al
c001811b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018122:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018126:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001812a:	0f b6 c0             	movzx  eax,al
c001812d:	c1 e0 08             	shl    eax,0x8
c0018130:	89 d1                	mov    ecx,edx
c0018132:	09 c1                	or     ecx,eax
c0018134:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018138:	8d 50 02             	lea    edx,[eax+0x2]
c001813b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018143:	0f b6 c0             	movzx  eax,al
c0018146:	c1 e0 10             	shl    eax,0x10
c0018149:	09 c1                	or     ecx,eax
c001814b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814f:	8d 50 03             	lea    edx,[eax+0x3]
c0018152:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018156:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001815a:	0f b6 c0             	movzx  eax,al
c001815d:	c1 e0 18             	shl    eax,0x18
c0018160:	09 c8                	or     eax,ecx
c0018162:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018166:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001816b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018173:	01 d0                	add    eax,edx
c0018175:	83 c0 2c             	add    eax,0x2c
c0018178:	8a 00                	mov    al,BYTE PTR [eax]
c001817a:	0f b6 c0             	movzx  eax,al
c001817d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018181:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018184:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018188:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001818c:	0f b6 d2             	movzx  edx,dl
c001818f:	c1 e2 08             	shl    edx,0x8
c0018192:	09 d0                	or     eax,edx
c0018194:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018199:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001819e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181a7:	88 90 c0 d9 02 c0    	mov    BYTE PTR [eax-0x3ffd2640],dl
c00181ad:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181b2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181b7:	66 89 84 12 e0 10 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcef20],ax
c00181bf:	e9 c7 00 00 00       	jmp    c001828b <scanMADT()+0x469>
c00181c4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181c9:	0f 85 b0 00 00 00    	jne    c001827f <scanMADT()+0x45d>
c00181cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d3:	8d 50 01             	lea    edx,[eax+0x1]
c00181d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181e2:	0f b6 c0             	movzx  eax,al
c00181e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f1:	01 d0                	add    eax,edx
c00181f3:	83 c0 2c             	add    eax,0x2c
c00181f6:	8a 00                	mov    al,BYTE PTR [eax]
c00181f8:	0f b6 d0             	movzx  edx,al
c00181fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0018202:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018206:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001820a:	0f b6 c0             	movzx  eax,al
c001820d:	c1 e0 08             	shl    eax,0x8
c0018210:	09 d0                	or     eax,edx
c0018212:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018216:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001821b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821f:	8d 50 01             	lea    edx,[eax+0x1]
c0018222:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018226:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001822a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001822e:	0f b6 c0             	movzx  eax,al
c0018231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018239:	c1 e0 08             	shl    eax,0x8
c001823c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018240:	89 c1                	mov    ecx,eax
c0018242:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018246:	c1 e0 18             	shl    eax,0x18
c0018249:	89 c3                	mov    ebx,eax
c001824b:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0018250:	8d 50 01             	lea    edx,[eax+0x1]
c0018253:	89 15 50 10 03 c0    	mov    DWORD PTR ds:0xc0031050,edx
c0018259:	09 d9                	or     ecx,ebx
c001825b:	89 ca                	mov    edx,ecx
c001825d:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c0018264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001826c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018270:	68 64 b8 02 c0       	push   0xc002b864
c0018275:	e8 8d ad ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001827a:	83 c4 10             	add    esp,0x10
c001827d:	eb 0c                	jmp    c001828b <scanMADT()+0x469>
c001827f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018284:	75 05                	jne    c001828b <scanMADT()+0x469>
c0018286:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001828b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018290:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018294:	01 d0                	add    eax,edx
c0018296:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001829a:	e9 54 fc ff ff       	jmp    c0017ef3 <scanMADT()+0xd1>
c001829f:	90                   	nop
c00182a0:	eb 01                	jmp    c00182a3 <scanMADT()+0x481>
c00182a2:	90                   	nop
c00182a3:	83 c4 38             	add    esp,0x38
c00182a6:	5b                   	pop    ebx
c00182a7:	c3                   	ret    

c00182a8 <ACPI::ACPI()>:
c00182a8:	83 ec 0c             	sub    esp,0xc
c00182ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182af:	83 ec 08             	sub    esp,0x8
c00182b2:	68 07 b7 02 c0       	push   0xc002b707
c00182b7:	50                   	push   eax
c00182b8:	e8 61 c3 ff ff       	call   c001461e <Device::Device(char const*)>
c00182bd:	83 c4 10             	add    esp,0x10
c00182c0:	ba d8 b8 02 c0       	mov    edx,0xc002b8d8
c00182c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c9:	89 10                	mov    DWORD PTR [eax],edx
c00182cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182cf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182da:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018301:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018308:	e8 15 fb ff ff       	call   c0017e22 <scanMADT()>
c001830d:	90                   	nop
c001830e:	83 c4 0c             	add    esp,0xc
c0018311:	c3                   	ret    

c0018312 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018312:	83 ec 2c             	sub    esp,0x2c
c0018315:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018319:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001831d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018321:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018325:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001832a:	88 d0                	mov    al,dl
c001832c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018330:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018335:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001833d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018341:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018347:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001834b:	0f 8d 97 00 00 00    	jge    c00183e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018351:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018355:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018359:	83 c2 2a             	add    edx,0x2a
c001835c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018360:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018365:	75 78                	jne    c00183df <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018367:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001836b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836f:	83 c2 2a             	add    edx,0x2a
c0018372:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018376:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001837a:	75 63                	jne    c00183df <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001837c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018381:	74 3a                	je     c00183bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018383:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018387:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838b:	83 c2 2a             	add    edx,0x2a
c001838e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018392:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018396:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018399:	39 c2                	cmp    edx,eax
c001839b:	74 10                	je     c00183ad <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001839d:	83 ec 0c             	sub    esp,0xc
c00183a0:	68 a0 b8 02 c0       	push   0xc002b8a0
c00183a5:	e8 0f 23 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c00183aa:	83 c4 10             	add    esp,0x10
c00183ad:	83 ec 0c             	sub    esp,0xc
c00183b0:	68 0c b7 02 c0       	push   0xc002b70c
c00183b5:	e8 ff 22 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183c9:	83 c2 2a             	add    edx,0x2a
c00183cc:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00183d2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183d5:	89 01                	mov    DWORD PTR [ecx],eax
c00183d7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183da:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183df:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183e3:	e9 55 ff ff ff       	jmp    c001833d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183e8:	90                   	nop
c00183e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ed:	83 c4 2c             	add    esp,0x2c
c00183f0:	c2 04 00             	ret    0x4
c00183f3:	90                   	nop

c00183f4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183f4:	83 ec 1c             	sub    esp,0x1c
c00183f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018403:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018408:	88 c8                	mov    al,cl
c001840a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001840e:	88 d0                	mov    al,dl
c0018410:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018418:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001841e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018422:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018425:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018429:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001842d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018431:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018437:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001843b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001843e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018442:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018451:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018455:	8d 48 01             	lea    ecx,[eax+0x1]
c0018458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845c:	83 c2 2a             	add    edx,0x2a
c001845f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018467:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001846d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018471:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018474:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018478:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001847c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018480:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018486:	8d 50 01             	lea    edx,[eax+0x1]
c0018489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001848d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018497:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001849d:	3d 00 02 00 00       	cmp    eax,0x200
c00184a2:	75 10                	jne    c00184b4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184a4:	83 ec 0c             	sub    esp,0xc
c00184a7:	68 1b b7 02 c0       	push   0xc002b71b
c00184ac:	e8 08 22 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c00184b1:	83 c4 10             	add    esp,0x10
c00184b4:	90                   	nop
c00184b5:	83 c4 1c             	add    esp,0x1c
c00184b8:	c3                   	ret    
c00184b9:	90                   	nop

c00184ba <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184ba:	b8 00 00 00 00       	mov    eax,0x0
c00184bf:	c3                   	ret    

c00184c0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184c0:	83 ec 1c             	sub    esp,0x1c
c00184c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184c7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184ce:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00184d3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184d8:	83 ec 08             	sub    esp,0x8
c00184db:	52                   	push   edx
c00184dc:	50                   	push   eax
c00184dd:	e8 32 6a ff ff       	call   c000ef14 <Computer::readCMOS(unsigned char)>
c00184e2:	83 c4 10             	add    esp,0x10
c00184e5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184e9:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00184ee:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184f3:	83 ec 04             	sub    esp,0x4
c00184f6:	6a 01                	push   0x1
c00184f8:	52                   	push   edx
c00184f9:	50                   	push   eax
c00184fa:	e8 2b 6b ff ff       	call   c000f02a <Computer::writeCMOS(unsigned char, unsigned char)>
c00184ff:	83 c4 10             	add    esp,0x10
c0018502:	90                   	nop
c0018503:	83 c4 1c             	add    esp,0x1c
c0018506:	c3                   	ret    
c0018507:	90                   	nop

c0018508 <ACPI::open(int, int, void*)>:
c0018508:	53                   	push   ebx
c0018509:	83 ec 28             	sub    esp,0x28
c001850c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018510:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018517:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001851b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018522:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0018527:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001852d:	83 e0 04             	and    eax,0x4
c0018530:	84 c0                	test   al,al
c0018532:	74 47                	je     c001857b <ACPI::open(int, int, void*)+0x73>
c0018534:	a1 48 10 03 c0       	mov    eax,ds:0xc0031048
c0018539:	83 ec 08             	sub    esp,0x8
c001853c:	68 38 b7 02 c0       	push   0xc002b738
c0018541:	50                   	push   eax
c0018542:	e8 3f f8 ff ff       	call   c0017d86 <findDataTable(unsigned char*, char*)>
c0018547:	83 c4 10             	add    esp,0x10
c001854a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001854e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018553:	74 26                	je     c001857b <ACPI::open(int, int, void*)+0x73>
c0018555:	83 ec 0c             	sub    esp,0xc
c0018558:	68 3d b7 02 c0       	push   0xc002b73d
c001855d:	e8 a5 aa ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018562:	83 c4 10             	add    esp,0x10
c0018565:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018569:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018574:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001857b:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018587:	8a 00                	mov    al,BYTE PTR [eax]
c0018589:	3c 01                	cmp    al,0x1
c001858b:	75 28                	jne    c00185b5 <ACPI::open(int, int, void*)+0xad>
c001858d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018591:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018598:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185a3:	83 ec 0c             	sub    esp,0xc
c00185a6:	68 4e b7 02 c0       	push   0xc002b74e
c00185ab:	e8 57 aa ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00185b0:	83 c4 10             	add    esp,0x10
c00185b3:	eb 25                	jmp    c00185da <ACPI::open(int, int, void*)+0xd2>
c00185b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185b9:	8a 00                	mov    al,BYTE PTR [eax]
c00185bb:	3c 02                	cmp    al,0x2
c00185bd:	75 1b                	jne    c00185da <ACPI::open(int, int, void*)+0xd2>
c00185bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ca:	83 ec 0c             	sub    esp,0xc
c00185cd:	68 56 b7 02 c0       	push   0xc002b756
c00185d2:	e8 30 aa ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185de:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185e4:	83 f0 01             	xor    eax,0x1
c00185e7:	84 c0                	test   al,al
c00185e9:	74 6a                	je     c0018655 <ACPI::open(int, int, void*)+0x14d>
c00185eb:	83 ec 0c             	sub    esp,0xc
c00185ee:	68 5e b7 02 c0       	push   0xc002b75e
c00185f3:	e8 0f aa ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	e8 50 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018600:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018604:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018609:	75 28                	jne    c0018633 <ACPI::open(int, int, void*)+0x12b>
c001860b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001860f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018616:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001861a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018621:	83 ec 0c             	sub    esp,0xc
c0018624:	68 6c b7 02 c0       	push   0xc002b76c
c0018629:	e8 d9 a9 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001862e:	83 c4 10             	add    esp,0x10
c0018631:	eb 22                	jmp    c0018655 <ACPI::open(int, int, void*)+0x14d>
c0018633:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018638:	75 1b                	jne    c0018655 <ACPI::open(int, int, void*)+0x14d>
c001863a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001863e:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018645:	83 ec 0c             	sub    esp,0xc
c0018648:	68 76 b7 02 c0       	push   0xc002b776
c001864d:	e8 b5 a9 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018652:	83 c4 10             	add    esp,0x10
c0018655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018659:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001865f:	84 c0                	test   al,al
c0018661:	74 13                	je     c0018676 <ACPI::open(int, int, void*)+0x16e>
c0018663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018667:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001866d:	83 f0 01             	xor    eax,0x1
c0018670:	0f b6 c0             	movzx  eax,al
c0018673:	40                   	inc    eax
c0018674:	eb 05                	jmp    c001867b <ACPI::open(int, int, void*)+0x173>
c0018676:	b8 00 00 00 00       	mov    eax,0x0
c001867b:	83 ec 08             	sub    esp,0x8
c001867e:	50                   	push   eax
c001867f:	68 80 b7 02 c0       	push   0xc002b780
c0018684:	e8 7e a9 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018690:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018696:	84 c0                	test   al,al
c0018698:	74 67                	je     c0018701 <ACPI::open(int, int, void*)+0x1f9>
c001869a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00186a2:	83 ec 0c             	sub    esp,0xc
c00186a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186a9:	e8 4e 72 ff ff       	call   c000f8fc <malloc>
c00186ae:	83 c4 10             	add    esp,0x10
c00186b1:	89 c3                	mov    ebx,eax
c00186b3:	83 ec 0c             	sub    esp,0xc
c00186b6:	53                   	push   ebx
c00186b7:	e8 26 a3 00 00       	call   c00229e2 <PCI::PCI()>
c00186bc:	83 c4 10             	add    esp,0x10
c00186bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186c7:	83 ec 08             	sub    esp,0x8
c00186ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186ce:	50                   	push   eax
c00186cf:	e8 5a bd ff ff       	call   c001442e <Device::addChild(Device*)>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186db:	8b 00                	mov    eax,DWORD PTR [eax]
c00186dd:	83 c0 08             	add    eax,0x8
c00186e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00186e2:	6a 00                	push   0x0
c00186e4:	6a 00                	push   0x0
c00186e6:	6a 00                	push   0x0
c00186e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186ec:	ff d0                	call   eax
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	83 ec 0c             	sub    esp,0xc
c00186f4:	68 89 b7 02 c0       	push   0xc002b789
c00186f9:	e8 09 a9 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00186fe:	83 c4 10             	add    esp,0x10
c0018701:	83 ec 0c             	sub    esp,0xc
c0018704:	68 94 b7 02 c0       	push   0xc002b794
c0018709:	e8 cb 46 00 00       	call   c001cdd9 <Thr::loadKernelSymbolTable(char const*)>
c001870e:	83 c4 10             	add    esp,0x10
c0018711:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c0018717:	83 ec 08             	sub    esp,0x8
c001871a:	6a 01                	push   0x1
c001871c:	68 b2 b7 02 c0       	push   0xc002b7b2
c0018721:	e8 10 51 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c0018726:	83 c4 10             	add    esp,0x10
c0018729:	83 ec 08             	sub    esp,0x8
c001872c:	53                   	push   ebx
c001872d:	50                   	push   eax
c001872e:	e8 37 53 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c0018733:	83 c4 10             	add    esp,0x10
c0018736:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c001873c:	83 ec 08             	sub    esp,0x8
c001873f:	6a 01                	push   0x1
c0018741:	68 cf b7 02 c0       	push   0xc002b7cf
c0018746:	e8 eb 50 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c001874b:	83 c4 10             	add    esp,0x10
c001874e:	83 ec 08             	sub    esp,0x8
c0018751:	53                   	push   ebx
c0018752:	50                   	push   eax
c0018753:	e8 12 53 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0018760:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018766:	83 e0 04             	and    eax,0x4
c0018769:	84 c0                	test   al,al
c001876b:	0f 84 d2 00 00 00    	je     c0018843 <ACPI::open(int, int, void*)+0x33b>
c0018771:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001877f:	e8 78 71 ff ff       	call   c000f8fc <malloc>
c0018784:	83 c4 10             	add    esp,0x10
c0018787:	89 c3                	mov    ebx,eax
c0018789:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001878e:	83 ec 04             	sub    esp,0x4
c0018791:	50                   	push   eax
c0018792:	68 ec b7 02 c0       	push   0xc002b7ec
c0018797:	53                   	push   ebx
c0018798:	e8 c3 ad ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001879d:	83 c4 10             	add    esp,0x10
c00187a0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00187a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187a9:	74 17                	je     c00187c2 <ACPI::open(int, int, void*)+0x2ba>
c00187ab:	83 ec 0c             	sub    esp,0xc
c00187ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187b2:	e8 7b b0 ff ff       	call   c0013832 <File::exists()>
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	84 c0                	test   al,al
c00187bc:	74 04                	je     c00187c2 <ACPI::open(int, int, void*)+0x2ba>
c00187be:	b0 01                	mov    al,0x1
c00187c0:	eb 02                	jmp    c00187c4 <ACPI::open(int, int, void*)+0x2bc>
c00187c2:	b0 00                	mov    al,0x0
c00187c4:	84 c0                	test   al,al
c00187c6:	74 22                	je     c00187ea <ACPI::open(int, int, void*)+0x2e2>
c00187c8:	83 ec 08             	sub    esp,0x8
c00187cb:	6a 01                	push   0x1
c00187cd:	68 ec b7 02 c0       	push   0xc002b7ec
c00187d2:	e8 5f 50 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c00187d7:	83 c4 10             	add    esp,0x10
c00187da:	83 ec 08             	sub    esp,0x8
c00187dd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187e1:	50                   	push   eax
c00187e2:	e8 83 52 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c00187e7:	83 c4 10             	add    esp,0x10
c00187ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187ef:	74 1e                	je     c001880f <ACPI::open(int, int, void*)+0x307>
c00187f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187f6:	74 17                	je     c001880f <ACPI::open(int, int, void*)+0x307>
c00187f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00187fe:	83 c0 08             	add    eax,0x8
c0018801:	8b 00                	mov    eax,DWORD PTR [eax]
c0018803:	83 ec 0c             	sub    esp,0xc
c0018806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001880a:	ff d0                	call   eax
c001880c:	83 c4 10             	add    esp,0x10
c001880f:	a1 48 10 03 c0       	mov    eax,ds:0xc0031048
c0018814:	83 ec 08             	sub    esp,0x8
c0018817:	68 09 b8 02 c0       	push   0xc002b809
c001881c:	50                   	push   eax
c001881d:	e8 64 f5 ff ff       	call   c0017d86 <findDataTable(unsigned char*, char*)>
c0018822:	83 c4 10             	add    esp,0x10
c0018825:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018829:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001882e:	74 13                	je     c0018843 <ACPI::open(int, int, void*)+0x33b>
c0018830:	83 ec 08             	sub    esp,0x8
c0018833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018837:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001883b:	e8 80 fc ff ff       	call   c00184c0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018840:	83 c4 10             	add    esp,0x10
c0018843:	b8 00 00 00 00       	mov    eax,0x0
c0018848:	83 c4 28             	add    esp,0x28
c001884b:	5b                   	pop    ebx
c001884c:	c3                   	ret    
c001884d:	90                   	nop

c001884e <ACPI::sleep()>:
c001884e:	83 ec 0c             	sub    esp,0xc
c0018851:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c0018856:	85 c0                	test   eax,eax
c0018858:	74 07                	je     c0018861 <ACPI::sleep()+0x13>
c001885a:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001885f:	ff d0                	call   eax
c0018861:	90                   	nop
c0018862:	83 c4 0c             	add    esp,0xc
c0018865:	c3                   	ret    

c0018866 <CPU::close(int, int, void*)>:
c0018866:	31 c0                	xor    eax,eax
c0018868:	c3                   	ret    
c0018869:	90                   	nop

c001886a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001886a:	55                   	push   ebp
c001886b:	57                   	push   edi
c001886c:	56                   	push   esi
c001886d:	53                   	push   ebx
c001886e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018872:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018876:	89 ce                	mov    esi,ecx
c0018878:	89 d5                	mov    ebp,edx
c001887a:	80 f9 04             	cmp    cl,0x4
c001887d:	75 28                	jne    c00188a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001887f:	8d 42 f9             	lea    eax,[edx-0x7]
c0018882:	3c 03                	cmp    al,0x3
c0018884:	0f 86 63 01 00 00    	jbe    c00189ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001888a:	80 fa 03             	cmp    dl,0x3
c001888d:	0f 84 5a 01 00 00    	je     c00189ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018893:	8d 7a f2             	lea    edi,[edx-0xe]
c0018896:	b8 90 db 02 c0       	mov    eax,0xc002db90
c001889b:	89 fb                	mov    ebx,edi
c001889d:	80 fb 01             	cmp    bl,0x1
c00188a0:	77 4e                	ja     c00188f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00188a2:	e9 52 01 00 00       	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a7:	80 f9 05             	cmp    cl,0x5
c00188aa:	75 4d                	jne    c00188f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00188ac:	b8 a0 db 02 c0       	mov    eax,0xc002dba0
c00188b1:	80 fa 03             	cmp    dl,0x3
c00188b4:	0f 86 3f 01 00 00    	jbe    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ba:	8d 7a fa             	lea    edi,[edx-0x6]
c00188bd:	b8 b0 db 02 c0       	mov    eax,0xc002dbb0
c00188c2:	89 fb                	mov    ebx,edi
c00188c4:	80 fb 01             	cmp    bl,0x1
c00188c7:	0f 86 2c 01 00 00    	jbe    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cd:	b8 c0 db 02 c0       	mov    eax,0xc002dbc0
c00188d2:	80 fa 08             	cmp    dl,0x8
c00188d5:	0f 84 1e 01 00 00    	je     c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188db:	89 d7                	mov    edi,edx
c00188dd:	b8 d0 db 02 c0       	mov    eax,0xc002dbd0
c00188e2:	83 e7 fb             	and    edi,0xfffffffb
c00188e5:	89 fb                	mov    ebx,edi
c00188e7:	80 fb 09             	cmp    bl,0x9
c00188ea:	0f 84 09 01 00 00    	je     c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f0:	31 c0                	xor    eax,eax
c00188f2:	89 eb                	mov    ebx,ebp
c00188f4:	0f b6 fb             	movzx  edi,bl
c00188f7:	eb 30                	jmp    c0018929 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188f9:	31 c0                	xor    eax,eax
c00188fb:	80 f9 06             	cmp    cl,0x6
c00188fe:	75 f2                	jne    c00188f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018900:	80 fa 0a             	cmp    dl,0xa
c0018903:	77 ed                	ja     c00188f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018905:	bf de 05 00 00       	mov    edi,0x5de
c001890a:	0f a3 d7             	bt     edi,edx
c001890d:	73 e3                	jae    c00188f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001890f:	b8 e0 db 02 c0       	mov    eax,0xc002dbe0
c0018914:	e9 e0 00 00 00       	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018919:	39 c7                	cmp    edi,eax
c001891b:	0f 84 d3 00 00 00    	je     c00189f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018921:	40                   	inc    eax
c0018922:	3d d0 00 00 00       	cmp    eax,0xd0
c0018927:	74 09                	je     c0018932 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018929:	89 f3                	mov    ebx,esi
c001892b:	80 fb 0f             	cmp    bl,0xf
c001892e:	75 f1                	jne    c0018921 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018930:	eb e7                	jmp    c0018919 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018932:	80 f9 10             	cmp    cl,0x10
c0018935:	75 14                	jne    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018937:	8d 42 fc             	lea    eax,[edx-0x4]
c001893a:	83 e0 fb             	and    eax,0xfffffffb
c001893d:	3c 02                	cmp    al,0x2
c001893f:	76 34                	jbe    c0018975 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018941:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018946:	80 fa 02             	cmp    dl,0x2
c0018949:	eb 24                	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001894b:	80 f9 11             	cmp    cl,0x11
c001894e:	75 13                	jne    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018950:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018955:	80 fa 03             	cmp    dl,0x3
c0018958:	0f 85 9b 00 00 00    	jne    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895e:	e9 91 00 00 00       	jmp    c00189f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018963:	80 f9 12             	cmp    cl,0x12
c0018966:	75 14                	jne    c001897c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018968:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c001896d:	fe ca                	dec    dl
c001896f:	0f 85 84 00 00 00    	jne    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018975:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c001897a:	eb 7d                	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897c:	80 f9 14             	cmp    cl,0x14
c001897f:	75 12                	jne    c0018993 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018981:	4a                   	dec    edx
c0018982:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018987:	80 fa 01             	cmp    dl,0x1
c001898a:	77 6d                	ja     c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898c:	b8 10 dc 02 c0       	mov    eax,0xc002dc10
c0018991:	eb 66                	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018993:	80 f9 15             	cmp    cl,0x15
c0018996:	75 31                	jne    c00189c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018998:	b8 20 dc 02 c0       	mov    eax,0xc002dc20
c001899d:	80 fa 01             	cmp    dl,0x1
c00189a0:	74 57                	je     c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a2:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c00189a7:	80 fa 13             	cmp    dl,0x13
c00189aa:	76 0c                	jbe    c00189b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00189ac:	80 fa 30             	cmp    dl,0x30
c00189af:	75 48                	jne    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b1:	b8 40 dc 02 c0       	mov    eax,0xc002dc40
c00189b6:	eb 41                	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b8:	b9 04 00 09 00       	mov    ecx,0x90004
c00189bd:	0f a3 d1             	bt     ecx,edx
c00189c0:	73 37                	jae    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c2:	b8 30 dc 02 c0       	mov    eax,0xc002dc30
c00189c7:	eb 30                	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c9:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c00189ce:	80 f9 16             	cmp    cl,0x16
c00189d1:	75 26                	jne    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d3:	b8 50 dc 02 c0       	mov    eax,0xc002dc50
c00189d8:	84 d2                	test   dl,dl
c00189da:	74 1d                	je     c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189dc:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c00189e1:	80 fa 30             	cmp    dl,0x30
c00189e4:	75 13                	jne    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189e6:	b8 60 dc 02 c0       	mov    eax,0xc002dc60
c00189eb:	eb 0c                	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ed:	b8 80 db 02 c0       	mov    eax,0xc002db80
c00189f2:	eb 05                	jmp    c00189f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189f4:	b8 f0 db 02 c0       	mov    eax,0xc002dbf0
c00189f9:	5b                   	pop    ebx
c00189fa:	5e                   	pop    esi
c00189fb:	5f                   	pop    edi
c00189fc:	5d                   	pop    ebp
c00189fd:	c3                   	ret    

c00189fe <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a06:	80 f9 04             	cmp    cl,0x4
c0018a09:	75 6b                	jne    c0018a76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018a0b:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018a10:	80 fa 01             	cmp    dl,0x1
c0018a13:	0f 86 92 02 00 00    	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018a1e:	80 fa 02             	cmp    dl,0x2
c0018a21:	0f 84 84 02 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a27:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018a2c:	80 fa 03             	cmp    dl,0x3
c0018a2f:	0f 84 76 02 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a35:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018a3a:	80 fa 04             	cmp    dl,0x4
c0018a3d:	0f 84 68 02 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a43:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018a48:	80 fa 05             	cmp    dl,0x5
c0018a4b:	0f 84 5a 02 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a51:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018a56:	80 fa 07             	cmp    dl,0x7
c0018a59:	0f 84 4c 02 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5f:	83 ea 08             	sub    edx,0x8
c0018a62:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018a67:	80 fa 01             	cmp    dl,0x1
c0018a6a:	0f 87 3b 02 00 00    	ja     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a70:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018a75:	c3                   	ret    
c0018a76:	80 f9 05             	cmp    cl,0x5
c0018a79:	75 45                	jne    c0018ac0 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a7b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a7e:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018a83:	80 f9 02             	cmp    cl,0x2
c0018a86:	0f 86 1f 02 00 00    	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8c:	80 fa 04             	cmp    dl,0x4
c0018a8f:	0f 84 f3 01 00 00    	je     c0018c88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a95:	80 fa 07             	cmp    dl,0x7
c0018a98:	0f 84 0d 02 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9e:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018aa3:	80 fa 08             	cmp    dl,0x8
c0018aa6:	0f 84 ff 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aac:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018ab1:	80 fa 09             	cmp    dl,0x9
c0018ab4:	0f 85 f1 01 00 00    	jne    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aba:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018abf:	c3                   	ret    
c0018ac0:	80 f9 06             	cmp    cl,0x6
c0018ac3:	0f 85 85 01 00 00    	jne    c0018c4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018ac9:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018ace:	80 fa 01             	cmp    dl,0x1
c0018ad1:	0f 84 d4 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad7:	8d 42 fb             	lea    eax,[edx-0x5]
c0018ada:	3c 01                	cmp    al,0x1
c0018adc:	0f 86 ac 01 00 00    	jbe    c0018c8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ae2:	80 fa 03             	cmp    dl,0x3
c0018ae5:	0f 84 a3 01 00 00    	je     c0018c8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018aeb:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018aee:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018af3:	80 f9 01             	cmp    cl,0x1
c0018af6:	0f 86 af 01 00 00    	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afc:	80 fa 09             	cmp    dl,0x9
c0018aff:	0f 84 8f 01 00 00    	je     c0018c94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018b05:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018b08:	80 f9 01             	cmp    cl,0x1
c0018b0b:	0f 86 9a 01 00 00    	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b11:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018b16:	80 fa 0d             	cmp    dl,0xd
c0018b19:	0f 84 8c 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1f:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018b24:	80 fa 0e             	cmp    dl,0xe
c0018b27:	0f 84 7e 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2d:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018b32:	80 fa 0f             	cmp    dl,0xf
c0018b35:	0f 84 70 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3b:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018b40:	80 fa 15             	cmp    dl,0x15
c0018b43:	0f 84 62 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b49:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b4c:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018b51:	80 f9 01             	cmp    cl,0x1
c0018b54:	0f 86 51 01 00 00    	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5a:	80 fa 1a             	cmp    dl,0x1a
c0018b5d:	0f 84 37 01 00 00    	je     c0018c9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b63:	80 fa 1c             	cmp    dl,0x1c
c0018b66:	0f 84 34 01 00 00    	je     c0018ca0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b6c:	80 fa 1d             	cmp    dl,0x1d
c0018b6f:	0f 84 36 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b75:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018b7a:	80 fa 25             	cmp    dl,0x25
c0018b7d:	0f 84 28 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b83:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b86:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018b8b:	80 f9 01             	cmp    cl,0x1
c0018b8e:	0f 86 17 01 00 00    	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b94:	b8 00 db 02 c0       	mov    eax,0xc002db00
c0018b99:	80 fa 2a             	cmp    dl,0x2a
c0018b9c:	0f 84 09 01 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba2:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018ba7:	80 fa 2c             	cmp    dl,0x2c
c0018baa:	0f 84 fb 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb0:	b8 00 db 02 c0       	mov    eax,0xc002db00
c0018bb5:	80 fa 2d             	cmp    dl,0x2d
c0018bb8:	0f 84 ed 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbe:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018bc3:	80 fa 2e             	cmp    dl,0x2e
c0018bc6:	0f 84 df 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcc:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018bd1:	80 fa 2f             	cmp    dl,0x2f
c0018bd4:	0f 84 d1 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bda:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bdd:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018be2:	80 f9 01             	cmp    cl,0x1
c0018be5:	0f 86 c0 00 00 00    	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018beb:	b8 10 db 02 c0       	mov    eax,0xc002db10
c0018bf0:	80 fa 37             	cmp    dl,0x37
c0018bf3:	0f 84 b2 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf9:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0018bfe:	80 fa 3a             	cmp    dl,0x3a
c0018c01:	0f 84 a4 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c07:	b8 30 db 02 c0       	mov    eax,0xc002db30
c0018c0c:	80 fa 3c             	cmp    dl,0x3c
c0018c0f:	0f 84 96 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c15:	b8 40 db 02 c0       	mov    eax,0xc002db40
c0018c1a:	80 fa 3d             	cmp    dl,0x3d
c0018c1d:	0f 84 88 00 00 00    	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c23:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0018c28:	80 fa 3e             	cmp    dl,0x3e
c0018c2b:	74 7e                	je     c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c30:	3c 01                	cmp    al,0x1
c0018c32:	76 72                	jbe    c0018ca6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c34:	80 fa 3f             	cmp    dl,0x3f
c0018c37:	74 6d                	je     c0018ca6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c39:	80 fa 4a             	cmp    dl,0x4a
c0018c3c:	74 0a                	je     c0018c48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c3e:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018c43:	80 fa 4d             	cmp    dl,0x4d
c0018c46:	75 63                	jne    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c48:	b8 10 db 02 c0       	mov    eax,0xc002db10
c0018c4d:	c3                   	ret    
c0018c4e:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018c53:	80 f9 0b             	cmp    cl,0xb
c0018c56:	75 0a                	jne    c0018c62 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c58:	fe ca                	dec    dl
c0018c5a:	75 4f                	jne    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5c:	b8 50 db 02 c0       	mov    eax,0xc002db50
c0018c61:	c3                   	ret    
c0018c62:	80 f9 0f             	cmp    cl,0xf
c0018c65:	75 44                	jne    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c67:	b8 60 db 02 c0       	mov    eax,0xc002db60
c0018c6c:	80 fa 02             	cmp    dl,0x2
c0018c6f:	76 3a                	jbe    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c71:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c74:	3c 01                	cmp    al,0x1
c0018c76:	76 0a                	jbe    c0018c82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c78:	b8 ee bb 02 c0       	mov    eax,0xc002bbee
c0018c7d:	80 fa 06             	cmp    dl,0x6
c0018c80:	75 29                	jne    c0018cab <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c82:	b8 70 db 02 c0       	mov    eax,0xc002db70
c0018c87:	c3                   	ret    
c0018c88:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018c8d:	c3                   	ret    
c0018c8e:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018c93:	c3                   	ret    
c0018c94:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018c99:	c3                   	ret    
c0018c9a:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018c9f:	c3                   	ret    
c0018ca0:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018ca5:	c3                   	ret    
c0018ca6:	b8 30 db 02 c0       	mov    eax,0xc002db30
c0018cab:	c3                   	ret    

c0018cac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018cac:	60                   	pusha  
c0018cad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cb9:	9c                   	pushf  
c0018cba:	fa                   	cli    
c0018cbb:	0f 09                	wbinvd 
c0018cbd:	0f 30                	wrmsr  
c0018cbf:	9d                   	popf   
c0018cc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cc4:	89 02                	mov    DWORD PTR [edx],eax
c0018cc6:	61                   	popa   
c0018cc7:	c3                   	ret    

c0018cc8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018cc8:	60                   	pusha  
c0018cc9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ccd:	9c                   	pushf  
c0018cce:	fa                   	cli    
c0018ccf:	0f 09                	wbinvd 
c0018cd1:	31 c0                	xor    eax,eax
c0018cd3:	31 d2                	xor    edx,edx
c0018cd5:	0f 32                	rdmsr  
c0018cd7:	9d                   	popf   
c0018cd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cdc:	89 02                	mov    DWORD PTR [edx],eax
c0018cde:	61                   	popa   
c0018cdf:	c3                   	ret    

c0018ce0 <CPU::AMD_K6_writeback(int, int, int)>:
c0018ce0:	56                   	push   esi
c0018ce1:	53                   	push   ebx
c0018ce2:	83 ec 10             	sub    esp,0x10
c0018ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ce9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cee:	75 5d                	jne    c0018d4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cf0:	83 f8 08             	cmp    eax,0x8
c0018cf3:	75 09                	jne    c0018cfe <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cf5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cfa:	7e 13                	jle    c0018d0f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cfc:	eb 30                	jmp    c0018d2e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cfe:	83 f8 06             	cmp    eax,0x6
c0018d01:	7c 4a                	jl     c0018d4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d03:	83 f8 07             	cmp    eax,0x7
c0018d06:	7e 07                	jle    c0018d0f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018d08:	83 f8 09             	cmp    eax,0x9
c0018d0b:	74 21                	je     c0018d2e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018d0d:	eb 3e                	jmp    c0018d4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d0f:	89 e6                	mov    esi,esp
c0018d11:	8b 1d a4 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7a4
c0018d17:	56                   	push   esi
c0018d18:	c1 eb 15             	shr    ebx,0x15
c0018d1b:	68 82 00 00 c0       	push   0xc0000082
c0018d20:	83 e3 7e             	and    ebx,0x7e
c0018d23:	e8 a0 ff ff ff       	call   c0018cc8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d28:	56                   	push   esi
c0018d29:	6a 00                	push   0x0
c0018d2b:	53                   	push   ebx
c0018d2c:	eb 12                	jmp    c0018d40 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d2e:	89 e3                	mov    ebx,esp
c0018d30:	53                   	push   ebx
c0018d31:	68 82 00 00 c0       	push   0xc0000082
c0018d36:	e8 8d ff ff ff       	call   c0018cc8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d3b:	53                   	push   ebx
c0018d3c:	6a 00                	push   0x0
c0018d3e:	6a 00                	push   0x0
c0018d40:	68 82 00 00 c0       	push   0xc0000082
c0018d45:	e8 62 ff ff ff       	call   c0018cac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d4a:	83 c4 18             	add    esp,0x18
c0018d4d:	83 c4 10             	add    esp,0x10
c0018d50:	5b                   	pop    ebx
c0018d51:	5e                   	pop    esi
c0018d52:	c3                   	ret    
c0018d53:	90                   	nop

c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d54:	55                   	push   ebp
c0018d55:	57                   	push   edi
c0018d56:	56                   	push   esi
c0018d57:	53                   	push   ebx
c0018d58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d60:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d64:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d68:	39 05 80 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc80,eax
c0018d6e:	75 23                	jne    c0018d93 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d70:	a1 ac 12 03 c0       	mov    eax,ds:0xc00312ac
c0018d75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d79:	89 06                	mov    DWORD PTR [esi],eax
c0018d7b:	a1 a8 12 03 c0       	mov    eax,ds:0xc00312a8
c0018d80:	89 07                	mov    DWORD PTR [edi],eax
c0018d82:	a1 a4 12 03 c0       	mov    eax,ds:0xc00312a4
c0018d87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d8a:	a1 a0 12 03 c0       	mov    eax,ds:0xc00312a0
c0018d8f:	89 02                	mov    DWORD PTR [edx],eax
c0018d91:	eb 3f                	jmp    c0018dd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d93:	31 c9                	xor    ecx,ecx
c0018d95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d99:	0f a2                	cpuid  
c0018d9b:	89 06                	mov    DWORD PTR [esi],eax
c0018d9d:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018da3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018da6:	89 10                	mov    DWORD PTR [eax],edx
c0018da8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dac:	a3 80 dc 02 c0       	mov    ds:0xc002dc80,eax
c0018db1:	8b 06                	mov    eax,DWORD PTR [esi]
c0018db3:	a3 ac 12 03 c0       	mov    ds:0xc00312ac,eax
c0018db8:	8b 07                	mov    eax,DWORD PTR [edi]
c0018dba:	a3 a8 12 03 c0       	mov    ds:0xc00312a8,eax
c0018dbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018dc2:	a3 a4 12 03 c0       	mov    ds:0xc00312a4,eax
c0018dc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dcd:	a3 a0 12 03 c0       	mov    ds:0xc00312a0,eax
c0018dd2:	5b                   	pop    ebx
c0018dd3:	5e                   	pop    esi
c0018dd4:	5f                   	pop    edi
c0018dd5:	5d                   	pop    ebp
c0018dd6:	c3                   	ret    
c0018dd7:	90                   	nop

c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>:
c0018dd8:	83 ec 10             	sub    esp,0x10
c0018ddb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ddf:	50                   	push   eax
c0018de0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de4:	50                   	push   eax
c0018de5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de9:	50                   	push   eax
c0018dea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dee:	50                   	push   eax
c0018def:	6a 01                	push   0x1
c0018df1:	e8 5e ff ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018df6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dfa:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018dfe:	0f 95 c0             	setne  al
c0018e01:	83 c4 24             	add    esp,0x24
c0018e04:	c3                   	ret    
c0018e05:	90                   	nop

c0018e06 <CPU::cpuidCheckECX(unsigned int)>:
c0018e06:	83 ec 10             	sub    esp,0x10
c0018e09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e0d:	50                   	push   eax
c0018e0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e12:	50                   	push   eax
c0018e13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e17:	50                   	push   eax
c0018e18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1c:	50                   	push   eax
c0018e1d:	6a 01                	push   0x1
c0018e1f:	e8 30 ff ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e28:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e2c:	0f 95 c0             	setne  al
c0018e2f:	83 c4 24             	add    esp,0x24
c0018e32:	c3                   	ret    
c0018e33:	90                   	nop

c0018e34 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e34:	83 ec 10             	sub    esp,0x10
c0018e37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e3b:	50                   	push   eax
c0018e3c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e40:	50                   	push   eax
c0018e41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e45:	50                   	push   eax
c0018e46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4a:	50                   	push   eax
c0018e4b:	6a 07                	push   0x7
c0018e4d:	e8 02 ff ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e56:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e5a:	0f 95 c0             	setne  al
c0018e5d:	83 c4 24             	add    esp,0x24
c0018e60:	c3                   	ret    
c0018e61:	90                   	nop

c0018e62 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e62:	83 ec 10             	sub    esp,0x10
c0018e65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e69:	50                   	push   eax
c0018e6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e6e:	50                   	push   eax
c0018e6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e73:	50                   	push   eax
c0018e74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e78:	50                   	push   eax
c0018e79:	6a 07                	push   0x7
c0018e7b:	e8 d4 fe ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e84:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e88:	0f 95 c0             	setne  al
c0018e8b:	83 c4 24             	add    esp,0x24
c0018e8e:	c3                   	ret    
c0018e8f:	90                   	nop

c0018e90 <CPU::CPU()>:
c0018e90:	83 ec 0c             	sub    esp,0xc
c0018e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e97:	83 ec 08             	sub    esp,0x8
c0018e9a:	68 ee bb 02 c0       	push   0xc002bbee
c0018e9f:	50                   	push   eax
c0018ea0:	e8 79 b7 ff ff       	call   c001461e <Device::Device(char const*)>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	ba c8 bc 02 c0       	mov    edx,0xc002bcc8
c0018ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb1:	89 10                	mov    DWORD PTR [eax],edx
c0018eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec5:	05 78 01 00 00       	add    eax,0x178
c0018eca:	83 ec 0c             	sub    esp,0xc
c0018ecd:	50                   	push   eax
c0018ece:	e8 41 62 ff ff       	call   c000f114 <GDT::GDT()>
c0018ed3:	83 c4 10             	add    esp,0x10
c0018ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eda:	05 7c 09 00 00       	add    eax,0x97c
c0018edf:	83 ec 0c             	sub    esp,0xc
c0018ee2:	50                   	push   eax
c0018ee3:	e8 8e 64 ff ff       	call   c000f376 <IDT::IDT()>
c0018ee8:	83 c4 10             	add    esp,0x10
c0018eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eef:	05 7c 11 00 00       	add    eax,0x117c
c0018ef4:	83 ec 0c             	sub    esp,0xc
c0018ef7:	50                   	push   eax
c0018ef8:	e8 7b 86 ff ff       	call   c0011578 <TSS::TSS()>
c0018efd:	83 c4 10             	add    esp,0x10
c0018f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f04:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f0f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018f19:	90                   	nop
c0018f1a:	83 c4 0c             	add    esp,0xc
c0018f1d:	c3                   	ret    

c0018f1e <CPU::displayFeatures()>:
c0018f1e:	53                   	push   ebx
c0018f1f:	83 ec 10             	sub    esp,0x10
c0018f22:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f26:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f2c:	68 fc b8 02 c0       	push   0xc002b8fc
c0018f31:	e8 d1 a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018f36:	59                   	pop    ecx
c0018f37:	58                   	pop    eax
c0018f38:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f3e:	50                   	push   eax
c0018f3f:	68 0d b9 02 c0       	push   0xc002b90d
c0018f44:	e8 be a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018f49:	58                   	pop    eax
c0018f4a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f50:	5a                   	pop    edx
c0018f51:	c1 e8 0e             	shr    eax,0xe
c0018f54:	0f b6 c0             	movzx  eax,al
c0018f57:	50                   	push   eax
c0018f58:	68 1e b9 02 c0       	push   0xc002b91e
c0018f5d:	e8 a5 a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018f62:	59                   	pop    ecx
c0018f63:	58                   	pop    eax
c0018f64:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f6a:	66 c1 e8 06          	shr    ax,0x6
c0018f6e:	0f b6 c0             	movzx  eax,al
c0018f71:	50                   	push   eax
c0018f72:	68 2f b9 02 c0       	push   0xc002b92f
c0018f77:	e8 8b a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018f7c:	c7 04 24 dc bd 02 c0 	mov    DWORD PTR [esp],0xc002bddc
c0018f83:	e8 7f a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018f88:	83 c4 10             	add    esp,0x10
c0018f8b:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0018f90:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f97:	74 05                	je     c0018f9e <CPU::displayFeatures()+0x80>
c0018f99:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0018f9e:	52                   	push   edx
c0018f9f:	52                   	push   edx
c0018fa0:	50                   	push   eax
c0018fa1:	68 40 b9 02 c0       	push   0xc002b940
c0018fa6:	e8 5c a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018fab:	83 c4 10             	add    esp,0x10
c0018fae:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0018fb3:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018fba:	78 05                	js     c0018fc1 <CPU::displayFeatures()+0xa3>
c0018fbc:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0018fc1:	51                   	push   ecx
c0018fc2:	51                   	push   ecx
c0018fc3:	50                   	push   eax
c0018fc4:	68 57 b9 02 c0       	push   0xc002b957
c0018fc9:	e8 39 a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0018fd6:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fdd:	75 05                	jne    c0018fe4 <CPU::displayFeatures()+0xc6>
c0018fdf:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0018fe4:	52                   	push   edx
c0018fe5:	52                   	push   edx
c0018fe6:	50                   	push   eax
c0018fe7:	68 6e b9 02 c0       	push   0xc002b96e
c0018fec:	e8 16 a0 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0018ff9:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0019000:	75 05                	jne    c0019007 <CPU::displayFeatures()+0xe9>
c0019002:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0019007:	51                   	push   ecx
c0019008:	51                   	push   ecx
c0019009:	50                   	push   eax
c001900a:	68 85 b9 02 c0       	push   0xc002b985
c001900f:	e8 f3 9f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0019014:	83 c4 10             	add    esp,0x10
c0019017:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c001901c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019023:	75 05                	jne    c001902a <CPU::displayFeatures()+0x10c>
c0019025:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c001902a:	52                   	push   edx
c001902b:	52                   	push   edx
c001902c:	50                   	push   eax
c001902d:	68 9c b9 02 c0       	push   0xc002b99c
c0019032:	e8 d0 9f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c001903f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019046:	75 05                	jne    c001904d <CPU::displayFeatures()+0x12f>
c0019048:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c001904d:	51                   	push   ecx
c001904e:	51                   	push   ecx
c001904f:	50                   	push   eax
c0019050:	68 b3 b9 02 c0       	push   0xc002b9b3
c0019055:	e8 ad 9f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001905a:	83 c4 10             	add    esp,0x10
c001905d:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0019062:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019069:	75 05                	jne    c0019070 <CPU::displayFeatures()+0x152>
c001906b:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0019070:	52                   	push   edx
c0019071:	52                   	push   edx
c0019072:	50                   	push   eax
c0019073:	68 ca b9 02 c0       	push   0xc002b9ca
c0019078:	e8 8a 9f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0019085:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001908c:	75 05                	jne    c0019093 <CPU::displayFeatures()+0x175>
c001908e:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0019093:	51                   	push   ecx
c0019094:	51                   	push   ecx
c0019095:	50                   	push   eax
c0019096:	68 e1 b9 02 c0       	push   0xc002b9e1
c001909b:	e8 67 9f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c00190a8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00190af:	75 05                	jne    c00190b6 <CPU::displayFeatures()+0x198>
c00190b1:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c00190b6:	52                   	push   edx
c00190b7:	52                   	push   edx
c00190b8:	50                   	push   eax
c00190b9:	68 f8 b9 02 c0       	push   0xc002b9f8
c00190be:	e8 44 9f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00190c3:	83 c4 10             	add    esp,0x10
c00190c6:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c00190cb:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190d2:	75 05                	jne    c00190d9 <CPU::displayFeatures()+0x1bb>
c00190d4:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c00190d9:	51                   	push   ecx
c00190da:	51                   	push   ecx
c00190db:	50                   	push   eax
c00190dc:	68 0f ba 02 c0       	push   0xc002ba0f
c00190e1:	e8 21 9f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00190e6:	83 c4 10             	add    esp,0x10
c00190e9:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c00190ee:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190f5:	75 05                	jne    c00190fc <CPU::displayFeatures()+0x1de>
c00190f7:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c00190fc:	52                   	push   edx
c00190fd:	52                   	push   edx
c00190fe:	50                   	push   eax
c00190ff:	68 26 ba 02 c0       	push   0xc002ba26
c0019104:	e8 fe 9e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0019111:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019118:	75 05                	jne    c001911f <CPU::displayFeatures()+0x201>
c001911a:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c001911f:	51                   	push   ecx
c0019120:	51                   	push   ecx
c0019121:	50                   	push   eax
c0019122:	68 3d ba 02 c0       	push   0xc002ba3d
c0019127:	e8 db 9e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0019134:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001913b:	75 05                	jne    c0019142 <CPU::displayFeatures()+0x224>
c001913d:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0019142:	52                   	push   edx
c0019143:	52                   	push   edx
c0019144:	50                   	push   eax
c0019145:	68 54 ba 02 c0       	push   0xc002ba54
c001914a:	e8 b8 9e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c0019157:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001915e:	78 05                	js     c0019165 <CPU::displayFeatures()+0x247>
c0019160:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0019165:	51                   	push   ecx
c0019166:	51                   	push   ecx
c0019167:	50                   	push   eax
c0019168:	68 6b ba 02 c0       	push   0xc002ba6b
c001916d:	e8 95 9e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0019172:	83 c4 10             	add    esp,0x10
c0019175:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c001917a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019181:	75 05                	jne    c0019188 <CPU::displayFeatures()+0x26a>
c0019183:	b8 84 a1 02 c0       	mov    eax,0xc002a184
c0019188:	52                   	push   edx
c0019189:	52                   	push   edx
c001918a:	50                   	push   eax
c001918b:	68 82 ba 02 c0       	push   0xc002ba82
c0019190:	e8 72 9e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0019195:	83 c4 18             	add    esp,0x18
c0019198:	5b                   	pop    ebx
c0019199:	c3                   	ret    

c001919a <CPU::detectFeatures()>:
c001919a:	55                   	push   ebp
c001919b:	57                   	push   edi
c001919c:	56                   	push   esi
c001919d:	53                   	push   ebx
c001919e:	83 ec 50             	sub    esp,0x50
c00191a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00191a5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00191af:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00191b6:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00191bc:	6a 0d                	push   0xd
c00191be:	6a 00                	push   0x0
c00191c0:	57                   	push   edi
c00191c1:	e8 b2 75 fe ff       	call   c0000778 <memset>
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00191ce:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191d5:	0f 84 20 09 00 00    	je     c0019afb <CPU::detectFeatures()+0x961>
c00191db:	83 ec 0c             	sub    esp,0xc
c00191de:	6a 10                	push   0x10
c00191e0:	e8 f3 fb ff ff       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c00191e5:	83 e0 01             	and    eax,0x1
c00191e8:	8d 14 00             	lea    edx,[eax+eax*1]
c00191eb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f1:	83 e0 fd             	and    eax,0xfffffffd
c00191f4:	09 d0                	or     eax,edx
c00191f6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191fc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019203:	e8 d0 fb ff ff       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c0019208:	83 e0 01             	and    eax,0x1
c001920b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019212:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019218:	83 e0 fb             	and    eax,0xfffffffb
c001921b:	09 d0                	or     eax,edx
c001921d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019223:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001922a:	e8 a9 fb ff ff       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c001922f:	83 e0 01             	and    eax,0x1
c0019232:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019239:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001923f:	83 e0 f7             	and    eax,0xfffffff7
c0019242:	09 d0                	or     eax,edx
c0019244:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001924a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019251:	e8 82 fb ff ff       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c0019256:	83 e0 01             	and    eax,0x1
c0019259:	c1 e0 04             	shl    eax,0x4
c001925c:	88 c2                	mov    dl,al
c001925e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019264:	83 e0 ef             	and    eax,0xffffffef
c0019267:	09 d0                	or     eax,edx
c0019269:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001926f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019276:	e8 5d fb ff ff       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c001927b:	83 e0 01             	and    eax,0x1
c001927e:	c1 e0 05             	shl    eax,0x5
c0019281:	88 c2                	mov    dl,al
c0019283:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019289:	83 e0 df             	and    eax,0xffffffdf
c001928c:	09 d0                	or     eax,edx
c001928e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019294:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001929b:	e8 38 fb ff ff       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c00192a0:	83 e0 01             	and    eax,0x1
c00192a3:	8d 14 00             	lea    edx,[eax+eax*1]
c00192a6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192ac:	83 e0 fd             	and    eax,0xfffffffd
c00192af:	09 d0                	or     eax,edx
c00192b1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192b7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192be:	e8 15 fb ff ff       	call   c0018dd8 <CPU::cpuidCheckEDX(unsigned int)>
c00192c3:	83 e0 01             	and    eax,0x1
c00192c6:	c1 e0 06             	shl    eax,0x6
c00192c9:	88 c2                	mov    dl,al
c00192cb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192d1:	83 e0 bf             	and    eax,0xffffffbf
c00192d4:	09 d0                	or     eax,edx
c00192d6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192dc:	58                   	pop    eax
c00192dd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192e1:	56                   	push   esi
c00192e2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192e6:	55                   	push   ebp
c00192e7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192eb:	50                   	push   eax
c00192ec:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192f0:	52                   	push   edx
c00192f1:	6a 00                	push   0x0
c00192f3:	e8 5c fa ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192f8:	83 c4 1c             	add    esp,0x1c
c00192fb:	6a 04                	push   0x4
c00192fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019301:	50                   	push   eax
c0019302:	57                   	push   edi
c0019303:	e8 3c 74 fe ff       	call   c0000744 <memcpy>
c0019308:	83 c4 0c             	add    esp,0xc
c001930b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019311:	6a 04                	push   0x4
c0019313:	56                   	push   esi
c0019314:	50                   	push   eax
c0019315:	e8 2a 74 fe ff       	call   c0000744 <memcpy>
c001931a:	83 c4 0c             	add    esp,0xc
c001931d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019323:	6a 04                	push   0x4
c0019325:	55                   	push   ebp
c0019326:	50                   	push   eax
c0019327:	e8 18 74 fe ff       	call   c0000744 <memcpy>
c001932c:	58                   	pop    eax
c001932d:	5a                   	pop    edx
c001932e:	68 99 ba 02 c0       	push   0xc002ba99
c0019333:	57                   	push   edi
c0019334:	e8 87 75 fe ff       	call   c00008c0 <strcmp>
c0019339:	83 c4 10             	add    esp,0x10
c001933c:	85 c0                	test   eax,eax
c001933e:	75 0f                	jne    c001934f <CPU::detectFeatures()+0x1b5>
c0019340:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001934a:	e9 22 02 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c001934f:	50                   	push   eax
c0019350:	50                   	push   eax
c0019351:	68 a6 ba 02 c0       	push   0xc002baa6
c0019356:	57                   	push   edi
c0019357:	e8 64 75 fe ff       	call   c00008c0 <strcmp>
c001935c:	83 c4 10             	add    esp,0x10
c001935f:	85 c0                	test   eax,eax
c0019361:	74 dd                	je     c0019340 <CPU::detectFeatures()+0x1a6>
c0019363:	51                   	push   ecx
c0019364:	51                   	push   ecx
c0019365:	68 b3 ba 02 c0       	push   0xc002bab3
c001936a:	57                   	push   edi
c001936b:	e8 50 75 fe ff       	call   c00008c0 <strcmp>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	85 c0                	test   eax,eax
c0019375:	74 2a                	je     c00193a1 <CPU::detectFeatures()+0x207>
c0019377:	52                   	push   edx
c0019378:	52                   	push   edx
c0019379:	68 c0 ba 02 c0       	push   0xc002bac0
c001937e:	57                   	push   edi
c001937f:	e8 3c 75 fe ff       	call   c00008c0 <strcmp>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	85 c0                	test   eax,eax
c0019389:	74 16                	je     c00193a1 <CPU::detectFeatures()+0x207>
c001938b:	50                   	push   eax
c001938c:	50                   	push   eax
c001938d:	68 cd ba 02 c0       	push   0xc002bacd
c0019392:	57                   	push   edi
c0019393:	e8 28 75 fe ff       	call   c00008c0 <strcmp>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	85 c0                	test   eax,eax
c001939d:	74 48                	je     c00193e7 <CPU::detectFeatures()+0x24d>
c001939f:	eb 0f                	jmp    c00193b0 <CPU::detectFeatures()+0x216>
c00193a1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00193ab:	e9 c1 01 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c00193b0:	50                   	push   eax
c00193b1:	50                   	push   eax
c00193b2:	68 da ba 02 c0       	push   0xc002bada
c00193b7:	57                   	push   edi
c00193b8:	e8 03 75 fe ff       	call   c00008c0 <strcmp>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	85 c0                	test   eax,eax
c00193c2:	74 23                	je     c00193e7 <CPU::detectFeatures()+0x24d>
c00193c4:	50                   	push   eax
c00193c5:	50                   	push   eax
c00193c6:	68 e7 ba 02 c0       	push   0xc002bae7
c00193cb:	57                   	push   edi
c00193cc:	e8 ef 74 fe ff       	call   c00008c0 <strcmp>
c00193d1:	83 c4 10             	add    esp,0x10
c00193d4:	85 c0                	test   eax,eax
c00193d6:	75 1e                	jne    c00193f6 <CPU::detectFeatures()+0x25c>
c00193d8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193e2:	e9 8a 01 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c00193e7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193f1:	e9 7b 01 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c00193f6:	50                   	push   eax
c00193f7:	50                   	push   eax
c00193f8:	68 f4 ba 02 c0       	push   0xc002baf4
c00193fd:	57                   	push   edi
c00193fe:	e8 bd 74 fe ff       	call   c00008c0 <strcmp>
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	85 c0                	test   eax,eax
c0019408:	75 0f                	jne    c0019419 <CPU::detectFeatures()+0x27f>
c001940a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019414:	e9 58 01 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c0019419:	50                   	push   eax
c001941a:	50                   	push   eax
c001941b:	68 b3 ba 02 c0       	push   0xc002bab3
c0019420:	57                   	push   edi
c0019421:	e8 9a 74 fe ff       	call   c00008c0 <strcmp>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	85 c0                	test   eax,eax
c001942b:	75 0f                	jne    c001943c <CPU::detectFeatures()+0x2a2>
c001942d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019437:	e9 35 01 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c001943c:	50                   	push   eax
c001943d:	50                   	push   eax
c001943e:	68 01 bb 02 c0       	push   0xc002bb01
c0019443:	57                   	push   edi
c0019444:	e8 77 74 fe ff       	call   c00008c0 <strcmp>
c0019449:	83 c4 10             	add    esp,0x10
c001944c:	85 c0                	test   eax,eax
c001944e:	75 0f                	jne    c001945f <CPU::detectFeatures()+0x2c5>
c0019450:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001945a:	e9 12 01 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c001945f:	51                   	push   ecx
c0019460:	51                   	push   ecx
c0019461:	68 0e bb 02 c0       	push   0xc002bb0e
c0019466:	57                   	push   edi
c0019467:	e8 54 74 fe ff       	call   c00008c0 <strcmp>
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	85 c0                	test   eax,eax
c0019471:	75 0f                	jne    c0019482 <CPU::detectFeatures()+0x2e8>
c0019473:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001947d:	e9 ef 00 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c0019482:	52                   	push   edx
c0019483:	52                   	push   edx
c0019484:	68 1b bb 02 c0       	push   0xc002bb1b
c0019489:	57                   	push   edi
c001948a:	e8 31 74 fe ff       	call   c00008c0 <strcmp>
c001948f:	83 c4 10             	add    esp,0x10
c0019492:	85 c0                	test   eax,eax
c0019494:	75 0f                	jne    c00194a5 <CPU::detectFeatures()+0x30b>
c0019496:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00194a0:	e9 cc 00 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c00194a5:	50                   	push   eax
c00194a6:	50                   	push   eax
c00194a7:	68 28 bb 02 c0       	push   0xc002bb28
c00194ac:	57                   	push   edi
c00194ad:	e8 0e 74 fe ff       	call   c00008c0 <strcmp>
c00194b2:	83 c4 10             	add    esp,0x10
c00194b5:	85 c0                	test   eax,eax
c00194b7:	75 0f                	jne    c00194c8 <CPU::detectFeatures()+0x32e>
c00194b9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00194c3:	e9 a9 00 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c00194c8:	50                   	push   eax
c00194c9:	50                   	push   eax
c00194ca:	68 35 bb 02 c0       	push   0xc002bb35
c00194cf:	57                   	push   edi
c00194d0:	e8 eb 73 fe ff       	call   c00008c0 <strcmp>
c00194d5:	83 c4 10             	add    esp,0x10
c00194d8:	85 c0                	test   eax,eax
c00194da:	75 0f                	jne    c00194eb <CPU::detectFeatures()+0x351>
c00194dc:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194e6:	e9 86 00 00 00       	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c00194eb:	50                   	push   eax
c00194ec:	50                   	push   eax
c00194ed:	68 42 bb 02 c0       	push   0xc002bb42
c00194f2:	57                   	push   edi
c00194f3:	e8 c8 73 fe ff       	call   c00008c0 <strcmp>
c00194f8:	83 c4 10             	add    esp,0x10
c00194fb:	85 c0                	test   eax,eax
c00194fd:	75 0c                	jne    c001950b <CPU::detectFeatures()+0x371>
c00194ff:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019509:	eb 66                	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c001950b:	50                   	push   eax
c001950c:	50                   	push   eax
c001950d:	68 4f bb 02 c0       	push   0xc002bb4f
c0019512:	57                   	push   edi
c0019513:	e8 a8 73 fe ff       	call   c00008c0 <strcmp>
c0019518:	83 c4 10             	add    esp,0x10
c001951b:	85 c0                	test   eax,eax
c001951d:	75 0c                	jne    c001952b <CPU::detectFeatures()+0x391>
c001951f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019529:	eb 46                	jmp    c0019571 <CPU::detectFeatures()+0x3d7>
c001952b:	50                   	push   eax
c001952c:	50                   	push   eax
c001952d:	68 5c bb 02 c0       	push   0xc002bb5c
c0019532:	57                   	push   edi
c0019533:	e8 88 73 fe ff       	call   c00008c0 <strcmp>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	85 c0                	test   eax,eax
c001953d:	74 e0                	je     c001951f <CPU::detectFeatures()+0x385>
c001953f:	50                   	push   eax
c0019540:	50                   	push   eax
c0019541:	68 69 bb 02 c0       	push   0xc002bb69
c0019546:	57                   	push   edi
c0019547:	e8 74 73 fe ff       	call   c00008c0 <strcmp>
c001954c:	83 c4 10             	add    esp,0x10
c001954f:	85 c0                	test   eax,eax
c0019551:	74 cc                	je     c001951f <CPU::detectFeatures()+0x385>
c0019553:	51                   	push   ecx
c0019554:	51                   	push   ecx
c0019555:	68 76 bb 02 c0       	push   0xc002bb76
c001955a:	57                   	push   edi
c001955b:	e8 60 73 fe ff       	call   c00008c0 <strcmp>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	85 c0                	test   eax,eax
c0019565:	74 b8                	je     c001951f <CPU::detectFeatures()+0x385>
c0019567:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019571:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019576:	0f 86 be 00 00 00    	jbe    c001963a <CPU::detectFeatures()+0x4a0>
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	68 80 00 00 00       	push   0x80
c0019584:	e8 ab f8 ff ff       	call   c0018e34 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019589:	83 e0 01             	and    eax,0x1
c001958c:	c1 e0 06             	shl    eax,0x6
c001958f:	88 c2                	mov    dl,al
c0019591:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019597:	83 e0 bf             	and    eax,0xffffffbf
c001959a:	09 d0                	or     eax,edx
c001959c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195a2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00195a9:	e8 86 f8 ff ff       	call   c0018e34 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195ae:	83 e0 01             	and    eax,0x1
c00195b1:	c1 e0 04             	shl    eax,0x4
c00195b4:	88 c2                	mov    dl,al
c00195b6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195bc:	83 e0 ef             	and    eax,0xffffffef
c00195bf:	09 d0                	or     eax,edx
c00195c1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195c7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195ce:	e8 61 f8 ff ff       	call   c0018e34 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195d3:	c1 e0 07             	shl    eax,0x7
c00195d6:	88 c2                	mov    dl,al
c00195d8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195de:	83 e0 7f             	and    eax,0x7f
c00195e1:	09 d0                	or     eax,edx
c00195e3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195e9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195f0:	e8 6d f8 ff ff       	call   c0018e62 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195f5:	83 e0 01             	and    eax,0x1
c00195f8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195ff:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019605:	83 e0 f7             	and    eax,0xfffffff7
c0019608:	09 d0                	or     eax,edx
c001960a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019610:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019617:	e8 46 f8 ff ff       	call   c0018e62 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001961c:	83 c4 10             	add    esp,0x10
c001961f:	83 e0 01             	and    eax,0x1
c0019622:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019629:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001962f:	83 e0 fb             	and    eax,0xfffffffb
c0019632:	09 d0                	or     eax,edx
c0019634:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001963a:	83 ec 0c             	sub    esp,0xc
c001963d:	56                   	push   esi
c001963e:	55                   	push   ebp
c001963f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019643:	57                   	push   edi
c0019644:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019648:	50                   	push   eax
c0019649:	6a 01                	push   0x1
c001964b:	e8 04 f7 ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019650:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019654:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001965a:	88 ca                	mov    dl,cl
c001965c:	83 e0 f0             	and    eax,0xfffffff0
c001965f:	83 e2 0f             	and    edx,0xf
c0019662:	09 d0                	or     eax,edx
c0019664:	88 ca                	mov    dl,cl
c0019666:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001966c:	c0 ea 04             	shr    dl,0x4
c001966f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019673:	0f b6 c2             	movzx  eax,dl
c0019676:	83 c4 20             	add    esp,0x20
c0019679:	c1 e0 06             	shl    eax,0x6
c001967c:	89 c5                	mov    ebp,eax
c001967e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019684:	66 25 3f c0          	and    ax,0xc03f
c0019688:	09 e8                	or     eax,ebp
c001968a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019691:	89 c8                	mov    eax,ecx
c0019693:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019699:	c1 e8 08             	shr    eax,0x8
c001969c:	83 e2 3f             	and    edx,0x3f
c001969f:	83 e0 0f             	and    eax,0xf
c00196a2:	89 c5                	mov    ebp,eax
c00196a4:	c1 e5 06             	shl    ebp,0x6
c00196a7:	09 d5                	or     ebp,edx
c00196a9:	89 ea                	mov    edx,ebp
c00196ab:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00196b1:	88 c2                	mov    dl,al
c00196b3:	c0 ea 02             	shr    dl,0x2
c00196b6:	89 d5                	mov    ebp,edx
c00196b8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00196be:	83 e2 c0             	and    edx,0xffffffc0
c00196c1:	09 d5                	or     ebp,edx
c00196c3:	89 ea                	mov    edx,ebp
c00196c5:	89 cd                	mov    ebp,ecx
c00196c7:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196cd:	c1 ed 0c             	shr    ebp,0xc
c00196d0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00196d6:	83 e5 03             	and    ebp,0x3
c00196d9:	83 e2 cf             	and    edx,0xffffffcf
c00196dc:	c1 e5 04             	shl    ebp,0x4
c00196df:	09 d5                	or     ebp,edx
c00196e1:	3c 06                	cmp    al,0x6
c00196e3:	89 ea                	mov    edx,ebp
c00196e5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196eb:	74 04                	je     c00196f1 <CPU::detectFeatures()+0x557>
c00196ed:	3c 0f                	cmp    al,0xf
c00196ef:	75 5c                	jne    c001974d <CPU::detectFeatures()+0x5b3>
c00196f1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196f5:	89 cd                	mov    ebp,ecx
c00196f7:	c1 ed 10             	shr    ebp,0x10
c00196fa:	c1 e5 04             	shl    ebp,0x4
c00196fd:	09 ea                	or     edx,ebp
c00196ff:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019705:	0f b6 d2             	movzx  edx,dl
c0019708:	66 81 e5 3f c0       	and    bp,0xc03f
c001970d:	c1 e2 06             	shl    edx,0x6
c0019710:	09 ea                	or     edx,ebp
c0019712:	3c 0f                	cmp    al,0xf
c0019714:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001971b:	75 30                	jne    c001974d <CPU::detectFeatures()+0x5b3>
c001971d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019723:	c1 e9 14             	shr    ecx,0x14
c0019726:	83 e0 3f             	and    eax,0x3f
c0019729:	83 c1 0f             	add    ecx,0xf
c001972c:	88 ca                	mov    dl,cl
c001972e:	c0 e9 02             	shr    cl,0x2
c0019731:	c1 e2 06             	shl    edx,0x6
c0019734:	09 d0                	or     eax,edx
c0019736:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001973c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019742:	83 e0 c0             	and    eax,0xffffffc0
c0019745:	09 c1                	or     ecx,eax
c0019747:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001974d:	83 ec 0c             	sub    esp,0xc
c0019750:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019757:	56                   	push   esi
c0019758:	8d 44 24 28          	lea    eax,[esp+0x28]
c001975c:	50                   	push   eax
c001975d:	57                   	push   edi
c001975e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019762:	55                   	push   ebp
c0019763:	68 00 00 00 80       	push   0x80000000
c0019768:	e8 e7 f5 ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001976d:	83 c4 20             	add    esp,0x20
c0019770:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019778:	8d 44 24 18          	lea    eax,[esp+0x18]
c001977c:	76 1e                	jbe    c001979c <CPU::detectFeatures()+0x602>
c001977e:	83 ec 0c             	sub    esp,0xc
c0019781:	56                   	push   esi
c0019782:	50                   	push   eax
c0019783:	57                   	push   edi
c0019784:	55                   	push   ebp
c0019785:	68 01 00 00 80       	push   0x80000001
c001978a:	e8 c5 f5 ff ff       	call   c0018d54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001978f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019799:	83 c4 20             	add    esp,0x20
c001979c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00197a2:	83 f8 01             	cmp    eax,0x1
c00197a5:	75 6f                	jne    c0019816 <CPU::detectFeatures()+0x67c>
c00197a7:	51                   	push   ecx
c00197a8:	51                   	push   ecx
c00197a9:	68 82 bb 02 c0       	push   0xc002bb82
c00197ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197b2:	56                   	push   esi
c00197b3:	e8 7c 70 fe ff       	call   c0000834 <strcpy>
c00197b8:	5f                   	pop    edi
c00197b9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197bf:	5d                   	pop    ebp
c00197c0:	66 c1 e8 06          	shr    ax,0x6
c00197c4:	0f b6 c0             	movzx  eax,al
c00197c7:	50                   	push   eax
c00197c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ce:	c1 e8 0e             	shr    eax,0xe
c00197d1:	0f b6 c0             	movzx  eax,al
c00197d4:	50                   	push   eax
c00197d5:	e8 24 f2 ff ff       	call   c00189fe <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197da:	5a                   	pop    edx
c00197db:	59                   	pop    ecx
c00197dc:	50                   	push   eax
c00197dd:	56                   	push   esi
c00197de:	e8 91 71 fe ff       	call   c0000974 <strcat>
c00197e3:	5f                   	pop    edi
c00197e4:	5d                   	pop    ebp
c00197e5:	56                   	push   esi
c00197e6:	53                   	push   ebx
c00197e7:	e8 24 ae ff ff       	call   c0014610 <Device::setName(char const*)>
c00197ec:	58                   	pop    eax
c00197ed:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197f3:	5a                   	pop    edx
c00197f4:	68 89 bb 02 c0       	push   0xc002bb89
c00197f9:	50                   	push   eax
c00197fa:	e8 c1 70 fe ff       	call   c00008c0 <strcmp>
c00197ff:	83 c4 10             	add    esp,0x10
c0019802:	85 c0                	test   eax,eax
c0019804:	0f 85 71 03 00 00    	jne    c0019b7b <CPU::detectFeatures()+0x9e1>
c001980a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019811:	e9 65 03 00 00       	jmp    c0019b7b <CPU::detectFeatures()+0x9e1>
c0019816:	83 f8 02             	cmp    eax,0x2
c0019819:	0f 85 b5 00 00 00    	jne    c00198d4 <CPU::detectFeatures()+0x73a>
c001981f:	57                   	push   edi
c0019820:	57                   	push   edi
c0019821:	68 9b bb 02 c0       	push   0xc002bb9b
c0019826:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001982a:	56                   	push   esi
c001982b:	e8 04 70 fe ff       	call   c0000834 <strcpy>
c0019830:	5d                   	pop    ebp
c0019831:	58                   	pop    eax
c0019832:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019838:	66 c1 e8 06          	shr    ax,0x6
c001983c:	0f b6 c0             	movzx  eax,al
c001983f:	50                   	push   eax
c0019840:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019846:	c1 e8 0e             	shr    eax,0xe
c0019849:	0f b6 c0             	movzx  eax,al
c001984c:	50                   	push   eax
c001984d:	e8 18 f0 ff ff       	call   c001886a <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019852:	5a                   	pop    edx
c0019853:	59                   	pop    ecx
c0019854:	50                   	push   eax
c0019855:	56                   	push   esi
c0019856:	e8 19 71 fe ff       	call   c0000974 <strcat>
c001985b:	5f                   	pop    edi
c001985c:	5d                   	pop    ebp
c001985d:	56                   	push   esi
c001985e:	53                   	push   ebx
c001985f:	e8 ac ad ff ff       	call   c0014610 <Device::setName(char const*)>
c0019864:	58                   	pop    eax
c0019865:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001986b:	5a                   	pop    edx
c001986c:	68 a0 bb 02 c0       	push   0xc002bba0
c0019871:	50                   	push   eax
c0019872:	e8 49 70 fe ff       	call   c00008c0 <strcmp>
c0019877:	83 c4 10             	add    esp,0x10
c001987a:	85 c0                	test   eax,eax
c001987c:	75 20                	jne    c001989e <CPU::detectFeatures()+0x704>
c001987e:	8b 15 68 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e768
c0019884:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001988a:	a8 01                	test   al,0x1
c001988c:	74 10                	je     c001989e <CPU::detectFeatures()+0x704>
c001988e:	83 e0 fe             	and    eax,0xfffffffe
c0019891:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019897:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001989e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198a4:	c1 e8 0e             	shr    eax,0xe
c00198a7:	3c 05                	cmp    al,0x5
c00198a9:	0f 85 cc 02 00 00    	jne    c0019b7b <CPU::detectFeatures()+0x9e1>
c00198af:	56                   	push   esi
c00198b0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00198b6:	83 e0 0f             	and    eax,0xf
c00198b9:	50                   	push   eax
c00198ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198c0:	66 c1 e8 06          	shr    ax,0x6
c00198c4:	0f b6 c0             	movzx  eax,al
c00198c7:	50                   	push   eax
c00198c8:	6a 05                	push   0x5
c00198ca:	e8 11 f4 ff ff       	call   c0018ce0 <CPU::AMD_K6_writeback(int, int, int)>
c00198cf:	e9 1f 02 00 00       	jmp    c0019af3 <CPU::detectFeatures()+0x959>
c00198d4:	8d 50 fd             	lea    edx,[eax-0x3]
c00198d7:	83 fa 01             	cmp    edx,0x1
c00198da:	76 09                	jbe    c00198e5 <CPU::detectFeatures()+0x74b>
c00198dc:	83 f8 06             	cmp    eax,0x6
c00198df:	0f 85 91 01 00 00    	jne    c0019a76 <CPU::detectFeatures()+0x8dc>
c00198e5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198eb:	c1 ea 0e             	shr    edx,0xe
c00198ee:	80 fa 05             	cmp    dl,0x5
c00198f1:	75 7b                	jne    c001996e <CPU::detectFeatures()+0x7d4>
c00198f3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198f9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198fe:	66 81 fa 00 01       	cmp    dx,0x100
c0019903:	75 0c                	jne    c0019911 <CPU::detectFeatures()+0x777>
c0019905:	51                   	push   ecx
c0019906:	51                   	push   ecx
c0019907:	68 a7 bb 02 c0       	push   0xc002bba7
c001990c:	e9 dc 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019911:	66 81 fa 00 02       	cmp    dx,0x200
c0019916:	75 0c                	jne    c0019924 <CPU::detectFeatures()+0x78a>
c0019918:	52                   	push   edx
c0019919:	52                   	push   edx
c001991a:	68 ba bb 02 c0       	push   0xc002bbba
c001991f:	e9 c9 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019924:	66 81 fa 40 02       	cmp    dx,0x240
c0019929:	75 0c                	jne    c0019937 <CPU::detectFeatures()+0x79d>
c001992b:	50                   	push   eax
c001992c:	50                   	push   eax
c001992d:	68 cc bb 02 c0       	push   0xc002bbcc
c0019932:	e9 b6 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019937:	83 f8 06             	cmp    eax,0x6
c001993a:	75 0c                	jne    c0019948 <CPU::detectFeatures()+0x7ae>
c001993c:	50                   	push   eax
c001993d:	50                   	push   eax
c001993e:	68 de bb 02 c0       	push   0xc002bbde
c0019943:	e9 a5 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019948:	83 f8 04             	cmp    eax,0x4
c001994b:	75 0c                	jne    c0019959 <CPU::detectFeatures()+0x7bf>
c001994d:	50                   	push   eax
c001994e:	50                   	push   eax
c001994f:	68 ea bb 02 c0       	push   0xc002bbea
c0019954:	e9 94 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019959:	83 f8 03             	cmp    eax,0x3
c001995c:	0f 85 19 02 00 00    	jne    c0019b7b <CPU::detectFeatures()+0x9e1>
c0019962:	50                   	push   eax
c0019963:	50                   	push   eax
c0019964:	68 f2 bb 02 c0       	push   0xc002bbf2
c0019969:	e9 7f 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c001996e:	80 fa 06             	cmp    dl,0x6
c0019971:	0f 85 db 00 00 00    	jne    c0019a52 <CPU::detectFeatures()+0x8b8>
c0019977:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001997d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019982:	66 81 fa 80 01       	cmp    dx,0x180
c0019987:	75 0c                	jne    c0019995 <CPU::detectFeatures()+0x7fb>
c0019989:	50                   	push   eax
c001998a:	50                   	push   eax
c001998b:	68 fd bb 02 c0       	push   0xc002bbfd
c0019990:	e9 58 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019995:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001999b:	66 f7 c1 80 ff       	test   cx,0xff80
c00199a0:	75 0c                	jne    c00199ae <CPU::detectFeatures()+0x814>
c00199a2:	50                   	push   eax
c00199a3:	50                   	push   eax
c00199a4:	68 0d bc 02 c0       	push   0xc002bc0d
c00199a9:	e9 3f 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c00199ae:	66 81 fa 40 02       	cmp    dx,0x240
c00199b3:	75 0c                	jne    c00199c1 <CPU::detectFeatures()+0x827>
c00199b5:	55                   	push   ebp
c00199b6:	55                   	push   ebp
c00199b7:	68 14 bc 02 c0       	push   0xc002bc14
c00199bc:	e9 2c 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c00199c1:	66 81 fa 80 02       	cmp    dx,0x280
c00199c6:	75 0c                	jne    c00199d4 <CPU::detectFeatures()+0x83a>
c00199c8:	57                   	push   edi
c00199c9:	57                   	push   edi
c00199ca:	68 1d bc 02 c0       	push   0xc002bc1d
c00199cf:	e9 19 01 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c00199d4:	66 81 fa 40 03       	cmp    dx,0x340
c00199d9:	74 ed                	je     c00199c8 <CPU::detectFeatures()+0x82e>
c00199db:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199e0:	75 0c                	jne    c00199ee <CPU::detectFeatures()+0x854>
c00199e2:	56                   	push   esi
c00199e3:	56                   	push   esi
c00199e4:	68 24 bc 02 c0       	push   0xc002bc24
c00199e9:	e9 ff 00 00 00       	jmp    c0019aed <CPU::detectFeatures()+0x953>
c00199ee:	83 f8 06             	cmp    eax,0x6
c00199f1:	0f 84 45 ff ff ff    	je     c001993c <CPU::detectFeatures()+0x7a2>
c00199f7:	83 f8 04             	cmp    eax,0x4
c00199fa:	0f 84 4d ff ff ff    	je     c001994d <CPU::detectFeatures()+0x7b3>
c0019a00:	83 f8 03             	cmp    eax,0x3
c0019a03:	0f 85 72 01 00 00    	jne    c0019b7b <CPU::detectFeatures()+0x9e1>
c0019a09:	51                   	push   ecx
c0019a0a:	51                   	push   ecx
c0019a0b:	68 2d bc 02 c0       	push   0xc002bc2d
c0019a10:	53                   	push   ebx
c0019a11:	e8 fa ab ff ff       	call   c0014610 <Device::setName(char const*)>
c0019a16:	b1 c1                	mov    cl,0xc1
c0019a18:	88 c8                	mov    al,cl
c0019a1a:	e6 22                	out    0x22,al
c0019a1c:	e4 23                	in     al,0x23
c0019a1e:	88 c2                	mov    dl,al
c0019a20:	88 c8                	mov    al,cl
c0019a22:	e6 22                	out    0x22,al
c0019a24:	88 d0                	mov    al,dl
c0019a26:	83 c8 10             	or     eax,0x10
c0019a29:	e6 23                	out    0x23,al
c0019a2b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a32:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a35:	89 d0                	mov    eax,edx
c0019a37:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a3d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a41:	40                   	inc    eax
c0019a42:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a48:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a4d:	e9 a1 00 00 00       	jmp    c0019af3 <CPU::detectFeatures()+0x959>
c0019a52:	83 f8 06             	cmp    eax,0x6
c0019a55:	0f 84 e1 fe ff ff    	je     c001993c <CPU::detectFeatures()+0x7a2>
c0019a5b:	83 f8 04             	cmp    eax,0x4
c0019a5e:	0f 84 e9 fe ff ff    	je     c001994d <CPU::detectFeatures()+0x7b3>
c0019a64:	83 f8 03             	cmp    eax,0x3
c0019a67:	0f 85 0e 01 00 00    	jne    c0019b7b <CPU::detectFeatures()+0x9e1>
c0019a6d:	52                   	push   edx
c0019a6e:	52                   	push   edx
c0019a6f:	68 38 bc 02 c0       	push   0xc002bc38
c0019a74:	eb 77                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019a76:	83 f8 07             	cmp    eax,0x7
c0019a79:	75 09                	jne    c0019a84 <CPU::detectFeatures()+0x8ea>
c0019a7b:	50                   	push   eax
c0019a7c:	50                   	push   eax
c0019a7d:	68 42 bc 02 c0       	push   0xc002bc42
c0019a82:	eb 69                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019a84:	83 f8 0a             	cmp    eax,0xa
c0019a87:	75 09                	jne    c0019a92 <CPU::detectFeatures()+0x8f8>
c0019a89:	50                   	push   eax
c0019a8a:	50                   	push   eax
c0019a8b:	68 4d bc 02 c0       	push   0xc002bc4d
c0019a90:	eb 5b                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019a92:	83 f8 0b             	cmp    eax,0xb
c0019a95:	75 09                	jne    c0019aa0 <CPU::detectFeatures()+0x906>
c0019a97:	50                   	push   eax
c0019a98:	50                   	push   eax
c0019a99:	68 55 bc 02 c0       	push   0xc002bc55
c0019a9e:	eb 4d                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019aa0:	83 f8 08             	cmp    eax,0x8
c0019aa3:	75 09                	jne    c0019aae <CPU::detectFeatures()+0x914>
c0019aa5:	50                   	push   eax
c0019aa6:	50                   	push   eax
c0019aa7:	68 5e bc 02 c0       	push   0xc002bc5e
c0019aac:	eb 3f                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019aae:	83 f8 09             	cmp    eax,0x9
c0019ab1:	75 09                	jne    c0019abc <CPU::detectFeatures()+0x922>
c0019ab3:	50                   	push   eax
c0019ab4:	50                   	push   eax
c0019ab5:	68 66 bc 02 c0       	push   0xc002bc66
c0019aba:	eb 31                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019abc:	83 f8 05             	cmp    eax,0x5
c0019abf:	75 09                	jne    c0019aca <CPU::detectFeatures()+0x930>
c0019ac1:	50                   	push   eax
c0019ac2:	50                   	push   eax
c0019ac3:	68 6e bc 02 c0       	push   0xc002bc6e
c0019ac8:	eb 23                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019aca:	83 f8 0c             	cmp    eax,0xc
c0019acd:	75 09                	jne    c0019ad8 <CPU::detectFeatures()+0x93e>
c0019acf:	55                   	push   ebp
c0019ad0:	55                   	push   ebp
c0019ad1:	68 7c bc 02 c0       	push   0xc002bc7c
c0019ad6:	eb 15                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019ad8:	83 f8 0d             	cmp    eax,0xd
c0019adb:	75 09                	jne    c0019ae6 <CPU::detectFeatures()+0x94c>
c0019add:	57                   	push   edi
c0019ade:	57                   	push   edi
c0019adf:	68 87 bc 02 c0       	push   0xc002bc87
c0019ae4:	eb 07                	jmp    c0019aed <CPU::detectFeatures()+0x953>
c0019ae6:	56                   	push   esi
c0019ae7:	56                   	push   esi
c0019ae8:	68 9b bc 02 c0       	push   0xc002bc9b
c0019aed:	53                   	push   ebx
c0019aee:	e8 1d ab ff ff       	call   c0014610 <Device::setName(char const*)>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	e9 80 00 00 00       	jmp    c0019b7b <CPU::detectFeatures()+0x9e1>
c0019afb:	51                   	push   ecx
c0019afc:	51                   	push   ecx
c0019afd:	68 e7 ba 02 c0       	push   0xc002bae7
c0019b02:	57                   	push   edi
c0019b03:	e8 2c 6d fe ff       	call   c0000834 <strcpy>
c0019b08:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019b12:	e8 97 67 fe ff       	call   c00002ae <is486>
c0019b17:	83 c4 10             	add    esp,0x10
c0019b1a:	85 c0                	test   eax,eax
c0019b1c:	74 2b                	je     c0019b49 <CPU::detectFeatures()+0x9af>
c0019b1e:	52                   	push   edx
c0019b1f:	52                   	push   edx
c0019b20:	68 a7 bc 02 c0       	push   0xc002bca7
c0019b25:	53                   	push   ebx
c0019b26:	e8 e5 aa ff ff       	call   c0014610 <Device::setName(char const*)>
c0019b2b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b32:	0f 20 c0             	mov    eax,cr0
c0019b35:	83 e0 14             	and    eax,0x14
c0019b38:	83 c4 10             	add    esp,0x10
c0019b3b:	83 f8 04             	cmp    eax,0x4
c0019b3e:	75 1f                	jne    c0019b5f <CPU::detectFeatures()+0x9c5>
c0019b40:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b47:	eb 32                	jmp    c0019b7b <CPU::detectFeatures()+0x9e1>
c0019b49:	50                   	push   eax
c0019b4a:	50                   	push   eax
c0019b4b:	68 b2 bc 02 c0       	push   0xc002bcb2
c0019b50:	53                   	push   ebx
c0019b51:	e8 ba aa ff ff       	call   c0014610 <Device::setName(char const*)>
c0019b56:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b5d:	eb d3                	jmp    c0019b32 <CPU::detectFeatures()+0x998>
c0019b5f:	e8 25 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b64:	83 e0 01             	and    eax,0x1
c0019b67:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b6a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b70:	83 e0 fd             	and    eax,0xfffffffd
c0019b73:	09 d0                	or     eax,edx
c0019b75:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b7b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b82:	83 c4 4c             	add    esp,0x4c
c0019b85:	5b                   	pop    ebx
c0019b86:	5e                   	pop    esi
c0019b87:	5f                   	pop    edi
c0019b88:	5d                   	pop    ebp
c0019b89:	c3                   	ret    

c0019b8a <CPU::setupSMEP()>:
c0019b8a:	0f 20 e0             	mov    eax,cr4
c0019b8d:	0d 00 00 10 00       	or     eax,0x100000
c0019b92:	0f 22 e0             	mov    cr4,eax
c0019b95:	c3                   	ret    

c0019b96 <CPU::setupUMIP()>:
c0019b96:	0f 20 e0             	mov    eax,cr4
c0019b99:	80 cc 08             	or     ah,0x8
c0019b9c:	0f 22 e0             	mov    cr4,eax
c0019b9f:	c3                   	ret    

c0019ba0 <CPU::setupTSC()>:
c0019ba0:	0f 20 e0             	mov    eax,cr4
c0019ba3:	83 c8 04             	or     eax,0x4
c0019ba6:	0f 22 e0             	mov    cr4,eax
c0019ba9:	c3                   	ret    

c0019baa <CPU::setupLargePages()>:
c0019baa:	0f 20 e0             	mov    eax,cr4
c0019bad:	83 c8 10             	or     eax,0x10
c0019bb0:	0f 22 e0             	mov    cr4,eax
c0019bb3:	c3                   	ret    

c0019bb4 <CPU::setupPAT()>:
c0019bb4:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0019bb9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bc0:	74 2c                	je     c0019bee <CPU::setupPAT()+0x3a>
c0019bc2:	53                   	push   ebx
c0019bc3:	83 ec 10             	sub    esp,0x10
c0019bc6:	68 77 02 00 00       	push   0x277
c0019bcb:	50                   	push   eax
c0019bcc:	e8 d3 52 ff ff       	call   c000eea4 <Computer::rdmsr(unsigned int)>
c0019bd1:	83 e2 f8             	and    edx,0xfffffff8
c0019bd4:	83 ca 01             	or     edx,0x1
c0019bd7:	52                   	push   edx
c0019bd8:	50                   	push   eax
c0019bd9:	68 77 02 00 00       	push   0x277
c0019bde:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c0019be4:	e8 e7 52 ff ff       	call   c000eed0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019be9:	83 c4 28             	add    esp,0x28
c0019bec:	5b                   	pop    ebx
c0019bed:	c3                   	ret    
c0019bee:	c3                   	ret    
c0019bef:	90                   	nop

c0019bf0 <CPU::setupMTRR()>:
c0019bf0:	c3                   	ret    
c0019bf1:	90                   	nop

c0019bf2 <CPU::setupGlobalPages()>:
c0019bf2:	0f 20 e0             	mov    eax,cr4
c0019bf5:	0c 80                	or     al,0x80
c0019bf7:	0f 22 e0             	mov    cr4,eax
c0019bfa:	c3                   	ret    
c0019bfb:	90                   	nop

c0019bfc <CPU::allowUsermodeDataAccess()>:
c0019bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c00:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c07:	74 03                	je     c0019c0c <CPU::allowUsermodeDataAccess()+0x10>
c0019c09:	0f 01 cb             	stac   
c0019c0c:	c3                   	ret    
c0019c0d:	90                   	nop

c0019c0e <CPU::prohibitUsermodeDataAccess()>:
c0019c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c12:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c19:	74 03                	je     c0019c1e <CPU::prohibitUsermodeDataAccess()+0x10>
c0019c1b:	0f 01 ca             	clac   
c0019c1e:	c3                   	ret    
c0019c1f:	90                   	nop

c0019c20 <CPU::setupSMAP()>:
c0019c20:	0f 20 e0             	mov    eax,cr4
c0019c23:	0d 00 00 20 00       	or     eax,0x200000
c0019c28:	0f 22 e0             	mov    cr4,eax
c0019c2b:	eb e1                	jmp    c0019c0e <CPU::prohibitUsermodeDataAccess()>
c0019c2d:	90                   	nop

c0019c2e <CPU::setupFeatures()>:
c0019c2e:	83 ec 0c             	sub    esp,0xc
c0019c31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c35:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c3c:	74 07                	je     c0019c45 <CPU::setupFeatures()+0x17>
c0019c3e:	52                   	push   edx
c0019c3f:	e8 46 ff ff ff       	call   c0019b8a <CPU::setupSMEP()>
c0019c44:	58                   	pop    eax
c0019c45:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c4c:	74 07                	je     c0019c55 <CPU::setupFeatures()+0x27>
c0019c4e:	52                   	push   edx
c0019c4f:	e8 cc ff ff ff       	call   c0019c20 <CPU::setupSMAP()>
c0019c54:	58                   	pop    eax
c0019c55:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c5c:	74 07                	je     c0019c65 <CPU::setupFeatures()+0x37>
c0019c5e:	52                   	push   edx
c0019c5f:	e8 32 ff ff ff       	call   c0019b96 <CPU::setupUMIP()>
c0019c64:	58                   	pop    eax
c0019c65:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c6c:	74 07                	je     c0019c75 <CPU::setupFeatures()+0x47>
c0019c6e:	52                   	push   edx
c0019c6f:	e8 2c ff ff ff       	call   c0019ba0 <CPU::setupTSC()>
c0019c74:	58                   	pop    eax
c0019c75:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c7c:	74 07                	je     c0019c85 <CPU::setupFeatures()+0x57>
c0019c7e:	52                   	push   edx
c0019c7f:	e8 26 ff ff ff       	call   c0019baa <CPU::setupLargePages()>
c0019c84:	59                   	pop    ecx
c0019c85:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c8c:	74 07                	je     c0019c95 <CPU::setupFeatures()+0x67>
c0019c8e:	52                   	push   edx
c0019c8f:	e8 5e ff ff ff       	call   c0019bf2 <CPU::setupGlobalPages()>
c0019c94:	58                   	pop    eax
c0019c95:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c9c:	74 0c                	je     c0019caa <CPU::setupFeatures()+0x7c>
c0019c9e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019ca2:	83 c4 0c             	add    esp,0xc
c0019ca5:	e9 0a ff ff ff       	jmp    c0019bb4 <CPU::setupPAT()>
c0019caa:	83 c4 0c             	add    esp,0xc
c0019cad:	c3                   	ret    

c0019cae <CPU::open(int, int, void*)>:
c0019cae:	57                   	push   edi
c0019caf:	56                   	push   esi
c0019cb0:	53                   	push   ebx
c0019cb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cb9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019cbf:	83 ec 0c             	sub    esp,0xc
c0019cc2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019cc8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019cce:	50                   	push   eax
c0019ccf:	e8 bc 54 ff ff       	call   c000f190 <GDT::setup()>
c0019cd4:	83 c4 0c             	add    esp,0xc
c0019cd7:	6a 00                	push   0x0
c0019cd9:	68 ef be ad de       	push   0xdeadbeef
c0019cde:	57                   	push   edi
c0019cdf:	e8 d4 78 ff ff       	call   c00115b8 <TSS::setup(unsigned long, unsigned long)>
c0019ce4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ce7:	e8 ac 78 ff ff       	call   c0011598 <TSS::flush()>
c0019cec:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cf5:	e8 f2 56 ff ff       	call   c000f3ec <IDT::setup()>
c0019cfa:	b8 00 04 00 00       	mov    eax,0x400
c0019cff:	0f 23 f8             	mov    db7,eax
c0019d02:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019d0c:	e8 8d 62 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0019d11:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019d17:	89 30                	mov    DWORD PTR [eax],esi
c0019d19:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d1f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d22:	58                   	pop    eax
c0019d23:	5a                   	pop    edx
c0019d24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d2e:	e8 c3 89 ff ff       	call   c00126f6 <VAS::setCPUSpecific(unsigned long)>
c0019d33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d36:	e8 5f f4 ff ff       	call   c001919a <CPU::detectFeatures()>
c0019d3b:	e8 ce bc ff ff       	call   c0015a0e <setupInterruptController()>
c0019d40:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d46:	a1 80 e7 02 c0       	mov    eax,ds:0xc002e780
c0019d4b:	83 e0 10             	and    eax,0x10
c0019d4e:	83 f8 01             	cmp    eax,0x1
c0019d51:	19 c0                	sbb    eax,eax
c0019d53:	83 e0 46             	and    eax,0x46
c0019d56:	83 c0 1e             	add    eax,0x1e
c0019d59:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d5c:	e8 bb d1 ff ff       	call   c0016f1c <setupTimer(int)>
c0019d61:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d6a:	e8 bf fe ff ff       	call   c0019c2e <CPU::setupFeatures()>
c0019d6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d72:	e8 a7 f1 ff ff       	call   c0018f1e <CPU::displayFeatures()>
c0019d77:	83 c4 10             	add    esp,0x10
c0019d7a:	31 c0                	xor    eax,eax
c0019d7c:	5b                   	pop    ebx
c0019d7d:	5e                   	pop    esi
c0019d7e:	5f                   	pop    edi
c0019d7f:	c3                   	ret    

c0019d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d80:	57                   	push   edi
c0019d81:	56                   	push   esi
c0019d82:	53                   	push   ebx
c0019d83:	51                   	push   ecx
c0019d84:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d88:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d8b:	0f 02 c0             	lar    eax,ax
c0019d8e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d91:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d95:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d98:	88 ca                	mov    dl,cl
c0019d9a:	c0 ea 06             	shr    dl,0x6
c0019d9d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019da1:	89 ca                	mov    edx,ecx
c0019da3:	66 c1 ea 03          	shr    dx,0x3
c0019da7:	83 e2 07             	and    edx,0x7
c0019daa:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019daf:	88 17                	mov    BYTE PTR [edi],dl
c0019db1:	0f 84 a6 01 00 00    	je     c0019f5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019db7:	83 e1 07             	and    ecx,0x7
c0019dba:	80 f9 04             	cmp    cl,0x4
c0019dbd:	0f 84 98 00 00 00    	je     c0019e5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019dc3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dc8:	0f 95 c0             	setne  al
c0019dcb:	80 f9 05             	cmp    cl,0x5
c0019dce:	0f 95 c2             	setne  dl
c0019dd1:	08 c2                	or     dl,al
c0019dd3:	74 79                	je     c0019e4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019dd5:	84 c9                	test   cl,cl
c0019dd7:	75 05                	jne    c0019dde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019dd9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ddc:	eb 3c                	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dde:	80 f9 01             	cmp    cl,0x1
c0019de1:	75 05                	jne    c0019de8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019de3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019de6:	eb 32                	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019de8:	80 f9 02             	cmp    cl,0x2
c0019deb:	75 05                	jne    c0019df2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ded:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019df0:	eb 28                	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df2:	31 c0                	xor    eax,eax
c0019df4:	80 f9 03             	cmp    cl,0x3
c0019df7:	75 05                	jne    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019df9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dfc:	eb 1c                	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dfe:	80 f9 05             	cmp    cl,0x5
c0019e01:	75 05                	jne    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019e03:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e06:	eb 12                	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e08:	80 f9 06             	cmp    cl,0x6
c0019e0b:	75 05                	jne    c0019e12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019e0d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e10:	eb 08                	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e12:	80 f9 07             	cmp    cl,0x7
c0019e15:	75 03                	jne    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e17:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e1a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e1f:	75 10                	jne    c0019e31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e21:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e25:	b9 03 00 00 00       	mov    ecx,0x3
c0019e2a:	01 d0                	add    eax,edx
c0019e2c:	e9 37 01 00 00       	jmp    c0019f68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e31:	b9 02 00 00 00       	mov    ecx,0x2
c0019e36:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e3b:	0f 85 27 01 00 00    	jne    c0019f68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e41:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e44:	b9 06 00 00 00       	mov    ecx,0x6
c0019e49:	e9 1a 01 00 00       	jmp    c0019f68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e4e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e51:	b9 06 00 00 00       	mov    ecx,0x6
c0019e56:	e9 0f 01 00 00       	jmp    c0019f6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e5b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e5e:	88 ca                	mov    dl,cl
c0019e60:	c0 ea 06             	shr    dl,0x6
c0019e63:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e67:	89 ca                	mov    edx,ecx
c0019e69:	66 c1 ea 03          	shr    dx,0x3
c0019e6d:	83 e2 07             	and    edx,0x7
c0019e70:	80 e1 07             	and    cl,0x7
c0019e73:	75 05                	jne    c0019e7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e75:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e78:	eb 4c                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e7a:	80 f9 01             	cmp    cl,0x1
c0019e7d:	75 05                	jne    c0019e84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e7f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e82:	eb 42                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e84:	80 f9 02             	cmp    cl,0x2
c0019e87:	75 05                	jne    c0019e8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e89:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e8c:	eb 38                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e8e:	80 f9 03             	cmp    cl,0x3
c0019e91:	75 05                	jne    c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e93:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e96:	eb 2e                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e98:	80 f9 04             	cmp    cl,0x4
c0019e9b:	75 12                	jne    c0019eaf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e9d:	f6 c4 60             	test   ah,0x60
c0019ea0:	75 08                	jne    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019ea2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ea5:	8d 78 14             	lea    edi,[eax+0x14]
c0019ea8:	eb 1c                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eaa:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ead:	eb 17                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eaf:	80 f9 05             	cmp    cl,0x5
c0019eb2:	75 05                	jne    c0019eb9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019eb4:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019eb7:	eb 0d                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eb9:	80 f9 06             	cmp    cl,0x6
c0019ebc:	75 05                	jne    c0019ec3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019ebe:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ec1:	eb 03                	jmp    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ec3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ec6:	84 d2                	test   dl,dl
c0019ec8:	75 05                	jne    c0019ecf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019eca:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ecd:	eb 3c                	jmp    c0019f0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ecf:	80 fa 01             	cmp    dl,0x1
c0019ed2:	75 05                	jne    c0019ed9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019ed4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ed7:	eb 32                	jmp    c0019f0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed9:	80 fa 02             	cmp    dl,0x2
c0019edc:	75 05                	jne    c0019ee3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ede:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ee1:	eb 28                	jmp    c0019f0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ee3:	80 fa 03             	cmp    dl,0x3
c0019ee6:	75 05                	jne    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ee8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019eeb:	eb 1e                	jmp    c0019f0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eed:	31 c0                	xor    eax,eax
c0019eef:	80 fa 04             	cmp    dl,0x4
c0019ef2:	74 17                	je     c0019f0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ef4:	80 fa 05             	cmp    dl,0x5
c0019ef7:	75 05                	jne    c0019efe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019ef9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019efc:	eb 0d                	jmp    c0019f0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019efe:	80 fa 06             	cmp    dl,0x6
c0019f01:	75 05                	jne    c0019f08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019f03:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f06:	eb 03                	jmp    c0019f0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f0b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f10:	0f 94 c2             	sete   dl
c0019f13:	80 f9 05             	cmp    cl,0x5
c0019f16:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019f1a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f1f:	d3 e0                	shl    eax,cl
c0019f21:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f25:	74 0a                	je     c0019f31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f27:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f2a:	b9 07 00 00 00       	mov    ecx,0x7
c0019f2f:	eb 37                	jmp    c0019f68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f31:	01 f8                	add    eax,edi
c0019f33:	b9 03 00 00 00       	mov    ecx,0x3
c0019f38:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f3d:	74 2b                	je     c0019f6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f3f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f44:	75 0d                	jne    c0019f53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f46:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f4a:	01 c8                	add    eax,ecx
c0019f4c:	b9 04 00 00 00       	mov    ecx,0x4
c0019f51:	eb 17                	jmp    c0019f6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f53:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f56:	b9 07 00 00 00       	mov    ecx,0x7
c0019f5b:	eb 0d                	jmp    c0019f6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f5d:	b9 02 00 00 00       	mov    ecx,0x2
c0019f62:	b2 01                	mov    dl,0x1
c0019f64:	31 c0                	xor    eax,eax
c0019f66:	eb 02                	jmp    c0019f6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f68:	31 d2                	xor    edx,edx
c0019f6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f6e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f74:	88 11                	mov    BYTE PTR [ecx],dl
c0019f76:	5a                   	pop    edx
c0019f77:	5b                   	pop    ebx
c0019f78:	5e                   	pop    esi
c0019f79:	5f                   	pop    edi
c0019f7a:	c3                   	ret    

c0019f7b <Krnl::smpEntry()>:
c0019f7b:	eb fe                	jmp    c0019f7b <Krnl::smpEntry()>

c0019f7d <Krnl::startCPU(int)>:
c0019f7d:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0019f82:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f89:	0f 84 36 01 00 00    	je     c001a0c5 <Krnl::startCPU(int)+0x148>
c0019f8f:	53                   	push   ebx
c0019f90:	83 ec 08             	sub    esp,0x8
c0019f93:	e8 46 3f 00 00       	call   c001dede <lockScheduler()>
c0019f98:	52                   	push   edx
c0019f99:	52                   	push   edx
c0019f9a:	6a 1b                	push   0x1b
c0019f9c:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c0019fa2:	e8 fd 4e ff ff       	call   c000eea4 <Computer::rdmsr(unsigned int)>
c0019fa7:	59                   	pop    ecx
c0019fa8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019fad:	89 c3                	mov    ebx,eax
c0019faf:	58                   	pop    eax
c0019fb0:	53                   	push   ebx
c0019fb1:	68 ec bc 02 c0       	push   0xc002bcec
c0019fb6:	e8 4c 90 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0019fbb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fc9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fd3:	c1 e0 18             	shl    eax,0x18
c0019fd6:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fdc:	83 c4 10             	add    esp,0x10
c0019fdf:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fe5:	09 c2                	or     edx,eax
c0019fe7:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fed:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ff3:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ff9:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fff:	80 cd c5             	or     ch,0xc5
c001a002:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a008:	f3 90                	pause  
c001a00a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a00c:	0f ba e1 0c          	bt     ecx,0xc
c001a010:	72 f6                	jb     c001a008 <Krnl::startCPU(int)+0x8b>
c001a012:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a018:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a01e:	09 c1                	or     ecx,eax
c001a020:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a026:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a02c:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a032:	80 cd 85             	or     ch,0x85
c001a035:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a03b:	f3 90                	pause  
c001a03d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a03f:	0f ba e1 0c          	bt     ecx,0xc
c001a043:	72 f6                	jb     c001a03b <Krnl::startCPU(int)+0xbe>
c001a045:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a04f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a055:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a05b:	09 c1                	or     ecx,eax
c001a05d:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a063:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a069:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a06f:	81 c9 02 06 00 00    	or     ecx,0x602
c001a075:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a07b:	f3 90                	pause  
c001a07d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a07f:	0f ba e1 0c          	bt     ecx,0xc
c001a083:	72 f6                	jb     c001a07b <Krnl::startCPU(int)+0xfe>
c001a085:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a08f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a095:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a09b:	09 c8                	or     eax,ecx
c001a09d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a0a3:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a0a9:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a0ae:	0d 02 06 00 00       	or     eax,0x602
c001a0b3:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a0b9:	f3 90                	pause  
c001a0bb:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0bd:	0f ba e0 0c          	bt     eax,0xc
c001a0c1:	72 f6                	jb     c001a0b9 <Krnl::startCPU(int)+0x13c>
c001a0c3:	eb fe                	jmp    c001a0c3 <Krnl::startCPU(int)+0x146>
c001a0c5:	c3                   	ret    

c001a0c6 <Krnl::startCPUs()>:
c001a0c6:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001a0cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0d1:	88 c2                	mov    dl,al
c001a0d3:	83 e2 0a             	and    edx,0xa
c001a0d6:	80 fa 0a             	cmp    dl,0xa
c001a0d9:	75 09                	jne    c001a0e4 <Krnl::startCPUs()+0x1e>
c001a0db:	a8 01                	test   al,0x1
c001a0dd:	74 05                	je     c001a0e4 <Krnl::startCPUs()+0x1e>
c001a0df:	e9 b7 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0e4:	c3                   	ret    
c001a0e5:	90                   	nop

c001a0e6 <EnvVarContainer::getEnv(char const*)>:
c001a0e6:	57                   	push   edi
c001a0e7:	56                   	push   esi
c001a0e8:	53                   	push   ebx
c001a0e9:	31 db                	xor    ebx,ebx
c001a0eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0ef:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0f1:	7e 2b                	jle    c001a11e <EnvVarContainer::getEnv(char const*)+0x38>
c001a0f3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0fa:	50                   	push   eax
c001a0fb:	50                   	push   eax
c001a0fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a102:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a106:	e8 b5 67 fe ff       	call   c00008c0 <strcmp>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	85 c0                	test   eax,eax
c001a110:	75 09                	jne    c001a11b <EnvVarContainer::getEnv(char const*)+0x35>
c001a112:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a115:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a119:	eb 05                	jmp    c001a120 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a11b:	43                   	inc    ebx
c001a11c:	eb d1                	jmp    c001a0ef <EnvVarContainer::getEnv(char const*)+0x9>
c001a11e:	31 c0                	xor    eax,eax
c001a120:	5b                   	pop    ebx
c001a121:	5e                   	pop    esi
c001a122:	5f                   	pop    edi
c001a123:	c3                   	ret    

c001a124 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a124:	57                   	push   edi
c001a125:	56                   	push   esi
c001a126:	53                   	push   ebx
c001a127:	83 ec 1c             	sub    esp,0x1c
c001a12a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a12e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a132:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a136:	57                   	push   edi
c001a137:	e8 58 66 fe ff       	call   c0000794 <strlen>
c001a13c:	40                   	inc    eax
c001a13d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a140:	e8 b7 57 ff ff       	call   c000f8fc <malloc>
c001a145:	89 34 24             	mov    DWORD PTR [esp],esi
c001a148:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a14c:	e8 43 66 fe ff       	call   c0000794 <strlen>
c001a151:	40                   	inc    eax
c001a152:	89 04 24             	mov    DWORD PTR [esp],eax
c001a155:	e8 a2 57 ff ff       	call   c000f8fc <malloc>
c001a15a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a15d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a161:	e8 2e 66 fe ff       	call   c0000794 <strlen>
c001a166:	83 c4 0c             	add    esp,0xc
c001a169:	40                   	inc    eax
c001a16a:	50                   	push   eax
c001a16b:	6a 00                	push   0x0
c001a16d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a171:	e8 02 66 fe ff       	call   c0000778 <memset>
c001a176:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a179:	e8 16 66 fe ff       	call   c0000794 <strlen>
c001a17e:	83 c4 0c             	add    esp,0xc
c001a181:	40                   	inc    eax
c001a182:	50                   	push   eax
c001a183:	57                   	push   edi
c001a184:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a188:	e8 b7 65 fe ff       	call   c0000744 <memcpy>
c001a18d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a190:	e8 ff 65 fe ff       	call   c0000794 <strlen>
c001a195:	83 c4 0c             	add    esp,0xc
c001a198:	40                   	inc    eax
c001a199:	50                   	push   eax
c001a19a:	6a 00                	push   0x0
c001a19c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1a0:	e8 d3 65 fe ff       	call   c0000778 <memset>
c001a1a5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1a8:	e8 e7 65 fe ff       	call   c0000794 <strlen>
c001a1ad:	83 c4 0c             	add    esp,0xc
c001a1b0:	40                   	inc    eax
c001a1b1:	50                   	push   eax
c001a1b2:	56                   	push   esi
c001a1b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1b7:	e8 88 65 fe ff       	call   c0000744 <memcpy>
c001a1bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1be:	40                   	inc    eax
c001a1bf:	89 03                	mov    DWORD PTR [ebx],eax
c001a1c1:	c1 e0 03             	shl    eax,0x3
c001a1c4:	5a                   	pop    edx
c001a1c5:	59                   	pop    ecx
c001a1c6:	50                   	push   eax
c001a1c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1ca:	e8 19 57 ff ff       	call   c000f8e8 <realloc>
c001a1cf:	83 c4 0c             	add    esp,0xc
c001a1d2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1d5:	6a 08                	push   0x8
c001a1d7:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1db:	52                   	push   edx
c001a1dc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1de:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1e2:	50                   	push   eax
c001a1e3:	e8 5c 65 fe ff       	call   c0000744 <memcpy>
c001a1e8:	83 c4 20             	add    esp,0x20
c001a1eb:	5b                   	pop    ebx
c001a1ec:	5e                   	pop    esi
c001a1ed:	5f                   	pop    edi
c001a1ee:	c3                   	ret    
c001a1ef:	90                   	nop

c001a1f0 <EnvVarContainer::deleteEnv(char const*)>:
c001a1f0:	c3                   	ret    
c001a1f1:	90                   	nop

c001a1f2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1f2:	55                   	push   ebp
c001a1f3:	57                   	push   edi
c001a1f4:	56                   	push   esi
c001a1f5:	53                   	push   ebx
c001a1f6:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1fc:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a203:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a20a:	68 14 01 00 00       	push   0x114
c001a20f:	e8 e8 56 ff ff       	call   c000f8fc <malloc>
c001a214:	83 c4 0c             	add    esp,0xc
c001a217:	89 c7                	mov    edi,eax
c001a219:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a21c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a223:	50                   	push   eax
c001a224:	e8 37 93 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001a229:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a22c:	e8 01 96 ff ff       	call   c0013832 <File::exists()>
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	84 c0                	test   al,al
c001a236:	75 31                	jne    c001a269 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a238:	51                   	push   ecx
c001a239:	51                   	push   ecx
c001a23a:	6a 12                	push   0x12
c001a23c:	57                   	push   edi
c001a23d:	e8 82 93 ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001a242:	8b 07                	mov    eax,DWORD PTR [edi]
c001a244:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a247:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a24a:	e8 45 65 fe ff       	call   c0000794 <strlen>
c001a24f:	5a                   	pop    edx
c001a250:	31 d2                	xor    edx,edx
c001a252:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a256:	51                   	push   ecx
c001a257:	55                   	push   ebp
c001a258:	52                   	push   edx
c001a259:	50                   	push   eax
c001a25a:	57                   	push   edi
c001a25b:	ff d3                	call   ebx
c001a25d:	83 c4 14             	add    esp,0x14
c001a260:	57                   	push   edi
c001a261:	e8 bc 93 ff ff       	call   c0013622 <File::close()>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	31 db                	xor    ebx,ebx
c001a26b:	50                   	push   eax
c001a26c:	31 ed                	xor    ebp,ebp
c001a26e:	68 00 01 00 00       	push   0x100
c001a273:	6a 00                	push   0x0
c001a275:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a279:	50                   	push   eax
c001a27a:	e8 f9 64 fe ff       	call   c0000778 <memset>
c001a27f:	58                   	pop    eax
c001a280:	5a                   	pop    edx
c001a281:	6a 01                	push   0x1
c001a283:	57                   	push   edi
c001a284:	e8 3b 93 ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001a289:	83 c4 10             	add    esp,0x10
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	8b 07                	mov    eax,DWORD PTR [edi]
c001a291:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a295:	51                   	push   ecx
c001a296:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a29a:	52                   	push   edx
c001a29b:	6a 00                	push   0x0
c001a29d:	6a 01                	push   0x1
c001a29f:	57                   	push   edi
c001a2a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a2a3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a2a7:	83 c4 20             	add    esp,0x20
c001a2aa:	3c 0d                	cmp    al,0xd
c001a2ac:	0f 84 12 01 00 00    	je     c001a3c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2b2:	85 db                	test   ebx,ebx
c001a2b4:	0f 84 fd 00 00 00    	je     c001a3b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2ba:	3c 0a                	cmp    al,0xa
c001a2bc:	74 13                	je     c001a2d1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2be:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2c3:	74 0c                	je     c001a2d1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2c5:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2cb:	0f 8e e6 00 00 00    	jle    c001a3b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2d1:	83 ec 0c             	sub    esp,0xc
c001a2d4:	8d 53 01             	lea    edx,[ebx+0x1]
c001a2d7:	29 dd                	sub    ebp,ebx
c001a2d9:	52                   	push   edx
c001a2da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2de:	e8 19 56 ff ff       	call   c000f8fc <malloc>
c001a2e3:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2ea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2f1:	e8 06 56 ff ff       	call   c000f8fc <malloc>
c001a2f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2fa:	83 c4 0c             	add    esp,0xc
c001a2fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a301:	52                   	push   edx
c001a302:	6a 00                	push   0x0
c001a304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a308:	e8 6b 64 fe ff       	call   c0000778 <memset>
c001a30d:	83 c4 0c             	add    esp,0xc
c001a310:	53                   	push   ebx
c001a311:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a315:	55                   	push   ebp
c001a316:	01 eb                	add    ebx,ebp
c001a318:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a31c:	e8 23 64 fe ff       	call   c0000744 <memcpy>
c001a321:	83 c4 0c             	add    esp,0xc
c001a324:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a328:	51                   	push   ecx
c001a329:	6a 00                	push   0x0
c001a32b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a32f:	e8 44 64 fe ff       	call   c0000778 <memset>
c001a334:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a337:	e8 58 64 fe ff       	call   c0000794 <strlen>
c001a33c:	83 c4 0c             	add    esp,0xc
c001a33f:	50                   	push   eax
c001a340:	53                   	push   ebx
c001a341:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a345:	e8 fa 63 fe ff       	call   c0000744 <memcpy>
c001a34a:	5b                   	pop    ebx
c001a34b:	58                   	pop    eax
c001a34c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a350:	68 fd bc 02 c0       	push   0xc002bcfd
c001a355:	e8 ad 8c ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001a35a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a35c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a35f:	40                   	inc    eax
c001a360:	83 c4 10             	add    esp,0x10
c001a363:	89 06                	mov    DWORD PTR [esi],eax
c001a365:	85 d2                	test   edx,edx
c001a367:	75 0c                	jne    c001a375 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a369:	83 ec 0c             	sub    esp,0xc
c001a36c:	6a 08                	push   0x8
c001a36e:	e8 89 55 ff ff       	call   c000f8fc <malloc>
c001a373:	eb 0c                	jmp    c001a381 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a375:	c1 e0 03             	shl    eax,0x3
c001a378:	51                   	push   ecx
c001a379:	51                   	push   ecx
c001a37a:	50                   	push   eax
c001a37b:	52                   	push   edx
c001a37c:	e8 67 55 ff ff       	call   c000f8e8 <realloc>
c001a381:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a384:	83 c4 10             	add    esp,0x10
c001a387:	31 db                	xor    ebx,ebx
c001a389:	52                   	push   edx
c001a38a:	6a 08                	push   0x8
c001a38c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a390:	50                   	push   eax
c001a391:	8b 16                	mov    edx,DWORD PTR [esi]
c001a393:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a396:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a39a:	50                   	push   eax
c001a39b:	e8 a4 63 fe ff       	call   c0000744 <memcpy>
c001a3a0:	83 c4 0c             	add    esp,0xc
c001a3a3:	68 00 01 00 00       	push   0x100
c001a3a8:	6a 00                	push   0x0
c001a3aa:	55                   	push   ebp
c001a3ab:	31 ed                	xor    ebp,ebp
c001a3ad:	e8 c6 63 fe ff       	call   c0000778 <memset>
c001a3b2:	83 c4 10             	add    esp,0x10
c001a3b5:	eb 0d                	jmp    c001a3c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3b7:	3c 3d                	cmp    al,0x3d
c001a3b9:	74 07                	je     c001a3c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a3bb:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a3bf:	45                   	inc    ebp
c001a3c0:	eb 02                	jmp    c001a3c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3c2:	89 eb                	mov    ebx,ebp
c001a3c4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3c9:	0f 85 bd fe ff ff    	jne    c001a28c <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3cf:	50                   	push   eax
c001a3d0:	50                   	push   eax
c001a3d1:	ff 36                	push   DWORD PTR [esi]
c001a3d3:	68 0b bd 02 c0       	push   0xc002bd0b
c001a3d8:	e8 2a 8c ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001a3dd:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3e3:	5b                   	pop    ebx
c001a3e4:	5e                   	pop    esi
c001a3e5:	5f                   	pop    edi
c001a3e6:	5d                   	pop    ebp
c001a3e7:	c3                   	ret    

c001a3e8 <EnvVarContainer::__loadSystem()>:
c001a3e8:	83 ec 10             	sub    esp,0x10
c001a3eb:	68 a0 dc 02 c0       	push   0xc002dca0
c001a3f0:	68 36 bd 02 c0       	push   0xc002bd36
c001a3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3f9:	e8 f4 fd ff ff       	call   c001a1f2 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3fe:	83 c4 1c             	add    esp,0x1c
c001a401:	c3                   	ret    

c001a402 <EnvVarContainer::__loadUser()>:
c001a402:	c3                   	ret    
c001a403:	90                   	nop

c001a404 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a408:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a40e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a412:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a416:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a41d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a424:	90                   	nop
c001a425:	c3                   	ret    

c001a426 <EnvVarContainer::~EnvVarContainer()>:
c001a426:	83 ec 0c             	sub    esp,0xc
c001a429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a42d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a430:	85 c0                	test   eax,eax
c001a432:	74 1d                	je     c001a451 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a438:	8b 00                	mov    eax,DWORD PTR [eax]
c001a43a:	85 c0                	test   eax,eax
c001a43c:	74 13                	je     c001a451 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a445:	83 ec 0c             	sub    esp,0xc
c001a448:	50                   	push   eax
c001a449:	e8 be 54 ff ff       	call   c000f90c <free>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	90                   	nop
c001a452:	83 c4 0c             	add    esp,0xc
c001a455:	c3                   	ret    

c001a456 <Krnl::getEnv(Process*, char const*)>:
c001a456:	53                   	push   ebx
c001a457:	83 ec 08             	sub    esp,0x8
c001a45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a45e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a462:	39 05 d8 1c 03 c0    	cmp    DWORD PTR ds:0xc0031cd8,eax
c001a468:	74 04                	je     c001a46e <Krnl::getEnv(Process*, char const*)+0x18>
c001a46a:	85 c0                	test   eax,eax
c001a46c:	75 0b                	jne    c001a479 <Krnl::getEnv(Process*, char const*)+0x23>
c001a46e:	a1 b4 12 03 c0       	mov    eax,ds:0xc00312b4
c001a473:	85 c0                	test   eax,eax
c001a475:	75 19                	jne    c001a490 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a477:	eb 27                	jmp    c001a4a0 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a479:	52                   	push   edx
c001a47a:	52                   	push   edx
c001a47b:	53                   	push   ebx
c001a47c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a482:	e8 5f fc ff ff       	call   c001a0e6 <EnvVarContainer::getEnv(char const*)>
c001a487:	83 c4 10             	add    esp,0x10
c001a48a:	85 c0                	test   eax,eax
c001a48c:	75 28                	jne    c001a4b6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a48e:	eb de                	jmp    c001a46e <Krnl::getEnv(Process*, char const*)+0x18>
c001a490:	52                   	push   edx
c001a491:	52                   	push   edx
c001a492:	53                   	push   ebx
c001a493:	50                   	push   eax
c001a494:	e8 4d fc ff ff       	call   c001a0e6 <EnvVarContainer::getEnv(char const*)>
c001a499:	83 c4 10             	add    esp,0x10
c001a49c:	85 c0                	test   eax,eax
c001a49e:	75 16                	jne    c001a4b6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a4a0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a4a4:	a1 b8 12 03 c0       	mov    eax,ds:0xc00312b8
c001a4a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4ad:	83 c4 08             	add    esp,0x8
c001a4b0:	5b                   	pop    ebx
c001a4b1:	e9 30 fc ff ff       	jmp    c001a0e6 <EnvVarContainer::getEnv(char const*)>
c001a4b6:	83 c4 08             	add    esp,0x8
c001a4b9:	5b                   	pop    ebx
c001a4ba:	c3                   	ret    

c001a4bb <Krnl::setEnvSystem(char const*, char const*)>:
c001a4bb:	83 ec 10             	sub    esp,0x10
c001a4be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4c6:	ff 35 b8 12 03 c0    	push   DWORD PTR ds:0xc00312b8
c001a4cc:	e8 53 fc ff ff       	call   c001a124 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4d1:	83 c4 1c             	add    esp,0x1c
c001a4d4:	c3                   	ret    

c001a4d5 <Krnl::setEnvUser(char const*, char const*)>:
c001a4d5:	a1 b4 12 03 c0       	mov    eax,ds:0xc00312b4
c001a4da:	85 c0                	test   eax,eax
c001a4dc:	74 15                	je     c001a4f3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4de:	83 ec 10             	sub    esp,0x10
c001a4e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4e9:	50                   	push   eax
c001a4ea:	e8 35 fc ff ff       	call   c001a124 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4ef:	83 c4 1c             	add    esp,0x1c
c001a4f2:	c3                   	ret    
c001a4f3:	c3                   	ret    

c001a4f4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4f8:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a502:	e9 1d fc ff ff       	jmp    c001a124 <EnvVarContainer::setEnv(char const*, char const*)>

c001a507 <Krnl::deleteEnvSystem(char const*)>:
c001a507:	c3                   	ret    

c001a508 <Krnl::deleteEnvUser(char const*)>:
c001a508:	c3                   	ret    

c001a509 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a509:	c3                   	ret    

c001a50a <Krnl::newProcessEnv(Process*)>:
c001a50a:	83 ec 28             	sub    esp,0x28
c001a50d:	6a 0c                	push   0xc
c001a50f:	e8 e8 53 ff ff       	call   c000f8fc <malloc>
c001a514:	5a                   	pop    edx
c001a515:	59                   	pop    ecx
c001a516:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a51a:	50                   	push   eax
c001a51b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a51f:	e8 e0 fe ff ff       	call   c001a404 <EnvVarContainer::EnvVarContainer(Process*)>
c001a524:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a528:	83 c4 2c             	add    esp,0x2c
c001a52b:	c3                   	ret    

c001a52c <Krnl::copyProcessEnv(Process*, Process*)>:
c001a52c:	56                   	push   esi
c001a52d:	53                   	push   ebx
c001a52e:	83 ec 10             	sub    esp,0x10
c001a531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a535:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a53b:	6a 0c                	push   0xc
c001a53d:	e8 ba 53 ff ff       	call   c000f8fc <malloc>
c001a542:	89 c3                	mov    ebx,eax
c001a544:	58                   	pop    eax
c001a545:	5a                   	pop    edx
c001a546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a54a:	53                   	push   ebx
c001a54b:	e8 b4 fe ff ff       	call   c001a404 <EnvVarContainer::EnvVarContainer(Process*)>
c001a550:	8b 06                	mov    eax,DWORD PTR [esi]
c001a552:	89 03                	mov    DWORD PTR [ebx],eax
c001a554:	c1 e0 03             	shl    eax,0x3
c001a557:	89 04 24             	mov    DWORD PTR [esp],eax
c001a55a:	e8 9d 53 ff ff       	call   c000f8fc <malloc>
c001a55f:	83 c4 0c             	add    esp,0xc
c001a562:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a565:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a567:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a56e:	52                   	push   edx
c001a56f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a572:	50                   	push   eax
c001a573:	e8 cc 61 fe ff       	call   c0000744 <memcpy>
c001a578:	89 d8                	mov    eax,ebx
c001a57a:	83 c4 14             	add    esp,0x14
c001a57d:	5b                   	pop    ebx
c001a57e:	5e                   	pop    esi
c001a57f:	c3                   	ret    

c001a580 <Krnl::loadSystemEnv()>:
c001a580:	53                   	push   ebx
c001a581:	83 ec 14             	sub    esp,0x14
c001a584:	6a 0c                	push   0xc
c001a586:	e8 71 53 ff ff       	call   c000f8fc <malloc>
c001a58b:	89 c3                	mov    ebx,eax
c001a58d:	58                   	pop    eax
c001a58e:	5a                   	pop    edx
c001a58f:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c001a595:	53                   	push   ebx
c001a596:	e8 69 fe ff ff       	call   c001a404 <EnvVarContainer::EnvVarContainer(Process*)>
c001a59b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a59e:	89 1d b8 12 03 c0    	mov    DWORD PTR ds:0xc00312b8,ebx
c001a5a4:	e8 3f fe ff ff       	call   c001a3e8 <EnvVarContainer::__loadSystem()>
c001a5a9:	83 c4 18             	add    esp,0x18
c001a5ac:	5b                   	pop    ebx
c001a5ad:	c3                   	ret    

c001a5ae <Krnl::loadUserEnv()>:
c001a5ae:	53                   	push   ebx
c001a5af:	83 ec 14             	sub    esp,0x14
c001a5b2:	6a 0c                	push   0xc
c001a5b4:	e8 43 53 ff ff       	call   c000f8fc <malloc>
c001a5b9:	89 c3                	mov    ebx,eax
c001a5bb:	58                   	pop    eax
c001a5bc:	5a                   	pop    edx
c001a5bd:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c001a5c3:	53                   	push   ebx
c001a5c4:	e8 3b fe ff ff       	call   c001a404 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5c9:	89 1d b4 12 03 c0    	mov    DWORD PTR ds:0xc00312b4,ebx
c001a5cf:	83 c4 18             	add    esp,0x18
c001a5d2:	5b                   	pop    ebx
c001a5d3:	c3                   	ret    

c001a5d4 <Krnl::flushEnv()>:
c001a5d4:	c3                   	ret    

c001a5d5 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5d9:	8b 15 b4 12 03 c0    	mov    edx,DWORD PTR ds:0xc00312b4
c001a5df:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5e5:	a1 b8 12 03 c0       	mov    eax,ds:0xc00312b8
c001a5ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5ec:	03 01                	add    eax,DWORD PTR [ecx]
c001a5ee:	85 d2                	test   edx,edx
c001a5f0:	74 02                	je     c001a5f4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5f2:	03 02                	add    eax,DWORD PTR [edx]
c001a5f4:	c3                   	ret    

c001a5f5 <Krnl::getProcessEnvPair(Process*, int)>:
c001a5f5:	57                   	push   edi
c001a5f6:	8b 0d b4 12 03 c0    	mov    ecx,DWORD PTR ds:0xc00312b4
c001a5fc:	56                   	push   esi
c001a5fd:	85 c9                	test   ecx,ecx
c001a5ff:	53                   	push   ebx
c001a600:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a604:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a608:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a60e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a612:	8b 02                	mov    eax,DWORD PTR [edx]
c001a614:	75 47                	jne    c001a65d <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a616:	39 c3                	cmp    ebx,eax
c001a618:	7c 47                	jl     c001a661 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a61a:	8b 15 b8 12 03 c0    	mov    edx,DWORD PTR ds:0xc00312b8
c001a620:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a622:	01 c1                	add    ecx,eax
c001a624:	39 d9                	cmp    ecx,ebx
c001a626:	7e 6c                	jle    c001a694 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a628:	51                   	push   ecx
c001a629:	89 d9                	mov    ecx,ebx
c001a62b:	29 c1                	sub    ecx,eax
c001a62d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a630:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a634:	53                   	push   ebx
c001a635:	68 58 bd 02 c0       	push   0xc002bd58
c001a63a:	e8 c8 89 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001a63f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a645:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a647:	a1 b8 12 03 c0       	mov    eax,ds:0xc00312b8
c001a64c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a64f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a653:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a656:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a659:	89 06                	mov    DWORD PTR [esi],eax
c001a65b:	eb 51                	jmp    c001a6ae <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a65d:	39 c3                	cmp    ebx,eax
c001a65f:	7d 05                	jge    c001a666 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a661:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a664:	eb 20                	jmp    c001a686 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a666:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a668:	8d 14 07             	lea    edx,[edi+eax*1]
c001a66b:	39 da                	cmp    edx,ebx
c001a66d:	7e 04                	jle    c001a673 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a66f:	29 c3                	sub    ebx,eax
c001a671:	eb 10                	jmp    c001a683 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a673:	8b 0d b8 12 03 c0    	mov    ecx,DWORD PTR ds:0xc00312b8
c001a679:	03 11                	add    edx,DWORD PTR [ecx]
c001a67b:	39 da                	cmp    edx,ebx
c001a67d:	7e 15                	jle    c001a694 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a67f:	29 c3                	sub    ebx,eax
c001a681:	29 fb                	sub    ebx,edi
c001a683:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a686:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a68a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a68d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a690:	89 06                	mov    DWORD PTR [esi],eax
c001a692:	eb 1d                	jmp    c001a6b1 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a694:	83 ec 0c             	sub    esp,0xc
c001a697:	68 6c bd 02 c0       	push   0xc002bd6c
c001a69c:	e8 18 00 00 00       	call   c001a6b9 <Krnl::panic(char const*)>
c001a6a1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a6a7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a6ae:	83 c4 10             	add    esp,0x10
c001a6b1:	89 f0                	mov    eax,esi
c001a6b3:	5b                   	pop    ebx
c001a6b4:	5e                   	pop    esi
c001a6b5:	5f                   	pop    edi
c001a6b6:	c2 04 00             	ret    0x4

c001a6b9 <Krnl::panic(char const*)>:
c001a6b9:	55                   	push   ebp
c001a6ba:	89 e5                	mov    ebp,esp
c001a6bc:	53                   	push   ebx
c001a6bd:	83 ec 0c             	sub    esp,0xc
c001a6c0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6c3:	fa                   	cli    
c001a6c4:	c6 05 c4 12 03 c0 01 	mov    BYTE PTR ds:0xc00312c4,0x1
c001a6cb:	53                   	push   ebx
c001a6cc:	c6 05 a4 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d6a4,0x0
c001a6d3:	68 86 bd 02 c0       	push   0xc002bd86
c001a6d8:	e8 2a 89 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001a6dd:	58                   	pop    eax
c001a6de:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a6e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e9:	e8 0b 67 ff ff       	call   c0010df9 <setActiveTerminal(VgaText*)>
c001a6ee:	83 c4 0c             	add    esp,0xc
c001a6f1:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a6f6:	6a 01                	push   0x1
c001a6f8:	6a 0f                	push   0xf
c001a6fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a700:	e8 25 61 ff ff       	call   c001082a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a705:	58                   	pop    eax
c001a706:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a70b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a711:	e8 84 69 ff ff       	call   c001109a <VgaText::clearScreen()>
c001a716:	58                   	pop    eax
c001a717:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a71c:	5a                   	pop    edx
c001a71d:	68 9f bd 02 c0       	push   0xc002bd9f
c001a722:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a728:	e8 eb 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a72d:	59                   	pop    ecx
c001a72e:	58                   	pop    eax
c001a72f:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a734:	68 44 be 02 c0       	push   0xc002be44
c001a739:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73f:	e8 d4 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a744:	58                   	pop    eax
c001a745:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a74a:	5a                   	pop    edx
c001a74b:	68 bb bd 02 c0       	push   0xc002bdbb
c001a750:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a756:	e8 bd 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a75b:	59                   	pop    ecx
c001a75c:	58                   	pop    eax
c001a75d:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a762:	53                   	push   ebx
c001a763:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a769:	e8 aa 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a76e:	58                   	pop    eax
c001a76f:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a774:	5a                   	pop    edx
c001a775:	68 db bd 02 c0       	push   0xc002bddb
c001a77a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a780:	e8 93 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a785:	a1 c0 12 03 c0       	mov    eax,ds:0xc00312c0
c001a78a:	83 c4 10             	add    esp,0x10
c001a78d:	85 c0                	test   eax,eax
c001a78f:	74 02                	je     c001a793 <Krnl::panic(char const*)+0xda>
c001a791:	ff d0                	call   eax
c001a793:	83 ec 0c             	sub    esp,0xc
c001a796:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a799:	e8 47 30 00 00       	call   c001d7e5 <Thr::getDriverNameFromAddress(unsigned long)>
c001a79e:	83 c4 10             	add    esp,0x10
c001a7a1:	89 c3                	mov    ebx,eax
c001a7a3:	85 c0                	test   eax,eax
c001a7a5:	0f 84 50 02 00 00    	je     c001a9fb <Krnl::panic(char const*)+0x342>
c001a7ab:	83 ec 08             	sub    esp,0x8
c001a7ae:	8b 15 d8 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cd8
c001a7b4:	68 80 be 02 c0       	push   0xc002be80
c001a7b9:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7bf:	e8 54 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a7c4:	58                   	pop    eax
c001a7c5:	5a                   	pop    edx
c001a7c6:	8b 15 d8 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cd8
c001a7cc:	68 bb bd 02 c0       	push   0xc002bdbb
c001a7d1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7d7:	e8 3c 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a7dc:	59                   	pop    ecx
c001a7dd:	58                   	pop    eax
c001a7de:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a7e3:	53                   	push   ebx
c001a7e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ea:	e8 29 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a7ef:	83 c4 10             	add    esp,0x10
c001a7f2:	83 ec 08             	sub    esp,0x8
c001a7f5:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a7fa:	68 da bd 02 c0       	push   0xc002bdda
c001a7ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a805:	e8 0e 6a ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a80a:	58                   	pop    eax
c001a80b:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a810:	5a                   	pop    edx
c001a811:	68 d8 be 02 c0       	push   0xc002bed8
c001a816:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81c:	e8 f7 69 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a821:	59                   	pop    ecx
c001a822:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a827:	5b                   	pop    ebx
c001a828:	68 18 bf 02 c0       	push   0xc002bf18
c001a82d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a833:	e8 e0 69 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a838:	58                   	pop    eax
c001a839:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a83e:	5a                   	pop    edx
c001a83f:	68 c6 bd 02 c0       	push   0xc002bdc6
c001a844:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84a:	e8 c9 69 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a84f:	59                   	pop    ecx
c001a850:	5b                   	pop    ebx
c001a851:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a854:	68 de bd 02 c0       	push   0xc002bdde
c001a859:	e8 a9 87 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001a85e:	58                   	pop    eax
c001a85f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a862:	5a                   	pop    edx
c001a863:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a866:	68 e7 bd 02 c0       	push   0xc002bde7
c001a86b:	e8 97 87 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001a870:	59                   	pop    ecx
c001a871:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a874:	5b                   	pop    ebx
c001a875:	8b 00                	mov    eax,DWORD PTR [eax]
c001a877:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a87a:	68 f0 bd 02 c0       	push   0xc002bdf0
c001a87f:	e8 83 87 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001a884:	58                   	pop    eax
c001a885:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a88a:	5a                   	pop    edx
c001a88b:	68 5c bf 02 c0       	push   0xc002bf5c
c001a890:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a896:	e8 7d 69 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a89b:	59                   	pop    ecx
c001a89c:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a8a1:	5b                   	pop    ebx
c001a8a2:	68 f9 bd 02 c0       	push   0xc002bdf9
c001a8a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ad:	e8 66 69 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a8b2:	0f 20 c0             	mov    eax,cr0
c001a8b5:	5a                   	pop    edx
c001a8b6:	59                   	pop    ecx
c001a8b7:	50                   	push   eax
c001a8b8:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a8bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c3:	e8 76 69 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001a8c8:	5b                   	pop    ebx
c001a8c9:	58                   	pop    eax
c001a8ca:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a8cf:	68 03 be 02 c0       	push   0xc002be03
c001a8d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8da:	e8 39 69 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a8df:	0f 20 d0             	mov    eax,cr2
c001a8e2:	5a                   	pop    edx
c001a8e3:	59                   	pop    ecx
c001a8e4:	50                   	push   eax
c001a8e5:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a8ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f0:	e8 49 69 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001a8f5:	5b                   	pop    ebx
c001a8f6:	58                   	pop    eax
c001a8f7:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a8fc:	68 0d be 02 c0       	push   0xc002be0d
c001a901:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a907:	e8 0c 69 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a90c:	0f 20 d8             	mov    eax,cr3
c001a90f:	5a                   	pop    edx
c001a910:	59                   	pop    ecx
c001a911:	50                   	push   eax
c001a912:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a917:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91d:	e8 1c 69 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001a922:	5b                   	pop    ebx
c001a923:	58                   	pop    eax
c001a924:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a929:	68 20 be 02 c0       	push   0xc002be20
c001a92e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a934:	e8 df 68 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a939:	0f 20 e0             	mov    eax,cr4
c001a93c:	5a                   	pop    edx
c001a93d:	59                   	pop    ecx
c001a93e:	50                   	push   eax
c001a93f:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a944:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94a:	e8 ef 68 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001a94f:	5b                   	pop    ebx
c001a950:	58                   	pop    eax
c001a951:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a956:	68 2a be 02 c0       	push   0xc002be2a
c001a95b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a961:	e8 b2 68 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a966:	5a                   	pop    edx
c001a967:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a96c:	59                   	pop    ecx
c001a96d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a973:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a976:	50                   	push   eax
c001a977:	e8 c2 68 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001a97c:	5b                   	pop    ebx
c001a97d:	58                   	pop    eax
c001a97e:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a983:	68 41 be 02 c0       	push   0xc002be41
c001a988:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98e:	e8 85 68 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a993:	5a                   	pop    edx
c001a994:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a999:	59                   	pop    ecx
c001a99a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9a3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9a6:	50                   	push   eax
c001a9a7:	e8 92 68 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001a9ac:	5b                   	pop    ebx
c001a9ad:	58                   	pop    eax
c001a9ae:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a9b3:	68 41 be 02 c0       	push   0xc002be41
c001a9b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9be:	e8 55 68 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001a9c3:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a9c8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9cb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9d1:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9d3:	59                   	pop    ecx
c001a9d4:	5b                   	pop    ebx
c001a9d5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9d8:	50                   	push   eax
c001a9d9:	e8 60 68 ff ff       	call   c001123e <VgaText::putx(unsigned int)>
c001a9de:	83 c4 10             	add    esp,0x10
c001a9e1:	b2 fe                	mov    dl,0xfe
c001a9e3:	e4 60                	in     al,0x60
c001a9e5:	3c 1c                	cmp    al,0x1c
c001a9e7:	74 04                	je     c001a9ed <Krnl::panic(char const*)+0x334>
c001a9e9:	3c 5a                	cmp    al,0x5a
c001a9eb:	75 f6                	jne    c001a9e3 <Krnl::panic(char const*)+0x32a>
c001a9ed:	e4 64                	in     al,0x64
c001a9ef:	a8 02                	test   al,0x2
c001a9f1:	75 fa                	jne    c001a9ed <Krnl::panic(char const*)+0x334>
c001a9f3:	88 d0                	mov    al,dl
c001a9f5:	e6 64                	out    0x64,al
c001a9f7:	fa                   	cli    
c001a9f8:	f4                   	hlt    
c001a9f9:	eb e8                	jmp    c001a9e3 <Krnl::panic(char const*)+0x32a>
c001a9fb:	50                   	push   eax
c001a9fc:	50                   	push   eax
c001a9fd:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001aa02:	68 ac be 02 c0       	push   0xc002beac
c001aa07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa0d:	e8 06 68 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001aa12:	58                   	pop    eax
c001aa13:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001aa18:	5a                   	pop    edx
c001aa19:	68 bb bd 02 c0       	push   0xc002bdbb
c001aa1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa24:	e8 ef 67 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001aa29:	59                   	pop    ecx
c001aa2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa2f:	5b                   	pop    ebx
c001aa30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa33:	83 c0 0c             	add    eax,0xc
c001aa36:	50                   	push   eax
c001aa37:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001aa3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa42:	e8 d1 67 ff ff       	call   c0011218 <VgaText::puts(char const*)>
c001aa47:	83 c4 10             	add    esp,0x10
c001aa4a:	e9 a3 fd ff ff       	jmp    c001a7f2 <Krnl::panic(char const*)+0x139>

c001aa4f <Net::switchEndian16(unsigned short)>:
c001aa4f:	83 ec 04             	sub    esp,0x4
c001aa52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa56:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa5a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa5e:	c1 f8 08             	sar    eax,0x8
c001aa61:	89 c2                	mov    edx,eax
c001aa63:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa67:	c1 e0 08             	shl    eax,0x8
c001aa6a:	09 d0                	or     eax,edx
c001aa6c:	83 c4 04             	add    esp,0x4
c001aa6f:	c3                   	ret    

c001aa70 <Net::switchEndian32(unsigned int)>:
c001aa70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa74:	c1 e8 18             	shr    eax,0x18
c001aa77:	89 c2                	mov    edx,eax
c001aa79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7d:	c1 e0 08             	shl    eax,0x8
c001aa80:	25 00 00 ff 00       	and    eax,0xff0000
c001aa85:	09 c2                	or     edx,eax
c001aa87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8b:	c1 e8 08             	shr    eax,0x8
c001aa8e:	25 00 ff 00 00       	and    eax,0xff00
c001aa93:	09 c2                	or     edx,eax
c001aa95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa99:	c1 e0 18             	shl    eax,0x18
c001aa9c:	09 d0                	or     eax,edx
c001aa9e:	c3                   	ret    

c001aa9f <Net::crc32Calc(unsigned char*, int)>:
c001aa9f:	83 ec 10             	sub    esp,0x10
c001aaa2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aaa7:	75 07                	jne    c001aab0 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aaa9:	b8 00 00 00 00       	mov    eax,0x0
c001aaae:	eb 7c                	jmp    c001ab2c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aab0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aab5:	7f 07                	jg     c001aabe <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aab7:	b8 00 00 00 00       	mov    eax,0x0
c001aabc:	eb 6e                	jmp    c001ab2c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aabe:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aac6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aad2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aad6:	7d 4e                	jge    c001ab26 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aad8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aadc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aae0:	01 d0                	add    eax,edx
c001aae2:	8a 00                	mov    al,BYTE PTR [eax]
c001aae4:	0f b6 c0             	movzx  eax,al
c001aae7:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aaeb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aaf3:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aaf8:	7f 26                	jg     c001ab20 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aafe:	83 e0 01             	and    eax,0x1
c001ab01:	74 0d                	je     c001ab10 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ab03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab07:	d1 e8                	shr    eax,1
c001ab09:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ab0e:	eb 06                	jmp    c001ab16 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ab10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab14:	d1 e8                	shr    eax,1
c001ab16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab1a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab1e:	eb d3                	jmp    c001aaf3 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ab20:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab24:	eb a8                	jmp    c001aace <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab2a:	f7 d0                	not    eax
c001ab2c:	83 c4 10             	add    esp,0x10
c001ab2f:	c3                   	ret    

c001ab30 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab30:	83 ec 1c             	sub    esp,0x1c
c001ab33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab43:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab48:	7f 14                	jg     c001ab5e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab51:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab55:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab58:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab5c:	eb e5                	jmp    c001ab43 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab62:	8d 50 01             	lea    edx,[eax+0x1]
c001ab65:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab69:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab6c:	83 ec 04             	sub    esp,0x4
c001ab6f:	6a 06                	push   0x6
c001ab71:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab75:	50                   	push   eax
c001ab76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab7a:	e8 c5 5b fe ff       	call   c0000744 <memcpy>
c001ab7f:	83 c4 10             	add    esp,0x10
c001ab82:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab87:	83 ec 04             	sub    esp,0x4
c001ab8a:	6a 06                	push   0x6
c001ab8c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab90:	50                   	push   eax
c001ab91:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab95:	e8 aa 5b fe ff       	call   c0000744 <memcpy>
c001ab9a:	83 c4 10             	add    esp,0x10
c001ab9d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aba2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aba6:	0f b7 c0             	movzx  eax,ax
c001aba9:	c1 f8 08             	sar    eax,0x8
c001abac:	89 c1                	mov    ecx,eax
c001abae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abb2:	8d 50 01             	lea    edx,[eax+0x1]
c001abb5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abb9:	88 ca                	mov    dl,cl
c001abbb:	88 10                	mov    BYTE PTR [eax],dl
c001abbd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abc1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abc5:	8d 48 01             	lea    ecx,[eax+0x1]
c001abc8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001abcc:	88 10                	mov    BYTE PTR [eax],dl
c001abce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001abd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd6:	83 ec 04             	sub    esp,0x4
c001abd9:	52                   	push   edx
c001abda:	50                   	push   eax
c001abdb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abdf:	e8 60 5b fe ff       	call   c0000744 <memcpy>
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abeb:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001abef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf3:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abf7:	83 ec 08             	sub    esp,0x8
c001abfa:	50                   	push   eax
c001abfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abff:	e8 9b fe ff ff       	call   c001aa9f <Net::crc32Calc(unsigned char*, int)>
c001ac04:	83 c4 10             	add    esp,0x10
c001ac07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac0f:	c1 e8 18             	shr    eax,0x18
c001ac12:	89 c1                	mov    ecx,eax
c001ac14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac18:	8d 50 01             	lea    edx,[eax+0x1]
c001ac1b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac1f:	88 ca                	mov    dl,cl
c001ac21:	88 10                	mov    BYTE PTR [eax],dl
c001ac23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac27:	c1 e8 10             	shr    eax,0x10
c001ac2a:	89 c1                	mov    ecx,eax
c001ac2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac30:	8d 50 01             	lea    edx,[eax+0x1]
c001ac33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac37:	88 ca                	mov    dl,cl
c001ac39:	88 10                	mov    BYTE PTR [eax],dl
c001ac3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac3f:	c1 e8 08             	shr    eax,0x8
c001ac42:	89 c1                	mov    ecx,eax
c001ac44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac48:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac4f:	88 ca                	mov    dl,cl
c001ac51:	88 10                	mov    BYTE PTR [eax],dl
c001ac53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac57:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac62:	88 10                	mov    BYTE PTR [eax],dl
c001ac64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac68:	83 c4 1c             	add    esp,0x1c
c001ac6b:	c3                   	ret    

c001ac6c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac6c:	83 ec 2c             	sub    esp,0x2c
c001ac6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac77:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac7c:	83 ec 04             	sub    esp,0x4
c001ac7f:	6a 06                	push   0x6
c001ac81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac89:	83 c0 0e             	add    eax,0xe
c001ac8c:	50                   	push   eax
c001ac8d:	e8 b2 5a fe ff       	call   c0000744 <memcpy>
c001ac92:	83 c4 10             	add    esp,0x10
c001ac95:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac9a:	83 ec 04             	sub    esp,0x4
c001ac9d:	6a 06                	push   0x6
c001ac9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aca3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aca7:	83 c0 08             	add    eax,0x8
c001acaa:	50                   	push   eax
c001acab:	e8 94 5a fe ff       	call   c0000744 <memcpy>
c001acb0:	83 c4 10             	add    esp,0x10
c001acb3:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001acb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acbc:	8d 50 01             	lea    edx,[eax+0x1]
c001acbf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acc3:	8a 00                	mov    al,BYTE PTR [eax]
c001acc5:	0f b6 c0             	movzx  eax,al
c001acc8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001accd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acd1:	8d 50 01             	lea    edx,[eax+0x1]
c001acd4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd8:	8a 00                	mov    al,BYTE PTR [eax]
c001acda:	0f b6 c0             	movzx  eax,al
c001acdd:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ace2:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ace7:	c1 e0 08             	shl    eax,0x8
c001acea:	89 c2                	mov    edx,eax
c001acec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acf0:	09 d0                	or     eax,edx
c001acf2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acf6:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acfa:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001acff:	75 3a                	jne    c001ad3b <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad05:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad08:	66 3d dc 05          	cmp    ax,0x5dc
c001ad0c:	77 10                	ja     c001ad1e <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ad0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad12:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad15:	0f b7 c0             	movzx  eax,ax
c001ad18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad1c:	eb 1d                	jmp    c001ad3b <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad1e:	83 ec 0c             	sub    esp,0xc
c001ad21:	68 84 bf 02 c0       	push   0xc002bf84
c001ad26:	e8 dc 82 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad32:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad36:	e9 c0 00 00 00       	jmp    c001adfb <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad3b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad43:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad45:	83 ec 04             	sub    esp,0x4
c001ad48:	52                   	push   edx
c001ad49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad4d:	50                   	push   eax
c001ad4e:	e8 f1 59 fe ff       	call   c0000744 <memcpy>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad5a:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad62:	8d 50 01             	lea    edx,[eax+0x1]
c001ad65:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad69:	8a 00                	mov    al,BYTE PTR [eax]
c001ad6b:	0f b6 c0             	movzx  eax,al
c001ad6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad76:	8d 50 01             	lea    edx,[eax+0x1]
c001ad79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad7d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad7f:	0f b6 c0             	movzx  eax,al
c001ad82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad91:	8a 00                	mov    al,BYTE PTR [eax]
c001ad93:	0f b6 c0             	movzx  eax,al
c001ad96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad9e:	8d 50 01             	lea    edx,[eax+0x1]
c001ada1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ada5:	8a 00                	mov    al,BYTE PTR [eax]
c001ada7:	0f b6 c0             	movzx  eax,al
c001adaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adb2:	c1 e0 18             	shl    eax,0x18
c001adb5:	89 c2                	mov    edx,eax
c001adb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbb:	c1 e0 10             	shl    eax,0x10
c001adbe:	09 c2                	or     edx,eax
c001adc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adc4:	c1 e0 08             	shl    eax,0x8
c001adc7:	09 d0                	or     eax,edx
c001adc9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001adcd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001add1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001add5:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001add9:	83 e8 04             	sub    eax,0x4
c001addc:	83 ec 08             	sub    esp,0x8
c001addf:	50                   	push   eax
c001ade0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ade4:	e8 b6 fc ff ff       	call   c001aa9f <Net::crc32Calc(unsigned char*, int)>
c001ade9:	83 c4 10             	add    esp,0x10
c001adec:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001adf0:	0f 94 c2             	sete   dl
c001adf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adf7:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001adfa:	90                   	nop
c001adfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adff:	83 c4 2c             	add    esp,0x2c
c001ae02:	c2 04 00             	ret    0x4

c001ae05 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ae05:	55                   	push   ebp
c001ae06:	57                   	push   edi
c001ae07:	56                   	push   esi
c001ae08:	53                   	push   ebx
c001ae09:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae0f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ae16:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ae18:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ae1b:	80 fb 40             	cmp    bl,0x40
c001ae1e:	75 1b                	jne    c001ae3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ae20:	8a 16                	mov    dl,BYTE PTR [esi]
c001ae22:	84 d2                	test   dl,dl
c001ae24:	0f 84 f1 00 00 00    	je     c001af1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae2a:	8d 46 01             	lea    eax,[esi+0x1]
c001ae2d:	80 fa 3a             	cmp    dl,0x3a
c001ae30:	74 04                	je     c001ae36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae32:	89 c6                	mov    esi,eax
c001ae34:	eb ea                	jmp    c001ae20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae36:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae39:	89 c6                	mov    esi,eax
c001ae3b:	50                   	push   eax
c001ae3c:	6a 40                	push   0x40
c001ae3e:	6a 00                	push   0x0
c001ae40:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae44:	50                   	push   eax
c001ae45:	e8 2e 59 fe ff       	call   c0000778 <memset>
c001ae4a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae51:	31 c0                	xor    eax,eax
c001ae53:	83 c4 10             	add    esp,0x10
c001ae56:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae58:	84 c9                	test   cl,cl
c001ae5a:	0f 84 bb 00 00 00    	je     c001af1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae60:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae65:	0f 8f b0 00 00 00    	jg     c001af1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae6b:	80 f9 0a             	cmp    cl,0xa
c001ae6e:	0f 85 98 00 00 00    	jne    c001af0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae74:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae79:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae7d:	a8 df                	test   al,0xdf
c001ae7f:	0f 94 c1             	sete   cl
c001ae82:	3c 23                	cmp    al,0x23
c001ae84:	0f 94 c2             	sete   dl
c001ae87:	08 d1                	or     cl,dl
c001ae89:	75 4a                	jne    c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae8b:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae8e:	80 fa 01             	cmp    dl,0x1
c001ae91:	76 42                	jbe    c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae93:	3c 5b                	cmp    al,0x5b
c001ae95:	75 42                	jne    c001aed9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae97:	80 fb 40             	cmp    bl,0x40
c001ae9a:	75 39                	jne    c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae9c:	83 ec 0c             	sub    esp,0xc
c001ae9f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aea3:	52                   	push   edx
c001aea4:	e8 eb 58 fe ff       	call   c0000794 <strlen>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	83 f8 3f             	cmp    eax,0x3f
c001aeaf:	77 6a                	ja     c001af1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aeb1:	50                   	push   eax
c001aeb2:	50                   	push   eax
c001aeb3:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aeb7:	52                   	push   edx
c001aeb8:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aebc:	52                   	push   edx
c001aebd:	e8 72 59 fe ff       	call   c0000834 <strcpy>
c001aec2:	58                   	pop    eax
c001aec3:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aec7:	52                   	push   edx
c001aec8:	e8 c7 58 fe ff       	call   c0000794 <strlen>
c001aecd:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	31 d2                	xor    edx,edx
c001aed7:	eb 3a                	jmp    c001af13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aed9:	80 fb 40             	cmp    bl,0x40
c001aedc:	74 06                	je     c001aee4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aede:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aee2:	eb 20                	jmp    c001af04 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aee4:	50                   	push   eax
c001aee5:	50                   	push   eax
c001aee6:	55                   	push   ebp
c001aee7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aeeb:	50                   	push   eax
c001aeec:	e8 cf 59 fe ff       	call   c00008c0 <strcmp>
c001aef1:	83 c4 10             	add    esp,0x10
c001aef4:	85 c0                	test   eax,eax
c001aef6:	75 dd                	jne    c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aef8:	eb e4                	jmp    c001aede <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aefa:	8d 50 01             	lea    edx,[eax+0x1]
c001aefd:	80 f9 3d             	cmp    cl,0x3d
c001af00:	74 1d                	je     c001af1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001af02:	89 d0                	mov    eax,edx
c001af04:	8a 08                	mov    cl,BYTE PTR [eax]
c001af06:	84 c9                	test   cl,cl
c001af08:	75 f0                	jne    c001aefa <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001af0a:	eb 0f                	jmp    c001af1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001af0c:	8d 50 01             	lea    edx,[eax+0x1]
c001af0f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001af13:	47                   	inc    edi
c001af14:	89 d0                	mov    eax,edx
c001af16:	e9 3b ff ff ff       	jmp    c001ae56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001af1b:	31 c0                	xor    eax,eax
c001af1d:	eb 33                	jmp    c001af52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001af1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af23:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af26:	50                   	push   eax
c001af27:	50                   	push   eax
c001af28:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af2c:	50                   	push   eax
c001af2d:	56                   	push   esi
c001af2e:	e8 8d 59 fe ff       	call   c00008c0 <strcmp>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	85 c0                	test   eax,eax
c001af38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af3c:	75 97                	jne    c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af3e:	51                   	push   ecx
c001af3f:	51                   	push   ecx
c001af40:	52                   	push   edx
c001af41:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af48:	e8 e7 58 fe ff       	call   c0000834 <strcpy>
c001af4d:	83 c4 10             	add    esp,0x10
c001af50:	b0 01                	mov    al,0x1
c001af52:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af58:	5b                   	pop    ebx
c001af59:	5e                   	pop    esi
c001af5a:	5f                   	pop    edi
c001af5b:	5d                   	pop    ebp
c001af5c:	c3                   	ret    

c001af5d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af5d:	57                   	push   edi
c001af5e:	56                   	push   esi
c001af5f:	53                   	push   ebx
c001af60:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af66:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af6d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af74:	53                   	push   ebx
c001af75:	e8 1a 58 fe ff       	call   c0000794 <strlen>
c001af7a:	89 34 24             	mov    DWORD PTR [esp],esi
c001af7d:	89 c7                	mov    edi,eax
c001af7f:	e8 10 58 fe ff       	call   c0000794 <strlen>
c001af84:	83 c4 10             	add    esp,0x10
c001af87:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af8b:	3d ff 00 00 00       	cmp    eax,0xff
c001af90:	0f 87 d3 00 00 00    	ja     c001b069 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af96:	57                   	push   edi
c001af97:	57                   	push   edi
c001af98:	56                   	push   esi
c001af99:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af9d:	56                   	push   esi
c001af9e:	e8 91 58 fe ff       	call   c0000834 <strcpy>
c001afa3:	58                   	pop    eax
c001afa4:	5a                   	pop    edx
c001afa5:	68 4d c5 02 c0       	push   0xc002c54d
c001afaa:	56                   	push   esi
c001afab:	e8 c4 59 fe ff       	call   c0000974 <strcat>
c001afb0:	59                   	pop    ecx
c001afb1:	5f                   	pop    edi
c001afb2:	53                   	push   ebx
c001afb3:	56                   	push   esi
c001afb4:	e8 bb 59 fe ff       	call   c0000974 <strcat>
c001afb9:	58                   	pop    eax
c001afba:	5a                   	pop    edx
c001afbb:	68 d0 bf 02 c0       	push   0xc002bfd0
c001afc0:	56                   	push   esi
c001afc1:	e8 ae 59 fe ff       	call   c0000974 <strcat>
c001afc6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001afcd:	e8 2a 49 ff ff       	call   c000f8fc <malloc>
c001afd2:	83 c4 0c             	add    esp,0xc
c001afd5:	89 c3                	mov    ebx,eax
c001afd7:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c001afdd:	56                   	push   esi
c001afde:	50                   	push   eax
c001afdf:	e8 7c 85 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001afe4:	83 c4 10             	add    esp,0x10
c001afe7:	85 db                	test   ebx,ebx
c001afe9:	74 7e                	je     c001b069 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afeb:	51                   	push   ecx
c001afec:	51                   	push   ecx
c001afed:	6a 01                	push   0x1
c001afef:	53                   	push   ebx
c001aff0:	e8 cf 85 ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	85 c0                	test   eax,eax
c001affa:	74 08                	je     c001b004 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001affc:	83 ec 0c             	sub    esp,0xc
c001afff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b001:	53                   	push   ebx
c001b002:	eb 5f                	jmp    c001b063 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b004:	52                   	push   edx
c001b005:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b009:	50                   	push   eax
c001b00a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b00e:	50                   	push   eax
c001b00f:	53                   	push   ebx
c001b010:	e8 5b 88 ff ff       	call   c0013870 <File::stat(unsigned long long*, bool*)>
c001b015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b019:	83 c4 10             	add    esp,0x10
c001b01c:	89 c1                	mov    ecx,eax
c001b01e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b022:	74 31                	je     c001b055 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	50                   	push   eax
c001b028:	e8 cf 48 ff ff       	call   c000f8fc <malloc>
c001b02d:	89 c6                	mov    esi,eax
c001b02f:	58                   	pop    eax
c001b030:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b032:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b036:	52                   	push   edx
c001b037:	56                   	push   esi
c001b038:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b03c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b040:	53                   	push   ebx
c001b041:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b044:	83 c4 20             	add    esp,0x20
c001b047:	85 c0                	test   eax,eax
c001b049:	75 0a                	jne    c001b055 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b04b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b04f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b053:	74 18                	je     c001b06d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b055:	83 ec 0c             	sub    esp,0xc
c001b058:	53                   	push   ebx
c001b059:	e8 c4 85 ff ff       	call   c0013622 <File::close()>
c001b05e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b060:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b063:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b066:	83 c4 10             	add    esp,0x10
c001b069:	31 c0                	xor    eax,eax
c001b06b:	eb 3b                	jmp    c001b0a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b06d:	83 ec 0c             	sub    esp,0xc
c001b070:	53                   	push   ebx
c001b071:	e8 ac 85 ff ff       	call   c0013622 <File::close()>
c001b076:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b078:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b07b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b07e:	83 c4 0c             	add    esp,0xc
c001b081:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b088:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b08f:	56                   	push   esi
c001b090:	e8 70 fd ff ff       	call   c001ae05 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b095:	89 34 24             	mov    DWORD PTR [esp],esi
c001b098:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b09c:	e8 6b 48 ff ff       	call   c000f90c <free>
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b0a8:	81 c4 20 01 00 00    	add    esp,0x120
c001b0ae:	5b                   	pop    ebx
c001b0af:	5e                   	pop    esi
c001b0b0:	5f                   	pop    edi
c001b0b1:	c3                   	ret    

c001b0b2 <Reg::getLine(char*, char*, char*)>:
c001b0b2:	57                   	push   edi
c001b0b3:	56                   	push   esi
c001b0b4:	53                   	push   ebx
c001b0b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0c1:	57                   	push   edi
c001b0c2:	56                   	push   esi
c001b0c3:	53                   	push   ebx
c001b0c4:	68 d5 bf 02 c0       	push   0xc002bfd5
c001b0c9:	e8 8f fe ff ff       	call   c001af5d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0ce:	83 c4 10             	add    esp,0x10
c001b0d1:	84 c0                	test   al,al
c001b0d3:	75 10                	jne    c001b0e5 <Reg::getLine(char*, char*, char*)+0x33>
c001b0d5:	57                   	push   edi
c001b0d6:	56                   	push   esi
c001b0d7:	53                   	push   ebx
c001b0d8:	68 fa bf 02 c0       	push   0xc002bffa
c001b0dd:	e8 7b fe ff ff       	call   c001af5d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0e2:	83 c4 10             	add    esp,0x10
c001b0e5:	5b                   	pop    ebx
c001b0e6:	5e                   	pop    esi
c001b0e7:	5f                   	pop    edi
c001b0e8:	c3                   	ret    

c001b0e9 <Reg::readInt(char*, char*, int*)>:
c001b0e9:	55                   	push   ebp
c001b0ea:	57                   	push   edi
c001b0eb:	56                   	push   esi
c001b0ec:	53                   	push   ebx
c001b0ed:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0f3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0f7:	57                   	push   edi
c001b0f8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0ff:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b106:	e8 a7 ff ff ff       	call   c001b0b2 <Reg::getLine(char*, char*, char*)>
c001b10b:	83 c4 10             	add    esp,0x10
c001b10e:	84 c0                	test   al,al
c001b110:	0f 84 b3 00 00 00    	je     c001b1c9 <Reg::readInt(char*, char*, int*)+0xe0>
c001b116:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b11a:	80 fa 2b             	cmp    dl,0x2b
c001b11d:	74 0c                	je     c001b12b <Reg::readInt(char*, char*, int*)+0x42>
c001b11f:	80 fa 2d             	cmp    dl,0x2d
c001b122:	75 0e                	jne    c001b132 <Reg::readInt(char*, char*, int*)+0x49>
c001b124:	ba 01 00 00 00       	mov    edx,0x1
c001b129:	eb 0b                	jmp    c001b136 <Reg::readInt(char*, char*, int*)+0x4d>
c001b12b:	ba 01 00 00 00       	mov    edx,0x1
c001b130:	eb 02                	jmp    c001b134 <Reg::readInt(char*, char*, int*)+0x4b>
c001b132:	31 d2                	xor    edx,edx
c001b134:	31 c0                	xor    eax,eax
c001b136:	be 0a 00 00 00       	mov    esi,0xa
c001b13b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b140:	75 20                	jne    c001b162 <Reg::readInt(char*, char*, int*)+0x79>
c001b142:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b146:	80 f9 78             	cmp    cl,0x78
c001b149:	75 0a                	jne    c001b155 <Reg::readInt(char*, char*, int*)+0x6c>
c001b14b:	83 c2 02             	add    edx,0x2
c001b14e:	be 10 00 00 00       	mov    esi,0x10
c001b153:	eb 0d                	jmp    c001b162 <Reg::readInt(char*, char*, int*)+0x79>
c001b155:	80 f9 62             	cmp    cl,0x62
c001b158:	75 08                	jne    c001b162 <Reg::readInt(char*, char*, int*)+0x79>
c001b15a:	83 c2 02             	add    edx,0x2
c001b15d:	be 02 00 00 00       	mov    esi,0x2
c001b162:	01 d7                	add    edi,edx
c001b164:	31 d2                	xor    edx,edx
c001b166:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b168:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b16c:	80 fb 0d             	cmp    bl,0xd
c001b16f:	0f 94 c3             	sete   bl
c001b172:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b177:	0f 94 c1             	sete   cl
c001b17a:	08 cb                	or     bl,cl
c001b17c:	75 3a                	jne    c001b1b8 <Reg::readInt(char*, char*, int*)+0xcf>
c001b17e:	0f af d6             	imul   edx,esi
c001b181:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b186:	83 fe 10             	cmp    esi,0x10
c001b189:	75 26                	jne    c001b1b1 <Reg::readInt(char*, char*, int*)+0xc8>
c001b18b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b18f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b192:	89 e9                	mov    ecx,ebp
c001b194:	80 f9 05             	cmp    cl,0x5
c001b197:	77 06                	ja     c001b19f <Reg::readInt(char*, char*, int*)+0xb6>
c001b199:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b19d:	eb 16                	jmp    c001b1b5 <Reg::readInt(char*, char*, int*)+0xcc>
c001b19f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b1a3:	83 e9 61             	sub    ecx,0x61
c001b1a6:	80 f9 05             	cmp    cl,0x5
c001b1a9:	77 06                	ja     c001b1b1 <Reg::readInt(char*, char*, int*)+0xc8>
c001b1ab:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b1af:	eb 04                	jmp    c001b1b5 <Reg::readInt(char*, char*, int*)+0xcc>
c001b1b1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b1b5:	47                   	inc    edi
c001b1b6:	eb ae                	jmp    c001b166 <Reg::readInt(char*, char*, int*)+0x7d>
c001b1b8:	84 c0                	test   al,al
c001b1ba:	74 02                	je     c001b1be <Reg::readInt(char*, char*, int*)+0xd5>
c001b1bc:	f7 da                	neg    edx
c001b1be:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1c5:	89 10                	mov    DWORD PTR [eax],edx
c001b1c7:	88 d8                	mov    al,bl
c001b1c9:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1cf:	5b                   	pop    ebx
c001b1d0:	5e                   	pop    esi
c001b1d1:	5f                   	pop    edi
c001b1d2:	5d                   	pop    ebp
c001b1d3:	c3                   	ret    

c001b1d4 <Reg::readString(char*, char*, char*, int)>:
c001b1d4:	57                   	push   edi
c001b1d5:	56                   	push   esi
c001b1d6:	53                   	push   ebx
c001b1d7:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1dd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1e4:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1e8:	57                   	push   edi
c001b1e9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1f0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1f7:	e8 b6 fe ff ff       	call   c001b0b2 <Reg::getLine(char*, char*, char*)>
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	89 c6                	mov    esi,eax
c001b201:	84 c0                	test   al,al
c001b203:	74 44                	je     c001b249 <Reg::readString(char*, char*, char*, int)+0x75>
c001b205:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b20c:	31 c0                	xor    eax,eax
c001b20e:	4a                   	dec    edx
c001b20f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b212:	84 c9                	test   cl,cl
c001b214:	74 0f                	je     c001b225 <Reg::readString(char*, char*, char*, int)+0x51>
c001b216:	39 c2                	cmp    edx,eax
c001b218:	7e 0b                	jle    c001b225 <Reg::readString(char*, char*, char*, int)+0x51>
c001b21a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b21d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b222:	40                   	inc    eax
c001b223:	eb ea                	jmp    c001b20f <Reg::readString(char*, char*, char*, int)+0x3b>
c001b225:	83 ec 0c             	sub    esp,0xc
c001b228:	53                   	push   ebx
c001b229:	e8 66 55 fe ff       	call   c0000794 <strlen>
c001b22e:	83 c4 10             	add    esp,0x10
c001b231:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b236:	75 11                	jne    c001b249 <Reg::readString(char*, char*, char*, int)+0x75>
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	53                   	push   ebx
c001b23c:	e8 53 55 fe ff       	call   c0000794 <strlen>
c001b241:	83 c4 10             	add    esp,0x10
c001b244:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b249:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b24f:	89 f0                	mov    eax,esi
c001b251:	5b                   	pop    ebx
c001b252:	5e                   	pop    esi
c001b253:	5f                   	pop    edi
c001b254:	c3                   	ret    

c001b255 <Reg::readBool(char*, char*, bool*)>:
c001b255:	83 ec 20             	sub    esp,0x20
c001b258:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b25c:	50                   	push   eax
c001b25d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b261:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b265:	e8 7f fe ff ff       	call   c001b0e9 <Reg::readInt(char*, char*, int*)>
c001b26a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b26f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b273:	0f 95 02             	setne  BYTE PTR [edx]
c001b276:	83 c4 2c             	add    esp,0x2c
c001b279:	c3                   	ret    

c001b27a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b27a:	53                   	push   ebx
c001b27b:	83 ec 1c             	sub    esp,0x1c
c001b27e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b282:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b286:	50                   	push   eax
c001b287:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b28b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b28f:	e8 c1 ff ff ff       	call   c001b255 <Reg::readBool(char*, char*, bool*)>
c001b294:	83 c4 10             	add    esp,0x10
c001b297:	84 c0                	test   al,al
c001b299:	74 04                	je     c001b29f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b29b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b29f:	88 d8                	mov    al,bl
c001b2a1:	83 c4 18             	add    esp,0x18
c001b2a4:	5b                   	pop    ebx
c001b2a5:	c3                   	ret    

c001b2a6 <Reg::readIntWithDefault(char*, char*, int)>:
c001b2a6:	53                   	push   ebx
c001b2a7:	83 ec 1c             	sub    esp,0x1c
c001b2aa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b2ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2b2:	50                   	push   eax
c001b2b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2bb:	e8 29 fe ff ff       	call   c001b0e9 <Reg::readInt(char*, char*, int*)>
c001b2c0:	83 c4 10             	add    esp,0x10
c001b2c3:	84 c0                	test   al,al
c001b2c5:	74 04                	je     c001b2cb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2cb:	89 d8                	mov    eax,ebx
c001b2cd:	83 c4 18             	add    esp,0x18
c001b2d0:	5b                   	pop    ebx
c001b2d1:	c3                   	ret    

c001b2d2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2d2:	57                   	push   edi
c001b2d3:	56                   	push   esi
c001b2d4:	53                   	push   ebx
c001b2d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2d9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2e1:	56                   	push   esi
c001b2e2:	53                   	push   ebx
c001b2e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2eb:	e8 e4 fe ff ff       	call   c001b1d4 <Reg::readString(char*, char*, char*, int)>
c001b2f0:	83 c4 10             	add    esp,0x10
c001b2f3:	84 c0                	test   al,al
c001b2f5:	75 1b                	jne    c001b312 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2f7:	50                   	push   eax
c001b2f8:	56                   	push   esi
c001b2f9:	4e                   	dec    esi
c001b2fa:	6a 00                	push   0x0
c001b2fc:	53                   	push   ebx
c001b2fd:	e8 76 54 fe ff       	call   c0000778 <memset>
c001b302:	83 c4 0c             	add    esp,0xc
c001b305:	56                   	push   esi
c001b306:	57                   	push   edi
c001b307:	53                   	push   ebx
c001b308:	89 fb                	mov    ebx,edi
c001b30a:	e8 35 54 fe ff       	call   c0000744 <memcpy>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	89 d8                	mov    eax,ebx
c001b314:	5b                   	pop    ebx
c001b315:	5e                   	pop    esi
c001b316:	5f                   	pop    edi
c001b317:	c3                   	ret    

c001b318 <Sys::eject(regs*)>:
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	83 ca ff             	or     edx,0xffffffff
c001b31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b322:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b325:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b32a:	83 e9 41             	sub    ecx,0x41
c001b32d:	83 f9 19             	cmp    ecx,0x19
c001b330:	77 18                	ja     c001b34a <Sys::eject(regs*)+0x32>
c001b332:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c001b339:	85 c9                	test   ecx,ecx
c001b33b:	74 0d                	je     c001b34a <Sys::eject(regs*)+0x32>
c001b33d:	83 ec 0c             	sub    esp,0xc
c001b340:	51                   	push   ecx
c001b341:	e8 78 b4 ff ff       	call   c00167be <LogicalDisk::eject()>
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	99                   	cdq    
c001b34a:	83 c4 0c             	add    esp,0xc
c001b34d:	c3                   	ret    

c001b34e <Sys::exit(regs*)>:
c001b34e:	83 ec 18             	sub    esp,0x18
c001b351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b355:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b358:	e8 c4 35 00 00       	call   c001e921 <terminateTask(int)>
c001b35d:	83 c8 ff             	or     eax,0xffffffff
c001b360:	83 c4 1c             	add    esp,0x1c
c001b363:	89 c2                	mov    edx,eax
c001b365:	c3                   	ret    

c001b366 <Sys::getCwd(regs*)>:
c001b366:	83 ec 10             	sub    esp,0x10
c001b369:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b36d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b370:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b378:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b37b:	e8 e2 7f ff ff       	call   c0013362 <Fs::getcwd(Process*, char*, int)>
c001b380:	83 c4 1c             	add    esp,0x1c
c001b383:	99                   	cdq    
c001b384:	c3                   	ret    

c001b385 <Sys::getPID(regs*)>:
c001b385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b38a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b38d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b38f:	99                   	cdq    
c001b390:	c3                   	ret    

c001b391 <Sys::getRAMData(regs*)>:
c001b391:	8b 0d b0 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7b0
c001b397:	6b 05 ac e7 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e7ac,0x64
c001b39e:	99                   	cdq    
c001b39f:	f7 f9                	idiv   ecx
c001b3a1:	c1 e0 18             	shl    eax,0x18
c001b3a4:	09 c8                	or     eax,ecx
c001b3a6:	99                   	cdq    
c001b3a7:	c3                   	ret    

c001b3a8 <Sys::loadDLL(regs*)>:
c001b3a8:	56                   	push   esi
c001b3a9:	53                   	push   ebx
c001b3aa:	31 d2                	xor    edx,edx
c001b3ac:	51                   	push   ecx
c001b3ad:	b8 01 00 00 00       	mov    eax,0x1
c001b3b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3b6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b3ba:	0f 84 8c 00 00 00    	je     c001b44c <Sys::loadDLL(regs*)+0xa4>
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	68 14 01 00 00       	push   0x114
c001b3c8:	e8 2f 45 ff ff       	call   c000f8fc <malloc>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	89 c3                	mov    ebx,eax
c001b3d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3da:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3dd:	53                   	push   ebx
c001b3de:	e8 7d 81 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	31 d2                	xor    edx,edx
c001b3e8:	b8 02 00 00 00       	mov    eax,0x2
c001b3ed:	85 db                	test   ebx,ebx
c001b3ef:	74 5b                	je     c001b44c <Sys::loadDLL(regs*)+0xa4>
c001b3f1:	83 ec 0c             	sub    esp,0xc
c001b3f4:	53                   	push   ebx
c001b3f5:	e8 38 84 ff ff       	call   c0013832 <File::exists()>
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	84 c0                	test   al,al
c001b3ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b401:	75 11                	jne    c001b414 <Sys::loadDLL(regs*)+0x6c>
c001b403:	83 ec 0c             	sub    esp,0xc
c001b406:	53                   	push   ebx
c001b407:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b40a:	83 c4 10             	add    esp,0x10
c001b40d:	b8 03 00 00 00       	mov    eax,0x3
c001b412:	eb 36                	jmp    c001b44a <Sys::loadDLL(regs*)+0xa2>
c001b414:	83 ec 0c             	sub    esp,0xc
c001b417:	53                   	push   ebx
c001b418:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b41b:	58                   	pop    eax
c001b41c:	5a                   	pop    edx
c001b41d:	6a 00                	push   0x0
c001b41f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b422:	e8 0f 24 00 00       	call   c001d836 <Thr::loadDLL(char const*, bool)>
c001b427:	83 c4 10             	add    esp,0x10
c001b42a:	89 c1                	mov    ecx,eax
c001b42c:	31 d2                	xor    edx,edx
c001b42e:	b8 04 00 00 00       	mov    eax,0x4
c001b433:	85 c9                	test   ecx,ecx
c001b435:	74 15                	je     c001b44c <Sys::loadDLL(regs*)+0xa4>
c001b437:	53                   	push   ebx
c001b438:	53                   	push   ebx
c001b439:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c001b43f:	51                   	push   ecx
c001b440:	e8 25 26 00 00       	call   c001da6a <Thr::executeDLL(unsigned long, void*)>
c001b445:	83 c4 10             	add    esp,0x10
c001b448:	31 c0                	xor    eax,eax
c001b44a:	31 d2                	xor    edx,edx
c001b44c:	59                   	pop    ecx
c001b44d:	5b                   	pop    ebx
c001b44e:	5e                   	pop    esi
c001b44f:	c3                   	ret    

c001b450 <Sys::read(regs*)>:
c001b450:	57                   	push   edi
c001b451:	56                   	push   esi
c001b452:	53                   	push   ebx
c001b453:	83 ec 10             	sub    esp,0x10
c001b456:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b45a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b45d:	83 f8 02             	cmp    eax,0x2
c001b460:	77 10                	ja     c001b472 <Sys::read(regs*)+0x22>
c001b462:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b467:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b46a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b470:	eb 0e                	jmp    c001b480 <Sys::read(regs*)+0x30>
c001b472:	83 ec 0c             	sub    esp,0xc
c001b475:	50                   	push   eax
c001b476:	e8 76 66 ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001b47b:	83 c4 10             	add    esp,0x10
c001b47e:	89 c1                	mov    ecx,eax
c001b480:	83 c8 ff             	or     eax,0xffffffff
c001b483:	85 c9                	test   ecx,ecx
c001b485:	89 c2                	mov    edx,eax
c001b487:	74 28                	je     c001b4b1 <Sys::read(regs*)+0x61>
c001b489:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b491:	31 ff                	xor    edi,edi
c001b493:	83 ec 0c             	sub    esp,0xc
c001b496:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b498:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b49c:	52                   	push   edx
c001b49d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4a0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4a3:	57                   	push   edi
c001b4a4:	56                   	push   esi
c001b4a5:	51                   	push   ecx
c001b4a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4ad:	83 c4 20             	add    esp,0x20
c001b4b0:	99                   	cdq    
c001b4b1:	83 c4 10             	add    esp,0x10
c001b4b4:	5b                   	pop    ebx
c001b4b5:	5e                   	pop    esi
c001b4b6:	5f                   	pop    edi
c001b4b7:	c3                   	ret    

c001b4b8 <Sys::sbrk(regs*)>:
c001b4b8:	56                   	push   esi
c001b4b9:	53                   	push   ebx
c001b4ba:	83 ec 0c             	sub    esp,0xc
c001b4bd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b4c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4c9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b4cf:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b4d2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b4d5:	68 15 c0 02 c0       	push   0xc002c015
c001b4da:	e8 28 7b ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b4df:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b4e2:	83 c4 10             	add    esp,0x10
c001b4e5:	85 c0                	test   eax,eax
c001b4e7:	75 0a                	jne    c001b4f3 <Sys::sbrk(regs*)+0x3b>
c001b4e9:	50                   	push   eax
c001b4ea:	50                   	push   eax
c001b4eb:	53                   	push   ebx
c001b4ec:	68 31 c0 02 c0       	push   0xc002c031
c001b4f1:	eb 54                	jmp    c001b547 <Sys::sbrk(regs*)+0x8f>
c001b4f3:	79 0a                	jns    c001b4ff <Sys::sbrk(regs*)+0x47>
c001b4f5:	56                   	push   esi
c001b4f6:	56                   	push   esi
c001b4f7:	53                   	push   ebx
c001b4f8:	68 44 c0 02 c0       	push   0xc002c044
c001b4fd:	eb 48                	jmp    c001b547 <Sys::sbrk(regs*)+0x8f>
c001b4ff:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b504:	76 17                	jbe    c001b51d <Sys::sbrk(regs*)+0x65>
c001b506:	51                   	push   ecx
c001b507:	51                   	push   ecx
c001b508:	53                   	push   ebx
c001b509:	68 56 c0 02 c0       	push   0xc002c056
c001b50e:	e8 f4 7a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b513:	83 c8 ff             	or     eax,0xffffffff
c001b516:	83 c4 10             	add    esp,0x10
c001b519:	89 c2                	mov    edx,eax
c001b51b:	eb 36                	jmp    c001b553 <Sys::sbrk(regs*)+0x9b>
c001b51d:	05 ff 0f 00 00       	add    eax,0xfff
c001b522:	56                   	push   esi
c001b523:	c1 e8 0c             	shr    eax,0xc
c001b526:	68 07 04 00 00       	push   0x407
c001b52b:	50                   	push   eax
c001b52c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b531:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b534:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b53a:	e8 df 6f ff ff       	call   c001251e <VAS::allocatePages(int, int)>
c001b53f:	58                   	pop    eax
c001b540:	5a                   	pop    edx
c001b541:	53                   	push   ebx
c001b542:	68 6f c0 02 c0       	push   0xc002c06f
c001b547:	e8 bb 7a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b54c:	89 d8                	mov    eax,ebx
c001b54e:	31 d2                	xor    edx,edx
c001b550:	83 c4 10             	add    esp,0x10
c001b553:	59                   	pop    ecx
c001b554:	5b                   	pop    ebx
c001b555:	5e                   	pop    esi
c001b556:	c3                   	ret    

c001b557 <Sys::setCwd(regs*)>:
c001b557:	83 ec 14             	sub    esp,0x14
c001b55a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b55e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b566:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b569:	e8 63 83 ff ff       	call   c00138d1 <Fs::setcwd(Process*, char*)>
c001b56e:	83 c4 1c             	add    esp,0x1c
c001b571:	99                   	cdq    
c001b572:	c3                   	ret    

c001b573 <Sys::setTime(regs*)>:
c001b573:	55                   	push   ebp
c001b574:	31 d2                	xor    edx,edx
c001b576:	57                   	push   edi
c001b577:	bf 18 00 00 00       	mov    edi,0x18
c001b57c:	56                   	push   esi
c001b57d:	53                   	push   ebx
c001b57e:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b583:	83 ec 30             	sub    esp,0x30
c001b586:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b58a:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b58d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b590:	f7 f3                	div    ebx
c001b592:	89 d6                	mov    esi,edx
c001b594:	31 d2                	xor    edx,edx
c001b596:	f7 f3                	div    ebx
c001b598:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b59b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b59f:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b5a4:	31 d2                	xor    edx,edx
c001b5a6:	f7 f3                	div    ebx
c001b5a8:	31 d2                	xor    edx,edx
c001b5aa:	bb 0c 00 00 00       	mov    ebx,0xc
c001b5af:	f7 f7                	div    edi
c001b5b1:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b5b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5b8:	0f b7 cd             	movzx  ecx,bp
c001b5bb:	56                   	push   esi
c001b5bc:	89 c7                	mov    edi,eax
c001b5be:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b5c2:	c1 e6 10             	shl    esi,0x10
c001b5c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5c9:	83 e7 1f             	and    edi,0x1f
c001b5cc:	51                   	push   ecx
c001b5cd:	47                   	inc    edi
c001b5ce:	c1 e8 05             	shr    eax,0x5
c001b5d1:	31 d2                	xor    edx,edx
c001b5d3:	f7 f3                	div    ebx
c001b5d5:	31 db                	xor    ebx,ebx
c001b5d7:	52                   	push   edx
c001b5d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b5dc:	57                   	push   edi
c001b5dd:	68 95 c0 02 c0       	push   0xc002c095
c001b5e2:	e8 20 7a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b5e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5eb:	89 f8                	mov    eax,edi
c001b5ed:	31 c9                	xor    ecx,ecx
c001b5ef:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5f3:	88 c1                	mov    cl,al
c001b5f5:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5fb:	88 d5                	mov    ch,dl
c001b5fd:	c1 e0 10             	shl    eax,0x10
c001b600:	0f b7 d1             	movzx  edx,cx
c001b603:	09 c2                	or     edx,eax
c001b605:	89 d8                	mov    eax,ebx
c001b607:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b60c:	09 f0                	or     eax,esi
c001b60e:	89 c3                	mov    ebx,eax
c001b610:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b614:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b618:	83 c4 18             	add    esp,0x18
c001b61b:	53                   	push   ebx
c001b61c:	52                   	push   edx
c001b61d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b621:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b625:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b629:	e8 bd 89 ff ff       	call   c0013feb <datetimeToSeconds(datetime_t)>
c001b62e:	83 c4 0c             	add    esp,0xc
c001b631:	52                   	push   edx
c001b632:	50                   	push   eax
c001b633:	56                   	push   esi
c001b634:	e8 39 8b ff ff       	call   c0014172 <secondsToDatetime(unsigned long long)>
c001b639:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b63d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b641:	51                   	push   ecx
c001b642:	89 d6                	mov    esi,edx
c001b644:	51                   	push   ecx
c001b645:	c1 ee 10             	shr    esi,0x10
c001b648:	89 f3                	mov    ebx,esi
c001b64a:	0f b6 f3             	movzx  esi,bl
c001b64d:	56                   	push   esi
c001b64e:	0f b6 f6             	movzx  esi,dh
c001b651:	0f b6 d2             	movzx  edx,dl
c001b654:	56                   	push   esi
c001b655:	52                   	push   edx
c001b656:	89 c2                	mov    edx,eax
c001b658:	c1 ea 10             	shr    edx,0x10
c001b65b:	52                   	push   edx
c001b65c:	0f b6 d4             	movzx  edx,ah
c001b65f:	0f b6 c0             	movzx  eax,al
c001b662:	52                   	push   edx
c001b663:	50                   	push   eax
c001b664:	68 b1 c0 02 c0       	push   0xc002c0b1
c001b669:	e8 99 79 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b66e:	83 c4 2c             	add    esp,0x2c
c001b671:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001b676:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b67a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b67e:	53                   	push   ebx
c001b67f:	51                   	push   ecx
c001b680:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b686:	e8 87 8a ff ff       	call   c0014112 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b68b:	83 f0 01             	xor    eax,0x1
c001b68e:	31 d2                	xor    edx,edx
c001b690:	0f b6 c0             	movzx  eax,al
c001b693:	83 c4 3c             	add    esp,0x3c
c001b696:	5b                   	pop    ebx
c001b697:	5e                   	pop    esi
c001b698:	5f                   	pop    edi
c001b699:	5d                   	pop    ebp
c001b69a:	c3                   	ret    

c001b69b <Sys::timezone(regs*)>:
c001b69b:	53                   	push   ebx
c001b69c:	83 ec 08             	sub    esp,0x8
c001b69f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6a3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b6a7:	75 17                	jne    c001b6c0 <Sys::timezone(regs*)+0x25>
c001b6a9:	83 ec 0c             	sub    esp,0xc
c001b6ac:	68 cd c0 02 c0       	push   0xc002c0cd
c001b6b1:	e8 51 79 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b6b6:	83 c8 ff             	or     eax,0xffffffff
c001b6b9:	83 c4 10             	add    esp,0x10
c001b6bc:	89 c2                	mov    edx,eax
c001b6be:	eb 20                	jmp    c001b6e0 <Sys::timezone(regs*)+0x45>
c001b6c0:	83 ec 0c             	sub    esp,0xc
c001b6c3:	68 05 c1 02 c0       	push   0xc002c105
c001b6c8:	e8 3a 79 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b6cd:	58                   	pop    eax
c001b6ce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b6d1:	e8 9e 87 ff ff       	call   c0013e74 <User::loadClockSettings(int)>
c001b6d6:	83 c4 10             	add    esp,0x10
c001b6d9:	b8 01 00 00 00       	mov    eax,0x1
c001b6de:	31 d2                	xor    edx,edx
c001b6e0:	83 c4 08             	add    esp,0x8
c001b6e3:	5b                   	pop    ebx
c001b6e4:	c3                   	ret    

c001b6e5 <Sys::write(regs*)>:
c001b6e5:	57                   	push   edi
c001b6e6:	56                   	push   esi
c001b6e7:	53                   	push   ebx
c001b6e8:	83 ec 10             	sub    esp,0x10
c001b6eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6ef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6f2:	83 f8 02             	cmp    eax,0x2
c001b6f5:	77 10                	ja     c001b707 <Sys::write(regs*)+0x22>
c001b6f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6ff:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b705:	eb 0e                	jmp    c001b715 <Sys::write(regs*)+0x30>
c001b707:	83 ec 0c             	sub    esp,0xc
c001b70a:	50                   	push   eax
c001b70b:	e8 e1 63 ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001b710:	83 c4 10             	add    esp,0x10
c001b713:	89 c1                	mov    ecx,eax
c001b715:	83 c8 ff             	or     eax,0xffffffff
c001b718:	85 c9                	test   ecx,ecx
c001b71a:	89 c2                	mov    edx,eax
c001b71c:	74 28                	je     c001b746 <Sys::write(regs*)+0x61>
c001b71e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b726:	31 ff                	xor    edi,edi
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b72d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b731:	52                   	push   edx
c001b732:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b735:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b738:	57                   	push   edi
c001b739:	56                   	push   esi
c001b73a:	51                   	push   ecx
c001b73b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b73e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b742:	83 c4 20             	add    esp,0x20
c001b745:	99                   	cdq    
c001b746:	83 c4 10             	add    esp,0x10
c001b749:	5b                   	pop    ebx
c001b74a:	5e                   	pop    esi
c001b74b:	5f                   	pop    edi
c001b74c:	c3                   	ret    

c001b74d <Sys::wsbe(regs*)>:
c001b74d:	57                   	push   edi
c001b74e:	b9 0b 00 00 00       	mov    ecx,0xb
c001b753:	56                   	push   esi
c001b754:	be 44 c1 02 c0       	mov    esi,0xc002c144
c001b759:	53                   	push   ebx
c001b75a:	83 ec 30             	sub    esp,0x30
c001b75d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b761:	fc                   	cld    
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b767:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b76b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b770:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b773:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b779:	8b 06                	mov    eax,DWORD PTR [esi]
c001b77b:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b77e:	57                   	push   edi
c001b77f:	e8 10 50 fe ff       	call   c0000794 <strlen>
c001b784:	5a                   	pop    edx
c001b785:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b789:	52                   	push   edx
c001b78a:	31 d2                	xor    edx,edx
c001b78c:	57                   	push   edi
c001b78d:	52                   	push   edx
c001b78e:	50                   	push   eax
c001b78f:	56                   	push   esi
c001b790:	ff d3                	call   ebx
c001b792:	83 c4 14             	add    esp,0x14
c001b795:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b799:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b79c:	e8 80 31 00 00       	call   c001e921 <terminateTask(int)>
c001b7a1:	83 c4 40             	add    esp,0x40
c001b7a4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b7a9:	5b                   	pop    ebx
c001b7aa:	31 d2                	xor    edx,edx
c001b7ac:	5e                   	pop    esi
c001b7ad:	5f                   	pop    edi
c001b7ae:	c3                   	ret    

c001b7af <Sys::yield(regs*)>:
c001b7af:	57                   	push   edi
c001b7b0:	56                   	push   esi
c001b7b1:	53                   	push   ebx
c001b7b2:	e8 27 27 00 00       	call   c001dede <lockScheduler()>
c001b7b7:	e8 5e 2a 00 00       	call   c001e21a <schedule()>
c001b7bc:	e8 1f 27 00 00       	call   c001dee0 <unlockScheduler()>
c001b7c1:	8b 35 f0 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edf0
c001b7c7:	8b 3d f4 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002edf4
c001b7cd:	89 f0                	mov    eax,esi
c001b7cf:	89 fb                	mov    ebx,edi
c001b7d1:	89 f1                	mov    ecx,esi
c001b7d3:	c1 e0 07             	shl    eax,0x7
c001b7d6:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b7da:	25 80 30 0f 00       	and    eax,0xf3080
c001b7df:	c1 eb 17             	shr    ebx,0x17
c001b7e2:	31 c8                	xor    eax,ecx
c001b7e4:	89 da                	mov    edx,ebx
c001b7e6:	5b                   	pop    ebx
c001b7e7:	5e                   	pop    esi
c001b7e8:	5f                   	pop    edi
c001b7e9:	c3                   	ret    

c001b7ea <sysCallSeekDir(regs*)>:
c001b7ea:	31 c0                	xor    eax,eax
c001b7ec:	31 d2                	xor    edx,edx
c001b7ee:	c3                   	ret    

c001b7ef <sysCallTellDir(regs*)>:
c001b7ef:	31 c0                	xor    eax,eax
c001b7f1:	31 d2                	xor    edx,edx
c001b7f3:	c3                   	ret    

c001b7f4 <sysCallVerify(regs*)>:
c001b7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7f8:	31 d2                	xor    edx,edx
c001b7fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7fd:	c3                   	ret    

c001b7fe <sysFormatDisk(regs*)>:
c001b7fe:	56                   	push   esi
c001b7ff:	53                   	push   ebx
c001b800:	53                   	push   ebx
c001b801:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b805:	8b 1d ec e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e8ec
c001b80b:	eb 25                	jmp    c001b832 <sysFormatDisk(regs*)+0x34>
c001b80d:	83 ec 0c             	sub    esp,0xc
c001b810:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b813:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b815:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b818:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b81b:	50                   	push   eax
c001b81c:	ff 34 85 80 ed 02 c0 	push   DWORD PTR [eax*4-0x3ffd1280]
c001b823:	53                   	push   ebx
c001b824:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b827:	83 c4 20             	add    esp,0x20
c001b82a:	83 f8 08             	cmp    eax,0x8
c001b82d:	75 12                	jne    c001b841 <sysFormatDisk(regs*)+0x43>
c001b82f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b832:	85 db                	test   ebx,ebx
c001b834:	75 d7                	jne    c001b80d <sysFormatDisk(regs*)+0xf>
c001b836:	59                   	pop    ecx
c001b837:	b8 03 00 00 00       	mov    eax,0x3
c001b83c:	31 d2                	xor    edx,edx
c001b83e:	5b                   	pop    ebx
c001b83f:	5e                   	pop    esi
c001b840:	c3                   	ret    
c001b841:	85 c0                	test   eax,eax
c001b843:	74 1b                	je     c001b860 <sysFormatDisk(regs*)+0x62>
c001b845:	83 f8 09             	cmp    eax,0x9
c001b848:	74 0b                	je     c001b855 <sysFormatDisk(regs*)+0x57>
c001b84a:	59                   	pop    ecx
c001b84b:	b8 02 00 00 00       	mov    eax,0x2
c001b850:	31 d2                	xor    edx,edx
c001b852:	5b                   	pop    ebx
c001b853:	5e                   	pop    esi
c001b854:	c3                   	ret    
c001b855:	59                   	pop    ecx
c001b856:	b8 01 00 00 00       	mov    eax,0x1
c001b85b:	31 d2                	xor    edx,edx
c001b85d:	5b                   	pop    ebx
c001b85e:	5e                   	pop    esi
c001b85f:	c3                   	ret    
c001b860:	59                   	pop    ecx
c001b861:	31 c0                	xor    eax,eax
c001b863:	31 d2                	xor    edx,edx
c001b865:	5b                   	pop    ebx
c001b866:	5e                   	pop    esi
c001b867:	c3                   	ret    

c001b868 <sysSetDiskVolumeLabel(regs*)>:
c001b868:	56                   	push   esi
c001b869:	53                   	push   ebx
c001b86a:	53                   	push   ebx
c001b86b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b86f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b872:	83 f8 19             	cmp    eax,0x19
c001b875:	77 29                	ja     c001b8a0 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b877:	8b 0c 85 80 ed 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1280]
c001b87e:	85 c9                	test   ecx,ecx
c001b880:	74 1e                	je     c001b8a0 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b882:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b885:	85 d2                	test   edx,edx
c001b887:	74 17                	je     c001b8a0 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b889:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b88f:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b891:	52                   	push   edx
c001b892:	50                   	push   eax
c001b893:	51                   	push   ecx
c001b894:	53                   	push   ebx
c001b895:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b898:	83 c4 10             	add    esp,0x10
c001b89b:	99                   	cdq    
c001b89c:	59                   	pop    ecx
c001b89d:	5b                   	pop    ebx
c001b89e:	5e                   	pop    esi
c001b89f:	c3                   	ret    
c001b8a0:	59                   	pop    ecx
c001b8a1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8ab:	5b                   	pop    ebx
c001b8ac:	5e                   	pop    esi
c001b8ad:	c3                   	ret    

c001b8ae <sysGetDiskVolumeLabel(regs*)>:
c001b8ae:	57                   	push   edi
c001b8af:	56                   	push   esi
c001b8b0:	53                   	push   ebx
c001b8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b8b8:	83 fa 19             	cmp    edx,0x19
c001b8bb:	77 34                	ja     c001b8f1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8bd:	8b 0c 95 80 ed 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1280]
c001b8c4:	85 c9                	test   ecx,ecx
c001b8c6:	74 29                	je     c001b8f1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8c8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8cb:	85 db                	test   ebx,ebx
c001b8cd:	74 22                	je     c001b8f1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8cf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b8d2:	85 c0                	test   eax,eax
c001b8d4:	74 1b                	je     c001b8f1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8d6:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b8dc:	83 ec 0c             	sub    esp,0xc
c001b8df:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b8e1:	50                   	push   eax
c001b8e2:	53                   	push   ebx
c001b8e3:	52                   	push   edx
c001b8e4:	51                   	push   ecx
c001b8e5:	56                   	push   esi
c001b8e6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b8e9:	83 c4 20             	add    esp,0x20
c001b8ec:	99                   	cdq    
c001b8ed:	5b                   	pop    ebx
c001b8ee:	5e                   	pop    esi
c001b8ef:	5f                   	pop    edi
c001b8f0:	c3                   	ret    
c001b8f1:	5b                   	pop    ebx
c001b8f2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8fc:	5e                   	pop    esi
c001b8fd:	5f                   	pop    edi
c001b8fe:	c3                   	ret    

c001b8ff <sysShutdown(regs*)>:
c001b8ff:	83 ec 0c             	sub    esp,0xc
c001b902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b906:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b909:	85 c0                	test   eax,eax
c001b90b:	74 18                	je     c001b925 <sysShutdown(regs*)+0x26>
c001b90d:	83 f8 01             	cmp    eax,0x1
c001b910:	74 38                	je     c001b94a <sysShutdown(regs*)+0x4b>
c001b912:	83 f8 02             	cmp    eax,0x2
c001b915:	74 24                	je     c001b93b <sysShutdown(regs*)+0x3c>
c001b917:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b91c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b921:	83 c4 0c             	add    esp,0xc
c001b924:	c3                   	ret    
c001b925:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001b92a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b92c:	6a 00                	push   0x0
c001b92e:	6a 00                	push   0x0
c001b930:	6a 00                	push   0x0
c001b932:	50                   	push   eax
c001b933:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b936:	83 c4 10             	add    esp,0x10
c001b939:	eb dc                	jmp    c001b917 <sysShutdown(regs*)+0x18>
c001b93b:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001b940:	8b 10                	mov    edx,DWORD PTR [eax]
c001b942:	6a 00                	push   0x0
c001b944:	6a 00                	push   0x0
c001b946:	6a 01                	push   0x1
c001b948:	eb e8                	jmp    c001b932 <sysShutdown(regs*)+0x33>
c001b94a:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001b94f:	85 c0                	test   eax,eax
c001b951:	74 02                	je     c001b955 <sysShutdown(regs*)+0x56>
c001b953:	ff d0                	call   eax
c001b955:	31 c0                	xor    eax,eax
c001b957:	31 d2                	xor    edx,edx
c001b959:	83 c4 0c             	add    esp,0xc
c001b95c:	c3                   	ret    

c001b95d <sysCallRealpath(regs*)>:
c001b95d:	83 ec 0c             	sub    esp,0xc
c001b960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b964:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b967:	85 d2                	test   edx,edx
c001b969:	74 07                	je     c001b972 <sysCallRealpath(regs*)+0x15>
c001b96b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b96e:	85 c0                	test   eax,eax
c001b970:	75 0b                	jne    c001b97d <sysCallRealpath(regs*)+0x20>
c001b972:	b8 01 00 00 00       	mov    eax,0x1
c001b977:	31 d2                	xor    edx,edx
c001b979:	83 c4 0c             	add    esp,0xc
c001b97c:	c3                   	ret    
c001b97d:	51                   	push   ecx
c001b97e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b984:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b987:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b98d:	51                   	push   ecx
c001b98e:	52                   	push   edx
c001b98f:	50                   	push   eax
c001b990:	e8 21 7a ff ff       	call   c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b995:	83 c4 10             	add    esp,0x10
c001b998:	31 c0                	xor    eax,eax
c001b99a:	31 d2                	xor    edx,edx
c001b99c:	83 c4 0c             	add    esp,0xc
c001b99f:	c3                   	ret    

c001b9a0 <sysCallGetArgc(regs*)>:
c001b9a0:	83 ec 14             	sub    esp,0x14
c001b9a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9ab:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b9b1:	68 70 c1 02 c0       	push   0xc002c170
c001b9b6:	e8 4c 76 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001b9bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9c3:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b9c9:	83 c4 1c             	add    esp,0x1c
c001b9cc:	99                   	cdq    
c001b9cd:	c3                   	ret    

c001b9ce <sysCallReadDir(regs*)>:
c001b9ce:	53                   	push   ebx
c001b9cf:	83 ec 18             	sub    esp,0x18
c001b9d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9d6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9d9:	83 f8 02             	cmp    eax,0x2
c001b9dc:	76 53                	jbe    c001ba31 <sysCallReadDir(regs*)+0x63>
c001b9de:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b9e1:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b9e7:	77 4f                	ja     c001ba38 <sysCallReadDir(regs*)+0x6a>
c001b9e9:	83 ec 0c             	sub    esp,0xc
c001b9ec:	50                   	push   eax
c001b9ed:	e8 ff 60 ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001b9f2:	83 c4 10             	add    esp,0x10
c001b9f5:	85 c0                	test   eax,eax
c001b9f7:	74 50                	je     c001ba49 <sysCallReadDir(regs*)+0x7b>
c001b9f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ba01:	83 ec 0c             	sub    esp,0xc
c001ba04:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba06:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ba0a:	51                   	push   ecx
c001ba0b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba0e:	6a 00                	push   0x0
c001ba10:	68 10 01 00 00       	push   0x110
c001ba15:	50                   	push   eax
c001ba16:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ba19:	83 c4 20             	add    esp,0x20
c001ba1c:	85 c0                	test   eax,eax
c001ba1e:	74 38                	je     c001ba58 <sysCallReadDir(regs*)+0x8a>
c001ba20:	83 f8 07             	cmp    eax,0x7
c001ba23:	74 0c                	je     c001ba31 <sysCallReadDir(regs*)+0x63>
c001ba25:	b8 02 00 00 00       	mov    eax,0x2
c001ba2a:	31 d2                	xor    edx,edx
c001ba2c:	83 c4 18             	add    esp,0x18
c001ba2f:	5b                   	pop    ebx
c001ba30:	c3                   	ret    
c001ba31:	b8 01 00 00 00       	mov    eax,0x1
c001ba36:	eb f2                	jmp    c001ba2a <sysCallReadDir(regs*)+0x5c>
c001ba38:	83 ec 08             	sub    esp,0x8
c001ba3b:	52                   	push   edx
c001ba3c:	68 88 c2 02 c0       	push   0xc002c288
c001ba41:	e8 c1 75 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001ba46:	83 c4 10             	add    esp,0x10
c001ba49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba53:	83 c4 18             	add    esp,0x18
c001ba56:	5b                   	pop    ebx
c001ba57:	c3                   	ret    
c001ba58:	31 c0                	xor    eax,eax
c001ba5a:	eb ce                	jmp    c001ba2a <sysCallReadDir(regs*)+0x5c>

c001ba5c <sysCallIsATTY(regs*)>:
c001ba5c:	83 ec 0c             	sub    esp,0xc
c001ba5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba66:	83 f8 02             	cmp    eax,0x2
c001ba69:	76 07                	jbe    c001ba72 <sysCallIsATTY(regs*)+0x16>
c001ba6b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba70:	75 26                	jne    c001ba98 <sysCallIsATTY(regs*)+0x3c>
c001ba72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba7a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba80:	85 c0                	test   eax,eax
c001ba82:	74 24                	je     c001baa8 <sysCallIsATTY(regs*)+0x4c>
c001ba84:	83 ec 0c             	sub    esp,0xc
c001ba87:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba89:	50                   	push   eax
c001ba8a:	ff 12                	call   DWORD PTR [edx]
c001ba8c:	31 d2                	xor    edx,edx
c001ba8e:	0f b6 c0             	movzx  eax,al
c001ba91:	83 c4 10             	add    esp,0x10
c001ba94:	83 c4 0c             	add    esp,0xc
c001ba97:	c3                   	ret    
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	50                   	push   eax
c001ba9c:	e8 50 60 ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001baa1:	83 c4 10             	add    esp,0x10
c001baa4:	85 c0                	test   eax,eax
c001baa6:	75 dc                	jne    c001ba84 <sysCallIsATTY(regs*)+0x28>
c001baa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab2:	83 c4 0c             	add    esp,0xc
c001bab5:	c3                   	ret    

c001bab6 <sysCallSeek(regs*)>:
c001bab6:	53                   	push   ebx
c001bab7:	83 ec 08             	sub    esp,0x8
c001baba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001babe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bac1:	83 f8 02             	cmp    eax,0x2
c001bac4:	76 4a                	jbe    c001bb10 <sysCallSeek(regs*)+0x5a>
c001bac6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bacb:	77 32                	ja     c001baff <sysCallSeek(regs*)+0x49>
c001bacd:	83 ec 0c             	sub    esp,0xc
c001bad0:	50                   	push   eax
c001bad1:	e8 1b 60 ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001bad6:	83 c4 0c             	add    esp,0xc
c001bad9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001badc:	31 db                	xor    ebx,ebx
c001bade:	53                   	push   ebx
c001badf:	51                   	push   ecx
c001bae0:	50                   	push   eax
c001bae1:	e8 9c 7b ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001bae6:	83 c4 10             	add    esp,0x10
c001bae9:	85 c0                	test   eax,eax
c001baeb:	0f 95 c0             	setne  al
c001baee:	31 d2                	xor    edx,edx
c001baf0:	0f b6 c0             	movzx  eax,al
c001baf3:	f7 d8                	neg    eax
c001baf5:	83 d2 00             	adc    edx,0x0
c001baf8:	83 c4 08             	add    esp,0x8
c001bafb:	f7 da                	neg    edx
c001bafd:	5b                   	pop    ebx
c001bafe:	c3                   	ret    
c001baff:	83 ec 08             	sub    esp,0x8
c001bb02:	50                   	push   eax
c001bb03:	68 7b c1 02 c0       	push   0xc002c17b
c001bb08:	e8 fa 74 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001bb0d:	83 c4 10             	add    esp,0x10
c001bb10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb15:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb1a:	83 c4 08             	add    esp,0x8
c001bb1d:	5b                   	pop    ebx
c001bb1e:	c3                   	ret    

c001bb1f <sysCallTell(regs*)>:
c001bb1f:	53                   	push   ebx
c001bb20:	83 ec 08             	sub    esp,0x8
c001bb23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb2a:	83 f8 02             	cmp    eax,0x2
c001bb2d:	76 5e                	jbe    c001bb8d <sysCallTell(regs*)+0x6e>
c001bb2f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb34:	77 2d                	ja     c001bb63 <sysCallTell(regs*)+0x44>
c001bb36:	83 ec 0c             	sub    esp,0xc
c001bb39:	50                   	push   eax
c001bb3a:	e8 b2 5f ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001bb3f:	5a                   	pop    edx
c001bb40:	59                   	pop    ecx
c001bb41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb44:	50                   	push   eax
c001bb45:	e8 8e 7b ff ff       	call   c00136d8 <File::tell(unsigned long long*)>
c001bb4a:	83 c4 10             	add    esp,0x10
c001bb4d:	85 c0                	test   eax,eax
c001bb4f:	0f 95 c0             	setne  al
c001bb52:	31 d2                	xor    edx,edx
c001bb54:	0f b6 c0             	movzx  eax,al
c001bb57:	f7 d8                	neg    eax
c001bb59:	83 d2 00             	adc    edx,0x0
c001bb5c:	83 c4 08             	add    esp,0x8
c001bb5f:	f7 da                	neg    edx
c001bb61:	5b                   	pop    ebx
c001bb62:	c3                   	ret    
c001bb63:	83 ec 08             	sub    esp,0x8
c001bb66:	50                   	push   eax
c001bb67:	68 95 c1 02 c0       	push   0xc002c195
c001bb6c:	e8 96 74 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001bb71:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb74:	83 c4 10             	add    esp,0x10
c001bb77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb84:	31 d2                	xor    edx,edx
c001bb86:	31 c0                	xor    eax,eax
c001bb88:	83 c4 08             	add    esp,0x8
c001bb8b:	5b                   	pop    ebx
c001bb8c:	c3                   	ret    
c001bb8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb92:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb97:	83 c4 08             	add    esp,0x8
c001bb9a:	5b                   	pop    ebx
c001bb9b:	c3                   	ret    

c001bb9c <sysCallSize(regs*)>:
c001bb9c:	53                   	push   ebx
c001bb9d:	83 ec 18             	sub    esp,0x18
c001bba0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bba4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bba7:	83 f8 02             	cmp    eax,0x2
c001bbaa:	76 64                	jbe    c001bc10 <sysCallSize(regs*)+0x74>
c001bbac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbb1:	77 33                	ja     c001bbe6 <sysCallSize(regs*)+0x4a>
c001bbb3:	83 ec 0c             	sub    esp,0xc
c001bbb6:	50                   	push   eax
c001bbb7:	e8 35 5f ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001bbbc:	83 c4 0c             	add    esp,0xc
c001bbbf:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bbc3:	52                   	push   edx
c001bbc4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bbc7:	50                   	push   eax
c001bbc8:	e8 a3 7c ff ff       	call   c0013870 <File::stat(unsigned long long*, bool*)>
c001bbcd:	83 c4 10             	add    esp,0x10
c001bbd0:	85 c0                	test   eax,eax
c001bbd2:	0f 95 c0             	setne  al
c001bbd5:	31 d2                	xor    edx,edx
c001bbd7:	0f b6 c0             	movzx  eax,al
c001bbda:	f7 d8                	neg    eax
c001bbdc:	83 d2 00             	adc    edx,0x0
c001bbdf:	83 c4 18             	add    esp,0x18
c001bbe2:	f7 da                	neg    edx
c001bbe4:	5b                   	pop    ebx
c001bbe5:	c3                   	ret    
c001bbe6:	83 ec 08             	sub    esp,0x8
c001bbe9:	50                   	push   eax
c001bbea:	68 af c1 02 c0       	push   0xc002c1af
c001bbef:	e8 13 74 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001bbf4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc07:	31 d2                	xor    edx,edx
c001bc09:	31 c0                	xor    eax,eax
c001bc0b:	83 c4 18             	add    esp,0x18
c001bc0e:	5b                   	pop    ebx
c001bc0f:	c3                   	ret    
c001bc10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc15:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1a:	83 c4 18             	add    esp,0x18
c001bc1d:	5b                   	pop    ebx
c001bc1e:	c3                   	ret    

c001bc1f <sysCallSizeFromFilename(regs*)>:
c001bc1f:	57                   	push   edi
c001bc20:	56                   	push   esi
c001bc21:	53                   	push   ebx
c001bc22:	83 ec 20             	sub    esp,0x20
c001bc25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc29:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bc2c:	83 fb 02             	cmp    ebx,0x2
c001bc2f:	0f 86 99 00 00 00    	jbe    c001bcce <sysCallSizeFromFilename(regs*)+0xaf>
c001bc35:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bc3b:	77 65                	ja     c001bca2 <sysCallSizeFromFilename(regs*)+0x83>
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	68 14 01 00 00       	push   0x114
c001bc45:	e8 b2 3c ff ff       	call   c000f8fc <malloc>
c001bc4a:	83 c4 0c             	add    esp,0xc
c001bc4d:	89 c6                	mov    esi,eax
c001bc4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc54:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc57:	53                   	push   ebx
c001bc58:	56                   	push   esi
c001bc59:	e8 02 79 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001bc5e:	83 c4 0c             	add    esp,0xc
c001bc61:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc65:	50                   	push   eax
c001bc66:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc69:	56                   	push   esi
c001bc6a:	e8 01 7c ff ff       	call   c0013870 <File::stat(unsigned long long*, bool*)>
c001bc6f:	83 c4 10             	add    esp,0x10
c001bc72:	85 f6                	test   esi,esi
c001bc74:	74 14                	je     c001bc8a <sysCallSizeFromFilename(regs*)+0x6b>
c001bc76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc7a:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc7c:	83 ec 0c             	sub    esp,0xc
c001bc7f:	56                   	push   esi
c001bc80:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc8a:	85 c0                	test   eax,eax
c001bc8c:	0f 95 c0             	setne  al
c001bc8f:	31 d2                	xor    edx,edx
c001bc91:	0f b6 c0             	movzx  eax,al
c001bc94:	f7 d8                	neg    eax
c001bc96:	83 d2 00             	adc    edx,0x0
c001bc99:	83 c4 20             	add    esp,0x20
c001bc9c:	f7 da                	neg    edx
c001bc9e:	5b                   	pop    ebx
c001bc9f:	5e                   	pop    esi
c001bca0:	5f                   	pop    edi
c001bca1:	c3                   	ret    
c001bca2:	83 ec 08             	sub    esp,0x8
c001bca5:	53                   	push   ebx
c001bca6:	68 af c1 02 c0       	push   0xc002c1af
c001bcab:	e8 57 73 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001bcb0:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bcb3:	83 c4 10             	add    esp,0x10
c001bcb6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bcbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcc3:	31 d2                	xor    edx,edx
c001bcc5:	83 c4 20             	add    esp,0x20
c001bcc8:	31 c0                	xor    eax,eax
c001bcca:	5b                   	pop    ebx
c001bccb:	5e                   	pop    esi
c001bccc:	5f                   	pop    edi
c001bccd:	c3                   	ret    
c001bcce:	83 c4 20             	add    esp,0x20
c001bcd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd6:	5b                   	pop    ebx
c001bcd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcdc:	5e                   	pop    esi
c001bcdd:	5f                   	pop    edi
c001bcde:	c3                   	ret    

c001bcdf <sysCallClose(regs*)>:
c001bcdf:	53                   	push   ebx
c001bce0:	83 ec 08             	sub    esp,0x8
c001bce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcea:	83 f8 02             	cmp    eax,0x2
c001bced:	76 50                	jbe    c001bd3f <sysCallClose(regs*)+0x60>
c001bcef:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcf4:	74 58                	je     c001bd4e <sysCallClose(regs*)+0x6f>
c001bcf6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcfb:	74 60                	je     c001bd5d <sysCallClose(regs*)+0x7e>
c001bcfd:	77 2f                	ja     c001bd2e <sysCallClose(regs*)+0x4f>
c001bcff:	83 ec 0c             	sub    esp,0xc
c001bd02:	50                   	push   eax
c001bd03:	e8 e9 5d ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001bd08:	89 c3                	mov    ebx,eax
c001bd0a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd0d:	e8 10 79 ff ff       	call   c0013622 <File::close()>
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	85 db                	test   ebx,ebx
c001bd17:	74 0c                	je     c001bd25 <sysCallClose(regs*)+0x46>
c001bd19:	83 ec 0c             	sub    esp,0xc
c001bd1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd1e:	53                   	push   ebx
c001bd1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd22:	83 c4 10             	add    esp,0x10
c001bd25:	31 c0                	xor    eax,eax
c001bd27:	31 d2                	xor    edx,edx
c001bd29:	83 c4 08             	add    esp,0x8
c001bd2c:	5b                   	pop    ebx
c001bd2d:	c3                   	ret    
c001bd2e:	83 ec 08             	sub    esp,0x8
c001bd31:	50                   	push   eax
c001bd32:	68 ac c2 02 c0       	push   0xc002c2ac
c001bd37:	e8 cb 72 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001bd3c:	83 c4 10             	add    esp,0x10
c001bd3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd44:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd49:	83 c4 08             	add    esp,0x8
c001bd4c:	5b                   	pop    ebx
c001bd4d:	c3                   	ret    
c001bd4e:	83 ec 0c             	sub    esp,0xc
c001bd51:	68 ca c1 02 c0       	push   0xc002c1ca
c001bd56:	e8 ac 72 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001bd5b:	eb c5                	jmp    c001bd22 <sysCallClose(regs*)+0x43>
c001bd5d:	83 ec 0c             	sub    esp,0xc
c001bd60:	68 d8 c1 02 c0       	push   0xc002c1d8
c001bd65:	eb ef                	jmp    c001bd56 <sysCallClose(regs*)+0x77>

c001bd67 <sysCallOpenDir(regs*)>:
c001bd67:	56                   	push   esi
c001bd68:	53                   	push   ebx
c001bd69:	53                   	push   ebx
c001bd6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd6e:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd71:	85 f6                	test   esi,esi
c001bd73:	74 59                	je     c001bdce <sysCallOpenDir(regs*)+0x67>
c001bd75:	83 ec 0c             	sub    esp,0xc
c001bd78:	68 14 01 00 00       	push   0x114
c001bd7d:	e8 7a 3b ff ff       	call   c000f8fc <malloc>
c001bd82:	83 c4 0c             	add    esp,0xc
c001bd85:	89 c6                	mov    esi,eax
c001bd87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd8c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd8f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd92:	56                   	push   esi
c001bd93:	e8 74 7c ff ff       	call   c0013a0c <Directory::Directory(char const*, Process*)>
c001bd98:	83 c4 10             	add    esp,0x10
c001bd9b:	85 f6                	test   esi,esi
c001bd9d:	74 2f                	je     c001bdce <sysCallOpenDir(regs*)+0x67>
c001bd9f:	83 ec 0c             	sub    esp,0xc
c001bda2:	56                   	push   esi
c001bda3:	e8 c8 7c ff ff       	call   c0013a70 <Directory::open()>
c001bda8:	83 c4 10             	add    esp,0x10
c001bdab:	85 c0                	test   eax,eax
c001bdad:	75 1f                	jne    c001bdce <sysCallOpenDir(regs*)+0x67>
c001bdaf:	83 ec 0c             	sub    esp,0xc
c001bdb2:	56                   	push   esi
c001bdb3:	e8 44 5a ff ff       	call   c00117fc <UnixFile::getFileDescriptor()>
c001bdb8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdbb:	83 c4 10             	add    esp,0x10
c001bdbe:	89 02                	mov    DWORD PTR [edx],eax
c001bdc0:	c1 f8 1f             	sar    eax,0x1f
c001bdc3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bdc6:	31 c0                	xor    eax,eax
c001bdc8:	59                   	pop    ecx
c001bdc9:	31 d2                	xor    edx,edx
c001bdcb:	5b                   	pop    ebx
c001bdcc:	5e                   	pop    esi
c001bdcd:	c3                   	ret    
c001bdce:	59                   	pop    ecx
c001bdcf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd9:	5b                   	pop    ebx
c001bdda:	5e                   	pop    esi
c001bddb:	c3                   	ret    

c001bddc <sysCallCloseDir(regs*)>:
c001bddc:	53                   	push   ebx
c001bddd:	83 ec 08             	sub    esp,0x8
c001bde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bde7:	83 f8 02             	cmp    eax,0x2
c001bdea:	76 47                	jbe    c001be33 <sysCallCloseDir(regs*)+0x57>
c001bdec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdf1:	77 2f                	ja     c001be22 <sysCallCloseDir(regs*)+0x46>
c001bdf3:	83 ec 0c             	sub    esp,0xc
c001bdf6:	50                   	push   eax
c001bdf7:	e8 f5 5c ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001bdfc:	89 c3                	mov    ebx,eax
c001bdfe:	89 04 24             	mov    DWORD PTR [esp],eax
c001be01:	e8 c6 7c ff ff       	call   c0013acc <Directory::close()>
c001be06:	83 c4 10             	add    esp,0x10
c001be09:	85 db                	test   ebx,ebx
c001be0b:	74 0c                	je     c001be19 <sysCallCloseDir(regs*)+0x3d>
c001be0d:	83 ec 0c             	sub    esp,0xc
c001be10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be12:	53                   	push   ebx
c001be13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	31 c0                	xor    eax,eax
c001be1b:	31 d2                	xor    edx,edx
c001be1d:	83 c4 08             	add    esp,0x8
c001be20:	5b                   	pop    ebx
c001be21:	c3                   	ret    
c001be22:	83 ec 08             	sub    esp,0x8
c001be25:	50                   	push   eax
c001be26:	68 d4 c2 02 c0       	push   0xc002c2d4
c001be2b:	e8 d7 71 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be38:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be3d:	83 c4 08             	add    esp,0x8
c001be40:	5b                   	pop    ebx
c001be41:	c3                   	ret    

c001be42 <sysCallMakeDir(regs*)>:
c001be42:	56                   	push   esi
c001be43:	53                   	push   ebx
c001be44:	83 ec 10             	sub    esp,0x10
c001be47:	68 14 01 00 00       	push   0x114
c001be4c:	e8 ab 3a ff ff       	call   c000f8fc <malloc>
c001be51:	83 c4 0c             	add    esp,0xc
c001be54:	89 c3                	mov    ebx,eax
c001be56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be5b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be62:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be65:	53                   	push   ebx
c001be66:	e8 a1 7b ff ff       	call   c0013a0c <Directory::Directory(char const*, Process*)>
c001be6b:	83 c4 10             	add    esp,0x10
c001be6e:	85 db                	test   ebx,ebx
c001be70:	74 32                	je     c001bea4 <sysCallMakeDir(regs*)+0x62>
c001be72:	83 ec 0c             	sub    esp,0xc
c001be75:	53                   	push   ebx
c001be76:	e8 d5 7d ff ff       	call   c0013c50 <Directory::create()>
c001be7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be7e:	89 c6                	mov    esi,eax
c001be80:	e8 47 7c ff ff       	call   c0013acc <Directory::close()>
c001be85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be8d:	83 c4 10             	add    esp,0x10
c001be90:	31 c0                	xor    eax,eax
c001be92:	59                   	pop    ecx
c001be93:	85 f6                	test   esi,esi
c001be95:	5b                   	pop    ebx
c001be96:	0f 95 c0             	setne  al
c001be99:	5e                   	pop    esi
c001be9a:	31 d2                	xor    edx,edx
c001be9c:	f7 d8                	neg    eax
c001be9e:	83 d2 00             	adc    edx,0x0
c001bea1:	f7 da                	neg    edx
c001bea3:	c3                   	ret    
c001bea4:	59                   	pop    ecx
c001bea5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001beaf:	5b                   	pop    ebx
c001beb0:	5e                   	pop    esi
c001beb1:	c3                   	ret    

c001beb2 <sysCallWait(regs*)>:
c001beb2:	83 ec 10             	sub    esp,0x10
c001beb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001beb9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bebc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bebf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bec2:	e8 ce 24 00 00       	call   c001e395 <waitTask(int, int*, int)>
c001bec7:	83 c4 1c             	add    esp,0x1c
c001beca:	99                   	cdq    
c001becb:	c3                   	ret    

c001becc <sysCallNotImpl(regs*)>:
c001becc:	83 ec 18             	sub    esp,0x18
c001becf:	68 e6 c1 02 c0       	push   0xc002c1e6
c001bed4:	e8 e0 e7 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001bed9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bede:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bee3:	83 c4 1c             	add    esp,0x1c
c001bee6:	c3                   	ret    

c001bee7 <sysPanic(regs*)>:
c001bee7:	83 ec 18             	sub    esp,0x18
c001beea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001beee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bef1:	e8 c3 e7 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001bef6:	c7 04 24 00 c2 02 c0 	mov    DWORD PTR [esp],0xc002c200
c001befd:	e8 b7 e7 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001bf02:	b8 01 00 00 00       	mov    eax,0x1
c001bf07:	31 d2                	xor    edx,edx
c001bf09:	83 c4 1c             	add    esp,0x1c
c001bf0c:	c3                   	ret    

c001bf0d <sysCallRmdir(regs*)>:
c001bf0d:	56                   	push   esi
c001bf0e:	53                   	push   ebx
c001bf0f:	83 ec 20             	sub    esp,0x20
c001bf12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf16:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf19:	68 14 01 00 00       	push   0x114
c001bf1e:	e8 d9 39 ff ff       	call   c000f8fc <malloc>
c001bf23:	83 c4 0c             	add    esp,0xc
c001bf26:	89 c3                	mov    ebx,eax
c001bf28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf2d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf30:	56                   	push   esi
c001bf31:	53                   	push   ebx
c001bf32:	e8 29 76 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001bf37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf3a:	e8 fd 77 ff ff       	call   c001373c <File::unlink()>
c001bf3f:	83 c4 10             	add    esp,0x10
c001bf42:	85 db                	test   ebx,ebx
c001bf44:	74 14                	je     c001bf5a <sysCallRmdir(regs*)+0x4d>
c001bf46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf4a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf4c:	83 ec 0c             	sub    esp,0xc
c001bf4f:	53                   	push   ebx
c001bf50:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf53:	83 c4 10             	add    esp,0x10
c001bf56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf5a:	85 c0                	test   eax,eax
c001bf5c:	0f 95 c0             	setne  al
c001bf5f:	31 d2                	xor    edx,edx
c001bf61:	0f b6 c0             	movzx  eax,al
c001bf64:	f7 d8                	neg    eax
c001bf66:	83 d2 00             	adc    edx,0x0
c001bf69:	83 c4 14             	add    esp,0x14
c001bf6c:	f7 da                	neg    edx
c001bf6e:	5b                   	pop    ebx
c001bf6f:	5e                   	pop    esi
c001bf70:	c3                   	ret    

c001bf71 <sysCallUnlink(regs*)>:
c001bf71:	56                   	push   esi
c001bf72:	53                   	push   ebx
c001bf73:	83 ec 20             	sub    esp,0x20
c001bf76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf7a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf7d:	68 14 01 00 00       	push   0x114
c001bf82:	e8 75 39 ff ff       	call   c000f8fc <malloc>
c001bf87:	83 c4 0c             	add    esp,0xc
c001bf8a:	89 c3                	mov    ebx,eax
c001bf8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf91:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf94:	56                   	push   esi
c001bf95:	53                   	push   ebx
c001bf96:	e8 c5 75 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001bf9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf9e:	e8 99 77 ff ff       	call   c001373c <File::unlink()>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	85 db                	test   ebx,ebx
c001bfa8:	74 14                	je     c001bfbe <sysCallUnlink(regs*)+0x4d>
c001bfaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfae:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfb0:	83 ec 0c             	sub    esp,0xc
c001bfb3:	53                   	push   ebx
c001bfb4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bfb7:	83 c4 10             	add    esp,0x10
c001bfba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfbe:	85 c0                	test   eax,eax
c001bfc0:	0f 95 c0             	setne  al
c001bfc3:	31 d2                	xor    edx,edx
c001bfc5:	0f b6 c0             	movzx  eax,al
c001bfc8:	f7 d8                	neg    eax
c001bfca:	83 d2 00             	adc    edx,0x0
c001bfcd:	83 c4 14             	add    esp,0x14
c001bfd0:	f7 da                	neg    edx
c001bfd2:	5b                   	pop    ebx
c001bfd3:	5e                   	pop    esi
c001bfd4:	c3                   	ret    

c001bfd5 <sysCallGetArgv(regs*)>:
c001bfd5:	83 ec 0c             	sub    esp,0xc
c001bfd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bfdc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bfdf:	85 c0                	test   eax,eax
c001bfe1:	78 2b                	js     c001c00e <sysCallGetArgv(regs*)+0x39>
c001bfe3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfe9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfec:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bff2:	7d 1a                	jge    c001c00e <sysCallGetArgv(regs*)+0x39>
c001bff4:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bffb:	85 c0                	test   eax,eax
c001bffd:	74 17                	je     c001c016 <sysCallGetArgv(regs*)+0x41>
c001bfff:	83 ec 08             	sub    esp,0x8
c001c002:	50                   	push   eax
c001c003:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c006:	e8 29 48 fe ff       	call   c0000834 <strcpy>
c001c00b:	83 c4 10             	add    esp,0x10
c001c00e:	31 c0                	xor    eax,eax
c001c010:	31 d2                	xor    edx,edx
c001c012:	83 c4 0c             	add    esp,0xc
c001c015:	c3                   	ret    
c001c016:	b8 01 00 00 00       	mov    eax,0x1
c001c01b:	31 d2                	xor    edx,edx
c001c01d:	83 c4 0c             	add    esp,0xc
c001c020:	c3                   	ret    

c001c021 <sysCallTTYName(regs*)>:
c001c021:	56                   	push   esi
c001c022:	53                   	push   ebx
c001c023:	53                   	push   ebx
c001c024:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c028:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c02b:	85 c0                	test   eax,eax
c001c02d:	74 5f                	je     c001c08e <sysCallTTYName(regs*)+0x6d>
c001c02f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c032:	83 f8 02             	cmp    eax,0x2
c001c035:	77 3e                	ja     c001c075 <sysCallTTYName(regs*)+0x54>
c001c037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c03f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c045:	85 db                	test   ebx,ebx
c001c047:	74 45                	je     c001c08e <sysCallTTYName(regs*)+0x6d>
c001c049:	83 ec 0c             	sub    esp,0xc
c001c04c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c04e:	53                   	push   ebx
c001c04f:	ff 10                	call   DWORD PTR [eax]
c001c051:	83 c4 10             	add    esp,0x10
c001c054:	84 c0                	test   al,al
c001c056:	74 41                	je     c001c099 <sysCallTTYName(regs*)+0x78>
c001c058:	83 ec 08             	sub    esp,0x8
c001c05b:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c061:	53                   	push   ebx
c001c062:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c065:	e8 ca 47 fe ff       	call   c0000834 <strcpy>
c001c06a:	83 c4 10             	add    esp,0x10
c001c06d:	31 c0                	xor    eax,eax
c001c06f:	59                   	pop    ecx
c001c070:	31 d2                	xor    edx,edx
c001c072:	5b                   	pop    ebx
c001c073:	5e                   	pop    esi
c001c074:	c3                   	ret    
c001c075:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c07a:	74 bb                	je     c001c037 <sysCallTTYName(regs*)+0x16>
c001c07c:	83 ec 0c             	sub    esp,0xc
c001c07f:	50                   	push   eax
c001c080:	e8 6c 5a ff ff       	call   c0011af1 <getFromFileDescriptor(int)>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	89 c3                	mov    ebx,eax
c001c08a:	85 db                	test   ebx,ebx
c001c08c:	75 bb                	jne    c001c049 <sysCallTTYName(regs*)+0x28>
c001c08e:	59                   	pop    ecx
c001c08f:	b8 01 00 00 00       	mov    eax,0x1
c001c094:	31 d2                	xor    edx,edx
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	c3                   	ret    
c001c099:	59                   	pop    ecx
c001c09a:	b8 02 00 00 00       	mov    eax,0x2
c001c09f:	31 d2                	xor    edx,edx
c001c0a1:	5b                   	pop    ebx
c001c0a2:	5e                   	pop    esi
c001c0a3:	c3                   	ret    

c001c0a4 <sysCallUSleep(regs*)>:
c001c0a4:	83 ec 14             	sub    esp,0x14
c001c0a7:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c0ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0b0:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c0b7:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c0ba:	01 ca                	add    edx,ecx
c001c0bc:	52                   	push   edx
c001c0bd:	50                   	push   eax
c001c0be:	e8 6b 23 00 00       	call   c001e42e <nanoSleep(unsigned long long)>
c001c0c3:	31 c0                	xor    eax,eax
c001c0c5:	31 d2                	xor    edx,edx
c001c0c7:	83 c4 1c             	add    esp,0x1c
c001c0ca:	c3                   	ret    

c001c0cb <sysCallSpawn(regs*)>:
c001c0cb:	56                   	push   esi
c001c0cc:	53                   	push   ebx
c001c0cd:	53                   	push   ebx
c001c0ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0d2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c0d5:	85 f6                	test   esi,esi
c001c0d7:	75 08                	jne    c001c0e1 <sysCallSpawn(regs*)+0x16>
c001c0d9:	59                   	pop    ecx
c001c0da:	31 c0                	xor    eax,eax
c001c0dc:	31 d2                	xor    edx,edx
c001c0de:	5b                   	pop    ebx
c001c0df:	5e                   	pop    esi
c001c0e0:	c3                   	ret    
c001c0e1:	83 ec 0c             	sub    esp,0xc
c001c0e4:	68 3f 07 00 00       	push   0x73f
c001c0e9:	e8 0e 38 ff ff       	call   c000f8fc <malloc>
c001c0ee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0f1:	89 c6                	mov    esi,eax
c001c0f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0f8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0fe:	56                   	push   esi
c001c0ff:	e8 2a 1a 00 00       	call   c001db2e <Process::Process(char const*, Process*, char**)>
c001c104:	83 c4 20             	add    esp,0x20
c001c107:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c10e:	75 c9                	jne    c001c0d9 <sysCallSpawn(regs*)+0xe>
c001c110:	83 ec 0c             	sub    esp,0xc
c001c113:	56                   	push   esi
c001c114:	e8 db 1f 00 00       	call   c001e0f4 <Process::createUserThread()>
c001c119:	8b 06                	mov    eax,DWORD PTR [esi]
c001c11b:	83 c4 10             	add    esp,0x10
c001c11e:	99                   	cdq    
c001c11f:	59                   	pop    ecx
c001c120:	5b                   	pop    ebx
c001c121:	5e                   	pop    esi
c001c122:	c3                   	ret    

c001c123 <sysCallGetEnv(regs*)>:
c001c123:	55                   	push   ebp
c001c124:	57                   	push   edi
c001c125:	56                   	push   esi
c001c126:	53                   	push   ebx
c001c127:	83 ec 28             	sub    esp,0x28
c001c12a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c12e:	68 0f c2 02 c0       	push   0xc002c20f
c001c133:	e8 cf 6e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c138:	5f                   	pop    edi
c001c139:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c13c:	5d                   	pop    ebp
c001c13d:	53                   	push   ebx
c001c13e:	68 3e c5 02 c0       	push   0xc002c53e
c001c143:	e8 bf 6e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c148:	58                   	pop    eax
c001c149:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c14c:	5a                   	pop    edx
c001c14d:	57                   	push   edi
c001c14e:	68 18 c2 02 c0       	push   0xc002c218
c001c153:	e8 af 6e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c158:	59                   	pop    ecx
c001c159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c15e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c161:	e8 6f e4 ff ff       	call   c001a5d5 <Krnl::getProcessTotalEnvCount(Process*)>
c001c166:	5a                   	pop    edx
c001c167:	89 c5                	mov    ebp,eax
c001c169:	59                   	pop    ecx
c001c16a:	50                   	push   eax
c001c16b:	68 22 c2 02 c0       	push   0xc002c222
c001c170:	e8 92 6e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	39 ef                	cmp    edi,ebp
c001c17a:	7c 15                	jl     c001c191 <sysCallGetEnv(regs*)+0x6e>
c001c17c:	85 db                	test   ebx,ebx
c001c17e:	75 0c                	jne    c001c18c <sysCallGetEnv(regs*)+0x69>
c001c180:	83 c4 1c             	add    esp,0x1c
c001c183:	31 c0                	xor    eax,eax
c001c185:	5b                   	pop    ebx
c001c186:	31 d2                	xor    edx,edx
c001c188:	5e                   	pop    esi
c001c189:	5f                   	pop    edi
c001c18a:	5d                   	pop    ebp
c001c18b:	c3                   	ret    
c001c18c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c18f:	eb ef                	jmp    c001c180 <sysCallGetEnv(regs*)+0x5d>
c001c191:	83 ec 0c             	sub    esp,0xc
c001c194:	68 2e c2 02 c0       	push   0xc002c22e
c001c199:	e8 69 6e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c19e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1a2:	83 c4 0c             	add    esp,0xc
c001c1a5:	57                   	push   edi
c001c1a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c1ac:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c1af:	50                   	push   eax
c001c1b0:	e8 40 e4 ff ff       	call   c001a5f5 <Krnl::getProcessEnvPair(Process*, int)>
c001c1b5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c1b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1bd:	68 bd c5 02 c0       	push   0xc002c5bd
c001c1c2:	e8 40 6e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c1c7:	83 c4 10             	add    esp,0x10
c001c1ca:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c1cd:	85 f6                	test   esi,esi
c001c1cf:	75 47                	jne    c001c218 <sysCallGetEnv(regs*)+0xf5>
c001c1d1:	83 ec 0c             	sub    esp,0xc
c001c1d4:	55                   	push   ebp
c001c1d5:	e8 ba 45 fe ff       	call   c0000794 <strlen>
c001c1da:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1dd:	89 c3                	mov    ebx,eax
c001c1df:	e8 b0 45 fe ff       	call   c0000794 <strlen>
c001c1e4:	5a                   	pop    edx
c001c1e5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1e9:	59                   	pop    ecx
c001c1ea:	50                   	push   eax
c001c1eb:	68 31 c2 02 c0       	push   0xc002c231
c001c1f0:	e8 12 6e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c1f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1f8:	e8 97 45 fe ff       	call   c0000794 <strlen>
c001c1fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c200:	89 c3                	mov    ebx,eax
c001c202:	e8 8d 45 fe ff       	call   c0000794 <strlen>
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c20e:	83 c4 1c             	add    esp,0x1c
c001c211:	31 d2                	xor    edx,edx
c001c213:	5b                   	pop    ebx
c001c214:	5e                   	pop    esi
c001c215:	5f                   	pop    edi
c001c216:	5d                   	pop    ebp
c001c217:	c3                   	ret    
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	68 d7 c5 02 c0       	push   0xc002c5d7
c001c220:	e8 e2 6d ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c225:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c228:	58                   	pop    eax
c001c229:	5a                   	pop    edx
c001c22a:	55                   	push   ebp
c001c22b:	53                   	push   ebx
c001c22c:	e8 03 46 fe ff       	call   c0000834 <strcpy>
c001c231:	59                   	pop    ecx
c001c232:	5e                   	pop    esi
c001c233:	68 3b c2 02 c0       	push   0xc002c23b
c001c238:	53                   	push   ebx
c001c239:	e8 36 47 fe ff       	call   c0000974 <strcat>
c001c23e:	5d                   	pop    ebp
c001c23f:	58                   	pop    eax
c001c240:	57                   	push   edi
c001c241:	53                   	push   ebx
c001c242:	e8 2d 47 fe ff       	call   c0000974 <strcat>
c001c247:	c7 04 24 f1 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5f1
c001c24e:	e8 b4 6d ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	e9 25 ff ff ff       	jmp    c001c180 <sysCallGetEnv(regs*)+0x5d>

c001c25b <sysAppSettings(regs*)>:
c001c25b:	53                   	push   ebx
c001c25c:	83 ec 08             	sub    esp,0x8
c001c25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c263:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c266:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c26c:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c271:	66 3d c0 09          	cmp    ax,0x9c0
c001c275:	75 2f                	jne    c001c2a6 <sysAppSettings(regs*)+0x4b>
c001c277:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c27d:	83 e0 1f             	and    eax,0x1f
c001c280:	3c 01                	cmp    al,0x1
c001c282:	74 2e                	je     c001c2b2 <sysAppSettings(regs*)+0x57>
c001c284:	3c 07                	cmp    al,0x7
c001c286:	0f 84 bd 00 00 00    	je     c001c349 <sysAppSettings(regs*)+0xee>
c001c28c:	84 c0                	test   al,al
c001c28e:	0f 84 dc 00 00 00    	je     c001c370 <sysAppSettings(regs*)+0x115>
c001c294:	3c 08                	cmp    al,0x8
c001c296:	74 6d                	je     c001c305 <sysAppSettings(regs*)+0xaa>
c001c298:	0f b6 c0             	movzx  eax,al
c001c29b:	83 c4 08             	add    esp,0x8
c001c29e:	05 e8 03 00 00       	add    eax,0x3e8
c001c2a3:	5b                   	pop    ebx
c001c2a4:	99                   	cdq    
c001c2a5:	c3                   	ret    
c001c2a6:	b8 01 00 00 00       	mov    eax,0x1
c001c2ab:	31 d2                	xor    edx,edx
c001c2ad:	83 c4 08             	add    esp,0x8
c001c2b0:	5b                   	pop    ebx
c001c2b1:	c3                   	ret    
c001c2b2:	51                   	push   ecx
c001c2b3:	68 00 01 00 00       	push   0x100
c001c2b8:	6a 00                	push   0x0
c001c2ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2c2:	83 c0 0c             	add    eax,0xc
c001c2c5:	50                   	push   eax
c001c2c6:	e8 ad 44 fe ff       	call   c0000778 <memset>
c001c2cb:	83 c4 0c             	add    esp,0xc
c001c2ce:	68 ff 00 00 00       	push   0xff
c001c2d3:	53                   	push   ebx
c001c2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2dc:	83 c0 0c             	add    eax,0xc
c001c2df:	50                   	push   eax
c001c2e0:	e8 5f 44 fe ff       	call   c0000744 <memcpy>
c001c2e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ea:	5b                   	pop    ebx
c001c2eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2ee:	5a                   	pop    edx
c001c2ef:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2f2:	52                   	push   edx
c001c2f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2f9:	e8 6e 49 ff ff       	call   c0010c6c <VgaText::setTitle(char*)>
c001c2fe:	83 c4 10             	add    esp,0x10
c001c301:	31 c0                	xor    eax,eax
c001c303:	eb a6                	jmp    c001c2ab <sysAppSettings(regs*)+0x50>
c001c305:	83 ec 08             	sub    esp,0x8
c001c308:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c30e:	83 e0 0f             	and    eax,0xf
c001c311:	50                   	push   eax
c001c312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c317:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c31a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c320:	e8 37 49 ff ff       	call   c0010c5c <VgaText::setTitleColour(VgaColour)>
c001c325:	58                   	pop    eax
c001c326:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c32c:	5a                   	pop    edx
c001c32d:	c1 e8 04             	shr    eax,0x4
c001c330:	83 e0 0f             	and    eax,0xf
c001c333:	50                   	push   eax
c001c334:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c339:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c33c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c342:	e8 05 49 ff ff       	call   c0010c4c <VgaText::setTitleTextColour(VgaColour)>
c001c347:	eb b5                	jmp    c001c2fe <sysAppSettings(regs*)+0xa3>
c001c349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c34e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c351:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c357:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c35d:	c0 e8 06             	shr    al,0x6
c001c360:	83 e0 01             	and    eax,0x1
c001c363:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c369:	31 c0                	xor    eax,eax
c001c36b:	e9 3b ff ff ff       	jmp    c001c2ab <sysAppSettings(regs*)+0x50>
c001c370:	b8 02 00 00 00       	mov    eax,0x2
c001c375:	e9 31 ff ff ff       	jmp    c001c2ab <sysAppSettings(regs*)+0x50>

c001c37a <sysSetFatAttrib(regs*)>:
c001c37a:	57                   	push   edi
c001c37b:	56                   	push   esi
c001c37c:	53                   	push   ebx
c001c37d:	83 ec 1c             	sub    esp,0x1c
c001c380:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c384:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c387:	68 14 01 00 00       	push   0x114
c001c38c:	e8 6b 35 ff ff       	call   c000f8fc <malloc>
c001c391:	83 c4 0c             	add    esp,0xc
c001c394:	89 c3                	mov    ebx,eax
c001c396:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c39b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c39e:	57                   	push   edi
c001c39f:	53                   	push   ebx
c001c3a0:	e8 bb 71 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001c3a5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c3a8:	83 c4 0c             	add    esp,0xc
c001c3ab:	0f b6 d4             	movzx  edx,ah
c001c3ae:	0f b6 c0             	movzx  eax,al
c001c3b1:	52                   	push   edx
c001c3b2:	50                   	push   eax
c001c3b3:	53                   	push   ebx
c001c3b4:	e8 1d 74 ff ff       	call   c00137d6 <File::chfatattr(unsigned char, unsigned char)>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	85 db                	test   ebx,ebx
c001c3be:	74 14                	je     c001c3d4 <sysSetFatAttrib(regs*)+0x5a>
c001c3c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3c4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3c6:	83 ec 0c             	sub    esp,0xc
c001c3c9:	53                   	push   ebx
c001c3ca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3d4:	85 c0                	test   eax,eax
c001c3d6:	0f 95 c0             	setne  al
c001c3d9:	31 d2                	xor    edx,edx
c001c3db:	0f b6 c0             	movzx  eax,al
c001c3de:	f7 d8                	neg    eax
c001c3e0:	83 d2 00             	adc    edx,0x0
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	f7 da                	neg    edx
c001c3e8:	5b                   	pop    ebx
c001c3e9:	5e                   	pop    esi
c001c3ea:	5f                   	pop    edi
c001c3eb:	c3                   	ret    

c001c3ec <sysPipe(regs*)>:
c001c3ec:	57                   	push   edi
c001c3ed:	56                   	push   esi
c001c3ee:	53                   	push   ebx
c001c3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f3:	83 ec 0c             	sub    esp,0xc
c001c3f6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3f9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3fc:	6a 20                	push   0x20
c001c3fe:	e8 f9 34 ff ff       	call   c000f8fc <malloc>
c001c403:	89 c3                	mov    ebx,eax
c001c405:	58                   	pop    eax
c001c406:	5a                   	pop    edx
c001c407:	68 00 50 00 00       	push   0x5000
c001c40c:	53                   	push   ebx
c001c40d:	e8 8a 41 ff ff       	call   c001059c <Pipe::Pipe(int)>
c001c412:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c415:	e8 e2 53 ff ff       	call   c00117fc <UnixFile::getFileDescriptor()>
c001c41a:	89 07                	mov    DWORD PTR [edi],eax
c001c41c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c41f:	e8 d8 53 ff ff       	call   c00117fc <UnixFile::getFileDescriptor()>
c001c424:	83 c4 10             	add    esp,0x10
c001c427:	89 06                	mov    DWORD PTR [esi],eax
c001c429:	31 d2                	xor    edx,edx
c001c42b:	5b                   	pop    ebx
c001c42c:	31 c0                	xor    eax,eax
c001c42e:	5e                   	pop    esi
c001c42f:	5f                   	pop    edi
c001c430:	c3                   	ret    

c001c431 <sysGetUnixTime(regs*)>:
c001c431:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001c436:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c43c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c440:	e9 05 7b ff ff       	jmp    c0013f4a <Clock::timeInSecondsLocal()>

c001c445 <string_ends_with(char const*, char const*)>:
c001c445:	57                   	push   edi
c001c446:	56                   	push   esi
c001c447:	53                   	push   ebx
c001c448:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c44c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	53                   	push   ebx
c001c454:	e8 3b 43 fe ff       	call   c0000794 <strlen>
c001c459:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c45c:	89 c6                	mov    esi,eax
c001c45e:	e8 31 43 fe ff       	call   c0000794 <strlen>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	39 c6                	cmp    esi,eax
c001c468:	7d 06                	jge    c001c470 <string_ends_with(char const*, char const*)+0x2b>
c001c46a:	5b                   	pop    ebx
c001c46b:	31 c0                	xor    eax,eax
c001c46d:	5e                   	pop    esi
c001c46e:	5f                   	pop    edi
c001c46f:	c3                   	ret    
c001c470:	83 ec 08             	sub    esp,0x8
c001c473:	29 c6                	sub    esi,eax
c001c475:	57                   	push   edi
c001c476:	01 f3                	add    ebx,esi
c001c478:	53                   	push   ebx
c001c479:	e8 42 44 fe ff       	call   c00008c0 <strcmp>
c001c47e:	83 c4 10             	add    esp,0x10
c001c481:	85 c0                	test   eax,eax
c001c483:	5b                   	pop    ebx
c001c484:	0f 94 c0             	sete   al
c001c487:	5e                   	pop    esi
c001c488:	0f b6 c0             	movzx  eax,al
c001c48b:	5f                   	pop    edi
c001c48c:	c3                   	ret    

c001c48d <sysCallOpen(regs*)>:
c001c48d:	56                   	push   esi
c001c48e:	53                   	push   ebx
c001c48f:	81 ec 04 01 00 00    	sub    esp,0x104
c001c495:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c49c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c49f:	85 c9                	test   ecx,ecx
c001c4a1:	0f 84 b3 00 00 00    	je     c001c55a <sysCallOpen(regs*)+0xcd>
c001c4a7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c4aa:	85 c0                	test   eax,eax
c001c4ac:	0f 84 a8 00 00 00    	je     c001c55a <sysCallOpen(regs*)+0xcd>
c001c4b2:	52                   	push   edx
c001c4b3:	68 3d c2 02 c0       	push   0xc002c23d
c001c4b8:	50                   	push   eax
c001c4b9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c4bd:	56                   	push   esi
c001c4be:	e8 f3 6e ff ff       	call   c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c4c3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4c6:	e8 c9 42 fe ff       	call   c0000794 <strlen>
c001c4cb:	83 c4 10             	add    esp,0x10
c001c4ce:	48                   	dec    eax
c001c4cf:	74 1d                	je     c001c4ee <sysCallOpen(regs*)+0x61>
c001c4d1:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c4d4:	eb 0f                	jmp    c001c4e5 <sysCallOpen(regs*)+0x58>
c001c4d6:	80 fa 3a             	cmp    dl,0x3a
c001c4d9:	74 0f                	je     c001c4ea <sysCallOpen(regs*)+0x5d>
c001c4db:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c4df:	48                   	dec    eax
c001c4e0:	74 0c                	je     c001c4ee <sysCallOpen(regs*)+0x61>
c001c4e2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c4e5:	80 fa 2e             	cmp    dl,0x2e
c001c4e8:	75 ec                	jne    c001c4d6 <sysCallOpen(regs*)+0x49>
c001c4ea:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4ee:	83 ec 08             	sub    esp,0x8
c001c4f1:	68 41 c2 02 c0       	push   0xc002c241
c001c4f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4f9:	e8 47 ff ff ff       	call   c001c445 <string_ends_with(char const*, char const*)>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	85 c0                	test   eax,eax
c001c503:	75 17                	jne    c001c51c <sysCallOpen(regs*)+0x8f>
c001c505:	83 ec 08             	sub    esp,0x8
c001c508:	68 62 c2 02 c0       	push   0xc002c262
c001c50d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c510:	e8 30 ff ff ff       	call   c001c445 <string_ends_with(char const*, char const*)>
c001c515:	83 c4 10             	add    esp,0x10
c001c518:	85 c0                	test   eax,eax
c001c51a:	74 51                	je     c001c56d <sysCallOpen(regs*)+0xe0>
c001c51c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c51f:	83 ec 08             	sub    esp,0x8
c001c522:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c528:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c52f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c532:	ff 30                	push   DWORD PTR [eax]
c001c534:	68 46 c2 02 c0       	push   0xc002c246
c001c539:	e8 c9 6a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c53e:	c7 04 24 55 c2 02 c0 	mov    DWORD PTR [esp],0xc002c255
c001c545:	e8 bd 6a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c54a:	83 c4 10             	add    esp,0x10
c001c54d:	81 c4 04 01 00 00    	add    esp,0x104
c001c553:	31 c0                	xor    eax,eax
c001c555:	31 d2                	xor    edx,edx
c001c557:	5b                   	pop    ebx
c001c558:	5e                   	pop    esi
c001c559:	c3                   	ret    
c001c55a:	81 c4 04 01 00 00    	add    esp,0x104
c001c560:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c565:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c56a:	5b                   	pop    ebx
c001c56b:	5e                   	pop    esi
c001c56c:	c3                   	ret    
c001c56d:	83 ec 08             	sub    esp,0x8
c001c570:	68 42 c2 02 c0       	push   0xc002c242
c001c575:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c578:	e8 43 43 fe ff       	call   c00008c0 <strcmp>
c001c57d:	83 c4 10             	add    esp,0x10
c001c580:	85 c0                	test   eax,eax
c001c582:	74 98                	je     c001c51c <sysCallOpen(regs*)+0x8f>
c001c584:	83 ec 08             	sub    esp,0x8
c001c587:	68 41 c2 02 c0       	push   0xc002c241
c001c58c:	56                   	push   esi
c001c58d:	e8 b3 fe ff ff       	call   c001c445 <string_ends_with(char const*, char const*)>
c001c592:	83 c4 10             	add    esp,0x10
c001c595:	85 c0                	test   eax,eax
c001c597:	75 83                	jne    c001c51c <sysCallOpen(regs*)+0x8f>
c001c599:	83 ec 08             	sub    esp,0x8
c001c59c:	68 67 c2 02 c0       	push   0xc002c267
c001c5a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5a4:	e8 9c fe ff ff       	call   c001c445 <string_ends_with(char const*, char const*)>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	85 c0                	test   eax,eax
c001c5ae:	0f 85 d9 00 00 00    	jne    c001c68d <sysCallOpen(regs*)+0x200>
c001c5b4:	83 ec 08             	sub    esp,0x8
c001c5b7:	68 6c c2 02 c0       	push   0xc002c26c
c001c5bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5bf:	e8 81 fe ff ff       	call   c001c445 <string_ends_with(char const*, char const*)>
c001c5c4:	83 c4 10             	add    esp,0x10
c001c5c7:	85 c0                	test   eax,eax
c001c5c9:	0f 85 be 00 00 00    	jne    c001c68d <sysCallOpen(regs*)+0x200>
c001c5cf:	83 ec 08             	sub    esp,0x8
c001c5d2:	68 68 c2 02 c0       	push   0xc002c268
c001c5d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5da:	e8 e1 42 fe ff       	call   c00008c0 <strcmp>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	85 c0                	test   eax,eax
c001c5e4:	0f 84 a3 00 00 00    	je     c001c68d <sysCallOpen(regs*)+0x200>
c001c5ea:	83 ec 08             	sub    esp,0x8
c001c5ed:	68 67 c2 02 c0       	push   0xc002c267
c001c5f2:	56                   	push   esi
c001c5f3:	e8 4d fe ff ff       	call   c001c445 <string_ends_with(char const*, char const*)>
c001c5f8:	83 c4 10             	add    esp,0x10
c001c5fb:	85 c0                	test   eax,eax
c001c5fd:	0f 85 8a 00 00 00    	jne    c001c68d <sysCallOpen(regs*)+0x200>
c001c603:	83 ec 0c             	sub    esp,0xc
c001c606:	68 14 01 00 00       	push   0x114
c001c60b:	e8 ec 32 ff ff       	call   c000f8fc <malloc>
c001c610:	83 c4 0c             	add    esp,0xc
c001c613:	89 c6                	mov    esi,eax
c001c615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c61a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c61d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c620:	56                   	push   esi
c001c621:	e8 3a 6f ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001c626:	83 c4 10             	add    esp,0x10
c001c629:	85 f6                	test   esi,esi
c001c62b:	0f 84 29 ff ff ff    	je     c001c55a <sysCallOpen(regs*)+0xcd>
c001c631:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c634:	0f b6 c2             	movzx  eax,dl
c001c637:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c63a:	89 d0                	mov    eax,edx
c001c63c:	83 e0 01             	and    eax,0x1
c001c63f:	f6 c2 02             	test   dl,0x2
c001c642:	74 03                	je     c001c647 <sysCallOpen(regs*)+0x1ba>
c001c644:	83 c8 02             	or     eax,0x2
c001c647:	f6 c2 04             	test   dl,0x4
c001c64a:	74 03                	je     c001c64f <sysCallOpen(regs*)+0x1c2>
c001c64c:	83 c8 04             	or     eax,0x4
c001c64f:	f6 c2 08             	test   dl,0x8
c001c652:	74 03                	je     c001c657 <sysCallOpen(regs*)+0x1ca>
c001c654:	83 c8 0a             	or     eax,0xa
c001c657:	83 e2 10             	and    edx,0x10
c001c65a:	74 03                	je     c001c65f <sysCallOpen(regs*)+0x1d2>
c001c65c:	83 c8 12             	or     eax,0x12
c001c65f:	83 ec 08             	sub    esp,0x8
c001c662:	50                   	push   eax
c001c663:	56                   	push   esi
c001c664:	e8 5b 6f ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001c669:	83 c4 10             	add    esp,0x10
c001c66c:	85 c0                	test   eax,eax
c001c66e:	0f 85 e6 fe ff ff    	jne    c001c55a <sysCallOpen(regs*)+0xcd>
c001c674:	83 ec 0c             	sub    esp,0xc
c001c677:	56                   	push   esi
c001c678:	e8 7f 51 ff ff       	call   c00117fc <UnixFile::getFileDescriptor()>
c001c67d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c680:	89 02                	mov    DWORD PTR [edx],eax
c001c682:	c1 f8 1f             	sar    eax,0x1f
c001c685:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c688:	e9 bd fe ff ff       	jmp    c001c54a <sysCallOpen(regs*)+0xbd>
c001c68d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c690:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c696:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c69d:	e9 ab fe ff ff       	jmp    c001c54d <sysCallOpen(regs*)+0xc0>

c001c6a2 <Sys::loadSyscalls()>:
c001c6a2:	c7 05 e0 12 03 c0 af b7 01 c0 	mov    DWORD PTR ds:0xc00312e0,0xc001b7af
c001c6ac:	c7 05 e4 12 03 c0 4e b3 01 c0 	mov    DWORD PTR ds:0xc00312e4,0xc001b34e
c001c6b6:	c7 05 e8 12 03 c0 b8 b4 01 c0 	mov    DWORD PTR ds:0xc00312e8,0xc001b4b8
c001c6c0:	c7 05 ec 12 03 c0 e5 b6 01 c0 	mov    DWORD PTR ds:0xc00312ec,0xc001b6e5
c001c6ca:	c7 05 f0 12 03 c0 50 b4 01 c0 	mov    DWORD PTR ds:0xc00312f0,0xc001b450
c001c6d4:	c7 05 f4 12 03 c0 85 b3 01 c0 	mov    DWORD PTR ds:0xc00312f4,0xc001b385
c001c6de:	c7 05 f8 12 03 c0 66 b3 01 c0 	mov    DWORD PTR ds:0xc00312f8,0xc001b366
c001c6e8:	c7 05 fc 12 03 c0 57 b5 01 c0 	mov    DWORD PTR ds:0xc00312fc,0xc001b557
c001c6f2:	c7 05 04 13 03 c0 df bc 01 c0 	mov    DWORD PTR ds:0xc0031304,0xc001bcdf
c001c6fc:	c7 05 00 13 03 c0 8d c4 01 c0 	mov    DWORD PTR ds:0xc0031300,0xc001c48d
c001c706:	c7 05 08 13 03 c0 67 bd 01 c0 	mov    DWORD PTR ds:0xc0031308,0xc001bd67
c001c710:	c7 05 0c 13 03 c0 ce b9 01 c0 	mov    DWORD PTR ds:0xc003130c,0xc001b9ce
c001c71a:	c7 05 10 13 03 c0 ea b7 01 c0 	mov    DWORD PTR ds:0xc0031310,0xc001b7ea
c001c724:	c7 05 14 13 03 c0 ef b7 01 c0 	mov    DWORD PTR ds:0xc0031314,0xc001b7ef
c001c72e:	c7 05 18 13 03 c0 42 be 01 c0 	mov    DWORD PTR ds:0xc0031318,0xc001be42
c001c738:	c7 05 1c 13 03 c0 dc bd 01 c0 	mov    DWORD PTR ds:0xc003131c,0xc001bddc
c001c742:	c7 05 20 13 03 c0 b6 ba 01 c0 	mov    DWORD PTR ds:0xc0031320,0xc001bab6
c001c74c:	c7 05 24 13 03 c0 1f bb 01 c0 	mov    DWORD PTR ds:0xc0031324,0xc001bb1f
c001c756:	c7 05 28 13 03 c0 9c bb 01 c0 	mov    DWORD PTR ds:0xc0031328,0xc001bb9c
c001c760:	c7 05 2c 13 03 c0 f4 b7 01 c0 	mov    DWORD PTR ds:0xc003132c,0xc001b7f4
c001c76a:	c7 05 30 13 03 c0 b2 be 01 c0 	mov    DWORD PTR ds:0xc0031330,0xc001beb2
c001c774:	c7 05 34 13 03 c0 cc be 01 c0 	mov    DWORD PTR ds:0xc0031334,0xc001becc
c001c77e:	c7 05 38 13 03 c0 cc be 01 c0 	mov    DWORD PTR ds:0xc0031338,0xc001becc
c001c788:	c7 05 3c 13 03 c0 0d bf 01 c0 	mov    DWORD PTR ds:0xc003133c,0xc001bf0d
c001c792:	c7 05 40 13 03 c0 71 bf 01 c0 	mov    DWORD PTR ds:0xc0031340,0xc001bf71
c001c79c:	c7 05 44 13 03 c0 a0 b9 01 c0 	mov    DWORD PTR ds:0xc0031344,0xc001b9a0
c001c7a6:	c7 05 48 13 03 c0 d5 bf 01 c0 	mov    DWORD PTR ds:0xc0031348,0xc001bfd5
c001c7b0:	c7 05 4c 13 03 c0 5d b9 01 c0 	mov    DWORD PTR ds:0xc003134c,0xc001b95d
c001c7ba:	c7 05 50 13 03 c0 21 c0 01 c0 	mov    DWORD PTR ds:0xc0031350,0xc001c021
c001c7c4:	c7 05 54 13 03 c0 5c ba 01 c0 	mov    DWORD PTR ds:0xc0031354,0xc001ba5c
c001c7ce:	c7 05 58 13 03 c0 a4 c0 01 c0 	mov    DWORD PTR ds:0xc0031358,0xc001c0a4
c001c7d8:	c7 05 5c 13 03 c0 1f bc 01 c0 	mov    DWORD PTR ds:0xc003135c,0xc001bc1f
c001c7e2:	c7 05 60 13 03 c0 cb c0 01 c0 	mov    DWORD PTR ds:0xc0031360,0xc001c0cb
c001c7ec:	c7 05 64 13 03 c0 23 c1 01 c0 	mov    DWORD PTR ds:0xc0031364,0xc001c123
c001c7f6:	c7 05 68 13 03 c0 5b c2 01 c0 	mov    DWORD PTR ds:0xc0031368,0xc001c25b
c001c800:	c7 05 6c 13 03 c0 fe b7 01 c0 	mov    DWORD PTR ds:0xc003136c,0xc001b7fe
c001c80a:	c7 05 70 13 03 c0 68 b8 01 c0 	mov    DWORD PTR ds:0xc0031370,0xc001b868
c001c814:	c7 05 74 13 03 c0 ae b8 01 c0 	mov    DWORD PTR ds:0xc0031374,0xc001b8ae
c001c81e:	c7 05 78 13 03 c0 7a c3 01 c0 	mov    DWORD PTR ds:0xc0031378,0xc001c37a
c001c828:	c7 05 7c 13 03 c0 e7 be 01 c0 	mov    DWORD PTR ds:0xc003137c,0xc001bee7
c001c832:	c7 05 80 13 03 c0 ff b8 01 c0 	mov    DWORD PTR ds:0xc0031380,0xc001b8ff
c001c83c:	c7 05 84 13 03 c0 ec c3 01 c0 	mov    DWORD PTR ds:0xc0031384,0xc001c3ec
c001c846:	c7 05 88 13 03 c0 31 c4 01 c0 	mov    DWORD PTR ds:0xc0031388,0xc001c431
c001c850:	c7 05 8c 13 03 c0 a8 b3 01 c0 	mov    DWORD PTR ds:0xc003138c,0xc001b3a8
c001c85a:	c7 05 90 13 03 c0 73 b5 01 c0 	mov    DWORD PTR ds:0xc0031390,0xc001b573
c001c864:	c7 05 94 13 03 c0 9b b6 01 c0 	mov    DWORD PTR ds:0xc0031394,0xc001b69b
c001c86e:	c7 05 98 13 03 c0 18 b3 01 c0 	mov    DWORD PTR ds:0xc0031398,0xc001b318
c001c878:	c7 05 9c 13 03 c0 4d b7 01 c0 	mov    DWORD PTR ds:0xc003139c,0xc001b74d
c001c882:	c7 05 a0 13 03 c0 91 b3 01 c0 	mov    DWORD PTR ds:0xc00313a0,0xc001b391
c001c88c:	c3                   	ret    

c001c88d <Sys::systemCall(regs*, void*)>:
c001c88d:	53                   	push   ebx
c001c88e:	83 ec 08             	sub    esp,0x8
c001c891:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c895:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c898:	83 f8 7f             	cmp    eax,0x7f
c001c89b:	77 16                	ja     c001c8b3 <Sys::systemCall(regs*, void*)+0x26>
c001c89d:	8b 14 85 e0 12 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffced20]
c001c8a4:	85 d2                	test   edx,edx
c001c8a6:	74 0b                	je     c001c8b3 <Sys::systemCall(regs*, void*)+0x26>
c001c8a8:	83 ec 0c             	sub    esp,0xc
c001c8ab:	53                   	push   ebx
c001c8ac:	ff d2                	call   edx
c001c8ae:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c8b1:	eb 0d                	jmp    c001c8c0 <Sys::systemCall(regs*, void*)+0x33>
c001c8b3:	52                   	push   edx
c001c8b4:	52                   	push   edx
c001c8b5:	50                   	push   eax
c001c8b6:	68 71 c2 02 c0       	push   0xc002c271
c001c8bb:	e8 47 67 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c8c8:	31 d2                	xor    edx,edx
c001c8ca:	83 c4 08             	add    esp,0x8
c001c8cd:	5b                   	pop    ebx
c001c8ce:	c3                   	ret    

c001c8cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c8cf:	55                   	push   ebp
c001c8d0:	57                   	push   edi
c001c8d1:	56                   	push   esi
c001c8d2:	53                   	push   ebx
c001c8d3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c8d9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8e0:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c8e7:	85 c0                	test   eax,eax
c001c8e9:	0f 95 c1             	setne  cl
c001c8ec:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8f4:	0f 94 c2             	sete   dl
c001c8f7:	84 d1                	test   cl,dl
c001c8f9:	74 23                	je     c001c91e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8fb:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c901:	74 1b                	je     c001c91e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c903:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c909:	89 da                	mov    edx,ebx
c001c90b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c911:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c917:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c91e:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c925:	05 ff 0f 00 00       	add    eax,0xfff
c001c92a:	83 ec 0c             	sub    esp,0xc
c001c92d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c931:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c937:	c1 e8 0c             	shr    eax,0xc
c001c93a:	89 ef                	mov    edi,ebp
c001c93c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c940:	c1 ef 0c             	shr    edi,0xc
c001c943:	6a 01                	push   0x1
c001c945:	e8 fd 52 ff ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c001c94a:	89 c6                	mov    esi,eax
c001c94c:	58                   	pop    eax
c001c94d:	5a                   	pop    edx
c001c94e:	57                   	push   edi
c001c94f:	68 f7 c2 02 c0       	push   0xc002c2f7
c001c954:	e8 ae 66 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c959:	59                   	pop    ecx
c001c95a:	58                   	pop    eax
c001c95b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c95f:	68 09 c3 02 c0       	push   0xc002c309
c001c964:	e8 9e 66 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c969:	83 c4 10             	add    esp,0x10
c001c96c:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c972:	0f 86 24 01 00 00    	jbe    c001ca9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c978:	c1 e7 0c             	shl    edi,0xc
c001c97b:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c97e:	89 df                	mov    edi,ebx
c001c980:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c984:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c98b:	01 dd                	add    ebp,ebx
c001c98d:	29 fd                	sub    ebp,edi
c001c98f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c993:	0f 84 01 01 00 00    	je     c001ca9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c999:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c99f:	76 05                	jbe    c001c9a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c9a1:	bd 00 10 00 00       	mov    ebp,0x1000
c001c9a6:	83 ec 0c             	sub    esp,0xc
c001c9a9:	31 d2                	xor    edx,edx
c001c9ab:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c9b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9b8:	50                   	push   eax
c001c9b9:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c9bd:	50                   	push   eax
c001c9be:	52                   	push   edx
c001c9bf:	55                   	push   ebp
c001c9c0:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c9c7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9ca:	83 c4 20             	add    esp,0x20
c001c9cd:	85 c0                	test   eax,eax
c001c9cf:	74 0a                	je     c001c9db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c9d1:	53                   	push   ebx
c001c9d2:	53                   	push   ebx
c001c9d3:	50                   	push   eax
c001c9d4:	68 1b c3 02 c0       	push   0xc002c31b
c001c9d9:	eb 0f                	jmp    c001c9ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c9db:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c9df:	74 20                	je     c001ca01 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c9e1:	51                   	push   ecx
c001c9e2:	51                   	push   ecx
c001c9e3:	6a 00                	push   0x0
c001c9e5:	68 46 c3 02 c0       	push   0xc002c346
c001c9ea:	e8 18 66 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001c9ef:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9f2:	e8 c0 56 ff ff       	call   c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	31 c0                	xor    eax,eax
c001c9fc:	e9 55 01 00 00       	jmp    c001cb56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001ca01:	e8 d8 14 00 00       	call   c001dede <lockScheduler()>
c001ca06:	e8 93 35 ff ff       	call   c000ff9e <Phys::allocatePage()>
c001ca0b:	6a 07                	push   0x7
c001ca0d:	89 c5                	mov    ebp,eax
c001ca0f:	56                   	push   esi
c001ca10:	50                   	push   eax
c001ca11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca19:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca1f:	e8 fa 59 ff ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca24:	83 c4 0c             	add    esp,0xc
c001ca27:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca2e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca34:	6a 00                	push   0x0
c001ca36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca3b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca3e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca44:	e8 3f 58 ff ff       	call   c0012288 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca49:	58                   	pop    eax
c001ca4a:	5a                   	pop    edx
c001ca4b:	68 07 0c 00 00       	push   0xc07
c001ca50:	57                   	push   edi
c001ca51:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca57:	55                   	push   ebp
c001ca58:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca5f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca65:	6a 00                	push   0x0
c001ca67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca6f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca75:	e8 5e 5d ff ff       	call   c00127d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca7a:	83 c4 1c             	add    esp,0x1c
c001ca7d:	68 00 10 00 00       	push   0x1000
c001ca82:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca86:	50                   	push   eax
c001ca87:	56                   	push   esi
c001ca88:	e8 b7 3c fe ff       	call   c0000744 <memcpy>
c001ca8d:	e8 4e 14 00 00       	call   c001dee0 <unlockScheduler()>
c001ca92:	83 c4 10             	add    esp,0x10
c001ca95:	e9 ea fe ff ff       	jmp    c001c984 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca9a:	89 fb                	mov    ebx,edi
c001ca9c:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001caa4:	0f 86 9e 00 00 00    	jbe    c001cb48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001caaa:	e8 2f 14 00 00       	call   c001dede <lockScheduler()>
c001caaf:	51                   	push   ecx
c001cab0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cab7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cabd:	6a 00                	push   0x0
c001cabf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cac4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cac7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cacd:	e8 b6 57 ff ff       	call   c0012288 <VAS::mapOtherVASIn(bool, VAS*)>
c001cad2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cad6:	c1 e7 0c             	shl    edi,0xc
c001cad9:	01 df                	add    edi,ebx
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	39 fb                	cmp    ebx,edi
c001cae0:	74 61                	je     c001cb43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001cae2:	e8 b7 34 ff ff       	call   c000ff9e <Phys::allocatePage()>
c001cae7:	6a 07                	push   0x7
c001cae9:	89 c5                	mov    ebp,eax
c001caeb:	56                   	push   esi
c001caec:	50                   	push   eax
c001caed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caf5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cafb:	e8 1e 59 ff ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb00:	58                   	pop    eax
c001cb01:	5a                   	pop    edx
c001cb02:	68 07 0c 00 00       	push   0xc07
c001cb07:	53                   	push   ebx
c001cb08:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb0e:	55                   	push   ebp
c001cb0f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cb16:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb1c:	6a 00                	push   0x0
c001cb1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb26:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb2c:	e8 a7 5c ff ff       	call   c00127d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cb31:	83 c4 1c             	add    esp,0x1c
c001cb34:	68 00 10 00 00       	push   0x1000
c001cb39:	6a 00                	push   0x0
c001cb3b:	56                   	push   esi
c001cb3c:	e8 37 3c fe ff       	call   c0000778 <memset>
c001cb41:	eb 98                	jmp    c001cadb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cb43:	e8 98 13 00 00       	call   c001dee0 <unlockScheduler()>
c001cb48:	83 ec 0c             	sub    esp,0xc
c001cb4b:	56                   	push   esi
c001cb4c:	e8 66 55 ff ff       	call   c00120b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb51:	83 c4 10             	add    esp,0x10
c001cb54:	b0 01                	mov    al,0x1
c001cb56:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb5c:	5b                   	pop    ebx
c001cb5d:	5e                   	pop    esi
c001cb5e:	5f                   	pop    edi
c001cb5f:	5d                   	pop    ebp
c001cb60:	c3                   	ret    

c001cb61 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb61:	55                   	push   ebp
c001cb62:	57                   	push   edi
c001cb63:	56                   	push   esi
c001cb64:	53                   	push   ebx
c001cb65:	83 ec 48             	sub    esp,0x48
c001cb68:	68 14 01 00 00       	push   0x114
c001cb6d:	e8 8a 2d ff ff       	call   c000f8fc <malloc>
c001cb72:	83 c4 0c             	add    esp,0xc
c001cb75:	89 c6                	mov    esi,eax
c001cb77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb7f:	50                   	push   eax
c001cb80:	e8 db 69 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001cb85:	58                   	pop    eax
c001cb86:	5a                   	pop    edx
c001cb87:	6a 01                	push   0x1
c001cb89:	56                   	push   esi
c001cb8a:	e8 35 6a ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	85 c0                	test   eax,eax
c001cb94:	0f 85 47 01 00 00    	jne    c001cce1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	6a 34                	push   0x34
c001cba7:	e8 50 2d ff ff       	call   c000f8fc <malloc>
c001cbac:	89 c3                	mov    ebx,eax
c001cbae:	58                   	pop    eax
c001cbaf:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbb1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cbb5:	57                   	push   edi
c001cbb6:	53                   	push   ebx
c001cbb7:	6a 00                	push   0x0
c001cbb9:	6a 34                	push   0x34
c001cbbb:	56                   	push   esi
c001cbbc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbbf:	83 c4 20             	add    esp,0x20
c001cbc2:	85 c0                	test   eax,eax
c001cbc4:	0f 85 17 01 00 00    	jne    c001cce1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbca:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cbd0:	0f 85 0b 01 00 00    	jne    c001cce1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cbd9:	85 c0                	test   eax,eax
c001cbdb:	0f 84 00 01 00 00    	je     c001cce1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbe1:	31 d2                	xor    edx,edx
c001cbe3:	55                   	push   ebp
c001cbe4:	52                   	push   edx
c001cbe5:	50                   	push   eax
c001cbe6:	56                   	push   esi
c001cbe7:	e8 96 6a ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001cbec:	83 c4 10             	add    esp,0x10
c001cbef:	85 c0                	test   eax,eax
c001cbf1:	0f 85 ea 00 00 00    	jne    c001cce1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbf7:	83 ec 0c             	sub    esp,0xc
c001cbfa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbfd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cc01:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc05:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc09:	0f af c2             	imul   eax,edx
c001cc0c:	50                   	push   eax
c001cc0d:	e8 ea 2c ff ff       	call   c000f8fc <malloc>
c001cc12:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc18:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc1f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cc23:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc27:	0f af c2             	imul   eax,edx
c001cc2a:	99                   	cdq    
c001cc2b:	52                   	push   edx
c001cc2c:	50                   	push   eax
c001cc2d:	56                   	push   esi
c001cc2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc31:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cc34:	83 c4 20             	add    esp,0x20
c001cc37:	85 c0                	test   eax,eax
c001cc39:	0f 84 a2 00 00 00    	je     c001cce1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc3f:	31 d2                	xor    edx,edx
c001cc41:	51                   	push   ecx
c001cc42:	52                   	push   edx
c001cc43:	50                   	push   eax
c001cc44:	56                   	push   esi
c001cc45:	e8 38 6a ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001cc4a:	83 c4 10             	add    esp,0x10
c001cc4d:	85 c0                	test   eax,eax
c001cc4f:	0f 85 8c 00 00 00    	jne    c001cce1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc55:	83 ec 0c             	sub    esp,0xc
c001cc58:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc5c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc60:	31 ed                	xor    ebp,ebp
c001cc62:	0f af c2             	imul   eax,edx
c001cc65:	50                   	push   eax
c001cc66:	e8 91 2c ff ff       	call   c000f8fc <malloc>
c001cc6b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc71:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc78:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc7c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc80:	0f af c2             	imul   eax,edx
c001cc83:	99                   	cdq    
c001cc84:	52                   	push   edx
c001cc85:	50                   	push   eax
c001cc86:	56                   	push   esi
c001cc87:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc8a:	83 c4 20             	add    esp,0x20
c001cc8d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc95:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc99:	0f 86 80 00 00 00    	jbe    c001cd1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc9f:	0f b7 fd             	movzx  edi,bp
c001cca2:	c1 e7 05             	shl    edi,0x5
c001cca5:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cca9:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ccac:	75 6b                	jne    c001cd19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccae:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ccb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccb5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ccb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccbc:	52                   	push   edx
c001ccbd:	31 d2                	xor    edx,edx
c001ccbf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ccc2:	52                   	push   edx
c001ccc3:	50                   	push   eax
c001ccc4:	56                   	push   esi
c001ccc5:	e8 b8 69 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001ccca:	83 c4 10             	add    esp,0x10
c001cccd:	85 c0                	test   eax,eax
c001cccf:	74 17                	je     c001cce8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ccd1:	83 ec 0c             	sub    esp,0xc
c001ccd4:	68 72 c3 02 c0       	push   0xc002c372
c001ccd9:	e8 29 63 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001ccde:	83 c4 10             	add    esp,0x10
c001cce1:	31 c0                	xor    eax,eax
c001cce3:	e9 87 00 00 00       	jmp    c001cd6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ccee:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ccf1:	50                   	push   eax
c001ccf2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccfa:	56                   	push   esi
c001ccfb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ccff:	e8 cb fb ff ff       	call   c001c8cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cd04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd08:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cd0c:	83 c4 20             	add    esp,0x20
c001cd0f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cd13:	73 04                	jae    c001cd19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cd15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd19:	45                   	inc    ebp
c001cd1a:	e9 76 ff ff ff       	jmp    c001cc95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cd1f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cd23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd2b:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cd31:	83 ec 0c             	sub    esp,0xc
c001cd34:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cd3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cd3f:	05 00 10 00 00       	add    eax,0x1000
c001cd44:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd4b:	e8 bc 2b ff ff       	call   c000f90c <free>
c001cd50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd53:	e8 b4 2b ff ff       	call   c000f90c <free>
c001cd58:	58                   	pop    eax
c001cd59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd5d:	e8 aa 2b ff ff       	call   c000f90c <free>
c001cd62:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd65:	e8 b8 68 ff ff       	call   c0013622 <File::close()>
c001cd6a:	83 c4 10             	add    esp,0x10
c001cd6d:	b0 01                	mov    al,0x1
c001cd6f:	83 c4 3c             	add    esp,0x3c
c001cd72:	5b                   	pop    ebx
c001cd73:	5e                   	pop    esi
c001cd74:	5f                   	pop    edi
c001cd75:	5d                   	pop    ebp
c001cd76:	c3                   	ret    

c001cd77 <Thr::runtimeReferenceHelper()>:
c001cd77:	83 ec 18             	sub    esp,0x18
c001cd7a:	68 7a c3 02 c0       	push   0xc002c37a
c001cd7f:	e8 83 62 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001cd84:	fa                   	cli    
c001cd85:	83 c4 10             	add    esp,0x10
c001cd88:	eb fe                	jmp    c001cd88 <Thr::runtimeReferenceHelper()+0x11>

c001cd8a <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd8a:	57                   	push   edi
c001cd8b:	56                   	push   esi
c001cd8c:	53                   	push   ebx
c001cd8d:	31 db                	xor    ebx,ebx
c001cd8f:	39 1d 80 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c80,ebx
c001cd95:	7e 3c                	jle    c001cdd3 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd97:	8b 34 9d 00 1c 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce400]
c001cd9e:	31 ff                	xor    edi,edi
c001cda0:	39 3c 9d 00 1b 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce500],edi
c001cda7:	7e 27                	jle    c001cdd0 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cda9:	50                   	push   eax
c001cdaa:	50                   	push   eax
c001cdab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdaf:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdb1:	03 04 9d 80 1b 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce480]
c001cdb8:	50                   	push   eax
c001cdb9:	e8 02 3b fe ff       	call   c00008c0 <strcmp>
c001cdbe:	83 c4 10             	add    esp,0x10
c001cdc1:	85 c0                	test   eax,eax
c001cdc3:	75 05                	jne    c001cdca <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cdc5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cdc8:	eb 0b                	jmp    c001cdd5 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cdca:	83 c6 10             	add    esi,0x10
c001cdcd:	47                   	inc    edi
c001cdce:	eb d0                	jmp    c001cda0 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cdd0:	43                   	inc    ebx
c001cdd1:	eb bc                	jmp    c001cd8f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cdd3:	31 c0                	xor    eax,eax
c001cdd5:	5b                   	pop    ebx
c001cdd6:	5e                   	pop    esi
c001cdd7:	5f                   	pop    edi
c001cdd8:	c3                   	ret    

c001cdd9 <Thr::loadKernelSymbolTable(char const*)>:
c001cdd9:	55                   	push   ebp
c001cdda:	57                   	push   edi
c001cddb:	56                   	push   esi
c001cddc:	53                   	push   ebx
c001cddd:	83 ec 68             	sub    esp,0x68
c001cde0:	8b 35 d8 1c 03 c0    	mov    esi,DWORD PTR ds:0xc0031cd8
c001cde6:	68 14 01 00 00       	push   0x114
c001cdeb:	e8 0c 2b ff ff       	call   c000f8fc <malloc>
c001cdf0:	83 c4 0c             	add    esp,0xc
c001cdf3:	89 c3                	mov    ebx,eax
c001cdf5:	56                   	push   esi
c001cdf6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cdfa:	50                   	push   eax
c001cdfb:	e8 60 67 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001ce00:	5e                   	pop    esi
c001ce01:	5f                   	pop    edi
c001ce02:	6a 01                	push   0x1
c001ce04:	53                   	push   ebx
c001ce05:	e8 ba 67 ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001ce0a:	83 c4 10             	add    esp,0x10
c001ce0d:	85 c0                	test   eax,eax
c001ce0f:	74 0a                	je     c001ce1b <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ce11:	83 ec 0c             	sub    esp,0xc
c001ce14:	68 9c c3 02 c0       	push   0xc002c39c
c001ce19:	eb 34                	jmp    c001ce4f <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ce1b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ce23:	83 ec 0c             	sub    esp,0xc
c001ce26:	6a 34                	push   0x34
c001ce28:	e8 cf 2a ff ff       	call   c000f8fc <malloc>
c001ce2d:	59                   	pop    ecx
c001ce2e:	89 c7                	mov    edi,eax
c001ce30:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ce34:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce36:	56                   	push   esi
c001ce37:	57                   	push   edi
c001ce38:	6a 00                	push   0x0
c001ce3a:	6a 34                	push   0x34
c001ce3c:	53                   	push   ebx
c001ce3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce40:	83 c4 20             	add    esp,0x20
c001ce43:	85 c0                	test   eax,eax
c001ce45:	74 17                	je     c001ce5e <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce47:	83 ec 0c             	sub    esp,0xc
c001ce4a:	68 b3 c3 02 c0       	push   0xc002c3b3
c001ce4f:	e8 65 d8 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001ce54:	83 c4 10             	add    esp,0x10
c001ce57:	31 c0                	xor    eax,eax
c001ce59:	e9 31 02 00 00       	jmp    c001d08f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce5e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce64:	75 e1                	jne    c001ce47 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce66:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce69:	85 c0                	test   eax,eax
c001ce6b:	74 da                	je     c001ce47 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce6d:	52                   	push   edx
c001ce6e:	31 d2                	xor    edx,edx
c001ce70:	52                   	push   edx
c001ce71:	50                   	push   eax
c001ce72:	53                   	push   ebx
c001ce73:	e8 0a 68 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	85 c0                	test   eax,eax
c001ce7d:	75 c8                	jne    c001ce47 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce7f:	83 ec 0c             	sub    esp,0xc
c001ce82:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce86:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce8a:	31 ed                	xor    ebp,ebp
c001ce8c:	0f af c2             	imul   eax,edx
c001ce8f:	50                   	push   eax
c001ce90:	e8 67 2a ff ff       	call   c000f8fc <malloc>
c001ce95:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce9b:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cea2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cea6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ceaa:	0f af c2             	imul   eax,edx
c001cead:	99                   	cdq    
c001ceae:	52                   	push   edx
c001ceaf:	50                   	push   eax
c001ceb0:	53                   	push   ebx
c001ceb1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceb4:	83 c4 20             	add    esp,0x20
c001ceb7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cebf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cec7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cecf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ced7:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cedb:	0f 86 aa 00 00 00    	jbe    c001cf8b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cee1:	0f b7 f5             	movzx  esi,bp
c001cee4:	6b f6 28             	imul   esi,esi,0x28
c001cee7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ceeb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ceee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cef2:	50                   	push   eax
c001cef3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cef7:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cefb:	8b 16                	mov    edx,DWORD PTR [esi]
c001cefd:	6b c0 28             	imul   eax,eax,0x28
c001cf00:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cf04:	89 d0                	mov    eax,edx
c001cf06:	31 d2                	xor    edx,edx
c001cf08:	52                   	push   edx
c001cf09:	50                   	push   eax
c001cf0a:	53                   	push   ebx
c001cf0b:	e8 72 67 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001cf10:	83 c4 0c             	add    esp,0xc
c001cf13:	6a 20                	push   0x20
c001cf15:	6a 00                	push   0x0
c001cf17:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf1b:	52                   	push   edx
c001cf1c:	e8 57 38 fe ff       	call   c0000778 <memset>
c001cf21:	58                   	pop    eax
c001cf22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf24:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cf28:	51                   	push   ecx
c001cf29:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cf2d:	52                   	push   edx
c001cf2e:	6a 00                	push   0x0
c001cf30:	6a 1f                	push   0x1f
c001cf32:	53                   	push   ebx
c001cf33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf36:	83 c4 18             	add    esp,0x18
c001cf39:	68 ca c3 02 c0       	push   0xc002c3ca
c001cf3e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf42:	52                   	push   edx
c001cf43:	e8 78 39 fe ff       	call   c00008c0 <strcmp>
c001cf48:	83 c4 10             	add    esp,0x10
c001cf4b:	85 c0                	test   eax,eax
c001cf4d:	75 0f                	jne    c001cf5e <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf4f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf5e:	50                   	push   eax
c001cf5f:	50                   	push   eax
c001cf60:	68 d2 c3 02 c0       	push   0xc002c3d2
c001cf65:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf69:	50                   	push   eax
c001cf6a:	e8 51 39 fe ff       	call   c00008c0 <strcmp>
c001cf6f:	83 c4 10             	add    esp,0x10
c001cf72:	85 c0                	test   eax,eax
c001cf74:	75 0f                	jne    c001cf85 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf85:	45                   	inc    ebp
c001cf86:	e9 4c ff ff ff       	jmp    c001ced7 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf8b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf90:	75 10                	jne    c001cfa2 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf92:	83 ec 0c             	sub    esp,0xc
c001cf95:	68 da c3 02 c0       	push   0xc002c3da
c001cf9a:	e8 1a d7 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001cf9f:	83 c4 10             	add    esp,0x10
c001cfa2:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cfa7:	75 10                	jne    c001cfb9 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cfa9:	83 ec 0c             	sub    esp,0xc
c001cfac:	68 da c3 02 c0       	push   0xc002c3da
c001cfb1:	e8 03 d7 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001cfb6:	83 c4 10             	add    esp,0x10
c001cfb9:	31 d2                	xor    edx,edx
c001cfbb:	50                   	push   eax
c001cfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc0:	52                   	push   edx
c001cfc1:	50                   	push   eax
c001cfc2:	53                   	push   ebx
c001cfc3:	e8 ba 66 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001cfc8:	5a                   	pop    edx
c001cfc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cfcd:	e8 2a 29 ff ff       	call   c000f8fc <malloc>
c001cfd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfda:	31 c9                	xor    ecx,ecx
c001cfdc:	5e                   	pop    esi
c001cfdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfdf:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cfe3:	55                   	push   ebp
c001cfe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfe8:	51                   	push   ecx
c001cfe9:	52                   	push   edx
c001cfea:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfee:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cff2:	53                   	push   ebx
c001cff3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cff6:	83 c4 14             	add    esp,0x14
c001cff9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cffd:	e8 fa 28 ff ff       	call   c000f8fc <malloc>
c001d002:	89 c6                	mov    esi,eax
c001d004:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d006:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d009:	56                   	push   esi
c001d00a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d00e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d012:	51                   	push   ecx
c001d013:	52                   	push   edx
c001d014:	53                   	push   ebx
c001d015:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d018:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d01c:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c001d022:	83 c4 1c             	add    esp,0x1c
c001d025:	c1 e8 04             	shr    eax,0x4
c001d028:	89 04 95 00 1b 03 c0 	mov    DWORD PTR [edx*4-0x3ffce500],eax
c001d02f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d033:	31 d2                	xor    edx,edx
c001d035:	52                   	push   edx
c001d036:	50                   	push   eax
c001d037:	53                   	push   ebx
c001d038:	e8 45 66 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d03d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d03f:	31 d2                	xor    edx,edx
c001d041:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d044:	56                   	push   esi
c001d045:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d049:	52                   	push   edx
c001d04a:	50                   	push   eax
c001d04b:	53                   	push   ebx
c001d04c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d04f:	83 c4 14             	add    esp,0x14
c001d052:	53                   	push   ebx
c001d053:	e8 ca 65 ff ff       	call   c0013622 <File::close()>
c001d058:	5d                   	pop    ebp
c001d059:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d05d:	e8 aa 28 ff ff       	call   c000f90c <free>
c001d062:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d065:	e8 a2 28 ff ff       	call   c000f90c <free>
c001d06a:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c001d06f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d073:	8d 50 01             	lea    edx,[eax+0x1]
c001d076:	89 0c 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],ecx
c001d07d:	89 34 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],esi
c001d084:	89 15 80 1c 03 c0    	mov    DWORD PTR ds:0xc0031c80,edx
c001d08a:	83 c4 10             	add    esp,0x10
c001d08d:	b0 01                	mov    al,0x1
c001d08f:	83 c4 5c             	add    esp,0x5c
c001d092:	5b                   	pop    ebx
c001d093:	5e                   	pop    esi
c001d094:	5f                   	pop    edi
c001d095:	5d                   	pop    ebp
c001d096:	c3                   	ret    

c001d097 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d097:	55                   	push   ebp
c001d098:	57                   	push   edi
c001d099:	56                   	push   esi
c001d09a:	53                   	push   ebx
c001d09b:	81 ec 68 03 00 00    	sub    esp,0x368
c001d0a1:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d0a8:	8b 1d d8 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031cd8
c001d0ae:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d0b2:	68 14 01 00 00       	push   0x114
c001d0b7:	e8 40 28 ff ff       	call   c000f8fc <malloc>
c001d0bc:	83 c4 0c             	add    esp,0xc
c001d0bf:	89 c5                	mov    ebp,eax
c001d0c1:	53                   	push   ebx
c001d0c2:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d0c9:	50                   	push   eax
c001d0ca:	e8 91 64 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001d0cf:	5e                   	pop    esi
c001d0d0:	5f                   	pop    edi
c001d0d1:	6a 01                	push   0x1
c001d0d3:	55                   	push   ebp
c001d0d4:	e8 eb 64 ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001d0d9:	83 c4 10             	add    esp,0x10
c001d0dc:	85 c0                	test   eax,eax
c001d0de:	0f 85 8d 06 00 00    	jne    c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0ec:	83 ec 0c             	sub    esp,0xc
c001d0ef:	6a 34                	push   0x34
c001d0f1:	e8 06 28 ff ff       	call   c000f8fc <malloc>
c001d0f6:	5b                   	pop    ebx
c001d0f7:	89 c7                	mov    edi,eax
c001d0f9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d100:	53                   	push   ebx
c001d101:	57                   	push   edi
c001d102:	6a 00                	push   0x0
c001d104:	6a 34                	push   0x34
c001d106:	55                   	push   ebp
c001d107:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d10a:	83 c4 20             	add    esp,0x20
c001d10d:	85 c0                	test   eax,eax
c001d10f:	0f 85 5c 06 00 00    	jne    c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d115:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d11b:	0f 85 50 06 00 00    	jne    c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d121:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d124:	85 c0                	test   eax,eax
c001d126:	0f 84 45 06 00 00    	je     c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d12c:	31 d2                	xor    edx,edx
c001d12e:	51                   	push   ecx
c001d12f:	52                   	push   edx
c001d130:	50                   	push   eax
c001d131:	55                   	push   ebp
c001d132:	e8 4b 65 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d137:	83 c4 10             	add    esp,0x10
c001d13a:	85 c0                	test   eax,eax
c001d13c:	0f 85 2f 06 00 00    	jne    c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d142:	83 ec 0c             	sub    esp,0xc
c001d145:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d148:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d14c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d150:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d154:	0f af c2             	imul   eax,edx
c001d157:	50                   	push   eax
c001d158:	e8 9f 27 ff ff       	call   c000f8fc <malloc>
c001d15d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d160:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d164:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d167:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d16b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d16f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d173:	0f af c2             	imul   eax,edx
c001d176:	99                   	cdq    
c001d177:	52                   	push   edx
c001d178:	50                   	push   eax
c001d179:	55                   	push   ebp
c001d17a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d17d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d180:	83 c4 20             	add    esp,0x20
c001d183:	85 c0                	test   eax,eax
c001d185:	0f 84 e6 05 00 00    	je     c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d18b:	52                   	push   edx
c001d18c:	31 d2                	xor    edx,edx
c001d18e:	52                   	push   edx
c001d18f:	50                   	push   eax
c001d190:	55                   	push   ebp
c001d191:	e8 ec 64 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	85 c0                	test   eax,eax
c001d19b:	0f 85 d0 05 00 00    	jne    c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1a1:	83 ec 0c             	sub    esp,0xc
c001d1a4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1a8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d1ac:	31 f6                	xor    esi,esi
c001d1ae:	0f af c2             	imul   eax,edx
c001d1b1:	50                   	push   eax
c001d1b2:	e8 45 27 ff ff       	call   c000f8fc <malloc>
c001d1b7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1c5:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1c9:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d1cd:	0f af c2             	imul   eax,edx
c001d1d0:	99                   	cdq    
c001d1d1:	52                   	push   edx
c001d1d2:	50                   	push   eax
c001d1d3:	55                   	push   ebp
c001d1d4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1d7:	83 c4 20             	add    esp,0x20
c001d1da:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d1de:	0f 86 8a 00 00 00    	jbe    c001d26e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d1e4:	0f b7 de             	movzx  ebx,si
c001d1e7:	c1 e3 05             	shl    ebx,0x5
c001d1ea:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1ee:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1f1:	75 75                	jne    c001d268 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1f6:	31 d2                	xor    edx,edx
c001d1f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d203:	50                   	push   eax
c001d204:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d207:	52                   	push   edx
c001d208:	50                   	push   eax
c001d209:	55                   	push   ebp
c001d20a:	e8 73 64 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	85 c0                	test   eax,eax
c001d214:	0f 85 57 05 00 00    	jne    c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d21a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d221:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d224:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d228:	31 d2                	xor    edx,edx
c001d22a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d22e:	83 ec 0c             	sub    esp,0xc
c001d231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d235:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d23c:	50                   	push   eax
c001d23d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d245:	52                   	push   edx
c001d246:	50                   	push   eax
c001d247:	55                   	push   ebp
c001d248:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d24b:	83 c4 1c             	add    esp,0x1c
c001d24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d251:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d254:	50                   	push   eax
c001d255:	6a 00                	push   0x0
c001d257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d25b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d25f:	50                   	push   eax
c001d260:	e8 13 35 fe ff       	call   c0000778 <memset>
c001d265:	83 c4 10             	add    esp,0x10
c001d268:	46                   	inc    esi
c001d269:	e9 6c ff ff ff       	jmp    c001d1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d26e:	53                   	push   ebx
c001d26f:	31 db                	xor    ebx,ebx
c001d271:	68 00 01 00 00       	push   0x100
c001d276:	6a 00                	push   0x0
c001d278:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d27c:	50                   	push   eax
c001d27d:	e8 f6 34 fe ff       	call   c0000778 <memset>
c001d282:	83 c4 0c             	add    esp,0xc
c001d285:	68 00 01 00 00       	push   0x100
c001d28a:	6a 00                	push   0x0
c001d28c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d293:	50                   	push   eax
c001d294:	e8 df 34 fe ff       	call   c0000778 <memset>
c001d299:	83 c4 10             	add    esp,0x10
c001d29c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d2a4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d2ac:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d2b4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2bc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d2c4:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d2c8:	0f 86 30 01 00 00    	jbe    c001d3fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d2ce:	0f b7 f3             	movzx  esi,bx
c001d2d1:	6b f6 28             	imul   esi,esi,0x28
c001d2d4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2d8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2df:	52                   	push   edx
c001d2e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2e4:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d2e8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2ea:	6b d2 28             	imul   edx,edx,0x28
c001d2ed:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2f1:	31 d2                	xor    edx,edx
c001d2f3:	52                   	push   edx
c001d2f4:	50                   	push   eax
c001d2f5:	55                   	push   ebp
c001d2f6:	e8 87 63 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d2fb:	83 c4 0c             	add    esp,0xc
c001d2fe:	6a 20                	push   0x20
c001d300:	6a 00                	push   0x0
c001d302:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d309:	51                   	push   ecx
c001d30a:	e8 69 34 fe ff       	call   c0000778 <memset>
c001d30f:	59                   	pop    ecx
c001d310:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d313:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d317:	52                   	push   edx
c001d318:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d31f:	51                   	push   ecx
c001d320:	6a 00                	push   0x0
c001d322:	6a 1f                	push   0x1f
c001d324:	55                   	push   ebp
c001d325:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d328:	83 c4 1c             	add    esp,0x1c
c001d32b:	6a 09                	push   0x9
c001d32d:	68 f4 c3 02 c0       	push   0xc002c3f4
c001d332:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d339:	51                   	push   ecx
c001d33a:	e8 01 33 fe ff       	call   c0000640 <memcmp>
c001d33f:	83 c4 10             	add    esp,0x10
c001d342:	85 c0                	test   eax,eax
c001d344:	75 21                	jne    c001d367 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d34a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d34e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d352:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d356:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d359:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d360:	89 d0                	mov    eax,edx
c001d362:	40                   	inc    eax
c001d363:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d367:	50                   	push   eax
c001d368:	6a 09                	push   0x9
c001d36a:	68 fe c3 02 c0       	push   0xc002c3fe
c001d36f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d376:	50                   	push   eax
c001d377:	e8 c4 32 fe ff       	call   c0000640 <memcmp>
c001d37c:	83 c4 10             	add    esp,0x10
c001d37f:	85 c0                	test   eax,eax
c001d381:	75 21                	jne    c001d3a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d383:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d387:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d38b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d38f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d393:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d396:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d39d:	89 d0                	mov    eax,edx
c001d39f:	40                   	inc    eax
c001d3a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3a4:	50                   	push   eax
c001d3a5:	50                   	push   eax
c001d3a6:	68 ca c3 02 c0       	push   0xc002c3ca
c001d3ab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3b2:	50                   	push   eax
c001d3b3:	e8 08 35 fe ff       	call   c00008c0 <strcmp>
c001d3b8:	83 c4 10             	add    esp,0x10
c001d3bb:	85 c0                	test   eax,eax
c001d3bd:	75 0f                	jne    c001d3ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d3bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3ce:	50                   	push   eax
c001d3cf:	50                   	push   eax
c001d3d0:	68 d2 c3 02 c0       	push   0xc002c3d2
c001d3d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3dc:	50                   	push   eax
c001d3dd:	e8 de 34 fe ff       	call   c00008c0 <strcmp>
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	85 c0                	test   eax,eax
c001d3e7:	75 0f                	jne    c001d3f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d3e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3f8:	43                   	inc    ebx
c001d3f9:	e9 c6 fe ff ff       	jmp    c001d2c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3fe:	31 d2                	xor    edx,edx
c001d400:	50                   	push   eax
c001d401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d405:	52                   	push   edx
c001d406:	50                   	push   eax
c001d407:	55                   	push   ebp
c001d408:	e8 75 62 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d40d:	58                   	pop    eax
c001d40e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d412:	e8 e5 24 ff ff       	call   c000f8fc <malloc>
c001d417:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d41a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d41e:	31 d2                	xor    edx,edx
c001d420:	58                   	pop    eax
c001d421:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d425:	53                   	push   ebx
c001d426:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d42a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d42e:	52                   	push   edx
c001d42f:	50                   	push   eax
c001d430:	55                   	push   ebp
c001d431:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d434:	83 c4 14             	add    esp,0x14
c001d437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d43b:	e8 bc 24 ff ff       	call   c000f8fc <malloc>
c001d440:	31 d2                	xor    edx,edx
c001d442:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d446:	83 c4 0c             	add    esp,0xc
c001d449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d44d:	52                   	push   edx
c001d44e:	50                   	push   eax
c001d44f:	55                   	push   ebp
c001d450:	e8 2d 62 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d455:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d458:	31 d2                	xor    edx,edx
c001d45a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d45d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d461:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d465:	52                   	push   edx
c001d466:	50                   	push   eax
c001d467:	55                   	push   ebp
c001d468:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d46b:	83 c4 20             	add    esp,0x20
c001d46e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d476:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d47a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d47e:	0f 84 f1 02 00 00    	je     c001d775 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d484:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d48b:	31 d2                	xor    edx,edx
c001d48d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d491:	c1 e8 03             	shr    eax,0x3
c001d494:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d498:	51                   	push   ecx
c001d499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d49d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d4a1:	52                   	push   edx
c001d4a2:	50                   	push   eax
c001d4a3:	55                   	push   ebp
c001d4a4:	e8 d9 61 ff ff       	call   c0013682 <File::seek(unsigned long long)>
c001d4a9:	5b                   	pop    ebx
c001d4aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ae:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d4b5:	e8 42 24 ff ff       	call   c000f8fc <malloc>
c001d4ba:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d4bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4c1:	31 d2                	xor    edx,edx
c001d4c3:	5e                   	pop    esi
c001d4c4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d4c8:	50                   	push   eax
c001d4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4d1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d4d8:	52                   	push   edx
c001d4d9:	50                   	push   eax
c001d4da:	55                   	push   ebp
c001d4db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4de:	83 c4 20             	add    esp,0x20
c001d4e1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4ed:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4f1:	0f 8d 62 02 00 00    	jge    c001d759 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d4f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4ff:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d504:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d507:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d50b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d50f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d513:	89 d8                	mov    eax,ebx
c001d515:	c1 e8 08             	shr    eax,0x8
c001d518:	89 c6                	mov    esi,eax
c001d51a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d51e:	c1 e6 04             	shl    esi,0x4
c001d521:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d525:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d528:	85 d2                	test   edx,edx
c001d52a:	0f 85 bf 00 00 00    	jne    c001d5ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d537:	03 06                	add    eax,DWORD PTR [esi]
c001d539:	50                   	push   eax
c001d53a:	e8 4b f8 ff ff       	call   c001cd8a <Thr::getAddressOfKernelSymbol(char const*)>
c001d53f:	83 c4 10             	add    esp,0x10
c001d542:	89 c2                	mov    edx,eax
c001d544:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d549:	85 c0                	test   eax,eax
c001d54b:	0f 85 9e 00 00 00    	jne    c001d5ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d551:	83 ec 0c             	sub    esp,0xc
c001d554:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d558:	03 06                	add    eax,DWORD PTR [esi]
c001d55a:	50                   	push   eax
c001d55b:	e8 95 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d560:	83 c4 10             	add    esp,0x10
c001d563:	89 c2                	mov    edx,eax
c001d565:	85 c0                	test   eax,eax
c001d567:	0f 85 82 00 00 00    	jne    c001d5ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d56d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d571:	50                   	push   eax
c001d572:	50                   	push   eax
c001d573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d577:	03 06                	add    eax,DWORD PTR [esi]
c001d579:	50                   	push   eax
c001d57a:	68 08 c4 02 c0       	push   0xc002c408
c001d57f:	e8 83 5a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001d584:	58                   	pop    eax
c001d585:	5a                   	pop    edx
c001d586:	68 22 c4 02 c0       	push   0xc002c422
c001d58b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d592:	50                   	push   eax
c001d593:	e8 9c 32 fe ff       	call   c0000834 <strcpy>
c001d598:	59                   	pop    ecx
c001d599:	58                   	pop    eax
c001d59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d59e:	03 06                	add    eax,DWORD PTR [esi]
c001d5a0:	50                   	push   eax
c001d5a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5a8:	50                   	push   eax
c001d5a9:	e8 c6 33 fe ff       	call   c0000974 <strcat>
c001d5ae:	58                   	pop    eax
c001d5af:	5a                   	pop    edx
c001d5b0:	68 b8 c4 02 c0       	push   0xc002c4b8
c001d5b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5bc:	50                   	push   eax
c001d5bd:	e8 b2 33 fe ff       	call   c0000974 <strcat>
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ca:	0f 84 43 01 00 00    	je     c001d713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5d0:	83 ec 0c             	sub    esp,0xc
c001d5d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5da:	50                   	push   eax
c001d5db:	e8 d9 d0 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001d5e0:	83 c4 10             	add    esp,0x10
c001d5e3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d5e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5eb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5ef:	80 fb 01             	cmp    bl,0x1
c001d5f2:	75 7d                	jne    c001d671 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d5f4:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5ff:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d603:	01 ce                	add    esi,ecx
c001d605:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d60b:	0f 94 c0             	sete   al
c001d60e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d614:	0f 94 c3             	sete   bl
c001d617:	09 c3                	or     ebx,eax
c001d619:	8b 06                	mov    eax,DWORD PTR [esi]
c001d61b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d620:	74 36                	je     c001d658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d622:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d625:	84 db                	test   bl,bl
c001d627:	75 0a                	jne    c001d633 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d629:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d62d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d631:	76 37                	jbe    c001d66a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d633:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d637:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d63c:	0f 84 d1 00 00 00    	je     c001d713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d642:	83 ec 0c             	sub    esp,0xc
c001d645:	68 39 c4 02 c0       	push   0xc002c439
c001d64a:	e8 6a d0 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d656:	eb 12                	jmp    c001d66a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d658:	01 c1                	add    ecx,eax
c001d65a:	84 db                	test   bl,bl
c001d65c:	75 0c                	jne    c001d66a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d65e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d662:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d666:	77 02                	ja     c001d66a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d668:	01 d1                	add    ecx,edx
c001d66a:	89 0e                	mov    DWORD PTR [esi],ecx
c001d66c:	e9 df 00 00 00       	jmp    c001d750 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d671:	80 fb 02             	cmp    bl,0x2
c001d674:	75 71                	jne    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d676:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d67d:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d681:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d685:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d68b:	74 15                	je     c001d6a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d68d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d693:	74 0d                	je     c001d6a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d695:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d699:	83 e8 04             	sub    eax,0x4
c001d69c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d6a0:	76 1f                	jbe    c001d6c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d6a2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d6a6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6ab:	74 66                	je     c001d713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6ad:	83 ec 0c             	sub    esp,0xc
c001d6b0:	68 55 c4 02 c0       	push   0xc002c455
c001d6b5:	e8 ff cf ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001d6ba:	83 c4 10             	add    esp,0x10
c001d6bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001d6c3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d6c8:	74 13                	je     c001d6dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d6ca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d6ce:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d6d5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d6d9:	01 c8                	add    eax,ecx
c001d6db:	eb 04                	jmp    c001d6e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d6dd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d6e1:	01 c2                	add    edx,eax
c001d6e3:	89 16                	mov    DWORD PTR [esi],edx
c001d6e5:	eb 69                	jmp    c001d750 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6e7:	0f b6 db             	movzx  ebx,bl
c001d6ea:	50                   	push   eax
c001d6eb:	50                   	push   eax
c001d6ec:	53                   	push   ebx
c001d6ed:	68 71 c4 02 c0       	push   0xc002c471
c001d6f2:	e8 10 59 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001d6f7:	83 c4 10             	add    esp,0x10
c001d6fa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6ff:	74 12                	je     c001d713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d701:	83 ec 0c             	sub    esp,0xc
c001d704:	68 7c c4 02 c0       	push   0xc002c47c
c001d709:	e8 ab cf ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001d70e:	83 c4 10             	add    esp,0x10
c001d711:	eb 3d                	jmp    c001d750 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d713:	83 ec 0c             	sub    esp,0xc
c001d716:	55                   	push   ebp
c001d717:	e8 06 5f ff ff       	call   c0013622 <File::close()>
c001d71c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d71f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d722:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d725:	59                   	pop    ecx
c001d726:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d72a:	e8 dd 21 ff ff       	call   c000f90c <free>
c001d72f:	5b                   	pop    ebx
c001d730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d734:	e8 d3 21 ff ff       	call   c000f90c <free>
c001d739:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d73c:	e8 cb 21 ff ff       	call   c000f90c <free>
c001d741:	5e                   	pop    esi
c001d742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d746:	e8 c1 21 ff ff       	call   c000f90c <free>
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	eb 21                	jmp    c001d771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d750:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d754:	e9 90 fd ff ff       	jmp    c001d4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d759:	83 ec 0c             	sub    esp,0xc
c001d75c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d760:	e8 a7 21 ff ff       	call   c000f90c <free>
c001d765:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d769:	83 c4 10             	add    esp,0x10
c001d76c:	e9 05 fd ff ff       	jmp    c001d476 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d771:	31 c0                	xor    eax,eax
c001d773:	eb 33                	jmp    c001d7a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d775:	83 ec 0c             	sub    esp,0xc
c001d778:	55                   	push   ebp
c001d779:	e8 a4 5e ff ff       	call   c0013622 <File::close()>
c001d77e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d781:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d784:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d787:	58                   	pop    eax
c001d788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d78c:	e8 7b 21 ff ff       	call   c000f90c <free>
c001d791:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d794:	e8 73 21 ff ff       	call   c000f90c <free>
c001d799:	5a                   	pop    edx
c001d79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d79e:	e8 69 21 ff ff       	call   c000f90c <free>
c001d7a3:	83 c4 10             	add    esp,0x10
c001d7a6:	b0 01                	mov    al,0x1
c001d7a8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d7ae:	5b                   	pop    ebx
c001d7af:	5e                   	pop    esi
c001d7b0:	5f                   	pop    edi
c001d7b1:	5d                   	pop    ebp
c001d7b2:	c3                   	ret    

c001d7b3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d7b3:	56                   	push   esi
c001d7b4:	31 d2                	xor    edx,edx
c001d7b6:	53                   	push   ebx
c001d7b7:	8b 1d e0 14 03 c0    	mov    ebx,DWORD PTR ds:0xc00314e0
c001d7bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7c1:	39 d3                	cmp    ebx,edx
c001d7c3:	7e 1b                	jle    c001d7e0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d7c5:	8b 04 95 00 17 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce900]
c001d7cc:	39 c8                	cmp    eax,ecx
c001d7ce:	77 0d                	ja     c001d7dd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d7d0:	8b 34 95 00 15 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceb00]
c001d7d7:	01 c6                	add    esi,eax
c001d7d9:	39 ce                	cmp    esi,ecx
c001d7db:	77 05                	ja     c001d7e2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d7dd:	42                   	inc    edx
c001d7de:	eb e1                	jmp    c001d7c1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d7e0:	31 c0                	xor    eax,eax
c001d7e2:	5b                   	pop    ebx
c001d7e3:	5e                   	pop    esi
c001d7e4:	c3                   	ret    

c001d7e5 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d7e5:	53                   	push   ebx
c001d7e6:	31 c0                	xor    eax,eax
c001d7e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7ec:	8b 1d e0 14 03 c0    	mov    ebx,DWORD PTR ds:0xc00314e0
c001d7f2:	39 c3                	cmp    ebx,eax
c001d7f4:	7e 22                	jle    c001d818 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d7f6:	8b 14 85 00 17 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce900]
c001d7fd:	39 ca                	cmp    edx,ecx
c001d7ff:	77 14                	ja     c001d815 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d801:	03 14 85 00 15 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceb00]
c001d808:	39 ca                	cmp    edx,ecx
c001d80a:	76 09                	jbe    c001d815 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d80c:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c001d813:	eb 05                	jmp    c001d81a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d815:	40                   	inc    eax
c001d816:	eb da                	jmp    c001d7f2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d818:	31 c0                	xor    eax,eax
c001d81a:	5b                   	pop    ebx
c001d81b:	c3                   	ret    

c001d81c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d81c:	53                   	push   ebx
c001d81d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d821:	53                   	push   ebx
c001d822:	e8 8c ff ff ff       	call   c001d7b3 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d827:	5a                   	pop    edx
c001d828:	31 d2                	xor    edx,edx
c001d82a:	85 c0                	test   eax,eax
c001d82c:	74 04                	je     c001d832 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d82e:	89 da                	mov    edx,ebx
c001d830:	29 c2                	sub    edx,eax
c001d832:	89 d0                	mov    eax,edx
c001d834:	5b                   	pop    ebx
c001d835:	c3                   	ret    

c001d836 <Thr::loadDLL(char const*, bool)>:
c001d836:	55                   	push   ebp
c001d837:	57                   	push   edi
c001d838:	56                   	push   esi
c001d839:	53                   	push   ebx
c001d83a:	81 ec 34 01 00 00    	sub    esp,0x134
c001d840:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d847:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d84e:	56                   	push   esi
c001d84f:	68 94 c4 02 c0       	push   0xc002c494
c001d854:	e8 ae 57 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001d859:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d860:	e8 97 20 ff ff       	call   c000f8fc <malloc>
c001d865:	83 c4 0c             	add    esp,0xc
c001d868:	89 c3                	mov    ebx,eax
c001d86a:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c001d870:	56                   	push   esi
c001d871:	50                   	push   eax
c001d872:	e8 e9 5c ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001d877:	83 c4 10             	add    esp,0x10
c001d87a:	85 db                	test   ebx,ebx
c001d87c:	75 3c                	jne    c001d8ba <Thr::loadDLL(char const*, bool)+0x84>
c001d87e:	89 e8                	mov    eax,ebp
c001d880:	84 c0                	test   al,al
c001d882:	0f 84 d5 01 00 00    	je     c001da5d <Thr::loadDLL(char const*, bool)+0x227>
c001d888:	57                   	push   edi
c001d889:	57                   	push   edi
c001d88a:	68 a5 c4 02 c0       	push   0xc002c4a5
c001d88f:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d893:	57                   	push   edi
c001d894:	e8 9b 2f fe ff       	call   c0000834 <strcpy>
c001d899:	58                   	pop    eax
c001d89a:	5a                   	pop    edx
c001d89b:	56                   	push   esi
c001d89c:	57                   	push   edi
c001d89d:	e8 d2 30 fe ff       	call   c0000974 <strcat>
c001d8a2:	59                   	pop    ecx
c001d8a3:	58                   	pop    eax
c001d8a4:	68 b8 c4 02 c0       	push   0xc002c4b8
c001d8a9:	57                   	push   edi
c001d8aa:	e8 c5 30 fe ff       	call   c0000974 <strcat>
c001d8af:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d8b2:	e8 02 ce ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001d8b7:	83 c4 10             	add    esp,0x10
c001d8ba:	51                   	push   ecx
c001d8bb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d8bf:	50                   	push   eax
c001d8c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d8c4:	50                   	push   eax
c001d8c5:	53                   	push   ebx
c001d8c6:	e8 a5 5f ff ff       	call   c0013870 <File::stat(unsigned long long*, bool*)>
c001d8cb:	83 c4 10             	add    esp,0x10
c001d8ce:	85 db                	test   ebx,ebx
c001d8d0:	74 0c                	je     c001d8de <Thr::loadDLL(char const*, bool)+0xa8>
c001d8d2:	83 ec 0c             	sub    esp,0xc
c001d8d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8d7:	53                   	push   ebx
c001d8d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8db:	83 c4 10             	add    esp,0x10
c001d8de:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d8e3:	75 0a                	jne    c001d8ef <Thr::loadDLL(char const*, bool)+0xb9>
c001d8e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8e9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d8ed:	75 3c                	jne    c001d92b <Thr::loadDLL(char const*, bool)+0xf5>
c001d8ef:	89 e8                	mov    eax,ebp
c001d8f1:	84 c0                	test   al,al
c001d8f3:	0f 84 4c 01 00 00    	je     c001da45 <Thr::loadDLL(char const*, bool)+0x20f>
c001d8f9:	51                   	push   ecx
c001d8fa:	51                   	push   ecx
c001d8fb:	68 a5 c4 02 c0       	push   0xc002c4a5
c001d900:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d904:	53                   	push   ebx
c001d905:	e8 2a 2f fe ff       	call   c0000834 <strcpy>
c001d90a:	5f                   	pop    edi
c001d90b:	58                   	pop    eax
c001d90c:	56                   	push   esi
c001d90d:	53                   	push   ebx
c001d90e:	e8 61 30 fe ff       	call   c0000974 <strcat>
c001d913:	58                   	pop    eax
c001d914:	5a                   	pop    edx
c001d915:	68 b8 c4 02 c0       	push   0xc002c4b8
c001d91a:	53                   	push   ebx
c001d91b:	e8 54 30 fe ff       	call   c0000974 <strcat>
c001d920:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d923:	e8 91 cd ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001d928:	83 c4 10             	add    esp,0x10
c001d92b:	e8 b2 45 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c001d930:	51                   	push   ecx
c001d931:	6a 03                	push   0x3
c001d933:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d937:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d93b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d941:	83 d3 00             	adc    ebx,0x0
c001d944:	89 ca                	mov    edx,ecx
c001d946:	89 d1                	mov    ecx,edx
c001d948:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d94c:	51                   	push   ecx
c001d94d:	50                   	push   eax
c001d94e:	e8 cb 4b ff ff       	call   c001251e <VAS::allocatePages(int, int)>
c001d953:	5f                   	pop    edi
c001d954:	89 c3                	mov    ebx,eax
c001d956:	58                   	pop    eax
c001d957:	53                   	push   ebx
c001d958:	68 ba c4 02 c0       	push   0xc002c4ba
c001d95d:	e8 a5 56 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001d962:	89 34 24             	mov    DWORD PTR [esp],esi
c001d965:	e8 2a 2e fe ff       	call   c0000794 <strlen>
c001d96a:	8b 3d e0 14 03 c0    	mov    edi,DWORD PTR ds:0xc00314e0
c001d970:	40                   	inc    eax
c001d971:	89 04 24             	mov    DWORD PTR [esp],eax
c001d974:	e8 83 1f ff ff       	call   c000f8fc <malloc>
c001d979:	89 04 bd 00 19 03 c0 	mov    DWORD PTR [edi*4-0x3ffce700],eax
c001d980:	58                   	pop    eax
c001d981:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c001d986:	5a                   	pop    edx
c001d987:	56                   	push   esi
c001d988:	ff 34 85 00 19 03 c0 	push   DWORD PTR [eax*4-0x3ffce700]
c001d98f:	e8 a0 2e fe ff       	call   c0000834 <strcpy>
c001d994:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c001d999:	8d 50 01             	lea    edx,[eax+0x1]
c001d99c:	89 1c 85 00 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce900],ebx
c001d9a3:	89 15 e0 14 03 c0    	mov    DWORD PTR ds:0xc00314e0,edx
c001d9a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9ad:	83 c4 0c             	add    esp,0xc
c001d9b0:	89 14 85 00 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb00],edx
c001d9b7:	6a 01                	push   0x1
c001d9b9:	53                   	push   ebx
c001d9ba:	56                   	push   esi
c001d9bb:	e8 d7 f6 ff ff       	call   c001d097 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d9c0:	83 c4 10             	add    esp,0x10
c001d9c3:	89 c7                	mov    edi,eax
c001d9c5:	84 c0                	test   al,al
c001d9c7:	0f 85 8c 00 00 00    	jne    c001da59 <Thr::loadDLL(char const*, bool)+0x223>
c001d9cd:	89 e8                	mov    eax,ebp
c001d9cf:	84 c0                	test   al,al
c001d9d1:	74 76                	je     c001da49 <Thr::loadDLL(char const*, bool)+0x213>
c001d9d3:	83 ec 0c             	sub    esp,0xc
c001d9d6:	68 c7 c4 02 c0       	push   0xc002c4c7
c001d9db:	e8 d9 cc ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001d9e0:	83 c4 10             	add    esp,0x10
c001d9e3:	eb 64                	jmp    c001da49 <Thr::loadDLL(char const*, bool)+0x213>
c001d9e5:	e8 f8 44 ff ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c001d9ea:	89 f5                	mov    ebp,esi
c001d9ec:	c1 e5 0c             	shl    ebp,0xc
c001d9ef:	52                   	push   edx
c001d9f0:	01 dd                	add    ebp,ebx
c001d9f2:	52                   	push   edx
c001d9f3:	55                   	push   ebp
c001d9f4:	50                   	push   eax
c001d9f5:	e8 9e 46 ff ff       	call   c0012098 <VAS::getPageTableEntry(unsigned long)>
c001d9fa:	83 c4 10             	add    esp,0x10
c001d9fd:	f6 00 60             	test   BYTE PTR [eax],0x60
c001da00:	75 0c                	jne    c001da0e <Thr::loadDLL(char const*, bool)+0x1d8>
c001da02:	83 ec 0c             	sub    esp,0xc
c001da05:	55                   	push   ebp
c001da06:	e8 09 25 ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c001da0b:	83 c4 10             	add    esp,0x10
c001da0e:	46                   	inc    esi
c001da0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da17:	05 ff 0f 00 00       	add    eax,0xfff
c001da1c:	83 d2 00             	adc    edx,0x0
c001da1f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001da23:	c1 ea 0c             	shr    edx,0xc
c001da26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da2e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001da32:	ba 00 00 00 00       	mov    edx,0x0
c001da37:	89 d0                	mov    eax,edx
c001da39:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001da3d:	72 a6                	jb     c001d9e5 <Thr::loadDLL(char const*, bool)+0x1af>
c001da3f:	89 f8                	mov    eax,edi
c001da41:	84 c0                	test   al,al
c001da43:	75 18                	jne    c001da5d <Thr::loadDLL(char const*, bool)+0x227>
c001da45:	31 db                	xor    ebx,ebx
c001da47:	eb 14                	jmp    c001da5d <Thr::loadDLL(char const*, bool)+0x227>
c001da49:	83 ec 0c             	sub    esp,0xc
c001da4c:	68 e6 c4 02 c0       	push   0xc002c4e6
c001da51:	e8 63 cc ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001da56:	83 c4 10             	add    esp,0x10
c001da59:	31 f6                	xor    esi,esi
c001da5b:	eb b2                	jmp    c001da0f <Thr::loadDLL(char const*, bool)+0x1d9>
c001da5d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da63:	89 d8                	mov    eax,ebx
c001da65:	5b                   	pop    ebx
c001da66:	5e                   	pop    esi
c001da67:	5f                   	pop    edi
c001da68:	5d                   	pop    ebp
c001da69:	c3                   	ret    

c001da6a <Thr::executeDLL(unsigned long, void*)>:
c001da6a:	56                   	push   esi
c001da6b:	53                   	push   ebx
c001da6c:	52                   	push   edx
c001da6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da75:	85 db                	test   ebx,ebx
c001da77:	75 10                	jne    c001da89 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da79:	83 ec 0c             	sub    esp,0xc
c001da7c:	68 02 c5 02 c0       	push   0xc002c502
c001da81:	e8 33 cc ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001da86:	83 c4 10             	add    esp,0x10
c001da89:	50                   	push   eax
c001da8a:	50                   	push   eax
c001da8b:	53                   	push   ebx
c001da8c:	68 2c c5 02 c0       	push   0xc002c52c
c001da91:	e8 71 55 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001da96:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da9a:	89 d8                	mov    eax,ebx
c001da9c:	83 c4 14             	add    esp,0x14
c001da9f:	5b                   	pop    ebx
c001daa0:	5e                   	pop    esi
c001daa1:	ff e0                	jmp    eax
c001daa3:	90                   	nop

c001daa4 <changeTSS>:
c001daa4:	83 ec 14             	sub    esp,0x14
c001daa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daac:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001daaf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dab4:	c1 e2 15             	shl    edx,0x15
c001dab7:	29 d0                	sub    eax,edx
c001dab9:	50                   	push   eax
c001daba:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001dabf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dac5:	05 7c 11 00 00       	add    eax,0x117c
c001daca:	50                   	push   eax
c001dacb:	e8 b6 3a ff ff       	call   c0011586 <TSS::setESP(unsigned long)>
c001dad0:	83 c4 1c             	add    esp,0x1c
c001dad3:	c3                   	ret    

c001dad4 <Process::addArgs(char**)>:
c001dad4:	57                   	push   edi
c001dad5:	56                   	push   esi
c001dad6:	53                   	push   ebx
c001dad7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dadb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dadf:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dae9:	85 ff                	test   edi,edi
c001daeb:	74 3d                	je     c001db2a <Process::addArgs(char**)+0x56>
c001daed:	8b 07                	mov    eax,DWORD PTR [edi]
c001daef:	85 c0                	test   eax,eax
c001daf1:	74 37                	je     c001db2a <Process::addArgs(char**)+0x56>
c001daf3:	31 db                	xor    ebx,ebx
c001daf5:	83 ec 0c             	sub    esp,0xc
c001daf8:	50                   	push   eax
c001daf9:	e8 96 2c fe ff       	call   c0000794 <strlen>
c001dafe:	40                   	inc    eax
c001daff:	89 04 24             	mov    DWORD PTR [esp],eax
c001db02:	e8 f5 1d ff ff       	call   c000f8fc <malloc>
c001db07:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001db0e:	5a                   	pop    edx
c001db0f:	59                   	pop    ecx
c001db10:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001db13:	43                   	inc    ebx
c001db14:	50                   	push   eax
c001db15:	e8 1a 2d fe ff       	call   c0000834 <strcpy>
c001db1a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db20:	83 c4 10             	add    esp,0x10
c001db23:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db26:	85 c0                	test   eax,eax
c001db28:	75 cb                	jne    c001daf5 <Process::addArgs(char**)+0x21>
c001db2a:	5b                   	pop    ebx
c001db2b:	5e                   	pop    esi
c001db2c:	5f                   	pop    edi
c001db2d:	c3                   	ret    

c001db2e <Process::Process(char const*, Process*, char**)>:
c001db2e:	56                   	push   esi
c001db2f:	53                   	push   ebx
c001db30:	83 ec 14             	sub    esp,0x14
c001db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db37:	05 0c 02 00 00       	add    eax,0x20c
c001db3c:	bb 07 00 00 00       	mov    ebx,0x7
c001db41:	89 c6                	mov    esi,eax
c001db43:	85 db                	test   ebx,ebx
c001db45:	78 12                	js     c001db59 <Process::Process(char const*, Process*, char**)+0x2b>
c001db47:	83 ec 0c             	sub    esp,0xc
c001db4a:	56                   	push   esi
c001db4b:	e8 22 b2 00 00       	call   c0028d72 <ThreadControlBlock::ThreadControlBlock()>
c001db50:	83 c4 10             	add    esp,0x10
c001db53:	83 c6 63             	add    esi,0x63
c001db56:	4b                   	dec    ebx
c001db57:	eb ea                	jmp    c001db43 <Process::Process(char const*, Process*, char**)+0x15>
c001db59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db64:	83 ec 0c             	sub    esp,0xc
c001db67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db6b:	e8 9a c9 ff ff       	call   c001a50a <Krnl::newProcessEnv(Process*)>
c001db70:	83 c4 10             	add    esp,0x10
c001db73:	89 c2                	mov    edx,eax
c001db75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db79:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db83:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db8c:	a1 f0 dc 02 c0       	mov    eax,ds:0xc002dcf0
c001db91:	8d 50 01             	lea    edx,[eax+0x1]
c001db94:	89 15 f0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcf0,edx
c001db9a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db9e:	89 02                	mov    DWORD PTR [edx],eax
c001dba0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001dba8:	83 ec 0c             	sub    esp,0xc
c001dbab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbaf:	e8 48 1d ff ff       	call   c000f8fc <malloc>
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	89 c3                	mov    ebx,eax
c001dbb9:	83 ec 08             	sub    esp,0x8
c001dbbc:	6a 00                	push   0x0
c001dbbe:	53                   	push   ebx
c001dbbf:	e8 02 4d ff ff       	call   c00128c6 <VAS::VAS(bool)>
c001dbc4:	83 c4 10             	add    esp,0x10
c001dbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbe7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbf7:	85 c0                	test   eax,eax
c001dbf9:	74 42                	je     c001dc3d <Process::Process(char const*, Process*, char**)+0x10f>
c001dbfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbff:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc05:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc19:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc1f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc29:	05 0c 01 00 00       	add    eax,0x10c
c001dc2e:	83 ec 08             	sub    esp,0x8
c001dc31:	52                   	push   edx
c001dc32:	50                   	push   eax
c001dc33:	e8 fc 2b fe ff       	call   c0000834 <strcpy>
c001dc38:	83 c4 10             	add    esp,0x10
c001dc3b:	eb 63                	jmp    c001dca0 <Process::Process(char const*, Process*, char**)+0x172>
c001dc3d:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dc45:	83 ec 0c             	sub    esp,0xc
c001dc48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc4c:	e8 ab 1c ff ff       	call   c000f8fc <malloc>
c001dc51:	83 c4 10             	add    esp,0x10
c001dc54:	89 c3                	mov    ebx,eax
c001dc56:	83 ec 08             	sub    esp,0x8
c001dc59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc5d:	53                   	push   ebx
c001dc5e:	e8 21 36 ff ff       	call   c0011284 <VgaText::VgaText(char const*)>
c001dc63:	83 c4 10             	add    esp,0x10
c001dc66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc6a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc74:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc7a:	83 ec 0c             	sub    esp,0xc
c001dc7d:	50                   	push   eax
c001dc7e:	e8 f4 29 ff ff       	call   c0010677 <addToTerminalCycle(VgaText*)>
c001dc83:	83 c4 10             	add    esp,0x10
c001dc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc8a:	05 0c 01 00 00       	add    eax,0x10c
c001dc8f:	83 ec 08             	sub    esp,0x8
c001dc92:	68 4b c5 02 c0       	push   0xc002c54b
c001dc97:	50                   	push   eax
c001dc98:	e8 97 2b fe ff       	call   c0000834 <strcpy>
c001dc9d:	83 c4 10             	add    esp,0x10
c001dca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca4:	83 c0 0c             	add    eax,0xc
c001dca7:	83 ec 08             	sub    esp,0x8
c001dcaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcae:	50                   	push   eax
c001dcaf:	e8 80 2b fe ff       	call   c0000834 <strcpy>
c001dcb4:	83 c4 10             	add    esp,0x10
c001dcb7:	83 ec 08             	sub    esp,0x8
c001dcba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dcbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcc2:	e8 0d fe ff ff       	call   c001dad4 <Process::addArgs(char**)>
c001dcc7:	83 c4 10             	add    esp,0x10
c001dcca:	83 ec 08             	sub    esp,0x8
c001dccd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcd5:	e8 87 ee ff ff       	call   c001cb61 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dcda:	83 c4 10             	add    esp,0x10
c001dcdd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dce1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dce5:	83 f0 01             	xor    eax,0x1
c001dce8:	88 c2                	mov    dl,al
c001dcea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcee:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcf4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcf9:	83 ec 08             	sub    esp,0x8
c001dcfc:	50                   	push   eax
c001dcfd:	68 48 c6 02 c0       	push   0xc002c648
c001dd02:	e8 00 53 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001dd07:	83 c4 10             	add    esp,0x10
c001dd0a:	90                   	nop
c001dd0b:	83 c4 14             	add    esp,0x14
c001dd0e:	5b                   	pop    ebx
c001dd0f:	5e                   	pop    esi
c001dd10:	c3                   	ret    
c001dd11:	90                   	nop

c001dd12 <Process::Process(bool, char const*, Process*, char**)>:
c001dd12:	56                   	push   esi
c001dd13:	53                   	push   ebx
c001dd14:	83 ec 24             	sub    esp,0x24
c001dd17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd23:	05 0c 02 00 00       	add    eax,0x20c
c001dd28:	bb 07 00 00 00       	mov    ebx,0x7
c001dd2d:	89 c6                	mov    esi,eax
c001dd2f:	85 db                	test   ebx,ebx
c001dd31:	78 12                	js     c001dd45 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd33:	83 ec 0c             	sub    esp,0xc
c001dd36:	56                   	push   esi
c001dd37:	e8 36 b0 00 00       	call   c0028d72 <ThreadControlBlock::ThreadControlBlock()>
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	83 c6 63             	add    esi,0x63
c001dd42:	4b                   	dec    ebx
c001dd43:	eb ea                	jmp    c001dd2f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd49:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd57:	e8 ae c7 ff ff       	call   c001a50a <Krnl::newProcessEnv(Process*)>
c001dd5c:	83 c4 10             	add    esp,0x10
c001dd5f:	89 c2                	mov    edx,eax
c001dd61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd65:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd78:	a1 f0 dc 02 c0       	mov    eax,ds:0xc002dcf0
c001dd7d:	8d 50 01             	lea    edx,[eax+0x1]
c001dd80:	89 15 f0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcf0,edx
c001dd86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd8a:	89 02                	mov    DWORD PTR [edx],eax
c001dd8c:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd9b:	e8 5c 1b ff ff       	call   c000f8fc <malloc>
c001dda0:	83 c4 10             	add    esp,0x10
c001dda3:	89 c3                	mov    ebx,eax
c001dda5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ddaa:	83 ec 08             	sub    esp,0x8
c001ddad:	50                   	push   eax
c001ddae:	53                   	push   ebx
c001ddaf:	e8 12 4b ff ff       	call   c00128c6 <VAS::VAS(bool)>
c001ddb4:	83 c4 10             	add    esp,0x10
c001ddb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ddc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddd7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dde7:	85 c0                	test   eax,eax
c001dde9:	74 42                	je     c001de2d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001ddeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddf5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ddfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddff:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001de05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de09:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de0f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001de15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de19:	05 0c 01 00 00       	add    eax,0x10c
c001de1e:	83 ec 08             	sub    esp,0x8
c001de21:	52                   	push   edx
c001de22:	50                   	push   eax
c001de23:	e8 0c 2a fe ff       	call   c0000834 <strcpy>
c001de28:	83 c4 10             	add    esp,0x10
c001de2b:	eb 63                	jmp    c001de90 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de2d:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001de35:	83 ec 0c             	sub    esp,0xc
c001de38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de3c:	e8 bb 1a ff ff       	call   c000f8fc <malloc>
c001de41:	83 c4 10             	add    esp,0x10
c001de44:	89 c3                	mov    ebx,eax
c001de46:	83 ec 08             	sub    esp,0x8
c001de49:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de4d:	53                   	push   ebx
c001de4e:	e8 31 34 ff ff       	call   c0011284 <VgaText::VgaText(char const*)>
c001de53:	83 c4 10             	add    esp,0x10
c001de56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de5a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de64:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	50                   	push   eax
c001de6e:	e8 04 28 ff ff       	call   c0010677 <addToTerminalCycle(VgaText*)>
c001de73:	83 c4 10             	add    esp,0x10
c001de76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de7a:	05 0c 01 00 00       	add    eax,0x10c
c001de7f:	83 ec 08             	sub    esp,0x8
c001de82:	68 4b c5 02 c0       	push   0xc002c54b
c001de87:	50                   	push   eax
c001de88:	e8 a7 29 fe ff       	call   c0000834 <strcpy>
c001de8d:	83 c4 10             	add    esp,0x10
c001de90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de94:	83 c0 0c             	add    eax,0xc
c001de97:	83 ec 08             	sub    esp,0x8
c001de9a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de9e:	50                   	push   eax
c001de9f:	e8 90 29 fe ff       	call   c0000834 <strcpy>
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	83 ec 08             	sub    esp,0x8
c001deaa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001deae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001deb2:	e8 1d fc ff ff       	call   c001dad4 <Process::addArgs(char**)>
c001deb7:	83 c4 10             	add    esp,0x10
c001deba:	90                   	nop
c001debb:	83 c4 24             	add    esp,0x24
c001debe:	5b                   	pop    ebx
c001debf:	5e                   	pop    esi
c001dec0:	c3                   	ret    

c001dec1 <disableIRQs()>:
c001dec1:	fa                   	cli    
c001dec2:	ff 05 b0 1c 03 c0    	inc    DWORD PTR ds:0xc0031cb0
c001dec8:	c3                   	ret    

c001dec9 <getIRQNestingLevel()>:
c001dec9:	a1 b0 1c 03 c0       	mov    eax,ds:0xc0031cb0
c001dece:	c3                   	ret    

c001decf <enableIRQs()>:
c001decf:	a1 b0 1c 03 c0       	mov    eax,ds:0xc0031cb0
c001ded4:	48                   	dec    eax
c001ded5:	a3 b0 1c 03 c0       	mov    ds:0xc0031cb0,eax
c001deda:	75 01                	jne    c001dedd <enableIRQs()+0xe>
c001dedc:	fb                   	sti    
c001dedd:	c3                   	ret    

c001dede <lockScheduler()>:
c001dede:	eb e1                	jmp    c001dec1 <disableIRQs()>

c001dee0 <unlockScheduler()>:
c001dee0:	eb ed                	jmp    c001decf <enableIRQs()>

c001dee2 <userModeEntryPoint(void*)>:
c001dee2:	83 ec 0c             	sub    esp,0xc
c001dee5:	e8 f6 ff ff ff       	call   c001dee0 <unlockScheduler()>
c001deea:	fb                   	sti    
c001deeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001def3:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001def9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001defd:	83 c4 0c             	add    esp,0xc
c001df00:	e9 25 24 fe ff       	jmp    c000032a <goToUsermode>

c001df05 <lockStuff()>:
c001df05:	e8 b7 ff ff ff       	call   c001dec1 <disableIRQs()>
c001df0a:	ff 05 ac 1c 03 c0    	inc    DWORD PTR ds:0xc0031cac
c001df10:	c3                   	ret    

c001df11 <taskStartupFunction>:
c001df11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df16:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001df19:	c3                   	ret    

c001df1a <updateTimeUsed()>:
c001df1a:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c001df1f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df25:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df2c:	74 50                	je     c001df7e <updateTimeUsed()+0x64>
c001df2e:	57                   	push   edi
c001df2f:	56                   	push   esi
c001df30:	53                   	push   ebx
c001df31:	0f 31                	rdtsc  
c001df33:	89 c1                	mov    ecx,eax
c001df35:	a3 f0 1c 03 c0       	mov    ds:0xc0031cf0,eax
c001df3a:	2b 0d e0 1c 03 c0    	sub    ecx,DWORD PTR ds:0xc0031ce0
c001df40:	89 d3                	mov    ebx,edx
c001df42:	89 0d e8 1c 03 c0    	mov    DWORD PTR ds:0xc0031ce8,ecx
c001df48:	1b 1d e4 1c 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031ce4
c001df4e:	a3 e0 1c 03 c0       	mov    ds:0xc0031ce0,eax
c001df53:	89 1d ec 1c 03 c0    	mov    DWORD PTR ds:0xc0031cec,ebx
c001df59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df5e:	89 15 f4 1c 03 c0    	mov    DWORD PTR ds:0xc0031cf4,edx
c001df64:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df67:	89 15 e4 1c 03 c0    	mov    DWORD PTR ds:0xc0031ce4,edx
c001df6d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df70:	01 f1                	add    ecx,esi
c001df72:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df75:	11 fb                	adc    ebx,edi
c001df77:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df7a:	5b                   	pop    ebx
c001df7b:	5e                   	pop    esi
c001df7c:	5f                   	pop    edi
c001df7d:	c3                   	ret    
c001df7e:	c3                   	ret    

c001df7f <switchToThread(ThreadControlBlock*)>:
c001df7f:	53                   	push   ebx
c001df80:	83 ec 08             	sub    esp,0x8
c001df83:	a1 ac 1c 03 c0       	mov    eax,ds:0xc0031cac
c001df88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df8c:	85 c0                	test   eax,eax
c001df8e:	75 30                	jne    c001dfc0 <switchToThread(ThreadControlBlock*)+0x41>
c001df90:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df93:	3c ff                	cmp    al,0xff
c001df95:	74 25                	je     c001dfbc <switchToThread(ThreadControlBlock*)+0x3d>
c001df97:	0f b6 d0             	movzx  edx,al
c001df9a:	b8 84 03 00 00       	mov    eax,0x384
c001df9f:	29 d0                	sub    eax,edx
c001dfa1:	c1 e0 10             	shl    eax,0x10
c001dfa4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dfa7:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dfaa:	e8 6b ff ff ff       	call   c001df1a <updateTimeUsed()>
c001dfaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dfb3:	83 c4 08             	add    esp,0x8
c001dfb6:	5b                   	pop    ebx
c001dfb7:	e9 a6 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dfbc:	31 c0                	xor    eax,eax
c001dfbe:	eb e7                	jmp    c001dfa7 <switchToThread(ThreadControlBlock*)+0x28>
c001dfc0:	c7 05 a8 1c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ca8,0x1
c001dfca:	83 c4 08             	add    esp,0x8
c001dfcd:	5b                   	pop    ebx
c001dfce:	c3                   	ret    
c001dfcf:	90                   	nop

c001dfd0 <Semaphore::Semaphore(int)>:
c001dfd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfd8:	89 10                	mov    DWORD PTR [eax],edx
c001dfda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfde:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dfe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfe9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dff4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dffb:	90                   	nop
c001dffc:	c3                   	ret    
c001dffd:	90                   	nop

c001dffe <Mutex::Mutex()>:
c001dffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e002:	6a 01                	push   0x1
c001e004:	50                   	push   eax
c001e005:	e8 c6 ff ff ff       	call   c001dfd0 <Semaphore::Semaphore(int)>
c001e00a:	83 c4 08             	add    esp,0x8
c001e00d:	90                   	nop
c001e00e:	c3                   	ret    
c001e00f:	90                   	nop

c001e010 <Process::createThread(void (*)(void*), void*, int)>:
c001e010:	55                   	push   ebp
c001e011:	31 c9                	xor    ecx,ecx
c001e013:	57                   	push   edi
c001e014:	56                   	push   esi
c001e015:	53                   	push   ebx
c001e016:	83 ec 1c             	sub    esp,0x1c
c001e019:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e01d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e024:	89 f2                	mov    edx,esi
c001e026:	0f b7 c2             	movzx  eax,dx
c001e029:	83 e2 01             	and    edx,0x1
c001e02c:	74 14                	je     c001e042 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001e02e:	d1 f8                	sar    eax,1
c001e030:	41                   	inc    ecx
c001e031:	89 c2                	mov    edx,eax
c001e033:	83 f9 10             	cmp    ecx,0x10
c001e036:	75 ee                	jne    c001e026 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e038:	83 c4 1c             	add    esp,0x1c
c001e03b:	31 c0                	xor    eax,eax
c001e03d:	5b                   	pop    ebx
c001e03e:	5e                   	pop    esi
c001e03f:	5f                   	pop    edi
c001e040:	5d                   	pop    ebp
c001e041:	c3                   	ret    
c001e042:	83 ec 08             	sub    esp,0x8
c001e045:	b8 01 00 00 00       	mov    eax,0x1
c001e04a:	d3 e0                	shl    eax,cl
c001e04c:	09 c6                	or     esi,eax
c001e04e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e054:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e05b:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e05e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e061:	01 ce                	add    esi,ecx
c001e063:	89 f0                	mov    eax,esi
c001e065:	c1 e0 05             	shl    eax,0x5
c001e068:	01 c6                	add    esi,eax
c001e06a:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e06d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e073:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e079:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e07d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e083:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e089:	89 ca                	mov    edx,ecx
c001e08b:	f7 da                	neg    edx
c001e08d:	c1 e2 15             	shl    edx,0x15
c001e090:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e096:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e09c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e0a0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e0aa:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e0b0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0b4:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e0ba:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e0c4:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e0ce:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e0d5:	50                   	push   eax
c001e0d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0da:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e0df:	e8 1c ab 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0e4:	83 c4 10             	add    esp,0x10
c001e0e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0eb:	83 c4 1c             	add    esp,0x1c
c001e0ee:	5b                   	pop    ebx
c001e0ef:	5e                   	pop    esi
c001e0f0:	5f                   	pop    edi
c001e0f1:	5d                   	pop    ebp
c001e0f2:	c3                   	ret    
c001e0f3:	90                   	nop

c001e0f4 <Process::createUserThread()>:
c001e0f4:	83 ec 0c             	sub    esp,0xc
c001e0f7:	68 80 00 00 00       	push   0x80
c001e0fc:	6a 00                	push   0x0
c001e0fe:	68 e2 de 01 c0       	push   0xc001dee2
c001e103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e107:	e8 04 ff ff ff       	call   c001e010 <Process::createThread(void (*)(void*), void*, int)>
c001e10c:	83 c4 1c             	add    esp,0x1c
c001e10f:	c3                   	ret    

c001e110 <setupMultitasking(void (*)())>:
c001e110:	56                   	push   esi
c001e111:	53                   	push   ebx
c001e112:	53                   	push   ebx
c001e113:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e117:	eb 10                	jmp    c001e129 <setupMultitasking(void (*)())+0x19>
c001e119:	83 ec 0c             	sub    esp,0xc
c001e11c:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e121:	e8 2c aa 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e126:	83 c4 10             	add    esp,0x10
c001e129:	83 ec 0c             	sub    esp,0xc
c001e12c:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e131:	e8 00 aa 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e136:	83 c4 10             	add    esp,0x10
c001e139:	84 c0                	test   al,al
c001e13b:	74 dc                	je     c001e119 <setupMultitasking(void (*)())+0x9>
c001e13d:	83 ec 0c             	sub    esp,0xc
c001e140:	68 3f 07 00 00       	push   0x73f
c001e145:	e8 b2 17 ff ff       	call   c000f8fc <malloc>
c001e14a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e151:	89 c3                	mov    ebx,eax
c001e153:	6a 00                	push   0x0
c001e155:	68 4f c5 02 c0       	push   0xc002c54f
c001e15a:	6a 01                	push   0x1
c001e15c:	50                   	push   eax
c001e15d:	e8 b0 fb ff ff       	call   c001dd12 <Process::Process(bool, char const*, Process*, char**)>
c001e162:	83 c4 18             	add    esp,0x18
c001e165:	89 1d d8 1c 03 c0    	mov    DWORD PTR ds:0xc0031cd8,ebx
c001e16b:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e171:	68 70 c6 02 c0       	push   0xc002c670
c001e176:	e8 8c 4e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e17b:	58                   	pop    eax
c001e17c:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e182:	e8 72 2c ff ff       	call   c0010df9 <setActiveTerminal(VgaText*)>
c001e187:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e18f:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e195:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e198:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e1a2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e1a8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e1ae:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e1b8:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e1c2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e1cc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e1d2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e1d8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e1e2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e1e8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1f2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1f8:	5a                   	pop    edx
c001e1f9:	59                   	pop    ecx
c001e1fa:	68 4b c5 02 c0       	push   0xc002c54b
c001e1ff:	50                   	push   eax
c001e200:	e8 2f 26 fe ff       	call   c0000834 <strcpy>
c001e205:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e20c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e210:	83 c4 14             	add    esp,0x14
c001e213:	5b                   	pop    ebx
c001e214:	5e                   	pop    esi
c001e215:	e9 3a 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e21a <schedule()>:
c001e21a:	a1 ac 1c 03 c0       	mov    eax,ds:0xc0031cac
c001e21f:	85 c0                	test   eax,eax
c001e221:	74 0b                	je     c001e22e <schedule()+0x14>
c001e223:	c7 05 a8 1c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ca8,0x1
c001e22d:	c3                   	ret    
c001e22e:	53                   	push   ebx
c001e22f:	83 ec 14             	sub    esp,0x14
c001e232:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e237:	e8 fa a8 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e23c:	83 c4 10             	add    esp,0x10
c001e23f:	84 c0                	test   al,al
c001e241:	75 38                	jne    c001e27b <schedule()+0x61>
c001e243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e248:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e24b:	4a                   	dec    edx
c001e24c:	74 32                	je     c001e280 <schedule()+0x66>
c001e24e:	83 ec 0c             	sub    esp,0xc
c001e251:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e256:	e8 d3 a8 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e25b:	c7 04 24 cc 1c 03 c0 	mov    DWORD PTR [esp],0xc0031ccc
c001e262:	89 c3                	mov    ebx,eax
c001e264:	e8 e9 a8 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e269:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e273:	e8 07 fd ff ff       	call   c001df7f <switchToThread(ThreadControlBlock*)>
c001e278:	83 c4 10             	add    esp,0x10
c001e27b:	83 c4 08             	add    esp,0x8
c001e27e:	5b                   	pop    ebx
c001e27f:	c3                   	ret    
c001e280:	83 ec 08             	sub    esp,0x8
c001e283:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e28a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e290:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e295:	e8 66 a9 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e29a:	83 c4 10             	add    esp,0x10
c001e29d:	eb af                	jmp    c001e24e <schedule()+0x34>

c001e29f <unlockStuff()>:
c001e29f:	a1 ac 1c 03 c0       	mov    eax,ds:0xc0031cac
c001e2a4:	48                   	dec    eax
c001e2a5:	a3 ac 1c 03 c0       	mov    ds:0xc0031cac,eax
c001e2aa:	75 09                	jne    c001e2b5 <unlockStuff()+0x16>
c001e2ac:	a1 a8 1c 03 c0       	mov    eax,ds:0xc0031ca8
c001e2b1:	85 c0                	test   eax,eax
c001e2b3:	75 05                	jne    c001e2ba <unlockStuff()+0x1b>
c001e2b5:	e9 15 fc ff ff       	jmp    c001decf <enableIRQs()>
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	c7 05 a8 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ca8,0x0
c001e2c7:	e8 4e ff ff ff       	call   c001e21a <schedule()>
c001e2cc:	83 c4 0c             	add    esp,0xc
c001e2cf:	e9 fb fb ff ff       	jmp    c001decf <enableIRQs()>

c001e2d4 <Semaphore::tryAcquire()>:
c001e2d4:	83 ec 0c             	sub    esp,0xc
c001e2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2db:	e8 25 fc ff ff       	call   c001df05 <lockStuff()>
c001e2e0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2e3:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2e5:	7c 0b                	jl     c001e2f2 <Semaphore::tryAcquire()+0x1e>
c001e2e7:	e8 b3 ff ff ff       	call   c001e29f <unlockStuff()>
c001e2ec:	31 c0                	xor    eax,eax
c001e2ee:	83 c4 0c             	add    esp,0xc
c001e2f1:	c3                   	ret    
c001e2f2:	42                   	inc    edx
c001e2f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2f6:	e8 a4 ff ff ff       	call   c001e29f <unlockStuff()>
c001e2fb:	b0 01                	mov    al,0x1
c001e2fd:	83 c4 0c             	add    esp,0xc
c001e300:	c3                   	ret    
c001e301:	90                   	nop

c001e302 <Semaphore::assertLocked(char const*)>:
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e309:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e30d:	e8 f3 fb ff ff       	call   c001df05 <lockStuff()>
c001e312:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e314:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e317:	7c 05                	jl     c001e31e <Semaphore::assertLocked(char const*)+0x1c>
c001e319:	83 c4 0c             	add    esp,0xc
c001e31c:	eb 81                	jmp    c001e29f <unlockStuff()>
c001e31e:	83 ec 0c             	sub    esp,0xc
c001e321:	52                   	push   edx
c001e322:	e8 92 c3 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001e327:	83 c4 10             	add    esp,0x10
c001e32a:	83 c4 0c             	add    esp,0xc
c001e32d:	e9 6d ff ff ff       	jmp    c001e29f <unlockStuff()>

c001e332 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e332:	83 ec 0c             	sub    esp,0xc
c001e335:	e8 8f fb ff ff       	call   c001dec9 <getIRQNestingLevel()>
c001e33a:	83 ec 08             	sub    esp,0x8
c001e33d:	50                   	push   eax
c001e33e:	68 a4 c6 02 c0       	push   0xc002c6a4
c001e343:	e8 bf 4c ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e348:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e34c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e351:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e354:	e8 c1 fe ff ff       	call   c001e21a <schedule()>
c001e359:	e8 82 fb ff ff       	call   c001dee0 <unlockScheduler()>
c001e35e:	e8 66 fb ff ff       	call   c001dec9 <getIRQNestingLevel()>
c001e363:	5a                   	pop    edx
c001e364:	59                   	pop    ecx
c001e365:	50                   	push   eax
c001e366:	68 d8 c6 02 c0       	push   0xc002c6d8
c001e36b:	e8 97 4c ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e370:	83 c4 1c             	add    esp,0x1c
c001e373:	c3                   	ret    

c001e374 <blockTask(TaskState)>:
c001e374:	83 ec 0c             	sub    esp,0xc
c001e377:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e37b:	e8 5e fb ff ff       	call   c001dede <lockScheduler()>
c001e380:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e385:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e388:	e8 8d fe ff ff       	call   c001e21a <schedule()>
c001e38d:	83 c4 0c             	add    esp,0xc
c001e390:	e9 4b fb ff ff       	jmp    c001dee0 <unlockScheduler()>

c001e395 <waitTask(int, int*, int)>:
c001e395:	83 ec 18             	sub    esp,0x18
c001e398:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e39d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3a1:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e3a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e3a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ad:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e3b0:	6a 07                	push   0x7
c001e3b2:	e8 bd ff ff ff       	call   c001e374 <blockTask(TaskState)>
c001e3b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3bc:	83 c4 10             	add    esp,0x10
c001e3bf:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e3c2:	85 d2                	test   edx,edx
c001e3c4:	74 0a                	je     c001e3d0 <waitTask(int, int*, int)+0x3b>
c001e3c6:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e3c9:	89 02                	mov    DWORD PTR [edx],eax
c001e3cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3d0:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e3d3:	83 c4 0c             	add    esp,0xc
c001e3d6:	c3                   	ret    

c001e3d7 <nanoSleepUntil(unsigned long long)>:
c001e3d7:	83 ec 0c             	sub    esp,0xc
c001e3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3e2:	3b 05 f0 ed 02 c0    	cmp    eax,DWORD PTR ds:0xc002edf0
c001e3e8:	89 d1                	mov    ecx,edx
c001e3ea:	1b 0d f4 ed 02 c0    	sbb    ecx,DWORD PTR ds:0xc002edf4
c001e3f0:	73 04                	jae    c001e3f6 <nanoSleepUntil(unsigned long long)+0x1f>
c001e3f2:	83 c4 0c             	add    esp,0xc
c001e3f5:	c3                   	ret    
c001e3f6:	e8 0a fb ff ff       	call   c001df05 <lockStuff()>
c001e3fb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e401:	83 ec 08             	sub    esp,0x8
c001e404:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e407:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e40a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e410:	68 c0 1c 03 c0       	push   0xc0031cc0
c001e415:	e8 e6 a7 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e41a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e421:	e8 4e ff ff ff       	call   c001e374 <blockTask(TaskState)>
c001e426:	83 c4 1c             	add    esp,0x1c
c001e429:	e9 71 fe ff ff       	jmp    c001e29f <unlockStuff()>

c001e42e <nanoSleep(unsigned long long)>:
c001e42e:	a1 f0 ed 02 c0       	mov    eax,ds:0xc002edf0
c001e433:	8b 15 f4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edf4
c001e439:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e43d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e441:	eb 94                	jmp    c001e3d7 <nanoSleepUntil(unsigned long long)>

c001e443 <sleep(unsigned long long)>:
c001e443:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e44b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e450:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e454:	01 ca                	add    edx,ecx
c001e456:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e45a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e45e:	eb ce                	jmp    c001e42e <nanoSleep(unsigned long long)>

c001e460 <Semaphore::acquire()>:
c001e460:	83 ec 0c             	sub    esp,0xc
c001e463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e467:	e8 99 fa ff ff       	call   c001df05 <lockStuff()>
c001e46c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e46f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e471:	7d 0c                	jge    c001e47f <Semaphore::acquire()+0x1f>
c001e473:	42                   	inc    edx
c001e474:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e477:	83 c4 0c             	add    esp,0xc
c001e47a:	e9 20 fe ff ff       	jmp    c001e29f <unlockStuff()>
c001e47f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e485:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e48c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e48f:	85 d2                	test   edx,edx
c001e491:	74 2a                	je     c001e4bd <Semaphore::acquire()+0x5d>
c001e493:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e496:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e49c:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e49f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4a5:	83 ec 0c             	sub    esp,0xc
c001e4a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4ab:	6a 05                	push   0x5
c001e4ad:	e8 c2 fe ff ff       	call   c001e374 <blockTask(TaskState)>
c001e4b2:	83 c4 10             	add    esp,0x10
c001e4b5:	83 c4 0c             	add    esp,0xc
c001e4b8:	e9 e2 fd ff ff       	jmp    c001e29f <unlockStuff()>
c001e4bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4c6:	eb d7                	jmp    c001e49f <Semaphore::acquire()+0x3f>

c001e4c8 <taskReturned>:
c001e4c8:	83 ec 18             	sub    esp,0x18
c001e4cb:	68 0c c7 02 c0       	push   0xc002c70c
c001e4d0:	e8 e4 c1 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001e4d5:	83 c4 10             	add    esp,0x10
c001e4d8:	83 ec 0c             	sub    esp,0xc
c001e4db:	6a 02                	push   0x2
c001e4dd:	e8 92 fe ff ff       	call   c001e374 <blockTask(TaskState)>
c001e4e2:	e8 f7 f9 ff ff       	call   c001dede <lockScheduler()>
c001e4e7:	e8 2e fd ff ff       	call   c001e21a <schedule()>
c001e4ec:	e8 ef f9 ff ff       	call   c001dee0 <unlockScheduler()>
c001e4f1:	83 c4 10             	add    esp,0x10
c001e4f4:	eb e2                	jmp    c001e4d8 <taskReturned+0x10>

c001e4f6 <unblockTask(ThreadControlBlock*)>:
c001e4f6:	53                   	push   ebx
c001e4f7:	83 ec 08             	sub    esp,0x8
c001e4fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4fe:	e8 db f9 ff ff       	call   c001dede <lockScheduler()>
c001e503:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e506:	85 c0                	test   eax,eax
c001e508:	74 5c                	je     c001e566 <unblockTask(ThreadControlBlock*)+0x70>
c001e50a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e50d:	48                   	dec    eax
c001e50e:	74 31                	je     c001e541 <unblockTask(ThreadControlBlock*)+0x4b>
c001e510:	83 ec 0c             	sub    esp,0xc
c001e513:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e518:	e8 11 a6 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e51d:	83 c4 10             	add    esp,0x10
c001e520:	85 c0                	test   eax,eax
c001e522:	75 17                	jne    c001e53b <unblockTask(ThreadControlBlock*)+0x45>
c001e524:	eb 65                	jmp    c001e58b <unblockTask(ThreadControlBlock*)+0x95>
c001e526:	83 ec 08             	sub    esp,0x8
c001e529:	50                   	push   eax
c001e52a:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e52f:	e8 d4 a8 00 00       	call   c0028e08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e534:	83 c4 10             	add    esp,0x10
c001e537:	85 c0                	test   eax,eax
c001e539:	74 50                	je     c001e58b <unblockTask(ThreadControlBlock*)+0x95>
c001e53b:	39 c3                	cmp    ebx,eax
c001e53d:	75 e7                	jne    c001e526 <unblockTask(ThreadControlBlock*)+0x30>
c001e53f:	eb 1c                	jmp    c001e55d <unblockTask(ThreadControlBlock*)+0x67>
c001e541:	83 ec 0c             	sub    esp,0xc
c001e544:	68 fc c7 02 c0       	push   0xc002c7fc
c001e549:	e8 b9 4a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e54e:	c7 04 24 88 c7 02 c0 	mov    DWORD PTR [esp],0xc002c788
c001e555:	e8 ad 4a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e55a:	83 c4 10             	add    esp,0x10
c001e55d:	83 c4 08             	add    esp,0x8
c001e560:	5b                   	pop    ebx
c001e561:	e9 7a f9 ff ff       	jmp    c001dee0 <unlockScheduler()>
c001e566:	83 ec 0c             	sub    esp,0xc
c001e569:	68 40 c7 02 c0       	push   0xc002c740
c001e56e:	e8 94 4a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e573:	c7 04 24 88 c7 02 c0 	mov    DWORD PTR [esp],0xc002c788
c001e57a:	e8 88 4a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e57f:	83 c4 10             	add    esp,0x10
c001e582:	83 c4 08             	add    esp,0x8
c001e585:	5b                   	pop    ebx
c001e586:	e9 55 f9 ff ff       	jmp    c001dee0 <unlockScheduler()>
c001e58b:	83 ec 08             	sub    esp,0x8
c001e58e:	53                   	push   ebx
c001e58f:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e594:	e8 67 a6 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e599:	83 c4 10             	add    esp,0x10
c001e59c:	83 c4 08             	add    esp,0x8
c001e59f:	5b                   	pop    ebx
c001e5a0:	e9 3b f9 ff ff       	jmp    c001dee0 <unlockScheduler()>

c001e5a5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e5a5:	55                   	push   ebp
c001e5a6:	57                   	push   edi
c001e5a7:	56                   	push   esi
c001e5a8:	53                   	push   ebx
c001e5a9:	83 ec 1c             	sub    esp,0x1c
c001e5ac:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e5b0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b3:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e5b9:	85 ff                	test   edi,edi
c001e5bb:	7e 20                	jle    c001e5dd <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e5bd:	31 f6                	xor    esi,esi
c001e5bf:	83 ec 0c             	sub    esp,0xc
c001e5c2:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e5c9:	46                   	inc    esi
c001e5ca:	e8 3d 13 ff ff       	call   c000f90c <free>
c001e5cf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5d2:	83 c4 10             	add    esp,0x10
c001e5d5:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e5db:	7f e2                	jg     c001e5bf <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e5dd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e5e7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5ec:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5ef:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5f2:	d3 c0                	rol    eax,cl
c001e5f4:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5fb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5fe:	89 f7                	mov    edi,esi
c001e600:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e608:	0f 85 74 01 00 00    	jne    c001e782 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e60e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e614:	85 ed                	test   ebp,ebp
c001e616:	74 1b                	je     c001e633 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e618:	83 ec 0c             	sub    esp,0xc
c001e61b:	55                   	push   ebp
c001e61c:	e8 05 be ff ff       	call   c001a426 <EnvVarContainer::~EnvVarContainer()>
c001e621:	59                   	pop    ecx
c001e622:	5e                   	pop    esi
c001e623:	6a 0c                	push   0xc
c001e625:	55                   	push   ebp
c001e626:	e8 fc 48 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c001e62b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e62e:	83 c4 10             	add    esp,0x10
c001e631:	89 f7                	mov    edi,esi
c001e633:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e639:	85 c0                	test   eax,eax
c001e63b:	0f 84 aa 00 00 00    	je     c001e6eb <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e641:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e644:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e648:	31 c9                	xor    ecx,ecx
c001e64a:	eb 10                	jmp    c001e65c <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e64c:	41                   	inc    ecx
c001e64d:	83 f9 10             	cmp    ecx,0x10
c001e650:	0f 84 95 00 00 00    	je     c001e6eb <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e656:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e65c:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e663:	d3 fa                	sar    edx,cl
c001e665:	83 e2 01             	and    edx,0x1
c001e668:	74 e2                	je     c001e64c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e66a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e66d:	01 ca                	add    edx,ecx
c001e66f:	89 d5                	mov    ebp,edx
c001e671:	c1 e5 05             	shl    ebp,0x5
c001e674:	01 ea                	add    edx,ebp
c001e676:	01 d0                	add    eax,edx
c001e678:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e67e:	83 fd 07             	cmp    ebp,0x7
c001e681:	75 c9                	jne    c001e64c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e683:	05 40 02 00 00       	add    eax,0x240
c001e688:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e68b:	83 fd ff             	cmp    ebp,0xffffffff
c001e68e:	0f 8c 08 01 00 00    	jl     c001e79c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e694:	0f 84 b9 01 00 00    	je     c001e853 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e69a:	85 ed                	test   ebp,ebp
c001e69c:	0f 84 a0 01 00 00    	je     c001e842 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e6a2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e6a4:	75 a6                	jne    c001e64c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6a6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6b0:	01 d0                	add    eax,edx
c001e6b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e6b6:	83 ec 0c             	sub    esp,0xc
c001e6b9:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e6bf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6c2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e6c8:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e6cf:	50                   	push   eax
c001e6d0:	e8 21 fe ff ff       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c001e6d5:	83 c4 10             	add    esp,0x10
c001e6d8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6df:	89 f7                	mov    edi,esi
c001e6e1:	41                   	inc    ecx
c001e6e2:	83 f9 10             	cmp    ecx,0x10
c001e6e5:	0f 85 6b ff ff ff    	jne    c001e656 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6eb:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6f1:	85 c0                	test   eax,eax
c001e6f3:	74 5d                	je     c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6f5:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6fb:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e701:	74 4f                	je     c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e703:	83 ec 0c             	sub    esp,0xc
c001e706:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e70b:	e8 1e a4 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e710:	c7 04 24 cc 1c 03 c0 	mov    DWORD PTR [esp],0xc0031ccc
c001e717:	89 c7                	mov    edi,eax
c001e719:	e8 18 a4 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e71e:	83 c4 10             	add    esp,0x10
c001e721:	84 c0                	test   al,al
c001e723:	0f 84 e4 00 00 00    	je     c001e80d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e729:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e72c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e732:	85 d2                	test   edx,edx
c001e734:	74 0f                	je     c001e745 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e736:	83 ec 0c             	sub    esp,0xc
c001e739:	8b 02                	mov    eax,DWORD PTR [edx]
c001e73b:	52                   	push   edx
c001e73c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e73f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e742:	83 c4 10             	add    esp,0x10
c001e745:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e74f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e752:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e758:	85 db                	test   ebx,ebx
c001e75a:	74 16                	je     c001e772 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	53                   	push   ebx
c001e760:	e8 4d 3b ff ff       	call   c00122b2 <VAS::~VAS()>
c001e765:	58                   	pop    eax
c001e766:	5a                   	pop    edx
c001e767:	6a 10                	push   0x10
c001e769:	53                   	push   ebx
c001e76a:	e8 b8 47 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c001e76f:	83 c4 10             	add    esp,0x10
c001e772:	83 ec 0c             	sub    esp,0xc
c001e775:	68 56 c5 02 c0       	push   0xc002c556
c001e77a:	e8 88 48 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e77f:	83 c4 10             	add    esp,0x10
c001e782:	83 ec 08             	sub    esp,0x8
c001e785:	68 3f 07 00 00       	push   0x73f
c001e78a:	68 64 c5 02 c0       	push   0xc002c564
c001e78f:	e8 73 48 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e794:	83 c4 2c             	add    esp,0x2c
c001e797:	5b                   	pop    ebx
c001e798:	5e                   	pop    esi
c001e799:	5f                   	pop    edi
c001e79a:	5d                   	pop    ebp
c001e79b:	c3                   	ret    
c001e79c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7a0:	83 ec 0c             	sub    esp,0xc
c001e7a3:	68 40 c8 02 c0       	push   0xc002c840
c001e7a8:	e8 0c bf ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001e7ad:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e7b0:	83 c4 10             	add    esp,0x10
c001e7b3:	89 f7                	mov    edi,esi
c001e7b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7b9:	e9 8e fe ff ff       	jmp    c001e64c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7be:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e7c4:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e7ca:	75 1c                	jne    c001e7e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7cc:	83 ec 0c             	sub    esp,0xc
c001e7cf:	68 a8 c8 02 c0       	push   0xc002c8a8
c001e7d4:	e8 2e 48 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e7d9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e7e0:	e8 8f fb ff ff       	call   c001e374 <blockTask(TaskState)>
c001e7e5:	83 c4 10             	add    esp,0x10
c001e7e8:	83 ec 08             	sub    esp,0x8
c001e7eb:	56                   	push   esi
c001e7ec:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e7f1:	e8 0a a4 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7f6:	c7 04 24 cc 1c 03 c0 	mov    DWORD PTR [esp],0xc0031ccc
c001e7fd:	e8 2c a3 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e802:	83 c4 10             	add    esp,0x10
c001e805:	39 f8                	cmp    eax,edi
c001e807:	0f 84 1c ff ff ff    	je     c001e729 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e80d:	83 ec 0c             	sub    esp,0xc
c001e810:	68 cc 1c 03 c0       	push   0xc0031ccc
c001e815:	e8 14 a3 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e81a:	c7 04 24 cc 1c 03 c0 	mov    DWORD PTR [esp],0xc0031ccc
c001e821:	89 c6                	mov    esi,eax
c001e823:	e8 2a a3 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e828:	83 c4 10             	add    esp,0x10
c001e82b:	39 f3                	cmp    ebx,esi
c001e82d:	74 b9                	je     c001e7e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e82f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e832:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e835:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e83b:	75 ab                	jne    c001e7e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e83d:	e9 7c ff ff ff       	jmp    c001e7be <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e842:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e846:	83 ec 0c             	sub    esp,0xc
c001e849:	68 74 c8 02 c0       	push   0xc002c874
c001e84e:	e9 55 ff ff ff       	jmp    c001e7a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e853:	8b 36                	mov    esi,DWORD PTR [esi]
c001e855:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e859:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e85c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e85f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e865:	01 d7                	add    edi,edx
c001e867:	89 f8                	mov    eax,edi
c001e869:	e9 44 fe ff ff       	jmp    c001e6b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e86e <cleanerTaskFunction(void*)>:
c001e86e:	53                   	push   ebx
c001e86f:	83 ec 08             	sub    esp,0x8
c001e872:	e8 69 f6 ff ff       	call   c001dee0 <unlockScheduler()>
c001e877:	e8 62 f6 ff ff       	call   c001dede <lockScheduler()>
c001e87c:	80 3d 90 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c90,0x0
c001e883:	0f 85 8e 00 00 00    	jne    c001e917 <cleanerTaskFunction(void*)+0xa9>
c001e889:	83 ec 0c             	sub    esp,0xc
c001e88c:	6a 02                	push   0x2
c001e88e:	e8 9f fa ff ff       	call   c001e332 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e893:	83 c4 10             	add    esp,0x10
c001e896:	c6 05 90 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c90,0x0
c001e89d:	e8 63 f6 ff ff       	call   c001df05 <lockStuff()>
c001e8a2:	e8 37 f6 ff ff       	call   c001dede <lockScheduler()>
c001e8a7:	83 ec 0c             	sub    esp,0xc
c001e8aa:	68 b4 1c 03 c0       	push   0xc0031cb4
c001e8af:	e8 82 a2 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e8b4:	83 c4 10             	add    esp,0x10
c001e8b7:	84 c0                	test   al,al
c001e8b9:	75 40                	jne    c001e8fb <cleanerTaskFunction(void*)+0x8d>
c001e8bb:	83 ec 0c             	sub    esp,0xc
c001e8be:	68 b4 1c 03 c0       	push   0xc0031cb4
c001e8c3:	e8 66 a2 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8c8:	c7 04 24 b4 1c 03 c0 	mov    DWORD PTR [esp],0xc0031cb4
c001e8cf:	89 c3                	mov    ebx,eax
c001e8d1:	e8 7c a2 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8d6:	c7 04 24 7a c5 02 c0 	mov    DWORD PTR [esp],0xc002c57a
c001e8dd:	e8 25 47 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e8e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8e5:	e8 bb fc ff ff       	call   c001e5a5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8ea:	c7 04 24 93 c5 02 c0 	mov    DWORD PTR [esp],0xc002c593
c001e8f1:	e8 11 47 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e8f6:	83 c4 10             	add    esp,0x10
c001e8f9:	eb ac                	jmp    c001e8a7 <cleanerTaskFunction(void*)+0x39>
c001e8fb:	e8 e0 f5 ff ff       	call   c001dee0 <unlockScheduler()>
c001e900:	e8 9a f9 ff ff       	call   c001e29f <unlockStuff()>
c001e905:	e8 d4 f5 ff ff       	call   c001dede <lockScheduler()>
c001e90a:	80 3d 90 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c90,0x0
c001e911:	0f 84 72 ff ff ff    	je     c001e889 <cleanerTaskFunction(void*)+0x1b>
c001e917:	e8 c4 f5 ff ff       	call   c001dee0 <unlockScheduler()>
c001e91c:	e9 75 ff ff ff       	jmp    c001e896 <cleanerTaskFunction(void*)+0x28>

c001e921 <terminateTask(int)>:
c001e921:	83 ec 14             	sub    esp,0x14
c001e924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e929:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e92c:	83 c0 0c             	add    eax,0xc
c001e92f:	50                   	push   eax
c001e930:	68 d0 c8 02 c0       	push   0xc002c8d0
c001e935:	e8 cd 46 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e93a:	e8 c6 f5 ff ff       	call   c001df05 <lockStuff()>
c001e93f:	e8 9a f5 ff ff       	call   c001dede <lockScheduler()>
c001e944:	c7 04 24 a6 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5a6
c001e94b:	e8 b7 46 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e950:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e954:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e959:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e95c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e961:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e964:	5a                   	pop    edx
c001e965:	59                   	pop    ecx
c001e966:	50                   	push   eax
c001e967:	68 b4 1c 03 c0       	push   0xc0031cb4
c001e96c:	e8 8f a2 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e971:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e976:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e97d:	c7 04 24 c0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5c0
c001e984:	e8 7e 46 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e989:	83 c4 10             	add    esp,0x10
c001e98c:	a1 8c 1c 03 c0       	mov    eax,ds:0xc0031c8c
c001e991:	85 c0                	test   eax,eax
c001e993:	74 5a                	je     c001e9ef <terminateTask(int)+0xce>
c001e995:	83 ec 0c             	sub    esp,0xc
c001e998:	68 da c5 02 c0       	push   0xc002c5da
c001e99d:	e8 65 46 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e9a2:	58                   	pop    eax
c001e9a3:	c6 05 90 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c90,0x1
c001e9aa:	ff 35 8c 1c 03 c0    	push   DWORD PTR ds:0xc0031c8c
c001e9b0:	e8 41 fb ff ff       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c001e9b5:	c7 04 24 f4 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5f4
c001e9bc:	e8 46 46 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e9c1:	83 c4 10             	add    esp,0x10
c001e9c4:	e8 17 f5 ff ff       	call   c001dee0 <unlockScheduler()>
c001e9c9:	e8 d1 f8 ff ff       	call   c001e29f <unlockStuff()>
c001e9ce:	83 ec 0c             	sub    esp,0xc
c001e9d1:	68 2c c6 02 c0       	push   0xc002c62c
c001e9d6:	e8 2c 46 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e9db:	83 c4 10             	add    esp,0x10
c001e9de:	e8 fb f4 ff ff       	call   c001dede <lockScheduler()>
c001e9e3:	e8 32 f8 ff ff       	call   c001e21a <schedule()>
c001e9e8:	e8 f3 f4 ff ff       	call   c001dee0 <unlockScheduler()>
c001e9ed:	eb ef                	jmp    c001e9de <terminateTask(int)+0xbd>
c001e9ef:	83 ec 0c             	sub    esp,0xc
c001e9f2:	68 0e c6 02 c0       	push   0xc002c60e
c001e9f7:	e8 0b 46 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001e9fc:	83 c4 10             	add    esp,0x10
c001e9ff:	eb c3                	jmp    c001e9c4 <terminateTask(int)+0xa3>

c001ea01 <Thr::terminateFromIRQ(int)>:
c001ea01:	83 ec 18             	sub    esp,0x18
c001ea04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea08:	e8 14 ff ff ff       	call   c001e921 <terminateTask(int)>
c001ea0d:	90                   	nop

c001ea0e <Semaphore::release()>:
c001ea0e:	83 ec 0c             	sub    esp,0xc
c001ea11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea15:	e8 eb f4 ff ff       	call   c001df05 <lockStuff()>
c001ea1a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ea1d:	85 d2                	test   edx,edx
c001ea1f:	74 1a                	je     c001ea3b <Semaphore::release()+0x2d>
c001ea21:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ea24:	83 ec 0c             	sub    esp,0xc
c001ea27:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ea2a:	52                   	push   edx
c001ea2b:	e8 c6 fa ff ff       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c001ea30:	83 c4 10             	add    esp,0x10
c001ea33:	83 c4 0c             	add    esp,0xc
c001ea36:	e9 64 f8 ff ff       	jmp    c001e29f <unlockStuff()>
c001ea3b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ea3e:	83 c4 0c             	add    esp,0xc
c001ea41:	e9 59 f8 ff ff       	jmp    c001e29f <unlockStuff()>

c001ea46 <__static_initialization_and_destruction_0(int, int)>:
c001ea46:	83 ec 0c             	sub    esp,0xc
c001ea49:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea4e:	0f 85 88 00 00 00    	jne    c001eadc <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea54:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea5c:	75 7e                	jne    c001eadc <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea5e:	83 ec 0c             	sub    esp,0xc
c001ea61:	68 cc 1c 03 c0       	push   0xc0031ccc
c001ea66:	e8 45 a3 00 00       	call   c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea6b:	83 c4 10             	add    esp,0x10
c001ea6e:	83 ec 04             	sub    esp,0x4
c001ea71:	68 88 d6 02 c0       	push   0xc002d688
c001ea76:	68 cc 1c 03 c0       	push   0xc0031ccc
c001ea7b:	68 70 8d 02 c0       	push   0xc0028d70
c001ea80:	e8 1c 44 ff ff       	call   c0012ea1 <__cxa_atexit>
c001ea85:	83 c4 10             	add    esp,0x10
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	68 c0 1c 03 c0       	push   0xc0031cc0
c001ea90:	e8 1b a3 00 00       	call   c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea95:	83 c4 10             	add    esp,0x10
c001ea98:	83 ec 04             	sub    esp,0x4
c001ea9b:	68 88 d6 02 c0       	push   0xc002d688
c001eaa0:	68 c0 1c 03 c0       	push   0xc0031cc0
c001eaa5:	68 70 8d 02 c0       	push   0xc0028d70
c001eaaa:	e8 f2 43 ff ff       	call   c0012ea1 <__cxa_atexit>
c001eaaf:	83 c4 10             	add    esp,0x10
c001eab2:	83 ec 0c             	sub    esp,0xc
c001eab5:	68 b4 1c 03 c0       	push   0xc0031cb4
c001eaba:	e8 f1 a2 00 00       	call   c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eabf:	83 c4 10             	add    esp,0x10
c001eac2:	83 ec 04             	sub    esp,0x4
c001eac5:	68 88 d6 02 c0       	push   0xc002d688
c001eaca:	68 b4 1c 03 c0       	push   0xc0031cb4
c001eacf:	68 70 8d 02 c0       	push   0xc0028d70
c001ead4:	e8 c8 43 ff ff       	call   c0012ea1 <__cxa_atexit>
c001ead9:	83 c4 10             	add    esp,0x10
c001eadc:	90                   	nop
c001eadd:	83 c4 0c             	add    esp,0xc
c001eae0:	c3                   	ret    

c001eae1 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001eae1:	83 ec 0c             	sub    esp,0xc
c001eae4:	83 ec 08             	sub    esp,0x8
c001eae7:	68 ff ff 00 00       	push   0xffff
c001eaec:	6a 01                	push   0x1
c001eaee:	e8 53 ff ff ff       	call   c001ea46 <__static_initialization_and_destruction_0(int, int)>
c001eaf3:	83 c4 10             	add    esp,0x10
c001eaf6:	83 c4 0c             	add    esp,0xc
c001eaf9:	c3                   	ret    

c001eafa <Vm::inbv(unsigned short)>:
c001eafa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eafe:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eb03:	75 06                	jne    c001eb0b <Vm::inbv(unsigned short)+0x11>
c001eb05:	a0 0c 1d 03 c0       	mov    al,ds:0xc0031d0c
c001eb0a:	c3                   	ret    
c001eb0b:	ec                   	in     al,dx
c001eb0c:	c3                   	ret    

c001eb0d <Vm::outbv(unsigned short, unsigned char)>:
c001eb0d:	53                   	push   ebx
c001eb0e:	83 ec 08             	sub    esp,0x8
c001eb11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb19:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eb1e:	75 38                	jne    c001eb58 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eb20:	0f b6 c3             	movzx  eax,bl
c001eb23:	51                   	push   ecx
c001eb24:	51                   	push   ecx
c001eb25:	50                   	push   eax
c001eb26:	68 ef c8 02 c0       	push   0xc002c8ef
c001eb2b:	e8 d7 44 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001eb30:	8b 15 0c 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d0c
c001eb36:	83 c4 10             	add    esp,0x10
c001eb39:	8d 42 01             	lea    eax,[edx+0x1]
c001eb3c:	88 9a 20 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce2e0],bl
c001eb42:	a3 0c 1d 03 c0       	mov    ds:0xc0031d0c,eax
c001eb47:	83 f8 20             	cmp    eax,0x20
c001eb4a:	75 0f                	jne    c001eb5b <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb4c:	c7 05 0c 1d 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031d0c,0x1f
c001eb56:	eb 03                	jmp    c001eb5b <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb58:	88 d8                	mov    al,bl
c001eb5a:	ee                   	out    dx,al
c001eb5b:	83 c4 08             	add    esp,0x8
c001eb5e:	5b                   	pop    ebx
c001eb5f:	c3                   	ret    

c001eb60 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb6a:	c1 e0 04             	shl    eax,0x4
c001eb6d:	01 d0                	add    eax,edx
c001eb6f:	c3                   	ret    

c001eb70 <Vm::getSegment(unsigned int)>:
c001eb70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb74:	c1 e8 10             	shr    eax,0x10
c001eb77:	c3                   	ret    

c001eb78 <Vm::getOffset(unsigned int)>:
c001eb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb7c:	c3                   	ret    

c001eb7d <Vm::mainloop2()>:
c001eb7d:	83 ec 0c             	sub    esp,0xc
c001eb80:	e8 59 f3 ff ff       	call   c001dede <lockScheduler()>
c001eb85:	83 ec 0c             	sub    esp,0xc
c001eb88:	c6 05 05 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d05,0x1
c001eb8f:	6a 02                	push   0x2
c001eb91:	e8 9c f7 ff ff       	call   c001e332 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb9b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb9f:	52                   	push   edx
c001eba0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eba4:	52                   	push   edx
c001eba5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eba9:	52                   	push   edx
c001ebaa:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ebae:	50                   	push   eax
c001ebaf:	e8 46 17 fe ff       	call   c00002fa <goToVM86>
c001ebb4:	83 c4 2c             	add    esp,0x2c
c001ebb7:	c3                   	ret    

c001ebb8 <Vm::mainVm8086Loop(void*)>:
c001ebb8:	83 ec 0c             	sub    esp,0xc
c001ebbb:	e8 20 f3 ff ff       	call   c001dee0 <unlockScheduler()>
c001ebc0:	83 c4 0c             	add    esp,0xc
c001ebc3:	eb b8                	jmp    c001eb7d <Vm::mainloop2()>

c001ebc5 <Vm::mainloop3(unsigned long)>:
c001ebc5:	53                   	push   ebx
c001ebc6:	83 ec 08             	sub    esp,0x8
c001ebc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebcd:	e8 0c f3 ff ff       	call   c001dede <lockScheduler()>
c001ebd2:	83 ec 0c             	sub    esp,0xc
c001ebd5:	89 1d 00 1d 03 c0    	mov    DWORD PTR ds:0xc0031d00,ebx
c001ebdb:	6a 02                	push   0x2
c001ebdd:	c6 05 04 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d04,0x1
c001ebe4:	e8 49 f7 ff ff       	call   c001e332 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ebe9:	83 c4 18             	add    esp,0x18
c001ebec:	5b                   	pop    ebx
c001ebed:	eb 8e                	jmp    c001eb7d <Vm::mainloop2()>

c001ebef <Vm::initialise8086()>:
c001ebef:	83 ec 0c             	sub    esp,0xc
c001ebf2:	68 80 00 00 00       	push   0x80
c001ebf7:	6a 00                	push   0x0
c001ebf9:	68 b8 eb 01 c0       	push   0xc001ebb8
c001ebfe:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c001ec04:	e8 07 f4 ff ff       	call   c001e010 <Process::createThread(void (*)(void*), void*, int)>
c001ec09:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ec10:	a3 08 1d 03 c0       	mov    ds:0xc0031d08,eax
c001ec15:	68 00 01 00 00       	push   0x100
c001ec1a:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001ec1f:	6a 00                	push   0x0
c001ec21:	6a 00                	push   0x0
c001ec23:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ec29:	e8 e4 3a ff ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ec2e:	83 c4 2c             	add    esp,0x2c
c001ec31:	c3                   	ret    

c001ec32 <Vm::finish8086()>:
c001ec32:	53                   	push   ebx
c001ec33:	83 ec 08             	sub    esp,0x8
c001ec36:	e8 a3 f2 ff ff       	call   c001dede <lockScheduler()>
c001ec3b:	80 3d 04 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d04,0x0
c001ec42:	75 0c                	jne    c001ec50 <Vm::finish8086()+0x1e>
c001ec44:	e8 d1 f5 ff ff       	call   c001e21a <schedule()>
c001ec49:	e8 92 f2 ff ff       	call   c001dee0 <unlockScheduler()>
c001ec4e:	eb e6                	jmp    c001ec36 <Vm::finish8086()+0x4>
c001ec50:	83 ec 0c             	sub    esp,0xc
c001ec53:	8b 1d 00 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d00
c001ec59:	ff 35 08 1d 03 c0    	push   DWORD PTR ds:0xc0031d08
c001ec5f:	c6 05 04 1d 03 c0 00 	mov    BYTE PTR ds:0xc0031d04,0x0
c001ec66:	e8 8b f8 ff ff       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c001ec6b:	e8 70 f2 ff ff       	call   c001dee0 <unlockScheduler()>
c001ec70:	89 d8                	mov    eax,ebx
c001ec72:	83 c4 18             	add    esp,0x18
c001ec75:	5b                   	pop    ebx
c001ec76:	c3                   	ret    

c001ec77 <Vm::getOutput8086(unsigned char*)>:
c001ec77:	83 ec 10             	sub    esp,0x10
c001ec7a:	ff 35 0c 1d 03 c0    	push   DWORD PTR ds:0xc0031d0c
c001ec80:	68 20 1d 03 c0       	push   0xc0031d20
c001ec85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec89:	e8 b6 1a fe ff       	call   c0000744 <memcpy>
c001ec8e:	a1 0c 1d 03 c0       	mov    eax,ds:0xc0031d0c
c001ec93:	c7 05 0c 1d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031d0c,0x0
c001ec9d:	83 c4 1c             	add    esp,0x1c
c001eca0:	c3                   	ret    

c001eca1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eca1:	55                   	push   ebp
c001eca2:	57                   	push   edi
c001eca3:	56                   	push   esi
c001eca4:	53                   	push   ebx
c001eca5:	83 ec 2c             	sub    esp,0x2c
c001eca8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ecac:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ecb0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ecb4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ecb8:	e8 21 f2 ff ff       	call   c001dede <lockScheduler()>
c001ecbd:	a0 05 1d 03 c0       	mov    al,ds:0xc0031d05
c001ecc2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ecc6:	84 c0                	test   al,al
c001ecc8:	75 0c                	jne    c001ecd6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ecca:	e8 4b f5 ff ff       	call   c001e21a <schedule()>
c001eccf:	e8 0c f2 ff ff       	call   c001dee0 <unlockScheduler()>
c001ecd4:	eb e2                	jmp    c001ecb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ecd6:	a1 08 1d 03 c0       	mov    eax,ds:0xc0031d08
c001ecdb:	c7 05 0c 1d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031d0c,0x0
c001ece5:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ece9:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eced:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ecf1:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecf5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecf9:	50                   	push   eax
c001ecfa:	6a 20                	push   0x20
c001ecfc:	6a 00                	push   0x0
c001ecfe:	68 20 1d 03 c0       	push   0xc0031d20
c001ed03:	e8 70 1a fe ff       	call   c0000778 <memset>
c001ed08:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ed0f:	e8 e8 0b ff ff       	call   c000f8fc <malloc>
c001ed14:	83 c4 0c             	add    esp,0xc
c001ed17:	89 c7                	mov    edi,eax
c001ed19:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c001ed1f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ed23:	50                   	push   eax
c001ed24:	e8 37 48 ff ff       	call   c0013560 <File::File(char const*, Process*)>
c001ed29:	83 c4 10             	add    esp,0x10
c001ed2c:	85 ff                	test   edi,edi
c001ed2e:	75 0a                	jne    c001ed3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ed30:	83 ec 0c             	sub    esp,0xc
c001ed33:	68 0b c9 02 c0       	push   0xc002c90b
c001ed38:	eb 27                	jmp    c001ed61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ed3a:	50                   	push   eax
c001ed3b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ed3f:	50                   	push   eax
c001ed40:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ed44:	50                   	push   eax
c001ed45:	57                   	push   edi
c001ed46:	e8 25 4b ff ff       	call   c0013870 <File::stat(unsigned long long*, bool*)>
c001ed4b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed50:	83 c4 10             	add    esp,0x10
c001ed53:	89 e8                	mov    eax,ebp
c001ed55:	84 c0                	test   al,al
c001ed57:	74 19                	je     c001ed72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed59:	83 ec 0c             	sub    esp,0xc
c001ed5c:	68 1f c9 02 c0       	push   0xc002c91f
c001ed61:	e8 53 b9 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001ed66:	31 ed                	xor    ebp,ebp
c001ed68:	e8 73 f1 ff ff       	call   c001dee0 <unlockScheduler()>
c001ed6d:	83 c4 10             	add    esp,0x10
c001ed70:	eb 75                	jmp    c001ede7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed72:	50                   	push   eax
c001ed73:	50                   	push   eax
c001ed74:	6a 01                	push   0x1
c001ed76:	57                   	push   edi
c001ed77:	e8 48 48 ff ff       	call   c00135c4 <File::open(FileOpenMode)>
c001ed7c:	83 c4 10             	add    esp,0x10
c001ed7f:	85 c0                	test   eax,eax
c001ed81:	74 17                	je     c001ed9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed83:	83 ec 0c             	sub    esp,0xc
c001ed86:	68 38 c9 02 c0       	push   0xc002c938
c001ed8b:	e8 29 b9 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001ed90:	e8 4b f1 ff ff       	call   c001dee0 <unlockScheduler()>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	eb 4d                	jmp    c001ede7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed9a:	0f b7 f6             	movzx  esi,si
c001ed9d:	50                   	push   eax
c001ed9e:	0f b7 db             	movzx  ebx,bx
c001eda1:	50                   	push   eax
c001eda2:	56                   	push   esi
c001eda3:	53                   	push   ebx
c001eda4:	e8 b7 fd ff ff       	call   c001eb60 <Vm::realToLinear(unsigned short, unsigned short)>
c001eda9:	5a                   	pop    edx
c001edaa:	8b 17                	mov    edx,DWORD PTR [edi]
c001edac:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001edb0:	51                   	push   ecx
c001edb1:	50                   	push   eax
c001edb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edba:	57                   	push   edi
c001edbb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001edbe:	83 c4 14             	add    esp,0x14
c001edc1:	57                   	push   edi
c001edc2:	e8 5b 48 ff ff       	call   c0013622 <File::close()>
c001edc7:	c6 05 05 1d 03 c0 00 	mov    BYTE PTR ds:0xc0031d05,0x0
c001edce:	e8 0d f1 ff ff       	call   c001dee0 <unlockScheduler()>
c001edd3:	59                   	pop    ecx
c001edd4:	ff 35 08 1d 03 c0    	push   DWORD PTR ds:0xc0031d08
c001edda:	e8 17 f7 ff ff       	call   c001e4f6 <unblockTask(ThreadControlBlock*)>
c001eddf:	83 c4 10             	add    esp,0x10
c001ede2:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ede7:	83 c4 2c             	add    esp,0x2c
c001edea:	89 e8                	mov    eax,ebp
c001edec:	5b                   	pop    ebx
c001eded:	5e                   	pop    esi
c001edee:	5f                   	pop    edi
c001edef:	5d                   	pop    ebp
c001edf0:	c3                   	ret    

c001edf1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001edf1:	57                   	push   edi
c001edf2:	56                   	push   esi
c001edf3:	53                   	push   ebx
c001edf4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edfc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee00:	83 e8 06             	sub    eax,0x6
c001ee03:	0f b7 c0             	movzx  eax,ax
c001ee06:	50                   	push   eax
c001ee07:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ee0c:	50                   	push   eax
c001ee0d:	e8 4e fd ff ff       	call   c001eb60 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee12:	5a                   	pop    edx
c001ee13:	5e                   	pop    esi
c001ee14:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ee17:	8d 56 fa             	lea    edx,[esi-0x6]
c001ee1a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ee20:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ee23:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ee26:	83 c2 02             	add    edx,0x2
c001ee29:	66 89 10             	mov    WORD PTR [eax],dx
c001ee2c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ee2f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ee33:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ee36:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ee3a:	89 d6                	mov    esi,edx
c001ee3c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ee42:	66 81 e6 ff fd       	and    si,0xfdff
c001ee47:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee4b:	74 07                	je     c001ee54 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee4d:	89 d6                	mov    esi,edx
c001ee4f:	66 81 ce 00 02       	or     si,0x200
c001ee54:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee5d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee61:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee69:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee6c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee74:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee77:	5b                   	pop    ebx
c001ee78:	5e                   	pop    esi
c001ee79:	5f                   	pop    edi
c001ee7a:	c3                   	ret    

c001ee7b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee7b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee80:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee85:	c1 e0 04             	shl    eax,0x4
c001ee88:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee8b:	c3                   	ret    

c001ee8c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee8c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee91:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee96:	c1 e0 04             	shl    eax,0x4
c001ee99:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee9d:	c3                   	ret    

c001ee9e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee9e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eea3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eea8:	c1 e0 04             	shl    eax,0x4
c001eeab:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001eeae:	c3                   	ret    

c001eeaf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001eeaf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eeb4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeb9:	c1 e0 04             	shl    eax,0x4
c001eebc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eec0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eec3:	c3                   	ret    

c001eec4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eec4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eec9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eece:	c1 e0 04             	shl    eax,0x4
c001eed1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eed5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eed9:	c3                   	ret    

c001eeda <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eeda:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eedf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eee4:	c1 e0 04             	shl    eax,0x4
c001eee7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eeeb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eeee:	c3                   	ret    

c001eeef <Vm::faultHandler(regs*)>:
c001eeef:	55                   	push   ebp
c001eef0:	57                   	push   edi
c001eef1:	56                   	push   esi
c001eef2:	53                   	push   ebx
c001eef3:	83 ec 1c             	sub    esp,0x1c
c001eef6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eefa:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eefd:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ef00:	0f b7 c1             	movzx  eax,cx
c001ef03:	50                   	push   eax
c001ef04:	0f b7 c3             	movzx  eax,bx
c001ef07:	c1 e3 04             	shl    ebx,0x4
c001ef0a:	50                   	push   eax
c001ef0b:	e8 50 fc ff ff       	call   c001eb60 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef10:	5a                   	pop    edx
c001ef11:	89 c5                	mov    ebp,eax
c001ef13:	5e                   	pop    esi
c001ef14:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ef18:	50                   	push   eax
c001ef19:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ef1d:	50                   	push   eax
c001ef1e:	e8 3d fc ff ff       	call   c001eb60 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef23:	01 cb                	add    ebx,ecx
c001ef25:	89 c6                	mov    esi,eax
c001ef27:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ef2b:	50                   	push   eax
c001ef2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef30:	50                   	push   eax
c001ef31:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef35:	50                   	push   eax
c001ef36:	55                   	push   ebp
c001ef37:	53                   	push   ebx
c001ef38:	b3 06                	mov    bl,0x6
c001ef3a:	68 51 c9 02 c0       	push   0xc002c951
c001ef3f:	e8 c3 40 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001ef44:	83 c4 20             	add    esp,0x20
c001ef47:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef4c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef51:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef55:	3c 9d                	cmp    al,0x9d
c001ef57:	0f 84 d7 02 00 00    	je     c001f234 <Vm::faultHandler(regs*)+0x345>
c001ef5d:	0f 87 a3 00 00 00    	ja     c001f006 <Vm::faultHandler(regs*)+0x117>
c001ef63:	3c 66                	cmp    al,0x66
c001ef65:	0f 84 15 02 00 00    	je     c001f180 <Vm::faultHandler(regs*)+0x291>
c001ef6b:	77 5f                	ja     c001efcc <Vm::faultHandler(regs*)+0xdd>
c001ef6d:	3c 36                	cmp    al,0x36
c001ef6f:	0f 84 f1 01 00 00    	je     c001f166 <Vm::faultHandler(regs*)+0x277>
c001ef75:	77 28                	ja     c001ef9f <Vm::faultHandler(regs*)+0xb0>
c001ef77:	3c 26                	cmp    al,0x26
c001ef79:	0f 84 99 01 00 00    	je     c001f118 <Vm::faultHandler(regs*)+0x229>
c001ef7f:	3c 2e                	cmp    al,0x2e
c001ef81:	0f 85 3b 07 00 00    	jne    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001ef87:	83 ec 0c             	sub    esp,0xc
c001ef8a:	31 db                	xor    ebx,ebx
c001ef8c:	68 66 c9 02 c0       	push   0xc002c966
c001ef91:	e8 71 40 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001ef96:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef99:	83 c4 10             	add    esp,0x10
c001ef9c:	45                   	inc    ebp
c001ef9d:	eb b2                	jmp    c001ef51 <Vm::faultHandler(regs*)+0x62>
c001ef9f:	3c 64                	cmp    al,0x64
c001efa1:	0f 84 8b 01 00 00    	je     c001f132 <Vm::faultHandler(regs*)+0x243>
c001efa7:	0f 87 9f 01 00 00    	ja     c001f14c <Vm::faultHandler(regs*)+0x25d>
c001efad:	3c 3e                	cmp    al,0x3e
c001efaf:	0f 85 0d 07 00 00    	jne    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001efb5:	83 ec 0c             	sub    esp,0xc
c001efb8:	b3 01                	mov    bl,0x1
c001efba:	68 6a c9 02 c0       	push   0xc002c96a
c001efbf:	e8 43 40 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001efc4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efc7:	83 c4 10             	add    esp,0x10
c001efca:	eb d0                	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001efcc:	3c 6d                	cmp    al,0x6d
c001efce:	0f 84 af 03 00 00    	je     c001f383 <Vm::faultHandler(regs*)+0x494>
c001efd4:	77 15                	ja     c001efeb <Vm::faultHandler(regs*)+0xfc>
c001efd6:	3c 67                	cmp    al,0x67
c001efd8:	0f 84 bf 01 00 00    	je     c001f19d <Vm::faultHandler(regs*)+0x2ae>
c001efde:	3c 6c                	cmp    al,0x6c
c001efe0:	0f 84 3f 03 00 00    	je     c001f325 <Vm::faultHandler(regs*)+0x436>
c001efe6:	e9 d7 06 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001efeb:	3c 6f                	cmp    al,0x6f
c001efed:	0f 84 a4 04 00 00    	je     c001f497 <Vm::faultHandler(regs*)+0x5a8>
c001eff3:	0f 82 11 04 00 00    	jb     c001f40a <Vm::faultHandler(regs*)+0x51b>
c001eff9:	3c 9c                	cmp    al,0x9c
c001effb:	0f 84 ba 01 00 00    	je     c001f1bb <Vm::faultHandler(regs*)+0x2cc>
c001f001:	e9 bc 06 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001f006:	3c ec                	cmp    al,0xec
c001f008:	0f 84 24 06 00 00    	je     c001f632 <Vm::faultHandler(regs*)+0x743>
c001f00e:	0f 87 93 00 00 00    	ja     c001f0a7 <Vm::faultHandler(regs*)+0x1b8>
c001f014:	3c e4                	cmp    al,0xe4
c001f016:	0f 84 5c 05 00 00    	je     c001f578 <Vm::faultHandler(regs*)+0x689>
c001f01c:	77 6a                	ja     c001f088 <Vm::faultHandler(regs*)+0x199>
c001f01e:	3c cd                	cmp    al,0xcd
c001f020:	0f 84 7e 02 00 00    	je     c001f2a4 <Vm::faultHandler(regs*)+0x3b5>
c001f026:	3c cf                	cmp    al,0xcf
c001f028:	0f 85 94 06 00 00    	jne    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	68 ae c9 02 c0       	push   0xc002c9ae
c001f036:	e8 cc 3f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f03b:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f03e:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f041:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f045:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f048:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f04c:	0d 00 02 02 00       	or     eax,0x20200
c001f051:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f054:	56                   	push   esi
c001f055:	53                   	push   ebx
c001f056:	52                   	push   edx
c001f057:	68 b4 c9 02 c0       	push   0xc002c9b4
c001f05c:	e8 a6 3f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f061:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f065:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f06b:	66 c1 e8 09          	shr    ax,0x9
c001f06f:	83 e0 01             	and    eax,0x1
c001f072:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f075:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f078:	83 c0 06             	add    eax,0x6
c001f07b:	25 ff ff 00 00       	and    eax,0xffff
c001f080:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f083:	e9 95 02 00 00       	jmp    c001f31d <Vm::faultHandler(regs*)+0x42e>
c001f088:	3c e6                	cmp    al,0xe6
c001f08a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f08e:	0f 84 4e 05 00 00    	je     c001f5e2 <Vm::faultHandler(regs*)+0x6f3>
c001f094:	0f 82 0a 05 00 00    	jb     c001f5a4 <Vm::faultHandler(regs*)+0x6b5>
c001f09a:	3c e7                	cmp    al,0xe7
c001f09c:	0f 84 69 05 00 00    	je     c001f60b <Vm::faultHandler(regs*)+0x71c>
c001f0a2:	e9 1b 06 00 00       	jmp    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001f0a7:	3c ef                	cmp    al,0xef
c001f0a9:	0f 84 e6 05 00 00    	je     c001f695 <Vm::faultHandler(regs*)+0x7a6>
c001f0af:	77 37                	ja     c001f0e8 <Vm::faultHandler(regs*)+0x1f9>
c001f0b1:	3c ed                	cmp    al,0xed
c001f0b3:	0f 84 a3 05 00 00    	je     c001f65c <Vm::faultHandler(regs*)+0x76d>
c001f0b9:	3c ee                	cmp    al,0xee
c001f0bb:	0f 85 01 06 00 00    	jne    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001f0c1:	52                   	push   edx
c001f0c2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0c5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f0c8:	68 4f ca 02 c0       	push   0xc002ca4f
c001f0cd:	e8 35 3f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f0d2:	59                   	pop    ecx
c001f0d3:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f0d7:	5b                   	pop    ebx
c001f0d8:	50                   	push   eax
c001f0d9:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0dd:	50                   	push   eax
c001f0de:	e8 2a fa ff ff       	call   c001eb0d <Vm::outbv(unsigned short, unsigned char)>
c001f0e3:	e9 a5 05 00 00       	jmp    c001f68d <Vm::faultHandler(regs*)+0x79e>
c001f0e8:	3c fa                	cmp    al,0xfa
c001f0ea:	0f 84 f7 01 00 00    	je     c001f2e7 <Vm::faultHandler(regs*)+0x3f8>
c001f0f0:	3c fb                	cmp    al,0xfb
c001f0f2:	0f 84 0a 02 00 00    	je     c001f302 <Vm::faultHandler(regs*)+0x413>
c001f0f8:	3c f3                	cmp    al,0xf3
c001f0fa:	0f 85 c2 05 00 00    	jne    c001f6c2 <Vm::faultHandler(regs*)+0x7d3>
c001f100:	83 ec 0c             	sub    esp,0xc
c001f103:	68 87 c9 02 c0       	push   0xc002c987
c001f108:	e8 fa 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f10d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f110:	83 c4 10             	add    esp,0x10
c001f113:	e9 84 fe ff ff       	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001f118:	83 ec 0c             	sub    esp,0xc
c001f11b:	b3 02                	mov    bl,0x2
c001f11d:	68 62 c9 02 c0       	push   0xc002c962
c001f122:	e8 e0 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f127:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12a:	83 c4 10             	add    esp,0x10
c001f12d:	e9 6a fe ff ff       	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001f132:	83 ec 0c             	sub    esp,0xc
c001f135:	b3 03                	mov    bl,0x3
c001f137:	68 6e c9 02 c0       	push   0xc002c96e
c001f13c:	e8 c6 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f141:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f144:	83 c4 10             	add    esp,0x10
c001f147:	e9 50 fe ff ff       	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001f14c:	83 ec 0c             	sub    esp,0xc
c001f14f:	b3 04                	mov    bl,0x4
c001f151:	68 72 c9 02 c0       	push   0xc002c972
c001f156:	e8 ac 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f15b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f15e:	83 c4 10             	add    esp,0x10
c001f161:	e9 36 fe ff ff       	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001f166:	83 ec 0c             	sub    esp,0xc
c001f169:	b3 05                	mov    bl,0x5
c001f16b:	68 76 c9 02 c0       	push   0xc002c976
c001f170:	e8 92 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f175:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f178:	83 c4 10             	add    esp,0x10
c001f17b:	e9 1c fe ff ff       	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001f180:	83 ec 0c             	sub    esp,0xc
c001f183:	68 7a c9 02 c0       	push   0xc002c97a
c001f188:	e8 7a 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f18d:	83 c4 10             	add    esp,0x10
c001f190:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f193:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f198:	e9 ff fd ff ff       	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001f19d:	50                   	push   eax
c001f19e:	50                   	push   eax
c001f19f:	6a 01                	push   0x1
c001f1a1:	68 7f c9 02 c0       	push   0xc002c97f
c001f1a6:	e8 5c 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f1ab:	83 c4 10             	add    esp,0x10
c001f1ae:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f1b1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f1b6:	e9 e1 fd ff ff       	jmp    c001ef9c <Vm::faultHandler(regs*)+0xad>
c001f1bb:	83 ec 0c             	sub    esp,0xc
c001f1be:	68 8d c9 02 c0       	push   0xc002c98d
c001f1c3:	e8 3f 3e ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f1c8:	83 c4 10             	add    esp,0x10
c001f1cb:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f1ce:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1d3:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f1d6:	74 2f                	je     c001f207 <Vm::faultHandler(regs*)+0x318>
c001f1d8:	83 ea 04             	sub    edx,0x4
c001f1db:	25 ff 0d 00 00       	and    eax,0xdff
c001f1e0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1e6:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1e9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1f2:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1f6:	0f 84 bf 04 00 00    	je     c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f1fc:	80 cc 02             	or     ah,0x2
c001f1ff:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f202:	e9 b4 04 00 00       	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f207:	83 ea 02             	sub    edx,0x2
c001f20a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f210:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f213:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f217:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f21d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f221:	74 05                	je     c001f228 <Vm::faultHandler(regs*)+0x339>
c001f223:	80 cc 02             	or     ah,0x2
c001f226:	eb 03                	jmp    c001f22b <Vm::faultHandler(regs*)+0x33c>
c001f228:	80 e4 fd             	and    ah,0xfd
c001f22b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f22f:	e9 87 04 00 00       	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f234:	83 ec 0c             	sub    esp,0xc
c001f237:	68 94 c9 02 c0       	push   0xc002c994
c001f23c:	e8 c6 3d ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f241:	83 c4 10             	add    esp,0x10
c001f244:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f249:	74 28                	je     c001f273 <Vm::faultHandler(regs*)+0x384>
c001f24b:	8b 06                	mov    eax,DWORD PTR [esi]
c001f24d:	25 ff 0d 00 00       	and    eax,0xdff
c001f252:	0d 00 02 02 00       	or     eax,0x20200
c001f257:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f25a:	8b 06                	mov    eax,DWORD PTR [esi]
c001f25c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f262:	c1 e8 09             	shr    eax,0x9
c001f265:	83 e0 01             	and    eax,0x1
c001f268:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f26b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f26e:	83 c0 04             	add    eax,0x4
c001f271:	eb 24                	jmp    c001f297 <Vm::faultHandler(regs*)+0x3a8>
c001f273:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f276:	0d 00 02 02 00       	or     eax,0x20200
c001f27b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f27e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f281:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f287:	66 c1 e8 09          	shr    ax,0x9
c001f28b:	83 e0 01             	and    eax,0x1
c001f28e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f291:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f294:	83 c0 02             	add    eax,0x2
c001f297:	25 ff ff 00 00       	and    eax,0xffff
c001f29c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f29f:	e9 17 04 00 00       	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f2a4:	53                   	push   ebx
c001f2a5:	53                   	push   ebx
c001f2a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2aa:	50                   	push   eax
c001f2ab:	68 9a c9 02 c0       	push   0xc002c99a
c001f2b0:	e8 52 3d ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f2b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2b9:	83 c4 10             	add    esp,0x10
c001f2bc:	3c ee                	cmp    al,0xee
c001f2be:	75 10                	jne    c001f2d0 <Vm::faultHandler(regs*)+0x3e1>
c001f2c0:	83 ec 0c             	sub    esp,0xc
c001f2c3:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f2c6:	e8 fa f8 ff ff       	call   c001ebc5 <Vm::mainloop3(unsigned long)>
c001f2cb:	e9 c0 03 00 00       	jmp    c001f690 <Vm::faultHandler(regs*)+0x7a1>
c001f2d0:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f2d4:	83 ec 0c             	sub    esp,0xc
c001f2d7:	53                   	push   ebx
c001f2d8:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f2dc:	53                   	push   ebx
c001f2dd:	55                   	push   ebp
c001f2de:	50                   	push   eax
c001f2df:	57                   	push   edi
c001f2e0:	e8 0c fb ff ff       	call   c001edf1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f2e5:	eb 36                	jmp    c001f31d <Vm::faultHandler(regs*)+0x42e>
c001f2e7:	83 ec 0c             	sub    esp,0xc
c001f2ea:	68 a4 c9 02 c0       	push   0xc002c9a4
c001f2ef:	e8 13 3d ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f2f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2f9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2fd:	e9 8b 03 00 00       	jmp    c001f68d <Vm::faultHandler(regs*)+0x79e>
c001f302:	83 ec 0c             	sub    esp,0xc
c001f305:	68 a9 c9 02 c0       	push   0xc002c9a9
c001f30a:	e8 f8 3c ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f30f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f314:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f318:	e9 70 03 00 00       	jmp    c001f68d <Vm::faultHandler(regs*)+0x79e>
c001f31d:	83 c4 20             	add    esp,0x20
c001f320:	e9 99 03 00 00       	jmp    c001f6be <Vm::faultHandler(regs*)+0x7cf>
c001f325:	83 ec 0c             	sub    esp,0xc
c001f328:	68 e7 c9 02 c0       	push   0xc002c9e7
c001f32d:	e8 d5 3c ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f332:	83 c4 10             	add    esp,0x10
c001f335:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f338:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f33d:	74 0d                	je     c001f34c <Vm::faultHandler(regs*)+0x45d>
c001f33f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f346:	0f 87 9e 01 00 00    	ja     c001f4ea <Vm::faultHandler(regs*)+0x5fb>
c001f34c:	83 ec 0c             	sub    esp,0xc
c001f34f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f353:	0f b7 db             	movzx  ebx,bx
c001f356:	50                   	push   eax
c001f357:	e8 9e f7 ff ff       	call   c001eafa <Vm::inbv(unsigned short)>
c001f35c:	83 c4 0c             	add    esp,0xc
c001f35f:	0f b6 c0             	movzx  eax,al
c001f362:	50                   	push   eax
c001f363:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f367:	50                   	push   eax
c001f368:	53                   	push   ebx
c001f369:	e8 41 fb ff ff       	call   c001eeaf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f36e:	83 c4 10             	add    esp,0x10
c001f371:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f374:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f378:	74 03                	je     c001f37d <Vm::faultHandler(regs*)+0x48e>
c001f37a:	48                   	dec    eax
c001f37b:	eb 01                	jmp    c001f37e <Vm::faultHandler(regs*)+0x48f>
c001f37d:	40                   	inc    eax
c001f37e:	0f b7 c0             	movzx  eax,ax
c001f381:	eb 7f                	jmp    c001f402 <Vm::faultHandler(regs*)+0x513>
c001f383:	83 ec 0c             	sub    esp,0xc
c001f386:	68 19 ca 02 c0       	push   0xc002ca19
c001f38b:	e8 77 3c ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f390:	83 c4 10             	add    esp,0x10
c001f393:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f396:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f39b:	74 0d                	je     c001f3aa <Vm::faultHandler(regs*)+0x4bb>
c001f39d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f3a4:	0f 87 40 01 00 00    	ja     c001f4ea <Vm::faultHandler(regs*)+0x5fb>
c001f3aa:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f3ad:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f3b1:	0f b7 db             	movzx  ebx,bx
c001f3b4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3b9:	74 20                	je     c001f3db <Vm::faultHandler(regs*)+0x4ec>
c001f3bb:	ed                   	in     eax,dx
c001f3bc:	51                   	push   ecx
c001f3bd:	50                   	push   eax
c001f3be:	56                   	push   esi
c001f3bf:	53                   	push   ebx
c001f3c0:	e8 15 fb ff ff       	call   c001eeda <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f3c5:	83 c4 10             	add    esp,0x10
c001f3c8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3cb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3cf:	74 05                	je     c001f3d6 <Vm::faultHandler(regs*)+0x4e7>
c001f3d1:	83 e8 04             	sub    eax,0x4
c001f3d4:	eb 27                	jmp    c001f3fd <Vm::faultHandler(regs*)+0x50e>
c001f3d6:	83 c0 04             	add    eax,0x4
c001f3d9:	eb 22                	jmp    c001f3fd <Vm::faultHandler(regs*)+0x50e>
c001f3db:	66 ed                	in     ax,dx
c001f3dd:	0f b7 c0             	movzx  eax,ax
c001f3e0:	52                   	push   edx
c001f3e1:	50                   	push   eax
c001f3e2:	56                   	push   esi
c001f3e3:	53                   	push   ebx
c001f3e4:	e8 db fa ff ff       	call   c001eec4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f3e9:	83 c4 10             	add    esp,0x10
c001f3ec:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3ef:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3f3:	74 05                	je     c001f3fa <Vm::faultHandler(regs*)+0x50b>
c001f3f5:	83 e8 02             	sub    eax,0x2
c001f3f8:	eb 03                	jmp    c001f3fd <Vm::faultHandler(regs*)+0x50e>
c001f3fa:	83 c0 02             	add    eax,0x2
c001f3fd:	25 ff ff 00 00       	and    eax,0xffff
c001f402:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f405:	e9 b1 02 00 00       	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f40a:	83 ec 0c             	sub    esp,0xc
c001f40d:	4b                   	dec    ebx
c001f40e:	68 1f ca 02 c0       	push   0xc002ca1f
c001f413:	e8 ef 3b ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f418:	83 c4 10             	add    esp,0x10
c001f41b:	80 fb 05             	cmp    bl,0x5
c001f41e:	77 0a                	ja     c001f42a <Vm::faultHandler(regs*)+0x53b>
c001f420:	0f b6 db             	movzx  ebx,bl
c001f423:	ff 24 9d 90 ca 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3570]
c001f42a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f42e:	eb 1b                	jmp    c001f44b <Vm::faultHandler(regs*)+0x55c>
c001f430:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f434:	eb 15                	jmp    c001f44b <Vm::faultHandler(regs*)+0x55c>
c001f436:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f43a:	eb 0f                	jmp    c001f44b <Vm::faultHandler(regs*)+0x55c>
c001f43c:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f440:	eb 09                	jmp    c001f44b <Vm::faultHandler(regs*)+0x55c>
c001f442:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f445:	eb 04                	jmp    c001f44b <Vm::faultHandler(regs*)+0x55c>
c001f447:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f44b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f450:	74 0d                	je     c001f45f <Vm::faultHandler(regs*)+0x570>
c001f452:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f459:	0f 87 8b 00 00 00    	ja     c001f4ea <Vm::faultHandler(regs*)+0x5fb>
c001f45f:	53                   	push   ebx
c001f460:	53                   	push   ebx
c001f461:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f465:	52                   	push   edx
c001f466:	50                   	push   eax
c001f467:	e8 0f fa ff ff       	call   c001ee7b <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f46c:	5e                   	pop    esi
c001f46d:	0f b6 c0             	movzx  eax,al
c001f470:	5d                   	pop    ebp
c001f471:	50                   	push   eax
c001f472:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f476:	50                   	push   eax
c001f477:	e8 91 f6 ff ff       	call   c001eb0d <Vm::outbv(unsigned short, unsigned char)>
c001f47c:	83 c4 10             	add    esp,0x10
c001f47f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f482:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f486:	74 03                	je     c001f48b <Vm::faultHandler(regs*)+0x59c>
c001f488:	48                   	dec    eax
c001f489:	eb 01                	jmp    c001f48c <Vm::faultHandler(regs*)+0x59d>
c001f48b:	40                   	inc    eax
c001f48c:	0f b7 c0             	movzx  eax,ax
c001f48f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f492:	e9 24 02 00 00       	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f497:	83 ec 0c             	sub    esp,0xc
c001f49a:	4b                   	dec    ebx
c001f49b:	68 1f ca 02 c0       	push   0xc002ca1f
c001f4a0:	e8 62 3b ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f4a5:	83 c4 10             	add    esp,0x10
c001f4a8:	80 fb 05             	cmp    bl,0x5
c001f4ab:	77 0a                	ja     c001f4b7 <Vm::faultHandler(regs*)+0x5c8>
c001f4ad:	0f b6 db             	movzx  ebx,bl
c001f4b0:	ff 24 9d a8 ca 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3558]
c001f4b7:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f4bb:	eb 1b                	jmp    c001f4d8 <Vm::faultHandler(regs*)+0x5e9>
c001f4bd:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f4c1:	eb 15                	jmp    c001f4d8 <Vm::faultHandler(regs*)+0x5e9>
c001f4c3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f4c7:	eb 0f                	jmp    c001f4d8 <Vm::faultHandler(regs*)+0x5e9>
c001f4c9:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f4cd:	eb 09                	jmp    c001f4d8 <Vm::faultHandler(regs*)+0x5e9>
c001f4cf:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f4d2:	eb 04                	jmp    c001f4d8 <Vm::faultHandler(regs*)+0x5e9>
c001f4d4:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4d8:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f4db:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f4e0:	74 39                	je     c001f51b <Vm::faultHandler(regs*)+0x62c>
c001f4e2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f4e8:	76 31                	jbe    c001f51b <Vm::faultHandler(regs*)+0x62c>
c001f4ea:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4ee:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4f2:	51                   	push   ecx
c001f4f3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4f7:	51                   	push   ecx
c001f4f8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4fc:	51                   	push   ecx
c001f4fd:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f501:	51                   	push   ecx
c001f502:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f506:	52                   	push   edx
c001f507:	50                   	push   eax
c001f508:	50                   	push   eax
c001f509:	68 ec c9 02 c0       	push   0xc002c9ec
c001f50e:	e8 f4 3a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f513:	83 c4 20             	add    esp,0x20
c001f516:	e9 fb 01 00 00       	jmp    c001f716 <Vm::faultHandler(regs*)+0x827>
c001f51b:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f51e:	0f b7 d3             	movzx  edx,bx
c001f521:	81 e6 00 04 00 00    	and    esi,0x400
c001f527:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f52a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f52f:	74 1d                	je     c001f54e <Vm::faultHandler(regs*)+0x65f>
c001f531:	51                   	push   ecx
c001f532:	51                   	push   ecx
c001f533:	52                   	push   edx
c001f534:	50                   	push   eax
c001f535:	e8 64 f9 ff ff       	call   c001ee9e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f53a:	83 c4 10             	add    esp,0x10
c001f53d:	89 ea                	mov    edx,ebp
c001f53f:	ef                   	out    dx,eax
c001f540:	85 f6                	test   esi,esi
c001f542:	74 05                	je     c001f549 <Vm::faultHandler(regs*)+0x65a>
c001f544:	83 eb 04             	sub    ebx,0x4
c001f547:	eb 21                	jmp    c001f56a <Vm::faultHandler(regs*)+0x67b>
c001f549:	83 c3 04             	add    ebx,0x4
c001f54c:	eb 1c                	jmp    c001f56a <Vm::faultHandler(regs*)+0x67b>
c001f54e:	51                   	push   ecx
c001f54f:	51                   	push   ecx
c001f550:	52                   	push   edx
c001f551:	50                   	push   eax
c001f552:	e8 35 f9 ff ff       	call   c001ee8c <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f557:	83 c4 10             	add    esp,0x10
c001f55a:	89 ea                	mov    edx,ebp
c001f55c:	66 ef                	out    dx,ax
c001f55e:	85 f6                	test   esi,esi
c001f560:	74 05                	je     c001f567 <Vm::faultHandler(regs*)+0x678>
c001f562:	83 eb 02             	sub    ebx,0x2
c001f565:	eb 03                	jmp    c001f56a <Vm::faultHandler(regs*)+0x67b>
c001f567:	83 c3 02             	add    ebx,0x2
c001f56a:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f570:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f573:	e9 43 01 00 00       	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f578:	53                   	push   ebx
c001f579:	53                   	push   ebx
c001f57a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f57e:	50                   	push   eax
c001f57f:	68 25 ca 02 c0       	push   0xc002ca25
c001f584:	e8 7e 3a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f589:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f590:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f594:	89 04 24             	mov    DWORD PTR [esp],eax
c001f597:	e8 5e f5 ff ff       	call   c001eafa <Vm::inbv(unsigned short)>
c001f59c:	0f b6 c0             	movzx  eax,al
c001f59f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5a2:	eb 5e                	jmp    c001f602 <Vm::faultHandler(regs*)+0x713>
c001f5a4:	51                   	push   ecx
c001f5a5:	51                   	push   ecx
c001f5a6:	53                   	push   ebx
c001f5a7:	68 2b ca 02 c0       	push   0xc002ca2b
c001f5ac:	e8 56 3a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f5b1:	83 c4 10             	add    esp,0x10
c001f5b4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5b9:	74 07                	je     c001f5c2 <Vm::faultHandler(regs*)+0x6d3>
c001f5bb:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5bf:	ed                   	in     eax,dx
c001f5c0:	eb 14                	jmp    c001f5d6 <Vm::faultHandler(regs*)+0x6e7>
c001f5c2:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f5c5:	66 31 db             	xor    bx,bx
c001f5c8:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f5cb:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5cf:	66 ed                	in     ax,dx
c001f5d1:	0f b7 c0             	movzx  eax,ax
c001f5d4:	09 d8                	or     eax,ebx
c001f5d6:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5d9:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5dd:	e9 dc 00 00 00       	jmp    c001f6be <Vm::faultHandler(regs*)+0x7cf>
c001f5e2:	50                   	push   eax
c001f5e3:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5e6:	53                   	push   ebx
c001f5e7:	68 31 ca 02 c0       	push   0xc002ca31
c001f5ec:	e8 16 3a ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f5f1:	58                   	pop    eax
c001f5f2:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5f6:	5a                   	pop    edx
c001f5f7:	50                   	push   eax
c001f5f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5fc:	50                   	push   eax
c001f5fd:	e8 0b f5 ff ff       	call   c001eb0d <Vm::outbv(unsigned short, unsigned char)>
c001f602:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f606:	e9 85 00 00 00       	jmp    c001f690 <Vm::faultHandler(regs*)+0x7a1>
c001f60b:	50                   	push   eax
c001f60c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f60f:	53                   	push   ebx
c001f610:	68 3a ca 02 c0       	push   0xc002ca3a
c001f615:	e8 ed 39 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f61a:	83 c4 10             	add    esp,0x10
c001f61d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f621:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f626:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f629:	74 03                	je     c001f62e <Vm::faultHandler(regs*)+0x73f>
c001f62b:	ef                   	out    dx,eax
c001f62c:	eb ab                	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x6ea>
c001f62e:	66 ef                	out    dx,ax
c001f630:	eb a7                	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x6ea>
c001f632:	55                   	push   ebp
c001f633:	55                   	push   ebp
c001f634:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f637:	68 43 ca 02 c0       	push   0xc002ca43
c001f63c:	e8 c6 39 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f641:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f648:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f64c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f64f:	e8 a6 f4 ff ff       	call   c001eafa <Vm::inbv(unsigned short)>
c001f654:	0f b6 c0             	movzx  eax,al
c001f657:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f65a:	eb 31                	jmp    c001f68d <Vm::faultHandler(regs*)+0x79e>
c001f65c:	56                   	push   esi
c001f65d:	56                   	push   esi
c001f65e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f661:	68 49 ca 02 c0       	push   0xc002ca49
c001f666:	e8 9c 39 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f66b:	83 c4 10             	add    esp,0x10
c001f66e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f671:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f676:	74 03                	je     c001f67b <Vm::faultHandler(regs*)+0x78c>
c001f678:	ed                   	in     eax,dx
c001f679:	eb 0d                	jmp    c001f688 <Vm::faultHandler(regs*)+0x799>
c001f67b:	66 ed                	in     ax,dx
c001f67d:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f680:	0f b7 c0             	movzx  eax,ax
c001f683:	66 31 d2             	xor    dx,dx
c001f686:	09 d0                	or     eax,edx
c001f688:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f68b:	eb 2e                	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f68d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f690:	83 c4 10             	add    esp,0x10
c001f693:	eb 29                	jmp    c001f6be <Vm::faultHandler(regs*)+0x7cf>
c001f695:	50                   	push   eax
c001f696:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f699:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f69c:	68 58 ca 02 c0       	push   0xc002ca58
c001f6a1:	e8 61 39 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f6a6:	83 c4 10             	add    esp,0x10
c001f6a9:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f6ac:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f6b1:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f6b4:	74 03                	je     c001f6b9 <Vm::faultHandler(regs*)+0x7ca>
c001f6b6:	ef                   	out    dx,eax
c001f6b7:	eb 02                	jmp    c001f6bb <Vm::faultHandler(regs*)+0x7cc>
c001f6b9:	66 ef                	out    dx,ax
c001f6bb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6be:	b0 01                	mov    al,0x1
c001f6c0:	eb 56                	jmp    c001f718 <Vm::faultHandler(regs*)+0x829>
c001f6c2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f6c6:	51                   	push   ecx
c001f6c7:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f6cb:	51                   	push   ecx
c001f6cc:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f6d0:	51                   	push   ecx
c001f6d1:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f6d5:	51                   	push   ecx
c001f6d6:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6da:	52                   	push   edx
c001f6db:	50                   	push   eax
c001f6dc:	50                   	push   eax
c001f6dd:	68 61 ca 02 c0       	push   0xc002ca61
c001f6e2:	e8 20 39 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c001f6e7:	83 c4 20             	add    esp,0x20
c001f6ea:	83 ec 0c             	sub    esp,0xc
c001f6ed:	6a 60                	push   0x60
c001f6ef:	e8 06 f4 ff ff       	call   c001eafa <Vm::inbv(unsigned short)>
c001f6f4:	83 c4 10             	add    esp,0x10
c001f6f7:	3c 1c                	cmp    al,0x1c
c001f6f9:	74 04                	je     c001f6ff <Vm::faultHandler(regs*)+0x810>
c001f6fb:	3c 5a                	cmp    al,0x5a
c001f6fd:	75 eb                	jne    c001f6ea <Vm::faultHandler(regs*)+0x7fb>
c001f6ff:	3c 1c                	cmp    al,0x1c
c001f701:	74 04                	je     c001f707 <Vm::faultHandler(regs*)+0x818>
c001f703:	3c 5a                	cmp    al,0x5a
c001f705:	75 0f                	jne    c001f716 <Vm::faultHandler(regs*)+0x827>
c001f707:	83 ec 0c             	sub    esp,0xc
c001f70a:	6a 60                	push   0x60
c001f70c:	e8 e9 f3 ff ff       	call   c001eafa <Vm::inbv(unsigned short)>
c001f711:	83 c4 10             	add    esp,0x10
c001f714:	eb e9                	jmp    c001f6ff <Vm::faultHandler(regs*)+0x810>
c001f716:	31 c0                	xor    eax,eax
c001f718:	83 c4 1c             	add    esp,0x1c
c001f71b:	5b                   	pop    ebx
c001f71c:	5e                   	pop    esi
c001f71d:	5f                   	pop    edi
c001f71e:	5d                   	pop    ebp
c001f71f:	c3                   	ret    

c001f720 <Vm::fpuInternalTo32(unsigned long long)>:
c001f720:	57                   	push   edi
c001f721:	56                   	push   esi
c001f722:	53                   	push   ebx
c001f723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72b:	89 d6                	mov    esi,edx
c001f72d:	89 d7                	mov    edi,edx
c001f72f:	89 c1                	mov    ecx,eax
c001f731:	c1 ef 14             	shr    edi,0x14
c001f734:	89 d3                	mov    ebx,edx
c001f736:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f73c:	31 d2                	xor    edx,edx
c001f73e:	89 f8                	mov    eax,edi
c001f740:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f746:	bf ff 00 00 00       	mov    edi,0xff
c001f74b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f750:	83 d2 ff             	adc    edx,0xffffffff
c001f753:	39 c7                	cmp    edi,eax
c001f755:	bf 00 00 00 00       	mov    edi,0x0
c001f75a:	19 d7                	sbb    edi,edx
c001f75c:	72 15                	jb     c001f773 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f75e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f762:	c1 e0 17             	shl    eax,0x17
c001f765:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f76b:	09 f1                	or     ecx,esi
c001f76d:	09 c1                	or     ecx,eax
c001f76f:	89 cf                	mov    edi,ecx
c001f771:	eb 02                	jmp    c001f775 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f773:	31 ff                	xor    edi,edi
c001f775:	89 f8                	mov    eax,edi
c001f777:	5b                   	pop    ebx
c001f778:	5e                   	pop    esi
c001f779:	5f                   	pop    edi
c001f77a:	c3                   	ret    

c001f77b <Vm::fpuInternalTo64(unsigned long long)>:
c001f77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f77f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f783:	c3                   	ret    

c001f784 <Vm::fpu32ToInternal(unsigned int)>:
c001f784:	57                   	push   edi
c001f785:	31 ff                	xor    edi,edi
c001f787:	56                   	push   esi
c001f788:	53                   	push   ebx
c001f789:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f78d:	89 cb                	mov    ebx,ecx
c001f78f:	89 ce                	mov    esi,ecx
c001f791:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f797:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f79d:	c1 e9 17             	shr    ecx,0x17
c001f7a0:	89 f0                	mov    eax,esi
c001f7a2:	0f b6 d1             	movzx  edx,cl
c001f7a5:	81 c2 80 03 00 00    	add    edx,0x380
c001f7ab:	89 d1                	mov    ecx,edx
c001f7ad:	89 fa                	mov    edx,edi
c001f7af:	c1 e1 14             	shl    ecx,0x14
c001f7b2:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7b6:	c1 e0 1d             	shl    eax,0x1d
c001f7b9:	89 d7                	mov    edi,edx
c001f7bb:	89 c6                	mov    esi,eax
c001f7bd:	89 ca                	mov    edx,ecx
c001f7bf:	89 f0                	mov    eax,esi
c001f7c1:	09 fa                	or     edx,edi
c001f7c3:	09 da                	or     edx,ebx
c001f7c5:	5b                   	pop    ebx
c001f7c6:	5e                   	pop    esi
c001f7c7:	5f                   	pop    edi
c001f7c8:	c3                   	ret    

c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>:
c001f7c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7d1:	c3                   	ret    

c001f7d2 <Vm::fpuFloatToLong(unsigned long long)>:
c001f7d2:	57                   	push   edi
c001f7d3:	31 c0                	xor    eax,eax
c001f7d5:	56                   	push   esi
c001f7d6:	31 d2                	xor    edx,edx
c001f7d8:	53                   	push   ebx
c001f7d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7e1:	89 d9                	mov    ecx,ebx
c001f7e3:	c1 e9 14             	shr    ecx,0x14
c001f7e6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7ec:	89 cf                	mov    edi,ecx
c001f7ee:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7f4:	78 33                	js     c001f829 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7f6:	89 d9                	mov    ecx,ebx
c001f7f8:	89 f0                	mov    eax,esi
c001f7fa:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f800:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f806:	89 ca                	mov    edx,ecx
c001f808:	b9 34 00 00 00       	mov    ecx,0x34
c001f80d:	29 f9                	sub    ecx,edi
c001f80f:	0f ad d0             	shrd   eax,edx,cl
c001f812:	d3 fa                	sar    edx,cl
c001f814:	f6 c1 20             	test   cl,0x20
c001f817:	74 05                	je     c001f81e <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f819:	89 d0                	mov    eax,edx
c001f81b:	c1 fa 1f             	sar    edx,0x1f
c001f81e:	85 db                	test   ebx,ebx
c001f820:	79 07                	jns    c001f829 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f822:	f7 d8                	neg    eax
c001f824:	83 d2 00             	adc    edx,0x0
c001f827:	f7 da                	neg    edx
c001f829:	5b                   	pop    ebx
c001f82a:	5e                   	pop    esi
c001f82b:	5f                   	pop    edi
c001f82c:	c3                   	ret    

c001f82d <Vm::fpuULongToFloat(unsigned long long)>:
c001f82d:	57                   	push   edi
c001f82e:	31 c9                	xor    ecx,ecx
c001f830:	56                   	push   esi
c001f831:	53                   	push   ebx
c001f832:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f836:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f83a:	0f ba e7 14          	bt     edi,0x14
c001f83e:	72 07                	jb     c001f847 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f840:	01 f6                	add    esi,esi
c001f842:	11 ff                	adc    edi,edi
c001f844:	41                   	inc    ecx
c001f845:	eb f3                	jmp    c001f83a <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f847:	89 fa                	mov    edx,edi
c001f849:	89 f0                	mov    eax,esi
c001f84b:	bb 33 04 00 00       	mov    ebx,0x433
c001f850:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f856:	29 cb                	sub    ebx,ecx
c001f858:	89 d9                	mov    ecx,ebx
c001f85a:	5b                   	pop    ebx
c001f85b:	c1 e1 14             	shl    ecx,0x14
c001f85e:	5e                   	pop    esi
c001f85f:	09 ca                	or     edx,ecx
c001f861:	5f                   	pop    edi
c001f862:	c3                   	ret    

c001f863 <Vm::fpuLongToFloat(long long)>:
c001f863:	56                   	push   esi
c001f864:	31 c0                	xor    eax,eax
c001f866:	53                   	push   ebx
c001f867:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f86b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f86f:	39 c8                	cmp    eax,ecx
c001f871:	19 d8                	sbb    eax,ebx
c001f873:	7d 04                	jge    c001f879 <Vm::fpuLongToFloat(long long)+0x16>
c001f875:	31 f6                	xor    esi,esi
c001f877:	eb 0c                	jmp    c001f885 <Vm::fpuLongToFloat(long long)+0x22>
c001f879:	f7 d9                	neg    ecx
c001f87b:	be 01 00 00 00       	mov    esi,0x1
c001f880:	83 d3 00             	adc    ebx,0x0
c001f883:	f7 db                	neg    ebx
c001f885:	31 c0                	xor    eax,eax
c001f887:	0f ba e3 14          	bt     ebx,0x14
c001f88b:	72 07                	jb     c001f894 <Vm::fpuLongToFloat(long long)+0x31>
c001f88d:	01 c9                	add    ecx,ecx
c001f88f:	11 db                	adc    ebx,ebx
c001f891:	40                   	inc    eax
c001f892:	eb f3                	jmp    c001f887 <Vm::fpuLongToFloat(long long)+0x24>
c001f894:	ba 33 04 00 00       	mov    edx,0x433
c001f899:	29 c2                	sub    edx,eax
c001f89b:	89 c8                	mov    eax,ecx
c001f89d:	c1 e2 14             	shl    edx,0x14
c001f8a0:	89 d9                	mov    ecx,ebx
c001f8a2:	89 f3                	mov    ebx,esi
c001f8a4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8aa:	09 ca                	or     edx,ecx
c001f8ac:	84 db                	test   bl,bl
c001f8ae:	74 06                	je     c001f8b6 <Vm::fpuLongToFloat(long long)+0x53>
c001f8b0:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8b6:	5b                   	pop    ebx
c001f8b7:	5e                   	pop    esi
c001f8b8:	c3                   	ret    

c001f8b9 <Vm::fpuGet0()>:
c001f8b9:	31 c0                	xor    eax,eax
c001f8bb:	31 d2                	xor    edx,edx
c001f8bd:	c3                   	ret    

c001f8be <Vm::fpuGet1()>:
c001f8be:	b8 01 00 00 00       	mov    eax,0x1
c001f8c3:	31 d2                	xor    edx,edx
c001f8c5:	c3                   	ret    

c001f8c6 <Vm::fpuGetPi()>:
c001f8c6:	b8 03 00 00 00       	mov    eax,0x3
c001f8cb:	31 d2                	xor    edx,edx
c001f8cd:	c3                   	ret    

c001f8ce <Vm::fpuGetLog2E()>:
c001f8ce:	83 ec 18             	sub    esp,0x18
c001f8d1:	68 c0 ca 02 c0       	push   0xc002cac0
c001f8d6:	e8 de ad ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001f8db:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8e0:	31 d2                	xor    edx,edx
c001f8e2:	83 c4 1c             	add    esp,0x1c
c001f8e5:	c3                   	ret    

c001f8e6 <Vm::fpuGetLogE2()>:
c001f8e6:	83 ec 18             	sub    esp,0x18
c001f8e9:	68 cc ca 02 c0       	push   0xc002cacc
c001f8ee:	e8 c6 ad ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001f8f3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8f8:	31 d2                	xor    edx,edx
c001f8fa:	83 c4 1c             	add    esp,0x1c
c001f8fd:	c3                   	ret    

c001f8fe <Vm::fpuGetLog210()>:
c001f8fe:	83 ec 18             	sub    esp,0x18
c001f901:	68 d8 ca 02 c0       	push   0xc002cad8
c001f906:	e8 ae ad ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001f90b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f910:	31 d2                	xor    edx,edx
c001f912:	83 c4 1c             	add    esp,0x1c
c001f915:	c3                   	ret    

c001f916 <Vm::fpuGetLog102()>:
c001f916:	83 ec 18             	sub    esp,0x18
c001f919:	68 e5 ca 02 c0       	push   0xc002cae5
c001f91e:	e8 96 ad ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001f923:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f928:	31 d2                	xor    edx,edx
c001f92a:	83 c4 1c             	add    esp,0x1c
c001f92d:	c3                   	ret    

c001f92e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f92e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f932:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f93a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f93e:	0f 92 c0             	setb   al
c001f941:	c3                   	ret    

c001f942 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f942:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f94e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f952:	09 c2                	or     edx,eax
c001f954:	0f 94 c0             	sete   al
c001f957:	c3                   	ret    

c001f958 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f958:	57                   	push   edi
c001f959:	56                   	push   esi
c001f95a:	53                   	push   ebx
c001f95b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f95f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f963:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f967:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f96b:	57                   	push   edi
c001f96c:	56                   	push   esi
c001f96d:	53                   	push   ebx
c001f96e:	51                   	push   ecx
c001f96f:	e8 ce ff ff ff       	call   c001f942 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f974:	83 c4 10             	add    esp,0x10
c001f977:	88 c2                	mov    dl,al
c001f979:	31 c0                	xor    eax,eax
c001f97b:	84 d2                	test   dl,dl
c001f97d:	75 0c                	jne    c001f98b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f97f:	57                   	push   edi
c001f980:	56                   	push   esi
c001f981:	53                   	push   ebx
c001f982:	51                   	push   ecx
c001f983:	e8 a6 ff ff ff       	call   c001f92e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f988:	83 c4 10             	add    esp,0x10
c001f98b:	83 e0 01             	and    eax,0x1
c001f98e:	5b                   	pop    ebx
c001f98f:	88 c1                	mov    cl,al
c001f991:	83 e2 01             	and    edx,0x1
c001f994:	a0 41 1d 03 c0       	mov    al,ds:0xc0031d41
c001f999:	c1 e2 06             	shl    edx,0x6
c001f99c:	83 e0 ba             	and    eax,0xffffffba
c001f99f:	5e                   	pop    esi
c001f9a0:	09 c8                	or     eax,ecx
c001f9a2:	5f                   	pop    edi
c001f9a3:	09 d0                	or     eax,edx
c001f9a5:	a2 41 1d 03 c0       	mov    ds:0xc0031d41,al
c001f9aa:	c3                   	ret    

c001f9ab <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9b3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9b7:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9bb:	c3                   	ret    

c001f9bc <Vm::fpuAbs(unsigned long long)>:
c001f9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9c4:	c3                   	ret    

c001f9c5 <Vm::fpuChs(unsigned long long)>:
c001f9c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9cd:	f7 d8                	neg    eax
c001f9cf:	83 d2 00             	adc    edx,0x0
c001f9d2:	f7 da                	neg    edx
c001f9d4:	c3                   	ret    

c001f9d5 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9d5:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9d9:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9de:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9e2:	eb c7                	jmp    c001f9ab <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9e4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9e4:	53                   	push   ebx
c001f9e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9f5:	0f af ca             	imul   ecx,edx
c001f9f8:	0f af d8             	imul   ebx,eax
c001f9fb:	f7 e2                	mul    edx
c001f9fd:	01 d9                	add    ecx,ebx
c001f9ff:	5b                   	pop    ebx
c001fa00:	01 ca                	add    edx,ecx
c001fa02:	c3                   	ret    

c001fa03 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa16:	e8 a1 70 00 00       	call   c0026abc <__udivdi3>
c001fa1b:	83 c4 1c             	add    esp,0x1c
c001fa1e:	c3                   	ret    

c001fa1f <Vm::fpuSquare(unsigned long long)>:
c001fa1f:	50                   	push   eax
c001fa20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa28:	52                   	push   edx
c001fa29:	50                   	push   eax
c001fa2a:	52                   	push   edx
c001fa2b:	50                   	push   eax
c001fa2c:	e8 b3 ff ff ff       	call   c001f9e4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa31:	83 c4 14             	add    esp,0x14
c001fa34:	c3                   	ret    

c001fa35 <Vm::fpuGetReg(int)>:
c001fa35:	83 ec 0c             	sub    esp,0xc
c001fa38:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa3d:	76 10                	jbe    c001fa4f <Vm::fpuGetReg(int)+0x1a>
c001fa3f:	83 ec 0c             	sub    esp,0xc
c001fa42:	68 f2 ca 02 c0       	push   0xc002caf2
c001fa47:	e8 6d ac ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001fa4c:	83 c4 10             	add    esp,0x10
c001fa4f:	a0 41 1d 03 c0       	mov    al,ds:0xc0031d41
c001fa54:	b9 08 00 00 00       	mov    ecx,0x8
c001fa59:	c0 e8 03             	shr    al,0x3
c001fa5c:	83 e0 07             	and    eax,0x7
c001fa5f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa63:	99                   	cdq    
c001fa64:	f7 f9                	idiv   ecx
c001fa66:	8b 04 d5 44 1d 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce2bc]
c001fa6d:	8b 14 d5 48 1d 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce2b8]
c001fa74:	83 c4 0c             	add    esp,0xc
c001fa77:	c3                   	ret    

c001fa78 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa78:	57                   	push   edi
c001fa79:	56                   	push   esi
c001fa7a:	52                   	push   edx
c001fa7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa7f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa83:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa88:	76 10                	jbe    c001fa9a <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa8a:	83 ec 0c             	sub    esp,0xc
c001fa8d:	68 05 cb 02 c0       	push   0xc002cb05
c001fa92:	e8 22 ac ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c001fa97:	83 c4 10             	add    esp,0x10
c001fa9a:	a0 41 1d 03 c0       	mov    al,ds:0xc0031d41
c001fa9f:	b9 08 00 00 00       	mov    ecx,0x8
c001faa4:	c0 e8 03             	shr    al,0x3
c001faa7:	83 e0 07             	and    eax,0x7
c001faaa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001faae:	99                   	cdq    
c001faaf:	f7 f9                	idiv   ecx
c001fab1:	89 34 d5 44 1d 03 c0 	mov    DWORD PTR [edx*8-0x3ffce2bc],esi
c001fab8:	89 3c d5 48 1d 03 c0 	mov    DWORD PTR [edx*8-0x3ffce2b8],edi
c001fabf:	58                   	pop    eax
c001fac0:	5e                   	pop    esi
c001fac1:	5f                   	pop    edi
c001fac2:	c3                   	ret    

c001fac3 <Vm::fpuPush(unsigned long long)>:
c001fac3:	a0 41 1d 03 c0       	mov    al,ds:0xc0031d41
c001fac8:	c0 e8 03             	shr    al,0x3
c001facb:	83 e0 07             	and    eax,0x7
c001face:	83 c0 07             	add    eax,0x7
c001fad1:	88 c2                	mov    dl,al
c001fad3:	83 e0 07             	and    eax,0x7
c001fad6:	83 e2 07             	and    edx,0x7
c001fad9:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fae0:	8a 15 41 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d41
c001fae6:	83 e2 c7             	and    edx,0xffffffc7
c001fae9:	09 ca                	or     edx,ecx
c001faeb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faef:	88 15 41 1d 03 c0    	mov    BYTE PTR ds:0xc0031d41,dl
c001faf5:	89 0c c5 48 1d 03 c0 	mov    DWORD PTR [eax*8-0x3ffce2b8],ecx
c001fafc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb00:	89 14 c5 44 1d 03 c0 	mov    DWORD PTR [eax*8-0x3ffce2bc],edx
c001fb07:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c001fb0c:	83 f8 08             	cmp    eax,0x8
c001fb0f:	75 08                	jne    c001fb19 <Vm::fpuPush(unsigned long long)+0x56>
c001fb11:	80 0d 40 1d 03 c0 40 	or     BYTE PTR ds:0xc0031d40,0x40
c001fb18:	c3                   	ret    
c001fb19:	40                   	inc    eax
c001fb1a:	a3 84 1d 03 c0       	mov    ds:0xc0031d84,eax
c001fb1f:	c3                   	ret    

c001fb20 <Vm::fpuPop()>:
c001fb20:	8a 0d 41 1d 03 c0    	mov    cl,BYTE PTR ds:0xc0031d41
c001fb26:	53                   	push   ebx
c001fb27:	c0 e9 03             	shr    cl,0x3
c001fb2a:	8a 1d 41 1d 03 c0    	mov    bl,BYTE PTR ds:0xc0031d41
c001fb30:	83 e1 07             	and    ecx,0x7
c001fb33:	83 e3 c7             	and    ebx,0xffffffc7
c001fb36:	8b 04 cd 44 1d 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce2bc]
c001fb3d:	8b 14 cd 48 1d 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce2b8]
c001fb44:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb4b:	83 e1 38             	and    ecx,0x38
c001fb4e:	09 d9                	or     ecx,ebx
c001fb50:	88 0d 41 1d 03 c0    	mov    BYTE PTR ds:0xc0031d41,cl
c001fb56:	8b 0d 84 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031d84
c001fb5c:	85 c9                	test   ecx,ecx
c001fb5e:	74 09                	je     c001fb69 <Vm::fpuPop()+0x49>
c001fb60:	49                   	dec    ecx
c001fb61:	89 0d 84 1d 03 c0    	mov    DWORD PTR ds:0xc0031d84,ecx
c001fb67:	eb 07                	jmp    c001fb70 <Vm::fpuPop()+0x50>
c001fb69:	80 0d 40 1d 03 c0 40 	or     BYTE PTR ds:0xc0031d40,0x40
c001fb70:	5b                   	pop    ebx
c001fb71:	c3                   	ret    

c001fb72 <Vm::x87Handler(regs*)>:
c001fb72:	55                   	push   ebp
c001fb73:	57                   	push   edi
c001fb74:	56                   	push   esi
c001fb75:	53                   	push   ebx
c001fb76:	83 ec 1c             	sub    esp,0x1c
c001fb79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb7d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb82:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb85:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb8d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb91:	50                   	push   eax
c001fb92:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb96:	50                   	push   eax
c001fb97:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb9b:	50                   	push   eax
c001fb9c:	53                   	push   ebx
c001fb9d:	e8 de a1 ff ff       	call   c0019d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fba2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	89 c6                	mov    esi,eax
c001fbaa:	80 fa d9             	cmp    dl,0xd9
c001fbad:	0f 85 52 01 00 00    	jne    c001fd05 <Vm::x87Handler(regs*)+0x193>
c001fbb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbb7:	8d 50 20             	lea    edx,[eax+0x20]
c001fbba:	80 fa 0e             	cmp    dl,0xe
c001fbbd:	0f 87 86 00 00 00    	ja     c001fc49 <Vm::x87Handler(regs*)+0xd7>
c001fbc3:	0f b6 d2             	movzx  edx,dl
c001fbc6:	ff 24 95 18 cb 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd34e8]
c001fbcd:	e8 e7 fc ff ff       	call   c001f8b9 <Vm::fpuGet0()>
c001fbd2:	eb 05                	jmp    c001fbd9 <Vm::x87Handler(regs*)+0x67>
c001fbd4:	e8 e5 fc ff ff       	call   c001f8be <Vm::fpuGet1()>
c001fbd9:	57                   	push   edi
c001fbda:	57                   	push   edi
c001fbdb:	52                   	push   edx
c001fbdc:	50                   	push   eax
c001fbdd:	e8 e1 fe ff ff       	call   c001fac3 <Vm::fpuPush(unsigned long long)>
c001fbe2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbe6:	83 c4 10             	add    esp,0x10
c001fbe9:	b0 01                	mov    al,0x1
c001fbeb:	e9 e3 09 00 00       	jmp    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c001fbf0:	83 ec 0c             	sub    esp,0xc
c001fbf3:	6a 00                	push   0x0
c001fbf5:	e8 3b fe ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fbfa:	59                   	pop    ecx
c001fbfb:	5e                   	pop    esi
c001fbfc:	52                   	push   edx
c001fbfd:	50                   	push   eax
c001fbfe:	e8 c2 fd ff ff       	call   c001f9c5 <Vm::fpuChs(unsigned long long)>
c001fc03:	eb 13                	jmp    c001fc18 <Vm::x87Handler(regs*)+0xa6>
c001fc05:	83 ec 0c             	sub    esp,0xc
c001fc08:	6a 00                	push   0x0
c001fc0a:	e8 26 fe ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fc0f:	5f                   	pop    edi
c001fc10:	5d                   	pop    ebp
c001fc11:	52                   	push   edx
c001fc12:	50                   	push   eax
c001fc13:	e8 a4 fd ff ff       	call   c001f9bc <Vm::fpuAbs(unsigned long long)>
c001fc18:	83 c4 0c             	add    esp,0xc
c001fc1b:	52                   	push   edx
c001fc1c:	50                   	push   eax
c001fc1d:	6a 00                	push   0x0
c001fc1f:	e8 54 fe ff ff       	call   c001fa78 <Vm::fpuSetReg(int, unsigned long long)>
c001fc24:	eb bc                	jmp    c001fbe2 <Vm::x87Handler(regs*)+0x70>
c001fc26:	e8 d3 fc ff ff       	call   c001f8fe <Vm::fpuGetLog210()>
c001fc2b:	eb ac                	jmp    c001fbd9 <Vm::x87Handler(regs*)+0x67>
c001fc2d:	e8 9c fc ff ff       	call   c001f8ce <Vm::fpuGetLog2E()>
c001fc32:	eb a5                	jmp    c001fbd9 <Vm::x87Handler(regs*)+0x67>
c001fc34:	e8 8d fc ff ff       	call   c001f8c6 <Vm::fpuGetPi()>
c001fc39:	eb 9e                	jmp    c001fbd9 <Vm::x87Handler(regs*)+0x67>
c001fc3b:	e8 d6 fc ff ff       	call   c001f916 <Vm::fpuGetLog102()>
c001fc40:	eb 97                	jmp    c001fbd9 <Vm::x87Handler(regs*)+0x67>
c001fc42:	e8 9f fc ff ff       	call   c001f8e6 <Vm::fpuGetLogE2()>
c001fc47:	eb 90                	jmp    c001fbd9 <Vm::x87Handler(regs*)+0x67>
c001fc49:	8d 50 40             	lea    edx,[eax+0x40]
c001fc4c:	80 fa 07             	cmp    dl,0x7
c001fc4f:	77 15                	ja     c001fc66 <Vm::x87Handler(regs*)+0xf4>
c001fc51:	83 ec 0c             	sub    esp,0xc
c001fc54:	2d c0 00 00 00       	sub    eax,0xc0
c001fc59:	50                   	push   eax
c001fc5a:	e8 d6 fd ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fc5f:	59                   	pop    ecx
c001fc60:	5e                   	pop    esi
c001fc61:	e9 75 ff ff ff       	jmp    c001fbdb <Vm::x87Handler(regs*)+0x69>
c001fc66:	8d 50 38             	lea    edx,[eax+0x38]
c001fc69:	80 fa 07             	cmp    dl,0x7
c001fc6c:	77 3c                	ja     c001fcaa <Vm::x87Handler(regs*)+0x138>
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	2d c8 00 00 00       	sub    eax,0xc8
c001fc76:	50                   	push   eax
c001fc77:	e8 b9 fd ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fc7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc83:	89 c6                	mov    esi,eax
c001fc85:	89 d7                	mov    edi,edx
c001fc87:	e8 a9 fd ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fc8c:	83 c4 0c             	add    esp,0xc
c001fc8f:	52                   	push   edx
c001fc90:	50                   	push   eax
c001fc91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc95:	2d c8 00 00 00       	sub    eax,0xc8
c001fc9a:	50                   	push   eax
c001fc9b:	e8 d8 fd ff ff       	call   c001fa78 <Vm::fpuSetReg(int, unsigned long long)>
c001fca0:	83 c4 0c             	add    esp,0xc
c001fca3:	57                   	push   edi
c001fca4:	56                   	push   esi
c001fca5:	e9 73 ff ff ff       	jmp    c001fc1d <Vm::x87Handler(regs*)+0xab>
c001fcaa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcae:	84 d2                	test   dl,dl
c001fcb0:	75 0f                	jne    c001fcc1 <Vm::x87Handler(regs*)+0x14f>
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	ff 36                	push   DWORD PTR [esi]
c001fcb7:	e8 c8 fa ff ff       	call   c001f784 <Vm::fpu32ToInternal(unsigned int)>
c001fcbc:	e9 bf 00 00 00       	jmp    c001fd80 <Vm::x87Handler(regs*)+0x20e>
c001fcc1:	80 fa 03             	cmp    dl,0x3
c001fcc4:	75 13                	jne    c001fcd9 <Vm::x87Handler(regs*)+0x167>
c001fcc6:	e8 55 fe ff ff       	call   c001fb20 <Vm::fpuPop()>
c001fccb:	55                   	push   ebp
c001fccc:	55                   	push   ebp
c001fccd:	52                   	push   edx
c001fcce:	50                   	push   eax
c001fccf:	e8 4c fa ff ff       	call   c001f720 <Vm::fpuInternalTo32(unsigned long long)>
c001fcd4:	e9 88 00 00 00       	jmp    c001fd61 <Vm::x87Handler(regs*)+0x1ef>
c001fcd9:	80 fa 05             	cmp    dl,0x5
c001fcdc:	75 0e                	jne    c001fcec <Vm::x87Handler(regs*)+0x17a>
c001fcde:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fce1:	66 a3 42 1d 03 c0    	mov    ds:0xc0031d42,ax
c001fce7:	e9 df 00 00 00       	jmp    c001fdcb <Vm::x87Handler(regs*)+0x259>
c001fcec:	31 c0                	xor    eax,eax
c001fcee:	80 fa 07             	cmp    dl,0x7
c001fcf1:	0f 85 dc 08 00 00    	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c001fcf7:	66 a1 42 1d 03 c0    	mov    ax,ds:0xc0031d42
c001fcfd:	66 89 06             	mov    WORD PTR [esi],ax
c001fd00:	e9 c6 00 00 00       	jmp    c001fdcb <Vm::x87Handler(regs*)+0x259>
c001fd05:	80 fa d8             	cmp    dl,0xd8
c001fd08:	0f 84 c9 00 00 00    	je     c001fdd7 <Vm::x87Handler(regs*)+0x265>
c001fd0e:	80 fa dc             	cmp    dl,0xdc
c001fd11:	0f 84 0d 02 00 00    	je     c001ff24 <Vm::x87Handler(regs*)+0x3b2>
c001fd17:	80 fa de             	cmp    dl,0xde
c001fd1a:	0f 84 cd 02 00 00    	je     c001ffed <Vm::x87Handler(regs*)+0x47b>
c001fd20:	80 fa dd             	cmp    dl,0xdd
c001fd23:	0f 84 5f 04 00 00    	je     c0020188 <Vm::x87Handler(regs*)+0x616>
c001fd29:	80 fa da             	cmp    dl,0xda
c001fd2c:	0f 84 24 05 00 00    	je     c0020256 <Vm::x87Handler(regs*)+0x6e4>
c001fd32:	80 fa df             	cmp    dl,0xdf
c001fd35:	0f 84 68 05 00 00    	je     c00202a3 <Vm::x87Handler(regs*)+0x731>
c001fd3b:	31 c0                	xor    eax,eax
c001fd3d:	80 fa db             	cmp    dl,0xdb
c001fd40:	0f 85 8d 08 00 00    	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c001fd46:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd4a:	80 fa 03             	cmp    dl,0x3
c001fd4d:	0f 85 70 06 00 00    	jne    c00203c3 <Vm::x87Handler(regs*)+0x851>
c001fd53:	e8 c8 fd ff ff       	call   c001fb20 <Vm::fpuPop()>
c001fd58:	55                   	push   ebp
c001fd59:	55                   	push   ebp
c001fd5a:	52                   	push   edx
c001fd5b:	50                   	push   eax
c001fd5c:	e8 71 fa ff ff       	call   c001f7d2 <Vm::fpuFloatToLong(unsigned long long)>
c001fd61:	83 c4 10             	add    esp,0x10
c001fd64:	89 06                	mov    DWORD PTR [esi],eax
c001fd66:	eb 63                	jmp    c001fdcb <Vm::x87Handler(regs*)+0x259>
c001fd68:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd6c:	84 d2                	test   dl,dl
c001fd6e:	0f 85 e6 05 00 00    	jne    c002035a <Vm::x87Handler(regs*)+0x7e8>
c001fd74:	57                   	push   edi
c001fd75:	57                   	push   edi
c001fd76:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd79:	ff 36                	push   DWORD PTR [esi]
c001fd7b:	e8 49 fa ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c001fd80:	5e                   	pop    esi
c001fd81:	5f                   	pop    edi
c001fd82:	52                   	push   edx
c001fd83:	50                   	push   eax
c001fd84:	e8 3a fd ff ff       	call   c001fac3 <Vm::fpuPush(unsigned long long)>
c001fd89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd8d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd90:	e9 51 fe ff ff       	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x74>
c001fd95:	80 fa 03             	cmp    dl,0x3
c001fd98:	0f 85 d7 06 00 00    	jne    c0020475 <Vm::x87Handler(regs*)+0x903>
c001fd9e:	57                   	push   edi
c001fd9f:	57                   	push   edi
c001fda0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fda3:	ff 36                	push   DWORD PTR [esi]
c001fda5:	e8 1f fa ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c001fdaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdb1:	89 c6                	mov    esi,eax
c001fdb3:	89 d7                	mov    edi,edx
c001fdb5:	e8 7b fc ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fdba:	57                   	push   edi
c001fdbb:	56                   	push   esi
c001fdbc:	52                   	push   edx
c001fdbd:	50                   	push   eax
c001fdbe:	e8 95 fb ff ff       	call   c001f958 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdc3:	83 c4 20             	add    esp,0x20
c001fdc6:	e8 55 fd ff ff       	call   c001fb20 <Vm::fpuPop()>
c001fdcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdcf:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdd2:	e9 12 fe ff ff       	jmp    c001fbe9 <Vm::x87Handler(regs*)+0x77>
c001fdd7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fddb:	8d 50 40             	lea    edx,[eax+0x40]
c001fdde:	80 fa 07             	cmp    dl,0x7
c001fde1:	77 29                	ja     c001fe0c <Vm::x87Handler(regs*)+0x29a>
c001fde3:	83 ec 0c             	sub    esp,0xc
c001fde6:	2d c0 00 00 00       	sub    eax,0xc0
c001fdeb:	50                   	push   eax
c001fdec:	e8 44 fc ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fdf1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdf8:	89 c6                	mov    esi,eax
c001fdfa:	89 d7                	mov    edi,edx
c001fdfc:	e8 34 fc ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fe01:	57                   	push   edi
c001fe02:	56                   	push   esi
c001fe03:	52                   	push   edx
c001fe04:	50                   	push   eax
c001fe05:	e8 a1 fb ff ff       	call   c001f9ab <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe0a:	eb 2f                	jmp    c001fe3b <Vm::x87Handler(regs*)+0x2c9>
c001fe0c:	8d 50 38             	lea    edx,[eax+0x38]
c001fe0f:	80 fa 07             	cmp    dl,0x7
c001fe12:	77 2f                	ja     c001fe43 <Vm::x87Handler(regs*)+0x2d1>
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	2d c8 00 00 00       	sub    eax,0xc8
c001fe1c:	50                   	push   eax
c001fe1d:	e8 13 fc ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fe22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe29:	89 c6                	mov    esi,eax
c001fe2b:	89 d7                	mov    edi,edx
c001fe2d:	e8 03 fc ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fe32:	57                   	push   edi
c001fe33:	56                   	push   esi
c001fe34:	52                   	push   edx
c001fe35:	50                   	push   eax
c001fe36:	e8 a9 fb ff ff       	call   c001f9e4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe3b:	83 c4 1c             	add    esp,0x1c
c001fe3e:	e9 d8 fd ff ff       	jmp    c001fc1b <Vm::x87Handler(regs*)+0xa9>
c001fe43:	8d 50 30             	lea    edx,[eax+0x30]
c001fe46:	80 fa 07             	cmp    dl,0x7
c001fe49:	77 0d                	ja     c001fe58 <Vm::x87Handler(regs*)+0x2e6>
c001fe4b:	83 ec 0c             	sub    esp,0xc
c001fe4e:	2d d0 00 00 00       	sub    eax,0xd0
c001fe53:	e9 99 03 00 00       	jmp    c00201f1 <Vm::x87Handler(regs*)+0x67f>
c001fe58:	8d 50 28             	lea    edx,[eax+0x28]
c001fe5b:	80 fa 07             	cmp    dl,0x7
c001fe5e:	77 0d                	ja     c001fe6d <Vm::x87Handler(regs*)+0x2fb>
c001fe60:	83 ec 0c             	sub    esp,0xc
c001fe63:	2d d8 00 00 00       	sub    eax,0xd8
c001fe68:	e9 c0 03 00 00       	jmp    c002022d <Vm::x87Handler(regs*)+0x6bb>
c001fe6d:	8d 50 20             	lea    edx,[eax+0x20]
c001fe70:	80 fa 07             	cmp    dl,0x7
c001fe73:	77 1b                	ja     c001fe90 <Vm::x87Handler(regs*)+0x31e>
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	2d e0 00 00 00       	sub    eax,0xe0
c001fe7d:	50                   	push   eax
c001fe7e:	e8 b2 fb ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fe83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe8a:	89 c6                	mov    esi,eax
c001fe8c:	89 d7                	mov    edi,edx
c001fe8e:	eb 22                	jmp    c001feb2 <Vm::x87Handler(regs*)+0x340>
c001fe90:	8d 50 18             	lea    edx,[eax+0x18]
c001fe93:	80 fa 07             	cmp    dl,0x7
c001fe96:	77 2d                	ja     c001fec5 <Vm::x87Handler(regs*)+0x353>
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	6a 00                	push   0x0
c001fe9d:	e8 93 fb ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fea2:	89 c6                	mov    esi,eax
c001fea4:	89 d7                	mov    edi,edx
c001fea6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feaa:	2d e8 00 00 00       	sub    eax,0xe8
c001feaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001feb2:	e8 7e fb ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001feb7:	57                   	push   edi
c001feb8:	56                   	push   esi
c001feb9:	52                   	push   edx
c001feba:	50                   	push   eax
c001febb:	e8 15 fb ff ff       	call   c001f9d5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fec0:	e9 76 ff ff ff       	jmp    c001fe3b <Vm::x87Handler(regs*)+0x2c9>
c001fec5:	8d 50 10             	lea    edx,[eax+0x10]
c001fec8:	80 fa 07             	cmp    dl,0x7
c001fecb:	77 1b                	ja     c001fee8 <Vm::x87Handler(regs*)+0x376>
c001fecd:	83 ec 0c             	sub    esp,0xc
c001fed0:	2d f0 00 00 00       	sub    eax,0xf0
c001fed5:	50                   	push   eax
c001fed6:	e8 5a fb ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fedb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fee2:	89 c6                	mov    esi,eax
c001fee4:	89 d7                	mov    edi,edx
c001fee6:	eb 22                	jmp    c001ff0a <Vm::x87Handler(regs*)+0x398>
c001fee8:	3c f7                	cmp    al,0xf7
c001feea:	0f 86 d1 03 00 00    	jbe    c00202c1 <Vm::x87Handler(regs*)+0x74f>
c001fef0:	83 ec 0c             	sub    esp,0xc
c001fef3:	6a 00                	push   0x0
c001fef5:	e8 3b fb ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001fefa:	89 c6                	mov    esi,eax
c001fefc:	89 d7                	mov    edi,edx
c001fefe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff02:	2d f8 00 00 00       	sub    eax,0xf8
c001ff07:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff0a:	e8 26 fb ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001ff0f:	57                   	push   edi
c001ff10:	56                   	push   esi
c001ff11:	52                   	push   edx
c001ff12:	50                   	push   eax
c001ff13:	e8 eb fa ff ff       	call   c001fa03 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff18:	83 c4 1c             	add    esp,0x1c
c001ff1b:	52                   	push   edx
c001ff1c:	50                   	push   eax
c001ff1d:	6a 00                	push   0x0
c001ff1f:	e9 51 02 00 00       	jmp    c0020175 <Vm::x87Handler(regs*)+0x603>
c001ff24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff28:	8d 50 40             	lea    edx,[eax+0x40]
c001ff2b:	80 fa 07             	cmp    dl,0x7
c001ff2e:	77 37                	ja     c001ff67 <Vm::x87Handler(regs*)+0x3f5>
c001ff30:	83 ec 0c             	sub    esp,0xc
c001ff33:	2d c0 00 00 00       	sub    eax,0xc0
c001ff38:	50                   	push   eax
c001ff39:	e8 f7 fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001ff3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff45:	89 c6                	mov    esi,eax
c001ff47:	89 d7                	mov    edi,edx
c001ff49:	e8 e7 fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001ff4e:	57                   	push   edi
c001ff4f:	56                   	push   esi
c001ff50:	52                   	push   edx
c001ff51:	50                   	push   eax
c001ff52:	e8 54 fa ff ff       	call   c001f9ab <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff57:	83 c4 1c             	add    esp,0x1c
c001ff5a:	52                   	push   edx
c001ff5b:	50                   	push   eax
c001ff5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff60:	2d c0 00 00 00       	sub    eax,0xc0
c001ff65:	eb 3d                	jmp    c001ffa4 <Vm::x87Handler(regs*)+0x432>
c001ff67:	8d 50 38             	lea    edx,[eax+0x38]
c001ff6a:	80 fa 07             	cmp    dl,0x7
c001ff6d:	77 3b                	ja     c001ffaa <Vm::x87Handler(regs*)+0x438>
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	2d c8 00 00 00       	sub    eax,0xc8
c001ff77:	50                   	push   eax
c001ff78:	e8 b8 fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001ff7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff84:	89 c6                	mov    esi,eax
c001ff86:	89 d7                	mov    edi,edx
c001ff88:	e8 a8 fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001ff8d:	57                   	push   edi
c001ff8e:	56                   	push   esi
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	e8 4e fa ff ff       	call   c001f9e4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff96:	83 c4 1c             	add    esp,0x1c
c001ff99:	52                   	push   edx
c001ff9a:	50                   	push   eax
c001ff9b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9f:	2d c8 00 00 00       	sub    eax,0xc8
c001ffa4:	50                   	push   eax
c001ffa5:	e9 75 fc ff ff       	jmp    c001fc1f <Vm::x87Handler(regs*)+0xad>
c001ffaa:	83 c0 18             	add    eax,0x18
c001ffad:	3c 07                	cmp    al,0x7
c001ffaf:	0f 87 3b 04 00 00    	ja     c00203f0 <Vm::x87Handler(regs*)+0x87e>
c001ffb5:	83 ec 0c             	sub    esp,0xc
c001ffb8:	6a 00                	push   0x0
c001ffba:	e8 76 fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001ffbf:	89 c6                	mov    esi,eax
c001ffc1:	89 d7                	mov    edi,edx
c001ffc3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc7:	2d e8 00 00 00       	sub    eax,0xe8
c001ffcc:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffcf:	e8 61 fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c001ffd4:	57                   	push   edi
c001ffd5:	56                   	push   esi
c001ffd6:	52                   	push   edx
c001ffd7:	50                   	push   eax
c001ffd8:	e8 f8 f9 ff ff       	call   c001f9d5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffdd:	83 c4 1c             	add    esp,0x1c
c001ffe0:	52                   	push   edx
c001ffe1:	50                   	push   eax
c001ffe2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe6:	2d e8 00 00 00       	sub    eax,0xe8
c001ffeb:	eb b7                	jmp    c001ffa4 <Vm::x87Handler(regs*)+0x432>
c001ffed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff1:	8d 50 40             	lea    edx,[eax+0x40]
c001fff4:	80 fa 07             	cmp    dl,0x7
c001fff7:	77 3a                	ja     c0020033 <Vm::x87Handler(regs*)+0x4c1>
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	2d c0 00 00 00       	sub    eax,0xc0
c0020001:	50                   	push   eax
c0020002:	e8 2e fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020007:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000e:	89 c6                	mov    esi,eax
c0020010:	89 d7                	mov    edi,edx
c0020012:	e8 1e fa ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020017:	57                   	push   edi
c0020018:	56                   	push   esi
c0020019:	52                   	push   edx
c002001a:	50                   	push   eax
c002001b:	e8 8b f9 ff ff       	call   c001f9ab <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020020:	83 c4 1c             	add    esp,0x1c
c0020023:	52                   	push   edx
c0020024:	50                   	push   eax
c0020025:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020029:	2d c0 00 00 00       	sub    eax,0xc0
c002002e:	e9 9e 01 00 00       	jmp    c00201d1 <Vm::x87Handler(regs*)+0x65f>
c0020033:	8d 50 20             	lea    edx,[eax+0x20]
c0020036:	80 fa 07             	cmp    dl,0x7
c0020039:	77 3a                	ja     c0020075 <Vm::x87Handler(regs*)+0x503>
c002003b:	83 ec 0c             	sub    esp,0xc
c002003e:	2d e0 00 00 00       	sub    eax,0xe0
c0020043:	50                   	push   eax
c0020044:	e8 ec f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020049:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020050:	89 c6                	mov    esi,eax
c0020052:	89 d7                	mov    edi,edx
c0020054:	e8 dc f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020059:	57                   	push   edi
c002005a:	56                   	push   esi
c002005b:	52                   	push   edx
c002005c:	50                   	push   eax
c002005d:	e8 73 f9 ff ff       	call   c001f9d5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020062:	83 c4 1c             	add    esp,0x1c
c0020065:	52                   	push   edx
c0020066:	50                   	push   eax
c0020067:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006b:	2d e0 00 00 00       	sub    eax,0xe0
c0020070:	e9 5c 01 00 00       	jmp    c00201d1 <Vm::x87Handler(regs*)+0x65f>
c0020075:	8d 50 18             	lea    edx,[eax+0x18]
c0020078:	80 fa 07             	cmp    dl,0x7
c002007b:	77 3b                	ja     c00200b8 <Vm::x87Handler(regs*)+0x546>
c002007d:	83 ec 0c             	sub    esp,0xc
c0020080:	6a 00                	push   0x0
c0020082:	e8 ae f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020087:	89 c6                	mov    esi,eax
c0020089:	89 d7                	mov    edi,edx
c002008b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008f:	2d e8 00 00 00       	sub    eax,0xe8
c0020094:	89 04 24             	mov    DWORD PTR [esp],eax
c0020097:	e8 99 f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002009c:	57                   	push   edi
c002009d:	56                   	push   esi
c002009e:	52                   	push   edx
c002009f:	50                   	push   eax
c00200a0:	e8 30 f9 ff ff       	call   c001f9d5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200a5:	83 c4 1c             	add    esp,0x1c
c00200a8:	52                   	push   edx
c00200a9:	50                   	push   eax
c00200aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ae:	2d e8 00 00 00       	sub    eax,0xe8
c00200b3:	e9 19 01 00 00       	jmp    c00201d1 <Vm::x87Handler(regs*)+0x65f>
c00200b8:	8d 50 38             	lea    edx,[eax+0x38]
c00200bb:	80 fa 07             	cmp    dl,0x7
c00200be:	77 37                	ja     c00200f7 <Vm::x87Handler(regs*)+0x585>
c00200c0:	83 ec 0c             	sub    esp,0xc
c00200c3:	2d c8 00 00 00       	sub    eax,0xc8
c00200c8:	50                   	push   eax
c00200c9:	e8 67 f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00200ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200d5:	89 c6                	mov    esi,eax
c00200d7:	89 d7                	mov    edi,edx
c00200d9:	e8 57 f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00200de:	57                   	push   edi
c00200df:	56                   	push   esi
c00200e0:	52                   	push   edx
c00200e1:	50                   	push   eax
c00200e2:	e8 fd f8 ff ff       	call   c001f9e4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200e7:	83 c4 1c             	add    esp,0x1c
c00200ea:	52                   	push   edx
c00200eb:	50                   	push   eax
c00200ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200f0:	2d c8 00 00 00       	sub    eax,0xc8
c00200f5:	eb 7d                	jmp    c0020174 <Vm::x87Handler(regs*)+0x602>
c00200f7:	3c f7                	cmp    al,0xf7
c00200f9:	76 38                	jbe    c0020133 <Vm::x87Handler(regs*)+0x5c1>
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	6a 00                	push   0x0
c0020100:	e8 30 f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020105:	89 c6                	mov    esi,eax
c0020107:	89 d7                	mov    edi,edx
c0020109:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002010d:	2d f8 00 00 00       	sub    eax,0xf8
c0020112:	89 04 24             	mov    DWORD PTR [esp],eax
c0020115:	e8 1b f9 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002011a:	57                   	push   edi
c002011b:	56                   	push   esi
c002011c:	52                   	push   edx
c002011d:	50                   	push   eax
c002011e:	e8 e0 f8 ff ff       	call   c001fa03 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020123:	83 c4 1c             	add    esp,0x1c
c0020126:	52                   	push   edx
c0020127:	50                   	push   eax
c0020128:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002012c:	2d f8 00 00 00       	sub    eax,0xf8
c0020131:	eb 41                	jmp    c0020174 <Vm::x87Handler(regs*)+0x602>
c0020133:	8d 50 10             	lea    edx,[eax+0x10]
c0020136:	80 fa 07             	cmp    dl,0x7
c0020139:	0f 87 5a 01 00 00    	ja     c0020299 <Vm::x87Handler(regs*)+0x727>
c002013f:	83 ec 0c             	sub    esp,0xc
c0020142:	2d f0 00 00 00       	sub    eax,0xf0
c0020147:	50                   	push   eax
c0020148:	e8 e8 f8 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002014d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020154:	89 c6                	mov    esi,eax
c0020156:	89 d7                	mov    edi,edx
c0020158:	e8 d8 f8 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002015d:	57                   	push   edi
c002015e:	56                   	push   esi
c002015f:	52                   	push   edx
c0020160:	50                   	push   eax
c0020161:	e8 9d f8 ff ff       	call   c001fa03 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020166:	83 c4 1c             	add    esp,0x1c
c0020169:	52                   	push   edx
c002016a:	50                   	push   eax
c002016b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002016f:	2d f0 00 00 00       	sub    eax,0xf0
c0020174:	50                   	push   eax
c0020175:	e8 fe f8 ff ff       	call   c001fa78 <Vm::fpuSetReg(int, unsigned long long)>
c002017a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002017e:	e8 9d f9 ff ff       	call   c001fb20 <Vm::fpuPop()>
c0020183:	e9 5e fa ff ff       	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x74>
c0020188:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002018c:	8d 50 30             	lea    edx,[eax+0x30]
c002018f:	80 fa 07             	cmp    dl,0x7
c0020192:	77 1d                	ja     c00201b1 <Vm::x87Handler(regs*)+0x63f>
c0020194:	83 ec 0c             	sub    esp,0xc
c0020197:	6a 00                	push   0x0
c0020199:	e8 97 f8 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002019e:	83 c4 0c             	add    esp,0xc
c00201a1:	52                   	push   edx
c00201a2:	50                   	push   eax
c00201a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201a7:	2d d0 00 00 00       	sub    eax,0xd0
c00201ac:	e9 f3 fd ff ff       	jmp    c001ffa4 <Vm::x87Handler(regs*)+0x432>
c00201b1:	8d 50 28             	lea    edx,[eax+0x28]
c00201b4:	80 fa 07             	cmp    dl,0x7
c00201b7:	77 28                	ja     c00201e1 <Vm::x87Handler(regs*)+0x66f>
c00201b9:	83 ec 0c             	sub    esp,0xc
c00201bc:	6a 00                	push   0x0
c00201be:	e8 72 f8 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00201c3:	83 c4 0c             	add    esp,0xc
c00201c6:	52                   	push   edx
c00201c7:	50                   	push   eax
c00201c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201cc:	2d d8 00 00 00       	sub    eax,0xd8
c00201d1:	50                   	push   eax
c00201d2:	e8 a1 f8 ff ff       	call   c001fa78 <Vm::fpuSetReg(int, unsigned long long)>
c00201d7:	e8 44 f9 ff ff       	call   c001fb20 <Vm::fpuPop()>
c00201dc:	e9 01 fa ff ff       	jmp    c001fbe2 <Vm::x87Handler(regs*)+0x70>
c00201e1:	8d 50 20             	lea    edx,[eax+0x20]
c00201e4:	80 fa 07             	cmp    dl,0x7
c00201e7:	77 30                	ja     c0020219 <Vm::x87Handler(regs*)+0x6a7>
c00201e9:	83 ec 0c             	sub    esp,0xc
c00201ec:	2d e0 00 00 00       	sub    eax,0xe0
c00201f1:	50                   	push   eax
c00201f2:	e8 3e f8 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00201f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201fe:	89 c6                	mov    esi,eax
c0020200:	89 d7                	mov    edi,edx
c0020202:	e8 2e f8 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020207:	57                   	push   edi
c0020208:	56                   	push   esi
c0020209:	52                   	push   edx
c002020a:	50                   	push   eax
c002020b:	e8 48 f7 ff ff       	call   c001f958 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020210:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020214:	e9 54 02 00 00       	jmp    c002046d <Vm::x87Handler(regs*)+0x8fb>
c0020219:	8d 50 18             	lea    edx,[eax+0x18]
c002021c:	80 fa 07             	cmp    dl,0x7
c002021f:	0f 87 43 fb ff ff    	ja     c001fd68 <Vm::x87Handler(regs*)+0x1f6>
c0020225:	83 ec 0c             	sub    esp,0xc
c0020228:	2d e8 00 00 00       	sub    eax,0xe8
c002022d:	50                   	push   eax
c002022e:	e8 02 f8 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020233:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002023a:	89 c6                	mov    esi,eax
c002023c:	89 d7                	mov    edi,edx
c002023e:	e8 f2 f7 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020243:	57                   	push   edi
c0020244:	56                   	push   esi
c0020245:	52                   	push   edx
c0020246:	50                   	push   eax
c0020247:	e8 0c f7 ff ff       	call   c001f958 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002024c:	83 c4 20             	add    esp,0x20
c002024f:	e8 cc f8 ff ff       	call   c001fb20 <Vm::fpuPop()>
c0020254:	eb 62                	jmp    c00202b8 <Vm::x87Handler(regs*)+0x746>
c0020256:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002025a:	0f 85 0f 01 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0x7fd>
c0020260:	83 ec 0c             	sub    esp,0xc
c0020263:	6a 01                	push   0x1
c0020265:	e8 cb f7 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002026a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020271:	89 c6                	mov    esi,eax
c0020273:	89 d7                	mov    edi,edx
c0020275:	e8 bb f7 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002027a:	57                   	push   edi
c002027b:	56                   	push   esi
c002027c:	52                   	push   edx
c002027d:	50                   	push   eax
c002027e:	e8 d5 f6 ff ff       	call   c001f958 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020283:	83 c4 20             	add    esp,0x20
c0020286:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002028a:	e8 91 f8 ff ff       	call   c001fb20 <Vm::fpuPop()>
c002028f:	e8 8c f8 ff ff       	call   c001fb20 <Vm::fpuPop()>
c0020294:	e9 50 f9 ff ff       	jmp    c001fbe9 <Vm::x87Handler(regs*)+0x77>
c0020299:	3c d9                	cmp    al,0xd9
c002029b:	0f 85 b5 02 00 00    	jne    c0020556 <Vm::x87Handler(regs*)+0x9e4>
c00202a1:	eb bd                	jmp    c0020260 <Vm::x87Handler(regs*)+0x6ee>
c00202a3:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202a7:	0f 85 ea 02 00 00    	jne    c0020597 <Vm::x87Handler(regs*)+0xa25>
c00202ad:	0f b7 05 40 1d 03 c0 	movzx  eax,WORD PTR ds:0xc0031d40
c00202b4:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202bc:	e9 28 f9 ff ff       	jmp    c001fbe9 <Vm::x87Handler(regs*)+0x77>
c00202c1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202c5:	84 d2                	test   dl,dl
c00202c7:	75 0f                	jne    c00202d8 <Vm::x87Handler(regs*)+0x766>
c00202c9:	83 ec 0c             	sub    esp,0xc
c00202cc:	ff 36                	push   DWORD PTR [esi]
c00202ce:	e8 b1 f4 ff ff       	call   c001f784 <Vm::fpu32ToInternal(unsigned int)>
c00202d3:	e9 2c 01 00 00       	jmp    c0020404 <Vm::x87Handler(regs*)+0x892>
c00202d8:	80 fa 01             	cmp    dl,0x1
c00202db:	75 0f                	jne    c00202ec <Vm::x87Handler(regs*)+0x77a>
c00202dd:	83 ec 0c             	sub    esp,0xc
c00202e0:	ff 36                	push   DWORD PTR [esi]
c00202e2:	e8 9d f4 ff ff       	call   c001f784 <Vm::fpu32ToInternal(unsigned int)>
c00202e7:	e9 81 02 00 00       	jmp    c002056d <Vm::x87Handler(regs*)+0x9fb>
c00202ec:	80 fa 04             	cmp    dl,0x4
c00202ef:	75 0f                	jne    c0020300 <Vm::x87Handler(regs*)+0x78e>
c00202f1:	83 ec 0c             	sub    esp,0xc
c00202f4:	ff 36                	push   DWORD PTR [esi]
c00202f6:	e8 89 f4 ff ff       	call   c001f784 <Vm::fpu32ToInternal(unsigned int)>
c00202fb:	e9 86 01 00 00       	jmp    c0020486 <Vm::x87Handler(regs*)+0x914>
c0020300:	80 fa 05             	cmp    dl,0x5
c0020303:	75 1b                	jne    c0020320 <Vm::x87Handler(regs*)+0x7ae>
c0020305:	83 ec 0c             	sub    esp,0xc
c0020308:	6a 00                	push   0x0
c002030a:	e8 26 f7 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002030f:	89 c7                	mov    edi,eax
c0020311:	89 d5                	mov    ebp,edx
c0020313:	58                   	pop    eax
c0020314:	ff 36                	push   DWORD PTR [esi]
c0020316:	e8 69 f4 ff ff       	call   c001f784 <Vm::fpu32ToInternal(unsigned int)>
c002031b:	e9 a3 01 00 00       	jmp    c00204c3 <Vm::x87Handler(regs*)+0x951>
c0020320:	80 fa 06             	cmp    dl,0x6
c0020323:	75 0f                	jne    c0020334 <Vm::x87Handler(regs*)+0x7c2>
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	ff 36                	push   DWORD PTR [esi]
c002032a:	e8 55 f4 ff ff       	call   c001f784 <Vm::fpu32ToInternal(unsigned int)>
c002032f:	e9 ae 01 00 00       	jmp    c00204e2 <Vm::x87Handler(regs*)+0x970>
c0020334:	31 c0                	xor    eax,eax
c0020336:	80 fa 07             	cmp    dl,0x7
c0020339:	0f 85 94 02 00 00    	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c002033f:	83 ec 0c             	sub    esp,0xc
c0020342:	6a 00                	push   0x0
c0020344:	e8 ec f6 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020349:	89 c7                	mov    edi,eax
c002034b:	89 d5                	mov    ebp,edx
c002034d:	58                   	pop    eax
c002034e:	ff 36                	push   DWORD PTR [esi]
c0020350:	e8 2f f4 ff ff       	call   c001f784 <Vm::fpu32ToInternal(unsigned int)>
c0020355:	e9 cb 01 00 00       	jmp    c0020525 <Vm::x87Handler(regs*)+0x9b3>
c002035a:	80 fa 03             	cmp    dl,0x3
c002035d:	0f 85 d3 01 00 00    	jne    c0020536 <Vm::x87Handler(regs*)+0x9c4>
c0020363:	e8 b8 f7 ff ff       	call   c001fb20 <Vm::fpuPop()>
c0020368:	51                   	push   ecx
c0020369:	51                   	push   ecx
c002036a:	e9 de 01 00 00       	jmp    c002054d <Vm::x87Handler(regs*)+0x9db>
c002036f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020373:	80 fa 01             	cmp    dl,0x1
c0020376:	75 09                	jne    c0020381 <Vm::x87Handler(regs*)+0x80f>
c0020378:	57                   	push   edi
c0020379:	57                   	push   edi
c002037a:	8b 06                	mov    eax,DWORD PTR [esi]
c002037c:	e9 e3 01 00 00       	jmp    c0020564 <Vm::x87Handler(regs*)+0x9f2>
c0020381:	80 fa 04             	cmp    dl,0x4
c0020384:	75 12                	jne    c0020398 <Vm::x87Handler(regs*)+0x826>
c0020386:	31 d2                	xor    edx,edx
c0020388:	51                   	push   ecx
c0020389:	51                   	push   ecx
c002038a:	8b 06                	mov    eax,DWORD PTR [esi]
c002038c:	52                   	push   edx
c002038d:	50                   	push   eax
c002038e:	e8 d0 f4 ff ff       	call   c001f863 <Vm::fpuLongToFloat(long long)>
c0020393:	e9 ee 00 00 00       	jmp    c0020486 <Vm::x87Handler(regs*)+0x914>
c0020398:	31 c0                	xor    eax,eax
c002039a:	80 fa 07             	cmp    dl,0x7
c002039d:	0f 85 30 02 00 00    	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c00203a3:	83 ec 0c             	sub    esp,0xc
c00203a6:	6a 00                	push   0x0
c00203a8:	e8 88 f6 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00203ad:	89 c7                	mov    edi,eax
c00203af:	89 d5                	mov    ebp,edx
c00203b1:	58                   	pop    eax
c00203b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00203b4:	5a                   	pop    edx
c00203b5:	31 d2                	xor    edx,edx
c00203b7:	52                   	push   edx
c00203b8:	50                   	push   eax
c00203b9:	e8 a5 f4 ff ff       	call   c001f863 <Vm::fpuLongToFloat(long long)>
c00203be:	e9 62 01 00 00       	jmp    c0020525 <Vm::x87Handler(regs*)+0x9b3>
c00203c3:	84 d2                	test   dl,dl
c00203c5:	75 0d                	jne    c00203d4 <Vm::x87Handler(regs*)+0x862>
c00203c7:	31 d2                	xor    edx,edx
c00203c9:	55                   	push   ebp
c00203ca:	55                   	push   ebp
c00203cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00203cd:	52                   	push   edx
c00203ce:	50                   	push   eax
c00203cf:	e9 d3 01 00 00       	jmp    c00205a7 <Vm::x87Handler(regs*)+0xa35>
c00203d4:	31 c0                	xor    eax,eax
c00203d6:	80 fa 02             	cmp    dl,0x2
c00203d9:	0f 85 f4 01 00 00    	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c00203df:	83 ec 0c             	sub    esp,0xc
c00203e2:	6a 00                	push   0x0
c00203e4:	e8 4c f6 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00203e9:	59                   	pop    ecx
c00203ea:	5f                   	pop    edi
c00203eb:	e9 6a f9 ff ff       	jmp    c001fd5a <Vm::x87Handler(regs*)+0x1e8>
c00203f0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203f4:	84 d2                	test   dl,dl
c00203f6:	75 2a                	jne    c0020422 <Vm::x87Handler(regs*)+0x8b0>
c00203f8:	50                   	push   eax
c00203f9:	50                   	push   eax
c00203fa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fd:	ff 36                	push   DWORD PTR [esi]
c00203ff:	e8 c5 f3 ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c0020404:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002040b:	89 c6                	mov    esi,eax
c002040d:	89 d7                	mov    edi,edx
c002040f:	e8 21 f6 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020414:	57                   	push   edi
c0020415:	56                   	push   esi
c0020416:	52                   	push   edx
c0020417:	50                   	push   eax
c0020418:	e8 8e f5 ff ff       	call   c001f9ab <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002041d:	e9 64 01 00 00       	jmp    c0020586 <Vm::x87Handler(regs*)+0xa14>
c0020422:	80 fa 01             	cmp    dl,0x1
c0020425:	75 11                	jne    c0020438 <Vm::x87Handler(regs*)+0x8c6>
c0020427:	50                   	push   eax
c0020428:	50                   	push   eax
c0020429:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002042c:	ff 36                	push   DWORD PTR [esi]
c002042e:	e8 96 f3 ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c0020433:	e9 35 01 00 00       	jmp    c002056d <Vm::x87Handler(regs*)+0x9fb>
c0020438:	80 fa 02             	cmp    dl,0x2
c002043b:	0f 85 54 f9 ff ff    	jne    c001fd95 <Vm::x87Handler(regs*)+0x223>
c0020441:	55                   	push   ebp
c0020442:	55                   	push   ebp
c0020443:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020446:	ff 36                	push   DWORD PTR [esi]
c0020448:	e8 7c f3 ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c002044d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020454:	89 c6                	mov    esi,eax
c0020456:	89 d7                	mov    edi,edx
c0020458:	e8 d8 f5 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002045d:	57                   	push   edi
c002045e:	56                   	push   esi
c002045f:	52                   	push   edx
c0020460:	50                   	push   eax
c0020461:	e8 f2 f4 ff ff       	call   c001f958 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020466:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002046a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002046d:	83 c4 20             	add    esp,0x20
c0020470:	e9 74 f7 ff ff       	jmp    c001fbe9 <Vm::x87Handler(regs*)+0x77>
c0020475:	80 fa 04             	cmp    dl,0x4
c0020478:	75 2a                	jne    c00204a4 <Vm::x87Handler(regs*)+0x932>
c002047a:	51                   	push   ecx
c002047b:	51                   	push   ecx
c002047c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002047f:	ff 36                	push   DWORD PTR [esi]
c0020481:	e8 43 f3 ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c0020486:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002048d:	89 c6                	mov    esi,eax
c002048f:	89 d7                	mov    edi,edx
c0020491:	e8 9f f5 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020496:	57                   	push   edi
c0020497:	56                   	push   esi
c0020498:	52                   	push   edx
c0020499:	50                   	push   eax
c002049a:	e8 36 f5 ff ff       	call   c001f9d5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002049f:	e9 e2 00 00 00       	jmp    c0020586 <Vm::x87Handler(regs*)+0xa14>
c00204a4:	80 fa 05             	cmp    dl,0x5
c00204a7:	75 28                	jne    c00204d1 <Vm::x87Handler(regs*)+0x95f>
c00204a9:	83 ec 0c             	sub    esp,0xc
c00204ac:	6a 00                	push   0x0
c00204ae:	e8 82 f5 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00204b3:	89 c7                	mov    edi,eax
c00204b5:	89 d5                	mov    ebp,edx
c00204b7:	58                   	pop    eax
c00204b8:	5a                   	pop    edx
c00204b9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204bc:	ff 36                	push   DWORD PTR [esi]
c00204be:	e8 06 f3 ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c00204c3:	83 c4 10             	add    esp,0x10
c00204c6:	55                   	push   ebp
c00204c7:	57                   	push   edi
c00204c8:	52                   	push   edx
c00204c9:	50                   	push   eax
c00204ca:	e8 06 f5 ff ff       	call   c001f9d5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204cf:	eb 60                	jmp    c0020531 <Vm::x87Handler(regs*)+0x9bf>
c00204d1:	80 fa 06             	cmp    dl,0x6
c00204d4:	75 2a                	jne    c0020500 <Vm::x87Handler(regs*)+0x98e>
c00204d6:	51                   	push   ecx
c00204d7:	51                   	push   ecx
c00204d8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204db:	ff 36                	push   DWORD PTR [esi]
c00204dd:	e8 e7 f2 ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c00204e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204e9:	89 c6                	mov    esi,eax
c00204eb:	89 d7                	mov    edi,edx
c00204ed:	e8 43 f5 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c00204f2:	57                   	push   edi
c00204f3:	56                   	push   esi
c00204f4:	52                   	push   edx
c00204f5:	50                   	push   eax
c00204f6:	e8 08 f5 ff ff       	call   c001fa03 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204fb:	e9 86 00 00 00       	jmp    c0020586 <Vm::x87Handler(regs*)+0xa14>
c0020500:	31 c0                	xor    eax,eax
c0020502:	80 fa 07             	cmp    dl,0x7
c0020505:	0f 85 c8 00 00 00    	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c002050b:	83 ec 0c             	sub    esp,0xc
c002050e:	6a 00                	push   0x0
c0020510:	e8 20 f5 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c0020515:	89 c7                	mov    edi,eax
c0020517:	89 d5                	mov    ebp,edx
c0020519:	58                   	pop    eax
c002051a:	5a                   	pop    edx
c002051b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002051e:	ff 36                	push   DWORD PTR [esi]
c0020520:	e8 a4 f2 ff ff       	call   c001f7c9 <Vm::fpu64ToInternal(unsigned long long)>
c0020525:	83 c4 10             	add    esp,0x10
c0020528:	55                   	push   ebp
c0020529:	57                   	push   edi
c002052a:	52                   	push   edx
c002052b:	50                   	push   eax
c002052c:	e8 d2 f4 ff ff       	call   c001fa03 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020531:	83 c4 0c             	add    esp,0xc
c0020534:	eb 53                	jmp    c0020589 <Vm::x87Handler(regs*)+0xa17>
c0020536:	31 c0                	xor    eax,eax
c0020538:	80 fa 02             	cmp    dl,0x2
c002053b:	0f 85 92 00 00 00    	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c0020541:	83 ec 0c             	sub    esp,0xc
c0020544:	6a 00                	push   0x0
c0020546:	e8 ea f4 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002054b:	59                   	pop    ecx
c002054c:	5f                   	pop    edi
c002054d:	52                   	push   edx
c002054e:	50                   	push   eax
c002054f:	e8 27 f2 ff ff       	call   c001f77b <Vm::fpuInternalTo64(unsigned long long)>
c0020554:	eb 70                	jmp    c00205c6 <Vm::x87Handler(regs*)+0xa54>
c0020556:	31 c0                	xor    eax,eax
c0020558:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002055d:	75 74                	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c002055f:	50                   	push   eax
c0020560:	50                   	push   eax
c0020561:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020564:	31 d2                	xor    edx,edx
c0020566:	52                   	push   edx
c0020567:	50                   	push   eax
c0020568:	e8 f6 f2 ff ff       	call   c001f863 <Vm::fpuLongToFloat(long long)>
c002056d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020574:	89 c6                	mov    esi,eax
c0020576:	89 d7                	mov    edi,edx
c0020578:	e8 b8 f4 ff ff       	call   c001fa35 <Vm::fpuGetReg(int)>
c002057d:	57                   	push   edi
c002057e:	56                   	push   esi
c002057f:	52                   	push   edx
c0020580:	50                   	push   eax
c0020581:	e8 5e f4 ff ff       	call   c001f9e4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020586:	83 c4 1c             	add    esp,0x1c
c0020589:	52                   	push   edx
c002058a:	50                   	push   eax
c002058b:	6a 00                	push   0x0
c002058d:	e8 e6 f4 ff ff       	call   c001fa78 <Vm::fpuSetReg(int, unsigned long long)>
c0020592:	e9 f2 f7 ff ff       	jmp    c001fd89 <Vm::x87Handler(regs*)+0x217>
c0020597:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002059b:	80 fa 05             	cmp    dl,0x5
c002059e:	75 11                	jne    c00205b1 <Vm::x87Handler(regs*)+0xa3f>
c00205a0:	55                   	push   ebp
c00205a1:	55                   	push   ebp
c00205a2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205a5:	ff 36                	push   DWORD PTR [esi]
c00205a7:	e8 81 f2 ff ff       	call   c001f82d <Vm::fpuULongToFloat(unsigned long long)>
c00205ac:	e9 cf f7 ff ff       	jmp    c001fd80 <Vm::x87Handler(regs*)+0x20e>
c00205b1:	31 c0                	xor    eax,eax
c00205b3:	80 fa 07             	cmp    dl,0x7
c00205b6:	75 1b                	jne    c00205d3 <Vm::x87Handler(regs*)+0xa61>
c00205b8:	e8 63 f5 ff ff       	call   c001fb20 <Vm::fpuPop()>
c00205bd:	51                   	push   ecx
c00205be:	51                   	push   ecx
c00205bf:	52                   	push   edx
c00205c0:	50                   	push   eax
c00205c1:	e8 0c f2 ff ff       	call   c001f7d2 <Vm::fpuFloatToLong(unsigned long long)>
c00205c6:	83 c4 10             	add    esp,0x10
c00205c9:	89 06                	mov    DWORD PTR [esi],eax
c00205cb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205ce:	e9 f8 f7 ff ff       	jmp    c001fdcb <Vm::x87Handler(regs*)+0x259>
c00205d3:	83 c4 1c             	add    esp,0x1c
c00205d6:	5b                   	pop    ebx
c00205d7:	5e                   	pop    esi
c00205d8:	5f                   	pop    edi
c00205d9:	5d                   	pop    ebp
c00205da:	c3                   	ret    

c00205db <__static_initialization_and_destruction_0(int, int)>:
c00205db:	83 ec 0c             	sub    esp,0xc
c00205de:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205e3:	75 1a                	jne    c00205ff <__static_initialization_and_destruction_0(int, int)+0x24>
c00205e5:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205ed:	75 10                	jne    c00205ff <__static_initialization_and_destruction_0(int, int)+0x24>
c00205ef:	83 ec 0c             	sub    esp,0xc
c00205f2:	68 40 1d 03 c0       	push   0xc0031d40
c00205f7:	e8 14 88 00 00       	call   c0028e10 <Vm::_FPUState::_FPUState()>
c00205fc:	83 c4 10             	add    esp,0x10
c00205ff:	90                   	nop
c0020600:	83 c4 0c             	add    esp,0xc
c0020603:	c3                   	ret    

c0020604 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020604:	83 ec 0c             	sub    esp,0xc
c0020607:	83 ec 08             	sub    esp,0x8
c002060a:	68 ff ff 00 00       	push   0xffff
c002060f:	6a 01                	push   0x1
c0020611:	e8 c5 ff ff ff       	call   c00205db <__static_initialization_and_destruction_0(int, int)>
c0020616:	83 c4 10             	add    esp,0x10
c0020619:	83 c4 0c             	add    esp,0xc
c002061c:	c3                   	ret    
c002061d:	90                   	nop

c002061e <FAT::getName()>:
c002061e:	b8 54 cb 02 c0       	mov    eax,0xc002cb54
c0020623:	c3                   	ret    

c0020624 <FAT::tell(void*, unsigned long long*)>:
c0020624:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020629:	75 06                	jne    c0020631 <FAT::tell(void*, unsigned long long*)+0xd>
c002062b:	b8 04 00 00 00       	mov    eax,0x4
c0020630:	c3                   	ret    
c0020631:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020636:	75 06                	jne    c002063e <FAT::tell(void*, unsigned long long*)+0x1a>
c0020638:	b8 04 00 00 00       	mov    eax,0x4
c002063d:	c3                   	ret    
c002063e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020642:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020645:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020648:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002064c:	89 01                	mov    DWORD PTR [ecx],eax
c002064e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020651:	b8 00 00 00 00       	mov    eax,0x0
c0020656:	c3                   	ret    
c0020657:	90                   	nop

c0020658 <FAT::stat(void*, unsigned long long*)>:
c0020658:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002065d:	75 06                	jne    c0020665 <FAT::stat(void*, unsigned long long*)+0xd>
c002065f:	b8 04 00 00 00       	mov    eax,0x4
c0020664:	c3                   	ret    
c0020665:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002066a:	75 06                	jne    c0020672 <FAT::stat(void*, unsigned long long*)+0x1a>
c002066c:	b8 04 00 00 00       	mov    eax,0x4
c0020671:	c3                   	ret    
c0020672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020676:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020679:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002067c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020680:	89 01                	mov    DWORD PTR [ecx],eax
c0020682:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020685:	b8 00 00 00 00       	mov    eax,0x0
c002068a:	c3                   	ret    
c002068b:	90                   	nop

c002068c <FAT::~FAT()>:
c002068c:	83 ec 0c             	sub    esp,0xc
c002068f:	ba d8 cb 02 c0       	mov    edx,0xc002cbd8
c0020694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020698:	89 10                	mov    DWORD PTR [eax],edx
c002069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069e:	83 ec 0c             	sub    esp,0xc
c00206a1:	50                   	push   eax
c00206a2:	e8 89 2c ff ff       	call   c0013330 <Filesystem::~Filesystem()>
c00206a7:	83 c4 10             	add    esp,0x10
c00206aa:	90                   	nop
c00206ab:	83 c4 0c             	add    esp,0xc
c00206ae:	c3                   	ret    
c00206af:	90                   	nop

c00206b0 <FAT::~FAT()>:
c00206b0:	83 ec 0c             	sub    esp,0xc
c00206b3:	83 ec 0c             	sub    esp,0xc
c00206b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ba:	e8 cd ff ff ff       	call   c002068c <FAT::~FAT()>
c00206bf:	83 c4 10             	add    esp,0x10
c00206c2:	83 ec 08             	sub    esp,0x8
c00206c5:	6a 08                	push   0x8
c00206c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206cb:	e8 57 28 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00206d0:	83 c4 10             	add    esp,0x10
c00206d3:	83 c4 0c             	add    esp,0xc
c00206d6:	c3                   	ret    
c00206d7:	90                   	nop

c00206d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206d8:	83 ec 1c             	sub    esp,0x1c
c00206db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206eb:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c00206f2:	83 f8 ff             	cmp    eax,0xffffffff
c00206f5:	75 34                	jne    c002072b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206fb:	88 c2                	mov    dl,al
c00206fd:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c0020702:	01 d0                	add    eax,edx
c0020704:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020708:	8b 15 a0 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031da0
c002070e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020712:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c0020719:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c002071e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020722:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c0020729:	eb 17                	jmp    c0020742 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002072b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002072f:	88 c2                	mov    dl,al
c0020731:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020735:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c002073c:	01 d0                	add    eax,edx
c002073e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020742:	83 ec 04             	sub    esp,0x4
c0020745:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020749:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002074d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020751:	50                   	push   eax
c0020752:	e8 e1 65 fe ff       	call   c0006d38 <f_getlabel>
c0020757:	83 c4 10             	add    esp,0x10
c002075a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002075e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020763:	75 07                	jne    c002076c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020765:	b8 00 00 00 00       	mov    eax,0x0
c002076a:	eb 05                	jmp    c0020771 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002076c:	b8 01 00 00 00       	mov    eax,0x1
c0020771:	83 c4 1c             	add    esp,0x1c
c0020774:	c3                   	ret    
c0020775:	90                   	nop

c0020776 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020776:	57                   	push   edi
c0020777:	83 ec 58             	sub    esp,0x58
c002077a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020782:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020786:	b9 0f 00 00 00       	mov    ecx,0xf
c002078b:	b8 00 00 00 00       	mov    eax,0x0
c0020790:	fc                   	cld    
c0020791:	89 d7                	mov    edi,edx
c0020793:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020795:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020799:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c00207a0:	83 f8 ff             	cmp    eax,0xffffffff
c00207a3:	75 34                	jne    c00207d9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207a5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207a9:	88 c2                	mov    dl,al
c00207ab:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c00207b0:	01 d0                	add    eax,edx
c00207b2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207b6:	8b 15 a0 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031da0
c00207bc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207c0:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c00207c7:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c00207cc:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207d0:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c00207d7:	eb 17                	jmp    c00207f0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207d9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207dd:	88 c2                	mov    dl,al
c00207df:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207e3:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c00207ea:	01 d0                	add    eax,edx
c00207ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207f0:	83 ec 08             	sub    esp,0x8
c00207f3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207fb:	50                   	push   eax
c00207fc:	e8 73 01 fe ff       	call   c0000974 <strcat>
c0020801:	83 c4 10             	add    esp,0x10
c0020804:	83 ec 0c             	sub    esp,0xc
c0020807:	8d 44 24 18          	lea    eax,[esp+0x18]
c002080b:	50                   	push   eax
c002080c:	e8 15 67 fe ff       	call   c0006f26 <f_setlabel>
c0020811:	83 c4 10             	add    esp,0x10
c0020814:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020818:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002081d:	75 07                	jne    c0020826 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002081f:	b8 00 00 00 00       	mov    eax,0x0
c0020824:	eb 05                	jmp    c002082b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020826:	b8 01 00 00 00       	mov    eax,0x1
c002082b:	83 c4 58             	add    esp,0x58
c002082e:	5f                   	pop    edi
c002082f:	c3                   	ret    

c0020830 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020830:	83 ec 2c             	sub    esp,0x2c
c0020833:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002083b:	83 ec 08             	sub    esp,0x8
c002083e:	68 78 cb 02 c0       	push   0xc002cb78
c0020843:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020847:	e8 74 00 fe ff       	call   c00008c0 <strcmp>
c002084c:	83 c4 10             	add    esp,0x10
c002084f:	85 c0                	test   eax,eax
c0020851:	0f 94 c0             	sete   al
c0020854:	84 c0                	test   al,al
c0020856:	74 0d                	je     c0020865 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020858:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020860:	e9 a6 00 00 00       	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020865:	83 ec 08             	sub    esp,0x8
c0020868:	68 6a cb 02 c0       	push   0xc002cb6a
c002086d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020871:	e8 4a 00 fe ff       	call   c00008c0 <strcmp>
c0020876:	83 c4 10             	add    esp,0x10
c0020879:	85 c0                	test   eax,eax
c002087b:	0f 94 c0             	sete   al
c002087e:	84 c0                	test   al,al
c0020880:	74 0a                	je     c002088c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020882:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002088a:	eb 7f                	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002088c:	83 ec 08             	sub    esp,0x8
c002088f:	68 70 cb 02 c0       	push   0xc002cb70
c0020894:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020898:	e8 23 00 fe ff       	call   c00008c0 <strcmp>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	85 c0                	test   eax,eax
c00208a2:	0f 94 c0             	sete   al
c00208a5:	84 c0                	test   al,al
c00208a7:	74 0a                	je     c00208b3 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208a9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208b1:	eb 58                	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b3:	83 ec 08             	sub    esp,0x8
c00208b6:	68 6c 95 02 c0       	push   0xc002956c
c00208bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208bf:	e8 fc ff fd ff       	call   c00008c0 <strcmp>
c00208c4:	83 c4 10             	add    esp,0x10
c00208c7:	85 c0                	test   eax,eax
c00208c9:	0f 94 c0             	sete   al
c00208cc:	84 c0                	test   al,al
c00208ce:	74 0a                	je     c00208da <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208d0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208d8:	eb 31                	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208da:	83 ec 08             	sub    esp,0x8
c00208dd:	68 76 cb 02 c0       	push   0xc002cb76
c00208e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208e6:	e8 d5 ff fd ff       	call   c00008c0 <strcmp>
c00208eb:	83 c4 10             	add    esp,0x10
c00208ee:	85 c0                	test   eax,eax
c00208f0:	0f 94 c0             	sete   al
c00208f3:	84 c0                	test   al,al
c00208f5:	74 0a                	je     c0020901 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208f7:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208ff:	eb 0a                	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020901:	b8 08 00 00 00       	mov    eax,0x8
c0020906:	e9 04 01 00 00       	jmp    c0020a0f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002090b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020912:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020917:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002091b:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c0020922:	83 f8 ff             	cmp    eax,0xffffffff
c0020925:	75 34                	jne    c002095b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020927:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002092b:	88 c2                	mov    dl,al
c002092d:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c0020932:	01 d0                	add    eax,edx
c0020934:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020938:	8b 15 a0 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031da0
c002093e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020942:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c0020949:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c002094e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020952:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c0020959:	eb 17                	jmp    c0020972 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002095b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002095f:	88 c2                	mov    dl,al
c0020961:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020965:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c002096c:	01 d0                	add    eax,edx
c002096e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020972:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020976:	88 04 24             	mov    BYTE PTR [esp],al
c0020979:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002097d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020981:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020989:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002098e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020996:	83 ec 0c             	sub    esp,0xc
c0020999:	68 00 20 00 00       	push   0x2000
c002099e:	e8 59 ef fe ff       	call   c000f8fc <malloc>
c00209a3:	83 c4 10             	add    esp,0x10
c00209a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209aa:	68 00 20 00 00       	push   0x2000
c00209af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209b3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209b7:	50                   	push   eax
c00209b8:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209bc:	50                   	push   eax
c00209bd:	e8 af 69 fe ff       	call   c0007371 <f_mkfs>
c00209c2:	83 c4 10             	add    esp,0x10
c00209c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209ce:	75 07                	jne    c00209d7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209d0:	b8 00 00 00 00       	mov    eax,0x0
c00209d5:	eb 38                	jmp    c0020a0f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209d7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209dc:	75 17                	jne    c00209f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209de:	83 ec 0c             	sub    esp,0xc
c00209e1:	68 a8 cb 02 c0       	push   0xc002cba8
c00209e6:	e8 1c 26 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00209eb:	83 c4 10             	add    esp,0x10
c00209ee:	b8 09 00 00 00       	mov    eax,0x9
c00209f3:	eb 1a                	jmp    c0020a0f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209f9:	83 ec 08             	sub    esp,0x8
c00209fc:	50                   	push   eax
c00209fd:	68 7c cb 02 c0       	push   0xc002cb7c
c0020a02:	e8 00 26 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0020a07:	83 c4 10             	add    esp,0x10
c0020a0a:	b8 01 00 00 00       	mov    eax,0x1
c0020a0f:	83 c4 2c             	add    esp,0x2c
c0020a12:	c3                   	ret    
c0020a13:	90                   	nop

c0020a14 <FAT::tryMount(LogicalDisk*, int)>:
c0020a14:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a1a:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c0020a1f:	83 f8 14             	cmp    eax,0x14
c0020a22:	75 17                	jne    c0020a3b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a24:	83 ec 0c             	sub    esp,0xc
c0020a27:	68 8e cb 02 c0       	push   0xc002cb8e
c0020a2c:	e8 88 9c ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0020a31:	83 c4 10             	add    esp,0x10
c0020a34:	b0 00                	mov    al,0x0
c0020a36:	e9 d7 01 00 00       	jmp    c0020c12 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a3b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a48:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a4e:	3d 00 02 00 00       	cmp    eax,0x200
c0020a53:	74 07                	je     c0020a5c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a55:	b0 00                	mov    al,0x0
c0020a57:	e9 b6 01 00 00       	jmp    c0020c12 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a5c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a64:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a6b:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c0020a72:	83 f8 ff             	cmp    eax,0xffffffff
c0020a75:	74 07                	je     c0020a7e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a77:	b0 01                	mov    al,0x1
c0020a79:	e9 94 01 00 00       	jmp    c0020c12 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a7e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a88:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a90:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a97:	88 c2                	mov    dl,al
c0020a99:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c0020a9e:	01 d0                	add    eax,edx
c0020aa0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020aa7:	8b 15 a0 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031da0
c0020aad:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020ab4:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c0020abb:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c0020ac0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020ac7:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c0020ace:	83 ec 0c             	sub    esp,0xc
c0020ad1:	68 54 02 00 00       	push   0x254
c0020ad6:	e8 21 ee fe ff       	call   c000f8fc <malloc>
c0020adb:	83 c4 10             	add    esp,0x10
c0020ade:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020ae5:	83 ec 04             	sub    esp,0x4
c0020ae8:	6a 00                	push   0x0
c0020aea:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020af1:	50                   	push   eax
c0020af2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020af9:	e8 31 44 fe ff       	call   c0004f2f <f_mount>
c0020afe:	83 c4 10             	add    esp,0x10
c0020b01:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b08:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b10:	74 19                	je     c0020b2b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b12:	83 ec 0c             	sub    esp,0xc
c0020b15:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b1c:	e8 fb ed fe ff       	call   c000f91c <rfree>
c0020b21:	83 c4 10             	add    esp,0x10
c0020b24:	b0 00                	mov    al,0x0
c0020b26:	e9 e7 00 00 00       	jmp    c0020c12 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b2b:	83 ec 04             	sub    esp,0x4
c0020b2e:	68 00 01 00 00       	push   0x100
c0020b33:	6a 00                	push   0x0
c0020b35:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b3c:	50                   	push   eax
c0020b3d:	e8 36 fc fd ff       	call   c0000778 <memset>
c0020b42:	83 c4 10             	add    esp,0x10
c0020b45:	83 ec 08             	sub    esp,0x8
c0020b48:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b4f:	50                   	push   eax
c0020b50:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b57:	50                   	push   eax
c0020b58:	e8 17 fe fd ff       	call   c0000974 <strcat>
c0020b5d:	83 c4 10             	add    esp,0x10
c0020b60:	83 ec 08             	sub    esp,0x8
c0020b63:	68 9c cb 02 c0       	push   0xc002cb9c
c0020b68:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b6f:	50                   	push   eax
c0020b70:	e8 ff fd fd ff       	call   c0000974 <strcat>
c0020b75:	83 c4 10             	add    esp,0x10
c0020b78:	83 ec 04             	sub    esp,0x4
c0020b7b:	6a 01                	push   0x1
c0020b7d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b84:	50                   	push   eax
c0020b85:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b89:	50                   	push   eax
c0020b8a:	e8 02 44 fe ff       	call   c0004f91 <f_open>
c0020b8f:	83 c4 10             	add    esp,0x10
c0020b92:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b99:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020ba0:	85 c0                	test   eax,eax
c0020ba2:	74 0a                	je     c0020bae <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ba4:	78 2d                	js     c0020bd3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ba6:	83 e8 04             	sub    eax,0x4
c0020ba9:	83 f8 01             	cmp    eax,0x1
c0020bac:	77 25                	ja     c0020bd3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bae:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bb6:	83 ec 0c             	sub    esp,0xc
c0020bb9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bbd:	50                   	push   eax
c0020bbe:	e8 20 4f fe ff       	call   c0005ae3 <f_close>
c0020bc3:	83 c4 10             	add    esp,0x10
c0020bc6:	90                   	nop
c0020bc7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bcf:	74 3a                	je     c0020c0b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bd1:	eb 2d                	jmp    c0020c00 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bd3:	83 ec 0c             	sub    esp,0xc
c0020bd6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bdd:	e8 3a ed fe ff       	call   c000f91c <rfree>
c0020be2:	83 c4 10             	add    esp,0x10
c0020be5:	83 ec 04             	sub    esp,0x4
c0020be8:	6a 00                	push   0x0
c0020bea:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bf1:	50                   	push   eax
c0020bf2:	6a 00                	push   0x0
c0020bf4:	e8 36 43 fe ff       	call   c0004f2f <f_mount>
c0020bf9:	83 c4 10             	add    esp,0x10
c0020bfc:	b0 00                	mov    al,0x0
c0020bfe:	eb 12                	jmp    c0020c12 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c00:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c0020c05:	40                   	inc    eax
c0020c06:	a3 a0 1d 03 c0       	mov    ds:0xc0031da0,eax
c0020c0b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c12:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c18:	c3                   	ret    
c0020c19:	90                   	nop

c0020c1a <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020c1a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020c20:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020c28:	74 0a                	je     c0020c34 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020c2a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020c32:	75 0a                	jne    c0020c3e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020c34:	b8 04 00 00 00       	mov    eax,0x4
c0020c39:	e9 db 00 00 00       	jmp    c0020d19 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c3e:	83 ec 08             	sub    esp,0x8
c0020c41:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c48:	50                   	push   eax
c0020c49:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c50:	e8 98 54 fe ff       	call   c00060ed <f_readdir>
c0020c55:	83 c4 10             	add    esp,0x10
c0020c58:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c5f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c65:	83 ec 0c             	sub    esp,0xc
c0020c68:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c6f:	83 c0 1a             	add    eax,0x1a
c0020c72:	50                   	push   eax
c0020c73:	e8 1c fb fd ff       	call   c0000794 <strlen>
c0020c78:	83 c4 10             	add    esp,0x10
c0020c7b:	ba 00 00 00 00       	mov    edx,0x0
c0020c80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c84:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c88:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c8f:	0f b6 c0             	movzx  eax,al
c0020c92:	83 e0 10             	and    eax,0x10
c0020c95:	74 07                	je     c0020c9e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c97:	b8 02 00 00 00       	mov    eax,0x2
c0020c9c:	eb 05                	jmp    c0020ca3 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c9e:	b8 01 00 00 00       	mov    eax,0x1
c0020ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ca7:	83 ec 08             	sub    esp,0x8
c0020caa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020cb1:	83 c0 1a             	add    eax,0x1a
c0020cb4:	50                   	push   eax
c0020cb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cb9:	83 c0 10             	add    eax,0x10
c0020cbc:	50                   	push   eax
c0020cbd:	e8 72 fb fd ff       	call   c0000834 <strcpy>
c0020cc2:	83 c4 10             	add    esp,0x10
c0020cc5:	83 ec 04             	sub    esp,0x4
c0020cc8:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020ccf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cd3:	50                   	push   eax
c0020cd4:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020cdb:	e8 64 fa fd ff       	call   c0000744 <memcpy>
c0020ce0:	83 c4 10             	add    esp,0x10
c0020ce3:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020cea:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020cf0:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cf7:	84 c0                	test   al,al
c0020cf9:	75 07                	jne    c0020d02 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cfb:	b8 07 00 00 00       	mov    eax,0x7
c0020d00:	eb 17                	jmp    c0020d19 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d02:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020d09:	85 c0                	test   eax,eax
c0020d0b:	75 07                	jne    c0020d14 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020d0d:	b8 00 00 00 00       	mov    eax,0x0
c0020d12:	eb 05                	jmp    c0020d19 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d14:	b8 01 00 00 00       	mov    eax,0x1
c0020d19:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020d1f:	c3                   	ret    

c0020d20 <FAT::read(void*, unsigned long, void*, int*)>:
c0020d20:	83 ec 1c             	sub    esp,0x1c
c0020d23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d28:	74 07                	je     c0020d31 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020d2a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d2f:	75 07                	jne    c0020d38 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020d31:	b8 04 00 00 00       	mov    eax,0x4
c0020d36:	eb 3d                	jmp    c0020d75 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d3c:	50                   	push   eax
c0020d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d49:	e8 7f 46 fe ff       	call   c00053cd <f_read>
c0020d4e:	83 c4 10             	add    esp,0x10
c0020d51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d59:	89 c2                	mov    edx,eax
c0020d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d5f:	89 10                	mov    DWORD PTR [eax],edx
c0020d61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d65:	85 c0                	test   eax,eax
c0020d67:	75 07                	jne    c0020d70 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d69:	b8 00 00 00 00       	mov    eax,0x0
c0020d6e:	eb 05                	jmp    c0020d75 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d70:	b8 01 00 00 00       	mov    eax,0x1
c0020d75:	83 c4 1c             	add    esp,0x1c
c0020d78:	c3                   	ret    
c0020d79:	90                   	nop

c0020d7a <FAT::write(void*, unsigned long, void*, int*)>:
c0020d7a:	83 ec 1c             	sub    esp,0x1c
c0020d7d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d82:	74 07                	je     c0020d8b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d84:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d89:	75 07                	jne    c0020d92 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d8b:	b8 04 00 00 00       	mov    eax,0x4
c0020d90:	eb 3d                	jmp    c0020dcf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d92:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d96:	50                   	push   eax
c0020d97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da3:	e8 a5 48 fe ff       	call   c000564d <f_write>
c0020da8:	83 c4 10             	add    esp,0x10
c0020dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020daf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020db3:	89 c2                	mov    edx,eax
c0020db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020db9:	89 10                	mov    DWORD PTR [eax],edx
c0020dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dbf:	85 c0                	test   eax,eax
c0020dc1:	75 07                	jne    c0020dca <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020dc3:	b8 00 00 00 00       	mov    eax,0x0
c0020dc8:	eb 05                	jmp    c0020dcf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020dca:	b8 01 00 00 00       	mov    eax,0x1
c0020dcf:	83 c4 1c             	add    esp,0x1c
c0020dd2:	c3                   	ret    
c0020dd3:	90                   	nop

c0020dd4 <FAT::close(void*)>:
c0020dd4:	83 ec 1c             	sub    esp,0x1c
c0020dd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ddc:	75 07                	jne    c0020de5 <FAT::close(void*)+0x11>
c0020dde:	b8 04 00 00 00       	mov    eax,0x4
c0020de3:	eb 36                	jmp    c0020e1b <FAT::close(void*)+0x47>
c0020de5:	83 ec 0c             	sub    esp,0xc
c0020de8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dec:	e8 f2 4c fe ff       	call   c0005ae3 <f_close>
c0020df1:	83 c4 10             	add    esp,0x10
c0020df4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020df8:	83 ec 0c             	sub    esp,0xc
c0020dfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dff:	e8 08 eb fe ff       	call   c000f90c <free>
c0020e04:	83 c4 10             	add    esp,0x10
c0020e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e0b:	85 c0                	test   eax,eax
c0020e0d:	75 07                	jne    c0020e16 <FAT::close(void*)+0x42>
c0020e0f:	b8 00 00 00 00       	mov    eax,0x0
c0020e14:	eb 05                	jmp    c0020e1b <FAT::close(void*)+0x47>
c0020e16:	b8 01 00 00 00       	mov    eax,0x1
c0020e1b:	83 c4 1c             	add    esp,0x1c
c0020e1e:	c3                   	ret    
c0020e1f:	90                   	nop

c0020e20 <FAT::closeDir(void*)>:
c0020e20:	83 ec 1c             	sub    esp,0x1c
c0020e23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e28:	75 07                	jne    c0020e31 <FAT::closeDir(void*)+0x11>
c0020e2a:	b8 04 00 00 00       	mov    eax,0x4
c0020e2f:	eb 36                	jmp    c0020e67 <FAT::closeDir(void*)+0x47>
c0020e31:	83 ec 0c             	sub    esp,0xc
c0020e34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e38:	e8 8e 52 fe ff       	call   c00060cb <f_closedir>
c0020e3d:	83 c4 10             	add    esp,0x10
c0020e40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e44:	83 ec 0c             	sub    esp,0xc
c0020e47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e4b:	e8 bc ea fe ff       	call   c000f90c <free>
c0020e50:	83 c4 10             	add    esp,0x10
c0020e53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e57:	85 c0                	test   eax,eax
c0020e59:	75 07                	jne    c0020e62 <FAT::closeDir(void*)+0x42>
c0020e5b:	b8 00 00 00 00       	mov    eax,0x0
c0020e60:	eb 05                	jmp    c0020e67 <FAT::closeDir(void*)+0x47>
c0020e62:	b8 01 00 00 00       	mov    eax,0x1
c0020e67:	83 c4 1c             	add    esp,0x1c
c0020e6a:	c3                   	ret    
c0020e6b:	90                   	nop

c0020e6c <FAT::seek(void*, unsigned long long)>:
c0020e6c:	83 ec 2c             	sub    esp,0x2c
c0020e6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e7f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e84:	75 07                	jne    c0020e8d <FAT::seek(void*, unsigned long long)+0x21>
c0020e86:	b8 04 00 00 00       	mov    eax,0x4
c0020e8b:	eb 2f                	jmp    c0020ebc <FAT::seek(void*, unsigned long long)+0x50>
c0020e8d:	83 ec 04             	sub    esp,0x4
c0020e90:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e9c:	e8 71 4c fe ff       	call   c0005b12 <f_lseek>
c0020ea1:	83 c4 10             	add    esp,0x10
c0020ea4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020eac:	85 c0                	test   eax,eax
c0020eae:	75 07                	jne    c0020eb7 <FAT::seek(void*, unsigned long long)+0x4b>
c0020eb0:	b8 00 00 00 00       	mov    eax,0x0
c0020eb5:	eb 05                	jmp    c0020ebc <FAT::seek(void*, unsigned long long)+0x50>
c0020eb7:	b8 01 00 00 00       	mov    eax,0x1
c0020ebc:	83 c4 2c             	add    esp,0x2c
c0020ebf:	c3                   	ret    

c0020ec0 <fatWrapperReadDisk>:
c0020ec0:	83 ec 1c             	sub    esp,0x1c
c0020ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ecf:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ed2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020eda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020edf:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0020ee6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020eea:	83 ec 0c             	sub    esp,0xc
c0020eed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ef1:	52                   	push   edx
c0020ef2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020efa:	50                   	push   eax
c0020efb:	e8 28 59 ff ff       	call   c0016828 <LogicalDisk::read(unsigned long long, int, void*)>
c0020f00:	83 c4 20             	add    esp,0x20
c0020f03:	83 c4 1c             	add    esp,0x1c
c0020f06:	c3                   	ret    

c0020f07 <fatWrapperWriteDisk>:
c0020f07:	83 ec 1c             	sub    esp,0x1c
c0020f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f0e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f16:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f21:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f26:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0020f2d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f31:	83 ec 0c             	sub    esp,0xc
c0020f34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f38:	52                   	push   edx
c0020f39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f41:	50                   	push   eax
c0020f42:	e8 4d 59 ff ff       	call   c0016894 <LogicalDisk::write(unsigned long long, int, void*)>
c0020f47:	83 c4 20             	add    esp,0x20
c0020f4a:	83 c4 1c             	add    esp,0x1c
c0020f4d:	c3                   	ret    

c0020f4e <fatWrapperIoctl>:
c0020f4e:	53                   	push   ebx
c0020f4f:	83 ec 28             	sub    esp,0x28
c0020f52:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f5a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f5e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f62:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f67:	75 31                	jne    c0020f9a <fatWrapperIoctl+0x4c>
c0020f69:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f71:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f76:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0020f7d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f83:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f8d:	66 89 02             	mov    WORD PTR [edx],ax
c0020f90:	b8 00 00 00 00       	mov    eax,0x0
c0020f95:	e9 b2 00 00 00       	jmp    c002104c <fatWrapperIoctl+0xfe>
c0020f9a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f9f:	75 6a                	jne    c002100b <fatWrapperIoctl+0xbd>
c0020fa1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fa5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020fa9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020fae:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0020fb5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fbb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020fc1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020fc7:	89 c8                	mov    eax,ecx
c0020fc9:	89 da                	mov    edx,ebx
c0020fcb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020fcf:	c1 e0 0a             	shl    eax,0xa
c0020fd2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020fd7:	8b 0c 8d 80 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1280]
c0020fde:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020fe4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fea:	89 cb                	mov    ebx,ecx
c0020fec:	c1 fb 1f             	sar    ebx,0x1f
c0020fef:	53                   	push   ebx
c0020ff0:	51                   	push   ecx
c0020ff1:	52                   	push   edx
c0020ff2:	50                   	push   eax
c0020ff3:	e8 c4 5a 00 00       	call   c0026abc <__udivdi3>
c0020ff8:	83 c4 10             	add    esp,0x10
c0020ffb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fff:	89 01                	mov    DWORD PTR [ecx],eax
c0021001:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021004:	b8 00 00 00 00       	mov    eax,0x0
c0021009:	eb 41                	jmp    c002104c <fatWrapperIoctl+0xfe>
c002100b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021010:	75 07                	jne    c0021019 <fatWrapperIoctl+0xcb>
c0021012:	b8 00 00 00 00       	mov    eax,0x0
c0021017:	eb 33                	jmp    c002104c <fatWrapperIoctl+0xfe>
c0021019:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002101e:	75 19                	jne    c0021039 <fatWrapperIoctl+0xeb>
c0021020:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021024:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002102c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021032:	b8 00 00 00 00       	mov    eax,0x0
c0021037:	eb 13                	jmp    c002104c <fatWrapperIoctl+0xfe>
c0021039:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002103e:	75 07                	jne    c0021047 <fatWrapperIoctl+0xf9>
c0021040:	b8 00 00 00 00       	mov    eax,0x0
c0021045:	eb 05                	jmp    c002104c <fatWrapperIoctl+0xfe>
c0021047:	b8 04 00 00 00       	mov    eax,0x4
c002104c:	83 c4 28             	add    esp,0x28
c002104f:	5b                   	pop    ebx
c0021050:	c3                   	ret    
c0021051:	90                   	nop

c0021052 <FAT::FAT()>:
c0021052:	83 ec 1c             	sub    esp,0x1c
c0021055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021059:	83 ec 0c             	sub    esp,0xc
c002105c:	50                   	push   eax
c002105d:	e8 aa 22 ff ff       	call   c001330c <Filesystem::Filesystem()>
c0021062:	83 c4 10             	add    esp,0x10
c0021065:	ba d8 cb 02 c0       	mov    edx,0xc002cbd8
c002106a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002106e:	89 10                	mov    DWORD PTR [eax],edx
c0021070:	c7 05 a0 1d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031da0,0x0
c002107a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021082:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021087:	7f 15                	jg     c002109e <FAT::FAT()+0x4c>
c0021089:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002108d:	c7 04 85 c0 1d 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce240],0xffffffff
c0021098:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002109c:	eb e4                	jmp    c0021082 <FAT::FAT()+0x30>
c002109e:	90                   	nop
c002109f:	83 c4 1c             	add    esp,0x1c
c00210a2:	c3                   	ret    
c00210a3:	90                   	nop

c00210a4 <FAT::fixFilepath(char*)>:
c00210a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210a8:	8a 00                	mov    al,BYTE PTR [eax]
c00210aa:	3c 40                	cmp    al,0x40
c00210ac:	7e 2c                	jle    c00210da <FAT::fixFilepath(char*)+0x36>
c00210ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210b2:	8a 00                	mov    al,BYTE PTR [eax]
c00210b4:	83 e8 41             	sub    eax,0x41
c00210b7:	88 c2                	mov    dl,al
c00210b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210bd:	88 10                	mov    BYTE PTR [eax],dl
c00210bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210c3:	8a 00                	mov    al,BYTE PTR [eax]
c00210c5:	0f be c0             	movsx  eax,al
c00210c8:	8b 04 85 c0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce240]
c00210cf:	83 c0 30             	add    eax,0x30
c00210d2:	88 c2                	mov    dl,al
c00210d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210d8:	88 10                	mov    BYTE PTR [eax],dl
c00210da:	90                   	nop
c00210db:	c3                   	ret    

c00210dc <FAT::open(char const*, void**, FileOpenMode)>:
c00210dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210ea:	74 0a                	je     c00210f6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210f4:	75 0a                	jne    c0021100 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210f6:	b8 04 00 00 00       	mov    eax,0x4
c00210fb:	e9 fd 00 00 00       	jmp    c00211fd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021100:	83 ec 08             	sub    esp,0x8
c0021103:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002110a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002110e:	50                   	push   eax
c002110f:	e8 20 f7 fd ff       	call   c0000834 <strcpy>
c0021114:	83 c4 10             	add    esp,0x10
c0021117:	83 ec 08             	sub    esp,0x8
c002111a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002111e:	50                   	push   eax
c002111f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021126:	e8 79 ff ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c002112b:	83 c4 10             	add    esp,0x10
c002112e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021136:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002113d:	83 e0 01             	and    eax,0x1
c0021140:	74 08                	je     c002114a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021142:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002114a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021151:	83 e0 04             	and    eax,0x4
c0021154:	74 10                	je     c0021166 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021156:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002115e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021166:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002116d:	83 e0 02             	and    eax,0x2
c0021170:	74 08                	je     c002117a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021172:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002117a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021181:	83 e0 08             	and    eax,0x8
c0021184:	74 08                	je     c002118e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021186:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002118e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021195:	83 e0 10             	and    eax,0x10
c0021198:	74 08                	je     c00211a2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002119a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00211a2:	83 ec 0c             	sub    esp,0xc
c00211a5:	68 50 02 00 00       	push   0x250
c00211aa:	e8 4d e7 fe ff       	call   c000f8fc <malloc>
c00211af:	83 c4 10             	add    esp,0x10
c00211b2:	89 c2                	mov    edx,eax
c00211b4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211bb:	89 10                	mov    DWORD PTR [eax],edx
c00211bd:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00211c5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ce:	83 ec 04             	sub    esp,0x4
c00211d1:	52                   	push   edx
c00211d2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00211d6:	52                   	push   edx
c00211d7:	50                   	push   eax
c00211d8:	e8 b4 3d fe ff       	call   c0004f91 <f_open>
c00211dd:	83 c4 10             	add    esp,0x10
c00211e0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00211e7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211ef:	74 07                	je     c00211f8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211f1:	b8 01 00 00 00       	mov    eax,0x1
c00211f6:	eb 05                	jmp    c00211fd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211f8:	b8 00 00 00 00       	mov    eax,0x0
c00211fd:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021203:	c3                   	ret    

c0021204 <FAT::openDir(char const*, void**)>:
c0021204:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002120a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021212:	74 0a                	je     c002121e <FAT::openDir(char const*, void**)+0x1a>
c0021214:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002121c:	75 07                	jne    c0021225 <FAT::openDir(char const*, void**)+0x21>
c002121e:	b8 04 00 00 00       	mov    eax,0x4
c0021223:	eb 7d                	jmp    c00212a2 <FAT::openDir(char const*, void**)+0x9e>
c0021225:	83 ec 08             	sub    esp,0x8
c0021228:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002122f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021233:	50                   	push   eax
c0021234:	e8 fb f5 fd ff       	call   c0000834 <strcpy>
c0021239:	83 c4 10             	add    esp,0x10
c002123c:	83 ec 08             	sub    esp,0x8
c002123f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021243:	50                   	push   eax
c0021244:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002124b:	e8 54 fe ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c0021250:	83 c4 10             	add    esp,0x10
c0021253:	83 ec 0c             	sub    esp,0xc
c0021256:	6a 4c                	push   0x4c
c0021258:	e8 9f e6 fe ff       	call   c000f8fc <malloc>
c002125d:	83 c4 10             	add    esp,0x10
c0021260:	89 c2                	mov    edx,eax
c0021262:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021269:	89 10                	mov    DWORD PTR [eax],edx
c002126b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021272:	8b 00                	mov    eax,DWORD PTR [eax]
c0021274:	83 ec 08             	sub    esp,0x8
c0021277:	8d 54 24 14          	lea    edx,[esp+0x14]
c002127b:	52                   	push   edx
c002127c:	50                   	push   eax
c002127d:	e8 47 4d fe ff       	call   c0005fc9 <f_opendir>
c0021282:	83 c4 10             	add    esp,0x10
c0021285:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002128c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021294:	74 07                	je     c002129d <FAT::openDir(char const*, void**)+0x99>
c0021296:	b8 01 00 00 00       	mov    eax,0x1
c002129b:	eb 05                	jmp    c00212a2 <FAT::openDir(char const*, void**)+0x9e>
c002129d:	b8 00 00 00 00       	mov    eax,0x0
c00212a2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212a8:	c3                   	ret    
c00212a9:	90                   	nop

c00212aa <FAT::stat(char const*, unsigned long long*, bool*)>:
c00212aa:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00212b0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00212b8:	75 0a                	jne    c00212c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00212ba:	b8 04 00 00 00       	mov    eax,0x4
c00212bf:	e9 c9 00 00 00       	jmp    c002138d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212c4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00212cc:	75 0a                	jne    c00212d8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00212ce:	b8 04 00 00 00       	mov    eax,0x4
c00212d3:	e9 b5 00 00 00       	jmp    c002138d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212d8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00212e0:	75 0a                	jne    c00212ec <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00212e2:	b8 04 00 00 00       	mov    eax,0x4
c00212e7:	e9 a1 00 00 00       	jmp    c002138d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ec:	83 ec 08             	sub    esp,0x8
c00212ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212f6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212fd:	50                   	push   eax
c00212fe:	e8 31 f5 fd ff       	call   c0000834 <strcpy>
c0021303:	83 c4 10             	add    esp,0x10
c0021306:	83 ec 08             	sub    esp,0x8
c0021309:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021310:	50                   	push   eax
c0021311:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021318:	e8 87 fd ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c002131d:	83 c4 10             	add    esp,0x10
c0021320:	83 ec 08             	sub    esp,0x8
c0021323:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021327:	50                   	push   eax
c0021328:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002132f:	50                   	push   eax
c0021330:	e8 53 4e fe ff       	call   c0006188 <f_stat>
c0021335:	83 c4 10             	add    esp,0x10
c0021338:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002133f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021346:	85 c0                	test   eax,eax
c0021348:	74 07                	je     c0021351 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002134a:	83 f8 04             	cmp    eax,0x4
c002134d:	74 32                	je     c0021381 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002134f:	eb 37                	jmp    c0021388 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021351:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021355:	0f b6 c0             	movzx  eax,al
c0021358:	83 e0 10             	and    eax,0x10
c002135b:	0f 95 c2             	setne  dl
c002135e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021365:	88 10                	mov    BYTE PTR [eax],dl
c0021367:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002136a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002136e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021375:	89 01                	mov    DWORD PTR [ecx],eax
c0021377:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002137a:	b8 00 00 00 00       	mov    eax,0x0
c002137f:	eb 0c                	jmp    c002138d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021381:	b8 02 00 00 00       	mov    eax,0x2
c0021386:	eb 05                	jmp    c002138d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021388:	b8 01 00 00 00       	mov    eax,0x1
c002138d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021393:	c3                   	ret    

c0021394 <FAT::unlink(char const*)>:
c0021394:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002139a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213a2:	75 07                	jne    c00213ab <FAT::unlink(char const*)+0x17>
c00213a4:	b8 04 00 00 00       	mov    eax,0x4
c00213a9:	eb 5c                	jmp    c0021407 <FAT::unlink(char const*)+0x73>
c00213ab:	83 ec 08             	sub    esp,0x8
c00213ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213b9:	50                   	push   eax
c00213ba:	e8 75 f4 fd ff       	call   c0000834 <strcpy>
c00213bf:	83 c4 10             	add    esp,0x10
c00213c2:	83 ec 08             	sub    esp,0x8
c00213c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213c9:	50                   	push   eax
c00213ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213d1:	e8 ce fc ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c00213d6:	83 c4 10             	add    esp,0x10
c00213d9:	83 ec 0c             	sub    esp,0xc
c00213dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213e0:	50                   	push   eax
c00213e1:	e8 f4 50 fe ff       	call   c00064da <f_unlink>
c00213e6:	83 c4 10             	add    esp,0x10
c00213e9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213f0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213f7:	85 c0                	test   eax,eax
c00213f9:	75 07                	jne    c0021402 <FAT::unlink(char const*)+0x6e>
c00213fb:	b8 00 00 00 00       	mov    eax,0x0
c0021400:	eb 05                	jmp    c0021407 <FAT::unlink(char const*)+0x73>
c0021402:	b8 01 00 00 00       	mov    eax,0x1
c0021407:	81 c4 1c 01 00 00    	add    esp,0x11c
c002140d:	c3                   	ret    

c002140e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002140e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021414:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002141b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021422:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021426:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002142a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021432:	75 0a                	jne    c002143e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021434:	b8 04 00 00 00       	mov    eax,0x4
c0021439:	e9 1c 01 00 00       	jmp    c002155a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002143e:	83 ec 08             	sub    esp,0x8
c0021441:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021448:	8d 44 24 24          	lea    eax,[esp+0x24]
c002144c:	50                   	push   eax
c002144d:	e8 e2 f3 fd ff       	call   c0000834 <strcpy>
c0021452:	83 c4 10             	add    esp,0x10
c0021455:	83 ec 08             	sub    esp,0x8
c0021458:	8d 44 24 20          	lea    eax,[esp+0x20]
c002145c:	50                   	push   eax
c002145d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021464:	e8 3b fc ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c0021469:	83 c4 10             	add    esp,0x10
c002146c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021474:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002147c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021481:	83 e0 01             	and    eax,0x1
c0021484:	74 08                	je     c002148e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021486:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002148e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021493:	83 e0 02             	and    eax,0x2
c0021496:	74 08                	je     c00214a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021498:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00214a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214a5:	83 e0 04             	and    eax,0x4
c00214a8:	74 08                	je     c00214b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00214aa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00214b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214b7:	83 e0 08             	and    eax,0x8
c00214ba:	74 08                	je     c00214c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00214bc:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00214c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214c9:	83 e0 01             	and    eax,0x1
c00214cc:	74 08                	je     c00214d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00214ce:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00214d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214db:	83 e0 02             	and    eax,0x2
c00214de:	74 08                	je     c00214e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00214e0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00214e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214ed:	83 e0 04             	and    eax,0x4
c00214f0:	74 08                	je     c00214fa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214f2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214ff:	83 e0 08             	and    eax,0x8
c0021502:	74 08                	je     c002150c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021504:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002150c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021513:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002151a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021522:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002152a:	83 ec 04             	sub    esp,0x4
c002152d:	52                   	push   edx
c002152e:	50                   	push   eax
c002152f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021533:	50                   	push   eax
c0021534:	e8 43 56 fe ff       	call   c0006b7c <f_chmod>
c0021539:	83 c4 10             	add    esp,0x10
c002153c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021543:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002154a:	85 c0                	test   eax,eax
c002154c:	75 07                	jne    c0021555 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002154e:	b8 00 00 00 00       	mov    eax,0x0
c0021553:	eb 05                	jmp    c002155a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021555:	b8 01 00 00 00       	mov    eax,0x1
c002155a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021560:	c3                   	ret    
c0021561:	90                   	nop

c0021562 <FAT::rename(char const*, char const*)>:
c0021562:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021568:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021570:	74 0a                	je     c002157c <FAT::rename(char const*, char const*)+0x1a>
c0021572:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002157a:	75 0a                	jne    c0021586 <FAT::rename(char const*, char const*)+0x24>
c002157c:	b8 04 00 00 00       	mov    eax,0x4
c0021581:	e9 98 00 00 00       	jmp    c002161e <FAT::rename(char const*, char const*)+0xbc>
c0021586:	83 ec 08             	sub    esp,0x8
c0021589:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021590:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021597:	50                   	push   eax
c0021598:	e8 97 f2 fd ff       	call   c0000834 <strcpy>
c002159d:	83 c4 10             	add    esp,0x10
c00215a0:	83 ec 08             	sub    esp,0x8
c00215a3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00215aa:	50                   	push   eax
c00215ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215b2:	e8 ed fa ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c00215b7:	83 c4 10             	add    esp,0x10
c00215ba:	83 ec 08             	sub    esp,0x8
c00215bd:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00215c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215c8:	50                   	push   eax
c00215c9:	e8 66 f2 fd ff       	call   c0000834 <strcpy>
c00215ce:	83 c4 10             	add    esp,0x10
c00215d1:	83 ec 08             	sub    esp,0x8
c00215d4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215d8:	50                   	push   eax
c00215d9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215e0:	e8 bf fa ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c00215e5:	83 c4 10             	add    esp,0x10
c00215e8:	83 ec 08             	sub    esp,0x8
c00215eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215ef:	50                   	push   eax
c00215f0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215f7:	50                   	push   eax
c00215f8:	e8 8c 52 fe ff       	call   c0006889 <f_rename>
c00215fd:	83 c4 10             	add    esp,0x10
c0021600:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021607:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002160e:	85 c0                	test   eax,eax
c0021610:	75 07                	jne    c0021619 <FAT::rename(char const*, char const*)+0xb7>
c0021612:	b8 00 00 00 00       	mov    eax,0x0
c0021617:	eb 05                	jmp    c002161e <FAT::rename(char const*, char const*)+0xbc>
c0021619:	b8 01 00 00 00       	mov    eax,0x1
c002161e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021624:	c3                   	ret    
c0021625:	90                   	nop

c0021626 <FAT::mkdir(char const*)>:
c0021626:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002162c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021634:	75 07                	jne    c002163d <FAT::mkdir(char const*)+0x17>
c0021636:	b8 04 00 00 00       	mov    eax,0x4
c002163b:	eb 5c                	jmp    c0021699 <FAT::mkdir(char const*)+0x73>
c002163d:	83 ec 08             	sub    esp,0x8
c0021640:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021647:	8d 44 24 18          	lea    eax,[esp+0x18]
c002164b:	50                   	push   eax
c002164c:	e8 e3 f1 fd ff       	call   c0000834 <strcpy>
c0021651:	83 c4 10             	add    esp,0x10
c0021654:	83 ec 08             	sub    esp,0x8
c0021657:	8d 44 24 14          	lea    eax,[esp+0x14]
c002165b:	50                   	push   eax
c002165c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021663:	e8 3c fa ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c0021668:	83 c4 10             	add    esp,0x10
c002166b:	83 ec 0c             	sub    esp,0xc
c002166e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021672:	50                   	push   eax
c0021673:	e8 e5 4f fe ff       	call   c000665d <f_mkdir>
c0021678:	83 c4 10             	add    esp,0x10
c002167b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021682:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021689:	85 c0                	test   eax,eax
c002168b:	75 07                	jne    c0021694 <FAT::mkdir(char const*)+0x6e>
c002168d:	b8 00 00 00 00       	mov    eax,0x0
c0021692:	eb 05                	jmp    c0021699 <FAT::mkdir(char const*)+0x73>
c0021694:	b8 01 00 00 00       	mov    eax,0x1
c0021699:	81 c4 1c 01 00 00    	add    esp,0x11c
c002169f:	c3                   	ret    

c00216a0 <FAT::exists(char const*)>:
c00216a0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00216a6:	83 ec 08             	sub    esp,0x8
c00216a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216b4:	50                   	push   eax
c00216b5:	e8 7a f1 fd ff       	call   c0000834 <strcpy>
c00216ba:	83 c4 10             	add    esp,0x10
c00216bd:	83 ec 08             	sub    esp,0x8
c00216c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216c4:	50                   	push   eax
c00216c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216cc:	e8 d3 f9 ff ff       	call   c00210a4 <FAT::fixFilepath(char*)>
c00216d1:	83 c4 10             	add    esp,0x10
c00216d4:	83 ec 08             	sub    esp,0x8
c00216d7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00216de:	50                   	push   eax
c00216df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216e3:	50                   	push   eax
c00216e4:	e8 9f 4a fe ff       	call   c0006188 <f_stat>
c00216e9:	83 c4 10             	add    esp,0x10
c00216ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216fa:	85 c0                	test   eax,eax
c00216fc:	75 04                	jne    c0021702 <FAT::exists(char const*)+0x62>
c00216fe:	b0 01                	mov    al,0x1
c0021700:	eb 02                	jmp    c0021704 <FAT::exists(char const*)+0x64>
c0021702:	b0 00                	mov    al,0x0
c0021704:	81 c4 2c 02 00 00    	add    esp,0x22c
c002170a:	c3                   	ret    
c002170b:	90                   	nop

c002170c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002170c:	b8 08 00 00 00       	mov    eax,0x8
c0021711:	c3                   	ret    

c0021712 <ISO9660::seek(void*, unsigned long long)>:
c0021712:	53                   	push   ebx
c0021713:	b8 04 00 00 00       	mov    eax,0x4
c0021718:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002171c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021720:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021724:	85 d2                	test   edx,edx
c0021726:	74 17                	je     c002173f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021728:	89 c8                	mov    eax,ecx
c002172a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002172d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021730:	b8 01 00 00 00       	mov    eax,0x1
c0021735:	73 08                	jae    c002173f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021737:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002173a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002173d:	31 c0                	xor    eax,eax
c002173f:	5b                   	pop    ebx
c0021740:	c3                   	ret    
c0021741:	90                   	nop

c0021742 <ISO9660::tell(void*, unsigned long long*)>:
c0021742:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021746:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002174a:	85 d2                	test   edx,edx
c002174c:	74 12                	je     c0021760 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002174e:	85 c0                	test   eax,eax
c0021750:	74 0e                	je     c0021760 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021752:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021755:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021758:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002175b:	89 10                	mov    DWORD PTR [eax],edx
c002175d:	31 c0                	xor    eax,eax
c002175f:	c3                   	ret    
c0021760:	b8 04 00 00 00       	mov    eax,0x4
c0021765:	c3                   	ret    

c0021766 <ISO9660::getName()>:
c0021766:	b8 34 cc 02 c0       	mov    eax,0xc002cc34
c002176b:	c3                   	ret    

c002176c <ISO9660::stat(void*, unsigned long long*)>:
c002176c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021770:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021774:	85 d2                	test   edx,edx
c0021776:	74 12                	je     c002178a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021778:	85 c0                	test   eax,eax
c002177a:	74 0e                	je     c002178a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002177c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002177f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021782:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021785:	89 10                	mov    DWORD PTR [eax],edx
c0021787:	31 c0                	xor    eax,eax
c0021789:	c3                   	ret    
c002178a:	b8 04 00 00 00       	mov    eax,0x4
c002178f:	c3                   	ret    

c0021790 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021790:	b8 01 00 00 00       	mov    eax,0x1
c0021795:	c3                   	ret    

c0021796 <ISO9660::unlink(char const*)>:
c0021796:	b8 01 00 00 00       	mov    eax,0x1
c002179b:	c3                   	ret    

c002179c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002179c:	b8 01 00 00 00       	mov    eax,0x1
c00217a1:	c3                   	ret    

c00217a2 <ISO9660::rename(char const*, char const*)>:
c00217a2:	b8 01 00 00 00       	mov    eax,0x1
c00217a7:	c3                   	ret    

c00217a8 <ISO9660::mkdir(char const*)>:
c00217a8:	b8 01 00 00 00       	mov    eax,0x1
c00217ad:	c3                   	ret    

c00217ae <ISO9660::close(void*)>:
c00217ae:	83 ec 0c             	sub    esp,0xc
c00217b1:	b8 04 00 00 00       	mov    eax,0x4
c00217b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217ba:	85 d2                	test   edx,edx
c00217bc:	74 0e                	je     c00217cc <ISO9660::close(void*)+0x1e>
c00217be:	83 ec 0c             	sub    esp,0xc
c00217c1:	52                   	push   edx
c00217c2:	e8 45 e1 fe ff       	call   c000f90c <free>
c00217c7:	83 c4 10             	add    esp,0x10
c00217ca:	31 c0                	xor    eax,eax
c00217cc:	83 c4 0c             	add    esp,0xc
c00217cf:	c3                   	ret    

c00217d0 <ISO9660::closeDir(void*)>:
c00217d0:	83 ec 0c             	sub    esp,0xc
c00217d3:	b8 04 00 00 00       	mov    eax,0x4
c00217d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217dc:	85 d2                	test   edx,edx
c00217de:	74 0e                	je     c00217ee <ISO9660::closeDir(void*)+0x1e>
c00217e0:	83 ec 0c             	sub    esp,0xc
c00217e3:	52                   	push   edx
c00217e4:	e8 23 e1 fe ff       	call   c000f90c <free>
c00217e9:	83 c4 10             	add    esp,0x10
c00217ec:	31 c0                	xor    eax,eax
c00217ee:	83 c4 0c             	add    esp,0xc
c00217f1:	c3                   	ret    

c00217f2 <ISO9660::~ISO9660()>:
c00217f2:	83 ec 0c             	sub    esp,0xc
c00217f5:	ba 98 cc 02 c0       	mov    edx,0xc002cc98
c00217fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217fe:	89 10                	mov    DWORD PTR [eax],edx
c0021800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021804:	83 ec 0c             	sub    esp,0xc
c0021807:	50                   	push   eax
c0021808:	e8 23 1b ff ff       	call   c0013330 <Filesystem::~Filesystem()>
c002180d:	83 c4 10             	add    esp,0x10
c0021810:	90                   	nop
c0021811:	83 c4 0c             	add    esp,0xc
c0021814:	c3                   	ret    
c0021815:	90                   	nop

c0021816 <ISO9660::~ISO9660()>:
c0021816:	83 ec 0c             	sub    esp,0xc
c0021819:	83 ec 0c             	sub    esp,0xc
c002181c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021820:	e8 cd ff ff ff       	call   c00217f2 <ISO9660::~ISO9660()>
c0021825:	83 c4 10             	add    esp,0x10
c0021828:	83 ec 08             	sub    esp,0x8
c002182b:	6a 08                	push   0x8
c002182d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021831:	e8 f1 16 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0021836:	83 c4 10             	add    esp,0x10
c0021839:	83 c4 0c             	add    esp,0xc
c002183c:	c3                   	ret    

c002183d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002183d:	55                   	push   ebp
c002183e:	31 c9                	xor    ecx,ecx
c0021840:	57                   	push   edi
c0021841:	56                   	push   esi
c0021842:	53                   	push   ebx
c0021843:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021847:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002184b:	89 eb                	mov    ebx,ebp
c002184d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021851:	39 ce                	cmp    esi,ecx
c0021853:	7e 17                	jle    c002186c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021855:	31 d2                	xor    edx,edx
c0021857:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002185b:	7d 13                	jge    c0021870 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002185d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021861:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021864:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021867:	75 0d                	jne    c0021876 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021869:	42                   	inc    edx
c002186a:	eb eb                	jmp    c0021857 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002186c:	31 c0                	xor    eax,eax
c002186e:	eb 0a                	jmp    c002187a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021870:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021874:	eb 04                	jmp    c002187a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021876:	41                   	inc    ecx
c0021877:	43                   	inc    ebx
c0021878:	eb d7                	jmp    c0021851 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002187a:	5b                   	pop    ebx
c002187b:	5e                   	pop    esi
c002187c:	5f                   	pop    edi
c002187d:	5d                   	pop    ebp
c002187e:	c3                   	ret    

c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002187f:	56                   	push   esi
c0021880:	53                   	push   ebx
c0021881:	52                   	push   edx
c0021882:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021886:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002188a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002188e:	39 0d a0 1e 03 c0    	cmp    DWORD PTR ds:0xc0031ea0,ecx
c0021894:	75 08                	jne    c002189e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021896:	38 05 f4 dc 02 c0    	cmp    BYTE PTR ds:0xc002dcf4,al
c002189c:	74 2b                	je     c00218c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002189e:	83 ec 0c             	sub    esp,0xc
c00218a1:	a2 f4 dc 02 c0       	mov    ds:0xc002dcf4,al
c00218a6:	68 c0 1e 03 c0       	push   0xc0031ec0
c00218ab:	0f be c0             	movsx  eax,al
c00218ae:	6a 01                	push   0x1
c00218b0:	89 0d a0 1e 03 c0    	mov    DWORD PTR ds:0xc0031ea0,ecx
c00218b6:	31 db                	xor    ebx,ebx
c00218b8:	53                   	push   ebx
c00218b9:	51                   	push   ecx
c00218ba:	ff 34 85 7c ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1384]
c00218c1:	e8 62 4f ff ff       	call   c0016828 <LogicalDisk::read(unsigned long long, int, void*)>
c00218c6:	83 c4 20             	add    esp,0x20
c00218c9:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00218d1:	c7 44 24 14 c0 1e 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ec0
c00218d9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00218dd:	58                   	pop    eax
c00218de:	5b                   	pop    ebx
c00218df:	5e                   	pop    esi
c00218e0:	e9 5f ee fd ff       	jmp    c0000744 <memcpy>
c00218e5:	90                   	nop

c00218e6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00218e6:	81 ec 10 08 00 00    	sub    esp,0x810
c00218ec:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218f3:	83 c0 41             	add    eax,0x41
c00218f6:	0f be c0             	movsx  eax,al
c00218f9:	50                   	push   eax
c00218fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218fe:	50                   	push   eax
c00218ff:	6a 10                	push   0x10
c0021901:	e8 79 ff ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021906:	83 c4 10             	add    esp,0x10
c0021909:	31 c0                	xor    eax,eax
c002190b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021910:	75 1d                	jne    c002192f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021912:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021917:	75 16                	jne    c002192f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021919:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002191e:	75 0f                	jne    c002192f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021920:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021925:	75 08                	jne    c002192f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021927:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002192c:	0f 94 c0             	sete   al
c002192f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021935:	c3                   	ret    

c0021936 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021936:	55                   	push   ebp
c0021937:	57                   	push   edi
c0021938:	56                   	push   esi
c0021939:	53                   	push   ebx
c002193a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021940:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021947:	85 ed                	test   ebp,ebp
c0021949:	0f 84 d6 01 00 00    	je     c0021b25 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002194f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021957:	0f 84 c8 01 00 00    	je     c0021b25 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002195d:	b8 01 00 00 00       	mov    eax,0x1
c0021962:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021966:	0f 85 be 01 00 00    	jne    c0021b2a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002196c:	31 d2                	xor    edx,edx
c002196e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021975:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021978:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002197b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002197f:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021982:	89 04 24             	mov    DWORD PTR [esp],eax
c0021985:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021989:	01 f0                	add    eax,esi
c002198b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002198e:	11 fa                	adc    edx,edi
c0021990:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021994:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021998:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002199c:	19 d1                	sbb    ecx,edx
c002199e:	72 0a                	jb     c00219aa <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00219a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00219a8:	eb 13                	jmp    c00219bd <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00219aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219b2:	29 f0                	sub    eax,esi
c00219b4:	19 fa                	sbb    edx,edi
c00219b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00219b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00219c0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00219c3:	0f a4 c2 0b          	shld   edx,eax,0xb
c00219c7:	51                   	push   ecx
c00219c8:	c1 e0 0b             	shl    eax,0xb
c00219cb:	01 c6                	add    esi,eax
c00219cd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d1:	11 d7                	adc    edi,edx
c00219d3:	50                   	push   eax
c00219d4:	89 fa                	mov    edx,edi
c00219d6:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00219da:	89 f0                	mov    eax,esi
c00219dc:	53                   	push   ebx
c00219dd:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219e1:	50                   	push   eax
c00219e2:	e8 98 fe ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219eb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219f2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219f8:	83 c4 10             	add    esp,0x10
c00219fb:	b8 00 08 00 00       	mov    eax,0x800
c0021a00:	29 d0                	sub    eax,edx
c0021a02:	39 c1                	cmp    ecx,eax
c0021a04:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021a08:	83 d9 00             	sbb    ecx,0x0
c0021a0b:	7d 1c                	jge    c0021a29 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021a0d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021a12:	75 12                	jne    c0021a26 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021a14:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a21:	e9 fb 00 00 00       	jmp    c0021b21 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021a26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a29:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021a2c:	31 d2                	xor    edx,edx
c0021a2e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021a32:	39 c2                	cmp    edx,eax
c0021a34:	7d 14                	jge    c0021a4a <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021a36:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021a3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a41:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021a44:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021a47:	42                   	inc    edx
c0021a48:	eb e8                	jmp    c0021a32 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a4a:	89 c3                	mov    ebx,eax
c0021a4c:	85 c0                	test   eax,eax
c0021a4e:	79 02                	jns    c0021a52 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a50:	31 db                	xor    ebx,ebx
c0021a52:	99                   	cdq    
c0021a53:	01 c3                	add    ebx,eax
c0021a55:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a5c:	01 c6                	add    esi,eax
c0021a5e:	11 d7                	adc    edi,edx
c0021a60:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a64:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a68:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a6b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a6f:	29 c6                	sub    esi,eax
c0021a71:	19 d7                	sbb    edi,edx
c0021a73:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a76:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a7a:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a7f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a82:	b8 00 00 00 00       	mov    eax,0x0
c0021a87:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a8b:	7d 3e                	jge    c0021acb <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a8d:	52                   	push   edx
c0021a8e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a92:	50                   	push   eax
c0021a93:	53                   	push   ebx
c0021a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a9c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021aa0:	50                   	push   eax
c0021aa1:	e8 d9 fd ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aa6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021aae:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021ab3:	81 c3 00 08 00 00    	add    ebx,0x800
c0021ab9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021ac1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021ac6:	83 c4 10             	add    esp,0x10
c0021ac9:	eb af                	jmp    c0021a7a <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021acf:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021ad2:	74 32                	je     c0021b06 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021ad4:	50                   	push   eax
c0021ad5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ad9:	50                   	push   eax
c0021ada:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ade:	50                   	push   eax
c0021adf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021ae3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021ae7:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021aeb:	56                   	push   esi
c0021aec:	e8 8e fd ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021af1:	83 c4 0c             	add    esp,0xc
c0021af4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021af8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021afc:	50                   	push   eax
c0021afd:	53                   	push   ebx
c0021afe:	e8 41 ec fd ff       	call   c0000744 <memcpy>
c0021b03:	83 c4 10             	add    esp,0x10
c0021b06:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b0d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021b15:	89 38                	mov    DWORD PTR [eax],edi
c0021b17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b1b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b1e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b21:	31 c0                	xor    eax,eax
c0021b23:	eb 05                	jmp    c0021b2a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b25:	b8 04 00 00 00       	mov    eax,0x4
c0021b2a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021b30:	5b                   	pop    ebx
c0021b31:	5e                   	pop    esi
c0021b32:	5f                   	pop    edi
c0021b33:	5d                   	pop    ebp
c0021b34:	c3                   	ret    
c0021b35:	90                   	nop

c0021b36 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021b36:	55                   	push   ebp
c0021b37:	57                   	push   edi
c0021b38:	56                   	push   esi
c0021b39:	53                   	push   ebx
c0021b3a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021b40:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021b47:	85 f6                	test   esi,esi
c0021b49:	0f 84 64 02 00 00    	je     c0021db3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b4f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b57:	0f 84 56 02 00 00    	je     c0021db3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b5d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b60:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b63:	75 0a                	jne    c0021b6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b65:	b8 07 00 00 00       	mov    eax,0x7
c0021b6a:	e9 49 02 00 00       	jmp    c0021db8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b6f:	50                   	push   eax
c0021b70:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b74:	50                   	push   eax
c0021b75:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b7c:	53                   	push   ebx
c0021b7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b7f:	c1 e0 0b             	shl    eax,0xb
c0021b82:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b85:	c1 e8 0b             	shr    eax,0xb
c0021b88:	50                   	push   eax
c0021b89:	e8 f1 fc ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b8e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b91:	83 c4 10             	add    esp,0x10
c0021b94:	89 c1                	mov    ecx,eax
c0021b96:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b99:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b9f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ba2:	84 db                	test   bl,bl
c0021ba4:	0f 85 90 00 00 00    	jne    c0021c3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021baa:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021bb0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bb6:	29 c7                	sub    edi,eax
c0021bb8:	89 fb                	mov    ebx,edi
c0021bba:	c1 fb 1f             	sar    ebx,0x1f
c0021bbd:	01 f8                	add    eax,edi
c0021bbf:	11 da                	adc    edx,ebx
c0021bc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021bc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bc9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021bcc:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021bcf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021bd2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021bd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bd8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021bdc:	89 d8                	mov    eax,ebx
c0021bde:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021be1:	ba 00 00 00 00       	mov    edx,0x0
c0021be6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021bea:	b8 00 00 00 00       	mov    eax,0x0
c0021bef:	73 0b                	jae    c0021bfc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021bf1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bf8:	29 f8                	sub    eax,edi
c0021bfa:	19 da                	sbb    edx,ebx
c0021bfc:	89 d3                	mov    ebx,edx
c0021bfe:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c01:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c04:	09 c3                	or     ebx,eax
c0021c06:	0f 84 59 ff ff ff    	je     c0021b65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021c0c:	55                   	push   ebp
c0021c0d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021c11:	50                   	push   eax
c0021c12:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c19:	53                   	push   ebx
c0021c1a:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c1c:	c1 e0 0b             	shl    eax,0xb
c0021c1f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021c23:	c1 e8 0b             	shr    eax,0xb
c0021c26:	50                   	push   eax
c0021c27:	e8 53 fc ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c2c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c2f:	83 c4 10             	add    esp,0x10
c0021c32:	25 ff 07 00 00       	and    eax,0x7ff
c0021c37:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021c3a:	57                   	push   edi
c0021c3b:	6a 28                	push   0x28
c0021c3d:	6a 00                	push   0x0
c0021c3f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c43:	50                   	push   eax
c0021c44:	e8 2f eb fd ff       	call   c0000778 <memset>
c0021c49:	31 d2                	xor    edx,edx
c0021c4b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c4e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c54:	89 f8                	mov    eax,edi
c0021c56:	83 c0 21             	add    eax,0x21
c0021c59:	83 d2 00             	adc    edx,0x0
c0021c5c:	89 c7                	mov    edi,eax
c0021c5e:	89 d5                	mov    ebp,edx
c0021c60:	83 c4 10             	add    esp,0x10
c0021c63:	31 c9                	xor    ecx,ecx
c0021c65:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c6c:	83 f9 28             	cmp    ecx,0x28
c0021c6f:	88 04 24             	mov    BYTE PTR [esp],al
c0021c72:	0f 94 c2             	sete   dl
c0021c75:	88 d0                	mov    al,dl
c0021c77:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c7c:	39 fa                	cmp    edx,edi
c0021c7e:	ba 00 00 00 00       	mov    edx,0x0
c0021c83:	19 ea                	sbb    edx,ebp
c0021c85:	0f 92 c2             	setb   dl
c0021c88:	09 c2                	or     edx,eax
c0021c8a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c8e:	0f 94 c0             	sete   al
c0021c91:	08 d0                	or     al,dl
c0021c93:	75 16                	jne    c0021cab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c95:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c99:	74 10                	je     c0021cab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c9b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c9e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021ca2:	41                   	inc    ecx
c0021ca3:	83 c7 01             	add    edi,0x1
c0021ca6:	83 d5 00             	adc    ebp,0x0
c0021ca9:	eb ba                	jmp    c0021c65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021cab:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021cb2:	83 ec 0c             	sub    esp,0xc
c0021cb5:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021cb9:	57                   	push   edi
c0021cba:	e8 d5 ea fd ff       	call   c0000794 <strlen>
c0021cbf:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021cc7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ccb:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021cd2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021cd5:	5a                   	pop    edx
c0021cd6:	25 ff 07 00 00       	and    eax,0x7ff
c0021cdb:	01 c8                	add    eax,ecx
c0021cdd:	59                   	pop    ecx
c0021cde:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021ce4:	83 e0 02             	and    eax,0x2
c0021ce7:	3c 01                	cmp    al,0x1
c0021ce9:	19 c0                	sbb    eax,eax
c0021ceb:	83 c0 02             	add    eax,0x2
c0021cee:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cf2:	57                   	push   edi
c0021cf3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cf7:	50                   	push   eax
c0021cf8:	e8 37 eb fd ff       	call   c0000834 <strcpy>
c0021cfd:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021d01:	83 c4 10             	add    esp,0x10
c0021d04:	84 c0                	test   al,al
c0021d06:	75 21                	jne    c0021d29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021d08:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021d10:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d18:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d20:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021d27:	eb 28                	jmp    c0021d51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d29:	fe c8                	dec    al
c0021d2b:	75 24                	jne    c0021d51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d2d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021d35:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d3d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d45:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d4c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d51:	0f b6 fb             	movzx  edi,bl
c0021d54:	31 db                	xor    ebx,ebx
c0021d56:	50                   	push   eax
c0021d57:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d5e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d62:	50                   	push   eax
c0021d63:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d6a:	e8 d5 e9 fd ff       	call   c0000744 <memcpy>
c0021d6f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d76:	89 f9                	mov    ecx,edi
c0021d78:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d7e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d81:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d84:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d87:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d8a:	83 c4 10             	add    esp,0x10
c0021d8d:	39 c7                	cmp    edi,eax
c0021d8f:	89 df                	mov    edi,ebx
c0021d91:	19 d7                	sbb    edi,edx
c0021d93:	72 10                	jb     c0021da5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d95:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d9c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021da3:	eb 0a                	jmp    c0021daf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021da5:	29 c8                	sub    eax,ecx
c0021da7:	19 da                	sbb    edx,ebx
c0021da9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021dac:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021daf:	31 c0                	xor    eax,eax
c0021db1:	eb 05                	jmp    c0021db8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021db3:	b8 04 00 00 00       	mov    eax,0x4
c0021db8:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021dbe:	5b                   	pop    ebx
c0021dbf:	5e                   	pop    esi
c0021dc0:	5f                   	pop    edi
c0021dc1:	5d                   	pop    ebp
c0021dc2:	c3                   	ret    

c0021dc3 <readRoot(unsigned int*, unsigned int*, char)>:
c0021dc3:	81 ec 40 08 00 00    	sub    esp,0x840
c0021dc9:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021dd1:	50                   	push   eax
c0021dd2:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021dd6:	50                   	push   eax
c0021dd7:	6a 10                	push   0x10
c0021dd9:	e8 a1 fa ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dde:	83 c4 0c             	add    esp,0xc
c0021de1:	6a 22                	push   0x22
c0021de3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021dea:	50                   	push   eax
c0021deb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021def:	50                   	push   eax
c0021df0:	e8 4f e9 fd ff       	call   c0000744 <memcpy>
c0021df5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021dfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021e00:	89 10                	mov    DWORD PTR [eax],edx
c0021e02:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021e09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021e0d:	89 10                	mov    DWORD PTR [eax],edx
c0021e0f:	b0 01                	mov    al,0x1
c0021e11:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021e17:	c3                   	ret    

c0021e18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021e18:	55                   	push   ebp
c0021e19:	57                   	push   edi
c0021e1a:	56                   	push   esi
c0021e1b:	53                   	push   ebx
c0021e1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e22:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021e29:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021e30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e34:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021e38:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021e3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021e40:	75 03                	jne    c0021e45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e42:	83 c3 02             	add    ebx,0x2
c0021e45:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021e48:	75 03                	jne    c0021e4d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e4a:	43                   	inc    ebx
c0021e4b:	eb f8                	jmp    c0021e45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e4d:	51                   	push   ecx
c0021e4e:	68 00 01 00 00       	push   0x100
c0021e53:	6a 00                	push   0x0
c0021e55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e59:	50                   	push   eax
c0021e5a:	e8 19 e9 fd ff       	call   c0000778 <memset>
c0021e5f:	83 c4 10             	add    esp,0x10
c0021e62:	31 d2                	xor    edx,edx
c0021e64:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e67:	84 c0                	test   al,al
c0021e69:	74 21                	je     c0021e8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e6b:	3c 2f                	cmp    al,0x2f
c0021e6d:	75 0b                	jne    c0021e7a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e6f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e73:	bd 01 00 00 00       	mov    ebp,0x1
c0021e78:	eb 14                	jmp    c0021e8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e7a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e7d:	80 f9 19             	cmp    cl,0x19
c0021e80:	77 03                	ja     c0021e85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e82:	83 e8 20             	sub    eax,0x20
c0021e85:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e89:	42                   	inc    edx
c0021e8a:	eb d8                	jmp    c0021e64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e8c:	31 ed                	xor    ebp,ebp
c0021e8e:	83 ec 0c             	sub    esp,0xc
c0021e91:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e98:	e8 5f da fe ff       	call   c000f8fc <malloc>
c0021e9d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021ea4:	89 c6                	mov    esi,eax
c0021ea6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021eac:	c1 ef 0b             	shr    edi,0xb
c0021eaf:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021eb6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021eba:	83 c4 10             	add    esp,0x10
c0021ebd:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021ec2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ec6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021ecd:	74 28                	je     c0021ef7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021ecf:	52                   	push   edx
c0021ed0:	57                   	push   edi
c0021ed1:	50                   	push   eax
c0021ed2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ed6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021edd:	e8 9d f9 ff ff       	call   c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ee2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ee6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021eed:	05 00 08 00 00       	add    eax,0x800
c0021ef2:	83 c4 10             	add    esp,0x10
c0021ef5:	eb cb                	jmp    c0021ec2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ef7:	83 ec 0c             	sub    esp,0xc
c0021efa:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021efe:	57                   	push   edi
c0021eff:	e8 90 e8 fd ff       	call   c0000794 <strlen>
c0021f04:	50                   	push   eax
c0021f05:	57                   	push   edi
c0021f06:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021f0d:	56                   	push   esi
c0021f0e:	e8 2a f9 ff ff       	call   c002183d <__memmem(unsigned char*, int, unsigned char*, int)>
c0021f13:	83 c4 20             	add    esp,0x20
c0021f16:	85 c0                	test   eax,eax
c0021f18:	75 13                	jne    c0021f2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021f1a:	83 ec 0c             	sub    esp,0xc
c0021f1d:	56                   	push   esi
c0021f1e:	e8 e9 d9 fe ff       	call   c000f90c <free>
c0021f23:	83 c4 10             	add    esp,0x10
c0021f26:	31 c0                	xor    eax,eax
c0021f28:	e9 b3 00 00 00       	jmp    c0021fe0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f2d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021f31:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021f35:	c1 e7 08             	shl    edi,0x8
c0021f38:	c1 e2 10             	shl    edx,0x10
c0021f3b:	09 d7                	or     edi,edx
c0021f3d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021f41:	09 d7                	or     edi,edx
c0021f43:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021f47:	c1 e2 18             	shl    edx,0x18
c0021f4a:	09 d7                	or     edi,edx
c0021f4c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f50:	89 d1                	mov    ecx,edx
c0021f52:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f56:	c1 e1 08             	shl    ecx,0x8
c0021f59:	c1 e2 10             	shl    edx,0x10
c0021f5c:	09 ca                	or     edx,ecx
c0021f5e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f62:	09 ca                	or     edx,ecx
c0021f64:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f68:	c1 e1 18             	shl    ecx,0x18
c0021f6b:	09 ca                	or     edx,ecx
c0021f6d:	89 e9                	mov    ecx,ebp
c0021f6f:	84 c9                	test   cl,cl
c0021f71:	74 3c                	je     c0021faf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f77:	83 ec 0c             	sub    esp,0xc
c0021f7a:	56                   	push   esi
c0021f7b:	e8 8c d9 fe ff       	call   c000f90c <free>
c0021f80:	83 c4 0c             	add    esp,0xc
c0021f83:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f8a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f8f:	50                   	push   eax
c0021f90:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f97:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021fa2:	52                   	push   edx
c0021fa3:	57                   	push   edi
c0021fa4:	53                   	push   ebx
c0021fa5:	e8 6e fe ff ff       	call   c0021e18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021faa:	83 c4 20             	add    esp,0x20
c0021fad:	eb 31                	jmp    c0021fe0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021faf:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021fb2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021fb9:	d0 e8                	shr    al,1
c0021fbb:	89 3b                	mov    DWORD PTR [ebx],edi
c0021fbd:	83 e0 01             	and    eax,0x1
c0021fc0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021fc7:	83 ec 0c             	sub    esp,0xc
c0021fca:	89 13                	mov    DWORD PTR [ebx],edx
c0021fcc:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021fd3:	89 03                	mov    DWORD PTR [ebx],eax
c0021fd5:	56                   	push   esi
c0021fd6:	e8 31 d9 fe ff       	call   c000f90c <free>
c0021fdb:	83 c4 10             	add    esp,0x10
c0021fde:	b0 01                	mov    al,0x1
c0021fe0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fe6:	5b                   	pop    ebx
c0021fe7:	5e                   	pop    esi
c0021fe8:	5f                   	pop    edi
c0021fe9:	5d                   	pop    ebp
c0021fea:	c3                   	ret    

c0021feb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021feb:	55                   	push   ebp
c0021fec:	57                   	push   edi
c0021fed:	56                   	push   esi
c0021fee:	53                   	push   ebx
c0021fef:	83 ec 20             	sub    esp,0x20
c0021ff2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ff6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ffa:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ffe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022006:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002200e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022013:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022019:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002201f:	57                   	push   edi
c0022020:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022024:	50                   	push   eax
c0022025:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022029:	50                   	push   eax
c002202a:	e8 94 fd ff ff       	call   c0021dc3 <readRoot(unsigned int*, unsigned int*, char)>
c002202f:	5a                   	pop    edx
c0022030:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022034:	e8 5b e7 fd ff       	call   c0000794 <strlen>
c0022039:	83 c4 10             	add    esp,0x10
c002203c:	83 f8 03             	cmp    eax,0x3
c002203f:	77 17                	ja     c0022058 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022041:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022045:	89 03                	mov    DWORD PTR [ebx],eax
c0022047:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002204b:	89 06                	mov    DWORD PTR [esi],eax
c002204d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022054:	b0 01                	mov    al,0x1
c0022056:	eb 19                	jmp    c0022071 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022058:	50                   	push   eax
c0022059:	55                   	push   ebp
c002205a:	57                   	push   edi
c002205b:	56                   	push   esi
c002205c:	53                   	push   ebx
c002205d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022061:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022065:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022069:	e8 aa fd ff ff       	call   c0021e18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002206e:	83 c4 20             	add    esp,0x20
c0022071:	83 c4 1c             	add    esp,0x1c
c0022074:	5b                   	pop    ebx
c0022075:	5e                   	pop    esi
c0022076:	5f                   	pop    edi
c0022077:	5d                   	pop    ebp
c0022078:	c3                   	ret    
c0022079:	90                   	nop

c002207a <ISO9660::open(char const*, void**, FileOpenMode)>:
c002207a:	57                   	push   edi
c002207b:	56                   	push   esi
c002207c:	53                   	push   ebx
c002207d:	83 ec 10             	sub    esp,0x10
c0022080:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022084:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022088:	85 ff                	test   edi,edi
c002208a:	0f 84 9d 00 00 00    	je     c002212d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022090:	85 f6                	test   esi,esi
c0022092:	0f 84 95 00 00 00    	je     c002212d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022098:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002209d:	74 17                	je     c00220b6 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002209f:	83 ec 0c             	sub    esp,0xc
c00220a2:	68 4f cc 02 c0       	push   0xc002cc4f
c00220a7:	e8 5b 0f ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00220ac:	83 c4 10             	add    esp,0x10
c00220af:	b8 03 00 00 00       	mov    eax,0x3
c00220b4:	eb 7c                	jmp    c0022132 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220b6:	83 ec 0c             	sub    esp,0xc
c00220b9:	6a 1c                	push   0x1c
c00220bb:	e8 3c d8 fe ff       	call   c000f8fc <malloc>
c00220c0:	89 07                	mov    DWORD PTR [edi],eax
c00220c2:	89 c3                	mov    ebx,eax
c00220c4:	58                   	pop    eax
c00220c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220c9:	50                   	push   eax
c00220ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220cd:	50                   	push   eax
c00220ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d2:	50                   	push   eax
c00220d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d7:	50                   	push   eax
c00220d8:	56                   	push   esi
c00220d9:	e8 0d ff ff ff       	call   c0021feb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220de:	83 c4 20             	add    esp,0x20
c00220e1:	84 c0                	test   al,al
c00220e3:	74 07                	je     c00220ec <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00220e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220ea:	74 0b                	je     c00220f7 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220ec:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220f0:	b8 01 00 00 00       	mov    eax,0x1
c00220f5:	eb 3b                	jmp    c0022132 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220fb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220ff:	89 03                	mov    DWORD PTR [ebx],eax
c0022101:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002210c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022113:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002211a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002211d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022124:	8a 06                	mov    al,BYTE PTR [esi]
c0022126:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022129:	31 c0                	xor    eax,eax
c002212b:	eb 05                	jmp    c0022132 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002212d:	b8 04 00 00 00       	mov    eax,0x4
c0022132:	83 c4 10             	add    esp,0x10
c0022135:	5b                   	pop    ebx
c0022136:	5e                   	pop    esi
c0022137:	5f                   	pop    edi
c0022138:	c3                   	ret    
c0022139:	90                   	nop

c002213a <ISO9660::exists(char const*)>:
c002213a:	83 ec 28             	sub    esp,0x28
c002213d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022141:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022145:	52                   	push   edx
c0022146:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022149:	52                   	push   edx
c002214a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002214e:	52                   	push   edx
c002214f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022153:	52                   	push   edx
c0022154:	50                   	push   eax
c0022155:	e8 91 fe ff ff       	call   c0021feb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002215a:	83 c4 3c             	add    esp,0x3c
c002215d:	c3                   	ret    

c002215e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002215e:	56                   	push   esi
c002215f:	53                   	push   ebx
c0022160:	83 ec 14             	sub    esp,0x14
c0022163:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022167:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002216b:	85 db                	test   ebx,ebx
c002216d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022171:	0f 94 c2             	sete   dl
c0022174:	85 f6                	test   esi,esi
c0022176:	0f 94 c0             	sete   al
c0022179:	08 c2                	or     dl,al
c002217b:	75 68                	jne    c00221e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002217d:	85 c9                	test   ecx,ecx
c002217f:	74 64                	je     c00221e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022181:	83 ec 0c             	sub    esp,0xc
c0022184:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022187:	8d 44 24 18          	lea    eax,[esp+0x18]
c002218b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022191:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022198:	50                   	push   eax
c0022199:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002219c:	50                   	push   eax
c002219d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221a1:	50                   	push   eax
c00221a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221a6:	50                   	push   eax
c00221a7:	51                   	push   ecx
c00221a8:	e8 3e fe ff ff       	call   c0021feb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221ad:	83 c4 20             	add    esp,0x20
c00221b0:	ba 01 00 00 00       	mov    edx,0x1
c00221b5:	84 c0                	test   al,al
c00221b7:	74 31                	je     c00221ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221c4:	89 03                	mov    DWORD PTR [ebx],eax
c00221c6:	ba 00 00 00 00       	mov    edx,0x0
c00221cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221cf:	85 c0                	test   eax,eax
c00221d1:	0f 95 06             	setne  BYTE PTR [esi]
c00221d4:	74 14                	je     c00221ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221d6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00221dc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221e3:	eb 05                	jmp    c00221ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221e5:	ba 04 00 00 00       	mov    edx,0x4
c00221ea:	83 c4 14             	add    esp,0x14
c00221ed:	89 d0                	mov    eax,edx
c00221ef:	5b                   	pop    ebx
c00221f0:	5e                   	pop    esi
c00221f1:	c3                   	ret    

c00221f2 <ISO9660::openDir(char const*, void**)>:
c00221f2:	57                   	push   edi
c00221f3:	56                   	push   esi
c00221f4:	53                   	push   ebx
c00221f5:	83 ec 10             	sub    esp,0x10
c00221f8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022200:	85 ff                	test   edi,edi
c0022202:	0f 84 95 00 00 00    	je     c002229d <ISO9660::openDir(char const*, void**)+0xab>
c0022208:	85 f6                	test   esi,esi
c002220a:	0f 84 8d 00 00 00    	je     c002229d <ISO9660::openDir(char const*, void**)+0xab>
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	6a 1c                	push   0x1c
c0022215:	e8 e2 d6 fe ff       	call   c000f8fc <malloc>
c002221a:	89 07                	mov    DWORD PTR [edi],eax
c002221c:	89 c3                	mov    ebx,eax
c002221e:	59                   	pop    ecx
c002221f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022223:	50                   	push   eax
c0022224:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022227:	50                   	push   eax
c0022228:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002222c:	50                   	push   eax
c002222d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022231:	50                   	push   eax
c0022232:	56                   	push   esi
c0022233:	e8 b3 fd ff ff       	call   c0021feb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022238:	83 c4 20             	add    esp,0x20
c002223b:	84 c0                	test   al,al
c002223d:	74 07                	je     c0022246 <ISO9660::openDir(char const*, void**)+0x54>
c002223f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022244:	75 21                	jne    c0022267 <ISO9660::openDir(char const*, void**)+0x75>
c0022246:	0f b6 c0             	movzx  eax,al
c0022249:	52                   	push   edx
c002224a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002224e:	50                   	push   eax
c002224f:	68 75 cc 02 c0       	push   0xc002cc75
c0022254:	e8 ae 0d ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0022259:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002225d:	83 c4 10             	add    esp,0x10
c0022260:	b8 01 00 00 00       	mov    eax,0x1
c0022265:	eb 3b                	jmp    c00222a2 <ISO9660::openDir(char const*, void**)+0xb0>
c0022267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002226b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002226f:	89 03                	mov    DWORD PTR [ebx],eax
c0022271:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002227c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022283:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002228a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002228d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022294:	8a 06                	mov    al,BYTE PTR [esi]
c0022296:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022299:	31 c0                	xor    eax,eax
c002229b:	eb 05                	jmp    c00222a2 <ISO9660::openDir(char const*, void**)+0xb0>
c002229d:	b8 04 00 00 00       	mov    eax,0x4
c00222a2:	83 c4 10             	add    esp,0x10
c00222a5:	5b                   	pop    ebx
c00222a6:	5e                   	pop    esi
c00222a7:	5f                   	pop    edi
c00222a8:	c3                   	ret    
c00222a9:	90                   	nop

c00222aa <ISO9660::ISO9660()>:
c00222aa:	83 ec 0c             	sub    esp,0xc
c00222ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b1:	83 ec 0c             	sub    esp,0xc
c00222b4:	50                   	push   eax
c00222b5:	e8 52 10 ff ff       	call   c001330c <Filesystem::Filesystem()>
c00222ba:	83 c4 10             	add    esp,0x10
c00222bd:	ba 98 cc 02 c0       	mov    edx,0xc002cc98
c00222c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c6:	89 10                	mov    DWORD PTR [eax],edx
c00222c8:	90                   	nop
c00222c9:	83 c4 0c             	add    esp,0xc
c00222cc:	c3                   	ret    
c00222cd:	90                   	nop

c00222ce <SoundChannel::~SoundChannel()>:
c00222ce:	83 ec 0c             	sub    esp,0xc
c00222d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00222d8:	83 ec 0c             	sub    esp,0xc
c00222db:	50                   	push   eax
c00222dc:	e8 2b d6 fe ff       	call   c000f90c <free>
c00222e1:	83 c4 10             	add    esp,0x10
c00222e4:	90                   	nop
c00222e5:	83 c4 0c             	add    esp,0xc
c00222e8:	c3                   	ret    
c00222e9:	90                   	nop

c00222ea <SoundChannel::setSpeed(float)>:
c00222ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222f5:	c3                   	ret    

c00222f6 <SoundChannel::getSpeed()>:
c00222f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222fd:	c3                   	ret    

c00222fe <SoundChannel::setVolume(int)>:
c00222fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022302:	83 f8 64             	cmp    eax,0x64
c0022305:	7e 05                	jle    c002230c <SoundChannel::setVolume(int)+0xe>
c0022307:	b8 64 00 00 00       	mov    eax,0x64
c002230c:	85 c0                	test   eax,eax
c002230e:	79 02                	jns    c0022312 <SoundChannel::setVolume(int)+0x14>
c0022310:	31 c0                	xor    eax,eax
c0022312:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022316:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022319:	c3                   	ret    

c002231a <SoundChannel::getVolume()>:
c002231a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002231e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022321:	c3                   	ret    

c0022322 <SoundChannel::pause()>:
c0022322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022326:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002232a:	c3                   	ret    
c002232b:	90                   	nop

c002232c <SoundChannel::SoundChannel(int, int, int, int)>:
c002232c:	83 ec 1c             	sub    esp,0x1c
c002232f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022333:	e8 ea ff ff ff       	call   c0022322 <SoundChannel::pause()>
c0022338:	83 c4 04             	add    esp,0x4
c002233b:	6a 50                	push   0x50
c002233d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022341:	e8 b8 ff ff ff       	call   c00222fe <SoundChannel::setVolume(int)>
c0022346:	83 c4 08             	add    esp,0x8
c0022349:	a1 10 cd 02 c0       	mov    eax,ds:0xc002cd10
c002234e:	50                   	push   eax
c002234f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022353:	e8 92 ff ff ff       	call   c00222ea <SoundChannel::setSpeed(float)>
c0022358:	83 c4 08             	add    esp,0x8
c002235b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022363:	89 10                	mov    DWORD PTR [eax],edx
c0022365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022369:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002236d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022374:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022378:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002237b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022380:	75 23                	jne    c00223a5 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022386:	8b 10                	mov    edx,DWORD PTR [eax]
c0022388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002238c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002238f:	0f af c2             	imul   eax,edx
c0022392:	85 c0                	test   eax,eax
c0022394:	79 03                	jns    c0022399 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022396:	83 c0 03             	add    eax,0x3
c0022399:	c1 f8 02             	sar    eax,0x2
c002239c:	05 a0 0f 00 00       	add    eax,0xfa0
c00223a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00223ad:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00223b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00223bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223bf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00223c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223cd:	c1 e0 02             	shl    eax,0x2
c00223d0:	83 ec 0c             	sub    esp,0xc
c00223d3:	50                   	push   eax
c00223d4:	e8 23 d5 fe ff       	call   c000f8fc <malloc>
c00223d9:	83 c4 10             	add    esp,0x10
c00223dc:	89 c2                	mov    edx,eax
c00223de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00223e5:	83 ec 04             	sub    esp,0x4
c00223e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223ec:	50                   	push   eax
c00223ed:	6a 01                	push   0x1
c00223ef:	6a 04                	push   0x4
c00223f1:	e8 a9 67 fe ff       	call   c0008b9f <src_new>
c00223f6:	83 c4 10             	add    esp,0x10
c00223f9:	89 c2                	mov    edx,eax
c00223fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022406:	85 c0                	test   eax,eax
c0022408:	74 10                	je     c002241a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002240a:	83 ec 0c             	sub    esp,0xc
c002240d:	68 f4 cc 02 c0       	push   0xc002ccf4
c0022412:	e8 a2 82 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0022417:	83 c4 10             	add    esp,0x10
c002241a:	a0 c0 2a 03 c0       	mov    al,ds:0xc0032ac0
c002241f:	83 f0 01             	xor    eax,0x1
c0022422:	84 c0                	test   al,al
c0022424:	74 57                	je     c002247d <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022426:	a1 14 cd 02 c0       	mov    eax,ds:0xc002cd14
c002242b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002242f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022437:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002243f:	7f 35                	jg     c0022476 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022441:	83 ec 0c             	sub    esp,0xc
c0022444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022448:	e8 9a 4f 00 00       	call   c00273e7 <__floatsisf>
c002244d:	83 c4 10             	add    esp,0x10
c0022450:	8b 15 14 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd14
c0022456:	83 ec 08             	sub    esp,0x8
c0022459:	52                   	push   edx
c002245a:	50                   	push   eax
c002245b:	e8 99 4b 00 00       	call   c0026ff9 <__mulsf3>
c0022460:	83 c4 10             	add    esp,0x10
c0022463:	89 c2                	mov    edx,eax
c0022465:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022469:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0022470:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022474:	eb c1                	jmp    c0022437 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022476:	c6 05 c0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032ac0,0x1
c002247d:	90                   	nop
c002247e:	83 c4 1c             	add    esp,0x1c
c0022481:	c3                   	ret    

c0022482 <SoundChannel::play()>:
c0022482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022486:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002248a:	c3                   	ret    
c002248b:	90                   	nop

c002248c <SoundChannel::paused()>:
c002248c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022490:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022493:	c3                   	ret    

c0022494 <SoundChannel::getSampleRate()>:
c0022494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022498:	8b 00                	mov    eax,DWORD PTR [eax]
c002249a:	c3                   	ret    
c002249b:	90                   	nop

c002249c <SoundChannel::getBits()>:
c002249c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224a3:	c3                   	ret    

c00224a4 <SoundChannel::getBufferUsed()>:
c00224a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224a8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00224ab:	c3                   	ret    

c00224ac <SoundChannel::getBufferSize()>:
c00224ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00224b3:	c3                   	ret    

c00224b4 <SoundChannel::unbuffer(float*, int, int)>:
c00224b4:	56                   	push   esi
c00224b5:	53                   	push   ebx
c00224b6:	83 ec 40             	sub    esp,0x40
c00224b9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00224bd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00224c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224c4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00224c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00224cb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00224cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00224d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00224d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00224db:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00224df:	e8 03 4f 00 00       	call   c00273e7 <__floatsisf>
c00224e4:	5a                   	pop    edx
c00224e5:	89 c6                	mov    esi,eax
c00224e7:	ff 33                	push   DWORD PTR [ebx]
c00224e9:	e8 f9 4e 00 00       	call   c00273e7 <__floatsisf>
c00224ee:	59                   	pop    ecx
c00224ef:	5a                   	pop    edx
c00224f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224f3:	50                   	push   eax
c00224f4:	e8 00 4b 00 00       	call   c0026ff9 <__mulsf3>
c00224f9:	59                   	pop    ecx
c00224fa:	5a                   	pop    edx
c00224fb:	50                   	push   eax
c00224fc:	56                   	push   esi
c00224fd:	e8 ba 4c 00 00       	call   c00271bc <__divsf3>
c0022502:	89 04 24             	mov    DWORD PTR [esp],eax
c0022505:	e8 ad 61 00 00       	call   c00286b7 <__extendsfdf2>
c002250a:	59                   	pop    ecx
c002250b:	5e                   	pop    esi
c002250c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022510:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022514:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002251c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022520:	50                   	push   eax
c0022521:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022524:	e8 6b 62 fe ff       	call   c0008794 <src_process>
c0022529:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002252d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022530:	83 c4 0c             	add    esp,0xc
c0022533:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022536:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022539:	29 d0                	sub    eax,edx
c002253b:	c1 e0 02             	shl    eax,0x2
c002253e:	50                   	push   eax
c002253f:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022542:	50                   	push   eax
c0022543:	51                   	push   ecx
c0022544:	e8 33 e1 fd ff       	call   c000067c <memmove>
c0022549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002254d:	83 c4 44             	add    esp,0x44
c0022550:	5b                   	pop    ebx
c0022551:	5e                   	pop    esi
c0022552:	c3                   	ret    
c0022553:	90                   	nop

c0022554 <SoundChannel::buffer8(unsigned char*, int)>:
c0022554:	55                   	push   ebp
c0022555:	57                   	push   edi
c0022556:	56                   	push   esi
c0022557:	53                   	push   ebx
c0022558:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002255c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022560:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022563:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022567:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002256a:	74 7a                	je     c00225e6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002256c:	85 ff                	test   edi,edi
c002256e:	7e 76                	jle    c00225e6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022570:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022574:	8d 70 01             	lea    esi,[eax+0x1]
c0022577:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002257a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002257d:	8b 1c 9d c0 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd940]
c0022584:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022587:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002258a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002258d:	74 5e                	je     c00225ed <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002258f:	83 ff 01             	cmp    edi,0x1
c0022592:	74 4b                	je     c00225df <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022594:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022598:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002259b:	8d 70 01             	lea    esi,[eax+0x1]
c002259e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225a1:	8b 1c 9d c0 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd940]
c00225a8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00225ab:	b8 02 00 00 00       	mov    eax,0x2
c00225b0:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225b3:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225b6:	75 23                	jne    c00225db <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00225b8:	eb 27                	jmp    c00225e1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00225ba:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00225bf:	8d 71 01             	lea    esi,[ecx+0x1]
c00225c2:	40                   	inc    eax
c00225c3:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225c6:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00225c9:	8b 1c 9d c0 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd940]
c00225d0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00225d3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225d6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225d9:	74 06                	je     c00225e1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00225db:	39 c7                	cmp    edi,eax
c00225dd:	75 db                	jne    c00225ba <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00225df:	89 f8                	mov    eax,edi
c00225e1:	5b                   	pop    ebx
c00225e2:	5e                   	pop    esi
c00225e3:	5f                   	pop    edi
c00225e4:	5d                   	pop    ebp
c00225e5:	c3                   	ret    
c00225e6:	5b                   	pop    ebx
c00225e7:	31 c0                	xor    eax,eax
c00225e9:	5e                   	pop    esi
c00225ea:	5f                   	pop    edi
c00225eb:	5d                   	pop    ebp
c00225ec:	c3                   	ret    
c00225ed:	b8 01 00 00 00       	mov    eax,0x1
c00225f2:	eb ed                	jmp    c00225e1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225f4 <SoundDevice::SoundDevice(char const*)>:
c00225f4:	83 ec 1c             	sub    esp,0x1c
c00225f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225fb:	83 ec 08             	sub    esp,0x8
c00225fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022602:	50                   	push   eax
c0022603:	e8 16 20 ff ff       	call   c001461e <Device::Device(char const*)>
c0022608:	83 c4 10             	add    esp,0x10
c002260b:	ba 20 cd 02 c0       	mov    edx,0xc002cd20
c0022610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022614:	89 10                	mov    DWORD PTR [eax],edx
c0022616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002261a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022628:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022632:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002263a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002263f:	7f 19                	jg     c002265a <SoundDevice::SoundDevice(char const*)+0x66>
c0022641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022645:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022649:	83 c2 54             	add    edx,0x54
c002264c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022654:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022658:	eb e0                	jmp    c002263a <SoundDevice::SoundDevice(char const*)+0x46>
c002265a:	90                   	nop
c002265b:	83 c4 1c             	add    esp,0x1c
c002265e:	c3                   	ret    
c002265f:	90                   	nop

c0022660 <SoundDevice::~SoundDevice()>:
c0022660:	53                   	push   ebx
c0022661:	83 ec 18             	sub    esp,0x18
c0022664:	ba 20 cd 02 c0       	mov    edx,0xc002cd20
c0022669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002266d:	89 10                	mov    DWORD PTR [eax],edx
c002266f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022677:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002267c:	7f 46                	jg     c00226c4 <SoundDevice::~SoundDevice()+0x64>
c002267e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022686:	83 c2 54             	add    edx,0x54
c0022689:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002268d:	85 c0                	test   eax,eax
c002268f:	74 2d                	je     c00226be <SoundDevice::~SoundDevice()+0x5e>
c0022691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022695:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022699:	83 c2 54             	add    edx,0x54
c002269c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00226a0:	85 db                	test   ebx,ebx
c00226a2:	74 1a                	je     c00226be <SoundDevice::~SoundDevice()+0x5e>
c00226a4:	83 ec 0c             	sub    esp,0xc
c00226a7:	53                   	push   ebx
c00226a8:	e8 21 fc ff ff       	call   c00222ce <SoundChannel::~SoundChannel()>
c00226ad:	83 c4 10             	add    esp,0x10
c00226b0:	83 ec 08             	sub    esp,0x8
c00226b3:	6a 2c                	push   0x2c
c00226b5:	53                   	push   ebx
c00226b6:	e8 6c 08 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00226bb:	83 c4 10             	add    esp,0x10
c00226be:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00226c2:	eb b3                	jmp    c0022677 <SoundDevice::~SoundDevice()+0x17>
c00226c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226c8:	83 ec 0c             	sub    esp,0xc
c00226cb:	50                   	push   eax
c00226cc:	e8 2f 1c ff ff       	call   c0014300 <Device::~Device()>
c00226d1:	83 c4 10             	add    esp,0x10
c00226d4:	90                   	nop
c00226d5:	83 c4 18             	add    esp,0x18
c00226d8:	5b                   	pop    ebx
c00226d9:	c3                   	ret    

c00226da <SoundDevice::~SoundDevice()>:
c00226da:	83 ec 0c             	sub    esp,0xc
c00226dd:	83 ec 0c             	sub    esp,0xc
c00226e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226e4:	e8 77 ff ff ff       	call   c0022660 <SoundDevice::~SoundDevice()>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	83 ec 08             	sub    esp,0x8
c00226ef:	68 e4 01 00 00       	push   0x1e4
c00226f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226f8:	e8 2a 08 ff ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00226fd:	83 c4 10             	add    esp,0x10
c0022700:	83 c4 0c             	add    esp,0xc
c0022703:	c3                   	ret    

c0022704 <SoundDevice::getFreeChannelNum()>:
c0022704:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022708:	31 c0                	xor    eax,eax
c002270a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022712:	74 09                	je     c002271d <SoundDevice::getFreeChannelNum()+0x19>
c0022714:	40                   	inc    eax
c0022715:	83 f8 20             	cmp    eax,0x20
c0022718:	75 f0                	jne    c002270a <SoundDevice::getFreeChannelNum()+0x6>
c002271a:	83 c8 ff             	or     eax,0xffffffff
c002271d:	c3                   	ret    

c002271e <SoundDevice::addChannel(SoundChannel*)>:
c002271e:	56                   	push   esi
c002271f:	53                   	push   ebx
c0022720:	51                   	push   ecx
c0022721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022725:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022729:	53                   	push   ebx
c002272a:	e8 d5 ff ff ff       	call   c0022704 <SoundDevice::getFreeChannelNum()>
c002272f:	5a                   	pop    edx
c0022730:	83 f8 ff             	cmp    eax,0xffffffff
c0022733:	74 51                	je     c0022786 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022735:	85 f6                	test   esi,esi
c0022737:	74 4d                	je     c0022786 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022739:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022740:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022747:	75 30                	jne    c0022779 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022749:	83 ec 0c             	sub    esp,0xc
c002274c:	56                   	push   esi
c002274d:	e8 42 fd ff ff       	call   c0022494 <SoundChannel::getSampleRate()>
c0022752:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022758:	89 34 24             	mov    DWORD PTR [esp],esi
c002275b:	e8 3c fd ff ff       	call   c002249c <SoundChannel::getBits()>
c0022760:	83 c4 0c             	add    esp,0xc
c0022763:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022769:	8b 13                	mov    edx,DWORD PTR [ebx]
c002276b:	50                   	push   eax
c002276c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022772:	53                   	push   ebx
c0022773:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022776:	83 c4 10             	add    esp,0x10
c0022779:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002277f:	b8 01 00 00 00       	mov    eax,0x1
c0022784:	eb 03                	jmp    c0022789 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022786:	83 c8 ff             	or     eax,0xffffffff
c0022789:	5a                   	pop    edx
c002278a:	5b                   	pop    ebx
c002278b:	5e                   	pop    esi
c002278c:	c3                   	ret    
c002278d:	90                   	nop

c002278e <SoundDevice::removeChannel(int)>:
c002278e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022796:	83 fa 1f             	cmp    edx,0x1f
c0022799:	77 23                	ja     c00227be <SoundDevice::removeChannel(int)+0x30>
c002279b:	8d 14 90             	lea    edx,[eax+edx*4]
c002279e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00227a5:	74 17                	je     c00227be <SoundDevice::removeChannel(int)+0x30>
c00227a7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00227b1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00227b7:	75 05                	jne    c00227be <SoundDevice::removeChannel(int)+0x30>
c00227b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00227bb:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00227be:	c3                   	ret    
c00227bf:	90                   	nop

c00227c0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227c0:	57                   	push   edi
c00227c1:	56                   	push   esi
c00227c2:	53                   	push   ebx
c00227c3:	31 db                	xor    ebx,ebx
c00227c5:	83 ec 10             	sub    esp,0x10
c00227c8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227cc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227d0:	0f 8d cb 00 00 00    	jge    c00228a1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227d6:	83 ec 0c             	sub    esp,0xc
c00227d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227dd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227e0:	e8 d2 5e 00 00       	call   c00286b7 <__extendsfdf2>
c00227e5:	83 c4 10             	add    esp,0x10
c00227e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227f0:	68 00 00 f0 3f       	push   0x3ff00000
c00227f5:	6a 00                	push   0x0
c00227f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ff:	e8 3f 4e 00 00       	call   c0027643 <__adddf3>
c0022804:	83 c4 10             	add    esp,0x10
c0022807:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002280b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002280f:	68 00 00 e0 3f       	push   0x3fe00000
c0022814:	6a 00                	push   0x0
c0022816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002281a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002281e:	e8 9d 54 00 00       	call   c0027cc0 <__muldf3>
c0022823:	83 c4 10             	add    esp,0x10
c0022826:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002282a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002282e:	68 00 00 60 40       	push   0x40600000
c0022833:	6a 00                	push   0x0
c0022835:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022839:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002283d:	e8 7e 54 00 00       	call   c0027cc0 <__muldf3>
c0022842:	59                   	pop    ecx
c0022843:	5f                   	pop    edi
c0022844:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022848:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002284c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022854:	e8 3a 5d 00 00       	call   c0028593 <__truncdfsf2>
c0022859:	5a                   	pop    edx
c002285a:	89 c7                	mov    edi,eax
c002285c:	59                   	pop    ecx
c002285d:	68 00 00 fe 42       	push   0x42fe0000
c0022862:	50                   	push   eax
c0022863:	e8 d5 4d 00 00       	call   c002763d <__gesf2>
c0022868:	83 c4 10             	add    esp,0x10
c002286b:	85 c0                	test   eax,eax
c002286d:	78 06                	js     c0022875 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002286f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022873:	eb 26                	jmp    c002289b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022875:	50                   	push   eax
c0022876:	50                   	push   eax
c0022877:	6a 00                	push   0x0
c0022879:	57                   	push   edi
c002287a:	e8 c2 4d 00 00       	call   c0027641 <__lesf2>
c002287f:	83 c4 10             	add    esp,0x10
c0022882:	85 c0                	test   eax,eax
c0022884:	7f 06                	jg     c002288c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022886:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002288a:	eb 0f                	jmp    c002289b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002288c:	83 ec 0c             	sub    esp,0xc
c002288f:	57                   	push   edi
c0022890:	e8 b7 5e 00 00       	call   c002874c <lrintf>
c0022895:	83 c4 10             	add    esp,0x10
c0022898:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002289b:	43                   	inc    ebx
c002289c:	e9 2b ff ff ff       	jmp    c00227cc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00228a1:	83 c4 10             	add    esp,0x10
c00228a4:	5b                   	pop    ebx
c00228a5:	5e                   	pop    esi
c00228a6:	5f                   	pop    edi
c00228a7:	c3                   	ret    

c00228a8 <SoundDevice::getAudio(int, float*, float*)>:
c00228a8:	55                   	push   ebp
c00228a9:	57                   	push   edi
c00228aa:	56                   	push   esi
c00228ab:	53                   	push   ebx
c00228ac:	31 db                	xor    ebx,ebx
c00228ae:	83 ec 20             	sub    esp,0x20
c00228b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228b5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00228b9:	c1 e0 02             	shl    eax,0x2
c00228bc:	50                   	push   eax
c00228bd:	6a 00                	push   0x0
c00228bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228c3:	e8 b0 de fd ff       	call   c0000778 <memset>
c00228c8:	83 c4 10             	add    esp,0x10
c00228cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00228cf:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00228d6:	85 c0                	test   eax,eax
c00228d8:	0f 84 d7 00 00 00    	je     c00229b5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228de:	83 ec 0c             	sub    esp,0xc
c00228e1:	50                   	push   eax
c00228e2:	e8 a5 fb ff ff       	call   c002248c <SoundChannel::paused()>
c00228e7:	83 c4 10             	add    esp,0x10
c00228ea:	84 c0                	test   al,al
c00228ec:	0f 85 c3 00 00 00    	jne    c00229b5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228f2:	83 ec 0c             	sub    esp,0xc
c00228f5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228fc:	e8 19 fa ff ff       	call   c002231a <SoundChannel::getVolume()>
c0022901:	83 c4 10             	add    esp,0x10
c0022904:	85 c0                	test   eax,eax
c0022906:	0f 84 a9 00 00 00    	je     c00229b5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002290c:	83 ec 0c             	sub    esp,0xc
c002290f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022916:	e8 ff f9 ff ff       	call   c002231a <SoundChannel::getVolume()>
c002291b:	83 ec 0c             	sub    esp,0xc
c002291e:	50                   	push   eax
c002291f:	e8 c3 4a 00 00       	call   c00273e7 <__floatsisf>
c0022924:	59                   	pop    ecx
c0022925:	5d                   	pop    ebp
c0022926:	31 ed                	xor    ebp,ebp
c0022928:	68 00 00 c8 42       	push   0x42c80000
c002292d:	50                   	push   eax
c002292e:	e8 89 48 00 00       	call   c00271bc <__divsf3>
c0022933:	83 c4 10             	add    esp,0x10
c0022936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002293a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002293e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022944:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022948:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002294f:	e8 60 fb ff ff       	call   c00224b4 <SoundChannel::unbuffer(float*, int, int)>
c0022954:	83 c4 20             	add    esp,0x20
c0022957:	89 c1                	mov    ecx,eax
c0022959:	39 cd                	cmp    ebp,ecx
c002295b:	7d 52                	jge    c00229af <SoundDevice::getAudio(int, float*, float*)+0x107>
c002295d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022961:	50                   	push   eax
c0022962:	50                   	push   eax
c0022963:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022967:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002296a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002296e:	e8 86 46 00 00       	call   c0026ff9 <__mulsf3>
c0022973:	5a                   	pop    edx
c0022974:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022978:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002297e:	e8 64 4a 00 00       	call   c00273e7 <__floatsisf>
c0022983:	59                   	pop    ecx
c0022984:	5a                   	pop    edx
c0022985:	50                   	push   eax
c0022986:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002298a:	e8 2d 48 00 00       	call   c00271bc <__divsf3>
c002298f:	59                   	pop    ecx
c0022990:	5a                   	pop    edx
c0022991:	50                   	push   eax
c0022992:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022996:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022999:	e8 38 43 00 00       	call   c0026cd6 <__addsf3>
c002299e:	83 c4 10             	add    esp,0x10
c00229a1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00229a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00229a9:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00229ac:	45                   	inc    ebp
c00229ad:	eb aa                	jmp    c0022959 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00229af:	39 cf                	cmp    edi,ecx
c00229b1:	7e 02                	jle    c00229b5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00229b3:	89 cf                	mov    edi,ecx
c00229b5:	43                   	inc    ebx
c00229b6:	83 fb 20             	cmp    ebx,0x20
c00229b9:	0f 85 10 ff ff ff    	jne    c00228cf <SoundDevice::getAudio(int, float*, float*)+0x27>
c00229bf:	83 c4 1c             	add    esp,0x1c
c00229c2:	89 f8                	mov    eax,edi
c00229c4:	5b                   	pop    ebx
c00229c5:	5e                   	pop    esi
c00229c6:	5f                   	pop    edi
c00229c7:	5d                   	pop    ebp
c00229c8:	c3                   	ret    
c00229c9:	90                   	nop

c00229ca <PCI::open(int, int, void*)>:
c00229ca:	83 ec 18             	sub    esp,0x18
c00229cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00229d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00229d3:	50                   	push   eax
c00229d4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00229d7:	31 c0                	xor    eax,eax
c00229d9:	83 c4 1c             	add    esp,0x1c
c00229dc:	c3                   	ret    
c00229dd:	90                   	nop

c00229de <PCI::close(int, int, void*)>:
c00229de:	31 c0                	xor    eax,eax
c00229e0:	c3                   	ret    
c00229e1:	90                   	nop

c00229e2 <PCI::PCI()>:
c00229e2:	83 ec 0c             	sub    esp,0xc
c00229e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e9:	83 ec 08             	sub    esp,0x8
c00229ec:	68 50 cd 02 c0       	push   0xc002cd50
c00229f1:	50                   	push   eax
c00229f2:	e8 ab 12 ff ff       	call   c0013ca2 <Bus::Bus(char const*)>
c00229f7:	83 c4 10             	add    esp,0x10
c00229fa:	ba bc cd 02 c0       	mov    edx,0xc002cdbc
c00229ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a03:	89 10                	mov    DWORD PTR [eax],edx
c0022a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a0f:	0f b6 d0             	movzx  edx,al
c0022a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a16:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a21:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a27:	0f b6 d0             	movzx  edx,al
c0022a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a3d:	8d 50 01             	lea    edx,[eax+0x1]
c0022a40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a44:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a4a:	0f b6 d0             	movzx  edx,al
c0022a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a55:	83 c9 c0             	or     ecx,0xffffffc0
c0022a58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a5c:	90                   	nop
c0022a5d:	83 c4 0c             	add    esp,0xc
c0022a60:	c3                   	ret    
c0022a61:	90                   	nop

c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a6b:	89 ca                	mov    edx,ecx
c0022a6d:	c1 e0 10             	shl    eax,0x10
c0022a70:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a76:	09 d0                	or     eax,edx
c0022a78:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a7d:	c1 e2 08             	shl    edx,0x8
c0022a80:	09 d0                	or     eax,edx
c0022a82:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a87:	c1 e2 0b             	shl    edx,0xb
c0022a8a:	09 d0                	or     eax,edx
c0022a8c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a91:	0d 00 00 00 80       	or     eax,0x80000000
c0022a96:	ef                   	out    dx,eax
c0022a97:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a9c:	ed                   	in     eax,dx
c0022a9d:	83 e1 02             	and    ecx,0x2
c0022aa0:	0f b6 c9             	movzx  ecx,cl
c0022aa3:	c1 e1 03             	shl    ecx,0x3
c0022aa6:	d3 e8                	shr    eax,cl
c0022aa8:	c3                   	ret    
c0022aa9:	90                   	nop

c0022aaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022aaa:	6a 00                	push   0x0
c0022aac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab1:	50                   	push   eax
c0022ab2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab7:	50                   	push   eax
c0022ab8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abd:	50                   	push   eax
c0022abe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac2:	e8 9b ff ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac7:	83 c4 14             	add    esp,0x14
c0022aca:	c3                   	ret    
c0022acb:	90                   	nop

c0022acc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022acc:	6a 0e                	push   0xe
c0022ace:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad3:	50                   	push   eax
c0022ad4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad9:	50                   	push   eax
c0022ada:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022adf:	50                   	push   eax
c0022ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ae4:	e8 79 ff ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ae9:	83 c4 14             	add    esp,0x14
c0022aec:	0f b6 c0             	movzx  eax,al
c0022aef:	c3                   	ret    

c0022af0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022af0:	55                   	push   ebp
c0022af1:	57                   	push   edi
c0022af2:	56                   	push   esi
c0022af3:	53                   	push   ebx
c0022af4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022af9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022afe:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022b03:	6a 0a                	push   0xa
c0022b05:	56                   	push   esi
c0022b06:	55                   	push   ebp
c0022b07:	57                   	push   edi
c0022b08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b0c:	e8 51 ff ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b11:	6a 0a                	push   0xa
c0022b13:	89 c3                	mov    ebx,eax
c0022b15:	56                   	push   esi
c0022b16:	0f b6 db             	movzx  ebx,bl
c0022b19:	55                   	push   ebp
c0022b1a:	57                   	push   edi
c0022b1b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022b1f:	e8 3e ff ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b24:	83 c4 28             	add    esp,0x28
c0022b27:	25 00 ff 00 00       	and    eax,0xff00
c0022b2c:	09 d8                	or     eax,ebx
c0022b2e:	5b                   	pop    ebx
c0022b2f:	5e                   	pop    esi
c0022b30:	5f                   	pop    edi
c0022b31:	5d                   	pop    ebp
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b34:	6a 08                	push   0x8
c0022b36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3b:	50                   	push   eax
c0022b3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b41:	50                   	push   eax
c0022b42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b47:	50                   	push   eax
c0022b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b4c:	e8 11 ff ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b51:	83 c4 14             	add    esp,0x14
c0022b54:	0f b6 c4             	movzx  eax,ah
c0022b57:	c3                   	ret    

c0022b58 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b58:	6a 08                	push   0x8
c0022b5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5f:	50                   	push   eax
c0022b60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b65:	50                   	push   eax
c0022b66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b6b:	50                   	push   eax
c0022b6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b70:	e8 ed fe ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b75:	83 c4 14             	add    esp,0x14
c0022b78:	c3                   	ret    
c0022b79:	90                   	nop

c0022b7a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b7a:	6a 3c                	push   0x3c
c0022b7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b81:	50                   	push   eax
c0022b82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b87:	50                   	push   eax
c0022b88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b8d:	50                   	push   eax
c0022b8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b92:	e8 cb fe ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b97:	83 c4 14             	add    esp,0x14
c0022b9a:	c3                   	ret    
c0022b9b:	90                   	nop

c0022b9c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b9c:	6a 18                	push   0x18
c0022b9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ba3:	50                   	push   eax
c0022ba4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ba9:	50                   	push   eax
c0022baa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022baf:	50                   	push   eax
c0022bb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bb4:	e8 a9 fe ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb9:	83 c4 14             	add    esp,0x14
c0022bbc:	0f b6 c4             	movzx  eax,ah
c0022bbf:	c3                   	ret    

c0022bc0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022bc0:	55                   	push   ebp
c0022bc1:	57                   	push   edi
c0022bc2:	56                   	push   esi
c0022bc3:	53                   	push   ebx
c0022bc4:	50                   	push   eax
c0022bc5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022bc9:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022bce:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022bd3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022bd8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022bdf:	8d 43 12             	lea    eax,[ebx+0x12]
c0022be2:	83 c3 10             	add    ebx,0x10
c0022be5:	0f b6 c0             	movzx  eax,al
c0022be8:	0f b6 db             	movzx  ebx,bl
c0022beb:	50                   	push   eax
c0022bec:	51                   	push   ecx
c0022bed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022bf1:	57                   	push   edi
c0022bf2:	55                   	push   ebp
c0022bf3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bf7:	e8 66 fe ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bfc:	53                   	push   ebx
c0022bfd:	89 c6                	mov    esi,eax
c0022bff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022c03:	c1 e6 10             	shl    esi,0x10
c0022c06:	51                   	push   ecx
c0022c07:	57                   	push   edi
c0022c08:	55                   	push   ebp
c0022c09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c0d:	e8 50 fe ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c12:	83 c4 2c             	add    esp,0x2c
c0022c15:	0f b7 c0             	movzx  eax,ax
c0022c18:	5b                   	pop    ebx
c0022c19:	09 f0                	or     eax,esi
c0022c1b:	5e                   	pop    esi
c0022c1c:	5f                   	pop    edi
c0022c1d:	5d                   	pop    ebp
c0022c1e:	c3                   	ret    
c0022c1f:	90                   	nop

c0022c20 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c20:	53                   	push   ebx
c0022c21:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c26:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022c2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c2f:	c1 e1 10             	shl    ecx,0x10
c0022c32:	25 fc 00 00 00       	and    eax,0xfc
c0022c37:	09 c1                	or     ecx,eax
c0022c39:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c3e:	c1 e0 08             	shl    eax,0x8
c0022c41:	09 c1                	or     ecx,eax
c0022c43:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022c48:	c1 e0 0b             	shl    eax,0xb
c0022c4b:	09 c1                	or     ecx,eax
c0022c4d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c53:	89 c8                	mov    eax,ecx
c0022c55:	ef                   	out    dx,eax
c0022c56:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c5b:	ed                   	in     eax,dx
c0022c5c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c61:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c66:	74 0a                	je     c0022c72 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c68:	0f b7 d8             	movzx  ebx,ax
c0022c6b:	89 d0                	mov    eax,edx
c0022c6d:	c1 e0 10             	shl    eax,0x10
c0022c70:	eb 05                	jmp    c0022c77 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c72:	66 31 c0             	xor    ax,ax
c0022c75:	89 d3                	mov    ebx,edx
c0022c77:	09 c3                	or     ebx,eax
c0022c79:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c7e:	89 c8                	mov    eax,ecx
c0022c80:	ef                   	out    dx,eax
c0022c81:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c86:	89 d8                	mov    eax,ebx
c0022c88:	ef                   	out    dx,eax
c0022c89:	5b                   	pop    ebx
c0022c8a:	c3                   	ret    
c0022c8b:	90                   	nop

c0022c8c <PCI::checkBus(unsigned char)>:
c0022c8c:	56                   	push   esi
c0022c8d:	53                   	push   ebx
c0022c8e:	31 db                	xor    ebx,ebx
c0022c90:	51                   	push   ecx
c0022c91:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c96:	52                   	push   edx
c0022c97:	53                   	push   ebx
c0022c98:	43                   	inc    ebx
c0022c99:	56                   	push   esi
c0022c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c9e:	e8 2b 03 00 00       	call   c0022fce <PCI::checkDevice(unsigned char, unsigned char)>
c0022ca3:	83 c4 10             	add    esp,0x10
c0022ca6:	83 fb 20             	cmp    ebx,0x20
c0022ca9:	75 eb                	jne    c0022c96 <PCI::checkBus(unsigned char)+0xa>
c0022cab:	58                   	pop    eax
c0022cac:	5b                   	pop    ebx
c0022cad:	5e                   	pop    esi
c0022cae:	c3                   	ret    
c0022caf:	90                   	nop

c0022cb0 <PCI::foundDevice(PCIDeviceInfo)>:
c0022cb0:	55                   	push   ebp
c0022cb1:	57                   	push   edi
c0022cb2:	56                   	push   esi
c0022cb3:	53                   	push   ebx
c0022cb4:	83 ec 1c             	sub    esp,0x1c
c0022cb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022cbb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022cc1:	0f 84 52 01 00 00    	je     c0022e19 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cc7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ccb:	66 81 f9 06 04       	cmp    cx,0x406
c0022cd0:	75 2c                	jne    c0022cfe <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022cd2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022cd7:	50                   	push   eax
c0022cd8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022cdd:	50                   	push   eax
c0022cde:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022ce3:	50                   	push   eax
c0022ce4:	56                   	push   esi
c0022ce5:	e8 b2 fe ff ff       	call   c0022b9c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022cea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022cee:	0f b6 c0             	movzx  eax,al
c0022cf1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022cf5:	83 c4 2c             	add    esp,0x2c
c0022cf8:	5b                   	pop    ebx
c0022cf9:	5e                   	pop    esi
c0022cfa:	5f                   	pop    edi
c0022cfb:	5d                   	pop    ebp
c0022cfc:	eb 8e                	jmp    c0022c8c <PCI::checkBus(unsigned char)>
c0022cfe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d02:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022d08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d0c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022d10:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022d14:	88 d3                	mov    bl,dl
c0022d16:	85 c0                	test   eax,eax
c0022d18:	74 33                	je     c0022d4d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022d1a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022d1d:	85 d2                	test   edx,edx
c0022d1f:	74 28                	je     c0022d49 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d21:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d27:	31 ef                	xor    edi,ebp
c0022d29:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d2f:	75 18                	jne    c0022d49 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d31:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d35:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022d3b:	75 0c                	jne    c0022d49 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d3d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022d43:	0f 84 d0 00 00 00    	je     c0022e19 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d49:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d4b:	eb c9                	jmp    c0022d16 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d4d:	66 81 f9 01 06       	cmp    cx,0x601
c0022d52:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d56:	75 19                	jne    c0022d71 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d58:	83 ec 0c             	sub    esp,0xc
c0022d5b:	68 64 01 00 00       	push   0x164
c0022d60:	e8 97 cb fe ff       	call   c000f8fc <malloc>
c0022d65:	89 c5                	mov    ebp,eax
c0022d67:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d6a:	e8 95 0f 00 00       	call   c0023d04 <SATABus::SATABus()>
c0022d6f:	eb 1e                	jmp    c0022d8f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d71:	66 81 f9 01 01       	cmp    cx,0x101
c0022d76:	75 60                	jne    c0022dd8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d78:	83 ec 0c             	sub    esp,0xc
c0022d7b:	68 70 02 00 00       	push   0x270
c0022d80:	e8 77 cb fe ff       	call   c000f8fc <malloc>
c0022d85:	89 c5                	mov    ebp,eax
c0022d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d8a:	e8 03 03 00 00       	call   c0023092 <IDE::IDE()>
c0022d8f:	58                   	pop    eax
c0022d90:	5a                   	pop    edx
c0022d91:	55                   	push   ebp
c0022d92:	56                   	push   esi
c0022d93:	e8 96 16 ff ff       	call   c001442e <Device::addChild(Device*)>
c0022d98:	83 ec 1c             	sub    esp,0x1c
c0022d9b:	b9 09 00 00 00       	mov    ecx,0x9
c0022da0:	fc                   	cld    
c0022da1:	89 e7                	mov    edi,esp
c0022da3:	89 de                	mov    esi,ebx
c0022da5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022da7:	55                   	push   ebp
c0022da8:	e8 8b 15 ff ff       	call   c0014338 <Device::preOpenPCI(PCIDeviceInfo)>
c0022dad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022db0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022db4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022dbc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022dc4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022dcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dcf:	83 c4 4c             	add    esp,0x4c
c0022dd2:	5b                   	pop    ebx
c0022dd3:	5e                   	pop    esi
c0022dd4:	5f                   	pop    edi
c0022dd5:	5d                   	pop    ebp
c0022dd6:	ff e0                	jmp    eax
c0022dd8:	83 ec 0c             	sub    esp,0xc
c0022ddb:	68 58 01 00 00       	push   0x158
c0022de0:	e8 17 cb fe ff       	call   c000f8fc <malloc>
c0022de5:	89 c5                	mov    ebp,eax
c0022de7:	58                   	pop    eax
c0022de8:	5a                   	pop    edx
c0022de9:	68 58 cd 02 c0       	push   0xc002cd58
c0022dee:	55                   	push   ebp
c0022def:	e8 30 19 ff ff       	call   c0014724 <DriverlessDevice::DriverlessDevice(char const*)>
c0022df4:	59                   	pop    ecx
c0022df5:	5f                   	pop    edi
c0022df6:	55                   	push   ebp
c0022df7:	56                   	push   esi
c0022df8:	e8 31 16 ff ff       	call   c001442e <Device::addChild(Device*)>
c0022dfd:	b9 09 00 00 00       	mov    ecx,0x9
c0022e02:	fc                   	cld    
c0022e03:	89 df                	mov    edi,ebx
c0022e05:	89 de                	mov    esi,ebx
c0022e07:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e09:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022e0d:	83 c4 2c             	add    esp,0x2c
c0022e10:	5b                   	pop    ebx
c0022e11:	5e                   	pop    esi
c0022e12:	5f                   	pop    edi
c0022e13:	5d                   	pop    ebp
c0022e14:	e9 1f 15 ff ff       	jmp    c0014338 <Device::preOpenPCI(PCIDeviceInfo)>
c0022e19:	83 c4 1c             	add    esp,0x1c
c0022e1c:	5b                   	pop    ebx
c0022e1d:	5e                   	pop    esi
c0022e1e:	5f                   	pop    edi
c0022e1f:	5d                   	pop    ebp
c0022e20:	c3                   	ret    
c0022e21:	90                   	nop

c0022e22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022e22:	55                   	push   ebp
c0022e23:	57                   	push   edi
c0022e24:	56                   	push   esi
c0022e25:	53                   	push   ebx
c0022e26:	83 ec 5c             	sub    esp,0x5c
c0022e29:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022e2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e31:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022e35:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022e3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022e3e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022e42:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022e47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e4b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e50:	6a 0c                	push   0xc
c0022e52:	55                   	push   ebp
c0022e53:	53                   	push   ebx
c0022e54:	57                   	push   edi
c0022e55:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e5c:	e8 01 fc ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e61:	55                   	push   ebp
c0022e62:	53                   	push   ebx
c0022e63:	57                   	push   edi
c0022e64:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e6b:	e8 80 fc ff ff       	call   c0022af0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e70:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e75:	83 c4 24             	add    esp,0x24
c0022e78:	55                   	push   ebp
c0022e79:	53                   	push   ebx
c0022e7a:	57                   	push   edi
c0022e7b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e7f:	e8 f6 fc ff ff       	call   c0022b7a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e84:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e88:	6a 3c                	push   0x3c
c0022e8a:	55                   	push   ebp
c0022e8b:	53                   	push   ebx
c0022e8c:	57                   	push   edi
c0022e8d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e94:	e8 c9 fb ff ff       	call   c0022a62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e99:	0f b6 c4             	movzx  eax,ah
c0022e9c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022ea0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022ea4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022ea8:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0022ead:	83 c4 24             	add    esp,0x24
c0022eb0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022eb6:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022ebd:	74 6c                	je     c0022f2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ebf:	31 f6                	xor    esi,esi
c0022ec1:	8b 15 68 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e768
c0022ec7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ecd:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022ed3:	7e 56                	jle    c0022f2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ed5:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022ed8:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022edf:	39 cb                	cmp    ebx,ecx
c0022ee1:	75 45                	jne    c0022f28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ee3:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022eea:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022eee:	75 38                	jne    c0022f28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ef0:	83 ec 0c             	sub    esp,0xc
c0022ef3:	68 72 cd 02 c0       	push   0xc002cd72
c0022ef8:	e8 0a 01 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0022efd:	8b 15 68 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e768
c0022f03:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022f09:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022f11:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022f15:	52                   	push   edx
c0022f16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022f1a:	53                   	push   ebx
c0022f1b:	68 97 cd 02 c0       	push   0xc002cd97
c0022f20:	e8 e2 00 ff ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0022f25:	83 c4 20             	add    esp,0x20
c0022f28:	46                   	inc    esi
c0022f29:	eb 96                	jmp    c0022ec1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f2b:	31 d2                	xor    edx,edx
c0022f2d:	83 ec 0c             	sub    esp,0xc
c0022f30:	55                   	push   ebp
c0022f31:	53                   	push   ebx
c0022f32:	57                   	push   edi
c0022f33:	52                   	push   edx
c0022f34:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022f38:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f3f:	e8 7c fc ff ff       	call   c0022bc0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f44:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022f48:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f4c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f50:	42                   	inc    edx
c0022f51:	83 c4 20             	add    esp,0x20
c0022f54:	83 fa 06             	cmp    edx,0x6
c0022f57:	75 d4                	jne    c0022f2d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f59:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f5d:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f61:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f65:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f69:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f6d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f71:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f76:	86 e0                	xchg   al,ah
c0022f78:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f7d:	55                   	push   ebp
c0022f7e:	53                   	push   ebx
c0022f7f:	57                   	push   edi
c0022f80:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f84:	e8 ab fb ff ff       	call   c0022b34 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f89:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f8d:	55                   	push   ebp
c0022f8e:	53                   	push   ebx
c0022f8f:	57                   	push   edi
c0022f90:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f97:	e8 0e fb ff ff       	call   c0022aaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f9c:	83 ec 0c             	sub    esp,0xc
c0022f9f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022fa4:	b9 09 00 00 00       	mov    ecx,0x9
c0022fa9:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022fad:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022fb1:	fc                   	cld    
c0022fb2:	89 e7                	mov    edi,esp
c0022fb4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022fb6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022fbd:	e8 ee fc ff ff       	call   c0022cb0 <PCI::foundDevice(PCIDeviceInfo)>
c0022fc2:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022fc8:	5b                   	pop    ebx
c0022fc9:	5e                   	pop    esi
c0022fca:	5f                   	pop    edi
c0022fcb:	5d                   	pop    ebp
c0022fcc:	c3                   	ret    
c0022fcd:	90                   	nop

c0022fce <PCI::checkDevice(unsigned char, unsigned char)>:
c0022fce:	55                   	push   ebp
c0022fcf:	57                   	push   edi
c0022fd0:	56                   	push   esi
c0022fd1:	53                   	push   ebx
c0022fd2:	83 ec 0c             	sub    esp,0xc
c0022fd5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022fd9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022fde:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022fe3:	6a 00                	push   0x0
c0022fe5:	56                   	push   esi
c0022fe6:	57                   	push   edi
c0022fe7:	55                   	push   ebp
c0022fe8:	e8 bd fa ff ff       	call   c0022aaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fed:	6a 00                	push   0x0
c0022fef:	56                   	push   esi
c0022ff0:	57                   	push   edi
c0022ff1:	55                   	push   ebp
c0022ff2:	e8 2b fe ff ff       	call   c0022e22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ff7:	83 c4 20             	add    esp,0x20
c0022ffa:	6a 00                	push   0x0
c0022ffc:	56                   	push   esi
c0022ffd:	57                   	push   edi
c0022ffe:	55                   	push   ebp
c0022fff:	e8 c8 fa ff ff       	call   c0022acc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023004:	83 c4 10             	add    esp,0x10
c0023007:	84 c0                	test   al,al
c0023009:	79 27                	jns    c0023032 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002300b:	bb 01 00 00 00       	mov    ebx,0x1
c0023010:	53                   	push   ebx
c0023011:	56                   	push   esi
c0023012:	57                   	push   edi
c0023013:	55                   	push   ebp
c0023014:	e8 91 fa ff ff       	call   c0022aaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023019:	83 c4 10             	add    esp,0x10
c002301c:	66 40                	inc    ax
c002301e:	74 0c                	je     c002302c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023020:	53                   	push   ebx
c0023021:	56                   	push   esi
c0023022:	57                   	push   edi
c0023023:	55                   	push   ebp
c0023024:	e8 f9 fd ff ff       	call   c0022e22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023029:	83 c4 10             	add    esp,0x10
c002302c:	43                   	inc    ebx
c002302d:	83 fb 08             	cmp    ebx,0x8
c0023030:	75 de                	jne    c0023010 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023032:	83 c4 0c             	add    esp,0xc
c0023035:	5b                   	pop    ebx
c0023036:	5e                   	pop    esi
c0023037:	5f                   	pop    edi
c0023038:	5d                   	pop    ebp
c0023039:	c3                   	ret    

c002303a <PCI::detect()>:
c002303a:	56                   	push   esi
c002303b:	53                   	push   ebx
c002303c:	53                   	push   ebx
c002303d:	31 db                	xor    ebx,ebx
c002303f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023043:	6a 00                	push   0x0
c0023045:	6a 00                	push   0x0
c0023047:	6a 00                	push   0x0
c0023049:	56                   	push   esi
c002304a:	e8 7d fa ff ff       	call   c0022acc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002304f:	83 c4 10             	add    esp,0x10
c0023052:	a8 80                	test   al,0x80
c0023054:	75 21                	jne    c0023077 <PCI::detect()+0x3d>
c0023056:	51                   	push   ecx
c0023057:	51                   	push   ecx
c0023058:	6a 00                	push   0x0
c002305a:	56                   	push   esi
c002305b:	e8 2c fc ff ff       	call   c0022c8c <PCI::checkBus(unsigned char)>
c0023060:	83 c4 10             	add    esp,0x10
c0023063:	eb 24                	jmp    c0023089 <PCI::detect()+0x4f>
c0023065:	52                   	push   edx
c0023066:	52                   	push   edx
c0023067:	53                   	push   ebx
c0023068:	43                   	inc    ebx
c0023069:	56                   	push   esi
c002306a:	e8 1d fc ff ff       	call   c0022c8c <PCI::checkBus(unsigned char)>
c002306f:	83 c4 10             	add    esp,0x10
c0023072:	83 fb 08             	cmp    ebx,0x8
c0023075:	74 12                	je     c0023089 <PCI::detect()+0x4f>
c0023077:	53                   	push   ebx
c0023078:	6a 00                	push   0x0
c002307a:	6a 00                	push   0x0
c002307c:	56                   	push   esi
c002307d:	e8 28 fa ff ff       	call   c0022aaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023082:	83 c4 10             	add    esp,0x10
c0023085:	66 40                	inc    ax
c0023087:	74 dc                	je     c0023065 <PCI::detect()+0x2b>
c0023089:	58                   	pop    eax
c002308a:	5b                   	pop    ebx
c002308b:	5e                   	pop    esi
c002308c:	c3                   	ret    
c002308d:	90                   	nop

c002308e <IDE::close(int, int, void*)>:
c002308e:	83 c8 ff             	or     eax,0xffffffff
c0023091:	c3                   	ret    

c0023092 <IDE::IDE()>:
c0023092:	83 ec 0c             	sub    esp,0xc
c0023095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023099:	83 ec 08             	sub    esp,0x8
c002309c:	68 e0 cd 02 c0       	push   0xc002cde0
c00230a1:	50                   	push   eax
c00230a2:	e8 13 17 ff ff       	call   c00147ba <HardDiskController::HardDiskController(char const*)>
c00230a7:	83 c4 10             	add    esp,0x10
c00230aa:	ba 20 d0 02 c0       	mov    edx,0xc002d020
c00230af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b3:	89 10                	mov    DWORD PTR [eax],edx
c00230b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00230c0:	90                   	nop
c00230c1:	83 c4 0c             	add    esp,0xc
c00230c4:	c3                   	ret    
c00230c5:	90                   	nop

c00230c6 <IDE::prepareInterrupt(unsigned char)>:
c00230c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00230cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00230cf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00230d7:	c3                   	ret    

c00230d8 <selectDrive(unsigned char, unsigned char)>:
c00230d8:	c3                   	ret    
c00230d9:	90                   	nop

c00230da <IDE::getBase(unsigned char)>:
c00230da:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00230df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230e3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230eb:	c3                   	ret    

c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230ec:	55                   	push   ebp
c00230ed:	57                   	push   edi
c00230ee:	56                   	push   esi
c00230ef:	53                   	push   ebx
c00230f0:	83 ec 1c             	sub    esp,0x1c
c00230f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230fb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023102:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023106:	80 f9 03             	cmp    cl,0x3
c0023109:	77 51                	ja     c002315c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002310b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002310f:	0f b6 f2             	movzx  esi,dl
c0023112:	0f b6 db             	movzx  ebx,bl
c0023115:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023118:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002311c:	83 ca 80             	or     edx,0xffffff80
c002311f:	0f b6 d2             	movzx  edx,dl
c0023122:	52                   	push   edx
c0023123:	6a 0c                	push   0xc
c0023125:	56                   	push   esi
c0023126:	57                   	push   edi
c0023127:	e8 c0 ff ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002312c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023131:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023135:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023139:	ee                   	out    dx,al
c002313a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002313f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023143:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023147:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002314b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023153:	83 c4 2c             	add    esp,0x2c
c0023156:	5b                   	pop    ebx
c0023157:	5e                   	pop    esi
c0023158:	5f                   	pop    edi
c0023159:	5d                   	pop    ebp
c002315a:	eb 90                	jmp    c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002315c:	80 fb 07             	cmp    bl,0x7
c002315f:	77 12                	ja     c0023173 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023161:	0f b6 d2             	movzx  edx,dl
c0023164:	0f b6 db             	movzx  ebx,bl
c0023167:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002316f:	89 da                	mov    edx,ebx
c0023171:	eb 2f                	jmp    c00231a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023173:	80 fb 0d             	cmp    bl,0xd
c0023176:	77 13                	ja     c002318b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023178:	0f b6 d2             	movzx  edx,dl
c002317b:	0f b6 db             	movzx  ebx,bl
c002317e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023185:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023189:	eb 17                	jmp    c00231a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002318b:	80 fb 15             	cmp    bl,0x15
c002318e:	77 13                	ja     c00231a3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023190:	0f b6 d2             	movzx  edx,dl
c0023193:	0f b6 db             	movzx  ebx,bl
c0023196:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002319e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00231a2:	ee                   	out    dx,al
c00231a3:	83 c4 1c             	add    esp,0x1c
c00231a6:	5b                   	pop    ebx
c00231a7:	5e                   	pop    esi
c00231a8:	5f                   	pop    edi
c00231a9:	5d                   	pop    ebp
c00231aa:	c3                   	ret    
c00231ab:	90                   	nop

c00231ac <IDE::read(unsigned char, unsigned char)>:
c00231ac:	55                   	push   ebp
c00231ad:	57                   	push   edi
c00231ae:	56                   	push   esi
c00231af:	53                   	push   ebx
c00231b0:	83 ec 1c             	sub    esp,0x1c
c00231b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00231b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00231bb:	8d 43 f8             	lea    eax,[ebx-0x8]
c00231be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00231c2:	3c 03                	cmp    al,0x3
c00231c4:	77 43                	ja     c0023209 <IDE::read(unsigned char, unsigned char)+0x5d>
c00231c6:	0f b6 f2             	movzx  esi,dl
c00231c9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00231cc:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00231d0:	83 c8 80             	or     eax,0xffffff80
c00231d3:	0f b6 c0             	movzx  eax,al
c00231d6:	50                   	push   eax
c00231d7:	6a 0c                	push   0xc
c00231d9:	56                   	push   esi
c00231da:	57                   	push   edi
c00231db:	e8 0c ff ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231e0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00231e5:	0f b6 c3             	movzx  eax,bl
c00231e8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231ec:	ec                   	in     al,dx
c00231ed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231f1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231f6:	52                   	push   edx
c00231f7:	6a 0c                	push   0xc
c00231f9:	56                   	push   esi
c00231fa:	57                   	push   edi
c00231fb:	e8 ec fe ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023200:	83 c4 20             	add    esp,0x20
c0023203:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023207:	eb 49                	jmp    c0023252 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023209:	80 fb 07             	cmp    bl,0x7
c002320c:	77 12                	ja     c0023220 <IDE::read(unsigned char, unsigned char)+0x74>
c002320e:	0f b6 d2             	movzx  edx,dl
c0023211:	0f b6 c3             	movzx  eax,bl
c0023214:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002321c:	89 c2                	mov    edx,eax
c002321e:	eb 31                	jmp    c0023251 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023220:	80 fb 0d             	cmp    bl,0xd
c0023223:	77 13                	ja     c0023238 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023225:	0f b6 d2             	movzx  edx,dl
c0023228:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002322f:	0f b6 d3             	movzx  edx,bl
c0023232:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023236:	eb 19                	jmp    c0023251 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023238:	31 c0                	xor    eax,eax
c002323a:	80 fb 15             	cmp    bl,0x15
c002323d:	77 13                	ja     c0023252 <IDE::read(unsigned char, unsigned char)+0xa6>
c002323f:	0f b6 d2             	movzx  edx,dl
c0023242:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002324a:	0f b6 d3             	movzx  edx,bl
c002324d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023251:	ec                   	in     al,dx
c0023252:	83 c4 1c             	add    esp,0x1c
c0023255:	5b                   	pop    ebx
c0023256:	5e                   	pop    esi
c0023257:	5f                   	pop    edi
c0023258:	5d                   	pop    ebp
c0023259:	c3                   	ret    

c002325a <IDE::waitInterrupt(unsigned char)>:
c002325a:	55                   	push   ebp
c002325b:	57                   	push   edi
c002325c:	56                   	push   esi
c002325d:	53                   	push   ebx
c002325e:	31 db                	xor    ebx,ebx
c0023260:	83 ec 0c             	sub    esp,0xc
c0023263:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023267:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002326c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023274:	89 e8                	mov    eax,ebp
c0023276:	84 c0                	test   al,al
c0023278:	75 34                	jne    c00232ae <IDE::waitInterrupt(unsigned char)+0x54>
c002327a:	52                   	push   edx
c002327b:	6a 0c                	push   0xc
c002327d:	56                   	push   esi
c002327e:	57                   	push   edi
c002327f:	e8 28 ff ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023284:	83 c4 10             	add    esp,0x10
c0023287:	a8 01                	test   al,0x1
c0023289:	75 2b                	jne    c00232b6 <IDE::waitInterrupt(unsigned char)+0x5c>
c002328b:	f6 c3 04             	test   bl,0x4
c002328e:	75 16                	jne    c00232a6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023290:	83 fb 32             	cmp    ebx,0x32
c0023293:	7e 11                	jle    c00232a6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023295:	50                   	push   eax
c0023296:	50                   	push   eax
c0023297:	6a 00                	push   0x0
c0023299:	68 80 96 98 00       	push   0x989680
c002329e:	e8 8b b1 ff ff       	call   c001e42e <nanoSleep(unsigned long long)>
c00232a3:	83 c4 10             	add    esp,0x10
c00232a6:	83 fb 3c             	cmp    ebx,0x3c
c00232a9:	74 0b                	je     c00232b6 <IDE::waitInterrupt(unsigned char)+0x5c>
c00232ab:	43                   	inc    ebx
c00232ac:	eb be                	jmp    c002326c <IDE::waitInterrupt(unsigned char)+0x12>
c00232ae:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00232b6:	83 c4 0c             	add    esp,0xc
c00232b9:	89 e8                	mov    eax,ebp
c00232bb:	5b                   	pop    ebx
c00232bc:	5e                   	pop    esi
c00232bd:	5f                   	pop    edi
c00232be:	5d                   	pop    ebp
c00232bf:	c3                   	ret    

c00232c0 <ideChannel0IRQHandler(regs*, void*)>:
c00232c0:	83 ec 10             	sub    esp,0x10
c00232c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232c7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00232ce:	6a 07                	push   0x7
c00232d0:	6a 00                	push   0x0
c00232d2:	50                   	push   eax
c00232d3:	e8 d4 fe ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00232d8:	83 c4 1c             	add    esp,0x1c
c00232db:	c3                   	ret    

c00232dc <ideChannel1IRQHandler(regs*, void*)>:
c00232dc:	83 ec 10             	sub    esp,0x10
c00232df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232e3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232ea:	6a 07                	push   0x7
c00232ec:	6a 01                	push   0x1
c00232ee:	50                   	push   eax
c00232ef:	e8 b8 fe ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00232f4:	83 c4 1c             	add    esp,0x1c
c00232f7:	c3                   	ret    

c00232f8 <IDE::enableIRQs(unsigned char, bool)>:
c00232f8:	57                   	push   edi
c00232f9:	56                   	push   esi
c00232fa:	be 04 00 00 00       	mov    esi,0x4
c00232ff:	53                   	push   ebx
c0023300:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023305:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023309:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002330e:	0f 94 c0             	sete   al
c0023311:	d1 e0                	shl    eax,1
c0023313:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002331a:	0f b6 c0             	movzx  eax,al
c002331d:	50                   	push   eax
c002331e:	6a 0c                	push   0xc
c0023320:	57                   	push   edi
c0023321:	53                   	push   ebx
c0023322:	e8 c5 fd ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023327:	83 c4 10             	add    esp,0x10
c002332a:	50                   	push   eax
c002332b:	6a 0c                	push   0xc
c002332d:	57                   	push   edi
c002332e:	53                   	push   ebx
c002332f:	e8 78 fe ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023334:	83 c4 10             	add    esp,0x10
c0023337:	4e                   	dec    esi
c0023338:	75 f0                	jne    c002332a <IDE::enableIRQs(unsigned char, bool)+0x32>
c002333a:	5b                   	pop    ebx
c002333b:	5e                   	pop    esi
c002333c:	5f                   	pop    edi
c002333d:	c3                   	ret    

c002333e <IDE::open(int, int, void*)>:
c002333e:	55                   	push   ebp
c002333f:	57                   	push   edi
c0023340:	56                   	push   esi
c0023341:	53                   	push   ebx
c0023342:	83 ec 1c             	sub    esp,0x1c
c0023345:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023349:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023352:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002335b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023362:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023369:	0f 85 b0 02 00 00    	jne    c002361f <IDE::open(int, int, void*)+0x2e1>
c002336f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023375:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023379:	83 e0 7f             	and    eax,0x7f
c002337c:	3c 05                	cmp    al,0x5
c002337e:	74 04                	je     c0023384 <IDE::open(int, int, void*)+0x46>
c0023380:	3c 0f                	cmp    al,0xf
c0023382:	75 32                	jne    c00233b6 <IDE::open(int, int, void*)+0x78>
c0023384:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002338a:	83 e0 fc             	and    eax,0xfffffffc
c002338d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023394:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002339a:	83 e0 fc             	and    eax,0xfffffffc
c002339d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00233a4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00233aa:	83 e0 fc             	and    eax,0xfffffffc
c00233ad:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233b4:	eb 14                	jmp    c00233ca <IDE::open(int, int, void*)+0x8c>
c00233b6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233c0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233ca:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00233d1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00233d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00233dc:	89 c6                	mov    esi,eax
c00233de:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233e3:	c1 e6 10             	shl    esi,0x10
c00233e6:	89 e8                	mov    eax,ebp
c00233e8:	89 fa                	mov    edx,edi
c00233ea:	c1 e0 0b             	shl    eax,0xb
c00233ed:	09 f0                	or     eax,esi
c00233ef:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233f6:	c1 e6 08             	shl    esi,0x8
c00233f9:	09 c6                	or     esi,eax
c00233fb:	89 f0                	mov    eax,esi
c00233fd:	0d 08 00 00 80       	or     eax,0x80000008
c0023402:	ef                   	out    dx,eax
c0023403:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023408:	89 ca                	mov    edx,ecx
c002340a:	ed                   	in     eax,dx
c002340b:	c1 e8 10             	shr    eax,0x10
c002340e:	3d ff ff 00 00       	cmp    eax,0xffff
c0023413:	0f 84 f5 00 00 00    	je     c002350e <IDE::open(int, int, void*)+0x1d0>
c0023419:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002341f:	89 fa                	mov    edx,edi
c0023421:	89 f0                	mov    eax,esi
c0023423:	ef                   	out    dx,eax
c0023424:	b0 fe                	mov    al,0xfe
c0023426:	89 ca                	mov    edx,ecx
c0023428:	ee                   	out    dx,al
c0023429:	89 f0                	mov    eax,esi
c002342b:	89 fa                	mov    edx,edi
c002342d:	ef                   	out    dx,eax
c002342e:	89 ca                	mov    edx,ecx
c0023430:	ed                   	in     eax,dx
c0023431:	3c fe                	cmp    al,0xfe
c0023433:	0f 85 a9 00 00 00    	jne    c00234e2 <IDE::open(int, int, void*)+0x1a4>
c0023439:	8b 15 68 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e768
c002343f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023446:	74 33                	je     c002347b <IDE::open(int, int, void*)+0x13d>
c0023448:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002344e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023452:	40                   	inc    eax
c0023453:	83 ec 0c             	sub    esp,0xc
c0023456:	0f b6 c0             	movzx  eax,al
c0023459:	50                   	push   eax
c002345a:	55                   	push   ebp
c002345b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002345f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023465:	51                   	push   ecx
c0023466:	e8 a7 4e ff ff       	call   c0018312 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002346b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023470:	83 c4 1c             	add    esp,0x1c
c0023473:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023479:	eb 0a                	jmp    c0023485 <IDE::open(int, int, void*)+0x147>
c002347b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023485:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002348c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023493:	c1 e1 10             	shl    ecx,0x10
c0023496:	c1 e0 08             	shl    eax,0x8
c0023499:	bf f8 0c 00 00       	mov    edi,0xcf8
c002349e:	09 c1                	or     ecx,eax
c00234a0:	89 fa                	mov    edx,edi
c00234a2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00234a9:	c1 e0 0b             	shl    eax,0xb
c00234ac:	09 c1                	or     ecx,eax
c00234ae:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00234b4:	89 c8                	mov    eax,ecx
c00234b6:	ef                   	out    dx,eax
c00234b7:	be fc 0c 00 00       	mov    esi,0xcfc
c00234bc:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00234c2:	89 f2                	mov    edx,esi
c00234c4:	ee                   	out    dx,al
c00234c5:	89 c8                	mov    eax,ecx
c00234c7:	89 fa                	mov    edx,edi
c00234c9:	ef                   	out    dx,eax
c00234ca:	89 f2                	mov    edx,esi
c00234cc:	ed                   	in     eax,dx
c00234cd:	0f b6 c0             	movzx  eax,al
c00234d0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00234d6:	74 46                	je     c002351e <IDE::open(int, int, void*)+0x1e0>
c00234d8:	83 ec 0c             	sub    esp,0xc
c00234db:	68 f8 cd 02 c0       	push   0xc002cdf8
c00234e0:	eb 34                	jmp    c0023516 <IDE::open(int, int, void*)+0x1d8>
c00234e2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234eb:	75 17                	jne    c0023504 <IDE::open(int, int, void*)+0x1c6>
c00234ed:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234f2:	74 07                	je     c00234fb <IDE::open(int, int, void*)+0x1bd>
c00234f4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234f9:	75 09                	jne    c0023504 <IDE::open(int, int, void*)+0x1c6>
c00234fb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023502:	eb 1a                	jmp    c002351e <IDE::open(int, int, void*)+0x1e0>
c0023504:	83 ec 0c             	sub    esp,0xc
c0023507:	68 00 ce 02 c0       	push   0xc002ce00
c002350c:	eb 08                	jmp    c0023516 <IDE::open(int, int, void*)+0x1d8>
c002350e:	83 ec 0c             	sub    esp,0xc
c0023511:	68 31 ce 02 c0       	push   0xc002ce31
c0023516:	e8 9e 71 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c002351b:	83 c4 10             	add    esp,0x10
c002351e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023525:	79 1a                	jns    c0023541 <IDE::open(int, int, void*)+0x203>
c0023527:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002352d:	83 e0 fc             	and    eax,0xfffffffc
c0023530:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023537:	83 c0 08             	add    eax,0x8
c002353a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023541:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023547:	89 c2                	mov    edx,eax
c0023549:	83 e2 0f             	and    edx,0xf
c002354c:	66 83 fa 08          	cmp    dx,0x8
c0023550:	75 0a                	jne    c002355c <IDE::open(int, int, void*)+0x21e>
c0023552:	83 e8 02             	sub    eax,0x2
c0023555:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002355c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023562:	89 c2                	mov    edx,eax
c0023564:	83 e2 0f             	and    edx,0xf
c0023567:	66 83 fa 08          	cmp    dx,0x8
c002356b:	75 0a                	jne    c0023577 <IDE::open(int, int, void*)+0x239>
c002356d:	83 e8 02             	sub    eax,0x2
c0023570:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023577:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002357e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023585:	89 d0                	mov    eax,edx
c0023587:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002358a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002358e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023592:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023595:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002359a:	0f b6 c9             	movzx  ecx,cl
c002359d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00235a4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235a7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235ab:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00235af:	8d 50 02             	lea    edx,[eax+0x2]
c00235b2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235b7:	0f b6 d2             	movzx  edx,dl
c00235ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00235c0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235c3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235c7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00235cb:	8d 48 03             	lea    ecx,[eax+0x3]
c00235ce:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235d3:	0f b6 c9             	movzx  ecx,cl
c00235d6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00235dc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235df:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235e3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00235e7:	8d 50 04             	lea    edx,[eax+0x4]
c00235ea:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235f0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235f5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235fc:	66 85 f6             	test   si,si
c00235ff:	74 3e                	je     c002363f <IDE::open(int, int, void*)+0x301>
c0023601:	0f b6 d2             	movzx  edx,dl
c0023604:	83 c0 05             	add    eax,0x5
c0023607:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002360a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002360e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023612:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023618:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002361d:	eb 20                	jmp    c002363f <IDE::open(int, int, void*)+0x301>
c002361f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023629:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023633:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002363a:	e9 02 ff ff ff       	jmp    c0023541 <IDE::open(int, int, void*)+0x203>
c002363f:	52                   	push   edx
c0023640:	52                   	push   edx
c0023641:	6a 00                	push   0x0
c0023643:	53                   	push   ebx
c0023644:	e8 7d fa ff ff       	call   c00230c6 <IDE::prepareInterrupt(unsigned char)>
c0023649:	59                   	pop    ecx
c002364a:	5e                   	pop    esi
c002364b:	6a 01                	push   0x1
c002364d:	53                   	push   ebx
c002364e:	e8 73 fa ff ff       	call   c00230c6 <IDE::prepareInterrupt(unsigned char)>
c0023653:	83 c4 0c             	add    esp,0xc
c0023656:	6a 00                	push   0x0
c0023658:	6a 00                	push   0x0
c002365a:	53                   	push   ebx
c002365b:	e8 98 fc ff ff       	call   c00232f8 <IDE::enableIRQs(unsigned char, bool)>
c0023660:	83 c4 0c             	add    esp,0xc
c0023663:	6a 00                	push   0x0
c0023665:	6a 01                	push   0x1
c0023667:	53                   	push   ebx
c0023668:	e8 8b fc ff ff       	call   c00232f8 <IDE::enableIRQs(unsigned char, bool)>
c002366d:	83 c4 10             	add    esp,0x10
c0023670:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023677:	74 40                	je     c00236b9 <IDE::open(int, int, void*)+0x37b>
c0023679:	83 ec 0c             	sub    esp,0xc
c002367c:	68 5b ce 02 c0       	push   0xc002ce5b
c0023681:	e8 81 f9 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023686:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023689:	6a 01                	push   0x1
c002368b:	68 c0 32 02 c0       	push   0xc00232c0
c0023690:	6a 0e                	push   0xe
c0023692:	53                   	push   ebx
c0023693:	e8 1a 0d ff ff       	call   c00143b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023698:	83 c4 14             	add    esp,0x14
c002369b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00236a1:	53                   	push   ebx
c00236a2:	6a 01                	push   0x1
c00236a4:	68 dc 32 02 c0       	push   0xc00232dc
c00236a9:	6a 0f                	push   0xf
c00236ab:	53                   	push   ebx
c00236ac:	e8 01 0d ff ff       	call   c00143b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236b1:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00236b7:	eb 4a                	jmp    c0023703 <IDE::open(int, int, void*)+0x3c5>
c00236b9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00236c3:	50                   	push   eax
c00236c4:	6a 0f                	push   0xf
c00236c6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236cc:	68 77 ce 02 c0       	push   0xc002ce77
c00236d1:	e8 31 f9 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c00236d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00236d9:	6a 00                	push   0x0
c00236db:	68 c0 32 02 c0       	push   0xc00232c0
c00236e0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236e6:	53                   	push   ebx
c00236e7:	e8 c6 0c ff ff       	call   c00143b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236ec:	83 c4 14             	add    esp,0x14
c00236ef:	53                   	push   ebx
c00236f0:	6a 00                	push   0x0
c00236f2:	68 dc 32 02 c0       	push   0xc00232dc
c00236f7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236fd:	53                   	push   ebx
c00236fe:	e8 af 0c ff ff       	call   c00143b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023703:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023705:	83 c4 20             	add    esp,0x20
c0023708:	83 ec 0c             	sub    esp,0xc
c002370b:	53                   	push   ebx
c002370c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002370f:	83 c4 0c             	add    esp,0xc
c0023712:	6a 07                	push   0x7
c0023714:	6a 00                	push   0x0
c0023716:	53                   	push   ebx
c0023717:	e8 90 fa ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c002371c:	83 c4 0c             	add    esp,0xc
c002371f:	6a 07                	push   0x7
c0023721:	6a 01                	push   0x1
c0023723:	53                   	push   ebx
c0023724:	e8 83 fa ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023729:	83 c4 0c             	add    esp,0xc
c002372c:	6a 01                	push   0x1
c002372e:	6a 00                	push   0x0
c0023730:	53                   	push   ebx
c0023731:	e8 c2 fb ff ff       	call   c00232f8 <IDE::enableIRQs(unsigned char, bool)>
c0023736:	83 c4 0c             	add    esp,0xc
c0023739:	6a 01                	push   0x1
c002373b:	6a 01                	push   0x1
c002373d:	53                   	push   ebx
c002373e:	e8 b5 fb ff ff       	call   c00232f8 <IDE::enableIRQs(unsigned char, bool)>
c0023743:	83 c4 2c             	add    esp,0x2c
c0023746:	31 c0                	xor    eax,eax
c0023748:	5b                   	pop    ebx
c0023749:	5e                   	pop    esi
c002374a:	5f                   	pop    edi
c002374b:	5d                   	pop    ebp
c002374c:	c3                   	ret    
c002374d:	90                   	nop

c002374e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002374e:	55                   	push   ebp
c002374f:	57                   	push   edi
c0023750:	56                   	push   esi
c0023751:	53                   	push   ebx
c0023752:	83 ec 1c             	sub    esp,0x1c
c0023755:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023759:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002375d:	8d 50 f8             	lea    edx,[eax-0x8]
c0023760:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023764:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023768:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002376c:	80 fa 03             	cmp    dl,0x3
c002376f:	77 5d                	ja     c00237ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023771:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023775:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023779:	0f b6 db             	movzx  ebx,bl
c002377c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002377f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023783:	83 ca 80             	or     edx,0xffffff80
c0023786:	0f b6 d2             	movzx  edx,dl
c0023789:	52                   	push   edx
c002378a:	6a 0c                	push   0xc
c002378c:	53                   	push   ebx
c002378d:	56                   	push   esi
c002378e:	e8 59 f9 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023793:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002379c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00237a0:	0f b6 c0             	movzx  eax,al
c00237a3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00237a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237a9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00237ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00237b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00237b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00237ba:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00237c2:	83 c4 2c             	add    esp,0x2c
c00237c5:	5b                   	pop    ebx
c00237c6:	5e                   	pop    esi
c00237c7:	5f                   	pop    edi
c00237c8:	5d                   	pop    ebp
c00237c9:	e9 1e f9 ff ff       	jmp    c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ce:	3c 07                	cmp    al,0x7
c00237d0:	77 10                	ja     c00237e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00237d2:	0f b6 db             	movzx  ebx,bl
c00237d5:	0f b6 d0             	movzx  edx,al
c00237d8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00237e0:	eb 2d                	jmp    c002380f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237e2:	3c 0d                	cmp    al,0xd
c00237e4:	77 13                	ja     c00237f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00237e6:	0f b6 db             	movzx  ebx,bl
c00237e9:	0f b6 c0             	movzx  eax,al
c00237ec:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237f3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237f7:	eb 16                	jmp    c002380f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237f9:	3c 15                	cmp    al,0x15
c00237fb:	77 14                	ja     c0023811 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237fd:	0f b6 db             	movzx  ebx,bl
c0023800:	0f b6 c0             	movzx  eax,al
c0023803:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002380b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002380f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023811:	83 c4 1c             	add    esp,0x1c
c0023814:	5b                   	pop    ebx
c0023815:	5e                   	pop    esi
c0023816:	5f                   	pop    edi
c0023817:	5d                   	pop    ebp
c0023818:	c3                   	ret    
c0023819:	90                   	nop

c002381a <IDE::detect()>:
c002381a:	55                   	push   ebp
c002381b:	57                   	push   edi
c002381c:	56                   	push   esi
c002381d:	53                   	push   ebx
c002381e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023824:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002382b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023832:	0f 85 be 02 00 00    	jne    c0023af6 <IDE::detect()+0x2dc>
c0023838:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002383f:	31 f6                	xor    esi,esi
c0023841:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023849:	31 ed                	xor    ebp,ebp
c002384b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002384f:	c1 e0 06             	shl    eax,0x6
c0023852:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002385a:	89 e8                	mov    eax,ebp
c002385c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023860:	c1 e0 04             	shl    eax,0x4
c0023863:	83 c8 a0             	or     eax,0xffffffa0
c0023866:	0f b6 c0             	movzx  eax,al
c0023869:	50                   	push   eax
c002386a:	6a 06                	push   0x6
c002386c:	56                   	push   esi
c002386d:	53                   	push   ebx
c002386e:	e8 79 f8 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023873:	83 c4 0c             	add    esp,0xc
c0023876:	6a 0c                	push   0xc
c0023878:	56                   	push   esi
c0023879:	53                   	push   ebx
c002387a:	e8 2d f9 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c002387f:	83 c4 0c             	add    esp,0xc
c0023882:	6a 0c                	push   0xc
c0023884:	56                   	push   esi
c0023885:	53                   	push   ebx
c0023886:	e8 21 f9 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c002388b:	83 c4 0c             	add    esp,0xc
c002388e:	6a 0c                	push   0xc
c0023890:	56                   	push   esi
c0023891:	53                   	push   ebx
c0023892:	e8 15 f9 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023897:	83 c4 0c             	add    esp,0xc
c002389a:	6a 0c                	push   0xc
c002389c:	56                   	push   esi
c002389d:	53                   	push   ebx
c002389e:	e8 09 f9 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00238a3:	68 ec 00 00 00       	push   0xec
c00238a8:	6a 07                	push   0x7
c00238aa:	56                   	push   esi
c00238ab:	53                   	push   ebx
c00238ac:	e8 3b f8 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238b1:	83 c4 1c             	add    esp,0x1c
c00238b4:	6a 0c                	push   0xc
c00238b6:	56                   	push   esi
c00238b7:	53                   	push   ebx
c00238b8:	e8 ef f8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00238bd:	83 c4 0c             	add    esp,0xc
c00238c0:	6a 0c                	push   0xc
c00238c2:	56                   	push   esi
c00238c3:	53                   	push   ebx
c00238c4:	e8 e3 f8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00238c9:	83 c4 0c             	add    esp,0xc
c00238cc:	6a 0c                	push   0xc
c00238ce:	56                   	push   esi
c00238cf:	53                   	push   ebx
c00238d0:	e8 d7 f8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00238d5:	83 c4 0c             	add    esp,0xc
c00238d8:	6a 0c                	push   0xc
c00238da:	56                   	push   esi
c00238db:	53                   	push   ebx
c00238dc:	e8 cb f8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00238e1:	83 c4 0c             	add    esp,0xc
c00238e4:	6a 0c                	push   0xc
c00238e6:	56                   	push   esi
c00238e7:	53                   	push   ebx
c00238e8:	e8 bf f8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c00238ed:	83 c4 10             	add    esp,0x10
c00238f0:	84 c0                	test   al,al
c00238f2:	0f 84 8b 01 00 00    	je     c0023a83 <IDE::detect()+0x269>
c00238f8:	31 ff                	xor    edi,edi
c00238fa:	50                   	push   eax
c00238fb:	6a 0c                	push   0xc
c00238fd:	56                   	push   esi
c00238fe:	53                   	push   ebx
c00238ff:	e8 a8 f8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023904:	83 c4 10             	add    esp,0x10
c0023907:	a8 01                	test   al,0x1
c0023909:	0f 85 8e 01 00 00    	jne    c0023a9d <IDE::detect()+0x283>
c002390f:	84 c0                	test   al,al
c0023911:	78 04                	js     c0023917 <IDE::detect()+0xfd>
c0023913:	a8 08                	test   al,0x8
c0023915:	75 27                	jne    c002393e <IDE::detect()+0x124>
c0023917:	47                   	inc    edi
c0023918:	81 ff 17 01 00 00    	cmp    edi,0x117
c002391e:	7e da                	jle    c00238fa <IDE::detect()+0xe0>
c0023920:	50                   	push   eax
c0023921:	50                   	push   eax
c0023922:	6a 00                	push   0x0
c0023924:	68 40 4b 4c 00       	push   0x4c4b40
c0023929:	e8 00 ab ff ff       	call   c001e42e <nanoSleep(unsigned long long)>
c002392e:	83 c4 10             	add    esp,0x10
c0023931:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023937:	75 c1                	jne    c00238fa <IDE::detect()+0xe0>
c0023939:	e9 5f 01 00 00       	jmp    c0023a9d <IDE::detect()+0x283>
c002393e:	31 c9                	xor    ecx,ecx
c0023940:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023944:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023948:	83 ec 0c             	sub    esp,0xc
c002394b:	68 80 00 00 00       	push   0x80
c0023950:	57                   	push   edi
c0023951:	6a 00                	push   0x0
c0023953:	56                   	push   esi
c0023954:	53                   	push   ebx
c0023955:	e8 f4 fd ff ff       	call   c002374e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002395a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002395f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023963:	89 d1                	mov    ecx,edx
c0023965:	c1 e0 06             	shl    eax,0x6
c0023968:	01 d8                	add    eax,ebx
c002396a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023971:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023978:	89 f2                	mov    edx,esi
c002397a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023980:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023984:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002398a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002398e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023995:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002399d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00239a4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00239ac:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00239b2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00239b9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00239bf:	8d 54 24 58          	lea    edx,[esp+0x58]
c00239c3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00239c7:	83 c4 20             	add    esp,0x20
c00239ca:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00239cd:	83 c0 02             	add    eax,0x2
c00239d0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00239d6:	83 c7 02             	add    edi,0x2
c00239d9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00239dc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00239e2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00239e6:	75 e2                	jne    c00239ca <IDE::detect()+0x1b0>
c00239e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239ec:	c1 e0 06             	shl    eax,0x6
c00239ef:	01 d8                	add    eax,ebx
c00239f1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239f7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239fe:	66 c1 ea 09          	shr    dx,0x9
c0023a02:	83 e2 01             	and    edx,0x1
c0023a05:	84 c9                	test   cl,cl
c0023a07:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023a0d:	75 2f                	jne    c0023a3e <IDE::detect()+0x224>
c0023a0f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023a15:	85 c0                	test   eax,eax
c0023a17:	74 66                	je     c0023a7f <IDE::detect()+0x265>
c0023a19:	50                   	push   eax
c0023a1a:	55                   	push   ebp
c0023a1b:	56                   	push   esi
c0023a1c:	68 93 ce 02 c0       	push   0xc002ce93
c0023a21:	e8 e1 f5 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023a26:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a2d:	e8 ca be fe ff       	call   c000f8fc <malloc>
c0023a32:	89 c7                	mov    edi,eax
c0023a34:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a37:	e8 78 06 00 00       	call   c00240b4 <ATA::ATA()>
c0023a3c:	eb 28                	jmp    c0023a66 <IDE::detect()+0x24c>
c0023a3e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023a44:	55                   	push   ebp
c0023a45:	56                   	push   esi
c0023a46:	68 c2 ce 02 c0       	push   0xc002cec2
c0023a4b:	e8 b7 f5 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023a50:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a57:	e8 a0 be fe ff       	call   c000f8fc <malloc>
c0023a5c:	89 c7                	mov    edi,eax
c0023a5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a61:	e8 8e 0c 00 00       	call   c00246f4 <ATAPI::ATAPI()>
c0023a66:	5a                   	pop    edx
c0023a67:	59                   	pop    ecx
c0023a68:	57                   	push   edi
c0023a69:	53                   	push   ebx
c0023a6a:	e8 bf 09 ff ff       	call   c001442e <Device::addChild(Device*)>
c0023a6f:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a71:	53                   	push   ebx
c0023a72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a76:	6a 00                	push   0x0
c0023a78:	57                   	push   edi
c0023a79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a7c:	83 c4 20             	add    esp,0x20
c0023a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a83:	4d                   	dec    ebp
c0023a84:	74 0a                	je     c0023a90 <IDE::detect()+0x276>
c0023a86:	bd 01 00 00 00       	mov    ebp,0x1
c0023a8b:	e9 bb fd ff ff       	jmp    c002384b <IDE::detect()+0x31>
c0023a90:	4e                   	dec    esi
c0023a91:	74 63                	je     c0023af6 <IDE::detect()+0x2dc>
c0023a93:	be 01 00 00 00       	mov    esi,0x1
c0023a98:	e9 ac fd ff ff       	jmp    c0023849 <IDE::detect()+0x2f>
c0023a9d:	50                   	push   eax
c0023a9e:	6a 04                	push   0x4
c0023aa0:	56                   	push   esi
c0023aa1:	53                   	push   ebx
c0023aa2:	e8 05 f7 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023aa7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023aab:	83 c4 0c             	add    esp,0xc
c0023aae:	6a 05                	push   0x5
c0023ab0:	56                   	push   esi
c0023ab1:	53                   	push   ebx
c0023ab2:	e8 f5 f6 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023ab7:	83 c4 10             	add    esp,0x10
c0023aba:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023abe:	80 fa 14             	cmp    dl,0x14
c0023ac1:	75 04                	jne    c0023ac7 <IDE::detect()+0x2ad>
c0023ac3:	3c eb                	cmp    al,0xeb
c0023ac5:	eb 07                	jmp    c0023ace <IDE::detect()+0x2b4>
c0023ac7:	3c 96                	cmp    al,0x96
c0023ac9:	75 b8                	jne    c0023a83 <IDE::detect()+0x269>
c0023acb:	80 fa 69             	cmp    dl,0x69
c0023ace:	75 b3                	jne    c0023a83 <IDE::detect()+0x269>
c0023ad0:	68 a1 00 00 00       	push   0xa1
c0023ad5:	6a 07                	push   0x7
c0023ad7:	56                   	push   esi
c0023ad8:	53                   	push   ebx
c0023ad9:	e8 0e f6 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ade:	5f                   	pop    edi
c0023adf:	58                   	pop    eax
c0023ae0:	6a 00                	push   0x0
c0023ae2:	68 40 42 0f 00       	push   0xf4240
c0023ae7:	e8 42 a9 ff ff       	call   c001e42e <nanoSleep(unsigned long long)>
c0023aec:	83 c4 10             	add    esp,0x10
c0023aef:	b1 01                	mov    cl,0x1
c0023af1:	e9 4a fe ff ff       	jmp    c0023940 <IDE::detect()+0x126>
c0023af6:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023afc:	5b                   	pop    ebx
c0023afd:	5e                   	pop    esi
c0023afe:	5f                   	pop    edi
c0023aff:	5d                   	pop    ebp
c0023b00:	c3                   	ret    
c0023b01:	90                   	nop

c0023b02 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023b02:	55                   	push   ebp
c0023b03:	57                   	push   edi
c0023b04:	56                   	push   esi
c0023b05:	53                   	push   ebx
c0023b06:	83 ec 1c             	sub    esp,0x1c
c0023b09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023b0d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b11:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023b15:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023b19:	88 c3                	mov    bl,al
c0023b1b:	84 c0                	test   al,al
c0023b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b21:	0f 84 67 01 00 00    	je     c0023c8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023b27:	83 ec 0c             	sub    esp,0xc
c0023b2a:	68 f3 ce 02 c0       	push   0xc002cef3
c0023b2f:	e8 d3 f4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023b34:	83 c4 10             	add    esp,0x10
c0023b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b3b:	3c 01                	cmp    al,0x1
c0023b3d:	75 17                	jne    c0023b56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	b3 13                	mov    bl,0x13
c0023b44:	68 ff ce 02 c0       	push   0xc002ceff
c0023b49:	e8 b9 f4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023b4e:	83 c4 10             	add    esp,0x10
c0023b51:	e9 25 01 00 00       	jmp    c0023c7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b56:	3c 02                	cmp    al,0x2
c0023b58:	0f 85 ef 00 00 00    	jne    c0023c4d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b5e:	d1 e6                	shl    esi,1
c0023b60:	09 ee                	or     esi,ebp
c0023b62:	52                   	push   edx
c0023b63:	89 f0                	mov    eax,esi
c0023b65:	6a 01                	push   0x1
c0023b67:	0f b6 f0             	movzx  esi,al
c0023b6a:	c1 e6 06             	shl    esi,0x6
c0023b6d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b75:	50                   	push   eax
c0023b76:	57                   	push   edi
c0023b77:	e8 30 f6 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	89 c6                	mov    esi,eax
c0023b81:	a8 01                	test   al,0x1
c0023b83:	74 12                	je     c0023b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b85:	83 ec 0c             	sub    esp,0xc
c0023b88:	b3 07                	mov    bl,0x7
c0023b8a:	68 14 cf 02 c0       	push   0xc002cf14
c0023b8f:	e8 73 f4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023b94:	83 c4 10             	add    esp,0x10
c0023b97:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b9d:	74 12                	je     c0023bb1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b9f:	83 ec 0c             	sub    esp,0xc
c0023ba2:	b3 03                	mov    bl,0x3
c0023ba4:	68 32 cf 02 c0       	push   0xc002cf32
c0023ba9:	e8 59 f4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023bae:	83 c4 10             	add    esp,0x10
c0023bb1:	f7 c6 04 00 00 00    	test   esi,0x4
c0023bb7:	74 12                	je     c0023bcb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023bb9:	83 ec 0c             	sub    esp,0xc
c0023bbc:	b3 14                	mov    bl,0x14
c0023bbe:	68 52 cf 02 c0       	push   0xc002cf52
c0023bc3:	e8 3f f4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023bc8:	83 c4 10             	add    esp,0x10
c0023bcb:	f7 c6 08 00 00 00    	test   esi,0x8
c0023bd1:	74 12                	je     c0023be5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023bd3:	83 ec 0c             	sub    esp,0xc
c0023bd6:	b3 03                	mov    bl,0x3
c0023bd8:	68 32 cf 02 c0       	push   0xc002cf32
c0023bdd:	e8 25 f4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023be2:	83 c4 10             	add    esp,0x10
c0023be5:	f7 c6 10 00 00 00    	test   esi,0x10
c0023beb:	74 12                	je     c0023bff <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023bed:	83 ec 0c             	sub    esp,0xc
c0023bf0:	b3 15                	mov    bl,0x15
c0023bf2:	68 6a cf 02 c0       	push   0xc002cf6a
c0023bf7:	e8 0b f4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023bfc:	83 c4 10             	add    esp,0x10
c0023bff:	f7 c6 20 00 00 00    	test   esi,0x20
c0023c05:	74 12                	je     c0023c19 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023c07:	83 ec 0c             	sub    esp,0xc
c0023c0a:	b3 03                	mov    bl,0x3
c0023c0c:	68 32 cf 02 c0       	push   0xc002cf32
c0023c11:	e8 f1 f3 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023c16:	83 c4 10             	add    esp,0x10
c0023c19:	f7 c6 40 00 00 00    	test   esi,0x40
c0023c1f:	74 12                	je     c0023c33 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023c21:	83 ec 0c             	sub    esp,0xc
c0023c24:	b3 16                	mov    bl,0x16
c0023c26:	68 84 cf 02 c0       	push   0xc002cf84
c0023c2b:	e8 d7 f3 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023c30:	83 c4 10             	add    esp,0x10
c0023c33:	89 f0                	mov    eax,esi
c0023c35:	84 c0                	test   al,al
c0023c37:	79 42                	jns    c0023c7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c39:	83 ec 0c             	sub    esp,0xc
c0023c3c:	b3 0d                	mov    bl,0xd
c0023c3e:	68 a5 cf 02 c0       	push   0xc002cfa5
c0023c43:	e8 bf f3 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023c48:	83 c4 10             	add    esp,0x10
c0023c4b:	eb 2e                	jmp    c0023c7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c4d:	3c 03                	cmp    al,0x3
c0023c4f:	75 14                	jne    c0023c65 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c51:	83 ec 0c             	sub    esp,0xc
c0023c54:	b3 17                	mov    bl,0x17
c0023c56:	68 b9 cf 02 c0       	push   0xc002cfb9
c0023c5b:	e8 a7 f3 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023c60:	83 c4 10             	add    esp,0x10
c0023c63:	eb 16                	jmp    c0023c7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c65:	3c 04                	cmp    al,0x4
c0023c67:	75 12                	jne    c0023c7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c69:	83 ec 0c             	sub    esp,0xc
c0023c6c:	b3 08                	mov    bl,0x8
c0023c6e:	68 cf cf 02 c0       	push   0xc002cfcf
c0023c73:	e8 8f f3 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023c78:	83 c4 10             	add    esp,0x10
c0023c7b:	50                   	push   eax
c0023c7c:	50                   	push   eax
c0023c7d:	0f b6 c3             	movzx  eax,bl
c0023c80:	50                   	push   eax
c0023c81:	68 e7 cf 02 c0       	push   0xc002cfe7
c0023c86:	e8 7c f3 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023c8b:	83 c4 10             	add    esp,0x10
c0023c8e:	83 c4 1c             	add    esp,0x1c
c0023c91:	88 d8                	mov    al,bl
c0023c93:	5b                   	pop    ebx
c0023c94:	5e                   	pop    esi
c0023c95:	5f                   	pop    edi
c0023c96:	5d                   	pop    ebp
c0023c97:	c3                   	ret    

c0023c98 <IDE::polling(unsigned char, unsigned int)>:
c0023c98:	57                   	push   edi
c0023c99:	56                   	push   esi
c0023c9a:	53                   	push   ebx
c0023c9b:	bb 04 00 00 00       	mov    ebx,0x4
c0023ca0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023ca4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023ca9:	52                   	push   edx
c0023caa:	6a 0c                	push   0xc
c0023cac:	56                   	push   esi
c0023cad:	57                   	push   edi
c0023cae:	e8 f9 f4 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023cb3:	83 c4 10             	add    esp,0x10
c0023cb6:	4b                   	dec    ebx
c0023cb7:	75 f0                	jne    c0023ca9 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023cb9:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023cbe:	50                   	push   eax
c0023cbf:	6a 0c                	push   0xc
c0023cc1:	56                   	push   esi
c0023cc2:	57                   	push   edi
c0023cc3:	e8 e4 f4 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0023cc8:	83 c4 10             	add    esp,0x10
c0023ccb:	a8 01                	test   al,0x1
c0023ccd:	74 12                	je     c0023ce1 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023ccf:	83 ec 0c             	sub    esp,0xc
c0023cd2:	68 01 d0 02 c0       	push   0xc002d001
c0023cd7:	e8 2b f3 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023cdc:	83 c4 10             	add    esp,0x10
c0023cdf:	eb 17                	jmp    c0023cf8 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ce1:	a8 20                	test   al,0x20
c0023ce3:	75 0f                	jne    c0023cf4 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023ce5:	4b                   	dec    ebx
c0023ce6:	74 10                	je     c0023cf8 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ce8:	84 c0                	test   al,al
c0023cea:	78 d2                	js     c0023cbe <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cec:	a8 08                	test   al,0x8
c0023cee:	74 ce                	je     c0023cbe <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cf0:	31 c0                	xor    eax,eax
c0023cf2:	eb 06                	jmp    c0023cfa <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cf4:	b0 01                	mov    al,0x1
c0023cf6:	eb 02                	jmp    c0023cfa <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cf8:	b0 02                	mov    al,0x2
c0023cfa:	5b                   	pop    ebx
c0023cfb:	5e                   	pop    esi
c0023cfc:	5f                   	pop    edi
c0023cfd:	c3                   	ret    

c0023cfe <SATABus::close(int, int, void*)>:
c0023cfe:	31 c0                	xor    eax,eax
c0023d00:	c3                   	ret    
c0023d01:	90                   	nop

c0023d02 <SATABus::detect()>:
c0023d02:	c3                   	ret    
c0023d03:	90                   	nop

c0023d04 <SATABus::SATABus()>:
c0023d04:	83 ec 0c             	sub    esp,0xc
c0023d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d0b:	83 ec 08             	sub    esp,0x8
c0023d0e:	68 44 d0 02 c0       	push   0xc002d044
c0023d13:	50                   	push   eax
c0023d14:	e8 a1 0a ff ff       	call   c00147ba <HardDiskController::HardDiskController(char const*)>
c0023d19:	83 c4 10             	add    esp,0x10
c0023d1c:	ba 00 d1 02 c0       	mov    edx,0xc002d100
c0023d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d25:	89 10                	mov    DWORD PTR [eax],edx
c0023d27:	83 ec 0c             	sub    esp,0xc
c0023d2a:	6a 50                	push   0x50
c0023d2c:	e8 9c c3 fe ff       	call   c00100cd <Phys::allocateContiguousPages(int)>
c0023d31:	83 c4 10             	add    esp,0x10
c0023d34:	89 c2                	mov    edx,eax
c0023d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d3a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d40:	83 ec 0c             	sub    esp,0xc
c0023d43:	6a 50                	push   0x50
c0023d45:	e8 fd de fe ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0023d4a:	83 c4 10             	add    esp,0x10
c0023d4d:	89 c2                	mov    edx,eax
c0023d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d59:	e8 84 e1 fe ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c0023d5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d62:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d6c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d72:	83 ec 0c             	sub    esp,0xc
c0023d75:	6a 03                	push   0x3
c0023d77:	6a 50                	push   0x50
c0023d79:	51                   	push   ecx
c0023d7a:	52                   	push   edx
c0023d7b:	50                   	push   eax
c0023d7c:	e8 91 e9 fe ff       	call   c0012712 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d81:	83 c4 20             	add    esp,0x20
c0023d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d88:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d92:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d98:	83 ec 04             	sub    esp,0x4
c0023d9b:	52                   	push   edx
c0023d9c:	50                   	push   eax
c0023d9d:	68 68 d0 02 c0       	push   0xc002d068
c0023da2:	e8 60 f2 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023da7:	83 c4 10             	add    esp,0x10
c0023daa:	90                   	nop
c0023dab:	83 c4 0c             	add    esp,0xc
c0023dae:	c3                   	ret    
c0023daf:	90                   	nop

c0023db0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023db0:	83 ec 0c             	sub    esp,0xc
c0023db3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023db7:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023dba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023dbd:	09 c2                	or     edx,eax
c0023dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023dc9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023dcb:	31 c0                	xor    eax,eax
c0023dcd:	c1 e9 08             	shr    ecx,0x8
c0023dd0:	83 e1 0f             	and    ecx,0xf
c0023dd3:	39 c8                	cmp    eax,ecx
c0023dd5:	74 0a                	je     c0023de1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023dd7:	f6 c2 01             	test   dl,0x1
c0023dda:	74 18                	je     c0023df4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ddc:	d1 ea                	shr    edx,1
c0023dde:	40                   	inc    eax
c0023ddf:	eb f2                	jmp    c0023dd3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023de1:	83 ec 0c             	sub    esp,0xc
c0023de4:	68 8c d0 02 c0       	push   0xc002d08c
c0023de9:	e8 cb 68 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0023dee:	83 c4 10             	add    esp,0x10
c0023df1:	83 c8 ff             	or     eax,0xffffffff
c0023df4:	83 c4 0c             	add    esp,0xc
c0023df7:	c3                   	ret    

c0023df8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023df8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023dfc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023dff:	89 c2                	mov    edx,eax
c0023e01:	c1 ea 08             	shr    edx,0x8
c0023e04:	83 e2 0f             	and    edx,0xf
c0023e07:	fe ca                	dec    dl
c0023e09:	75 31                	jne    c0023e3c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e0b:	83 e0 0f             	and    eax,0xf
c0023e0e:	3c 03                	cmp    al,0x3
c0023e10:	75 2a                	jne    c0023e3c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e12:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023e15:	b8 02 00 00 00       	mov    eax,0x2
c0023e1a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023e20:	74 1c                	je     c0023e3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e22:	b8 04 00 00 00       	mov    eax,0x4
c0023e27:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e2d:	74 0f                	je     c0023e3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e2f:	31 c0                	xor    eax,eax
c0023e31:	83 fa 03             	cmp    edx,0x3
c0023e34:	0f 94 c0             	sete   al
c0023e37:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023e3b:	c3                   	ret    
c0023e3c:	31 c0                	xor    eax,eax
c0023e3e:	c3                   	ret    
c0023e3f:	90                   	nop

c0023e40 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e44:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e47:	0f ba e2 0f          	bt     edx,0xf
c0023e4b:	72 f7                	jb     c0023e44 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e4d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e50:	83 ca 10             	or     edx,0x10
c0023e53:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e56:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e59:	83 ca 01             	or     edx,0x1
c0023e5c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e5f:	c3                   	ret    

c0023e60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e67:	83 e2 fe             	and    edx,0xfffffffe
c0023e6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e6d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e70:	83 e2 ef             	and    edx,0xffffffef
c0023e73:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e76:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e79:	0f ba e2 0e          	bt     edx,0xe
c0023e7d:	72 f7                	jb     c0023e76 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e7f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e82:	0f ba e2 0f          	bt     edx,0xf
c0023e86:	72 ee                	jb     c0023e76 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e88:	c3                   	ret    
c0023e89:	90                   	nop

c0023e8a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e8a:	55                   	push   ebp
c0023e8b:	57                   	push   edi
c0023e8c:	56                   	push   esi
c0023e8d:	53                   	push   ebx
c0023e8e:	83 ec 1c             	sub    esp,0x1c
c0023e91:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e95:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e99:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e9d:	53                   	push   ebx
c0023e9e:	89 fd                	mov    ebp,edi
c0023ea0:	56                   	push   esi
c0023ea1:	c1 e5 0a             	shl    ebp,0xa
c0023ea4:	e8 b7 ff ff ff       	call   c0023e60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023ea9:	83 ec 0c             	sub    esp,0xc
c0023eac:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023eb2:	01 e8                	add    eax,ebp
c0023eb4:	89 03                	mov    DWORD PTR [ebx],eax
c0023eb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eb8:	68 00 04 00 00       	push   0x400
c0023ebd:	6a 00                	push   0x0
c0023ebf:	50                   	push   eax
c0023ec0:	e8 b3 c8 fd ff       	call   c0000778 <memset>
c0023ec5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ecb:	89 fa                	mov    edx,edi
c0023ecd:	01 e8                	add    eax,ebp
c0023ecf:	c1 e7 0d             	shl    edi,0xd
c0023ed2:	89 03                	mov    DWORD PTR [ebx],eax
c0023ed4:	c1 e2 08             	shl    edx,0x8
c0023ed7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023ede:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ee4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ee8:	89 d0                	mov    eax,edx
c0023eea:	83 c4 1c             	add    esp,0x1c
c0023eed:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ef3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023ef6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023ef9:	68 00 01 00 00       	push   0x100
c0023efe:	6a 00                	push   0x0
c0023f00:	50                   	push   eax
c0023f01:	e8 72 c8 fd ff       	call   c0000778 <memset>
c0023f06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f0a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023f10:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023f16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f1a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023f1d:	83 c4 10             	add    esp,0x10
c0023f20:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f27:	31 ff                	xor    edi,edi
c0023f29:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f2f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f39:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f3f:	83 c5 20             	add    ebp,0x20
c0023f42:	01 f8                	add    eax,edi
c0023f44:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f47:	52                   	push   edx
c0023f48:	68 00 01 00 00       	push   0x100
c0023f4d:	6a 00                	push   0x0
c0023f4f:	50                   	push   eax
c0023f50:	e8 23 c8 fd ff       	call   c0000778 <memset>
c0023f55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f59:	83 c4 10             	add    esp,0x10
c0023f5c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f62:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f69:	01 f8                	add    eax,edi
c0023f6b:	81 c7 00 01 00 00    	add    edi,0x100
c0023f71:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f74:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f7a:	75 b3                	jne    c0023f2f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f7c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f80:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f84:	83 c4 1c             	add    esp,0x1c
c0023f87:	5b                   	pop    ebx
c0023f88:	5e                   	pop    esi
c0023f89:	5f                   	pop    edi
c0023f8a:	5d                   	pop    ebp
c0023f8b:	e9 b0 fe ff ff       	jmp    c0023e40 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f90 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f90:	55                   	push   ebp
c0023f91:	57                   	push   edi
c0023f92:	56                   	push   esi
c0023f93:	53                   	push   ebx
c0023f94:	31 db                	xor    ebx,ebx
c0023f96:	83 ec 0c             	sub    esp,0xc
c0023f99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f9d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023fa1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023fa4:	f7 c7 01 00 00 00    	test   edi,0x1
c0023faa:	0f 84 aa 00 00 00    	je     c002405a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023fb0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023fb4:	89 d8                	mov    eax,ebx
c0023fb6:	c1 e0 07             	shl    eax,0x7
c0023fb9:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023fc0:	55                   	push   ebp
c0023fc1:	56                   	push   esi
c0023fc2:	e8 31 fe ff ff       	call   c0023df8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023fc7:	5a                   	pop    edx
c0023fc8:	83 f8 01             	cmp    eax,0x1
c0023fcb:	59                   	pop    ecx
c0023fcc:	75 30                	jne    c0023ffe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023fce:	50                   	push   eax
c0023fcf:	50                   	push   eax
c0023fd0:	53                   	push   ebx
c0023fd1:	68 b1 d0 02 c0       	push   0xc002d0b1
c0023fd6:	e8 2c f0 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0023fdb:	83 c4 0c             	add    esp,0xc
c0023fde:	53                   	push   ebx
c0023fdf:	55                   	push   ebp
c0023fe0:	56                   	push   esi
c0023fe1:	e8 a4 fe ff ff       	call   c0023e8a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fe6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fed:	e8 0a b9 fe ff       	call   c000f8fc <malloc>
c0023ff2:	89 c5                	mov    ebp,eax
c0023ff4:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ff7:	e8 60 0d 00 00       	call   c0024d5c <SATA::SATA()>
c0023ffc:	eb 33                	jmp    c0024031 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ffe:	83 f8 04             	cmp    eax,0x4
c0024001:	75 47                	jne    c002404a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024003:	50                   	push   eax
c0024004:	50                   	push   eax
c0024005:	53                   	push   ebx
c0024006:	68 c8 d0 02 c0       	push   0xc002d0c8
c002400b:	e8 f7 ef fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0024010:	83 c4 0c             	add    esp,0xc
c0024013:	53                   	push   ebx
c0024014:	55                   	push   ebp
c0024015:	56                   	push   esi
c0024016:	e8 6f fe ff ff       	call   c0023e8a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002401b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024022:	e8 d5 b8 fe ff       	call   c000f8fc <malloc>
c0024027:	89 c5                	mov    ebp,eax
c0024029:	89 04 24             	mov    DWORD PTR [esp],eax
c002402c:	e8 d7 10 00 00       	call   c0025108 <SATAPI::SATAPI()>
c0024031:	5a                   	pop    edx
c0024032:	59                   	pop    ecx
c0024033:	55                   	push   ebp
c0024034:	56                   	push   esi
c0024035:	e8 f4 03 ff ff       	call   c001442e <Device::addChild(Device*)>
c002403a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002403d:	56                   	push   esi
c002403e:	6a 00                	push   0x0
c0024040:	53                   	push   ebx
c0024041:	55                   	push   ebp
c0024042:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024045:	83 c4 20             	add    esp,0x20
c0024048:	eb 10                	jmp    c002405a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002404a:	50                   	push   eax
c002404b:	50                   	push   eax
c002404c:	53                   	push   ebx
c002404d:	68 e1 d0 02 c0       	push   0xc002d0e1
c0024052:	e8 b0 ef fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0024057:	83 c4 10             	add    esp,0x10
c002405a:	d1 ef                	shr    edi,1
c002405c:	43                   	inc    ebx
c002405d:	83 fb 20             	cmp    ebx,0x20
c0024060:	0f 85 3e ff ff ff    	jne    c0023fa4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024066:	83 c4 0c             	add    esp,0xc
c0024069:	5b                   	pop    ebx
c002406a:	5e                   	pop    esi
c002406b:	5f                   	pop    edi
c002406c:	5d                   	pop    ebp
c002406d:	c3                   	ret    

c002406e <SATABus::open(int, int, void*)>:
c002406e:	83 ec 14             	sub    esp,0x14
c0024071:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024075:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002407b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024081:	52                   	push   edx
c0024082:	50                   	push   eax
c0024083:	e8 08 ff ff ff       	call   c0023f90 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024088:	31 c0                	xor    eax,eax
c002408a:	83 c4 1c             	add    esp,0x1c
c002408d:	c3                   	ret    

c002408e <ATA::close(int, int, void*)>:
c002408e:	83 ec 0c             	sub    esp,0xc
c0024091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024095:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002409b:	85 c0                	test   eax,eax
c002409d:	74 0c                	je     c00240ab <ATA::close(int, int, void*)+0x1d>
c002409f:	83 ec 0c             	sub    esp,0xc
c00240a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00240a4:	50                   	push   eax
c00240a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00240a8:	83 c4 10             	add    esp,0x10
c00240ab:	31 c0                	xor    eax,eax
c00240ad:	83 c4 0c             	add    esp,0xc
c00240b0:	c3                   	ret    
c00240b1:	90                   	nop

c00240b2 <ATA::powerSaving(PowerSavingLevel)>:
c00240b2:	c3                   	ret    
c00240b3:	90                   	nop

c00240b4 <ATA::ATA()>:
c00240b4:	83 ec 0c             	sub    esp,0xc
c00240b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240bb:	83 ec 04             	sub    esp,0x4
c00240be:	68 00 02 00 00       	push   0x200
c00240c3:	68 c9 d1 02 c0       	push   0xc002d1c9
c00240c8:	50                   	push   eax
c00240c9:	e8 84 07 ff ff       	call   c0014852 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00240ce:	83 c4 10             	add    esp,0x10
c00240d1:	ba 4c d1 02 c0       	mov    edx,0xc002d14c
c00240d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240da:	89 10                	mov    DWORD PTR [eax],edx
c00240dc:	90                   	nop
c00240dd:	83 c4 0c             	add    esp,0xc
c00240e0:	c3                   	ret    
c00240e1:	90                   	nop

c00240e2 <ATA::flush(bool)>:
c00240e2:	53                   	push   ebx
c00240e3:	83 ec 08             	sub    esp,0x8
c00240e6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240ef:	19 c0                	sbb    eax,eax
c00240f1:	83 e0 fd             	and    eax,0xfffffffd
c00240f4:	05 ea 00 00 00       	add    eax,0xea
c00240f9:	50                   	push   eax
c00240fa:	6a 07                	push   0x7
c00240fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024103:	50                   	push   eax
c0024104:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002410a:	e8 dd ef ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002410f:	83 c4 0c             	add    esp,0xc
c0024112:	6a 00                	push   0x0
c0024114:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002411b:	50                   	push   eax
c002411c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024122:	e8 71 fb ff ff       	call   c0023c98 <IDE::polling(unsigned char, unsigned int)>
c0024127:	83 c4 18             	add    esp,0x18
c002412a:	5b                   	pop    ebx
c002412b:	c3                   	ret    

c002412c <ATA::readyForCommand()>:
c002412c:	56                   	push   esi
c002412d:	53                   	push   ebx
c002412e:	31 db                	xor    ebx,ebx
c0024130:	50                   	push   eax
c0024131:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024135:	50                   	push   eax
c0024136:	6a 0c                	push   0xc
c0024138:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002413f:	50                   	push   eax
c0024140:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024146:	e8 61 f0 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c002414b:	83 c4 10             	add    esp,0x10
c002414e:	a8 88                	test   al,0x88
c0024150:	74 23                	je     c0024175 <ATA::readyForCommand()+0x49>
c0024152:	43                   	inc    ebx
c0024153:	83 fb 63             	cmp    ebx,0x63
c0024156:	7e dd                	jle    c0024135 <ATA::readyForCommand()+0x9>
c0024158:	51                   	push   ecx
c0024159:	51                   	push   ecx
c002415a:	6a 00                	push   0x0
c002415c:	68 40 42 0f 00       	push   0xf4240
c0024161:	e8 c8 a2 ff ff       	call   c001e42e <nanoSleep(unsigned long long)>
c0024166:	83 c4 10             	add    esp,0x10
c0024169:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002416f:	75 c4                	jne    c0024135 <ATA::readyForCommand()+0x9>
c0024171:	31 c0                	xor    eax,eax
c0024173:	eb 02                	jmp    c0024177 <ATA::readyForCommand()+0x4b>
c0024175:	b0 01                	mov    al,0x1
c0024177:	5a                   	pop    edx
c0024178:	5b                   	pop    ebx
c0024179:	5e                   	pop    esi
c002417a:	c3                   	ret    
c002417b:	90                   	nop

c002417c <ATA::access(unsigned long long, int, void*, bool)>:
c002417c:	55                   	push   ebp
c002417d:	57                   	push   edi
c002417e:	56                   	push   esi
c002417f:	53                   	push   ebx
c0024180:	83 ec 2c             	sub    esp,0x2c
c0024183:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024187:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002418b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002418f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024193:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024197:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002419b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002419f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00241a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241a9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00241b3:	c1 e0 06             	shl    eax,0x6
c00241b6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00241be:	74 5d                	je     c002421d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00241c0:	89 fa                	mov    edx,edi
c00241c2:	89 f0                	mov    eax,esi
c00241c4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00241c8:	c1 ea 1c             	shr    edx,0x1c
c00241cb:	89 d1                	mov    ecx,edx
c00241cd:	09 c1                	or     ecx,eax
c00241cf:	74 25                	je     c00241f6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00241d1:	31 ed                	xor    ebp,ebp
c00241d3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00241da:	89 fa                	mov    edx,edi
c00241dc:	89 f0                	mov    eax,esi
c00241de:	0f ad d0             	shrd   eax,edx,cl
c00241e1:	d3 ea                	shr    edx,cl
c00241e3:	f6 c1 20             	test   cl,0x20
c00241e6:	74 02                	je     c00241ea <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00241e8:	89 d0                	mov    eax,edx
c00241ea:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241ee:	45                   	inc    ebp
c00241ef:	83 fd 06             	cmp    ebp,0x6
c00241f2:	75 df                	jne    c00241d3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241f4:	eb 76                	jmp    c002426c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241f6:	89 f0                	mov    eax,esi
c00241f8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241fd:	89 fa                	mov    edx,edi
c00241ff:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024206:	0f ac d0 10          	shrd   eax,edx,0x10
c002420a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002420f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024213:	c1 ee 18             	shr    esi,0x18
c0024216:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002421b:	eb 56                	jmp    c0024273 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002421d:	6a 00                	push   0x0
c002421f:	6a 3f                	push   0x3f
c0024221:	57                   	push   edi
c0024222:	56                   	push   esi
c0024223:	e8 94 29 00 00       	call   c0026bbc <__umoddi3>
c0024228:	83 c4 10             	add    esp,0x10
c002422b:	40                   	inc    eax
c002422c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024230:	6a 00                	push   0x0
c0024232:	68 f0 03 00 00       	push   0x3f0
c0024237:	57                   	push   edi
c0024238:	56                   	push   esi
c0024239:	e8 7e 28 00 00       	call   c0026abc <__udivdi3>
c002423e:	83 c4 10             	add    esp,0x10
c0024241:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024246:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002424d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024252:	6a 00                	push   0x0
c0024254:	6a 3f                	push   0x3f
c0024256:	57                   	push   edi
c0024257:	56                   	push   esi
c0024258:	e8 5f 28 00 00       	call   c0026abc <__udivdi3>
c002425d:	83 c4 10             	add    esp,0x10
c0024260:	89 c6                	mov    esi,eax
c0024262:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024267:	83 e6 0f             	and    esi,0xf
c002426a:	eb 07                	jmp    c0024273 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002426c:	31 f6                	xor    esi,esi
c002426e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024273:	bf 01 00 00 00       	mov    edi,0x1
c0024278:	50                   	push   eax
c0024279:	6a 00                	push   0x0
c002427b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024282:	50                   	push   eax
c0024283:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024287:	e8 6c f0 ff ff       	call   c00232f8 <IDE::enableIRQs(unsigned char, bool)>
c002428c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002428f:	e8 98 fe ff ff       	call   c002412c <ATA::readyForCommand()>
c0024294:	83 c4 10             	add    esp,0x10
c0024297:	84 c0                	test   al,al
c0024299:	0f 84 5a 02 00 00    	je     c00244f9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002429f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00242a5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242ab:	c1 e0 04             	shl    eax,0x4
c00242ae:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00242b5:	09 c6                	or     esi,eax
c00242b7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00242bc:	75 05                	jne    c00242c3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00242be:	83 ce a0             	or     esi,0xffffffa0
c00242c1:	eb 03                	jmp    c00242c6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00242c3:	83 ce e0             	or     esi,0xffffffe0
c00242c6:	89 f0                	mov    eax,esi
c00242c8:	0f b6 f0             	movzx  esi,al
c00242cb:	56                   	push   esi
c00242cc:	6a 06                	push   0x6
c00242ce:	51                   	push   ecx
c00242cf:	52                   	push   edx
c00242d0:	e8 17 ee ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d5:	83 c4 10             	add    esp,0x10
c00242d8:	6a 00                	push   0x0
c00242da:	6a 01                	push   0x1
c00242dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e3:	50                   	push   eax
c00242e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ea:	e8 fd ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ef:	83 c4 10             	add    esp,0x10
c00242f2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242f7:	75 6e                	jne    c0024367 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242f9:	6a 00                	push   0x0
c00242fb:	6a 08                	push   0x8
c00242fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024304:	50                   	push   eax
c0024305:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002430b:	e8 dc ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024315:	50                   	push   eax
c0024316:	6a 09                	push   0x9
c0024318:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431f:	50                   	push   eax
c0024320:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024326:	e8 c1 ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002432b:	83 c4 20             	add    esp,0x20
c002432e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024333:	50                   	push   eax
c0024334:	6a 0a                	push   0xa
c0024336:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433d:	50                   	push   eax
c002433e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024344:	e8 a3 ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024349:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002434e:	50                   	push   eax
c002434f:	6a 0b                	push   0xb
c0024351:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024358:	50                   	push   eax
c0024359:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435f:	e8 88 ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024364:	83 c4 20             	add    esp,0x20
c0024367:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002436c:	50                   	push   eax
c002436d:	6a 02                	push   0x2
c002436f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024376:	50                   	push   eax
c0024377:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002437d:	e8 6a ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024382:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024387:	50                   	push   eax
c0024388:	6a 03                	push   0x3
c002438a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024391:	50                   	push   eax
c0024392:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024398:	e8 4f ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002439d:	83 c4 20             	add    esp,0x20
c00243a0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00243a5:	50                   	push   eax
c00243a6:	6a 04                	push   0x4
c00243a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243af:	50                   	push   eax
c00243b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b6:	e8 31 ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00243c0:	50                   	push   eax
c00243c1:	6a 05                	push   0x5
c00243c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ca:	50                   	push   eax
c00243cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d1:	e8 16 ed ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d6:	83 c4 20             	add    esp,0x20
c00243d9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243de:	0f 94 c0             	sete   al
c00243e1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243e6:	74 09                	je     c00243f1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00243e8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243ef:	eb 07                	jmp    c00243f8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243f1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243f8:	0f b6 c0             	movzx  eax,al
c00243fb:	50                   	push   eax
c00243fc:	6a 07                	push   0x7
c00243fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024405:	50                   	push   eax
c0024406:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440c:	e8 db ec ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024411:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024415:	83 c4 10             	add    esp,0x10
c0024418:	85 f6                	test   esi,esi
c002441a:	0f 84 ba 00 00 00    	je     c00244da <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024420:	50                   	push   eax
c0024421:	6a 01                	push   0x1
c0024423:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002442a:	50                   	push   eax
c002442b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024431:	e8 62 f8 ff ff       	call   c0023c98 <IDE::polling(unsigned char, unsigned int)>
c0024436:	83 c4 10             	add    esp,0x10
c0024439:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002443f:	84 c0                	test   al,al
c0024441:	74 2c                	je     c002446f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024443:	0f b6 f8             	movzx  edi,al
c0024446:	0f b6 d2             	movzx  edx,dl
c0024449:	57                   	push   edi
c002444a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024451:	50                   	push   eax
c0024452:	52                   	push   edx
c0024453:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024459:	e8 a4 f6 ff ff       	call   c0023b02 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002445e:	c7 04 24 24 d1 02 c0 	mov    DWORD PTR [esp],0xc002d124
c0024465:	e8 9d eb fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c002446a:	e9 87 00 00 00       	jmp    c00244f6 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002446f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024474:	74 33                	je     c00244a9 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024476:	31 ed                	xor    ebp,ebp
c0024478:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002447c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024480:	50                   	push   eax
c0024481:	50                   	push   eax
c0024482:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024489:	50                   	push   eax
c002448a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024490:	e8 45 ec ff ff       	call   c00230da <IDE::getBase(unsigned char)>
c0024495:	89 c2                	mov    edx,eax
c0024497:	89 f8                	mov    eax,edi
c0024499:	66 ef                	out    dx,ax
c002449b:	45                   	inc    ebp
c002449c:	83 c4 10             	add    esp,0x10
c002449f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00244a5:	75 d1                	jne    c0024478 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00244a7:	eb 23                	jmp    c00244cc <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00244a9:	0f b6 d2             	movzx  edx,dl
c00244ac:	51                   	push   ecx
c00244ad:	51                   	push   ecx
c00244ae:	52                   	push   edx
c00244af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244b5:	e8 20 ec ff ff       	call   c00230da <IDE::getBase(unsigned char)>
c00244ba:	b9 00 01 00 00       	mov    ecx,0x100
c00244bf:	89 c2                	mov    edx,eax
c00244c1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00244c5:	fc                   	cld    
c00244c6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00244c9:	83 c4 10             	add    esp,0x10
c00244cc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00244d4:	4e                   	dec    esi
c00244d5:	e9 3e ff ff ff       	jmp    c0024418 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00244da:	31 ff                	xor    edi,edi
c00244dc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00244e1:	74 16                	je     c00244f9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00244e3:	50                   	push   eax
c00244e4:	50                   	push   eax
c00244e5:	31 c0                	xor    eax,eax
c00244e7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244ec:	0f 94 c0             	sete   al
c00244ef:	50                   	push   eax
c00244f0:	53                   	push   ebx
c00244f1:	e8 ec fb ff ff       	call   c00240e2 <ATA::flush(bool)>
c00244f6:	83 c4 10             	add    esp,0x10
c00244f9:	83 c4 2c             	add    esp,0x2c
c00244fc:	89 f8                	mov    eax,edi
c00244fe:	5b                   	pop    ebx
c00244ff:	5e                   	pop    esi
c0024500:	5f                   	pop    edi
c0024501:	5d                   	pop    ebp
c0024502:	c3                   	ret    
c0024503:	90                   	nop

c0024504 <ATA::read(unsigned long long, int, void*)>:
c0024504:	57                   	push   edi
c0024505:	b8 04 00 00 00       	mov    eax,0x4
c002450a:	56                   	push   esi
c002450b:	53                   	push   ebx
c002450c:	83 ec 10             	sub    esp,0x10
c002450f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024513:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024517:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002451a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002451e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024522:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024528:	77 3b                	ja     c0024565 <ATA::read(unsigned long long, int, void*)+0x61>
c002452a:	b8 06 00 00 00       	mov    eax,0x6
c002452f:	85 d2                	test   edx,edx
c0024531:	74 32                	je     c0024565 <ATA::read(unsigned long long, int, void*)+0x61>
c0024533:	50                   	push   eax
c0024534:	50                   	push   eax
c0024535:	6a 00                	push   0x0
c0024537:	52                   	push   edx
c0024538:	53                   	push   ebx
c0024539:	57                   	push   edi
c002453a:	56                   	push   esi
c002453b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002453f:	e8 38 fc ff ff       	call   c002417c <ATA::access(unsigned long long, int, void*, bool)>
c0024544:	83 c4 20             	add    esp,0x20
c0024547:	85 c0                	test   eax,eax
c0024549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002454d:	75 11                	jne    c0024560 <ATA::read(unsigned long long, int, void*)+0x5c>
c002454f:	01 1d c8 2a 03 c0    	add    DWORD PTR ds:0xc0032ac8,ebx
c0024555:	e8 42 c5 fe ff       	call   c0010a9c <VgaText::updateDiskUsage()>
c002455a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002455e:	eb 05                	jmp    c0024565 <ATA::read(unsigned long long, int, void*)+0x61>
c0024560:	b8 01 00 00 00       	mov    eax,0x1
c0024565:	83 c4 10             	add    esp,0x10
c0024568:	5b                   	pop    ebx
c0024569:	5e                   	pop    esi
c002456a:	5f                   	pop    edi
c002456b:	c3                   	ret    

c002456c <ATA::write(unsigned long long, int, void*)>:
c002456c:	57                   	push   edi
c002456d:	b8 04 00 00 00       	mov    eax,0x4
c0024572:	56                   	push   esi
c0024573:	53                   	push   ebx
c0024574:	83 ec 10             	sub    esp,0x10
c0024577:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002457b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002457f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024582:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024586:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002458a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024590:	77 3b                	ja     c00245cd <ATA::write(unsigned long long, int, void*)+0x61>
c0024592:	b8 06 00 00 00       	mov    eax,0x6
c0024597:	85 d2                	test   edx,edx
c0024599:	74 32                	je     c00245cd <ATA::write(unsigned long long, int, void*)+0x61>
c002459b:	50                   	push   eax
c002459c:	50                   	push   eax
c002459d:	6a 01                	push   0x1
c002459f:	52                   	push   edx
c00245a0:	53                   	push   ebx
c00245a1:	57                   	push   edi
c00245a2:	56                   	push   esi
c00245a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00245a7:	e8 d0 fb ff ff       	call   c002417c <ATA::access(unsigned long long, int, void*, bool)>
c00245ac:	83 c4 20             	add    esp,0x20
c00245af:	85 c0                	test   eax,eax
c00245b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245b5:	75 11                	jne    c00245c8 <ATA::write(unsigned long long, int, void*)+0x5c>
c00245b7:	01 1d c4 2a 03 c0    	add    DWORD PTR ds:0xc0032ac4,ebx
c00245bd:	e8 da c4 fe ff       	call   c0010a9c <VgaText::updateDiskUsage()>
c00245c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245c6:	eb 05                	jmp    c00245cd <ATA::write(unsigned long long, int, void*)+0x61>
c00245c8:	b8 01 00 00 00       	mov    eax,0x1
c00245cd:	83 c4 10             	add    esp,0x10
c00245d0:	5b                   	pop    ebx
c00245d1:	5e                   	pop    esi
c00245d2:	5f                   	pop    edi
c00245d3:	c3                   	ret    

c00245d4 <ATA::detectCHS()>:
c00245d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245d8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00245de:	c1 e0 06             	shl    eax,0x6
c00245e1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00245e7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245f1:	c7 44 24 04 2f d1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d12f
c00245f9:	e9 bb 60 ff ff       	jmp    c001a6b9 <Krnl::panic(char const*)>

c00245fe <ATA::open(int, int, void*)>:
c00245fe:	53                   	push   ebx
c00245ff:	83 ec 08             	sub    esp,0x8
c0024602:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002460a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002460e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024614:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002461a:	c1 e0 06             	shl    eax,0x6
c002461d:	01 d0                	add    eax,edx
c002461f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024626:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002462c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024633:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002463d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024643:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002464a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024651:	75 0c                	jne    c002465f <ATA::open(int, int, void*)+0x61>
c0024653:	83 ec 0c             	sub    esp,0xc
c0024656:	53                   	push   ebx
c0024657:	e8 78 ff ff ff       	call   c00245d4 <ATA::detectCHS()>
c002465c:	83 c4 10             	add    esp,0x10
c002465f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024665:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002466b:	c1 e0 06             	shl    eax,0x6
c002466e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024675:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002467f:	d1 e8                	shr    eax,1
c0024681:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024687:	6a 04                	push   0x4
c0024689:	6a 0c                	push   0xc
c002468b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024692:	50                   	push   eax
c0024693:	52                   	push   edx
c0024694:	e8 53 ea ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024699:	90                   	nop
c002469a:	90                   	nop
c002469b:	6a 00                	push   0x0
c002469d:	6a 0c                	push   0xc
c002469f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246a6:	50                   	push   eax
c00246a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246ad:	e8 3a ea ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246b2:	83 c4 14             	add    esp,0x14
c00246b5:	53                   	push   ebx
c00246b6:	e8 ff 01 ff ff       	call   c00148ba <PhysicalDisk::startCache()>
c00246bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00246be:	e8 7d 23 ff ff       	call   c0016a40 <createPartitionsForDisk(PhysicalDisk*)>
c00246c3:	31 c0                	xor    eax,eax
c00246c5:	83 c4 18             	add    esp,0x18
c00246c8:	5b                   	pop    ebx
c00246c9:	c3                   	ret    

c00246ca <ATAPI::write(unsigned long long, int, void*)>:
c00246ca:	b8 03 00 00 00       	mov    eax,0x3
c00246cf:	c3                   	ret    

c00246d0 <ATAPI::close(int, int, void*)>:
c00246d0:	83 ec 0c             	sub    esp,0xc
c00246d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246dd:	85 c0                	test   eax,eax
c00246df:	74 0c                	je     c00246ed <ATAPI::close(int, int, void*)+0x1d>
c00246e1:	83 ec 0c             	sub    esp,0xc
c00246e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00246e6:	50                   	push   eax
c00246e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246ea:	83 c4 10             	add    esp,0x10
c00246ed:	31 c0                	xor    eax,eax
c00246ef:	83 c4 0c             	add    esp,0xc
c00246f2:	c3                   	ret    
c00246f3:	90                   	nop

c00246f4 <ATAPI::ATAPI()>:
c00246f4:	83 ec 0c             	sub    esp,0xc
c00246f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246fb:	83 ec 04             	sub    esp,0x4
c00246fe:	68 00 08 00 00       	push   0x800
c0024703:	68 69 d2 02 c0       	push   0xc002d269
c0024708:	50                   	push   eax
c0024709:	e8 44 01 ff ff       	call   c0014852 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002470e:	83 c4 10             	add    esp,0x10
c0024711:	ba 84 d1 02 c0       	mov    edx,0xc002d184
c0024716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002471a:	89 10                	mov    DWORD PTR [eax],edx
c002471c:	90                   	nop
c002471d:	83 c4 0c             	add    esp,0xc
c0024720:	c3                   	ret    
c0024721:	90                   	nop

c0024722 <ATAPI::readyForCommand()>:
c0024722:	56                   	push   esi
c0024723:	53                   	push   ebx
c0024724:	31 db                	xor    ebx,ebx
c0024726:	50                   	push   eax
c0024727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002472b:	50                   	push   eax
c002472c:	6a 0c                	push   0xc
c002472e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024735:	50                   	push   eax
c0024736:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002473c:	e8 6b ea ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0024741:	83 c4 10             	add    esp,0x10
c0024744:	a8 88                	test   al,0x88
c0024746:	74 23                	je     c002476b <ATAPI::readyForCommand()+0x49>
c0024748:	43                   	inc    ebx
c0024749:	83 fb 63             	cmp    ebx,0x63
c002474c:	7e dd                	jle    c002472b <ATAPI::readyForCommand()+0x9>
c002474e:	51                   	push   ecx
c002474f:	51                   	push   ecx
c0024750:	6a 00                	push   0x0
c0024752:	68 40 42 0f 00       	push   0xf4240
c0024757:	e8 d2 9c ff ff       	call   c001e42e <nanoSleep(unsigned long long)>
c002475c:	83 c4 10             	add    esp,0x10
c002475f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024765:	75 c4                	jne    c002472b <ATAPI::readyForCommand()+0x9>
c0024767:	31 c0                	xor    eax,eax
c0024769:	eb 02                	jmp    c002476d <ATAPI::readyForCommand()+0x4b>
c002476b:	b0 01                	mov    al,0x1
c002476d:	5a                   	pop    edx
c002476e:	5b                   	pop    ebx
c002476f:	5e                   	pop    esi
c0024770:	c3                   	ret    
c0024771:	90                   	nop

c0024772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024772:	55                   	push   ebp
c0024773:	57                   	push   edi
c0024774:	56                   	push   esi
c0024775:	53                   	push   ebx
c0024776:	83 ec 20             	sub    esp,0x20
c0024779:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002477d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024781:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024785:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024789:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002478d:	6a 01                	push   0x1
c002478f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024796:	50                   	push   eax
c0024797:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002479d:	e8 56 eb ff ff       	call   c00232f8 <IDE::enableIRQs(unsigned char, bool)>
c00247a2:	5e                   	pop    esi
c00247a3:	58                   	pop    eax
c00247a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ab:	50                   	push   eax
c00247ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b2:	e8 0f e9 ff ff       	call   c00230c6 <IDE::prepareInterrupt(unsigned char)>
c00247b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00247ba:	e8 63 ff ff ff       	call   c0024722 <ATAPI::readyForCommand()>
c00247bf:	83 c4 10             	add    esp,0x10
c00247c2:	84 c0                	test   al,al
c00247c4:	75 0a                	jne    c00247d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00247c6:	bb 01 00 00 00       	mov    ebx,0x1
c00247cb:	e9 57 02 00 00       	jmp    c0024a27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247d0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00247d6:	c1 e0 04             	shl    eax,0x4
c00247d9:	0f b6 c0             	movzx  eax,al
c00247dc:	50                   	push   eax
c00247dd:	6a 06                	push   0x6
c00247df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e6:	50                   	push   eax
c00247e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ed:	e8 fa e8 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f2:	6a 00                	push   0x0
c00247f4:	6a 01                	push   0x1
c00247f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247fd:	50                   	push   eax
c00247fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024804:	e8 e3 e8 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024809:	83 c4 20             	add    esp,0x20
c002480c:	0f b6 c3             	movzx  eax,bl
c002480f:	0f b6 df             	movzx  ebx,bh
c0024812:	50                   	push   eax
c0024813:	6a 04                	push   0x4
c0024815:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002481c:	50                   	push   eax
c002481d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024823:	e8 c4 e8 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024828:	53                   	push   ebx
c0024829:	6a 05                	push   0x5
c002482b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024832:	50                   	push   eax
c0024833:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024839:	e8 ae e8 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002483e:	83 c4 20             	add    esp,0x20
c0024841:	68 a0 00 00 00       	push   0xa0
c0024846:	6a 07                	push   0x7
c0024848:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002484f:	50                   	push   eax
c0024850:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024856:	e8 91 e8 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002485b:	83 c4 0c             	add    esp,0xc
c002485e:	6a 01                	push   0x1
c0024860:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024867:	50                   	push   eax
c0024868:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002486e:	e8 25 f4 ff ff       	call   c0023c98 <IDE::polling(unsigned char, unsigned int)>
c0024873:	83 c4 10             	add    esp,0x10
c0024876:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002487c:	84 c0                	test   al,al
c002487e:	74 23                	je     c00248a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024880:	0f b6 d8             	movzx  ebx,al
c0024883:	0f b6 d2             	movzx  edx,dl
c0024886:	53                   	push   ebx
c0024887:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002488e:	50                   	push   eax
c002488f:	52                   	push   edx
c0024890:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024896:	e8 67 f2 ff ff       	call   c0023b02 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002489b:	83 c4 10             	add    esp,0x10
c002489e:	e9 84 01 00 00       	jmp    c0024a27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248a3:	0f b6 d2             	movzx  edx,dl
c00248a6:	53                   	push   ebx
c00248a7:	53                   	push   ebx
c00248a8:	52                   	push   edx
c00248a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248af:	e8 26 e8 ff ff       	call   c00230da <IDE::getBase(unsigned char)>
c00248b4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00248b8:	b9 06 00 00 00       	mov    ecx,0x6
c00248bd:	89 c2                	mov    edx,eax
c00248bf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00248c2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00248c6:	83 c4 10             	add    esp,0x10
c00248c9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248cf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248d6:	85 db                	test   ebx,ebx
c00248d8:	0f 84 ec 00 00 00    	je     c00249ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00248de:	51                   	push   ecx
c00248df:	51                   	push   ecx
c00248e0:	52                   	push   edx
c00248e1:	50                   	push   eax
c00248e2:	e8 73 e9 ff ff       	call   c002325a <IDE::waitInterrupt(unsigned char)>
c00248e7:	83 c4 10             	add    esp,0x10
c00248ea:	84 c0                	test   al,al
c00248ec:	0f 84 d4 fe ff ff    	je     c00247c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248f2:	56                   	push   esi
c00248f3:	56                   	push   esi
c00248f4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248fb:	50                   	push   eax
c00248fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024902:	e8 bf e7 ff ff       	call   c00230c6 <IDE::prepareInterrupt(unsigned char)>
c0024907:	83 c4 0c             	add    esp,0xc
c002490a:	6a 04                	push   0x4
c002490c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024913:	50                   	push   eax
c0024914:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002491a:	e8 8d e8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c002491f:	83 c4 0c             	add    esp,0xc
c0024922:	89 c6                	mov    esi,eax
c0024924:	6a 05                	push   0x5
c0024926:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002492d:	50                   	push   eax
c002492e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024934:	e8 73 e8 ff ff       	call   c00231ac <IDE::read(unsigned char, unsigned char)>
c0024939:	89 f1                	mov    ecx,esi
c002493b:	0f b6 c0             	movzx  eax,al
c002493e:	0f b6 f1             	movzx  esi,cl
c0024941:	c1 e0 08             	shl    eax,0x8
c0024944:	09 c6                	or     esi,eax
c0024946:	d1 fe                	sar    esi,1
c0024948:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002494c:	83 c4 10             	add    esp,0x10
c002494f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024954:	74 41                	je     c0024997 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024956:	31 c9                	xor    ecx,ecx
c0024958:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002495e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024965:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024969:	75 0a                	jne    c0024975 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002496b:	01 c9                	add    ecx,ecx
c002496d:	01 cd                	add    ebp,ecx
c002496f:	4b                   	dec    ebx
c0024970:	e9 54 ff ff ff       	jmp    c00248c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024975:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002497a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002497e:	51                   	push   ecx
c002497f:	51                   	push   ecx
c0024980:	52                   	push   edx
c0024981:	50                   	push   eax
c0024982:	e8 53 e7 ff ff       	call   c00230da <IDE::getBase(unsigned char)>
c0024987:	89 c2                	mov    edx,eax
c0024989:	89 f0                	mov    eax,esi
c002498b:	66 ef                	out    dx,ax
c002498d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024991:	83 c4 10             	add    esp,0x10
c0024994:	41                   	inc    ecx
c0024995:	eb c1                	jmp    c0024958 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024997:	31 f6                	xor    esi,esi
c0024999:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002499f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249a6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00249aa:	75 06                	jne    c00249b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00249ac:	01 f6                	add    esi,esi
c00249ae:	01 f5                	add    ebp,esi
c00249b0:	eb bd                	jmp    c002496f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00249b2:	51                   	push   ecx
c00249b3:	51                   	push   ecx
c00249b4:	52                   	push   edx
c00249b5:	50                   	push   eax
c00249b6:	e8 1f e7 ff ff       	call   c00230da <IDE::getBase(unsigned char)>
c00249bb:	89 c2                	mov    edx,eax
c00249bd:	66 ed                	in     ax,dx
c00249bf:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00249c4:	83 c4 10             	add    esp,0x10
c00249c7:	46                   	inc    esi
c00249c8:	eb cf                	jmp    c0024999 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00249ca:	51                   	push   ecx
c00249cb:	51                   	push   ecx
c00249cc:	52                   	push   edx
c00249cd:	50                   	push   eax
c00249ce:	e8 87 e8 ff ff       	call   c002325a <IDE::waitInterrupt(unsigned char)>
c00249d3:	83 c4 10             	add    esp,0x10
c00249d6:	84 c0                	test   al,al
c00249d8:	0f 84 e8 fd ff ff    	je     c00247c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00249de:	bb a0 86 01 00       	mov    ebx,0x186a0
c00249e3:	52                   	push   edx
c00249e4:	52                   	push   edx
c00249e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ec:	50                   	push   eax
c00249ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249f3:	e8 ce e6 ff ff       	call   c00230c6 <IDE::prepareInterrupt(unsigned char)>
c00249f8:	83 c4 10             	add    esp,0x10
c00249fb:	50                   	push   eax
c00249fc:	50                   	push   eax
c00249fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a04:	50                   	push   eax
c0024a05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a0b:	e8 ca e6 ff ff       	call   c00230da <IDE::getBase(unsigned char)>
c0024a10:	8d 50 07             	lea    edx,[eax+0x7]
c0024a13:	ec                   	in     al,dx
c0024a14:	83 c4 10             	add    esp,0x10
c0024a17:	a8 88                	test   al,0x88
c0024a19:	74 0a                	je     c0024a25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024a1b:	4b                   	dec    ebx
c0024a1c:	75 dd                	jne    c00249fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024a1e:	bb 02 00 00 00       	mov    ebx,0x2
c0024a23:	eb 02                	jmp    c0024a27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a25:	31 db                	xor    ebx,ebx
c0024a27:	83 c4 1c             	add    esp,0x1c
c0024a2a:	89 d8                	mov    eax,ebx
c0024a2c:	5b                   	pop    ebx
c0024a2d:	5e                   	pop    esi
c0024a2e:	5f                   	pop    edi
c0024a2f:	5d                   	pop    ebp
c0024a30:	c3                   	ret    
c0024a31:	90                   	nop

c0024a32 <ATAPI::diskRemoved()>:
c0024a32:	83 ec 18             	sub    esp,0x18
c0024a35:	68 75 d2 02 c0       	push   0xc002d275
c0024a3a:	e8 c8 e5 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0024a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a43:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a4a:	83 c4 1c             	add    esp,0x1c
c0024a4d:	c3                   	ret    

c0024a4e <ATAPI::eject()>:
c0024a4e:	57                   	push   edi
c0024a4f:	b9 03 00 00 00       	mov    ecx,0x3
c0024a54:	53                   	push   ebx
c0024a55:	83 ec 14             	sub    esp,0x14
c0024a58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a5c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a60:	fc                   	cld    
c0024a61:	31 c0                	xor    eax,eax
c0024a63:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a65:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a6a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a6f:	50                   	push   eax
c0024a70:	50                   	push   eax
c0024a71:	6a 00                	push   0x0
c0024a73:	6a 00                	push   0x0
c0024a75:	6a 00                	push   0x0
c0024a77:	6a 02                	push   0x2
c0024a79:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a7d:	50                   	push   eax
c0024a7e:	53                   	push   ebx
c0024a7f:	e8 ee fc ff ff       	call   c0024772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a84:	83 c4 14             	add    esp,0x14
c0024a87:	53                   	push   ebx
c0024a88:	e8 a5 ff ff ff       	call   c0024a32 <ATAPI::diskRemoved()>
c0024a8d:	83 c4 24             	add    esp,0x24
c0024a90:	31 c0                	xor    eax,eax
c0024a92:	5b                   	pop    ebx
c0024a93:	5f                   	pop    edi
c0024a94:	c3                   	ret    
c0024a95:	90                   	nop

c0024a96 <ATAPI::diskInserted()>:
c0024a96:	53                   	push   ebx
c0024a97:	83 ec 14             	sub    esp,0x14
c0024a9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a9e:	68 8c d2 02 c0       	push   0xc002d28c
c0024aa3:	e8 5f e5 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0024aa8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024aaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ab2:	e8 03 fe fe ff       	call   c00148ba <PhysicalDisk::startCache()>
c0024ab7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024abb:	83 c4 18             	add    esp,0x18
c0024abe:	5b                   	pop    ebx
c0024abf:	e9 7c 1f ff ff       	jmp    c0016a40 <createPartitionsForDisk(PhysicalDisk*)>

c0024ac4 <ATAPI::detectMedia()>:
c0024ac4:	56                   	push   esi
c0024ac5:	53                   	push   ebx
c0024ac6:	83 ec 28             	sub    esp,0x28
c0024ac9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024acd:	6a 0c                	push   0xc
c0024acf:	6a 00                	push   0x0
c0024ad1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ad5:	56                   	push   esi
c0024ad6:	e8 9d bc fd ff       	call   c0000778 <memset>
c0024adb:	58                   	pop    eax
c0024adc:	5a                   	pop    edx
c0024add:	6a 00                	push   0x0
c0024adf:	6a 00                	push   0x0
c0024ae1:	6a 00                	push   0x0
c0024ae3:	6a 00                	push   0x0
c0024ae5:	56                   	push   esi
c0024ae6:	53                   	push   ebx
c0024ae7:	e8 86 fc ff ff       	call   c0024772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aec:	83 c4 1c             	add    esp,0x1c
c0024aef:	6a 0c                	push   0xc
c0024af1:	6a 00                	push   0x0
c0024af3:	56                   	push   esi
c0024af4:	e8 7f bc fd ff       	call   c0000778 <memset>
c0024af9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024afe:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024b03:	59                   	pop    ecx
c0024b04:	58                   	pop    eax
c0024b05:	6a 01                	push   0x1
c0024b07:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024b0b:	50                   	push   eax
c0024b0c:	6a 00                	push   0x0
c0024b0e:	6a 12                	push   0x12
c0024b10:	56                   	push   esi
c0024b11:	53                   	push   ebx
c0024b12:	e8 5b fc ff ff       	call   c0024772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b17:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024b1b:	83 c4 20             	add    esp,0x20
c0024b1e:	83 e0 7f             	and    eax,0x7f
c0024b21:	3c 70                	cmp    al,0x70
c0024b23:	74 15                	je     c0024b3a <ATAPI::detectMedia()+0x76>
c0024b25:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b2c:	75 0c                	jne    c0024b3a <ATAPI::detectMedia()+0x76>
c0024b2e:	83 ec 0c             	sub    esp,0xc
c0024b31:	53                   	push   ebx
c0024b32:	e8 5f ff ff ff       	call   c0024a96 <ATAPI::diskInserted()>
c0024b37:	83 c4 10             	add    esp,0x10
c0024b3a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b3e:	83 e0 0f             	and    eax,0xf
c0024b41:	3c 02                	cmp    al,0x2
c0024b43:	75 1b                	jne    c0024b60 <ATAPI::detectMedia()+0x9c>
c0024b45:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b4a:	75 2d                	jne    c0024b79 <ATAPI::detectMedia()+0xb5>
c0024b4c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b53:	74 24                	je     c0024b79 <ATAPI::detectMedia()+0xb5>
c0024b55:	83 ec 0c             	sub    esp,0xc
c0024b58:	53                   	push   ebx
c0024b59:	e8 d4 fe ff ff       	call   c0024a32 <ATAPI::diskRemoved()>
c0024b5e:	eb 16                	jmp    c0024b76 <ATAPI::detectMedia()+0xb2>
c0024b60:	84 c0                	test   al,al
c0024b62:	75 15                	jne    c0024b79 <ATAPI::detectMedia()+0xb5>
c0024b64:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b6b:	75 0c                	jne    c0024b79 <ATAPI::detectMedia()+0xb5>
c0024b6d:	83 ec 0c             	sub    esp,0xc
c0024b70:	53                   	push   ebx
c0024b71:	e8 20 ff ff ff       	call   c0024a96 <ATAPI::diskInserted()>
c0024b76:	83 c4 10             	add    esp,0x10
c0024b79:	83 c4 24             	add    esp,0x24
c0024b7c:	5b                   	pop    ebx
c0024b7d:	5e                   	pop    esi
c0024b7e:	c3                   	ret    
c0024b7f:	90                   	nop

c0024b80 <ATAPI::open(int, int, void*)>:
c0024b80:	53                   	push   ebx
c0024b81:	83 ec 08             	sub    esp,0x8
c0024b84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b90:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b96:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b9c:	c1 e0 06             	shl    eax,0x6
c0024b9f:	01 d0                	add    eax,edx
c0024ba1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024ba8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024bae:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024bb5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024bbf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bc5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024bcc:	6a 04                	push   0x4
c0024bce:	6a 0c                	push   0xc
c0024bd0:	51                   	push   ecx
c0024bd1:	52                   	push   edx
c0024bd2:	e8 15 e5 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd7:	90                   	nop
c0024bd8:	90                   	nop
c0024bd9:	6a 00                	push   0x0
c0024bdb:	6a 0c                	push   0xc
c0024bdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024be4:	50                   	push   eax
c0024be5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024beb:	e8 fc e4 ff ff       	call   c00230ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bf0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bf7:	83 c4 14             	add    esp,0x14
c0024bfa:	53                   	push   ebx
c0024bfb:	e8 c4 fe ff ff       	call   c0024ac4 <ATAPI::detectMedia()>
c0024c00:	31 c0                	xor    eax,eax
c0024c02:	83 c4 18             	add    esp,0x18
c0024c05:	5b                   	pop    ebx
c0024c06:	c3                   	ret    
c0024c07:	90                   	nop

c0024c08 <ATAPI::read(unsigned long long, int, void*)>:
c0024c08:	55                   	push   ebp
c0024c09:	57                   	push   edi
c0024c0a:	56                   	push   esi
c0024c0b:	53                   	push   ebx
c0024c0c:	83 ec 1c             	sub    esp,0x1c
c0024c0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024c13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c17:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024c1b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c22:	74 41                	je     c0024c65 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c28:	b9 03 00 00 00       	mov    ecx,0x3
c0024c2d:	fc                   	cld    
c0024c2e:	31 c0                	xor    eax,eax
c0024c30:	86 fb                	xchg   bl,bh
c0024c32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c34:	c1 c3 10             	rol    ebx,0x10
c0024c37:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c3c:	89 e8                	mov    eax,ebp
c0024c3e:	86 fb                	xchg   bl,bh
c0024c40:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c44:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c48:	50                   	push   eax
c0024c49:	50                   	push   eax
c0024c4a:	55                   	push   ebp
c0024c4b:	c1 e5 0b             	shl    ebp,0xb
c0024c4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c52:	6a 00                	push   0x0
c0024c54:	55                   	push   ebp
c0024c55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c59:	50                   	push   eax
c0024c5a:	56                   	push   esi
c0024c5b:	e8 12 fb ff ff       	call   c0024772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c60:	83 c4 20             	add    esp,0x20
c0024c63:	eb 1a                	jmp    c0024c7f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c65:	83 ec 0c             	sub    esp,0xc
c0024c68:	56                   	push   esi
c0024c69:	e8 56 fe ff ff       	call   c0024ac4 <ATAPI::detectMedia()>
c0024c6e:	83 c4 10             	add    esp,0x10
c0024c71:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c78:	75 aa                	jne    c0024c24 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c7a:	b8 02 00 00 00       	mov    eax,0x2
c0024c7f:	83 c4 1c             	add    esp,0x1c
c0024c82:	5b                   	pop    ebx
c0024c83:	5e                   	pop    esi
c0024c84:	5f                   	pop    edi
c0024c85:	5d                   	pop    ebp
c0024c86:	c3                   	ret    
c0024c87:	90                   	nop

c0024c88 <SATA::close(int, int, void*)>:
c0024c88:	83 ec 0c             	sub    esp,0xc
c0024c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c95:	85 c0                	test   eax,eax
c0024c97:	74 0c                	je     c0024ca5 <SATA::close(int, int, void*)+0x1d>
c0024c99:	83 ec 0c             	sub    esp,0xc
c0024c9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c9e:	50                   	push   eax
c0024c9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ca2:	83 c4 10             	add    esp,0x10
c0024ca5:	31 c0                	xor    eax,eax
c0024ca7:	83 c4 0c             	add    esp,0xc
c0024caa:	c3                   	ret    
c0024cab:	90                   	nop

c0024cac <SATA::powerSaving(PowerSavingLevel)>:
c0024cac:	c3                   	ret    
c0024cad:	90                   	nop

c0024cae <SATA::open(int, int, void*)>:
c0024cae:	56                   	push   esi
c0024caf:	53                   	push   ebx
c0024cb0:	50                   	push   eax
c0024cb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cb9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024cc3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024cc9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024cd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cd7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ce1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ce7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024cee:	e8 ab b2 fe ff       	call   c000ff9e <Phys::allocatePage()>
c0024cf3:	89 c6                	mov    esi,eax
c0024cf5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cfb:	81 c6 00 10 00 00    	add    esi,0x1000
c0024d01:	e8 98 b2 fe ff       	call   c000ff9e <Phys::allocatePage()>
c0024d06:	39 c6                	cmp    esi,eax
c0024d08:	74 10                	je     c0024d1a <SATA::open(int, int, void*)+0x6c>
c0024d0a:	83 ec 0c             	sub    esp,0xc
c0024d0d:	68 b4 d1 02 c0       	push   0xc002d1b4
c0024d12:	e8 a2 59 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0024d17:	83 c4 10             	add    esp,0x10
c0024d1a:	83 ec 0c             	sub    esp,0xc
c0024d1d:	6a 02                	push   0x2
c0024d1f:	e8 23 cf fe ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0024d24:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d2a:	e8 b3 d1 fe ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c0024d2f:	6a 03                	push   0x3
c0024d31:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024d37:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024d3d:	50                   	push   eax
c0024d3e:	e8 db d6 fe ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d43:	83 c4 14             	add    esp,0x14
c0024d46:	53                   	push   ebx
c0024d47:	e8 6e fb fe ff       	call   c00148ba <PhysicalDisk::startCache()>
c0024d4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d4f:	e8 ec 1c ff ff       	call   c0016a40 <createPartitionsForDisk(PhysicalDisk*)>
c0024d54:	83 c4 14             	add    esp,0x14
c0024d57:	31 c0                	xor    eax,eax
c0024d59:	5b                   	pop    ebx
c0024d5a:	5e                   	pop    esi
c0024d5b:	c3                   	ret    

c0024d5c <SATA::SATA()>:
c0024d5c:	83 ec 0c             	sub    esp,0xc
c0024d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d63:	83 ec 04             	sub    esp,0x4
c0024d66:	68 00 02 00 00       	push   0x200
c0024d6b:	68 c8 d1 02 c0       	push   0xc002d1c8
c0024d70:	50                   	push   eax
c0024d71:	e8 dc fa fe ff       	call   c0014852 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d76:	83 c4 10             	add    esp,0x10
c0024d79:	ba 38 d2 02 c0       	mov    edx,0xc002d238
c0024d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d82:	89 10                	mov    DWORD PTR [eax],edx
c0024d84:	90                   	nop
c0024d85:	83 c4 0c             	add    esp,0xc
c0024d88:	c3                   	ret    
c0024d89:	90                   	nop

c0024d8a <SATA::access(unsigned long long, int, void*, bool)>:
c0024d8a:	55                   	push   ebp
c0024d8b:	57                   	push   edi
c0024d8c:	56                   	push   esi
c0024d8d:	53                   	push   ebx
c0024d8e:	83 ec 2c             	sub    esp,0x2c
c0024d91:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d95:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d9d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024da1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024da5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024daa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024dae:	7e 10                	jle    c0024dc0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024db0:	83 ec 0c             	sub    esp,0xc
c0024db3:	68 d8 d1 02 c0       	push   0xc002d1d8
c0024db8:	e8 fc 58 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0024dbd:	83 c4 10             	add    esp,0x10
c0024dc0:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024dc6:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024dcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024dd6:	89 f0                	mov    eax,esi
c0024dd8:	c1 e0 07             	shl    eax,0x7
c0024ddb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ddf:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024de9:	53                   	push   ebx
c0024dea:	8d 46 02             	lea    eax,[esi+0x2]
c0024ded:	53                   	push   ebx
c0024dee:	c1 e0 07             	shl    eax,0x7
c0024df1:	bb 01 00 00 00       	mov    ebx,0x1
c0024df6:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024dfa:	50                   	push   eax
c0024dfb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e01:	e8 aa ef ff ff       	call   c0023db0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e06:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024e0a:	83 c4 10             	add    esp,0x10
c0024e0d:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024e12:	0f 84 ce 01 00 00    	je     c0024fe6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e18:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e1c:	c1 e0 09             	shl    eax,0x9
c0024e1f:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e28:	74 17                	je     c0024e41 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024e2a:	51                   	push   ecx
c0024e2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e2f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024e33:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e39:	e8 06 b9 fd ff       	call   c0000744 <memcpy>
c0024e3e:	83 c4 10             	add    esp,0x10
c0024e41:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e47:	8d 46 02             	lea    eax,[esi+0x2]
c0024e4a:	c1 e0 07             	shl    eax,0x7
c0024e4d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e53:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e59:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e63:	c1 e1 05             	shl    ecx,0x5
c0024e66:	01 c8                	add    eax,ecx
c0024e68:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e6c:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e6e:	83 e1 01             	and    ecx,0x1
c0024e71:	83 e3 bf             	and    ebx,0xffffffbf
c0024e74:	c1 e1 06             	shl    ecx,0x6
c0024e77:	09 d9                	or     ecx,ebx
c0024e79:	88 08                	mov    BYTE PTR [eax],cl
c0024e7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e7d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e83:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e89:	89 08                	mov    DWORD PTR [eax],ecx
c0024e8b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e91:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e97:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e9d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ea0:	52                   	push   edx
c0024ea1:	68 90 00 00 00       	push   0x90
c0024ea6:	6a 00                	push   0x0
c0024ea8:	53                   	push   ebx
c0024ea9:	e8 ca b8 fd ff       	call   c0000778 <memset>
c0024eae:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024eb4:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024eb8:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ebe:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ec2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024ec6:	83 c4 10             	add    esp,0x10
c0024ec9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024ecc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ed2:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024ed8:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024edd:	09 c8                	or     eax,ecx
c0024edf:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ee5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ee8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024eef:	66 25 00 7f          	and    ax,0x7f00
c0024ef3:	66 0d 27 80          	or     ax,0x8027
c0024ef7:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024efc:	66 89 03             	mov    WORD PTR [ebx],ax
c0024eff:	19 c0                	sbb    eax,eax
c0024f01:	83 e0 f0             	and    eax,0xfffffff0
c0024f04:	83 c0 35             	add    eax,0x35
c0024f07:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024f0a:	89 f8                	mov    eax,edi
c0024f0c:	c1 e8 10             	shr    eax,0x10
c0024f0f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f12:	89 f8                	mov    eax,edi
c0024f14:	c1 e8 18             	shr    eax,0x18
c0024f17:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024f1a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024f1e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f25:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f28:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f2c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f30:	89 f3                	mov    ebx,esi
c0024f32:	31 c0                	xor    eax,eax
c0024f34:	c1 e3 07             	shl    ebx,0x7
c0024f37:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024f3b:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024f41:	80 e1 88             	and    cl,0x88
c0024f44:	74 0a                	je     c0024f50 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024f46:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f4b:	74 0a                	je     c0024f57 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f4d:	40                   	inc    eax
c0024f4e:	eb eb                	jmp    c0024f3b <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f50:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f55:	75 0a                	jne    c0024f61 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f57:	83 ec 0c             	sub    esp,0xc
c0024f5a:	68 11 d2 02 c0       	push   0xc002d211
c0024f5f:	eb 56                	jmp    c0024fb7 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f61:	b8 01 00 00 00       	mov    eax,0x1
c0024f66:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f6a:	c1 e6 07             	shl    esi,0x7
c0024f6d:	d3 e0                	shl    eax,cl
c0024f6f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f73:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f79:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f7f:	85 c8                	test   eax,ecx
c0024f81:	74 20                	je     c0024fa3 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f83:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f89:	0f ba e1 1e          	bt     ecx,0x1e
c0024f8d:	73 ea                	jae    c0024f79 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f8f:	83 ec 0c             	sub    esp,0xc
c0024f92:	31 db                	xor    ebx,ebx
c0024f94:	68 1f d2 02 c0       	push   0xc002d21f
c0024f99:	e8 1b 57 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0024f9e:	83 c4 10             	add    esp,0x10
c0024fa1:	eb 43                	jmp    c0024fe6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fa3:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024fa9:	0f ba e0 1e          	bt     eax,0x1e
c0024fad:	73 17                	jae    c0024fc6 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024faf:	83 ec 0c             	sub    esp,0xc
c0024fb2:	68 1f d2 02 c0       	push   0xc002d21f
c0024fb7:	e8 fd 56 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0024fbc:	bb 01 00 00 00       	mov    ebx,0x1
c0024fc1:	83 c4 10             	add    esp,0x10
c0024fc4:	eb 20                	jmp    c0024fe6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fc6:	31 db                	xor    ebx,ebx
c0024fc8:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024fcd:	75 17                	jne    c0024fe6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fcf:	50                   	push   eax
c0024fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fd4:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024fda:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024fde:	e8 61 b7 fd ff       	call   c0000744 <memcpy>
c0024fe3:	83 c4 10             	add    esp,0x10
c0024fe6:	83 c4 2c             	add    esp,0x2c
c0024fe9:	89 d8                	mov    eax,ebx
c0024feb:	5b                   	pop    ebx
c0024fec:	5e                   	pop    esi
c0024fed:	5f                   	pop    edi
c0024fee:	5d                   	pop    ebp
c0024fef:	c3                   	ret    

c0024ff0 <SATA::read(unsigned long long, int, void*)>:
c0024ff0:	57                   	push   edi
c0024ff1:	b8 04 00 00 00       	mov    eax,0x4
c0024ff6:	56                   	push   esi
c0024ff7:	53                   	push   ebx
c0024ff8:	83 ec 10             	sub    esp,0x10
c0024ffb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fff:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025003:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025006:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002500a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002500e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025014:	77 3b                	ja     c0025051 <SATA::read(unsigned long long, int, void*)+0x61>
c0025016:	b8 06 00 00 00       	mov    eax,0x6
c002501b:	85 d2                	test   edx,edx
c002501d:	74 32                	je     c0025051 <SATA::read(unsigned long long, int, void*)+0x61>
c002501f:	50                   	push   eax
c0025020:	50                   	push   eax
c0025021:	6a 00                	push   0x0
c0025023:	52                   	push   edx
c0025024:	53                   	push   ebx
c0025025:	57                   	push   edi
c0025026:	56                   	push   esi
c0025027:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002502b:	e8 5a fd ff ff       	call   c0024d8a <SATA::access(unsigned long long, int, void*, bool)>
c0025030:	83 c4 20             	add    esp,0x20
c0025033:	85 c0                	test   eax,eax
c0025035:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025039:	75 11                	jne    c002504c <SATA::read(unsigned long long, int, void*)+0x5c>
c002503b:	01 1d c8 2a 03 c0    	add    DWORD PTR ds:0xc0032ac8,ebx
c0025041:	e8 56 ba fe ff       	call   c0010a9c <VgaText::updateDiskUsage()>
c0025046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002504a:	eb 05                	jmp    c0025051 <SATA::read(unsigned long long, int, void*)+0x61>
c002504c:	b8 01 00 00 00       	mov    eax,0x1
c0025051:	83 c4 10             	add    esp,0x10
c0025054:	5b                   	pop    ebx
c0025055:	5e                   	pop    esi
c0025056:	5f                   	pop    edi
c0025057:	c3                   	ret    

c0025058 <SATA::write(unsigned long long, int, void*)>:
c0025058:	55                   	push   ebp
c0025059:	b8 04 00 00 00       	mov    eax,0x4
c002505e:	57                   	push   edi
c002505f:	56                   	push   esi
c0025060:	53                   	push   ebx
c0025061:	83 ec 1c             	sub    esp,0x1c
c0025064:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025068:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002506c:	8d 75 ff             	lea    esi,[ebp-0x1]
c002506f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025073:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025077:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002507d:	77 56                	ja     c00250d5 <SATA::write(unsigned long long, int, void*)+0x7d>
c002507f:	b8 06 00 00 00       	mov    eax,0x6
c0025084:	85 ff                	test   edi,edi
c0025086:	74 4d                	je     c00250d5 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025088:	89 ee                	mov    esi,ebp
c002508a:	c1 e6 09             	shl    esi,0x9
c002508d:	01 fe                	add    esi,edi
c002508f:	89 c8                	mov    eax,ecx
c0025091:	89 da                	mov    edx,ebx
c0025093:	83 c0 01             	add    eax,0x1
c0025096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002509a:	83 d2 00             	adc    edx,0x0
c002509d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00250a1:	50                   	push   eax
c00250a2:	50                   	push   eax
c00250a3:	6a 01                	push   0x1
c00250a5:	57                   	push   edi
c00250a6:	81 c7 00 02 00 00    	add    edi,0x200
c00250ac:	6a 01                	push   0x1
c00250ae:	53                   	push   ebx
c00250af:	51                   	push   ecx
c00250b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00250b4:	e8 d1 fc ff ff       	call   c0024d8a <SATA::access(unsigned long long, int, void*, bool)>
c00250b9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00250bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250c1:	83 c4 20             	add    esp,0x20
c00250c4:	39 f7                	cmp    edi,esi
c00250c6:	75 c7                	jne    c002508f <SATA::write(unsigned long long, int, void*)+0x37>
c00250c8:	01 2d c4 2a 03 c0    	add    DWORD PTR ds:0xc0032ac4,ebp
c00250ce:	e8 c9 b9 fe ff       	call   c0010a9c <VgaText::updateDiskUsage()>
c00250d3:	31 c0                	xor    eax,eax
c00250d5:	83 c4 1c             	add    esp,0x1c
c00250d8:	5b                   	pop    ebx
c00250d9:	5e                   	pop    esi
c00250da:	5f                   	pop    edi
c00250db:	5d                   	pop    ebp
c00250dc:	c3                   	ret    
c00250dd:	90                   	nop

c00250de <SATAPI::write(unsigned long long, int, void*)>:
c00250de:	b8 03 00 00 00       	mov    eax,0x3
c00250e3:	c3                   	ret    

c00250e4 <SATAPI::close(int, int, void*)>:
c00250e4:	83 ec 0c             	sub    esp,0xc
c00250e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250f1:	85 c0                	test   eax,eax
c00250f3:	74 0c                	je     c0025101 <SATAPI::close(int, int, void*)+0x1d>
c00250f5:	83 ec 0c             	sub    esp,0xc
c00250f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00250fa:	50                   	push   eax
c00250fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250fe:	83 c4 10             	add    esp,0x10
c0025101:	31 c0                	xor    eax,eax
c0025103:	83 c4 0c             	add    esp,0xc
c0025106:	c3                   	ret    
c0025107:	90                   	nop

c0025108 <SATAPI::SATAPI()>:
c0025108:	83 ec 0c             	sub    esp,0xc
c002510b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002510f:	83 ec 04             	sub    esp,0x4
c0025112:	68 00 08 00 00       	push   0x800
c0025117:	68 68 d2 02 c0       	push   0xc002d268
c002511c:	50                   	push   eax
c002511d:	e8 30 f7 fe ff       	call   c0014852 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025122:	83 c4 10             	add    esp,0x10
c0025125:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c002512a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512e:	89 10                	mov    DWORD PTR [eax],edx
c0025130:	90                   	nop
c0025131:	83 c4 0c             	add    esp,0xc
c0025134:	c3                   	ret    
c0025135:	90                   	nop

c0025136 <SATAPI::diskRemoved()>:
c0025136:	83 ec 18             	sub    esp,0x18
c0025139:	68 74 d2 02 c0       	push   0xc002d274
c002513e:	e8 c4 de fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0025143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025147:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002514e:	83 c4 1c             	add    esp,0x1c
c0025151:	c3                   	ret    

c0025152 <SATAPI::diskInserted()>:
c0025152:	53                   	push   ebx
c0025153:	83 ec 14             	sub    esp,0x14
c0025156:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002515a:	68 8b d2 02 c0       	push   0xc002d28b
c002515f:	e8 a3 de fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0025164:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002516b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002516e:	e8 47 f7 fe ff       	call   c00148ba <PhysicalDisk::startCache()>
c0025173:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025177:	83 c4 18             	add    esp,0x18
c002517a:	5b                   	pop    ebx
c002517b:	e9 c0 18 ff ff       	jmp    c0016a40 <createPartitionsForDisk(PhysicalDisk*)>

c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025180:	55                   	push   ebp
c0025181:	57                   	push   edi
c0025182:	56                   	push   esi
c0025183:	53                   	push   ebx
c0025184:	83 ec 24             	sub    esp,0x24
c0025187:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002518b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002518f:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025195:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025199:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002519d:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00251a3:	8d 5f 02             	lea    ebx,[edi+0x2]
c00251a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00251ac:	c1 e3 07             	shl    ebx,0x7
c00251af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00251b3:	89 f8                	mov    eax,edi
c00251b5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00251b9:	c1 e0 07             	shl    eax,0x7
c00251bc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00251c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00251c4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00251ce:	53                   	push   ebx
c00251cf:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00251d5:	e8 d6 eb ff ff       	call   c0023db0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00251da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251de:	83 c4 10             	add    esp,0x10
c00251e1:	b8 01 00 00 00       	mov    eax,0x1
c00251e6:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251eb:	0f 84 8a 01 00 00    	je     c002537b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251f1:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251f9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251ff:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025205:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025209:	c1 e1 05             	shl    ecx,0x5
c002520c:	01 c8                	add    eax,ecx
c002520e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025210:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025216:	81 c9 25 00 01 00    	or     ecx,0x10025
c002521c:	89 08                	mov    DWORD PTR [eax],ecx
c002521e:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025224:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002522a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025230:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025233:	52                   	push   edx
c0025234:	68 90 00 00 00       	push   0x90
c0025239:	6a 00                	push   0x0
c002523b:	53                   	push   ebx
c002523c:	e8 37 b5 fd ff       	call   c0000778 <memset>
c0025241:	83 c4 0c             	add    esp,0xc
c0025244:	8d 43 40             	lea    eax,[ebx+0x40]
c0025247:	6a 0c                	push   0xc
c0025249:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002524d:	50                   	push   eax
c002524e:	e8 f1 b4 fd ff       	call   c0000744 <memcpy>
c0025253:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025259:	89 ea                	mov    edx,ebp
c002525b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025261:	c1 ea 18             	shr    edx,0x18
c0025264:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025268:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002526b:	8d 48 ff             	lea    ecx,[eax-0x1]
c002526e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025272:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025278:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002527e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025283:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025287:	09 c8                	or     eax,ecx
c0025289:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002528d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025293:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025296:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002529d:	66 25 00 7f          	and    ax,0x7f00
c00252a1:	66 0d 27 80          	or     ax,0x8027
c00252a5:	66 89 03             	mov    WORD PTR [ebx],ax
c00252a8:	89 e8                	mov    eax,ebp
c00252aa:	c1 e8 10             	shr    eax,0x10
c00252ad:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00252b0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00252b4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00252b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00252bb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00252be:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00252c2:	83 c4 10             	add    esp,0x10
c00252c5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00252c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00252cd:	31 c0                	xor    eax,eax
c00252cf:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00252d5:	80 e1 88             	and    cl,0x88
c00252d8:	74 0a                	je     c00252e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00252da:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252df:	74 0a                	je     c00252eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00252e1:	40                   	inc    eax
c00252e2:	eb eb                	jmp    c00252cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00252e4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252e9:	75 0f                	jne    c00252fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252eb:	83 ec 0c             	sub    esp,0xc
c00252ee:	68 11 d2 02 c0       	push   0xc002d211
c00252f3:	e8 c1 53 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c00252f8:	eb 3a                	jmp    c0025334 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252fa:	b8 01 00 00 00       	mov    eax,0x1
c00252ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025303:	c1 e7 07             	shl    edi,0x7
c0025306:	d3 e0                	shl    eax,cl
c0025308:	03 3c 24             	add    edi,DWORD PTR [esp]
c002530b:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025311:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025317:	85 d0                	test   eax,edx
c0025319:	74 23                	je     c002533e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c002531b:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025321:	0f ba e2 1e          	bt     edx,0x1e
c0025325:	73 ea                	jae    c0025311 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025327:	83 ec 0c             	sub    esp,0xc
c002532a:	68 a3 d2 02 c0       	push   0xc002d2a3
c002532f:	e8 d3 dc fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0025334:	83 c4 10             	add    esp,0x10
c0025337:	b8 01 00 00 00       	mov    eax,0x1
c002533c:	eb 3d                	jmp    c002537b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002533e:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025344:	0f ba e0 1e          	bt     eax,0x1e
c0025348:	73 0a                	jae    c0025354 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002534a:	83 ec 0c             	sub    esp,0xc
c002534d:	68 b6 d2 02 c0       	push   0xc002d2b6
c0025352:	eb db                	jmp    c002532f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025354:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025359:	74 1e                	je     c0025379 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002535b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025360:	74 17                	je     c0025379 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025362:	50                   	push   eax
c0025363:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025367:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c002536d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025371:	e8 ce b3 fd ff       	call   c0000744 <memcpy>
c0025376:	83 c4 10             	add    esp,0x10
c0025379:	31 c0                	xor    eax,eax
c002537b:	83 c4 1c             	add    esp,0x1c
c002537e:	5b                   	pop    ebx
c002537f:	5e                   	pop    esi
c0025380:	5f                   	pop    edi
c0025381:	5d                   	pop    ebp
c0025382:	c3                   	ret    
c0025383:	90                   	nop

c0025384 <SATAPI::eject()>:
c0025384:	57                   	push   edi
c0025385:	b9 03 00 00 00       	mov    ecx,0x3
c002538a:	53                   	push   ebx
c002538b:	83 ec 14             	sub    esp,0x14
c002538e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025392:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025396:	fc                   	cld    
c0025397:	31 c0                	xor    eax,eax
c0025399:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002539b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00253a0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00253a5:	50                   	push   eax
c00253a6:	6a 00                	push   0x0
c00253a8:	6a 00                	push   0x0
c00253aa:	6a 00                	push   0x0
c00253ac:	6a 00                	push   0x0
c00253ae:	6a 02                	push   0x2
c00253b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253b4:	50                   	push   eax
c00253b5:	53                   	push   ebx
c00253b6:	e8 c5 fd ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253bb:	83 c4 14             	add    esp,0x14
c00253be:	53                   	push   ebx
c00253bf:	e8 72 fd ff ff       	call   c0025136 <SATAPI::diskRemoved()>
c00253c4:	83 c4 24             	add    esp,0x24
c00253c7:	31 c0                	xor    eax,eax
c00253c9:	5b                   	pop    ebx
c00253ca:	5f                   	pop    edi
c00253cb:	c3                   	ret    

c00253cc <SATAPI::detectMedia()>:
c00253cc:	56                   	push   esi
c00253cd:	53                   	push   ebx
c00253ce:	83 ec 28             	sub    esp,0x28
c00253d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253d5:	6a 0c                	push   0xc
c00253d7:	6a 00                	push   0x0
c00253d9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00253dd:	56                   	push   esi
c00253de:	e8 95 b3 fd ff       	call   c0000778 <memset>
c00253e3:	83 c4 0c             	add    esp,0xc
c00253e6:	6a 00                	push   0x0
c00253e8:	6a 00                	push   0x0
c00253ea:	6a 00                	push   0x0
c00253ec:	6a 00                	push   0x0
c00253ee:	6a 00                	push   0x0
c00253f0:	56                   	push   esi
c00253f1:	53                   	push   ebx
c00253f2:	e8 89 fd ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253f7:	83 c4 1c             	add    esp,0x1c
c00253fa:	6a 0c                	push   0xc
c00253fc:	6a 00                	push   0x0
c00253fe:	56                   	push   esi
c00253ff:	e8 74 b3 fd ff       	call   c0000778 <memset>
c0025404:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025409:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002540e:	83 c4 0c             	add    esp,0xc
c0025411:	6a 01                	push   0x1
c0025413:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025417:	50                   	push   eax
c0025418:	6a 00                	push   0x0
c002541a:	6a 00                	push   0x0
c002541c:	6a 12                	push   0x12
c002541e:	56                   	push   esi
c002541f:	53                   	push   ebx
c0025420:	e8 5b fd ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025425:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025429:	83 c4 20             	add    esp,0x20
c002542c:	83 e0 7f             	and    eax,0x7f
c002542f:	3c 70                	cmp    al,0x70
c0025431:	74 15                	je     c0025448 <SATAPI::detectMedia()+0x7c>
c0025433:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002543a:	75 0c                	jne    c0025448 <SATAPI::detectMedia()+0x7c>
c002543c:	83 ec 0c             	sub    esp,0xc
c002543f:	53                   	push   ebx
c0025440:	e8 0d fd ff ff       	call   c0025152 <SATAPI::diskInserted()>
c0025445:	83 c4 10             	add    esp,0x10
c0025448:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002544c:	83 e0 0f             	and    eax,0xf
c002544f:	3c 02                	cmp    al,0x2
c0025451:	75 1b                	jne    c002546e <SATAPI::detectMedia()+0xa2>
c0025453:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025458:	75 2d                	jne    c0025487 <SATAPI::detectMedia()+0xbb>
c002545a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025461:	74 24                	je     c0025487 <SATAPI::detectMedia()+0xbb>
c0025463:	83 ec 0c             	sub    esp,0xc
c0025466:	53                   	push   ebx
c0025467:	e8 ca fc ff ff       	call   c0025136 <SATAPI::diskRemoved()>
c002546c:	eb 16                	jmp    c0025484 <SATAPI::detectMedia()+0xb8>
c002546e:	84 c0                	test   al,al
c0025470:	75 15                	jne    c0025487 <SATAPI::detectMedia()+0xbb>
c0025472:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025479:	75 0c                	jne    c0025487 <SATAPI::detectMedia()+0xbb>
c002547b:	83 ec 0c             	sub    esp,0xc
c002547e:	53                   	push   ebx
c002547f:	e8 ce fc ff ff       	call   c0025152 <SATAPI::diskInserted()>
c0025484:	83 c4 10             	add    esp,0x10
c0025487:	83 c4 24             	add    esp,0x24
c002548a:	5b                   	pop    ebx
c002548b:	5e                   	pop    esi
c002548c:	c3                   	ret    
c002548d:	90                   	nop

c002548e <SATAPI::open(int, int, void*)>:
c002548e:	56                   	push   esi
c002548f:	53                   	push   ebx
c0025490:	50                   	push   eax
c0025491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025495:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025499:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00254a3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00254a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00254b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254b7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00254c1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00254c7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00254ce:	e8 cb aa fe ff       	call   c000ff9e <Phys::allocatePage()>
c00254d3:	89 c6                	mov    esi,eax
c00254d5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254db:	81 c6 00 10 00 00    	add    esi,0x1000
c00254e1:	e8 b8 aa fe ff       	call   c000ff9e <Phys::allocatePage()>
c00254e6:	39 c6                	cmp    esi,eax
c00254e8:	74 10                	je     c00254fa <SATAPI::open(int, int, void*)+0x6c>
c00254ea:	83 ec 0c             	sub    esp,0xc
c00254ed:	68 cb d2 02 c0       	push   0xc002d2cb
c00254f2:	e8 c2 51 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c00254f7:	83 c4 10             	add    esp,0x10
c00254fa:	83 ec 0c             	sub    esp,0xc
c00254fd:	6a 02                	push   0x2
c00254ff:	e8 43 c7 fe ff       	call   c0011c47 <Virt::allocateKernelVirtualPages(int)>
c0025504:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002550a:	e8 d3 c9 fe ff       	call   c0011ee2 <Virt::getAKernelVAS()>
c002550f:	6a 03                	push   0x3
c0025511:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025517:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002551d:	50                   	push   eax
c002551e:	e8 fb ce fe ff       	call   c001241e <VAS::mapPage(unsigned long, unsigned long, int)>
c0025523:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002552a:	83 c4 14             	add    esp,0x14
c002552d:	53                   	push   ebx
c002552e:	e8 99 fe ff ff       	call   c00253cc <SATAPI::detectMedia()>
c0025533:	83 c4 14             	add    esp,0x14
c0025536:	31 c0                	xor    eax,eax
c0025538:	5b                   	pop    ebx
c0025539:	5e                   	pop    esi
c002553a:	c3                   	ret    
c002553b:	90                   	nop

c002553c <SATAPI::read(unsigned long long, int, void*)>:
c002553c:	55                   	push   ebp
c002553d:	57                   	push   edi
c002553e:	56                   	push   esi
c002553f:	53                   	push   ebx
c0025540:	83 ec 1c             	sub    esp,0x1c
c0025543:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025547:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002554b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002554f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025556:	74 19                	je     c0025571 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025558:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002555d:	7e 2e                	jle    c002558d <SATAPI::read(unsigned long long, int, void*)+0x51>
c002555f:	83 ec 0c             	sub    esp,0xc
c0025562:	68 e1 d2 02 c0       	push   0xc002d2e1
c0025567:	e8 4d 51 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c002556c:	83 c4 10             	add    esp,0x10
c002556f:	eb 1c                	jmp    c002558d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025571:	83 ec 0c             	sub    esp,0xc
c0025574:	55                   	push   ebp
c0025575:	e8 52 fe ff ff       	call   c00253cc <SATAPI::detectMedia()>
c002557a:	83 c4 10             	add    esp,0x10
c002557d:	b8 02 00 00 00       	mov    eax,0x2
c0025582:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025589:	75 cd                	jne    c0025558 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002558b:	eb 49                	jmp    c00255d6 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002558d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025591:	b9 03 00 00 00       	mov    ecx,0x3
c0025596:	fc                   	cld    
c0025597:	31 c0                	xor    eax,eax
c0025599:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002559b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00255a0:	89 d8                	mov    eax,ebx
c00255a2:	86 e0                	xchg   al,ah
c00255a4:	c1 c0 10             	rol    eax,0x10
c00255a7:	86 e0                	xchg   al,ah
c00255a9:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00255ad:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00255b1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255b5:	50                   	push   eax
c00255b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00255ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00255be:	56                   	push   esi
c00255bf:	53                   	push   ebx
c00255c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00255c4:	c1 e0 0b             	shl    eax,0xb
c00255c7:	50                   	push   eax
c00255c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255cc:	50                   	push   eax
c00255cd:	55                   	push   ebp
c00255ce:	e8 ad fb ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255d3:	83 c4 20             	add    esp,0x20
c00255d6:	83 c4 1c             	add    esp,0x1c
c00255d9:	5b                   	pop    ebx
c00255da:	5e                   	pop    esi
c00255db:	5f                   	pop    edi
c00255dc:	5d                   	pop    ebp
c00255dd:	c3                   	ret    

c00255de <AVX::open(int, int, void*)>:
c00255de:	83 ec 0c             	sub    esp,0xc
c00255e1:	e8 42 11 00 00       	call   c0026728 <avxInit>
c00255e6:	b8 00 00 00 00       	mov    eax,0x0
c00255eb:	83 c4 0c             	add    esp,0xc
c00255ee:	c3                   	ret    
c00255ef:	90                   	nop

c00255f0 <AVX::close(int, int, void*)>:
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	e8 31 11 00 00       	call   c0026729 <avxClose>
c00255f8:	b8 00 00 00 00       	mov    eax,0x0
c00255fd:	83 c4 0c             	add    esp,0xc
c0025600:	c3                   	ret    
c0025601:	90                   	nop

c0025602 <AVX::available()>:
c0025602:	83 ec 0c             	sub    esp,0xc
c0025605:	e8 16 11 00 00       	call   c0026720 <avxDetect>
c002560a:	85 c0                	test   eax,eax
c002560c:	0f 95 c0             	setne  al
c002560f:	83 c4 0c             	add    esp,0xc
c0025612:	c3                   	ret    
c0025613:	90                   	nop

c0025614 <AVX::save(void*)>:
c0025614:	83 ec 0c             	sub    esp,0xc
c0025617:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002561b:	83 ec 0c             	sub    esp,0xc
c002561e:	50                   	push   eax
c002561f:	e8 02 11 00 00       	call   c0026726 <avxSave>
c0025624:	83 c4 10             	add    esp,0x10
c0025627:	90                   	nop
c0025628:	83 c4 0c             	add    esp,0xc
c002562b:	c3                   	ret    

c002562c <AVX::load(void*)>:
c002562c:	83 ec 0c             	sub    esp,0xc
c002562f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025633:	83 ec 0c             	sub    esp,0xc
c0025636:	50                   	push   eax
c0025637:	e8 eb 10 00 00       	call   c0026727 <avxLoad>
c002563c:	83 c4 10             	add    esp,0x10
c002563f:	90                   	nop
c0025640:	83 c4 0c             	add    esp,0xc
c0025643:	c3                   	ret    

c0025644 <AVX::AVX()>:
c0025644:	83 ec 0c             	sub    esp,0xc
c0025647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564b:	83 ec 08             	sub    esp,0x8
c002564e:	68 44 d3 02 c0       	push   0xc002d344
c0025653:	50                   	push   eax
c0025654:	e8 d7 f2 fe ff       	call   c0014930 <FPU::FPU(char const*)>
c0025659:	83 c4 10             	add    esp,0x10
c002565c:	ba 54 d3 02 c0       	mov    edx,0xc002d354
c0025661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025665:	89 10                	mov    DWORD PTR [eax],edx
c0025667:	90                   	nop
c0025668:	83 c4 0c             	add    esp,0xc
c002566b:	c3                   	ret    

c002566c <MMX::available()>:
c002566c:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0025671:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025677:	83 e0 20             	and    eax,0x20
c002567a:	84 c0                	test   al,al
c002567c:	0f 95 c0             	setne  al
c002567f:	c3                   	ret    

c0025680 <MMX::open(int, int, void*)>:
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	e8 24 11 00 00       	call   c00267ac <x87Init>
c0025688:	b8 00 00 00 00       	mov    eax,0x0
c002568d:	83 c4 0c             	add    esp,0xc
c0025690:	c3                   	ret    
c0025691:	90                   	nop

c0025692 <MMX::close(int, int, void*)>:
c0025692:	83 ec 0c             	sub    esp,0xc
c0025695:	e8 2c 11 00 00       	call   c00267c6 <x87Close>
c002569a:	b8 00 00 00 00       	mov    eax,0x0
c002569f:	83 c4 0c             	add    esp,0xc
c00256a2:	c3                   	ret    
c00256a3:	90                   	nop

c00256a4 <MMX::save(void*)>:
c00256a4:	83 ec 0c             	sub    esp,0xc
c00256a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256ab:	83 ec 0c             	sub    esp,0xc
c00256ae:	50                   	push   eax
c00256af:	e8 ed 10 00 00       	call   c00267a1 <x87Save>
c00256b4:	83 c4 10             	add    esp,0x10
c00256b7:	90                   	nop
c00256b8:	83 c4 0c             	add    esp,0xc
c00256bb:	c3                   	ret    

c00256bc <MMX::load(void*)>:
c00256bc:	83 ec 0c             	sub    esp,0xc
c00256bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256c3:	83 ec 0c             	sub    esp,0xc
c00256c6:	50                   	push   eax
c00256c7:	e8 db 10 00 00       	call   c00267a7 <x87Load>
c00256cc:	83 c4 10             	add    esp,0x10
c00256cf:	90                   	nop
c00256d0:	83 c4 0c             	add    esp,0xc
c00256d3:	c3                   	ret    

c00256d4 <MMX::MMX()>:
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256db:	83 ec 08             	sub    esp,0x8
c00256de:	68 84 d3 02 c0       	push   0xc002d384
c00256e3:	50                   	push   eax
c00256e4:	e8 47 f2 fe ff       	call   c0014930 <FPU::FPU(char const*)>
c00256e9:	83 c4 10             	add    esp,0x10
c00256ec:	ba 94 d3 02 c0       	mov    edx,0xc002d394
c00256f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f5:	89 10                	mov    DWORD PTR [eax],edx
c00256f7:	90                   	nop
c00256f8:	83 c4 0c             	add    esp,0xc
c00256fb:	c3                   	ret    

c00256fc <SSE::open(int, int, void*)>:
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	e8 60 10 00 00       	call   c0026764 <sseInit>
c0025704:	b8 00 00 00 00       	mov    eax,0x0
c0025709:	83 c4 0c             	add    esp,0xc
c002570c:	c3                   	ret    
c002570d:	90                   	nop

c002570e <SSE::close(int, int, void*)>:
c002570e:	83 ec 0c             	sub    esp,0xc
c0025711:	e8 5e 10 00 00       	call   c0026774 <sseClose>
c0025716:	b8 00 00 00 00       	mov    eax,0x0
c002571b:	83 c4 0c             	add    esp,0xc
c002571e:	c3                   	ret    
c002571f:	90                   	nop

c0025720 <SSE::available()>:
c0025720:	83 ec 1c             	sub    esp,0x1c
c0025723:	e8 18 10 00 00       	call   c0026740 <absolutelyNoChanceInHell>
c0025728:	85 c0                	test   eax,eax
c002572a:	0f 95 c0             	setne  al
c002572d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025731:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025735:	83 c4 1c             	add    esp,0x1c
c0025738:	c3                   	ret    
c0025739:	90                   	nop

c002573a <SSE::save(void*)>:
c002573a:	83 ec 0c             	sub    esp,0xc
c002573d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025741:	83 ec 0c             	sub    esp,0xc
c0025744:	50                   	push   eax
c0025745:	e8 0e 10 00 00       	call   c0026758 <sseSave>
c002574a:	83 c4 10             	add    esp,0x10
c002574d:	90                   	nop
c002574e:	83 c4 0c             	add    esp,0xc
c0025751:	c3                   	ret    

c0025752 <SSE::load(void*)>:
c0025752:	83 ec 0c             	sub    esp,0xc
c0025755:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025759:	83 ec 0c             	sub    esp,0xc
c002575c:	50                   	push   eax
c002575d:	e8 fc 0f 00 00       	call   c002675e <sseLoad>
c0025762:	83 c4 10             	add    esp,0x10
c0025765:	90                   	nop
c0025766:	83 c4 0c             	add    esp,0xc
c0025769:	c3                   	ret    

c002576a <SSE::SSE()>:
c002576a:	83 ec 0c             	sub    esp,0xc
c002576d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025771:	83 ec 08             	sub    esp,0x8
c0025774:	68 c4 d3 02 c0       	push   0xc002d3c4
c0025779:	50                   	push   eax
c002577a:	e8 b1 f1 fe ff       	call   c0014930 <FPU::FPU(char const*)>
c002577f:	83 c4 10             	add    esp,0x10
c0025782:	ba d4 d3 02 c0       	mov    edx,0xc002d3d4
c0025787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002578b:	89 10                	mov    DWORD PTR [eax],edx
c002578d:	90                   	nop
c002578e:	83 c4 0c             	add    esp,0xc
c0025791:	c3                   	ret    

c0025792 <x87::open(int, int, void*)>:
c0025792:	83 ec 0c             	sub    esp,0xc
c0025795:	e8 12 10 00 00       	call   c00267ac <x87Init>
c002579a:	b8 00 00 00 00       	mov    eax,0x0
c002579f:	83 c4 0c             	add    esp,0xc
c00257a2:	c3                   	ret    
c00257a3:	90                   	nop

c00257a4 <x87::close(int, int, void*)>:
c00257a4:	83 ec 0c             	sub    esp,0xc
c00257a7:	e8 1a 10 00 00       	call   c00267c6 <x87Close>
c00257ac:	b8 00 00 00 00       	mov    eax,0x0
c00257b1:	83 c4 0c             	add    esp,0xc
c00257b4:	c3                   	ret    
c00257b5:	90                   	nop

c00257b6 <x87::available()>:
c00257b6:	83 ec 0c             	sub    esp,0xc
c00257b9:	e8 c8 0f 00 00       	call   c0026786 <x87Detect>
c00257be:	85 c0                	test   eax,eax
c00257c0:	0f 95 c0             	setne  al
c00257c3:	83 c4 0c             	add    esp,0xc
c00257c6:	c3                   	ret    
c00257c7:	90                   	nop

c00257c8 <x87::save(void*)>:
c00257c8:	83 ec 0c             	sub    esp,0xc
c00257cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257cf:	83 ec 0c             	sub    esp,0xc
c00257d2:	50                   	push   eax
c00257d3:	e8 c9 0f 00 00       	call   c00267a1 <x87Save>
c00257d8:	83 c4 10             	add    esp,0x10
c00257db:	90                   	nop
c00257dc:	83 c4 0c             	add    esp,0xc
c00257df:	c3                   	ret    

c00257e0 <x87::load(void*)>:
c00257e0:	83 ec 0c             	sub    esp,0xc
c00257e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257e7:	83 ec 0c             	sub    esp,0xc
c00257ea:	50                   	push   eax
c00257eb:	e8 b7 0f 00 00       	call   c00267a7 <x87Load>
c00257f0:	83 c4 10             	add    esp,0x10
c00257f3:	90                   	nop
c00257f4:	83 c4 0c             	add    esp,0xc
c00257f7:	c3                   	ret    

c00257f8 <x87::x87()>:
c00257f8:	83 ec 0c             	sub    esp,0xc
c00257fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ff:	83 ec 08             	sub    esp,0x8
c0025802:	68 04 d4 02 c0       	push   0xc002d404
c0025807:	50                   	push   eax
c0025808:	e8 23 f1 fe ff       	call   c0014930 <FPU::FPU(char const*)>
c002580d:	83 c4 10             	add    esp,0x10
c0025810:	ba 14 d4 02 c0       	mov    edx,0xc002d414
c0025815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025819:	89 10                	mov    DWORD PTR [eax],edx
c002581b:	90                   	nop
c002581c:	83 c4 0c             	add    esp,0xc
c002581f:	c3                   	ret    

c0025820 <APIC::disable()>:
c0025820:	90                   	nop
c0025821:	c3                   	ret    

c0025822 <APIC::close(int, int, void*)>:
c0025822:	55                   	push   ebp
c0025823:	89 e5                	mov    ebp,esp
c0025825:	83 ec 08             	sub    esp,0x8
c0025828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582b:	8b 00                	mov    eax,DWORD PTR [eax]
c002582d:	83 c0 3c             	add    eax,0x3c
c0025830:	8b 00                	mov    eax,DWORD PTR [eax]
c0025832:	83 ec 0c             	sub    esp,0xc
c0025835:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025838:	ff d0                	call   eax
c002583a:	83 c4 10             	add    esp,0x10
c002583d:	b8 00 00 00 00       	mov    eax,0x0
c0025842:	c9                   	leave  
c0025843:	c3                   	ret    

c0025844 <IOAPIC::close(int, int, void*)>:
c0025844:	b8 00 00 00 00       	mov    eax,0x0
c0025849:	c3                   	ret    

c002584a <APIC::io_wait()>:
c002584a:	eb 00                	jmp    c002584c <APIC::io_wait()+0x2>
c002584c:	eb 00                	jmp    c002584e <APIC::io_wait()+0x4>
c002584e:	90                   	nop
c002584f:	c3                   	ret    

c0025850 <APIC::getBase()>:
c0025850:	55                   	push   ebp
c0025851:	89 e5                	mov    ebp,esp
c0025853:	83 ec 18             	sub    esp,0x18
c0025856:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c002585b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025861:	83 e0 08             	and    eax,0x8
c0025864:	84 c0                	test   al,al
c0025866:	75 07                	jne    c002586f <APIC::getBase()+0x1f>
c0025868:	b8 00 00 00 00       	mov    eax,0x0
c002586d:	eb 21                	jmp    c0025890 <APIC::getBase()+0x40>
c002586f:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0025874:	83 ec 08             	sub    esp,0x8
c0025877:	6a 1b                	push   0x1b
c0025879:	50                   	push   eax
c002587a:	e8 25 96 fe ff       	call   c000eea4 <Computer::rdmsr(unsigned int)>
c002587f:	83 c4 10             	add    esp,0x10
c0025882:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025885:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025888:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002588b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025890:	c9                   	leave  
c0025891:	c3                   	ret    

c0025892 <APIC::eoi(unsigned char)>:
c0025892:	55                   	push   ebp
c0025893:	89 e5                	mov    ebp,esp
c0025895:	83 ec 28             	sub    esp,0x28
c0025898:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002589b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002589e:	83 ec 0c             	sub    esp,0xc
c00258a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258a4:	e8 a7 ff ff ff       	call   c0025850 <APIC::getBase()>
c00258a9:	83 c4 10             	add    esp,0x10
c00258ac:	05 b0 00 00 00       	add    eax,0xb0
c00258b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00258b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00258b7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00258bd:	90                   	nop
c00258be:	c9                   	leave  
c00258bf:	c3                   	ret    

c00258c0 <APIC::open(int, int, void*)>:
c00258c0:	55                   	push   ebp
c00258c1:	89 e5                	mov    ebp,esp
c00258c3:	57                   	push   edi
c00258c4:	56                   	push   esi
c00258c5:	53                   	push   ebx
c00258c6:	83 ec 2c             	sub    esp,0x2c
c00258c9:	83 ec 0c             	sub    esp,0xc
c00258cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258cf:	e8 7c ff ff ff       	call   c0025850 <APIC::getBase()>
c00258d4:	83 c4 10             	add    esp,0x10
c00258d7:	89 c2                	mov    edx,eax
c00258d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258dc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258e2:	0f b6 f8             	movzx  edi,al
c00258e5:	89 d0                	mov    eax,edx
c00258e7:	ba 00 00 00 00       	mov    edx,0x0
c00258ec:	89 c1                	mov    ecx,eax
c00258ee:	80 e5 ff             	and    ch,0xff
c00258f1:	89 cb                	mov    ebx,ecx
c00258f3:	0f b6 f2             	movzx  esi,dl
c00258f6:	89 d8                	mov    eax,ebx
c00258f8:	89 f2                	mov    edx,esi
c00258fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025900:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025904:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025908:	83 e0 00             	and    eax,0x0
c002590b:	09 d0                	or     eax,edx
c002590d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025914:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002591a:	8d 50 01             	lea    edx,[eax+0x1]
c002591d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025920:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025926:	0f b6 d0             	movzx  edx,al
c0025929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002592c:	83 c2 08             	add    edx,0x8
c002592f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025933:	0f b6 c9             	movzx  ecx,cl
c0025936:	81 c9 00 00 01 00    	or     ecx,0x10000
c002593c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025940:	83 ec 0c             	sub    esp,0xc
c0025943:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025946:	e8 05 ff ff ff       	call   c0025850 <APIC::getBase()>
c002594b:	83 c4 10             	add    esp,0x10
c002594e:	05 f0 00 00 00       	add    eax,0xf0
c0025953:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025956:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025959:	8b 00                	mov    eax,DWORD PTR [eax]
c002595b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002595e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025965:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002596c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002596f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025972:	89 10                	mov    DWORD PTR [eax],edx
c0025974:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002597b:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0025980:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025983:	7d 7c                	jge    c0025a01 <APIC::open(int, int, void*)+0x141>
c0025985:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025988:	8b 04 85 60 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefa0]
c002598f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025992:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025995:	8b 04 85 60 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefa0]
c002599c:	c1 e8 08             	shr    eax,0x8
c002599f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00259a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259a6:	8b 04 85 60 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefa0]
c00259ad:	c1 e8 18             	shr    eax,0x18
c00259b0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00259b3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00259b7:	75 40                	jne    c00259f9 <APIC::open(int, int, void*)+0x139>
c00259b9:	83 ec 0c             	sub    esp,0xc
c00259bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259bf:	e8 8c fe ff ff       	call   c0025850 <APIC::getBase()>
c00259c4:	83 c4 10             	add    esp,0x10
c00259c7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00259cb:	75 07                	jne    c00259d4 <APIC::open(int, int, void*)+0x114>
c00259cd:	ba 60 03 00 00       	mov    edx,0x360
c00259d2:	eb 05                	jmp    c00259d9 <APIC::open(int, int, void*)+0x119>
c00259d4:	ba 50 03 00 00       	mov    edx,0x350
c00259d9:	01 d0                	add    eax,edx
c00259db:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259de:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00259e6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259ed:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259f1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259f4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259f7:	89 10                	mov    DWORD PTR [eax],edx
c00259f9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259fc:	e9 7a ff ff ff       	jmp    c002597b <APIC::open(int, int, void*)+0xbb>
c0025a01:	b8 00 00 00 00       	mov    eax,0x0
c0025a06:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a09:	5b                   	pop    ebx
c0025a0a:	5e                   	pop    esi
c0025a0b:	5f                   	pop    edi
c0025a0c:	5d                   	pop    ebp
c0025a0d:	c3                   	ret    

c0025a0e <IOAPIC::IOAPIC()>:
c0025a0e:	83 ec 0c             	sub    esp,0xc
c0025a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a15:	83 ec 08             	sub    esp,0x8
c0025a18:	68 44 d4 02 c0       	push   0xc002d444
c0025a1d:	50                   	push   eax
c0025a1e:	e8 fb eb fe ff       	call   c001461e <Device::Device(char const*)>
c0025a23:	83 c4 10             	add    esp,0x10
c0025a26:	ba 6c d5 02 c0       	mov    edx,0xc002d56c
c0025a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a2f:	89 10                	mov    DWORD PTR [eax],edx
c0025a31:	90                   	nop
c0025a32:	83 c4 0c             	add    esp,0xc
c0025a35:	c3                   	ret    

c0025a36 <APIC::APIC()>:
c0025a36:	53                   	push   ebx
c0025a37:	83 ec 18             	sub    esp,0x18
c0025a3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a3e:	83 ec 08             	sub    esp,0x8
c0025a41:	68 4c d4 02 c0       	push   0xc002d44c
c0025a46:	50                   	push   eax
c0025a47:	e8 3e f3 fe ff       	call   c0014d8a <InterruptController::InterruptController(char const*)>
c0025a4c:	83 c4 10             	add    esp,0x10
c0025a4f:	ba 24 d5 02 c0       	mov    edx,0xc002d524
c0025a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a58:	89 10                	mov    DWORD PTR [eax],edx
c0025a5a:	a0 20 2b 03 c0       	mov    al,ds:0xc0032b20
c0025a5f:	83 f0 01             	xor    eax,0x1
c0025a62:	84 c0                	test   al,al
c0025a64:	0f 84 a1 00 00 00    	je     c0025b0b <APIC::APIC()+0xd5>
c0025a6a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a6f:	a0 00 11 03 c0       	mov    al,ds:0xc0031100
c0025a74:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a78:	0f 83 86 00 00 00    	jae    c0025b04 <APIC::APIC()+0xce>
c0025a7e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a86:	83 ec 0c             	sub    esp,0xc
c0025a89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a8d:	e8 6a 9e fe ff       	call   c000f8fc <malloc>
c0025a92:	83 c4 10             	add    esp,0x10
c0025a95:	89 c3                	mov    ebx,eax
c0025a97:	83 ec 0c             	sub    esp,0xc
c0025a9a:	53                   	push   ebx
c0025a9b:	e8 6e ff ff ff       	call   c0025a0e <IOAPIC::IOAPIC()>
c0025aa0:	83 c4 10             	add    esp,0x10
c0025aa3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025aa7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025aac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025ab0:	89 14 85 00 2b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd500],edx
c0025ab7:	a1 e0 2a 03 c0       	mov    eax,ds:0xc0032ae0
c0025abc:	40                   	inc    eax
c0025abd:	a3 e0 2a 03 c0       	mov    ds:0xc0032ae0,eax
c0025ac2:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0025ac7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025acd:	83 ec 08             	sub    esp,0x8
c0025ad0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025ad4:	50                   	push   eax
c0025ad5:	e8 54 e9 fe ff       	call   c001442e <Device::addChild(Device*)>
c0025ada:	83 c4 10             	add    esp,0x10
c0025add:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ae1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae3:	83 c0 08             	add    eax,0x8
c0025ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025aed:	6a 00                	push   0x0
c0025aef:	6a 00                	push   0x0
c0025af1:	52                   	push   edx
c0025af2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025af6:	ff d0                	call   eax
c0025af8:	83 c4 10             	add    esp,0x10
c0025afb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025aff:	e9 6b ff ff ff       	jmp    c0025a6f <APIC::APIC()+0x39>
c0025b04:	c6 05 20 2b 03 c0 01 	mov    BYTE PTR ds:0xc0032b20,0x1
c0025b0b:	90                   	nop
c0025b0c:	83 c4 18             	add    esp,0x18
c0025b0f:	5b                   	pop    ebx
c0025b10:	c3                   	ret    
c0025b11:	90                   	nop

c0025b12 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025b12:	55                   	push   ebp
c0025b13:	89 e5                	mov    ebp,esp
c0025b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b1e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b21:	72 1d                	jb     c0025b40 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b26:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b2f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025b35:	01 d0                	add    eax,edx
c0025b37:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b3a:	73 04                	jae    c0025b40 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b3c:	b0 01                	mov    al,0x1
c0025b3e:	eb 02                	jmp    c0025b42 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025b40:	b0 00                	mov    al,0x0
c0025b42:	5d                   	pop    ebp
c0025b43:	c3                   	ret    

c0025b44 <IOAPIC::read(int)>:
c0025b44:	55                   	push   ebp
c0025b45:	89 e5                	mov    ebp,esp
c0025b47:	83 ec 10             	sub    esp,0x10
c0025b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b53:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b59:	0f b6 d0             	movzx  edx,al
c0025b5c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b5f:	89 10                	mov    DWORD PTR [eax],edx
c0025b61:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b64:	83 c0 10             	add    eax,0x10
c0025b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b69:	c9                   	leave  
c0025b6a:	c3                   	ret    
c0025b6b:	90                   	nop

c0025b6c <IOAPIC::open(int, int, void*)>:
c0025b6c:	55                   	push   ebp
c0025b6d:	89 e5                	mov    ebp,esp
c0025b6f:	57                   	push   edi
c0025b70:	56                   	push   esi
c0025b71:	53                   	push   ebx
c0025b72:	83 ec 0c             	sub    esp,0xc
c0025b75:	83 ec 0c             	sub    esp,0xc
c0025b78:	68 77 d4 02 c0       	push   0xc002d477
c0025b7d:	e8 85 d4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0025b82:	83 c4 10             	add    esp,0x10
c0025b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b8b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b9a:	8b 14 85 40 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceec0]
c0025ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025bb3:	8b 14 85 c0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee40]
c0025bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bcf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bd5:	0f b6 f8             	movzx  edi,al
c0025bd8:	89 d0                	mov    eax,edx
c0025bda:	ba 00 00 00 00       	mov    edx,0x0
c0025bdf:	89 c1                	mov    ecx,eax
c0025be1:	80 e5 ff             	and    ch,0xff
c0025be4:	89 cb                	mov    ebx,ecx
c0025be6:	0f b6 f2             	movzx  esi,dl
c0025be9:	89 d8                	mov    eax,ebx
c0025beb:	89 f2                	mov    edx,esi
c0025bed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bf0:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bf3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bf7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bfb:	83 e0 00             	and    eax,0x0
c0025bfe:	09 d0                	or     eax,edx
c0025c00:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c07:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c0d:	8d 50 01             	lea    edx,[eax+0x1]
c0025c10:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c13:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c19:	0f b6 d0             	movzx  edx,al
c0025c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c1f:	83 c2 08             	add    edx,0x8
c0025c22:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c26:	0f b6 c9             	movzx  ecx,cl
c0025c29:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c2f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c33:	83 ec 08             	sub    esp,0x8
c0025c36:	6a 01                	push   0x1
c0025c38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c3b:	e8 04 ff ff ff       	call   c0025b44 <IOAPIC::read(int)>
c0025c40:	83 c4 10             	add    esp,0x10
c0025c43:	c1 f8 10             	sar    eax,0x10
c0025c46:	0f b6 c0             	movzx  eax,al
c0025c49:	8d 50 01             	lea    edx,[eax+0x1]
c0025c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c4f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c55:	b8 00 00 00 00       	mov    eax,0x0
c0025c5a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c5d:	5b                   	pop    ebx
c0025c5e:	5e                   	pop    esi
c0025c5f:	5f                   	pop    edi
c0025c60:	5d                   	pop    ebp
c0025c61:	c3                   	ret    

c0025c62 <IOAPIC::write(int, int)>:
c0025c62:	55                   	push   ebp
c0025c63:	89 e5                	mov    ebp,esp
c0025c65:	83 ec 10             	sub    esp,0x10
c0025c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c6b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c71:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c77:	0f b6 d0             	movzx  edx,al
c0025c7a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c7d:	89 10                	mov    DWORD PTR [eax],edx
c0025c7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c82:	8d 50 10             	lea    edx,[eax+0x10]
c0025c85:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c88:	89 02                	mov    DWORD PTR [edx],eax
c0025c8a:	90                   	nop
c0025c8b:	c9                   	leave  
c0025c8c:	c3                   	ret    
c0025c8d:	90                   	nop

c0025c8e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c8e:	55                   	push   ebp
c0025c8f:	89 e5                	mov    ebp,esp
c0025c91:	53                   	push   ebx
c0025c92:	83 ec 2c             	sub    esp,0x2c
c0025c95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c98:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c9b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c9e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025ca1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ca4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ca7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025caa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025cb0:	88 d8                	mov    al,bl
c0025cb2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025cb5:	88 c8                	mov    al,cl
c0025cb7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cba:	88 d0                	mov    al,dl
c0025cbc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025cbf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025cc3:	83 c0 08             	add    eax,0x8
c0025cc6:	01 c0                	add    eax,eax
c0025cc8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ccb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ccf:	83 c0 08             	add    eax,0x8
c0025cd2:	01 c0                	add    eax,eax
c0025cd4:	40                   	inc    eax
c0025cd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025cd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cdb:	50                   	push   eax
c0025cdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cdf:	e8 60 fe ff ff       	call   c0025b44 <IOAPIC::read(int)>
c0025ce4:	83 c4 08             	add    esp,0x8
c0025ce7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025cea:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025cf1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025cf4:	c1 e0 18             	shl    eax,0x18
c0025cf7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cfa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cfd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025d00:	52                   	push   edx
c0025d01:	50                   	push   eax
c0025d02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d05:	e8 58 ff ff ff       	call   c0025c62 <IOAPIC::write(int, int)>
c0025d0a:	83 c4 0c             	add    esp,0xc
c0025d0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d10:	50                   	push   eax
c0025d11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d14:	e8 2b fe ff ff       	call   c0025b44 <IOAPIC::read(int)>
c0025d19:	83 c4 08             	add    esp,0x8
c0025d1c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d1f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d26:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d2d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025d34:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d38:	74 09                	je     c0025d43 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025d3a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025d41:	eb 07                	jmp    c0025d4a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025d43:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d4a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d4e:	74 09                	je     c0025d59 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d50:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d57:	eb 07                	jmp    c0025d60 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d59:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d60:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d67:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d6b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d6e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d71:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d74:	52                   	push   edx
c0025d75:	50                   	push   eax
c0025d76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d79:	e8 e4 fe ff ff       	call   c0025c62 <IOAPIC::write(int, int)>
c0025d7e:	83 c4 0c             	add    esp,0xc
c0025d81:	90                   	nop
c0025d82:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d85:	c9                   	leave  
c0025d86:	c3                   	ret    
c0025d87:	90                   	nop

c0025d88 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d88:	55                   	push   ebp
c0025d89:	89 e5                	mov    ebp,esp
c0025d8b:	57                   	push   edi
c0025d8c:	56                   	push   esi
c0025d8d:	53                   	push   ebx
c0025d8e:	83 ec 2c             	sub    esp,0x2c
c0025d91:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d94:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d97:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d9b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d9f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025da3:	74 5a                	je     c0025dff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025da9:	7f 44                	jg     c0025def <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025dab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dae:	05 c0 d9 02 c0       	add    eax,0xc002d9c0
c0025db3:	8a 00                	mov    al,BYTE PTR [eax]
c0025db5:	0f b6 c0             	movzx  eax,al
c0025db8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025dbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dbe:	66 8b 84 00 e0 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcef20]
c0025dc6:	0f b7 c0             	movzx  eax,ax
c0025dc9:	83 e0 02             	and    eax,0x2
c0025dcc:	85 c0                	test   eax,eax
c0025dce:	74 04                	je     c0025dd4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025dd0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025dd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dd7:	66 8b 84 00 e0 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcef20]
c0025ddf:	0f b7 c0             	movzx  eax,ax
c0025de2:	83 e0 08             	and    eax,0x8
c0025de5:	85 c0                	test   eax,eax
c0025de7:	74 16                	je     c0025dff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025de9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ded:	eb 10                	jmp    c0025dff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025def:	83 ec 0c             	sub    esp,0xc
c0025df2:	68 88 d4 02 c0       	push   0xc002d488
c0025df7:	e8 bd 48 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0025dfc:	83 c4 10             	add    esp,0x10
c0025dff:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025e03:	a1 e0 2a 03 c0       	mov    eax,ds:0xc0032ae0
c0025e08:	83 ec 08             	sub    esp,0x8
c0025e0b:	50                   	push   eax
c0025e0c:	68 c0 d4 02 c0       	push   0xc002d4c0
c0025e11:	e8 f1 d1 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0025e16:	83 c4 10             	add    esp,0x10
c0025e19:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025e20:	a1 e0 2a 03 c0       	mov    eax,ds:0xc0032ae0
c0025e25:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e28:	7d 67                	jge    c0025e91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e2a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e2d:	8b 04 85 00 2b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd500]
c0025e34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e37:	83 ec 08             	sub    esp,0x8
c0025e3a:	52                   	push   edx
c0025e3b:	50                   	push   eax
c0025e3c:	e8 d1 fc ff ff       	call   c0025b12 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025e41:	83 c4 10             	add    esp,0x10
c0025e44:	84 c0                	test   al,al
c0025e46:	74 44                	je     c0025e8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e48:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e4b:	8b 1c 85 00 2b 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd500]
c0025e52:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e56:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e59:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e60:	83 c0 20             	add    eax,0x20
c0025e63:	0f b6 f0             	movzx  esi,al
c0025e66:	b8 00 00 00 00       	mov    eax,0x0
c0025e6b:	99                   	cdq    
c0025e6c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e6f:	0f b6 c9             	movzx  ecx,cl
c0025e72:	83 ec 04             	sub    esp,0x4
c0025e75:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e78:	57                   	push   edi
c0025e79:	56                   	push   esi
c0025e7a:	52                   	push   edx
c0025e7b:	50                   	push   eax
c0025e7c:	51                   	push   ecx
c0025e7d:	53                   	push   ebx
c0025e7e:	e8 0b fe ff ff       	call   c0025c8e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e83:	83 c4 20             	add    esp,0x20
c0025e86:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e8a:	eb 05                	jmp    c0025e91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e8c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e8f:	eb 8f                	jmp    c0025e20 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e91:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e94:	83 f0 01             	xor    eax,0x1
c0025e97:	84 c0                	test   al,al
c0025e99:	74 10                	je     c0025eab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e9b:	83 ec 0c             	sub    esp,0xc
c0025e9e:	68 d7 d4 02 c0       	push   0xc002d4d7
c0025ea3:	e8 11 48 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0025ea8:	83 c4 10             	add    esp,0x10
c0025eab:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025eaf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025eb6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025eba:	7f 65                	jg     c0025f21 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ebf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ec2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ec9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ecc:	01 ca                	add    edx,ecx
c0025ece:	83 c2 54             	add    edx,0x54
c0025ed1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025ed5:	85 c0                	test   eax,eax
c0025ed7:	75 43                	jne    c0025f1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025edc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025edf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ee6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ee9:	01 ca                	add    edx,ecx
c0025eeb:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025eee:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ef1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ef8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025efb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f02:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f05:	01 ca                	add    edx,ecx
c0025f07:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025f0d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025f10:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025f14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f17:	83 e8 20             	sub    eax,0x20
c0025f1a:	eb 1a                	jmp    c0025f36 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025f1c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025f1f:	eb 95                	jmp    c0025eb6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025f21:	83 ec 0c             	sub    esp,0xc
c0025f24:	68 e4 d4 02 c0       	push   0xc002d4e4
c0025f29:	e8 8b 47 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0025f2e:	83 c4 10             	add    esp,0x10
c0025f31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f36:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f39:	5b                   	pop    ebx
c0025f3a:	5e                   	pop    esi
c0025f3b:	5f                   	pop    edi
c0025f3c:	5d                   	pop    ebp
c0025f3d:	c3                   	ret    

c0025f3e <PIC::disable()>:
c0025f3e:	55                   	push   ebp
c0025f3f:	89 e5                	mov    ebp,esp
c0025f41:	83 ec 10             	sub    esp,0x10
c0025f44:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f4a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f4e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f51:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f55:	ee                   	out    dx,al
c0025f56:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f5c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f60:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f63:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f67:	ee                   	out    dx,al
c0025f68:	90                   	nop
c0025f69:	c9                   	leave  
c0025f6a:	c3                   	ret    
c0025f6b:	90                   	nop

c0025f6c <PIC::close(int, int, void*)>:
c0025f6c:	55                   	push   ebp
c0025f6d:	89 e5                	mov    ebp,esp
c0025f6f:	83 ec 08             	sub    esp,0x8
c0025f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f77:	83 c0 3c             	add    eax,0x3c
c0025f7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f7c:	83 ec 0c             	sub    esp,0xc
c0025f7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f82:	ff d0                	call   eax
c0025f84:	83 c4 10             	add    esp,0x10
c0025f87:	b8 00 00 00 00       	mov    eax,0x0
c0025f8c:	c9                   	leave  
c0025f8d:	c3                   	ret    

c0025f8e <PIC::PIC()>:
c0025f8e:	83 ec 0c             	sub    esp,0xc
c0025f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f95:	83 ec 08             	sub    esp,0x8
c0025f98:	68 90 d5 02 c0       	push   0xc002d590
c0025f9d:	50                   	push   eax
c0025f9e:	e8 e7 ed fe ff       	call   c0014d8a <InterruptController::InterruptController(char const*)>
c0025fa3:	83 c4 10             	add    esp,0x10
c0025fa6:	ba bc d5 02 c0       	mov    edx,0xc002d5bc
c0025fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025faf:	89 10                	mov    DWORD PTR [eax],edx
c0025fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fbb:	0f b6 d0             	movzx  edx,al
c0025fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fd3:	0f b6 d0             	movzx  edx,al
c0025fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fda:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0025fec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ff0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ff6:	0f b6 d0             	movzx  edx,al
c0025ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026001:	83 e1 3f             	and    ecx,0x3f
c0026004:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026012:	0f b6 d0             	movzx  edx,al
c0026015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026019:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026024:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002602a:	0f b6 d0             	movzx  edx,al
c002602d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026031:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026040:	8d 50 01             	lea    edx,[eax+0x1]
c0026043:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026047:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002604d:	0f b6 d0             	movzx  edx,al
c0026050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026054:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026058:	83 e1 3f             	and    ecx,0x3f
c002605b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002605f:	90                   	nop
c0026060:	83 c4 0c             	add    esp,0xc
c0026063:	c3                   	ret    

c0026064 <PIC::ioWait()>:
c0026064:	eb 00                	jmp    c0026066 <PIC::ioWait()+0x2>
c0026066:	eb 00                	jmp    c0026068 <PIC::ioWait()+0x4>
c0026068:	90                   	nop
c0026069:	c3                   	ret    

c002606a <PIC::getIRQReg(int)>:
c002606a:	55                   	push   ebp
c002606b:	89 e5                	mov    ebp,esp
c002606d:	83 ec 10             	sub    esp,0x10
c0026070:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026073:	0f b6 c0             	movzx  eax,al
c0026076:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002607c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002607f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026082:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026086:	ee                   	out    dx,al
c0026087:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002608a:	0f b6 c0             	movzx  eax,al
c002608d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026093:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026096:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026099:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002609d:	ee                   	out    dx,al
c002609e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00260a4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00260a8:	89 c2                	mov    edx,eax
c00260aa:	ec                   	in     al,dx
c00260ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00260ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260b1:	0f b6 c0             	movzx  eax,al
c00260b4:	c1 e0 08             	shl    eax,0x8
c00260b7:	89 c1                	mov    ecx,eax
c00260b9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00260bf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00260c3:	89 c2                	mov    edx,eax
c00260c5:	ec                   	in     al,dx
c00260c6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00260c9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260cc:	0f b6 c0             	movzx  eax,al
c00260cf:	09 c8                	or     eax,ecx
c00260d1:	c9                   	leave  
c00260d2:	c3                   	ret    
c00260d3:	90                   	nop

c00260d4 <PIC::eoi(unsigned char)>:
c00260d4:	55                   	push   ebp
c00260d5:	89 e5                	mov    ebp,esp
c00260d7:	83 ec 14             	sub    esp,0x14
c00260da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260dd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00260e0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260e4:	75 1e                	jne    c0026104 <PIC::eoi(unsigned char)+0x30>
c00260e6:	6a 0b                	push   0xb
c00260e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260eb:	e8 7a ff ff ff       	call   c002606a <PIC::getIRQReg(int)>
c00260f0:	83 c4 08             	add    esp,0x8
c00260f3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260f7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260fb:	25 80 00 00 00       	and    eax,0x80
c0026100:	85 c0                	test   eax,eax
c0026102:	74 5f                	je     c0026163 <PIC::eoi(unsigned char)+0x8f>
c0026104:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026108:	75 2d                	jne    c0026137 <PIC::eoi(unsigned char)+0x63>
c002610a:	6a 0b                	push   0xb
c002610c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002610f:	e8 56 ff ff ff       	call   c002606a <PIC::getIRQReg(int)>
c0026114:	83 c4 08             	add    esp,0x8
c0026117:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002611b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002611e:	66 85 c0             	test   ax,ax
c0026121:	78 14                	js     c0026137 <PIC::eoi(unsigned char)+0x63>
c0026123:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026129:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002612d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026130:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026134:	ee                   	out    dx,al
c0026135:	eb 2d                	jmp    c0026164 <PIC::eoi(unsigned char)+0x90>
c0026137:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002613b:	76 12                	jbe    c002614f <PIC::eoi(unsigned char)+0x7b>
c002613d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026143:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026147:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002614a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002614e:	ee                   	out    dx,al
c002614f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026155:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026159:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002615c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026160:	ee                   	out    dx,al
c0026161:	eb 01                	jmp    c0026164 <PIC::eoi(unsigned char)+0x90>
c0026163:	90                   	nop
c0026164:	c9                   	leave  
c0026165:	c3                   	ret    

c0026166 <PIC::remap()>:
c0026166:	55                   	push   ebp
c0026167:	89 e5                	mov    ebp,esp
c0026169:	83 ec 48             	sub    esp,0x48
c002616c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026173:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002617a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026180:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026183:	89 c2                	mov    edx,eax
c0026185:	ec                   	in     al,dx
c0026186:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026189:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002618c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002618f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026195:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026198:	89 c2                	mov    edx,eax
c002619a:	ec                   	in     al,dx
c002619b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002619e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00261a1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00261a4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00261aa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00261ae:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00261b1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00261b4:	ee                   	out    dx,al
c00261b5:	83 ec 0c             	sub    esp,0xc
c00261b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261bb:	e8 a4 fe ff ff       	call   c0026064 <PIC::ioWait()>
c00261c0:	83 c4 10             	add    esp,0x10
c00261c3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00261c9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00261cd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00261d0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00261d3:	ee                   	out    dx,al
c00261d4:	83 ec 0c             	sub    esp,0xc
c00261d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261da:	e8 85 fe ff ff       	call   c0026064 <PIC::ioWait()>
c00261df:	83 c4 10             	add    esp,0x10
c00261e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00261e5:	0f b6 c0             	movzx  eax,al
c00261e8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261ee:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261f1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261f4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261f7:	ee                   	out    dx,al
c00261f8:	83 ec 0c             	sub    esp,0xc
c00261fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fe:	e8 61 fe ff ff       	call   c0026064 <PIC::ioWait()>
c0026203:	83 c4 10             	add    esp,0x10
c0026206:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026209:	0f b6 c0             	movzx  eax,al
c002620c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026212:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026215:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026218:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002621b:	ee                   	out    dx,al
c002621c:	83 ec 0c             	sub    esp,0xc
c002621f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026222:	e8 3d fe ff ff       	call   c0026064 <PIC::ioWait()>
c0026227:	83 c4 10             	add    esp,0x10
c002622a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026230:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026234:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026237:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002623a:	ee                   	out    dx,al
c002623b:	83 ec 0c             	sub    esp,0xc
c002623e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026241:	e8 1e fe ff ff       	call   c0026064 <PIC::ioWait()>
c0026246:	83 c4 10             	add    esp,0x10
c0026249:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002624f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026253:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026256:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026259:	ee                   	out    dx,al
c002625a:	83 ec 0c             	sub    esp,0xc
c002625d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026260:	e8 ff fd ff ff       	call   c0026064 <PIC::ioWait()>
c0026265:	83 c4 10             	add    esp,0x10
c0026268:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002626e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026272:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026275:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026278:	ee                   	out    dx,al
c0026279:	83 ec 0c             	sub    esp,0xc
c002627c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627f:	e8 e0 fd ff ff       	call   c0026064 <PIC::ioWait()>
c0026284:	83 c4 10             	add    esp,0x10
c0026287:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002628d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026291:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026294:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026297:	ee                   	out    dx,al
c0026298:	83 ec 0c             	sub    esp,0xc
c002629b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002629e:	e8 c1 fd ff ff       	call   c0026064 <PIC::ioWait()>
c00262a3:	83 c4 10             	add    esp,0x10
c00262a6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00262aa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00262b0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00262b3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00262b6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00262b9:	ee                   	out    dx,al
c00262ba:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00262be:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00262c4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00262c7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00262ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00262cd:	ee                   	out    dx,al
c00262ce:	90                   	nop
c00262cf:	c9                   	leave  
c00262d0:	c3                   	ret    
c00262d1:	90                   	nop

c00262d2 <PIC::open(int, int, void*)>:
c00262d2:	55                   	push   ebp
c00262d3:	89 e5                	mov    ebp,esp
c00262d5:	83 ec 18             	sub    esp,0x18
c00262d8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00262de:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00262e2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262e5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262e9:	ee                   	out    dx,al
c00262ea:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262f0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262f4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262f7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262fb:	ee                   	out    dx,al
c00262fc:	83 ec 0c             	sub    esp,0xc
c00262ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026302:	e8 5f fe ff ff       	call   c0026166 <PIC::remap()>
c0026307:	83 c4 10             	add    esp,0x10
c002630a:	b8 00 00 00 00       	mov    eax,0x0
c002630f:	c9                   	leave  
c0026310:	c3                   	ret    
c0026311:	90                   	nop

c0026312 <APICTimer::close(int, int, void*)>:
c0026312:	b8 00 00 00 00       	mov    eax,0x0
c0026317:	c3                   	ret    

c0026318 <apicTimerHandler(regs*, void*)>:
c0026318:	83 ec 0c             	sub    esp,0xc
c002631b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002631f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026321:	99                   	cdq    
c0026322:	52                   	push   edx
c0026323:	50                   	push   eax
c0026324:	6a 00                	push   0x0
c0026326:	68 00 ca 9a 3b       	push   0x3b9aca00
c002632b:	e8 8c 07 00 00       	call   c0026abc <__udivdi3>
c0026330:	83 c4 10             	add    esp,0x10
c0026333:	83 ec 08             	sub    esp,0x8
c0026336:	52                   	push   edx
c0026337:	50                   	push   eax
c0026338:	e8 a8 0a ff ff       	call   c0016de5 <timerHandler(unsigned long long)>
c002633d:	83 c4 10             	add    esp,0x10
c0026340:	90                   	nop
c0026341:	83 c4 0c             	add    esp,0xc
c0026344:	c3                   	ret    
c0026345:	90                   	nop

c0026346 <APICTimer::write(int)>:
c0026346:	53                   	push   ebx
c0026347:	83 ec 28             	sub    esp,0x28
c002634a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002634e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026352:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026358:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c002635d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026363:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026369:	83 ec 0c             	sub    esp,0xc
c002636c:	50                   	push   eax
c002636d:	e8 de f4 ff ff       	call   c0025850 <APIC::getBase()>
c0026372:	83 c4 10             	add    esp,0x10
c0026375:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026379:	a1 f0 ed 02 c0       	mov    eax,ds:0xc002edf0
c002637e:	8b 15 f4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edf4
c0026384:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026388:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002638c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026390:	05 e0 03 00 00       	add    eax,0x3e0
c0026395:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002639b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002639f:	05 80 03 00 00       	add    eax,0x380
c00263a4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00263aa:	fb                   	sti    
c00263ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00263b3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00263b8:	83 d2 00             	adc    edx,0x0
c00263bb:	89 c1                	mov    ecx,eax
c00263bd:	89 d3                	mov    ebx,edx
c00263bf:	a1 f0 ed 02 c0       	mov    eax,ds:0xc002edf0
c00263c4:	8b 15 f4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edf4
c00263ca:	39 c8                	cmp    eax,ecx
c00263cc:	89 d0                	mov    eax,edx
c00263ce:	19 d8                	sbb    eax,ebx
c00263d0:	73 02                	jae    c00263d4 <APICTimer::write(int)+0x8e>
c00263d2:	eb d7                	jmp    c00263ab <APICTimer::write(int)+0x65>
c00263d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d8:	05 20 03 00 00       	add    eax,0x320
c00263dd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00263e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263e7:	05 90 03 00 00       	add    eax,0x390
c00263ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ee:	f7 d0                	not    eax
c00263f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263f4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263fc:	ba 00 00 00 00       	mov    edx,0x0
c0026401:	f7 f3                	div    ebx
c0026403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002640b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026411:	0d 00 00 02 00       	or     eax,0x20000
c0026416:	89 c2                	mov    edx,eax
c0026418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002641c:	05 20 03 00 00       	add    eax,0x320
c0026421:	89 10                	mov    DWORD PTR [eax],edx
c0026423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026427:	05 e0 03 00 00       	add    eax,0x3e0
c002642c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026432:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026436:	05 80 03 00 00       	add    eax,0x380
c002643b:	89 c2                	mov    edx,eax
c002643d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026441:	89 02                	mov    DWORD PTR [edx],eax
c0026443:	90                   	nop
c0026444:	83 c4 28             	add    esp,0x28
c0026447:	5b                   	pop    ebx
c0026448:	c3                   	ret    
c0026449:	90                   	nop

c002644a <APICTimer::open(int, int, void*)>:
c002644a:	57                   	push   edi
c002644b:	56                   	push   esi
c002644c:	53                   	push   ebx
c002644d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026451:	8b 00                	mov    eax,DWORD PTR [eax]
c0026453:	83 c0 24             	add    eax,0x24
c0026456:	8b 00                	mov    eax,DWORD PTR [eax]
c0026458:	83 ec 08             	sub    esp,0x8
c002645b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002645f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026463:	ff d0                	call   eax
c0026465:	83 c4 10             	add    esp,0x10
c0026468:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c002646d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026473:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026479:	83 ec 0c             	sub    esp,0xc
c002647c:	50                   	push   eax
c002647d:	e8 ce f3 ff ff       	call   c0025850 <APIC::getBase()>
c0026482:	83 c4 10             	add    esp,0x10
c0026485:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002648b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026495:	0f b6 f8             	movzx  edi,al
c0026498:	89 d0                	mov    eax,edx
c002649a:	ba 00 00 00 00       	mov    edx,0x0
c002649f:	89 c1                	mov    ecx,eax
c00264a1:	80 e5 ff             	and    ch,0xff
c00264a4:	89 cb                	mov    ebx,ecx
c00264a6:	0f b6 f2             	movzx  esi,dl
c00264a9:	89 d8                	mov    eax,ebx
c00264ab:	89 f2                	mov    edx,esi
c00264ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264b1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00264b4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00264b8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00264bc:	83 e0 00             	and    eax,0x0
c00264bf:	09 d0                	or     eax,edx
c00264c1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264cf:	8d 50 01             	lea    edx,[eax+0x1]
c00264d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264d6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264dc:	0f b6 d0             	movzx  edx,al
c00264df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e3:	83 c2 08             	add    edx,0x8
c00264e6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264ea:	0f b6 c9             	movzx  ecx,cl
c00264ed:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264f3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264ff:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026509:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002650d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026513:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026517:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002651d:	83 ec 0c             	sub    esp,0xc
c0026520:	51                   	push   ecx
c0026521:	6a 01                	push   0x1
c0026523:	68 18 63 02 c0       	push   0xc0026318
c0026528:	52                   	push   edx
c0026529:	50                   	push   eax
c002652a:	e8 83 de fe ff       	call   c00143b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002652f:	83 c4 20             	add    esp,0x20
c0026532:	89 c2                	mov    edx,eax
c0026534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026538:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002653e:	b8 00 00 00 00       	mov    eax,0x0
c0026543:	5b                   	pop    ebx
c0026544:	5e                   	pop    esi
c0026545:	5f                   	pop    edi
c0026546:	c3                   	ret    
c0026547:	90                   	nop

c0026548 <APICTimer::APICTimer()>:
c0026548:	83 ec 0c             	sub    esp,0xc
c002654b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654f:	83 ec 08             	sub    esp,0x8
c0026552:	68 fc d5 02 c0       	push   0xc002d5fc
c0026557:	50                   	push   eax
c0026558:	e8 f9 07 ff ff       	call   c0016d56 <Timer::Timer(char const*)>
c002655d:	83 c4 10             	add    esp,0x10
c0026560:	ba 10 d6 02 c0       	mov    edx,0xc002d610
c0026565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026569:	89 10                	mov    DWORD PTR [eax],edx
c002656b:	90                   	nop
c002656c:	83 c4 0c             	add    esp,0xc
c002656f:	c3                   	ret    

c0026570 <PIT::write(int)>:
c0026570:	83 ec 10             	sub    esp,0x10
c0026573:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026577:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002657b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026581:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026585:	a3 24 2b 03 c0       	mov    ds:0xc0032b24,eax
c002658a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002658f:	99                   	cdq    
c0026590:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026594:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026598:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002659f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00265a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00265a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00265ad:	ee                   	out    dx,al
c00265ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265b2:	0f b6 c0             	movzx  eax,al
c00265b5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00265bc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00265c0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00265c4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00265c9:	ee                   	out    dx,al
c00265ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265ce:	c1 f8 08             	sar    eax,0x8
c00265d1:	0f b6 c0             	movzx  eax,al
c00265d4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00265db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00265df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00265e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00265e8:	ee                   	out    dx,al
c00265e9:	90                   	nop
c00265ea:	83 c4 10             	add    esp,0x10
c00265ed:	c3                   	ret    

c00265ee <pitHandler(regs*, void*)>:
c00265ee:	83 ec 0c             	sub    esp,0xc
c00265f1:	a1 24 2b 03 c0       	mov    eax,ds:0xc0032b24
c00265f6:	99                   	cdq    
c00265f7:	52                   	push   edx
c00265f8:	50                   	push   eax
c00265f9:	6a 00                	push   0x0
c00265fb:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026600:	e8 b7 04 00 00       	call   c0026abc <__udivdi3>
c0026605:	83 c4 10             	add    esp,0x10
c0026608:	83 ec 08             	sub    esp,0x8
c002660b:	52                   	push   edx
c002660c:	50                   	push   eax
c002660d:	e8 d3 07 ff ff       	call   c0016de5 <timerHandler(unsigned long long)>
c0026612:	83 c4 10             	add    esp,0x10
c0026615:	90                   	nop
c0026616:	83 c4 0c             	add    esp,0xc
c0026619:	c3                   	ret    

c002661a <PIT::open(int, int, void*)>:
c002661a:	83 ec 0c             	sub    esp,0xc
c002661d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026621:	8b 00                	mov    eax,DWORD PTR [eax]
c0026623:	83 c0 24             	add    eax,0x24
c0026626:	8b 00                	mov    eax,DWORD PTR [eax]
c0026628:	83 ec 08             	sub    esp,0x8
c002662b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002662f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026633:	ff d0                	call   eax
c0026635:	83 c4 10             	add    esp,0x10
c0026638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663c:	83 ec 0c             	sub    esp,0xc
c002663f:	6a 00                	push   0x0
c0026641:	6a 01                	push   0x1
c0026643:	68 ee 65 02 c0       	push   0xc00265ee
c0026648:	6a 00                	push   0x0
c002664a:	50                   	push   eax
c002664b:	e8 62 dd fe ff       	call   c00143b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026650:	83 c4 20             	add    esp,0x20
c0026653:	89 c2                	mov    edx,eax
c0026655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026659:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002665f:	b8 00 00 00 00       	mov    eax,0x0
c0026664:	83 c4 0c             	add    esp,0xc
c0026667:	c3                   	ret    

c0026668 <PIT::close(int, int, void*)>:
c0026668:	83 ec 0c             	sub    esp,0xc
c002666b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002667d:	6a 01                	push   0x1
c002667f:	68 ee 65 02 c0       	push   0xc00265ee
c0026684:	6a 00                	push   0x0
c0026686:	50                   	push   eax
c0026687:	e8 64 dd fe ff       	call   c00143f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002668c:	83 c4 10             	add    esp,0x10
c002668f:	b8 00 00 00 00       	mov    eax,0x0
c0026694:	83 c4 0c             	add    esp,0xc
c0026697:	c3                   	ret    

c0026698 <PIT::PIT()>:
c0026698:	83 ec 0c             	sub    esp,0xc
c002669b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669f:	83 ec 08             	sub    esp,0x8
c00266a2:	68 38 d6 02 c0       	push   0xc002d638
c00266a7:	50                   	push   eax
c00266a8:	e8 a9 06 ff ff       	call   c0016d56 <Timer::Timer(char const*)>
c00266ad:	83 c4 10             	add    esp,0x10
c00266b0:	ba 60 d6 02 c0       	mov    edx,0xc002d660
c00266b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b9:	89 10                	mov    DWORD PTR [eax],edx
c00266bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266c5:	0f b6 d0             	movzx  edx,al
c00266c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00266d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266dd:	0f b6 d0             	movzx  edx,al
c00266e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00266e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266f3:	8d 50 01             	lea    edx,[eax+0x1]
c00266f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266fa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026700:	0f b6 d0             	movzx  edx,al
c0026703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026707:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002670b:	83 e1 3f             	and    ecx,0x3f
c002670e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026712:	90                   	nop
c0026713:	83 c4 0c             	add    esp,0xc
c0026716:	c3                   	ret    
c0026717:	66 90                	xchg   ax,ax
c0026719:	66 90                	xchg   ax,ax
c002671b:	66 90                	xchg   ax,ax
c002671d:	66 90                	xchg   ax,ax
c002671f:	90                   	nop

c0026720 <avxDetect>:
c0026720:	b8 00 00 00 00       	mov    eax,0x0
c0026725:	c3                   	ret    

c0026726 <avxSave>:
c0026726:	c3                   	ret    

c0026727 <avxLoad>:
c0026727:	c3                   	ret    

c0026728 <avxInit>:
c0026728:	c3                   	ret    

c0026729 <avxClose>:
c0026729:	c3                   	ret    

c002672a <wouldSheSayYes>:
c002672a:	c3                   	ret    
c002672b:	49                   	dec    ecx
c002672c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026730:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026734:	75 20                	jne    c0026756 <sseDetect.noSSE+0x1>
c0026736:	4e                   	dec    esi
c0026737:	79 61                	jns    c002679a <x87Detect+0x14>
c0026739:	68 2e 2e 2e 00       	push   0x2e2e2e
c002673e:	66 90                	xchg   ax,ax

c0026740 <absolutelyNoChanceInHell>:
c0026740:	b8 01 00 00 00       	mov    eax,0x1
c0026745:	0f a2                	cpuid  
c0026747:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002674d:	74 06                	je     c0026755 <sseDetect.noSSE>
c002674f:	b8 01 00 00 00       	mov    eax,0x1
c0026754:	c3                   	ret    

c0026755 <sseDetect.noSSE>:
c0026755:	31 c0                	xor    eax,eax
c0026757:	c3                   	ret    

c0026758 <sseSave>:
c0026758:	0f ae 44 24 08       	fxsave [esp+0x8]
c002675d:	c3                   	ret    

c002675e <sseLoad>:
c002675e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026763:	c3                   	ret    

c0026764 <sseInit>:
c0026764:	e8 43 00 00 00       	call   c00267ac <x87Init>
c0026769:	0f 20 e0             	mov    eax,cr4
c002676c:	66 0d 00 06          	or     ax,0x600
c0026770:	0f 22 e0             	mov    cr4,eax
c0026773:	c3                   	ret    

c0026774 <sseClose>:
c0026774:	c3                   	ret    
c0026775:	66 90                	xchg   ax,ax
c0026777:	66 90                	xchg   ax,ax
c0026779:	66 90                	xchg   ax,ax
c002677b:	66 90                	xchg   ax,ax
c002677d:	66 90                	xchg   ax,ax
c002677f:	90                   	nop

c0026780 <value_37F>:
c0026780:	7f 03                	jg     c0026785 <value_37A+0x1>

c0026782 <value_37E>:
c0026782:	7e 03                	jle    c0026787 <x87Detect+0x1>

c0026784 <value_37A>:
c0026784:	7a 03                	jp     c0026789 <x87Detect+0x3>

c0026786 <x87Detect>:
c0026786:	b8 01 00 00 00       	mov    eax,0x1
c002678b:	0f a2                	cpuid  
c002678d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026793:	74 06                	je     c002679b <x87Detect.nox87>
c0026795:	b8 01 00 00 00       	mov    eax,0x1
c002679a:	c3                   	ret    

c002679b <x87Detect.nox87>:
c002679b:	b8 00 00 00 00       	mov    eax,0x0
c00267a0:	c3                   	ret    

c00267a1 <x87Save>:
c00267a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00267a6:	c3                   	ret    

c00267a7 <x87Load>:
c00267a7:	dd 64 24 08          	frstor [esp+0x8]
c00267ab:	c3                   	ret    

c00267ac <x87Init>:
c00267ac:	9b db e3             	finit  
c00267af:	0f 20 c0             	mov    eax,cr0
c00267b2:	66 25 fb ff          	and    ax,0xfffb
c00267b6:	66 0d 22 00          	or     ax,0x22
c00267ba:	0f 22 c0             	mov    cr0,eax
c00267bd:	0f 06                	clts   
c00267bf:	d9 2d 84 67 02 c0    	fldcw  WORD PTR ds:0xc0026784
c00267c5:	c3                   	ret    

c00267c6 <x87Close>:
c00267c6:	c3                   	ret    
c00267c7:	90                   	nop

c00267c8 <__do_global_ctors_aux>:
c00267c8:	a1 0c 93 02 c0       	mov    eax,ds:0xc002930c
c00267cd:	83 f8 ff             	cmp    eax,0xffffffff
c00267d0:	74 1a                	je     c00267ec <__do_global_ctors_aux+0x24>
c00267d2:	55                   	push   ebp
c00267d3:	89 e5                	mov    ebp,esp
c00267d5:	53                   	push   ebx
c00267d6:	52                   	push   edx
c00267d7:	bb 0c 93 02 c0       	mov    ebx,0xc002930c
c00267dc:	ff d0                	call   eax
c00267de:	83 eb 04             	sub    ebx,0x4
c00267e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00267e3:	83 f8 ff             	cmp    eax,0xffffffff
c00267e6:	75 f4                	jne    c00267dc <__do_global_ctors_aux+0x14>
c00267e8:	58                   	pop    eax
c00267e9:	5b                   	pop    ebx
c00267ea:	5d                   	pop    ebp
c00267eb:	c3                   	ret    
c00267ec:	c3                   	ret    
c00267ed:	66 90                	xchg   ax,ax
c00267ef:	90                   	nop

c00267f0 <__divdi3>:
c00267f0:	55                   	push   ebp
c00267f1:	57                   	push   edi
c00267f2:	56                   	push   esi
c00267f3:	53                   	push   ebx
c00267f4:	83 ec 1c             	sub    esp,0x1c
c00267f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026802:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026806:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002680a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002680e:	85 db                	test   ebx,ebx
c0026810:	0f 88 8e 00 00 00    	js     c00268a4 <__divdi3+0xb4>
c0026816:	89 dd                	mov    ebp,ebx
c0026818:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026820:	89 d3                	mov    ebx,edx
c0026822:	85 d2                	test   edx,edx
c0026824:	79 0d                	jns    c0026833 <__divdi3+0x43>
c0026826:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002682a:	f7 d8                	neg    eax
c002682c:	83 d2 00             	adc    edx,0x0
c002682f:	f7 da                	neg    edx
c0026831:	89 d3                	mov    ebx,edx
c0026833:	89 c7                	mov    edi,eax
c0026835:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026838:	85 db                	test   ebx,ebx
c002683a:	75 48                	jne    c0026884 <__divdi3+0x94>
c002683c:	39 ef                	cmp    edi,ebp
c002683e:	76 24                	jbe    c0026864 <__divdi3+0x74>
c0026840:	89 ea                	mov    edx,ebp
c0026842:	f7 f7                	div    edi
c0026844:	89 c1                	mov    ecx,eax
c0026846:	31 f6                	xor    esi,esi
c0026848:	89 c8                	mov    eax,ecx
c002684a:	89 f2                	mov    edx,esi
c002684c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026850:	85 c9                	test   ecx,ecx
c0026852:	74 07                	je     c002685b <__divdi3+0x6b>
c0026854:	f7 d8                	neg    eax
c0026856:	83 d2 00             	adc    edx,0x0
c0026859:	f7 da                	neg    edx
c002685b:	83 c4 1c             	add    esp,0x1c
c002685e:	5b                   	pop    ebx
c002685f:	5e                   	pop    esi
c0026860:	5f                   	pop    edi
c0026861:	5d                   	pop    ebp
c0026862:	c3                   	ret    
c0026863:	90                   	nop
c0026864:	85 ff                	test   edi,edi
c0026866:	75 0b                	jne    c0026873 <__divdi3+0x83>
c0026868:	b8 01 00 00 00       	mov    eax,0x1
c002686d:	31 d2                	xor    edx,edx
c002686f:	f7 f3                	div    ebx
c0026871:	89 c7                	mov    edi,eax
c0026873:	31 d2                	xor    edx,edx
c0026875:	89 e8                	mov    eax,ebp
c0026877:	f7 f7                	div    edi
c0026879:	89 c6                	mov    esi,eax
c002687b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002687e:	f7 f7                	div    edi
c0026880:	89 c1                	mov    ecx,eax
c0026882:	eb c4                	jmp    c0026848 <__divdi3+0x58>
c0026884:	39 eb                	cmp    ebx,ebp
c0026886:	77 3c                	ja     c00268c4 <__divdi3+0xd4>
c0026888:	0f bd f3             	bsr    esi,ebx
c002688b:	83 f6 1f             	xor    esi,0x1f
c002688e:	75 40                	jne    c00268d0 <__divdi3+0xe0>
c0026890:	39 eb                	cmp    ebx,ebp
c0026892:	72 09                	jb     c002689d <__divdi3+0xad>
c0026894:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026897:	0f 87 97 00 00 00    	ja     c0026934 <__divdi3+0x144>
c002689d:	b9 01 00 00 00       	mov    ecx,0x1
c00268a2:	eb a4                	jmp    c0026848 <__divdi3+0x58>
c00268a4:	f7 d9                	neg    ecx
c00268a6:	83 d3 00             	adc    ebx,0x0
c00268a9:	f7 db                	neg    ebx
c00268ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00268ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00268b2:	89 dd                	mov    ebp,ebx
c00268b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00268bc:	e9 5f ff ff ff       	jmp    c0026820 <__divdi3+0x30>
c00268c1:	8d 76 00             	lea    esi,[esi+0x0]
c00268c4:	31 f6                	xor    esi,esi
c00268c6:	31 c9                	xor    ecx,ecx
c00268c8:	e9 7b ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c00268cd:	8d 76 00             	lea    esi,[esi+0x0]
c00268d0:	b8 20 00 00 00       	mov    eax,0x20
c00268d5:	29 f0                	sub    eax,esi
c00268d7:	89 f1                	mov    ecx,esi
c00268d9:	d3 e3                	shl    ebx,cl
c00268db:	89 fa                	mov    edx,edi
c00268dd:	88 c1                	mov    cl,al
c00268df:	d3 ea                	shr    edx,cl
c00268e1:	09 da                	or     edx,ebx
c00268e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268e7:	89 f1                	mov    ecx,esi
c00268e9:	d3 e7                	shl    edi,cl
c00268eb:	89 eb                	mov    ebx,ebp
c00268ed:	88 c1                	mov    cl,al
c00268ef:	d3 eb                	shr    ebx,cl
c00268f1:	89 f1                	mov    ecx,esi
c00268f3:	d3 e5                	shl    ebp,cl
c00268f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268f8:	88 c1                	mov    cl,al
c00268fa:	d3 ea                	shr    edx,cl
c00268fc:	09 d5                	or     ebp,edx
c00268fe:	89 e8                	mov    eax,ebp
c0026900:	89 da                	mov    edx,ebx
c0026902:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026906:	89 d3                	mov    ebx,edx
c0026908:	89 c5                	mov    ebp,eax
c002690a:	f7 e7                	mul    edi
c002690c:	39 d3                	cmp    ebx,edx
c002690e:	72 18                	jb     c0026928 <__divdi3+0x138>
c0026910:	74 0a                	je     c002691c <__divdi3+0x12c>
c0026912:	89 e9                	mov    ecx,ebp
c0026914:	31 f6                	xor    esi,esi
c0026916:	e9 2d ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c002691b:	90                   	nop
c002691c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002691f:	89 f1                	mov    ecx,esi
c0026921:	d3 e7                	shl    edi,cl
c0026923:	39 c7                	cmp    edi,eax
c0026925:	73 eb                	jae    c0026912 <__divdi3+0x122>
c0026927:	90                   	nop
c0026928:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002692b:	31 f6                	xor    esi,esi
c002692d:	e9 16 ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c0026932:	66 90                	xchg   ax,ax
c0026934:	31 c9                	xor    ecx,ecx
c0026936:	e9 0d ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c002693b:	90                   	nop

c002693c <__moddi3>:
c002693c:	55                   	push   ebp
c002693d:	57                   	push   edi
c002693e:	56                   	push   esi
c002693f:	53                   	push   ebx
c0026940:	83 ec 2c             	sub    esp,0x2c
c0026943:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026947:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002694b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002694f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026953:	85 db                	test   ebx,ebx
c0026955:	0f 88 85 00 00 00    	js     c00269e0 <__moddi3+0xa4>
c002695b:	89 de                	mov    esi,ebx
c002695d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026965:	89 d7                	mov    edi,edx
c0026967:	85 d2                	test   edx,edx
c0026969:	79 09                	jns    c0026974 <__moddi3+0x38>
c002696b:	f7 d8                	neg    eax
c002696d:	83 d2 00             	adc    edx,0x0
c0026970:	f7 da                	neg    edx
c0026972:	89 d7                	mov    edi,edx
c0026974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026978:	89 cd                	mov    ebp,ecx
c002697a:	85 ff                	test   edi,edi
c002697c:	75 52                	jne    c00269d0 <__moddi3+0x94>
c002697e:	89 c3                	mov    ebx,eax
c0026980:	39 f0                	cmp    eax,esi
c0026982:	76 24                	jbe    c00269a8 <__moddi3+0x6c>
c0026984:	89 c8                	mov    eax,ecx
c0026986:	89 f2                	mov    edx,esi
c0026988:	f7 f3                	div    ebx
c002698a:	89 d6                	mov    esi,edx
c002698c:	89 f0                	mov    eax,esi
c002698e:	31 d2                	xor    edx,edx
c0026990:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026994:	85 c9                	test   ecx,ecx
c0026996:	74 07                	je     c002699f <__moddi3+0x63>
c0026998:	f7 d8                	neg    eax
c002699a:	83 d2 00             	adc    edx,0x0
c002699d:	f7 da                	neg    edx
c002699f:	83 c4 2c             	add    esp,0x2c
c00269a2:	5b                   	pop    ebx
c00269a3:	5e                   	pop    esi
c00269a4:	5f                   	pop    edi
c00269a5:	5d                   	pop    ebp
c00269a6:	c3                   	ret    
c00269a7:	90                   	nop
c00269a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00269ac:	85 db                	test   ebx,ebx
c00269ae:	75 0d                	jne    c00269bd <__moddi3+0x81>
c00269b0:	b8 01 00 00 00       	mov    eax,0x1
c00269b5:	31 d2                	xor    edx,edx
c00269b7:	f7 f7                	div    edi
c00269b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00269bd:	89 f0                	mov    eax,esi
c00269bf:	31 d2                	xor    edx,edx
c00269c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269c5:	f7 f7                	div    edi
c00269c7:	89 e8                	mov    eax,ebp
c00269c9:	f7 f7                	div    edi
c00269cb:	89 d6                	mov    esi,edx
c00269cd:	eb bd                	jmp    c002698c <__moddi3+0x50>
c00269cf:	90                   	nop
c00269d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269d4:	39 f7                	cmp    edi,esi
c00269d6:	76 20                	jbe    c00269f8 <__moddi3+0xbc>
c00269d8:	89 c8                	mov    eax,ecx
c00269da:	89 f2                	mov    edx,esi
c00269dc:	eb b2                	jmp    c0026990 <__moddi3+0x54>
c00269de:	66 90                	xchg   ax,ax
c00269e0:	f7 d9                	neg    ecx
c00269e2:	83 d3 00             	adc    ebx,0x0
c00269e5:	f7 db                	neg    ebx
c00269e7:	89 de                	mov    esi,ebx
c00269e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269f1:	e9 6f ff ff ff       	jmp    c0026965 <__moddi3+0x29>
c00269f6:	66 90                	xchg   ax,ax
c00269f8:	0f bd c7             	bsr    eax,edi
c00269fb:	83 f0 1f             	xor    eax,0x1f
c00269fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026a02:	75 24                	jne    c0026a28 <__moddi3+0xec>
c0026a04:	39 f7                	cmp    edi,esi
c0026a06:	72 06                	jb     c0026a0e <__moddi3+0xd2>
c0026a08:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026a0c:	77 0c                	ja     c0026a1a <__moddi3+0xde>
c0026a0e:	89 e9                	mov    ecx,ebp
c0026a10:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026a14:	19 fe                	sbb    esi,edi
c0026a16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a1e:	89 f2                	mov    edx,esi
c0026a20:	e9 6b ff ff ff       	jmp    c0026990 <__moddi3+0x54>
c0026a25:	8d 76 00             	lea    esi,[esi+0x0]
c0026a28:	b8 20 00 00 00       	mov    eax,0x20
c0026a2d:	89 c2                	mov    edx,eax
c0026a2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a33:	29 da                	sub    edx,ebx
c0026a35:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a39:	88 d9                	mov    cl,bl
c0026a3b:	d3 e7                	shl    edi,cl
c0026a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a41:	88 d1                	mov    cl,dl
c0026a43:	d3 e8                	shr    eax,cl
c0026a45:	09 c7                	or     edi,eax
c0026a47:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a4b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a4f:	89 d8                	mov    eax,ebx
c0026a51:	88 d9                	mov    cl,bl
c0026a53:	d3 e7                	shl    edi,cl
c0026a55:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a59:	89 f3                	mov    ebx,esi
c0026a5b:	88 d1                	mov    cl,dl
c0026a5d:	d3 eb                	shr    ebx,cl
c0026a5f:	89 c7                	mov    edi,eax
c0026a61:	88 c1                	mov    cl,al
c0026a63:	d3 e6                	shl    esi,cl
c0026a65:	89 e8                	mov    eax,ebp
c0026a67:	88 d1                	mov    cl,dl
c0026a69:	d3 e8                	shr    eax,cl
c0026a6b:	09 f0                	or     eax,esi
c0026a6d:	89 f9                	mov    ecx,edi
c0026a6f:	d3 e5                	shl    ebp,cl
c0026a71:	89 da                	mov    edx,ebx
c0026a73:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a77:	89 d3                	mov    ebx,edx
c0026a79:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a7d:	89 c6                	mov    esi,eax
c0026a7f:	89 d1                	mov    ecx,edx
c0026a81:	39 d3                	cmp    ebx,edx
c0026a83:	72 27                	jb     c0026aac <__moddi3+0x170>
c0026a85:	74 21                	je     c0026aa8 <__moddi3+0x16c>
c0026a87:	29 f5                	sub    ebp,esi
c0026a89:	19 cb                	sbb    ebx,ecx
c0026a8b:	89 de                	mov    esi,ebx
c0026a8d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a91:	d3 e6                	shl    esi,cl
c0026a93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a97:	89 f9                	mov    ecx,edi
c0026a99:	d3 ed                	shr    ebp,cl
c0026a9b:	09 ee                	or     esi,ebp
c0026a9d:	89 f0                	mov    eax,esi
c0026a9f:	d3 eb                	shr    ebx,cl
c0026aa1:	89 da                	mov    edx,ebx
c0026aa3:	e9 e8 fe ff ff       	jmp    c0026990 <__moddi3+0x54>
c0026aa8:	39 c5                	cmp    ebp,eax
c0026aaa:	73 db                	jae    c0026a87 <__moddi3+0x14b>
c0026aac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026ab0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026ab4:	89 d1                	mov    ecx,edx
c0026ab6:	89 c6                	mov    esi,eax
c0026ab8:	eb cd                	jmp    c0026a87 <__moddi3+0x14b>
c0026aba:	66 90                	xchg   ax,ax

c0026abc <__udivdi3>:
c0026abc:	55                   	push   ebp
c0026abd:	57                   	push   edi
c0026abe:	56                   	push   esi
c0026abf:	53                   	push   ebx
c0026ac0:	83 ec 1c             	sub    esp,0x1c
c0026ac3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026ac7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026acb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026acf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ad3:	85 d2                	test   edx,edx
c0026ad5:	75 41                	jne    c0026b18 <__udivdi3+0x5c>
c0026ad7:	39 f7                	cmp    edi,esi
c0026ad9:	76 15                	jbe    c0026af0 <__udivdi3+0x34>
c0026adb:	89 e8                	mov    eax,ebp
c0026add:	89 f2                	mov    edx,esi
c0026adf:	f7 f7                	div    edi
c0026ae1:	31 db                	xor    ebx,ebx
c0026ae3:	89 da                	mov    edx,ebx
c0026ae5:	83 c4 1c             	add    esp,0x1c
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5e                   	pop    esi
c0026aea:	5f                   	pop    edi
c0026aeb:	5d                   	pop    ebp
c0026aec:	c3                   	ret    
c0026aed:	8d 76 00             	lea    esi,[esi+0x0]
c0026af0:	89 f9                	mov    ecx,edi
c0026af2:	85 ff                	test   edi,edi
c0026af4:	75 0b                	jne    c0026b01 <__udivdi3+0x45>
c0026af6:	b8 01 00 00 00       	mov    eax,0x1
c0026afb:	31 d2                	xor    edx,edx
c0026afd:	f7 f7                	div    edi
c0026aff:	89 c1                	mov    ecx,eax
c0026b01:	31 d2                	xor    edx,edx
c0026b03:	89 f0                	mov    eax,esi
c0026b05:	f7 f1                	div    ecx
c0026b07:	89 c3                	mov    ebx,eax
c0026b09:	89 e8                	mov    eax,ebp
c0026b0b:	f7 f1                	div    ecx
c0026b0d:	89 da                	mov    edx,ebx
c0026b0f:	83 c4 1c             	add    esp,0x1c
c0026b12:	5b                   	pop    ebx
c0026b13:	5e                   	pop    esi
c0026b14:	5f                   	pop    edi
c0026b15:	5d                   	pop    ebp
c0026b16:	c3                   	ret    
c0026b17:	90                   	nop
c0026b18:	39 f2                	cmp    edx,esi
c0026b1a:	77 1c                	ja     c0026b38 <__udivdi3+0x7c>
c0026b1c:	0f bd da             	bsr    ebx,edx
c0026b1f:	83 f3 1f             	xor    ebx,0x1f
c0026b22:	75 24                	jne    c0026b48 <__udivdi3+0x8c>
c0026b24:	39 f2                	cmp    edx,esi
c0026b26:	72 08                	jb     c0026b30 <__udivdi3+0x74>
c0026b28:	39 ef                	cmp    edi,ebp
c0026b2a:	0f 87 84 00 00 00    	ja     c0026bb4 <__udivdi3+0xf8>
c0026b30:	b8 01 00 00 00       	mov    eax,0x1
c0026b35:	eb ac                	jmp    c0026ae3 <__udivdi3+0x27>
c0026b37:	90                   	nop
c0026b38:	31 db                	xor    ebx,ebx
c0026b3a:	31 c0                	xor    eax,eax
c0026b3c:	89 da                	mov    edx,ebx
c0026b3e:	83 c4 1c             	add    esp,0x1c
c0026b41:	5b                   	pop    ebx
c0026b42:	5e                   	pop    esi
c0026b43:	5f                   	pop    edi
c0026b44:	5d                   	pop    ebp
c0026b45:	c3                   	ret    
c0026b46:	66 90                	xchg   ax,ax
c0026b48:	b8 20 00 00 00       	mov    eax,0x20
c0026b4d:	29 d8                	sub    eax,ebx
c0026b4f:	88 d9                	mov    cl,bl
c0026b51:	d3 e2                	shl    edx,cl
c0026b53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b57:	89 fa                	mov    edx,edi
c0026b59:	88 c1                	mov    cl,al
c0026b5b:	d3 ea                	shr    edx,cl
c0026b5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b61:	09 d1                	or     ecx,edx
c0026b63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b67:	88 d9                	mov    cl,bl
c0026b69:	d3 e7                	shl    edi,cl
c0026b6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b6f:	89 f7                	mov    edi,esi
c0026b71:	88 c1                	mov    cl,al
c0026b73:	d3 ef                	shr    edi,cl
c0026b75:	88 d9                	mov    cl,bl
c0026b77:	d3 e6                	shl    esi,cl
c0026b79:	89 ea                	mov    edx,ebp
c0026b7b:	88 c1                	mov    cl,al
c0026b7d:	d3 ea                	shr    edx,cl
c0026b7f:	09 d6                	or     esi,edx
c0026b81:	89 f0                	mov    eax,esi
c0026b83:	89 fa                	mov    edx,edi
c0026b85:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b89:	89 d7                	mov    edi,edx
c0026b8b:	89 c6                	mov    esi,eax
c0026b8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b91:	39 d7                	cmp    edi,edx
c0026b93:	72 13                	jb     c0026ba8 <__udivdi3+0xec>
c0026b95:	74 09                	je     c0026ba0 <__udivdi3+0xe4>
c0026b97:	89 f0                	mov    eax,esi
c0026b99:	31 db                	xor    ebx,ebx
c0026b9b:	e9 43 ff ff ff       	jmp    c0026ae3 <__udivdi3+0x27>
c0026ba0:	88 d9                	mov    cl,bl
c0026ba2:	d3 e5                	shl    ebp,cl
c0026ba4:	39 c5                	cmp    ebp,eax
c0026ba6:	73 ef                	jae    c0026b97 <__udivdi3+0xdb>
c0026ba8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026bab:	31 db                	xor    ebx,ebx
c0026bad:	e9 31 ff ff ff       	jmp    c0026ae3 <__udivdi3+0x27>
c0026bb2:	66 90                	xchg   ax,ax
c0026bb4:	31 c0                	xor    eax,eax
c0026bb6:	e9 28 ff ff ff       	jmp    c0026ae3 <__udivdi3+0x27>
c0026bbb:	90                   	nop

c0026bbc <__umoddi3>:
c0026bbc:	55                   	push   ebp
c0026bbd:	57                   	push   edi
c0026bbe:	56                   	push   esi
c0026bbf:	53                   	push   ebx
c0026bc0:	83 ec 1c             	sub    esp,0x1c
c0026bc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026bc7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026bcb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026bcf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026bd3:	89 da                	mov    edx,ebx
c0026bd5:	85 c0                	test   eax,eax
c0026bd7:	75 37                	jne    c0026c10 <__umoddi3+0x54>
c0026bd9:	39 df                	cmp    edi,ebx
c0026bdb:	76 13                	jbe    c0026bf0 <__umoddi3+0x34>
c0026bdd:	89 f0                	mov    eax,esi
c0026bdf:	f7 f7                	div    edi
c0026be1:	89 d0                	mov    eax,edx
c0026be3:	31 d2                	xor    edx,edx
c0026be5:	83 c4 1c             	add    esp,0x1c
c0026be8:	5b                   	pop    ebx
c0026be9:	5e                   	pop    esi
c0026bea:	5f                   	pop    edi
c0026beb:	5d                   	pop    ebp
c0026bec:	c3                   	ret    
c0026bed:	8d 76 00             	lea    esi,[esi+0x0]
c0026bf0:	89 fd                	mov    ebp,edi
c0026bf2:	85 ff                	test   edi,edi
c0026bf4:	75 0b                	jne    c0026c01 <__umoddi3+0x45>
c0026bf6:	b8 01 00 00 00       	mov    eax,0x1
c0026bfb:	31 d2                	xor    edx,edx
c0026bfd:	f7 f7                	div    edi
c0026bff:	89 c5                	mov    ebp,eax
c0026c01:	89 d8                	mov    eax,ebx
c0026c03:	31 d2                	xor    edx,edx
c0026c05:	f7 f5                	div    ebp
c0026c07:	89 f0                	mov    eax,esi
c0026c09:	f7 f5                	div    ebp
c0026c0b:	89 d0                	mov    eax,edx
c0026c0d:	eb d4                	jmp    c0026be3 <__umoddi3+0x27>
c0026c0f:	90                   	nop
c0026c10:	89 f1                	mov    ecx,esi
c0026c12:	39 d8                	cmp    eax,ebx
c0026c14:	76 0a                	jbe    c0026c20 <__umoddi3+0x64>
c0026c16:	89 f0                	mov    eax,esi
c0026c18:	83 c4 1c             	add    esp,0x1c
c0026c1b:	5b                   	pop    ebx
c0026c1c:	5e                   	pop    esi
c0026c1d:	5f                   	pop    edi
c0026c1e:	5d                   	pop    ebp
c0026c1f:	c3                   	ret    
c0026c20:	0f bd e8             	bsr    ebp,eax
c0026c23:	83 f5 1f             	xor    ebp,0x1f
c0026c26:	75 1c                	jne    c0026c44 <__umoddi3+0x88>
c0026c28:	39 d8                	cmp    eax,ebx
c0026c2a:	72 04                	jb     c0026c30 <__umoddi3+0x74>
c0026c2c:	39 f7                	cmp    edi,esi
c0026c2e:	77 08                	ja     c0026c38 <__umoddi3+0x7c>
c0026c30:	89 da                	mov    edx,ebx
c0026c32:	29 fe                	sub    esi,edi
c0026c34:	19 c2                	sbb    edx,eax
c0026c36:	89 f1                	mov    ecx,esi
c0026c38:	89 c8                	mov    eax,ecx
c0026c3a:	83 c4 1c             	add    esp,0x1c
c0026c3d:	5b                   	pop    ebx
c0026c3e:	5e                   	pop    esi
c0026c3f:	5f                   	pop    edi
c0026c40:	5d                   	pop    ebp
c0026c41:	c3                   	ret    
c0026c42:	66 90                	xchg   ax,ax
c0026c44:	ba 20 00 00 00       	mov    edx,0x20
c0026c49:	29 ea                	sub    edx,ebp
c0026c4b:	89 e9                	mov    ecx,ebp
c0026c4d:	d3 e0                	shl    eax,cl
c0026c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c53:	89 f8                	mov    eax,edi
c0026c55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c59:	88 d1                	mov    cl,dl
c0026c5b:	d3 e8                	shr    eax,cl
c0026c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c61:	09 c1                	or     ecx,eax
c0026c63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c67:	89 e9                	mov    ecx,ebp
c0026c69:	d3 e7                	shl    edi,cl
c0026c6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c6f:	89 d8                	mov    eax,ebx
c0026c71:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c75:	88 d1                	mov    cl,dl
c0026c77:	d3 e8                	shr    eax,cl
c0026c79:	89 c7                	mov    edi,eax
c0026c7b:	89 e9                	mov    ecx,ebp
c0026c7d:	d3 e3                	shl    ebx,cl
c0026c7f:	89 f0                	mov    eax,esi
c0026c81:	88 d1                	mov    cl,dl
c0026c83:	d3 e8                	shr    eax,cl
c0026c85:	09 d8                	or     eax,ebx
c0026c87:	89 e9                	mov    ecx,ebp
c0026c89:	d3 e6                	shl    esi,cl
c0026c8b:	89 f3                	mov    ebx,esi
c0026c8d:	89 fa                	mov    edx,edi
c0026c8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c93:	89 d1                	mov    ecx,edx
c0026c95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c99:	89 c6                	mov    esi,eax
c0026c9b:	89 d7                	mov    edi,edx
c0026c9d:	39 d1                	cmp    ecx,edx
c0026c9f:	72 27                	jb     c0026cc8 <__umoddi3+0x10c>
c0026ca1:	74 21                	je     c0026cc4 <__umoddi3+0x108>
c0026ca3:	89 ca                	mov    edx,ecx
c0026ca5:	29 f3                	sub    ebx,esi
c0026ca7:	19 fa                	sbb    edx,edi
c0026ca9:	89 d0                	mov    eax,edx
c0026cab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026caf:	d3 e0                	shl    eax,cl
c0026cb1:	89 e9                	mov    ecx,ebp
c0026cb3:	d3 eb                	shr    ebx,cl
c0026cb5:	09 d8                	or     eax,ebx
c0026cb7:	d3 ea                	shr    edx,cl
c0026cb9:	83 c4 1c             	add    esp,0x1c
c0026cbc:	5b                   	pop    ebx
c0026cbd:	5e                   	pop    esi
c0026cbe:	5f                   	pop    edi
c0026cbf:	5d                   	pop    ebp
c0026cc0:	c3                   	ret    
c0026cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0026cc4:	39 c3                	cmp    ebx,eax
c0026cc6:	73 db                	jae    c0026ca3 <__umoddi3+0xe7>
c0026cc8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026ccc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026cd0:	89 d7                	mov    edi,edx
c0026cd2:	89 c6                	mov    esi,eax
c0026cd4:	eb cd                	jmp    c0026ca3 <__umoddi3+0xe7>

c0026cd6 <__addsf3>:
c0026cd6:	55                   	push   ebp
c0026cd7:	89 e5                	mov    ebp,esp
c0026cd9:	57                   	push   edi
c0026cda:	56                   	push   esi
c0026cdb:	53                   	push   ebx
c0026cdc:	83 ec 08             	sub    esp,0x8
c0026cdf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ce2:	89 fa                	mov    edx,edi
c0026ce4:	89 f8                	mov    eax,edi
c0026ce6:	c1 f8 17             	sar    eax,0x17
c0026ce9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cec:	c1 e2 08             	shl    edx,0x8
c0026cef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026cf5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cf8:	89 de                	mov    esi,ebx
c0026cfa:	c1 fe 17             	sar    esi,0x17
c0026cfd:	c1 e3 08             	shl    ebx,0x8
c0026d00:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d06:	31 f0                	xor    eax,esi
c0026d08:	0f 88 3b 01 00 00    	js     c0026e49 <__addsf3+0x173>
c0026d0e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026d11:	29 f1                	sub    ecx,esi
c0026d13:	85 c9                	test   ecx,ecx
c0026d15:	7e 54                	jle    c0026d6b <__addsf3+0x95>
c0026d17:	89 f0                	mov    eax,esi
c0026d19:	84 c0                	test   al,al
c0026d1b:	75 10                	jne    c0026d2d <__addsf3+0x57>
c0026d1d:	85 db                	test   ebx,ebx
c0026d1f:	0f 84 aa 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d25:	49                   	dec    ecx
c0026d26:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d29:	74 38                	je     c0026d63 <__addsf3+0x8d>
c0026d2b:	eb 13                	jmp    c0026d40 <__addsf3+0x6a>
c0026d2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d30:	f7 d0                	not    eax
c0026d32:	84 c0                	test   al,al
c0026d34:	0f 84 95 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d3a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d40:	83 f9 1f             	cmp    ecx,0x1f
c0026d43:	0f 8f 86 02 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026d49:	89 de                	mov    esi,ebx
c0026d4b:	d3 ee                	shr    esi,cl
c0026d4d:	b8 20 00 00 00       	mov    eax,0x20
c0026d52:	29 c8                	sub    eax,ecx
c0026d54:	89 c1                	mov    ecx,eax
c0026d56:	d3 e3                	shl    ebx,cl
c0026d58:	31 c0                	xor    eax,eax
c0026d5a:	85 db                	test   ebx,ebx
c0026d5c:	0f 95 c0             	setne  al
c0026d5f:	09 f0                	or     eax,esi
c0026d61:	01 d0                	add    eax,edx
c0026d63:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d66:	e9 b6 00 00 00       	jmp    c0026e21 <__addsf3+0x14b>
c0026d6b:	74 5c                	je     c0026dc9 <__addsf3+0xf3>
c0026d6d:	89 f1                	mov    ecx,esi
c0026d6f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d72:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d75:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d79:	75 14                	jne    c0026d8f <__addsf3+0xb9>
c0026d7b:	85 d2                	test   edx,edx
c0026d7d:	0f 84 4c 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d83:	49                   	dec    ecx
c0026d84:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d87:	0f 84 94 00 00 00    	je     c0026e21 <__addsf3+0x14b>
c0026d8d:	eb 12                	jmp    c0026da1 <__addsf3+0xcb>
c0026d8f:	89 f0                	mov    eax,esi
c0026d91:	f7 d0                	not    eax
c0026d93:	84 c0                	test   al,al
c0026d95:	0f 84 34 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d9b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026da1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026da4:	83 f9 1f             	cmp    ecx,0x1f
c0026da7:	0f 8f 22 02 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026dad:	89 d7                	mov    edi,edx
c0026daf:	d3 ef                	shr    edi,cl
c0026db1:	b8 20 00 00 00       	mov    eax,0x20
c0026db6:	29 c8                	sub    eax,ecx
c0026db8:	89 c1                	mov    ecx,eax
c0026dba:	d3 e2                	shl    edx,cl
c0026dbc:	31 c0                	xor    eax,eax
c0026dbe:	85 d2                	test   edx,edx
c0026dc0:	0f 95 c0             	setne  al
c0026dc3:	09 f8                	or     eax,edi
c0026dc5:	01 d8                	add    eax,ebx
c0026dc7:	eb 58                	jmp    c0026e21 <__addsf3+0x14b>
c0026dc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dcc:	8d 70 01             	lea    esi,[eax+0x1]
c0026dcf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026dd5:	75 32                	jne    c0026e09 <__addsf3+0x133>
c0026dd7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ddb:	75 1f                	jne    c0026dfc <__addsf3+0x126>
c0026ddd:	85 d2                	test   edx,edx
c0026ddf:	0f 84 e0 01 00 00    	je     c0026fc5 <__addsf3+0x2ef>
c0026de5:	85 db                	test   ebx,ebx
c0026de7:	0f 84 e2 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026ded:	89 d0                	mov    eax,edx
c0026def:	01 d8                	add    eax,ebx
c0026df1:	0f 89 a9 01 00 00    	jns    c0026fa0 <__addsf3+0x2ca>
c0026df7:	e9 9d 01 00 00       	jmp    c0026f99 <__addsf3+0x2c3>
c0026dfc:	85 d2                	test   edx,edx
c0026dfe:	0f 85 cb 01 00 00    	jne    c0026fcf <__addsf3+0x2f9>
c0026e04:	e9 bc 01 00 00       	jmp    c0026fc5 <__addsf3+0x2ef>
c0026e09:	31 c0                	xor    eax,eax
c0026e0b:	89 f1                	mov    ecx,esi
c0026e0d:	f7 d1                	not    ecx
c0026e0f:	84 c9                	test   cl,cl
c0026e11:	0f 84 90 01 00 00    	je     c0026fa7 <__addsf3+0x2d1>
c0026e17:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e1a:	d1 e8                	shr    eax,1
c0026e1c:	e9 86 01 00 00       	jmp    c0026fa7 <__addsf3+0x2d1>
c0026e21:	85 c0                	test   eax,eax
c0026e23:	0f 89 7e 01 00 00    	jns    c0026fa7 <__addsf3+0x2d1>
c0026e29:	46                   	inc    esi
c0026e2a:	89 f2                	mov    edx,esi
c0026e2c:	f7 d2                	not    edx
c0026e2e:	84 d2                	test   dl,dl
c0026e30:	0f 84 6f 01 00 00    	je     c0026fa5 <__addsf3+0x2cf>
c0026e36:	89 c2                	mov    edx,eax
c0026e38:	83 e2 01             	and    edx,0x1
c0026e3b:	d1 e8                	shr    eax,1
c0026e3d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e42:	09 d0                	or     eax,edx
c0026e44:	e9 5e 01 00 00       	jmp    c0026fa7 <__addsf3+0x2d1>
c0026e49:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e50:	89 f0                	mov    eax,esi
c0026e52:	0f b6 c0             	movzx  eax,al
c0026e55:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e58:	29 c1                	sub    ecx,eax
c0026e5a:	85 c9                	test   ecx,ecx
c0026e5c:	7e 55                	jle    c0026eb3 <__addsf3+0x1dd>
c0026e5e:	85 c0                	test   eax,eax
c0026e60:	75 11                	jne    c0026e73 <__addsf3+0x19d>
c0026e62:	85 db                	test   ebx,ebx
c0026e64:	0f 84 65 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026e6a:	49                   	dec    ecx
c0026e6b:	75 19                	jne    c0026e86 <__addsf3+0x1b0>
c0026e6d:	89 d0                	mov    eax,edx
c0026e6f:	29 d8                	sub    eax,ebx
c0026e71:	eb 38                	jmp    c0026eab <__addsf3+0x1d5>
c0026e73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e76:	f7 d0                	not    eax
c0026e78:	84 c0                	test   al,al
c0026e7a:	0f 84 4f 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026e80:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e86:	83 f9 1f             	cmp    ecx,0x1f
c0026e89:	0f 8f 40 01 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026e8f:	89 de                	mov    esi,ebx
c0026e91:	d3 ee                	shr    esi,cl
c0026e93:	b8 20 00 00 00       	mov    eax,0x20
c0026e98:	29 c8                	sub    eax,ecx
c0026e9a:	89 c1                	mov    ecx,eax
c0026e9c:	d3 e3                	shl    ebx,cl
c0026e9e:	31 c0                	xor    eax,eax
c0026ea0:	85 db                	test   ebx,ebx
c0026ea2:	0f 95 c0             	setne  al
c0026ea5:	09 f0                	or     eax,esi
c0026ea7:	29 c2                	sub    edx,eax
c0026ea9:	89 d0                	mov    eax,edx
c0026eab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eae:	e9 af 00 00 00       	jmp    c0026f62 <__addsf3+0x28c>
c0026eb3:	74 5c                	je     c0026f11 <__addsf3+0x23b>
c0026eb5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026eb8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ebb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ebf:	75 14                	jne    c0026ed5 <__addsf3+0x1ff>
c0026ec1:	85 d2                	test   edx,edx
c0026ec3:	0f 84 06 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026ec9:	48                   	dec    eax
c0026eca:	75 1b                	jne    c0026ee7 <__addsf3+0x211>
c0026ecc:	89 d8                	mov    eax,ebx
c0026ece:	29 d0                	sub    eax,edx
c0026ed0:	e9 8d 00 00 00       	jmp    c0026f62 <__addsf3+0x28c>
c0026ed5:	89 f1                	mov    ecx,esi
c0026ed7:	f7 d1                	not    ecx
c0026ed9:	84 c9                	test   cl,cl
c0026edb:	0f 84 ee 00 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026ee1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ee7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eea:	83 f8 1f             	cmp    eax,0x1f
c0026eed:	0f 8f dc 00 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026ef3:	89 d7                	mov    edi,edx
c0026ef5:	88 c1                	mov    cl,al
c0026ef7:	d3 ef                	shr    edi,cl
c0026ef9:	b9 20 00 00 00       	mov    ecx,0x20
c0026efe:	29 c1                	sub    ecx,eax
c0026f00:	d3 e2                	shl    edx,cl
c0026f02:	31 c0                	xor    eax,eax
c0026f04:	85 d2                	test   edx,edx
c0026f06:	0f 95 c0             	setne  al
c0026f09:	09 f8                	or     eax,edi
c0026f0b:	29 c3                	sub    ebx,eax
c0026f0d:	89 d8                	mov    eax,ebx
c0026f0f:	eb 51                	jmp    c0026f62 <__addsf3+0x28c>
c0026f11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f14:	40                   	inc    eax
c0026f15:	a8 fe                	test   al,0xfe
c0026f17:	75 3d                	jne    c0026f56 <__addsf3+0x280>
c0026f19:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f1d:	0f 85 a7 00 00 00    	jne    c0026fca <__addsf3+0x2f4>
c0026f23:	85 d2                	test   edx,edx
c0026f25:	75 12                	jne    c0026f39 <__addsf3+0x263>
c0026f27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f2a:	85 db                	test   ebx,ebx
c0026f2c:	0f 85 9d 00 00 00    	jne    c0026fcf <__addsf3+0x2f9>
c0026f32:	31 ff                	xor    edi,edi
c0026f34:	e9 96 00 00 00       	jmp    c0026fcf <__addsf3+0x2f9>
c0026f39:	85 db                	test   ebx,ebx
c0026f3b:	0f 84 8e 00 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026f41:	89 d0                	mov    eax,edx
c0026f43:	29 d8                	sub    eax,ebx
c0026f45:	79 06                	jns    c0026f4d <__addsf3+0x277>
c0026f47:	89 d8                	mov    eax,ebx
c0026f49:	29 d0                	sub    eax,edx
c0026f4b:	eb 5a                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026f4d:	bf 00 00 00 00       	mov    edi,0x0
c0026f52:	74 7b                	je     c0026fcf <__addsf3+0x2f9>
c0026f54:	eb 4a                	jmp    c0026fa0 <__addsf3+0x2ca>
c0026f56:	89 d0                	mov    eax,edx
c0026f58:	29 d8                	sub    eax,ebx
c0026f5a:	79 12                	jns    c0026f6e <__addsf3+0x298>
c0026f5c:	89 d8                	mov    eax,ebx
c0026f5e:	29 d0                	sub    eax,edx
c0026f60:	eb 09                	jmp    c0026f6b <__addsf3+0x295>
c0026f62:	85 c0                	test   eax,eax
c0026f64:	79 41                	jns    c0026fa7 <__addsf3+0x2d1>
c0026f66:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f6b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f6e:	31 f6                	xor    esi,esi
c0026f70:	85 c0                	test   eax,eax
c0026f72:	74 33                	je     c0026fa7 <__addsf3+0x2d1>
c0026f74:	0f bd c8             	bsr    ecx,eax
c0026f77:	83 f1 1f             	xor    ecx,0x1f
c0026f7a:	d3 e0                	shl    eax,cl
c0026f7c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f80:	39 ca                	cmp    edx,ecx
c0026f82:	7f 10                	jg     c0026f94 <__addsf3+0x2be>
c0026f84:	29 d1                	sub    ecx,edx
c0026f86:	41                   	inc    ecx
c0026f87:	d3 e8                	shr    eax,cl
c0026f89:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f8c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f92:	eb 13                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026f94:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f97:	29 ce                	sub    esi,ecx
c0026f99:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f9e:	eb 07                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026fa0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fa3:	eb 02                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026fa5:	31 c0                	xor    eax,eax
c0026fa7:	89 c2                	mov    edx,eax
c0026fa9:	c1 ea 08             	shr    edx,0x8
c0026fac:	a8 7f                	test   al,0x7f
c0026fae:	0f 95 c1             	setne  cl
c0026fb1:	09 d1                	or     ecx,edx
c0026fb3:	83 e1 01             	and    ecx,0x1
c0026fb6:	c1 e8 07             	shr    eax,0x7
c0026fb9:	21 c8                	and    eax,ecx
c0026fbb:	c1 e6 17             	shl    esi,0x17
c0026fbe:	09 d6                	or     esi,edx
c0026fc0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026fc3:	eb 0a                	jmp    c0026fcf <__addsf3+0x2f9>
c0026fc5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fc8:	eb 05                	jmp    c0026fcf <__addsf3+0x2f9>
c0026fca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026fcf:	89 f8                	mov    eax,edi
c0026fd1:	5a                   	pop    edx
c0026fd2:	59                   	pop    ecx
c0026fd3:	5b                   	pop    ebx
c0026fd4:	5e                   	pop    esi
c0026fd5:	5f                   	pop    edi
c0026fd6:	5d                   	pop    ebp
c0026fd7:	c3                   	ret    

c0026fd8 <__subsf3>:
c0026fd8:	55                   	push   ebp
c0026fd9:	89 e5                	mov    ebp,esp
c0026fdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fde:	05 00 00 00 80       	add    eax,0x80000000
c0026fe3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026fe6:	5d                   	pop    ebp
c0026fe7:	e9 ea fc ff ff       	jmp    c0026cd6 <__addsf3>

c0026fec <__negsf2>:
c0026fec:	55                   	push   ebp
c0026fed:	89 e5                	mov    ebp,esp
c0026fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ff2:	05 00 00 00 80       	add    eax,0x80000000
c0026ff7:	5d                   	pop    ebp
c0026ff8:	c3                   	ret    

c0026ff9 <__mulsf3>:
c0026ff9:	55                   	push   ebp
c0026ffa:	89 e5                	mov    ebp,esp
c0026ffc:	57                   	push   edi
c0026ffd:	56                   	push   esi
c0026ffe:	53                   	push   ebx
c0026fff:	83 ec 1c             	sub    esp,0x1c
c0027002:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027005:	89 f0                	mov    eax,esi
c0027007:	89 f1                	mov    ecx,esi
c0027009:	c1 f9 17             	sar    ecx,0x17
c002700c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002700f:	c1 e0 08             	shl    eax,0x8
c0027012:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027017:	89 c1                	mov    ecx,eax
c0027019:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002701c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002701f:	89 c7                	mov    edi,eax
c0027021:	c1 ff 17             	sar    edi,0x17
c0027024:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027028:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002702b:	89 f8                	mov    eax,edi
c002702d:	0f b6 c0             	movzx  eax,al
c0027030:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027033:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027037:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002703a:	42                   	inc    edx
c002703b:	80 e2 fe             	and    dl,0xfe
c002703e:	75 7b                	jne    c00270bb <__mulsf3+0xc2>
c0027040:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027044:	74 54                	je     c002709a <__mulsf3+0xa1>
c0027046:	85 c9                	test   ecx,ecx
c0027048:	0f 85 64 01 00 00    	jne    c00271b2 <__mulsf3+0x1b9>
c002704e:	8d 57 01             	lea    edx,[edi+0x1]
c0027051:	80 e2 fe             	and    dl,0xfe
c0027054:	75 1f                	jne    c0027075 <__mulsf3+0x7c>
c0027056:	85 c0                	test   eax,eax
c0027058:	b8 00 00 00 00       	mov    eax,0x0
c002705d:	74 29                	je     c0027088 <__mulsf3+0x8f>
c002705f:	53                   	push   ebx
c0027060:	53                   	push   ebx
c0027061:	50                   	push   eax
c0027062:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027065:	e8 96 05 00 00       	call   c0027600 <__nesf2>
c002706a:	83 c4 10             	add    esp,0x10
c002706d:	85 c0                	test   eax,eax
c002706f:	0f 85 3a 01 00 00    	jne    c00271af <__mulsf3+0x1b6>
c0027075:	85 ff                	test   edi,edi
c0027077:	0f 89 35 01 00 00    	jns    c00271b2 <__mulsf3+0x1b9>
c002707d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027083:	e9 2a 01 00 00       	jmp    c00271b2 <__mulsf3+0x1b9>
c0027088:	51                   	push   ecx
c0027089:	51                   	push   ecx
c002708a:	50                   	push   eax
c002708b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002708e:	e8 6d 05 00 00       	call   c0027600 <__nesf2>
c0027093:	83 c4 10             	add    esp,0x10
c0027096:	85 c0                	test   eax,eax
c0027098:	eb 15                	jmp    c00270af <__mulsf3+0xb6>
c002709a:	85 c9                	test   ecx,ecx
c002709c:	74 0b                	je     c00270a9 <__mulsf3+0xb0>
c002709e:	8d 53 ff             	lea    edx,[ebx-0x1]
c00270a1:	01 c9                	add    ecx,ecx
c00270a3:	78 16                	js     c00270bb <__mulsf3+0xc2>
c00270a5:	89 d3                	mov    ebx,edx
c00270a7:	eb f5                	jmp    c002709e <__mulsf3+0xa5>
c00270a9:	89 f8                	mov    eax,edi
c00270ab:	f7 d0                	not    eax
c00270ad:	84 c0                	test   al,al
c00270af:	75 c4                	jne    c0027075 <__mulsf3+0x7c>
c00270b1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00270b6:	e9 f7 00 00 00       	jmp    c00271b2 <__mulsf3+0x1b9>
c00270bb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00270be:	c1 e6 08             	shl    esi,0x8
c00270c1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00270c7:	8d 57 01             	lea    edx,[edi+0x1]
c00270ca:	80 e2 fe             	and    dl,0xfe
c00270cd:	75 63                	jne    c0027132 <__mulsf3+0x139>
c00270cf:	85 c0                	test   eax,eax
c00270d1:	74 2f                	je     c0027102 <__mulsf3+0x109>
c00270d3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270d7:	0f 89 d2 00 00 00    	jns    c00271af <__mulsf3+0x1b6>
c00270dd:	52                   	push   edx
c00270de:	52                   	push   edx
c00270df:	6a 00                	push   0x0
c00270e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270e4:	e8 dc 04 00 00       	call   c00275c5 <__eqsf2>
c00270e9:	83 c4 10             	add    esp,0x10
c00270ec:	85 c0                	test   eax,eax
c00270ee:	0f 85 bb 00 00 00    	jne    c00271af <__mulsf3+0x1b6>
c00270f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270f7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270fd:	e9 b0 00 00 00       	jmp    c00271b2 <__mulsf3+0x1b9>
c0027102:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027105:	50                   	push   eax
c0027106:	50                   	push   eax
c0027107:	6a 00                	push   0x0
c0027109:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002710c:	e8 b4 04 00 00       	call   c00275c5 <__eqsf2>
c0027111:	83 c4 10             	add    esp,0x10
c0027114:	85 c0                	test   eax,eax
c0027116:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027119:	75 0c                	jne    c0027127 <__mulsf3+0x12e>
c002711b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002711f:	0f 89 8a 00 00 00    	jns    c00271af <__mulsf3+0x1b6>
c0027125:	eb cd                	jmp    c00270f4 <__mulsf3+0xfb>
c0027127:	8d 43 ff             	lea    eax,[ebx-0x1]
c002712a:	01 f6                	add    esi,esi
c002712c:	78 04                	js     c0027132 <__mulsf3+0x139>
c002712e:	89 c3                	mov    ebx,eax
c0027130:	eb f5                	jmp    c0027127 <__mulsf3+0x12e>
c0027132:	89 c8                	mov    eax,ecx
c0027134:	0d 00 00 00 80       	or     eax,0x80000000
c0027139:	81 ce 00 00 00 80    	or     esi,0x80000000
c002713f:	f7 e6                	mul    esi
c0027141:	85 c0                	test   eax,eax
c0027143:	0f 95 c0             	setne  al
c0027146:	0f b6 c0             	movzx  eax,al
c0027149:	09 c2                	or     edx,eax
c002714b:	78 03                	js     c0027150 <__mulsf3+0x157>
c002714d:	01 d2                	add    edx,edx
c002714f:	4b                   	dec    ebx
c0027150:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027156:	7f 22                	jg     c002717a <__mulsf3+0x181>
c0027158:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002715e:	85 db                	test   ebx,ebx
c0027160:	7f 23                	jg     c0027185 <__mulsf3+0x18c>
c0027162:	83 fb e9             	cmp    ebx,0xffffffe9
c0027165:	7c 1a                	jl     c0027181 <__mulsf3+0x188>
c0027167:	81 ca 00 00 00 80    	or     edx,0x80000000
c002716d:	b9 01 00 00 00       	mov    ecx,0x1
c0027172:	29 d9                	sub    ecx,ebx
c0027174:	d3 ea                	shr    edx,cl
c0027176:	31 db                	xor    ebx,ebx
c0027178:	eb 0b                	jmp    c0027185 <__mulsf3+0x18c>
c002717a:	bb ff 00 00 00       	mov    ebx,0xff
c002717f:	eb 02                	jmp    c0027183 <__mulsf3+0x18a>
c0027181:	31 db                	xor    ebx,ebx
c0027183:	31 d2                	xor    edx,edx
c0027185:	89 d0                	mov    eax,edx
c0027187:	c1 e8 08             	shr    eax,0x8
c002718a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002718d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027193:	09 fb                	or     ebx,edi
c0027195:	c1 e3 17             	shl    ebx,0x17
c0027198:	09 c3                	or     ebx,eax
c002719a:	f6 c2 7f             	test   dl,0x7f
c002719d:	0f 95 c1             	setne  cl
c00271a0:	09 c8                	or     eax,ecx
c00271a2:	83 e0 01             	and    eax,0x1
c00271a5:	c1 ea 07             	shr    edx,0x7
c00271a8:	21 c2                	and    edx,eax
c00271aa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00271ad:	eb 03                	jmp    c00271b2 <__mulsf3+0x1b9>
c00271af:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00271b2:	89 f0                	mov    eax,esi
c00271b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271b7:	5b                   	pop    ebx
c00271b8:	5e                   	pop    esi
c00271b9:	5f                   	pop    edi
c00271ba:	5d                   	pop    ebp
c00271bb:	c3                   	ret    

c00271bc <__divsf3>:
c00271bc:	55                   	push   ebp
c00271bd:	89 e5                	mov    ebp,esp
c00271bf:	57                   	push   edi
c00271c0:	56                   	push   esi
c00271c1:	53                   	push   ebx
c00271c2:	83 ec 1c             	sub    esp,0x1c
c00271c5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271c8:	89 d8                	mov    eax,ebx
c00271ca:	89 d9                	mov    ecx,ebx
c00271cc:	c1 f9 17             	sar    ecx,0x17
c00271cf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271d2:	c1 e0 08             	shl    eax,0x8
c00271d5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271da:	89 c1                	mov    ecx,eax
c00271dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271e2:	89 c7                	mov    edi,eax
c00271e4:	c1 ff 17             	sar    edi,0x17
c00271e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271ee:	89 f8                	mov    eax,edi
c00271f0:	0f b6 c0             	movzx  eax,al
c00271f3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271f6:	29 c6                	sub    esi,eax
c00271f8:	83 c6 7f             	add    esi,0x7f
c00271fb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271fe:	42                   	inc    edx
c00271ff:	80 e2 fe             	and    dl,0xfe
c0027202:	0f 85 9c 00 00 00    	jne    c00272a4 <__divsf3+0xe8>
c0027208:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002720c:	74 33                	je     c0027241 <__divsf3+0x85>
c002720e:	85 c9                	test   ecx,ecx
c0027210:	0f 85 c7 01 00 00    	jne    c00273dd <__divsf3+0x221>
c0027216:	8d 57 01             	lea    edx,[edi+0x1]
c0027219:	80 e2 fe             	and    dl,0xfe
c002721c:	75 2f                	jne    c002724d <__divsf3+0x91>
c002721e:	85 c0                	test   eax,eax
c0027220:	74 2b                	je     c002724d <__divsf3+0x91>
c0027222:	51                   	push   ecx
c0027223:	51                   	push   ecx
c0027224:	6a 00                	push   0x0
c0027226:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027229:	e8 d2 03 00 00       	call   c0027600 <__nesf2>
c002722e:	83 c4 10             	add    esp,0x10
c0027231:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027234:	85 c0                	test   eax,eax
c0027236:	0f 85 a1 01 00 00    	jne    c00273dd <__divsf3+0x221>
c002723c:	e9 92 01 00 00       	jmp    c00273d3 <__divsf3+0x217>
c0027241:	85 c9                	test   ecx,ecx
c0027243:	75 1b                	jne    c0027260 <__divsf3+0xa4>
c0027245:	8d 57 01             	lea    edx,[edi+0x1]
c0027248:	80 e2 fe             	and    dl,0xfe
c002724b:	74 1e                	je     c002726b <__divsf3+0xaf>
c002724d:	85 ff                	test   edi,edi
c002724f:	0f 89 88 01 00 00    	jns    c00273dd <__divsf3+0x221>
c0027255:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002725b:	e9 7d 01 00 00       	jmp    c00273dd <__divsf3+0x221>
c0027260:	8d 56 ff             	lea    edx,[esi-0x1]
c0027263:	01 c9                	add    ecx,ecx
c0027265:	78 3d                	js     c00272a4 <__divsf3+0xe8>
c0027267:	89 d6                	mov    esi,edx
c0027269:	eb f5                	jmp    c0027260 <__divsf3+0xa4>
c002726b:	85 c0                	test   eax,eax
c002726d:	b8 00 00 00 00       	mov    eax,0x0
c0027272:	74 18                	je     c002728c <__divsf3+0xd0>
c0027274:	52                   	push   edx
c0027275:	52                   	push   edx
c0027276:	50                   	push   eax
c0027277:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002727a:	e8 81 03 00 00       	call   c0027600 <__nesf2>
c002727f:	83 c4 10             	add    esp,0x10
c0027282:	85 c0                	test   eax,eax
c0027284:	0f 85 50 01 00 00    	jne    c00273da <__divsf3+0x21e>
c002728a:	eb c1                	jmp    c002724d <__divsf3+0x91>
c002728c:	56                   	push   esi
c002728d:	56                   	push   esi
c002728e:	50                   	push   eax
c002728f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027292:	e8 69 03 00 00       	call   c0027600 <__nesf2>
c0027297:	83 c4 10             	add    esp,0x10
c002729a:	85 c0                	test   eax,eax
c002729c:	0f 84 31 01 00 00    	je     c00273d3 <__divsf3+0x217>
c00272a2:	eb a9                	jmp    c002724d <__divsf3+0x91>
c00272a4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00272a7:	c1 e3 08             	shl    ebx,0x8
c00272aa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00272b0:	8d 57 01             	lea    edx,[edi+0x1]
c00272b3:	80 e2 fe             	and    dl,0xfe
c00272b6:	75 71                	jne    c0027329 <__divsf3+0x16d>
c00272b8:	85 c0                	test   eax,eax
c00272ba:	ba 00 00 00 00       	mov    edx,0x0
c00272bf:	74 2f                	je     c00272f0 <__divsf3+0x134>
c00272c1:	51                   	push   ecx
c00272c2:	51                   	push   ecx
c00272c3:	52                   	push   edx
c00272c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272c7:	e8 f9 02 00 00       	call   c00275c5 <__eqsf2>
c00272cc:	83 c4 10             	add    esp,0x10
c00272cf:	85 c0                	test   eax,eax
c00272d1:	0f 85 03 01 00 00    	jne    c00273da <__divsf3+0x21e>
c00272d7:	31 d2                	xor    edx,edx
c00272d9:	89 d3                	mov    ebx,edx
c00272db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272de:	31 f8                	xor    eax,edi
c00272e0:	0f 89 f7 00 00 00    	jns    c00273dd <__divsf3+0x221>
c00272e6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00272eb:	e9 ed 00 00 00       	jmp    c00273dd <__divsf3+0x221>
c00272f0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272f3:	50                   	push   eax
c00272f4:	50                   	push   eax
c00272f5:	52                   	push   edx
c00272f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272f9:	e8 c7 02 00 00       	call   c00275c5 <__eqsf2>
c00272fe:	83 c4 10             	add    esp,0x10
c0027301:	85 c0                	test   eax,eax
c0027303:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027306:	75 16                	jne    c002731e <__divsf3+0x162>
c0027308:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002730b:	31 fb                	xor    ebx,edi
c002730d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027313:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027319:	e9 bf 00 00 00       	jmp    c00273dd <__divsf3+0x221>
c002731e:	8d 46 01             	lea    eax,[esi+0x1]
c0027321:	01 db                	add    ebx,ebx
c0027323:	78 04                	js     c0027329 <__divsf3+0x16d>
c0027325:	89 c6                	mov    esi,eax
c0027327:	eb f5                	jmp    c002731e <__divsf3+0x162>
c0027329:	89 c8                	mov    eax,ecx
c002732b:	0d 00 00 00 80       	or     eax,0x80000000
c0027330:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027336:	31 d2                	xor    edx,edx
c0027338:	39 d8                	cmp    eax,ebx
c002733a:	72 07                	jb     c0027343 <__divsf3+0x187>
c002733c:	29 d8                	sub    eax,ebx
c002733e:	ba 01 00 00 00       	mov    edx,0x1
c0027343:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002734a:	01 d2                	add    edx,edx
c002734c:	89 c1                	mov    ecx,eax
c002734e:	01 c0                	add    eax,eax
c0027350:	85 c9                	test   ecx,ecx
c0027352:	78 04                	js     c0027358 <__divsf3+0x19c>
c0027354:	39 c3                	cmp    ebx,eax
c0027356:	77 05                	ja     c002735d <__divsf3+0x1a1>
c0027358:	29 d8                	sub    eax,ebx
c002735a:	83 ca 01             	or     edx,0x1
c002735d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027360:	75 e8                	jne    c002734a <__divsf3+0x18e>
c0027362:	85 c0                	test   eax,eax
c0027364:	0f 95 c0             	setne  al
c0027367:	0f b6 c0             	movzx  eax,al
c002736a:	c1 e2 06             	shl    edx,0x6
c002736d:	09 c2                	or     edx,eax
c002736f:	78 03                	js     c0027374 <__divsf3+0x1b8>
c0027371:	01 d2                	add    edx,edx
c0027373:	4e                   	dec    esi
c0027374:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002737a:	7f 22                	jg     c002739e <__divsf3+0x1e2>
c002737c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027382:	85 f6                	test   esi,esi
c0027384:	7f 23                	jg     c00273a9 <__divsf3+0x1ed>
c0027386:	83 fe e9             	cmp    esi,0xffffffe9
c0027389:	7c 1a                	jl     c00273a5 <__divsf3+0x1e9>
c002738b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027391:	b9 01 00 00 00       	mov    ecx,0x1
c0027396:	29 f1                	sub    ecx,esi
c0027398:	d3 ea                	shr    edx,cl
c002739a:	31 f6                	xor    esi,esi
c002739c:	eb 0b                	jmp    c00273a9 <__divsf3+0x1ed>
c002739e:	be ff 00 00 00       	mov    esi,0xff
c00273a3:	eb 02                	jmp    c00273a7 <__divsf3+0x1eb>
c00273a5:	31 f6                	xor    esi,esi
c00273a7:	31 d2                	xor    edx,edx
c00273a9:	89 d0                	mov    eax,edx
c00273ab:	c1 e8 08             	shr    eax,0x8
c00273ae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00273b1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00273b7:	09 fe                	or     esi,edi
c00273b9:	c1 e6 17             	shl    esi,0x17
c00273bc:	09 c6                	or     esi,eax
c00273be:	f6 c2 7f             	test   dl,0x7f
c00273c1:	0f 95 c1             	setne  cl
c00273c4:	09 c8                	or     eax,ecx
c00273c6:	83 e0 01             	and    eax,0x1
c00273c9:	c1 ea 07             	shr    edx,0x7
c00273cc:	21 c2                	and    edx,eax
c00273ce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00273d1:	eb 0a                	jmp    c00273dd <__divsf3+0x221>
c00273d3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00273d8:	eb 03                	jmp    c00273dd <__divsf3+0x221>
c00273da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273dd:	89 d8                	mov    eax,ebx
c00273df:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273e2:	5b                   	pop    ebx
c00273e3:	5e                   	pop    esi
c00273e4:	5f                   	pop    edi
c00273e5:	5d                   	pop    ebp
c00273e6:	c3                   	ret    

c00273e7 <__floatsisf>:
c00273e7:	55                   	push   ebp
c00273e8:	89 e5                	mov    ebp,esp
c00273ea:	53                   	push   ebx
c00273eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ee:	85 d2                	test   edx,edx
c00273f0:	7e 2b                	jle    c002741d <__floatsisf+0x36>
c00273f2:	0f bd ca             	bsr    ecx,edx
c00273f5:	83 f1 1f             	xor    ecx,0x1f
c00273f8:	d3 e2                	shl    edx,cl
c00273fa:	89 d0                	mov    eax,edx
c00273fc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027401:	89 c3                	mov    ebx,eax
c0027403:	c1 eb 08             	shr    ebx,0x8
c0027406:	80 e2 7f             	and    dl,0x7f
c0027409:	0f 95 c2             	setne  dl
c002740c:	09 da                	or     edx,ebx
c002740e:	83 e2 01             	and    edx,0x1
c0027411:	c1 e8 07             	shr    eax,0x7
c0027414:	21 c2                	and    edx,eax
c0027416:	b8 9e 00 00 00       	mov    eax,0x9e
c002741b:	eb 32                	jmp    c002744f <__floatsisf+0x68>
c002741d:	b8 00 00 00 00       	mov    eax,0x0
c0027422:	74 34                	je     c0027458 <__floatsisf+0x71>
c0027424:	f7 da                	neg    edx
c0027426:	0f bd ca             	bsr    ecx,edx
c0027429:	83 f1 1f             	xor    ecx,0x1f
c002742c:	d3 e2                	shl    edx,cl
c002742e:	89 d0                	mov    eax,edx
c0027430:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027435:	89 c3                	mov    ebx,eax
c0027437:	c1 eb 08             	shr    ebx,0x8
c002743a:	80 e2 7f             	and    dl,0x7f
c002743d:	0f 95 c2             	setne  dl
c0027440:	09 da                	or     edx,ebx
c0027442:	83 e2 01             	and    edx,0x1
c0027445:	c1 e8 07             	shr    eax,0x7
c0027448:	21 c2                	and    edx,eax
c002744a:	b8 9e 01 00 00       	mov    eax,0x19e
c002744f:	29 c8                	sub    eax,ecx
c0027451:	c1 e0 17             	shl    eax,0x17
c0027454:	09 d8                	or     eax,ebx
c0027456:	01 d0                	add    eax,edx
c0027458:	5b                   	pop    ebx
c0027459:	5d                   	pop    ebp
c002745a:	c3                   	ret    

c002745b <__floatunsisf>:
c002745b:	55                   	push   ebp
c002745c:	89 e5                	mov    ebp,esp
c002745e:	53                   	push   ebx
c002745f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027462:	31 c0                	xor    eax,eax
c0027464:	85 d2                	test   edx,edx
c0027466:	74 32                	je     c002749a <__floatunsisf+0x3f>
c0027468:	0f bd ca             	bsr    ecx,edx
c002746b:	83 f1 1f             	xor    ecx,0x1f
c002746e:	d3 e2                	shl    edx,cl
c0027470:	89 d0                	mov    eax,edx
c0027472:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027477:	89 c3                	mov    ebx,eax
c0027479:	c1 eb 08             	shr    ebx,0x8
c002747c:	80 e2 7f             	and    dl,0x7f
c002747f:	0f 95 c2             	setne  dl
c0027482:	09 da                	or     edx,ebx
c0027484:	83 e2 01             	and    edx,0x1
c0027487:	c1 e8 07             	shr    eax,0x7
c002748a:	21 c2                	and    edx,eax
c002748c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027491:	29 c8                	sub    eax,ecx
c0027493:	c1 e0 17             	shl    eax,0x17
c0027496:	09 d8                	or     eax,ebx
c0027498:	01 d0                	add    eax,edx
c002749a:	5b                   	pop    ebx
c002749b:	5d                   	pop    ebp
c002749c:	c3                   	ret    

c002749d <__fixsfsi>:
c002749d:	55                   	push   ebp
c002749e:	89 e5                	mov    ebp,esp
c00274a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274a3:	89 d1                	mov    ecx,edx
c00274a5:	c1 e1 08             	shl    ecx,0x8
c00274a8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00274ae:	c1 fa 17             	sar    edx,0x17
c00274b1:	78 1c                	js     c00274cf <__fixsfsi+0x32>
c00274b3:	83 ea 7f             	sub    edx,0x7f
c00274b6:	31 c0                	xor    eax,eax
c00274b8:	83 fa 1e             	cmp    edx,0x1e
c00274bb:	77 40                	ja     c00274fd <__fixsfsi+0x60>
c00274bd:	89 c8                	mov    eax,ecx
c00274bf:	0d 00 00 00 80       	or     eax,0x80000000
c00274c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274c9:	29 d1                	sub    ecx,edx
c00274cb:	d3 e8                	shr    eax,cl
c00274cd:	eb 2e                	jmp    c00274fd <__fixsfsi+0x60>
c00274cf:	31 c0                	xor    eax,eax
c00274d1:	81 c2 81 00 00 00    	add    edx,0x81
c00274d7:	78 24                	js     c00274fd <__fixsfsi+0x60>
c00274d9:	83 fa 1e             	cmp    edx,0x1e
c00274dc:	7e 09                	jle    c00274e7 <__fixsfsi+0x4a>
c00274de:	83 fa 1f             	cmp    edx,0x1f
c00274e1:	75 18                	jne    c00274fb <__fixsfsi+0x5e>
c00274e3:	85 c9                	test   ecx,ecx
c00274e5:	75 14                	jne    c00274fb <__fixsfsi+0x5e>
c00274e7:	89 c8                	mov    eax,ecx
c00274e9:	0d 00 00 00 80       	or     eax,0x80000000
c00274ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274f3:	29 d1                	sub    ecx,edx
c00274f5:	d3 e8                	shr    eax,cl
c00274f7:	f7 d8                	neg    eax
c00274f9:	eb 02                	jmp    c00274fd <__fixsfsi+0x60>
c00274fb:	31 c0                	xor    eax,eax
c00274fd:	5d                   	pop    ebp
c00274fe:	c3                   	ret    

c00274ff <__fixunssfsi>:
c00274ff:	55                   	push   ebp
c0027500:	89 e5                	mov    ebp,esp
c0027502:	53                   	push   ebx
c0027503:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027506:	89 d3                	mov    ebx,edx
c0027508:	c1 fb 17             	sar    ebx,0x17
c002750b:	83 eb 7f             	sub    ebx,0x7f
c002750e:	31 c0                	xor    eax,eax
c0027510:	83 fb 1f             	cmp    ebx,0x1f
c0027513:	77 18                	ja     c002752d <__fixunssfsi+0x2e>
c0027515:	89 d0                	mov    eax,edx
c0027517:	c1 e0 08             	shl    eax,0x8
c002751a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002751f:	0d 00 00 00 80       	or     eax,0x80000000
c0027524:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027529:	29 d9                	sub    ecx,ebx
c002752b:	d3 e8                	shr    eax,cl
c002752d:	5b                   	pop    ebx
c002752e:	5d                   	pop    ebp
c002752f:	c3                   	ret    

c0027530 <__cmpsf2>:
c0027530:	55                   	push   ebp
c0027531:	89 e5                	mov    ebp,esp
c0027533:	57                   	push   edi
c0027534:	56                   	push   esi
c0027535:	53                   	push   ebx
c0027536:	83 ec 24             	sub    esp,0x24
c0027539:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002753c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002753f:	e8 4f 10 00 00       	call   c0028593 <__truncdfsf2>
c0027544:	5a                   	pop    edx
c0027545:	59                   	pop    ecx
c0027546:	89 c3                	mov    ebx,eax
c0027548:	c1 e8 17             	shr    eax,0x17
c002754b:	0f b6 f0             	movzx  esi,al
c002754e:	89 d8                	mov    eax,ebx
c0027550:	c1 e8 1f             	shr    eax,0x1f
c0027553:	31 c6                	xor    esi,eax
c0027555:	c1 e3 08             	shl    ebx,0x8
c0027558:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002755b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002755e:	e8 30 10 00 00       	call   c0028593 <__truncdfsf2>
c0027563:	83 c4 10             	add    esp,0x10
c0027566:	89 c1                	mov    ecx,eax
c0027568:	c1 e9 17             	shr    ecx,0x17
c002756b:	0f b6 c9             	movzx  ecx,cl
c002756e:	89 c7                	mov    edi,eax
c0027570:	c1 ef 1f             	shr    edi,0x1f
c0027573:	89 ca                	mov    edx,ecx
c0027575:	31 fa                	xor    edx,edi
c0027577:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002757a:	c1 e0 08             	shl    eax,0x8
c002757d:	89 c2                	mov    edx,eax
c002757f:	89 d8                	mov    eax,ebx
c0027581:	09 d0                	or     eax,edx
c0027583:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027588:	09 f0                	or     eax,esi
c002758a:	75 08                	jne    c0027594 <__cmpsf2+0x64>
c002758c:	31 c0                	xor    eax,eax
c002758e:	39 f9                	cmp    ecx,edi
c0027590:	75 0c                	jne    c002759e <__cmpsf2+0x6e>
c0027592:	eb 29                	jmp    c00275bd <__cmpsf2+0x8d>
c0027594:	b8 01 00 00 00       	mov    eax,0x1
c0027599:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002759c:	7f 1f                	jg     c00275bd <__cmpsf2+0x8d>
c002759e:	83 c8 ff             	or     eax,0xffffffff
c00275a1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275a4:	7c 17                	jl     c00275bd <__cmpsf2+0x8d>
c00275a6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275ac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00275b2:	b8 01 00 00 00       	mov    eax,0x1
c00275b7:	39 d3                	cmp    ebx,edx
c00275b9:	77 02                	ja     c00275bd <__cmpsf2+0x8d>
c00275bb:	19 c0                	sbb    eax,eax
c00275bd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275c0:	5b                   	pop    ebx
c00275c1:	5e                   	pop    esi
c00275c2:	5f                   	pop    edi
c00275c3:	5d                   	pop    ebp
c00275c4:	c3                   	ret    

c00275c5 <__eqsf2>:
c00275c5:	55                   	push   ebp
c00275c6:	89 e5                	mov    ebp,esp
c00275c8:	83 ec 24             	sub    esp,0x24
c00275cb:	6a 01                	push   0x1
c00275cd:	83 ec 0c             	sub    esp,0xc
c00275d0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275d3:	e8 df 10 00 00       	call   c00286b7 <__extendsfdf2>
c00275d8:	83 c4 10             	add    esp,0x10
c00275db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275e1:	52                   	push   edx
c00275e2:	50                   	push   eax
c00275e3:	50                   	push   eax
c00275e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275e7:	e8 cb 10 00 00       	call   c00286b7 <__extendsfdf2>
c00275ec:	59                   	pop    ecx
c00275ed:	59                   	pop    ecx
c00275ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275f1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275f4:	52                   	push   edx
c00275f5:	50                   	push   eax
c00275f6:	e8 35 ff ff ff       	call   c0027530 <__cmpsf2>
c00275fb:	83 c4 20             	add    esp,0x20
c00275fe:	c9                   	leave  
c00275ff:	c3                   	ret    

c0027600 <__nesf2>:
c0027600:	eb c3                	jmp    c00275c5 <__eqsf2>

c0027602 <__gtsf2>:
c0027602:	55                   	push   ebp
c0027603:	89 e5                	mov    ebp,esp
c0027605:	83 ec 24             	sub    esp,0x24
c0027608:	6a ff                	push   0xffffffff
c002760a:	83 ec 0c             	sub    esp,0xc
c002760d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027610:	e8 a2 10 00 00       	call   c00286b7 <__extendsfdf2>
c0027615:	83 c4 10             	add    esp,0x10
c0027618:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002761b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002761e:	52                   	push   edx
c002761f:	50                   	push   eax
c0027620:	50                   	push   eax
c0027621:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027624:	e8 8e 10 00 00       	call   c00286b7 <__extendsfdf2>
c0027629:	59                   	pop    ecx
c002762a:	59                   	pop    ecx
c002762b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002762e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027631:	52                   	push   edx
c0027632:	50                   	push   eax
c0027633:	e8 f8 fe ff ff       	call   c0027530 <__cmpsf2>
c0027638:	83 c4 20             	add    esp,0x20
c002763b:	c9                   	leave  
c002763c:	c3                   	ret    

c002763d <__gesf2>:
c002763d:	eb c3                	jmp    c0027602 <__gtsf2>

c002763f <__ltsf2>:
c002763f:	eb 84                	jmp    c00275c5 <__eqsf2>

c0027641 <__lesf2>:
c0027641:	eb 82                	jmp    c00275c5 <__eqsf2>

c0027643 <__adddf3>:
c0027643:	55                   	push   ebp
c0027644:	89 e5                	mov    ebp,esp
c0027646:	57                   	push   edi
c0027647:	56                   	push   esi
c0027648:	53                   	push   ebx
c0027649:	83 ec 24             	sub    esp,0x24
c002764c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002764f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027652:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027655:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027658:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002765b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002765e:	89 c8                	mov    eax,ecx
c0027660:	89 ce                	mov    esi,ecx
c0027662:	c1 fe 14             	sar    esi,0x14
c0027665:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027668:	89 fb                	mov    ebx,edi
c002766a:	89 fa                	mov    edx,edi
c002766c:	c1 e2 0b             	shl    edx,0xb
c002766f:	c1 e0 0b             	shl    eax,0xb
c0027672:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027677:	c1 eb 15             	shr    ebx,0x15
c002767a:	09 d8                	or     eax,ebx
c002767c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002767f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027682:	c1 fe 14             	sar    esi,0x14
c0027685:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027688:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002768b:	89 f3                	mov    ebx,esi
c002768d:	c1 e3 0b             	shl    ebx,0xb
c0027690:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027693:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027696:	c1 e3 0b             	shl    ebx,0xb
c0027699:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002769f:	c1 ee 15             	shr    esi,0x15
c00276a2:	09 f3                	or     ebx,esi
c00276a4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00276a7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276aa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00276ad:	0f 88 5f 02 00 00    	js     c0027912 <__adddf3+0x2cf>
c00276b3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276b6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00276b9:	85 db                	test   ebx,ebx
c00276bb:	0f 8e c7 00 00 00    	jle    c0027788 <__adddf3+0x145>
c00276c1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00276c8:	75 1a                	jne    c00276e4 <__adddf3+0xa1>
c00276ca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276cd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276d0:	0f 84 b2 05 00 00    	je     c0027c88 <__adddf3+0x645>
c00276d6:	4b                   	dec    ebx
c00276d7:	75 23                	jne    c00276fc <__adddf3+0xb9>
c00276d9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276dc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276df:	e9 99 00 00 00       	jmp    c002777d <__adddf3+0x13a>
c00276e4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276e7:	f7 d6                	not    esi
c00276e9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ef:	0f 84 93 05 00 00    	je     c0027c88 <__adddf3+0x645>
c00276f5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276fc:	83 fb 1f             	cmp    ebx,0x1f
c00276ff:	7e 42                	jle    c0027743 <__adddf3+0x100>
c0027701:	83 fb 3f             	cmp    ebx,0x3f
c0027704:	0f 8f 7e 05 00 00    	jg     c0027c88 <__adddf3+0x645>
c002770a:	83 e3 1f             	and    ebx,0x1f
c002770d:	89 d9                	mov    ecx,ebx
c002770f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027712:	d3 ef                	shr    edi,cl
c0027714:	31 db                	xor    ebx,ebx
c0027716:	85 c9                	test   ecx,ecx
c0027718:	74 15                	je     c002772f <__adddf3+0xec>
c002771a:	be 20 00 00 00       	mov    esi,0x20
c002771f:	29 ce                	sub    esi,ecx
c0027721:	89 f1                	mov    ecx,esi
c0027723:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027726:	d3 e6                	shl    esi,cl
c0027728:	31 db                	xor    ebx,ebx
c002772a:	85 f6                	test   esi,esi
c002772c:	0f 95 c3             	setne  bl
c002772f:	31 c9                	xor    ecx,ecx
c0027731:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027735:	0f 95 c1             	setne  cl
c0027738:	09 cf                	or     edi,ecx
c002773a:	09 fb                	or     ebx,edi
c002773c:	01 da                	add    edx,ebx
c002773e:	83 d0 00             	adc    eax,0x0
c0027741:	eb 3a                	jmp    c002777d <__adddf3+0x13a>
c0027743:	bf 20 00 00 00       	mov    edi,0x20
c0027748:	29 df                	sub    edi,ebx
c002774a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002774d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027750:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027753:	d3 e6                	shl    esi,cl
c0027755:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027758:	88 d9                	mov    cl,bl
c002775a:	d3 ef                	shr    edi,cl
c002775c:	09 fe                	or     esi,edi
c002775e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027761:	88 d9                	mov    cl,bl
c0027763:	d3 ef                	shr    edi,cl
c0027765:	89 fb                	mov    ebx,edi
c0027767:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002776a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002776d:	d3 e7                	shl    edi,cl
c002776f:	85 ff                	test   edi,edi
c0027771:	0f 95 c1             	setne  cl
c0027774:	0f b6 c9             	movzx  ecx,cl
c0027777:	09 ce                	or     esi,ecx
c0027779:	01 f2                	add    edx,esi
c002777b:	11 d8                	adc    eax,ebx
c002777d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027780:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027783:	e9 52 01 00 00       	jmp    c00278da <__adddf3+0x297>
c0027788:	0f 84 d5 00 00 00    	je     c0027863 <__adddf3+0x220>
c002778e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027791:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027794:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027797:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002779a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277a1:	75 20                	jne    c00277c3 <__adddf3+0x180>
c00277a3:	89 d6                	mov    esi,edx
c00277a5:	09 c6                	or     esi,eax
c00277a7:	0f 84 db 04 00 00    	je     c0027c88 <__adddf3+0x645>
c00277ad:	4b                   	dec    ebx
c00277ae:	75 29                	jne    c00277d9 <__adddf3+0x196>
c00277b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277b6:	01 d1                	add    ecx,edx
c00277b8:	11 c6                	adc    esi,eax
c00277ba:	89 f0                	mov    eax,esi
c00277bc:	89 ca                	mov    edx,ecx
c00277be:	e9 17 01 00 00       	jmp    c00278da <__adddf3+0x297>
c00277c3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277c6:	f7 d6                	not    esi
c00277c8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277ce:	0f 84 b4 04 00 00    	je     c0027c88 <__adddf3+0x645>
c00277d4:	0d 00 00 00 80       	or     eax,0x80000000
c00277d9:	83 fb 1f             	cmp    ebx,0x1f
c00277dc:	7e 48                	jle    c0027826 <__adddf3+0x1e3>
c00277de:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277e1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277e4:	83 fb 3f             	cmp    ebx,0x3f
c00277e7:	0f 8f 9b 04 00 00    	jg     c0027c88 <__adddf3+0x645>
c00277ed:	83 e3 1f             	and    ebx,0x1f
c00277f0:	89 d9                	mov    ecx,ebx
c00277f2:	89 c7                	mov    edi,eax
c00277f4:	d3 ef                	shr    edi,cl
c00277f6:	31 db                	xor    ebx,ebx
c00277f8:	85 c9                	test   ecx,ecx
c00277fa:	74 12                	je     c002780e <__adddf3+0x1cb>
c00277fc:	be 20 00 00 00       	mov    esi,0x20
c0027801:	29 ce                	sub    esi,ecx
c0027803:	89 f1                	mov    ecx,esi
c0027805:	d3 e0                	shl    eax,cl
c0027807:	31 db                	xor    ebx,ebx
c0027809:	85 c0                	test   eax,eax
c002780b:	0f 95 c3             	setne  bl
c002780e:	31 c0                	xor    eax,eax
c0027810:	85 d2                	test   edx,edx
c0027812:	0f 95 c0             	setne  al
c0027815:	09 c7                	or     edi,eax
c0027817:	09 fb                	or     ebx,edi
c0027819:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002781c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002781f:	01 da                	add    edx,ebx
c0027821:	83 d6 00             	adc    esi,0x0
c0027824:	eb 39                	jmp    c002785f <__adddf3+0x21c>
c0027826:	be 20 00 00 00       	mov    esi,0x20
c002782b:	29 de                	sub    esi,ebx
c002782d:	89 c7                	mov    edi,eax
c002782f:	89 f1                	mov    ecx,esi
c0027831:	d3 e7                	shl    edi,cl
c0027833:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027836:	89 d7                	mov    edi,edx
c0027838:	88 d9                	mov    cl,bl
c002783a:	d3 ef                	shr    edi,cl
c002783c:	89 f9                	mov    ecx,edi
c002783e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027841:	09 cf                	or     edi,ecx
c0027843:	88 d9                	mov    cl,bl
c0027845:	d3 e8                	shr    eax,cl
c0027847:	89 f1                	mov    ecx,esi
c0027849:	d3 e2                	shl    edx,cl
c002784b:	85 d2                	test   edx,edx
c002784d:	0f 95 c2             	setne  dl
c0027850:	0f b6 d2             	movzx  edx,dl
c0027853:	09 d7                	or     edi,edx
c0027855:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027858:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002785b:	01 fa                	add    edx,edi
c002785d:	11 c6                	adc    esi,eax
c002785f:	89 f0                	mov    eax,esi
c0027861:	eb 77                	jmp    c00278da <__adddf3+0x297>
c0027863:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027866:	46                   	inc    esi
c0027867:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002786a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027870:	75 41                	jne    c00278b3 <__adddf3+0x270>
c0027872:	89 d3                	mov    ebx,edx
c0027874:	09 c3                	or     ebx,eax
c0027876:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002787d:	75 27                	jne    c00278a6 <__adddf3+0x263>
c002787f:	85 db                	test   ebx,ebx
c0027881:	0f 84 fb 03 00 00    	je     c0027c82 <__adddf3+0x63f>
c0027887:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002788a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002788d:	0f 84 f5 03 00 00    	je     c0027c88 <__adddf3+0x645>
c0027893:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027896:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027899:	85 c0                	test   eax,eax
c002789b:	0f 89 91 03 00 00    	jns    c0027c32 <__adddf3+0x5ef>
c00278a1:	e9 85 03 00 00       	jmp    c0027c2b <__adddf3+0x5e8>
c00278a6:	85 db                	test   ebx,ebx
c00278a8:	0f 85 da 03 00 00    	jne    c0027c88 <__adddf3+0x645>
c00278ae:	e9 cf 03 00 00       	jmp    c0027c82 <__adddf3+0x63f>
c00278b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278bc:	f7 d1                	not    ecx
c00278be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278c4:	0f 84 70 03 00 00    	je     c0027c3a <__adddf3+0x5f7>
c00278ca:	d1 ea                	shr    edx,1
c00278cc:	89 c1                	mov    ecx,eax
c00278ce:	c1 e1 1f             	shl    ecx,0x1f
c00278d1:	09 ca                	or     edx,ecx
c00278d3:	d1 e8                	shr    eax,1
c00278d5:	e9 6f 03 00 00       	jmp    c0027c49 <__adddf3+0x606>
c00278da:	85 c0                	test   eax,eax
c00278dc:	0f 89 67 03 00 00    	jns    c0027c49 <__adddf3+0x606>
c00278e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00278e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278e8:	f7 d1                	not    ecx
c00278ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278f0:	0f 84 44 03 00 00    	je     c0027c3a <__adddf3+0x5f7>
c00278f6:	89 d1                	mov    ecx,edx
c00278f8:	d1 e9                	shr    ecx,1
c00278fa:	83 e2 01             	and    edx,0x1
c00278fd:	09 ca                	or     edx,ecx
c00278ff:	89 c1                	mov    ecx,eax
c0027901:	c1 e1 1f             	shl    ecx,0x1f
c0027904:	09 ca                	or     edx,ecx
c0027906:	d1 e8                	shr    eax,1
c0027908:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002790d:	e9 37 03 00 00       	jmp    c0027c49 <__adddf3+0x606>
c0027912:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027915:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002791b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002791e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027921:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027927:	29 de                	sub    esi,ebx
c0027929:	85 f6                	test   esi,esi
c002792b:	0f 8e bd 00 00 00    	jle    c00279ee <__adddf3+0x3ab>
c0027931:	85 db                	test   ebx,ebx
c0027933:	75 17                	jne    c002794c <__adddf3+0x309>
c0027935:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027938:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002793b:	0f 84 47 03 00 00    	je     c0027c88 <__adddf3+0x645>
c0027941:	4e                   	dec    esi
c0027942:	75 20                	jne    c0027964 <__adddf3+0x321>
c0027944:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027947:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002794a:	eb 5b                	jmp    c00279a7 <__adddf3+0x364>
c002794c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002794f:	f7 d3                	not    ebx
c0027951:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027957:	0f 84 2b 03 00 00    	je     c0027c88 <__adddf3+0x645>
c002795d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027964:	83 fe 1f             	cmp    esi,0x1f
c0027967:	7e 49                	jle    c00279b2 <__adddf3+0x36f>
c0027969:	83 fe 3f             	cmp    esi,0x3f
c002796c:	0f 8f 16 03 00 00    	jg     c0027c88 <__adddf3+0x645>
c0027972:	83 e6 1f             	and    esi,0x1f
c0027975:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027978:	89 f1                	mov    ecx,esi
c002797a:	d3 ef                	shr    edi,cl
c002797c:	31 db                	xor    ebx,ebx
c002797e:	85 f6                	test   esi,esi
c0027980:	74 13                	je     c0027995 <__adddf3+0x352>
c0027982:	b9 20 00 00 00       	mov    ecx,0x20
c0027987:	29 f1                	sub    ecx,esi
c0027989:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002798c:	d3 e6                	shl    esi,cl
c002798e:	31 db                	xor    ebx,ebx
c0027990:	85 f6                	test   esi,esi
c0027992:	0f 95 c3             	setne  bl
c0027995:	31 c9                	xor    ecx,ecx
c0027997:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002799b:	0f 95 c1             	setne  cl
c002799e:	09 cf                	or     edi,ecx
c00279a0:	09 fb                	or     ebx,edi
c00279a2:	29 da                	sub    edx,ebx
c00279a4:	83 d8 00             	sbb    eax,0x0
c00279a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279ad:	e9 aa 01 00 00       	jmp    c0027b5c <__adddf3+0x519>
c00279b2:	bf 20 00 00 00       	mov    edi,0x20
c00279b7:	29 f7                	sub    edi,esi
c00279b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00279bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279c2:	d3 e3                	shl    ebx,cl
c00279c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279c7:	89 f1                	mov    ecx,esi
c00279c9:	d3 ef                	shr    edi,cl
c00279cb:	09 fb                	or     ebx,edi
c00279cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279d0:	89 f1                	mov    ecx,esi
c00279d2:	d3 ef                	shr    edi,cl
c00279d4:	89 fe                	mov    esi,edi
c00279d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279dc:	d3 e7                	shl    edi,cl
c00279de:	85 ff                	test   edi,edi
c00279e0:	0f 95 c1             	setne  cl
c00279e3:	0f b6 c9             	movzx  ecx,cl
c00279e6:	09 cb                	or     ebx,ecx
c00279e8:	29 da                	sub    edx,ebx
c00279ea:	19 f0                	sbb    eax,esi
c00279ec:	eb b9                	jmp    c00279a7 <__adddf3+0x364>
c00279ee:	0f 84 cd 00 00 00    	je     c0027ac1 <__adddf3+0x47e>
c00279f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a01:	75 1b                	jne    c0027a1e <__adddf3+0x3db>
c0027a03:	89 d6                	mov    esi,edx
c0027a05:	09 c6                	or     esi,eax
c0027a07:	0f 84 7b 02 00 00    	je     c0027c88 <__adddf3+0x645>
c0027a0d:	4b                   	dec    ebx
c0027a0e:	75 24                	jne    c0027a34 <__adddf3+0x3f1>
c0027a10:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a13:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a16:	29 d1                	sub    ecx,edx
c0027a18:	19 c6                	sbb    esi,eax
c0027a1a:	89 ca                	mov    edx,ecx
c0027a1c:	eb 61                	jmp    c0027a7f <__adddf3+0x43c>
c0027a1e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a21:	f7 d6                	not    esi
c0027a23:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a29:	0f 84 59 02 00 00    	je     c0027c88 <__adddf3+0x645>
c0027a2f:	0d 00 00 00 80       	or     eax,0x80000000
c0027a34:	83 fb 1f             	cmp    ebx,0x1f
c0027a37:	7e 4d                	jle    c0027a86 <__adddf3+0x443>
c0027a39:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a3c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a3f:	83 fb 3f             	cmp    ebx,0x3f
c0027a42:	0f 8f 40 02 00 00    	jg     c0027c88 <__adddf3+0x645>
c0027a48:	83 e3 1f             	and    ebx,0x1f
c0027a4b:	89 d9                	mov    ecx,ebx
c0027a4d:	89 c7                	mov    edi,eax
c0027a4f:	d3 ef                	shr    edi,cl
c0027a51:	31 db                	xor    ebx,ebx
c0027a53:	85 c9                	test   ecx,ecx
c0027a55:	74 12                	je     c0027a69 <__adddf3+0x426>
c0027a57:	be 20 00 00 00       	mov    esi,0x20
c0027a5c:	29 ce                	sub    esi,ecx
c0027a5e:	89 f1                	mov    ecx,esi
c0027a60:	d3 e0                	shl    eax,cl
c0027a62:	31 db                	xor    ebx,ebx
c0027a64:	85 c0                	test   eax,eax
c0027a66:	0f 95 c3             	setne  bl
c0027a69:	31 c0                	xor    eax,eax
c0027a6b:	85 d2                	test   edx,edx
c0027a6d:	0f 95 c0             	setne  al
c0027a70:	09 c7                	or     edi,eax
c0027a72:	09 fb                	or     ebx,edi
c0027a74:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a77:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a7a:	29 da                	sub    edx,ebx
c0027a7c:	83 de 00             	sbb    esi,0x0
c0027a7f:	89 f0                	mov    eax,esi
c0027a81:	e9 d6 00 00 00       	jmp    c0027b5c <__adddf3+0x519>
c0027a86:	be 20 00 00 00       	mov    esi,0x20
c0027a8b:	29 de                	sub    esi,ebx
c0027a8d:	89 c7                	mov    edi,eax
c0027a8f:	89 f1                	mov    ecx,esi
c0027a91:	d3 e7                	shl    edi,cl
c0027a93:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a96:	89 d7                	mov    edi,edx
c0027a98:	88 d9                	mov    cl,bl
c0027a9a:	d3 ef                	shr    edi,cl
c0027a9c:	89 f9                	mov    ecx,edi
c0027a9e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aa1:	09 cf                	or     edi,ecx
c0027aa3:	88 d9                	mov    cl,bl
c0027aa5:	d3 e8                	shr    eax,cl
c0027aa7:	89 f1                	mov    ecx,esi
c0027aa9:	d3 e2                	shl    edx,cl
c0027aab:	85 d2                	test   edx,edx
c0027aad:	0f 95 c2             	setne  dl
c0027ab0:	0f b6 d2             	movzx  edx,dl
c0027ab3:	09 d7                	or     edi,edx
c0027ab5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ab8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027abb:	29 fa                	sub    edx,edi
c0027abd:	19 c6                	sbb    esi,eax
c0027abf:	eb be                	jmp    c0027a7f <__adddf3+0x43c>
c0027ac1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ac4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027ac7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027acd:	75 6a                	jne    c0027b39 <__adddf3+0x4f6>
c0027acf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ad3:	75 58                	jne    c0027b2d <__adddf3+0x4ea>
c0027ad5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027ad8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027adb:	89 d6                	mov    esi,edx
c0027add:	09 c6                	or     esi,eax
c0027adf:	75 17                	jne    c0027af8 <__adddf3+0x4b5>
c0027ae1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ae4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ae7:	85 db                	test   ebx,ebx
c0027ae9:	0f 85 99 01 00 00    	jne    c0027c88 <__adddf3+0x645>
c0027aef:	31 ff                	xor    edi,edi
c0027af1:	31 c9                	xor    ecx,ecx
c0027af3:	e9 90 01 00 00       	jmp    c0027c88 <__adddf3+0x645>
c0027af8:	85 db                	test   ebx,ebx
c0027afa:	0f 84 88 01 00 00    	je     c0027c88 <__adddf3+0x645>
c0027b00:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027b03:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027b06:	85 c0                	test   eax,eax
c0027b08:	79 10                	jns    c0027b1a <__adddf3+0x4d7>
c0027b0a:	31 c9                	xor    ecx,ecx
c0027b0c:	f7 da                	neg    edx
c0027b0e:	0f 95 c1             	setne  cl
c0027b11:	01 c8                	add    eax,ecx
c0027b13:	f7 d8                	neg    eax
c0027b15:	e9 2f 01 00 00       	jmp    c0027c49 <__adddf3+0x606>
c0027b1a:	31 ff                	xor    edi,edi
c0027b1c:	31 c9                	xor    ecx,ecx
c0027b1e:	89 c3                	mov    ebx,eax
c0027b20:	09 d3                	or     ebx,edx
c0027b22:	0f 84 60 01 00 00    	je     c0027c88 <__adddf3+0x645>
c0027b28:	e9 05 01 00 00       	jmp    c0027c32 <__adddf3+0x5ef>
c0027b2d:	31 ff                	xor    edi,edi
c0027b2f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b34:	e9 4f 01 00 00       	jmp    c0027c88 <__adddf3+0x645>
c0027b39:	89 c1                	mov    ecx,eax
c0027b3b:	89 d0                	mov    eax,edx
c0027b3d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b40:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b43:	89 ca                	mov    edx,ecx
c0027b45:	85 c9                	test   ecx,ecx
c0027b47:	79 2c                	jns    c0027b75 <__adddf3+0x532>
c0027b49:	31 c9                	xor    ecx,ecx
c0027b4b:	f7 d8                	neg    eax
c0027b4d:	0f 95 c1             	setne  cl
c0027b50:	01 ca                	add    edx,ecx
c0027b52:	f7 da                	neg    edx
c0027b54:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b57:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b5a:	eb 19                	jmp    c0027b75 <__adddf3+0x532>
c0027b5c:	85 c0                	test   eax,eax
c0027b5e:	0f 89 e5 00 00 00    	jns    c0027c49 <__adddf3+0x606>
c0027b64:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b69:	89 c1                	mov    ecx,eax
c0027b6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b6e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b71:	89 d0                	mov    eax,edx
c0027b73:	89 ca                	mov    edx,ecx
c0027b75:	85 d2                	test   edx,edx
c0027b77:	74 59                	je     c0027bd2 <__adddf3+0x58f>
c0027b79:	0f bd da             	bsr    ebx,edx
c0027b7c:	83 f3 1f             	xor    ebx,0x1f
c0027b7f:	88 d9                	mov    cl,bl
c0027b81:	d3 e2                	shl    edx,cl
c0027b83:	bf 20 00 00 00       	mov    edi,0x20
c0027b88:	89 f9                	mov    ecx,edi
c0027b8a:	29 d9                	sub    ecx,ebx
c0027b8c:	89 c6                	mov    esi,eax
c0027b8e:	d3 ee                	shr    esi,cl
c0027b90:	09 d6                	or     esi,edx
c0027b92:	88 d9                	mov    cl,bl
c0027b94:	d3 e0                	shl    eax,cl
c0027b96:	89 c2                	mov    edx,eax
c0027b98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b9b:	25 ff 07 00 00       	and    eax,0x7ff
c0027ba0:	39 d8                	cmp    eax,ebx
c0027ba2:	7f 22                	jg     c0027bc6 <__adddf3+0x583>
c0027ba4:	29 c3                	sub    ebx,eax
c0027ba6:	43                   	inc    ebx
c0027ba7:	88 d9                	mov    cl,bl
c0027ba9:	d3 ea                	shr    edx,cl
c0027bab:	29 df                	sub    edi,ebx
c0027bad:	89 f9                	mov    ecx,edi
c0027baf:	89 f0                	mov    eax,esi
c0027bb1:	d3 e0                	shl    eax,cl
c0027bb3:	09 c2                	or     edx,eax
c0027bb5:	89 f0                	mov    eax,esi
c0027bb7:	88 d9                	mov    cl,bl
c0027bb9:	d3 e8                	shr    eax,cl
c0027bbb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bbe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027bc4:	eb 6f                	jmp    c0027c35 <__adddf3+0x5f2>
c0027bc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bc9:	29 d8                	sub    eax,ebx
c0027bcb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bce:	89 f0                	mov    eax,esi
c0027bd0:	eb 59                	jmp    c0027c2b <__adddf3+0x5e8>
c0027bd2:	85 c0                	test   eax,eax
c0027bd4:	74 6a                	je     c0027c40 <__adddf3+0x5fd>
c0027bd6:	0f bd c8             	bsr    ecx,eax
c0027bd9:	83 f1 1f             	xor    ecx,0x1f
c0027bdc:	d3 e0                	shl    eax,cl
c0027bde:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027be1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027be7:	83 c1 20             	add    ecx,0x20
c0027bea:	39 cb                	cmp    ebx,ecx
c0027bec:	7f 35                	jg     c0027c23 <__adddf3+0x5e0>
c0027bee:	29 d9                	sub    ecx,ebx
c0027bf0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027bf3:	83 fe 1f             	cmp    esi,0x1f
c0027bf6:	7e 09                	jle    c0027c01 <__adddf3+0x5be>
c0027bf8:	83 e9 1f             	sub    ecx,0x1f
c0027bfb:	d3 e8                	shr    eax,cl
c0027bfd:	89 c3                	mov    ebx,eax
c0027bff:	eb 11                	jmp    c0027c12 <__adddf3+0x5cf>
c0027c01:	b9 20 00 00 00       	mov    ecx,0x20
c0027c06:	29 f1                	sub    ecx,esi
c0027c08:	89 c3                	mov    ebx,eax
c0027c0a:	d3 e3                	shl    ebx,cl
c0027c0c:	89 f1                	mov    ecx,esi
c0027c0e:	d3 e8                	shr    eax,cl
c0027c10:	89 c2                	mov    edx,eax
c0027c12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c15:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c1d:	89 d0                	mov    eax,edx
c0027c1f:	89 da                	mov    edx,ebx
c0027c21:	eb 26                	jmp    c0027c49 <__adddf3+0x606>
c0027c23:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c26:	29 cf                	sub    edi,ecx
c0027c28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c2b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c30:	eb 17                	jmp    c0027c49 <__adddf3+0x606>
c0027c32:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c35:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c38:	eb 0f                	jmp    c0027c49 <__adddf3+0x606>
c0027c3a:	31 d2                	xor    edx,edx
c0027c3c:	31 c0                	xor    eax,eax
c0027c3e:	eb 09                	jmp    c0027c49 <__adddf3+0x606>
c0027c40:	89 c2                	mov    edx,eax
c0027c42:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c4c:	c1 e1 14             	shl    ecx,0x14
c0027c4f:	89 c3                	mov    ebx,eax
c0027c51:	c1 eb 0b             	shr    ebx,0xb
c0027c54:	09 d9                	or     ecx,ebx
c0027c56:	89 d3                	mov    ebx,edx
c0027c58:	c1 eb 0b             	shr    ebx,0xb
c0027c5b:	c1 e0 15             	shl    eax,0x15
c0027c5e:	09 d8                	or     eax,ebx
c0027c60:	89 c7                	mov    edi,eax
c0027c62:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c68:	0f 95 c0             	setne  al
c0027c6b:	89 c6                	mov    esi,eax
c0027c6d:	09 f3                	or     ebx,esi
c0027c6f:	83 e3 01             	and    ebx,0x1
c0027c72:	c1 ea 0a             	shr    edx,0xa
c0027c75:	21 da                	and    edx,ebx
c0027c77:	89 f8                	mov    eax,edi
c0027c79:	01 d0                	add    eax,edx
c0027c7b:	83 d1 00             	adc    ecx,0x0
c0027c7e:	89 c7                	mov    edi,eax
c0027c80:	eb 06                	jmp    c0027c88 <__adddf3+0x645>
c0027c82:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c85:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c88:	89 f8                	mov    eax,edi
c0027c8a:	89 ca                	mov    edx,ecx
c0027c8c:	83 c4 24             	add    esp,0x24
c0027c8f:	5b                   	pop    ebx
c0027c90:	5e                   	pop    esi
c0027c91:	5f                   	pop    edi
c0027c92:	5d                   	pop    ebp
c0027c93:	c3                   	ret    

c0027c94 <__subdf3>:
c0027c94:	55                   	push   ebp
c0027c95:	89 e5                	mov    ebp,esp
c0027c97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c9a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c9d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ca3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ca6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ca9:	5d                   	pop    ebp
c0027caa:	e9 94 f9 ff ff       	jmp    c0027643 <__adddf3>

c0027caf <__negdf2>:
c0027caf:	55                   	push   ebp
c0027cb0:	89 e5                	mov    ebp,esp
c0027cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027cb5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027cb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cbe:	5d                   	pop    ebp
c0027cbf:	c3                   	ret    

c0027cc0 <__muldf3>:
c0027cc0:	55                   	push   ebp
c0027cc1:	89 e5                	mov    ebp,esp
c0027cc3:	57                   	push   edi
c0027cc4:	56                   	push   esi
c0027cc5:	53                   	push   ebx
c0027cc6:	83 ec 24             	sub    esp,0x24
c0027cc9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ccc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027ccf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cd2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cd5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027cd8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027cdb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cde:	89 c8                	mov    eax,ecx
c0027ce0:	c1 f8 14             	sar    eax,0x14
c0027ce3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ce6:	89 f8                	mov    eax,edi
c0027ce8:	89 fb                	mov    ebx,edi
c0027cea:	c1 e3 0b             	shl    ebx,0xb
c0027ced:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027cf0:	c1 e1 0b             	shl    ecx,0xb
c0027cf3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cf9:	c1 e8 15             	shr    eax,0x15
c0027cfc:	09 c1                	or     ecx,eax
c0027cfe:	89 d6                	mov    esi,edx
c0027d00:	89 d0                	mov    eax,edx
c0027d02:	c1 f8 14             	sar    eax,0x14
c0027d05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027d08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027d0b:	89 c3                	mov    ebx,eax
c0027d0d:	c1 e3 0b             	shl    ebx,0xb
c0027d10:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d13:	c1 e6 0b             	shl    esi,0xb
c0027d16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d1c:	c1 e8 15             	shr    eax,0x15
c0027d1f:	09 c6                	or     esi,eax
c0027d21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d24:	25 ff 07 00 00       	and    eax,0x7ff
c0027d29:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d2c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d2f:	25 ff 07 00 00       	and    eax,0x7ff
c0027d34:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d37:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d3a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d3d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d47:	40                   	inc    eax
c0027d48:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d4d:	0f 85 8d 00 00 00    	jne    c0027de0 <__muldf3+0x120>
c0027d53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d56:	09 c8                	or     eax,ecx
c0027d58:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d5c:	74 44                	je     c0027da2 <__muldf3+0xe2>
c0027d5e:	85 c0                	test   eax,eax
c0027d60:	0f 85 31 02 00 00    	jne    c0027f97 <__muldf3+0x2d7>
c0027d66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d69:	40                   	inc    eax
c0027d6a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d6f:	75 13                	jne    c0027d84 <__muldf3+0xc4>
c0027d71:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d74:	09 f1                	or     ecx,esi
c0027d76:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d7a:	74 22                	je     c0027d9e <__muldf3+0xde>
c0027d7c:	85 c9                	test   ecx,ecx
c0027d7e:	0f 85 0d 02 00 00    	jne    c0027f91 <__muldf3+0x2d1>
c0027d84:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d88:	0f 89 09 02 00 00    	jns    c0027f97 <__muldf3+0x2d7>
c0027d8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d91:	05 00 00 00 80       	add    eax,0x80000000
c0027d96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d99:	e9 f9 01 00 00       	jmp    c0027f97 <__muldf3+0x2d7>
c0027d9e:	85 c9                	test   ecx,ecx
c0027da0:	eb 2e                	jmp    c0027dd0 <__muldf3+0x110>
c0027da2:	85 c0                	test   eax,eax
c0027da4:	74 20                	je     c0027dc6 <__muldf3+0x106>
c0027da6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027da9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027daf:	c1 ef 1f             	shr    edi,0x1f
c0027db2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027db5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027db8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dbe:	09 f9                	or     ecx,edi
c0027dc0:	78 1e                	js     c0027de0 <__muldf3+0x120>
c0027dc2:	89 c3                	mov    ebx,eax
c0027dc4:	eb e0                	jmp    c0027da6 <__muldf3+0xe6>
c0027dc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dc9:	f7 d0                	not    eax
c0027dcb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027dd0:	75 b2                	jne    c0027d84 <__muldf3+0xc4>
c0027dd2:	31 ff                	xor    edi,edi
c0027dd4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ddb:	e9 b7 01 00 00       	jmp    c0027f97 <__muldf3+0x2d7>
c0027de0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027de3:	40                   	inc    eax
c0027de4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027de9:	75 57                	jne    c0027e42 <__muldf3+0x182>
c0027deb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027dee:	09 f0                	or     eax,esi
c0027df0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027df4:	74 23                	je     c0027e19 <__muldf3+0x159>
c0027df6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dfa:	0f 89 91 01 00 00    	jns    c0027f91 <__muldf3+0x2d1>
c0027e00:	85 c0                	test   eax,eax
c0027e02:	0f 85 89 01 00 00    	jne    c0027f91 <__muldf3+0x2d1>
c0027e08:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e0b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027e11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e14:	e9 7e 01 00 00       	jmp    c0027f97 <__muldf3+0x2d7>
c0027e19:	85 c0                	test   eax,eax
c0027e1b:	75 0c                	jne    c0027e29 <__muldf3+0x169>
c0027e1d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e21:	0f 89 6a 01 00 00    	jns    c0027f91 <__muldf3+0x2d1>
c0027e27:	eb df                	jmp    c0027e08 <__muldf3+0x148>
c0027e29:	01 f6                	add    esi,esi
c0027e2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e2e:	c1 ea 1f             	shr    edx,0x1f
c0027e31:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e34:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e3a:	09 d6                	or     esi,edx
c0027e3c:	78 04                	js     c0027e42 <__muldf3+0x182>
c0027e3e:	89 c3                	mov    ebx,eax
c0027e40:	eb e7                	jmp    c0027e29 <__muldf3+0x169>
c0027e42:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e48:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e4e:	89 c8                	mov    eax,ecx
c0027e50:	f7 e6                	mul    esi
c0027e52:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e55:	89 c7                	mov    edi,eax
c0027e57:	89 c8                	mov    eax,ecx
c0027e59:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e5c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e5f:	89 c1                	mov    ecx,eax
c0027e61:	89 f0                	mov    eax,esi
c0027e63:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e66:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e69:	89 c6                	mov    esi,eax
c0027e6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e6e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e71:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e74:	31 c0                	xor    eax,eax
c0027e76:	01 f1                	add    ecx,esi
c0027e78:	0f 92 c0             	setb   al
c0027e7b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e7e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e81:	83 d6 00             	adc    esi,0x0
c0027e84:	01 c7                	add    edi,eax
c0027e86:	83 d6 00             	adc    esi,0x0
c0027e89:	01 ca                	add    edx,ecx
c0027e8b:	0f 92 c1             	setb   cl
c0027e8e:	0f b6 c9             	movzx  ecx,cl
c0027e91:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e94:	83 d6 00             	adc    esi,0x0
c0027e97:	01 cf                	add    edi,ecx
c0027e99:	83 d6 00             	adc    esi,0x0
c0027e9c:	31 c9                	xor    ecx,ecx
c0027e9e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ea1:	0f 95 c1             	setne  cl
c0027ea4:	09 cf                	or     edi,ecx
c0027ea6:	85 f6                	test   esi,esi
c0027ea8:	78 0c                	js     c0027eb6 <__muldf3+0x1f6>
c0027eaa:	01 f6                	add    esi,esi
c0027eac:	89 f8                	mov    eax,edi
c0027eae:	c1 e8 1f             	shr    eax,0x1f
c0027eb1:	09 c6                	or     esi,eax
c0027eb3:	01 ff                	add    edi,edi
c0027eb5:	4b                   	dec    ebx
c0027eb6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ebc:	0f 8f 85 00 00 00    	jg     c0027f47 <__muldf3+0x287>
c0027ec2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ec8:	85 db                	test   ebx,ebx
c0027eca:	0f 8f 84 00 00 00    	jg     c0027f54 <__muldf3+0x294>
c0027ed0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027ed3:	7c 79                	jl     c0027f4e <__muldf3+0x28e>
c0027ed5:	ba 01 00 00 00       	mov    edx,0x1
c0027eda:	29 da                	sub    edx,ebx
c0027edc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ee2:	83 fa 1f             	cmp    edx,0x1f
c0027ee5:	7e 30                	jle    c0027f17 <__muldf3+0x257>
c0027ee7:	83 fa 20             	cmp    edx,0x20
c0027eea:	75 0b                	jne    c0027ef7 <__muldf3+0x237>
c0027eec:	31 c0                	xor    eax,eax
c0027eee:	85 ff                	test   edi,edi
c0027ef0:	0f 95 c0             	setne  al
c0027ef3:	89 c7                	mov    edi,eax
c0027ef5:	eb 1a                	jmp    c0027f11 <__muldf3+0x251>
c0027ef7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027efa:	89 f0                	mov    eax,esi
c0027efc:	d3 e0                	shl    eax,cl
c0027efe:	09 f8                	or     eax,edi
c0027f00:	0f 95 c0             	setne  al
c0027f03:	0f b6 c0             	movzx  eax,al
c0027f06:	89 c7                	mov    edi,eax
c0027f08:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f0d:	29 d9                	sub    ecx,ebx
c0027f0f:	d3 ee                	shr    esi,cl
c0027f11:	09 f7                	or     edi,esi
c0027f13:	31 db                	xor    ebx,ebx
c0027f15:	eb 3b                	jmp    c0027f52 <__muldf3+0x292>
c0027f17:	83 c3 1f             	add    ebx,0x1f
c0027f1a:	89 f0                	mov    eax,esi
c0027f1c:	88 d9                	mov    cl,bl
c0027f1e:	d3 e0                	shl    eax,cl
c0027f20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f23:	89 f8                	mov    eax,edi
c0027f25:	88 d1                	mov    cl,dl
c0027f27:	d3 e8                	shr    eax,cl
c0027f29:	89 c1                	mov    ecx,eax
c0027f2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f2e:	09 c8                	or     eax,ecx
c0027f30:	88 d9                	mov    cl,bl
c0027f32:	d3 e7                	shl    edi,cl
c0027f34:	31 db                	xor    ebx,ebx
c0027f36:	85 ff                	test   edi,edi
c0027f38:	0f 95 c3             	setne  bl
c0027f3b:	89 df                	mov    edi,ebx
c0027f3d:	09 c7                	or     edi,eax
c0027f3f:	88 d1                	mov    cl,dl
c0027f41:	d3 ee                	shr    esi,cl
c0027f43:	31 db                	xor    ebx,ebx
c0027f45:	eb 0d                	jmp    c0027f54 <__muldf3+0x294>
c0027f47:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f4c:	eb 02                	jmp    c0027f50 <__muldf3+0x290>
c0027f4e:	31 db                	xor    ebx,ebx
c0027f50:	31 ff                	xor    edi,edi
c0027f52:	31 f6                	xor    esi,esi
c0027f54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f57:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f5a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f5f:	09 c3                	or     ebx,eax
c0027f61:	c1 e3 14             	shl    ebx,0x14
c0027f64:	89 f0                	mov    eax,esi
c0027f66:	c1 e8 0b             	shr    eax,0xb
c0027f69:	09 c3                	or     ebx,eax
c0027f6b:	89 f8                	mov    eax,edi
c0027f6d:	c1 e8 0b             	shr    eax,0xb
c0027f70:	c1 e6 15             	shl    esi,0x15
c0027f73:	09 c6                	or     esi,eax
c0027f75:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f7b:	0f 95 c1             	setne  cl
c0027f7e:	09 c8                	or     eax,ecx
c0027f80:	83 e0 01             	and    eax,0x1
c0027f83:	c1 ef 0a             	shr    edi,0xa
c0027f86:	21 c7                	and    edi,eax
c0027f88:	01 f7                	add    edi,esi
c0027f8a:	83 d3 00             	adc    ebx,0x0
c0027f8d:	89 da                	mov    edx,ebx
c0027f8f:	eb 03                	jmp    c0027f94 <__muldf3+0x2d4>
c0027f91:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f94:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f97:	89 f8                	mov    eax,edi
c0027f99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f9c:	83 c4 24             	add    esp,0x24
c0027f9f:	5b                   	pop    ebx
c0027fa0:	5e                   	pop    esi
c0027fa1:	5f                   	pop    edi
c0027fa2:	5d                   	pop    ebp
c0027fa3:	c3                   	ret    

c0027fa4 <__divdf3>:
c0027fa4:	55                   	push   ebp
c0027fa5:	89 e5                	mov    ebp,esp
c0027fa7:	57                   	push   edi
c0027fa8:	56                   	push   esi
c0027fa9:	53                   	push   ebx
c0027faa:	83 ec 2c             	sub    esp,0x2c
c0027fad:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027fb0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fb6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027fb9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027fbc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027fbf:	89 ce                	mov    esi,ecx
c0027fc1:	89 c8                	mov    eax,ecx
c0027fc3:	c1 f8 14             	sar    eax,0x14
c0027fc6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fc9:	89 f8                	mov    eax,edi
c0027fcb:	89 fb                	mov    ebx,edi
c0027fcd:	c1 e3 0b             	shl    ebx,0xb
c0027fd0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027fd3:	c1 e6 0b             	shl    esi,0xb
c0027fd6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027fdc:	c1 e8 15             	shr    eax,0x15
c0027fdf:	09 c6                	or     esi,eax
c0027fe1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027fe4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fe7:	89 c2                	mov    edx,eax
c0027fe9:	c1 fa 14             	sar    edx,0x14
c0027fec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027fef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ff2:	89 de                	mov    esi,ebx
c0027ff4:	c1 e6 0b             	shl    esi,0xb
c0027ff7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027ffa:	c1 e0 0b             	shl    eax,0xb
c0027ffd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028002:	c1 eb 15             	shr    ebx,0x15
c0028005:	09 d8                	or     eax,ebx
c0028007:	89 c2                	mov    edx,eax
c0028009:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800c:	25 ff 07 00 00       	and    eax,0x7ff
c0028011:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028014:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028017:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002801d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028020:	29 d8                	sub    eax,ebx
c0028022:	05 ff 03 00 00       	add    eax,0x3ff
c0028027:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002802a:	46                   	inc    esi
c002802b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028031:	0f 85 a5 00 00 00    	jne    c00280dc <__divdf3+0x138>
c0028037:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002803a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002803d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028041:	74 2a                	je     c002806d <__divdf3+0xc9>
c0028043:	85 f6                	test   esi,esi
c0028045:	0f 85 cc 02 00 00    	jne    c0028317 <__divdf3+0x373>
c002804b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002804e:	40                   	inc    eax
c002804f:	a9 fe 07 00 00       	test   eax,0x7fe
c0028054:	75 26                	jne    c002807c <__divdf3+0xd8>
c0028056:	85 db                	test   ebx,ebx
c0028058:	74 22                	je     c002807c <__divdf3+0xd8>
c002805a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002805d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028060:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028063:	09 d0                	or     eax,edx
c0028065:	0f 85 ac 02 00 00    	jne    c0028317 <__divdf3+0x373>
c002806b:	eb 63                	jmp    c00280d0 <__divdf3+0x12c>
c002806d:	85 f6                	test   esi,esi
c002806f:	75 22                	jne    c0028093 <__divdf3+0xef>
c0028071:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028074:	40                   	inc    eax
c0028075:	a9 fe 07 00 00       	test   eax,0x7fe
c002807a:	74 36                	je     c00280b2 <__divdf3+0x10e>
c002807c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028080:	0f 89 91 02 00 00    	jns    c0028317 <__divdf3+0x373>
c0028086:	89 f8                	mov    eax,edi
c0028088:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002808e:	e9 80 02 00 00       	jmp    c0028313 <__divdf3+0x36f>
c0028093:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028096:	01 f6                	add    esi,esi
c0028098:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002809b:	c1 ef 1f             	shr    edi,0x1f
c002809e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280a1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00280a4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00280a7:	09 f7                	or     edi,esi
c00280a9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00280ac:	78 2e                	js     c00280dc <__divdf3+0x138>
c00280ae:	89 c8                	mov    eax,ecx
c00280b0:	eb e1                	jmp    c0028093 <__divdf3+0xef>
c00280b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280b5:	09 d0                	or     eax,edx
c00280b7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280bb:	74 0f                	je     c00280cc <__divdf3+0x128>
c00280bd:	85 c0                	test   eax,eax
c00280bf:	74 bb                	je     c002807c <__divdf3+0xd8>
c00280c1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280c4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280c7:	e9 4b 02 00 00       	jmp    c0028317 <__divdf3+0x373>
c00280cc:	85 c0                	test   eax,eax
c00280ce:	75 ac                	jne    c002807c <__divdf3+0xd8>
c00280d0:	31 ff                	xor    edi,edi
c00280d2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00280d7:	e9 3b 02 00 00       	jmp    c0028317 <__divdf3+0x373>
c00280dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280df:	8d 4f 01             	lea    ecx,[edi+0x1]
c00280e2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00280e8:	75 6b                	jne    c0028155 <__divdf3+0x1b1>
c00280ea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280ed:	09 d6                	or     esi,edx
c00280ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280f3:	74 28                	je     c002811d <__divdf3+0x179>
c00280f5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280f8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280fb:	85 f6                	test   esi,esi
c00280fd:	0f 85 14 02 00 00    	jne    c0028317 <__divdf3+0x373>
c0028103:	31 ff                	xor    edi,edi
c0028105:	31 c9                	xor    ecx,ecx
c0028107:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002810a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002810d:	0f 89 04 02 00 00    	jns    c0028317 <__divdf3+0x373>
c0028113:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028118:	e9 fa 01 00 00       	jmp    c0028317 <__divdf3+0x373>
c002811d:	85 f6                	test   esi,esi
c002811f:	75 1b                	jne    c002813c <__divdf3+0x198>
c0028121:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028124:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028127:	25 00 00 00 80       	and    eax,0x80000000
c002812c:	31 c9                	xor    ecx,ecx
c002812e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028133:	89 cf                	mov    edi,ecx
c0028135:	89 c1                	mov    ecx,eax
c0028137:	e9 db 01 00 00       	jmp    c0028317 <__divdf3+0x373>
c002813c:	01 d2                	add    edx,edx
c002813e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028141:	c1 eb 1f             	shr    ebx,0x1f
c0028144:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028147:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002814a:	8d 48 01             	lea    ecx,[eax+0x1]
c002814d:	09 da                	or     edx,ebx
c002814f:	78 04                	js     c0028155 <__divdf3+0x1b1>
c0028151:	89 c8                	mov    eax,ecx
c0028153:	eb e7                	jmp    c002813c <__divdf3+0x198>
c0028155:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028158:	81 ce 00 00 00 80    	or     esi,0x80000000
c002815e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028164:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028167:	39 d6                	cmp    esi,edx
c0028169:	77 0d                	ja     c0028178 <__divdf3+0x1d4>
c002816b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002816e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028171:	72 1b                	jb     c002818e <__divdf3+0x1ea>
c0028173:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028176:	75 16                	jne    c002818e <__divdf3+0x1ea>
c0028178:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002817b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002817e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028181:	83 de 00             	sbb    esi,0x0
c0028184:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028187:	ba 01 00 00 00       	mov    edx,0x1
c002818c:	eb 02                	jmp    c0028190 <__divdf3+0x1ec>
c002818e:	31 d2                	xor    edx,edx
c0028190:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028197:	31 ff                	xor    edi,edi
c0028199:	01 ff                	add    edi,edi
c002819b:	89 d1                	mov    ecx,edx
c002819d:	c1 e9 1f             	shr    ecx,0x1f
c00281a0:	09 cf                	or     edi,ecx
c00281a2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00281a5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00281a8:	89 da                	mov    edx,ebx
c00281aa:	89 f3                	mov    ebx,esi
c00281ac:	8d 34 36             	lea    esi,[esi+esi*1]
c00281af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281b2:	c1 e9 1f             	shr    ecx,0x1f
c00281b5:	09 ce                	or     esi,ecx
c00281b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281ba:	01 c9                	add    ecx,ecx
c00281bc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00281bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281c2:	85 db                	test   ebx,ebx
c00281c4:	78 29                	js     c00281ef <__divdf3+0x24b>
c00281c6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00281c9:	72 07                	jb     c00281d2 <__divdf3+0x22e>
c00281cb:	75 3c                	jne    c0028209 <__divdf3+0x265>
c00281cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281d0:	77 37                	ja     c0028209 <__divdf3+0x265>
c00281d2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281d5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00281d8:	31 d2                	xor    edx,edx
c00281da:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00281dd:	0f 97 c2             	seta   dl
c00281e0:	29 d6                	sub    esi,edx
c00281e2:	89 d9                	mov    ecx,ebx
c00281e4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00281e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281ed:	eb 17                	jmp    c0028206 <__divdf3+0x262>
c00281ef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281f2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281f8:	0f 97 c1             	seta   cl
c00281fb:	0f b6 c9             	movzx  ecx,cl
c00281fe:	29 ce                	sub    esi,ecx
c0028200:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028203:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028206:	83 ca 01             	or     edx,0x1
c0028209:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002820c:	75 8b                	jne    c0028199 <__divdf3+0x1f5>
c002820e:	c1 e7 09             	shl    edi,0x9
c0028211:	89 d1                	mov    ecx,edx
c0028213:	c1 e9 17             	shr    ecx,0x17
c0028216:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028219:	09 f3                	or     ebx,esi
c002821b:	0f 95 c3             	setne  bl
c002821e:	0f b6 db             	movzx  ebx,bl
c0028221:	c1 e2 09             	shl    edx,0x9
c0028224:	09 d3                	or     ebx,edx
c0028226:	89 ca                	mov    edx,ecx
c0028228:	09 fa                	or     edx,edi
c002822a:	78 0c                	js     c0028238 <__divdf3+0x294>
c002822c:	01 d2                	add    edx,edx
c002822e:	89 d9                	mov    ecx,ebx
c0028230:	c1 e9 1f             	shr    ecx,0x1f
c0028233:	09 ca                	or     edx,ecx
c0028235:	01 db                	add    ebx,ebx
c0028237:	48                   	dec    eax
c0028238:	3d fe 07 00 00       	cmp    eax,0x7fe
c002823d:	0f 8f 83 00 00 00    	jg     c00282c6 <__divdf3+0x322>
c0028243:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028249:	85 c0                	test   eax,eax
c002824b:	0f 8f 82 00 00 00    	jg     c00282d3 <__divdf3+0x32f>
c0028251:	83 f8 cc             	cmp    eax,0xffffffcc
c0028254:	7c 77                	jl     c00282cd <__divdf3+0x329>
c0028256:	be 01 00 00 00       	mov    esi,0x1
c002825b:	29 c6                	sub    esi,eax
c002825d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028263:	83 fe 1f             	cmp    esi,0x1f
c0028266:	7e 2f                	jle    c0028297 <__divdf3+0x2f3>
c0028268:	83 fe 20             	cmp    esi,0x20
c002826b:	75 0a                	jne    c0028277 <__divdf3+0x2d3>
c002826d:	85 db                	test   ebx,ebx
c002826f:	0f 95 c3             	setne  bl
c0028272:	0f b6 db             	movzx  ebx,bl
c0028275:	eb 1a                	jmp    c0028291 <__divdf3+0x2ed>
c0028277:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002827a:	89 d7                	mov    edi,edx
c002827c:	d3 e7                	shl    edi,cl
c002827e:	89 f9                	mov    ecx,edi
c0028280:	09 d9                	or     ecx,ebx
c0028282:	0f 95 c3             	setne  bl
c0028285:	0f b6 db             	movzx  ebx,bl
c0028288:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002828d:	29 c1                	sub    ecx,eax
c002828f:	d3 ea                	shr    edx,cl
c0028291:	09 d3                	or     ebx,edx
c0028293:	31 c0                	xor    eax,eax
c0028295:	eb 3a                	jmp    c00282d1 <__divdf3+0x32d>
c0028297:	83 c0 1f             	add    eax,0x1f
c002829a:	89 d7                	mov    edi,edx
c002829c:	88 c1                	mov    cl,al
c002829e:	d3 e7                	shl    edi,cl
c00282a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282a3:	89 df                	mov    edi,ebx
c00282a5:	89 f1                	mov    ecx,esi
c00282a7:	d3 ef                	shr    edi,cl
c00282a9:	89 f9                	mov    ecx,edi
c00282ab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282ae:	09 cf                	or     edi,ecx
c00282b0:	88 c1                	mov    cl,al
c00282b2:	d3 e3                	shl    ebx,cl
c00282b4:	85 db                	test   ebx,ebx
c00282b6:	0f 95 c3             	setne  bl
c00282b9:	0f b6 db             	movzx  ebx,bl
c00282bc:	09 fb                	or     ebx,edi
c00282be:	89 f1                	mov    ecx,esi
c00282c0:	d3 ea                	shr    edx,cl
c00282c2:	31 c0                	xor    eax,eax
c00282c4:	eb 0d                	jmp    c00282d3 <__divdf3+0x32f>
c00282c6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00282cb:	eb 02                	jmp    c00282cf <__divdf3+0x32b>
c00282cd:	31 c0                	xor    eax,eax
c00282cf:	31 db                	xor    ebx,ebx
c00282d1:	31 d2                	xor    edx,edx
c00282d3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00282d6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00282d9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00282df:	09 c8                	or     eax,ecx
c00282e1:	c1 e0 14             	shl    eax,0x14
c00282e4:	89 d1                	mov    ecx,edx
c00282e6:	c1 e9 0b             	shr    ecx,0xb
c00282e9:	09 c8                	or     eax,ecx
c00282eb:	89 c6                	mov    esi,eax
c00282ed:	89 d9                	mov    ecx,ebx
c00282ef:	c1 e9 0b             	shr    ecx,0xb
c00282f2:	c1 e2 15             	shl    edx,0x15
c00282f5:	09 ca                	or     edx,ecx
c00282f7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282fd:	0f 95 c0             	setne  al
c0028300:	09 c1                	or     ecx,eax
c0028302:	83 e1 01             	and    ecx,0x1
c0028305:	c1 eb 0a             	shr    ebx,0xa
c0028308:	21 cb                	and    ebx,ecx
c002830a:	01 d3                	add    ebx,edx
c002830c:	89 d8                	mov    eax,ebx
c002830e:	83 d6 00             	adc    esi,0x0
c0028311:	89 f2                	mov    edx,esi
c0028313:	89 c7                	mov    edi,eax
c0028315:	89 d1                	mov    ecx,edx
c0028317:	89 f8                	mov    eax,edi
c0028319:	89 ca                	mov    edx,ecx
c002831b:	83 c4 2c             	add    esp,0x2c
c002831e:	5b                   	pop    ebx
c002831f:	5e                   	pop    esi
c0028320:	5f                   	pop    edi
c0028321:	5d                   	pop    ebp
c0028322:	c3                   	ret    

c0028323 <__floatsidf>:
c0028323:	55                   	push   ebp
c0028324:	89 e5                	mov    ebp,esp
c0028326:	56                   	push   esi
c0028327:	53                   	push   ebx
c0028328:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002832b:	85 db                	test   ebx,ebx
c002832d:	7e 15                	jle    c0028344 <__floatsidf+0x21>
c002832f:	0f bd cb             	bsr    ecx,ebx
c0028332:	83 f1 1f             	xor    ecx,0x1f
c0028335:	d3 e3                	shl    ebx,cl
c0028337:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002833d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028342:	eb 21                	jmp    c0028365 <__floatsidf+0x42>
c0028344:	b8 00 00 00 00       	mov    eax,0x0
c0028349:	ba 00 00 00 00       	mov    edx,0x0
c002834e:	74 2a                	je     c002837a <__floatsidf+0x57>
c0028350:	f7 db                	neg    ebx
c0028352:	0f bd cb             	bsr    ecx,ebx
c0028355:	83 f1 1f             	xor    ecx,0x1f
c0028358:	d3 e3                	shl    ebx,cl
c002835a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028360:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028365:	29 c8                	sub    eax,ecx
c0028367:	c1 e0 14             	shl    eax,0x14
c002836a:	89 c1                	mov    ecx,eax
c002836c:	89 de                	mov    esi,ebx
c002836e:	c1 ee 0b             	shr    esi,0xb
c0028371:	09 f1                	or     ecx,esi
c0028373:	89 ca                	mov    edx,ecx
c0028375:	c1 e3 15             	shl    ebx,0x15
c0028378:	89 d8                	mov    eax,ebx
c002837a:	5b                   	pop    ebx
c002837b:	5e                   	pop    esi
c002837c:	5d                   	pop    ebp
c002837d:	c3                   	ret    

c002837e <__floatunsidf>:
c002837e:	55                   	push   ebp
c002837f:	89 e5                	mov    ebp,esp
c0028381:	56                   	push   esi
c0028382:	53                   	push   ebx
c0028383:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028386:	85 db                	test   ebx,ebx
c0028388:	74 2a                	je     c00283b4 <__floatunsidf+0x36>
c002838a:	0f bd cb             	bsr    ecx,ebx
c002838d:	83 f1 1f             	xor    ecx,0x1f
c0028390:	d3 e3                	shl    ebx,cl
c0028392:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028398:	b8 1e 04 00 00       	mov    eax,0x41e
c002839d:	29 c8                	sub    eax,ecx
c002839f:	c1 e0 14             	shl    eax,0x14
c00283a2:	89 c1                	mov    ecx,eax
c00283a4:	89 de                	mov    esi,ebx
c00283a6:	c1 ee 0b             	shr    esi,0xb
c00283a9:	09 f1                	or     ecx,esi
c00283ab:	89 ca                	mov    edx,ecx
c00283ad:	c1 e3 15             	shl    ebx,0x15
c00283b0:	89 d8                	mov    eax,ebx
c00283b2:	eb 04                	jmp    c00283b8 <__floatunsidf+0x3a>
c00283b4:	31 c0                	xor    eax,eax
c00283b6:	31 d2                	xor    edx,edx
c00283b8:	5b                   	pop    ebx
c00283b9:	5e                   	pop    esi
c00283ba:	5d                   	pop    ebp
c00283bb:	c3                   	ret    

c00283bc <__fixdfsi>:
c00283bc:	55                   	push   ebp
c00283bd:	89 e5                	mov    ebp,esp
c00283bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283c2:	89 d1                	mov    ecx,edx
c00283c4:	c1 e1 0b             	shl    ecx,0xb
c00283c7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283d0:	c1 e8 15             	shr    eax,0x15
c00283d3:	09 c1                	or     ecx,eax
c00283d5:	c1 fa 14             	sar    edx,0x14
c00283d8:	78 1f                	js     c00283f9 <__fixdfsi+0x3d>
c00283da:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00283e0:	31 c0                	xor    eax,eax
c00283e2:	83 fa 1e             	cmp    edx,0x1e
c00283e5:	77 40                	ja     c0028427 <__fixdfsi+0x6b>
c00283e7:	89 c8                	mov    eax,ecx
c00283e9:	0d 00 00 00 80       	or     eax,0x80000000
c00283ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283f3:	29 d1                	sub    ecx,edx
c00283f5:	d3 e8                	shr    eax,cl
c00283f7:	eb 2e                	jmp    c0028427 <__fixdfsi+0x6b>
c00283f9:	31 c0                	xor    eax,eax
c00283fb:	81 c2 01 04 00 00    	add    edx,0x401
c0028401:	78 24                	js     c0028427 <__fixdfsi+0x6b>
c0028403:	83 fa 1e             	cmp    edx,0x1e
c0028406:	7e 09                	jle    c0028411 <__fixdfsi+0x55>
c0028408:	83 fa 1f             	cmp    edx,0x1f
c002840b:	75 18                	jne    c0028425 <__fixdfsi+0x69>
c002840d:	85 c9                	test   ecx,ecx
c002840f:	75 14                	jne    c0028425 <__fixdfsi+0x69>
c0028411:	89 c8                	mov    eax,ecx
c0028413:	0d 00 00 00 80       	or     eax,0x80000000
c0028418:	b9 1f 00 00 00       	mov    ecx,0x1f
c002841d:	29 d1                	sub    ecx,edx
c002841f:	d3 e8                	shr    eax,cl
c0028421:	f7 d8                	neg    eax
c0028423:	eb 02                	jmp    c0028427 <__fixdfsi+0x6b>
c0028425:	31 c0                	xor    eax,eax
c0028427:	5d                   	pop    ebp
c0028428:	c3                   	ret    

c0028429 <__fixunsdfsi>:
c0028429:	55                   	push   ebp
c002842a:	89 e5                	mov    ebp,esp
c002842c:	53                   	push   ebx
c002842d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028430:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028433:	89 d3                	mov    ebx,edx
c0028435:	c1 fb 14             	sar    ebx,0x14
c0028438:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002843e:	31 c0                	xor    eax,eax
c0028440:	83 fb 1f             	cmp    ebx,0x1f
c0028443:	77 1d                	ja     c0028462 <__fixunsdfsi+0x39>
c0028445:	89 d0                	mov    eax,edx
c0028447:	c1 e0 0b             	shl    eax,0xb
c002844a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002844f:	c1 e9 15             	shr    ecx,0x15
c0028452:	09 c8                	or     eax,ecx
c0028454:	0d 00 00 00 80       	or     eax,0x80000000
c0028459:	b9 1f 00 00 00       	mov    ecx,0x1f
c002845e:	29 d9                	sub    ecx,ebx
c0028460:	d3 e8                	shr    eax,cl
c0028462:	5b                   	pop    ebx
c0028463:	5d                   	pop    ebp
c0028464:	c3                   	ret    

c0028465 <__cmpdf2>:
c0028465:	55                   	push   ebp
c0028466:	89 e5                	mov    ebp,esp
c0028468:	57                   	push   edi
c0028469:	56                   	push   esi
c002846a:	53                   	push   ebx
c002846b:	83 ec 0c             	sub    esp,0xc
c002846e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028471:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028474:	89 ca                	mov    edx,ecx
c0028476:	c1 ea 14             	shr    edx,0x14
c0028479:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002847f:	89 cb                	mov    ebx,ecx
c0028481:	c1 fb 1f             	sar    ebx,0x1f
c0028484:	31 da                	xor    edx,ebx
c0028486:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028489:	89 df                	mov    edi,ebx
c002848b:	c1 e7 0b             	shl    edi,0xb
c002848e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028491:	c1 e1 0b             	shl    ecx,0xb
c0028494:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002849a:	c1 eb 15             	shr    ebx,0x15
c002849d:	09 d9                	or     ecx,ebx
c002849f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00284a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284a5:	89 ce                	mov    esi,ecx
c00284a7:	c1 ee 14             	shr    esi,0x14
c00284aa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00284b0:	89 cb                	mov    ebx,ecx
c00284b2:	c1 fb 1f             	sar    ebx,0x1f
c00284b5:	31 de                	xor    esi,ebx
c00284b7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00284ba:	89 df                	mov    edi,ebx
c00284bc:	c1 e7 0b             	shl    edi,0xb
c00284bf:	c1 e1 0b             	shl    ecx,0xb
c00284c2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284c8:	c1 eb 15             	shr    ebx,0x15
c00284cb:	09 d9                	or     ecx,ebx
c00284cd:	89 d3                	mov    ebx,edx
c00284cf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284d5:	43                   	inc    ebx
c00284d6:	83 fb 01             	cmp    ebx,0x1
c00284d9:	77 08                	ja     c00284e3 <__cmpdf2+0x7e>
c00284db:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284de:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284e1:	75 68                	jne    c002854b <__cmpdf2+0xe6>
c00284e3:	89 f3                	mov    ebx,esi
c00284e5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284eb:	43                   	inc    ebx
c00284ec:	83 fb 01             	cmp    ebx,0x1
c00284ef:	77 06                	ja     c00284f7 <__cmpdf2+0x92>
c00284f1:	89 fb                	mov    ebx,edi
c00284f3:	09 cb                	or     ebx,ecx
c00284f5:	75 54                	jne    c002854b <__cmpdf2+0xe6>
c00284f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284fa:	09 f8                	or     eax,edi
c00284fc:	09 c8                	or     eax,ecx
c00284fe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028501:	75 12                	jne    c0028515 <__cmpdf2+0xb0>
c0028503:	8d 42 01             	lea    eax,[edx+0x1]
c0028506:	83 f8 01             	cmp    eax,0x1
c0028509:	77 0a                	ja     c0028515 <__cmpdf2+0xb0>
c002850b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002850e:	31 c0                	xor    eax,eax
c0028510:	83 fb 01             	cmp    ebx,0x1
c0028513:	76 36                	jbe    c002854b <__cmpdf2+0xe6>
c0028515:	b8 01 00 00 00       	mov    eax,0x1
c002851a:	39 f2                	cmp    edx,esi
c002851c:	7f 2d                	jg     c002854b <__cmpdf2+0xe6>
c002851e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028523:	7c 26                	jl     c002854b <__cmpdf2+0xe6>
c0028525:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028528:	77 07                	ja     c0028531 <__cmpdf2+0xcc>
c002852a:	72 16                	jb     c0028542 <__cmpdf2+0xdd>
c002852c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002852f:	76 0a                	jbe    c002853b <__cmpdf2+0xd6>
c0028531:	89 d0                	mov    eax,edx
c0028533:	c1 f8 1f             	sar    eax,0x1f
c0028536:	83 c8 01             	or     eax,0x1
c0028539:	eb 10                	jmp    c002854b <__cmpdf2+0xe6>
c002853b:	b8 00 00 00 00       	mov    eax,0x0
c0028540:	73 09                	jae    c002854b <__cmpdf2+0xe6>
c0028542:	89 d0                	mov    eax,edx
c0028544:	c1 f8 1f             	sar    eax,0x1f
c0028547:	83 e0 02             	and    eax,0x2
c002854a:	48                   	dec    eax
c002854b:	83 c4 0c             	add    esp,0xc
c002854e:	5b                   	pop    ebx
c002854f:	5e                   	pop    esi
c0028550:	5f                   	pop    edi
c0028551:	5d                   	pop    ebp
c0028552:	c3                   	ret    

c0028553 <__eqdf2>:
c0028553:	55                   	push   ebp
c0028554:	89 e5                	mov    ebp,esp
c0028556:	50                   	push   eax
c0028557:	6a 01                	push   0x1
c0028559:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002855c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002855f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028562:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028565:	e8 fb fe ff ff       	call   c0028465 <__cmpdf2>
c002856a:	83 c4 18             	add    esp,0x18
c002856d:	c9                   	leave  
c002856e:	c3                   	ret    

c002856f <__nedf2>:
c002856f:	eb e2                	jmp    c0028553 <__eqdf2>

c0028571 <__gtdf2>:
c0028571:	55                   	push   ebp
c0028572:	89 e5                	mov    ebp,esp
c0028574:	50                   	push   eax
c0028575:	6a ff                	push   0xffffffff
c0028577:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002857a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002857d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028580:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028583:	e8 dd fe ff ff       	call   c0028465 <__cmpdf2>
c0028588:	83 c4 18             	add    esp,0x18
c002858b:	c9                   	leave  
c002858c:	c3                   	ret    

c002858d <__gedf2>:
c002858d:	eb e2                	jmp    c0028571 <__gtdf2>

c002858f <__ltdf2>:
c002858f:	eb c2                	jmp    c0028553 <__eqdf2>

c0028591 <__ledf2>:
c0028591:	eb c0                	jmp    c0028553 <__eqdf2>

c0028593 <__truncdfsf2>:
c0028593:	55                   	push   ebp
c0028594:	89 e5                	mov    ebp,esp
c0028596:	57                   	push   edi
c0028597:	56                   	push   esi
c0028598:	53                   	push   ebx
c0028599:	83 ec 0c             	sub    esp,0xc
c002859c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002859f:	89 d1                	mov    ecx,edx
c00285a1:	c1 f9 14             	sar    ecx,0x14
c00285a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285a7:	89 df                	mov    edi,ebx
c00285a9:	c1 e7 0b             	shl    edi,0xb
c00285ac:	89 d0                	mov    eax,edx
c00285ae:	c1 e0 0b             	shl    eax,0xb
c00285b1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00285b6:	c1 eb 15             	shr    ebx,0x15
c00285b9:	09 d8                	or     eax,ebx
c00285bb:	89 cb                	mov    ebx,ecx
c00285bd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285c3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00285c9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00285cf:	0f 86 9e 00 00 00    	jbe    c0028673 <__truncdfsf2+0xe0>
c00285d5:	85 db                	test   ebx,ebx
c00285d7:	75 0a                	jne    c00285e3 <__truncdfsf2+0x50>
c00285d9:	c1 fa 17             	sar    edx,0x17
c00285dc:	30 d2                	xor    dl,dl
c00285de:	e9 84 00 00 00       	jmp    c0028667 <__truncdfsf2+0xd4>
c00285e3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00285e9:	83 fe 83             	cmp    esi,0xffffff83
c00285ec:	7d 4b                	jge    c0028639 <__truncdfsf2+0xa6>
c00285ee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285f3:	29 f1                	sub    ecx,esi
c00285f5:	83 f9 1f             	cmp    ecx,0x1f
c00285f8:	7f 6b                	jg     c0028665 <__truncdfsf2+0xd2>
c00285fa:	0d 00 00 00 80       	or     eax,0x80000000
c00285ff:	89 c3                	mov    ebx,eax
c0028601:	d3 eb                	shr    ebx,cl
c0028603:	be 01 00 00 00       	mov    esi,0x1
c0028608:	d3 e6                	shl    esi,cl
c002860a:	4e                   	dec    esi
c002860b:	21 f0                	and    eax,esi
c002860d:	09 f8                	or     eax,edi
c002860f:	0f 95 c0             	setne  al
c0028612:	0f b6 c0             	movzx  eax,al
c0028615:	09 c3                	or     ebx,eax
c0028617:	89 d9                	mov    ecx,ebx
c0028619:	c1 e9 08             	shr    ecx,0x8
c002861c:	f6 c3 7f             	test   bl,0x7f
c002861f:	0f 95 c0             	setne  al
c0028622:	09 c8                	or     eax,ecx
c0028624:	83 e0 01             	and    eax,0x1
c0028627:	c1 eb 07             	shr    ebx,0x7
c002862a:	21 c3                	and    ebx,eax
c002862c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028632:	09 d1                	or     ecx,edx
c0028634:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028637:	eb 76                	jmp    c00286af <__truncdfsf2+0x11c>
c0028639:	83 c6 80             	add    esi,0xffffff80
c002863c:	7e 1d                	jle    c002865b <__truncdfsf2+0xc8>
c002863e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028644:	75 0b                	jne    c0028651 <__truncdfsf2+0xbe>
c0028646:	09 f8                	or     eax,edi
c0028648:	74 09                	je     c0028653 <__truncdfsf2+0xc0>
c002864a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002864f:	eb 02                	jmp    c0028653 <__truncdfsf2+0xc0>
c0028651:	31 c0                	xor    eax,eax
c0028653:	c1 fa 17             	sar    edx,0x17
c0028656:	80 ca ff             	or     dl,0xff
c0028659:	eb 0e                	jmp    c0028669 <__truncdfsf2+0xd6>
c002865b:	c1 fa 1f             	sar    edx,0x1f
c002865e:	c1 e2 08             	shl    edx,0x8
c0028661:	09 ca                	or     edx,ecx
c0028663:	eb 04                	jmp    c0028669 <__truncdfsf2+0xd6>
c0028665:	31 d2                	xor    edx,edx
c0028667:	31 c0                	xor    eax,eax
c0028669:	c1 e2 17             	shl    edx,0x17
c002866c:	c1 e8 08             	shr    eax,0x8
c002866f:	09 d0                	or     eax,edx
c0028671:	eb 3c                	jmp    c00286af <__truncdfsf2+0x11c>
c0028673:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028679:	89 ca                	mov    edx,ecx
c002867b:	c1 fa 0b             	sar    edx,0xb
c002867e:	c1 e2 08             	shl    edx,0x8
c0028681:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028684:	31 db                	xor    ebx,ebx
c0028686:	85 ff                	test   edi,edi
c0028688:	0f 95 c3             	setne  bl
c002868b:	09 d8                	or     eax,ebx
c002868d:	89 c3                	mov    ebx,eax
c002868f:	c1 eb 08             	shr    ebx,0x8
c0028692:	a8 7f                	test   al,0x7f
c0028694:	0f 95 c2             	setne  dl
c0028697:	89 d6                	mov    esi,edx
c0028699:	09 de                	or     esi,ebx
c002869b:	83 e6 01             	and    esi,0x1
c002869e:	c1 e8 07             	shr    eax,0x7
c00286a1:	21 f0                	and    eax,esi
c00286a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286a6:	09 ca                	or     edx,ecx
c00286a8:	c1 e2 17             	shl    edx,0x17
c00286ab:	09 da                	or     edx,ebx
c00286ad:	01 d0                	add    eax,edx
c00286af:	83 c4 0c             	add    esp,0xc
c00286b2:	5b                   	pop    ebx
c00286b3:	5e                   	pop    esi
c00286b4:	5f                   	pop    edi
c00286b5:	5d                   	pop    ebp
c00286b6:	c3                   	ret    

c00286b7 <__extendsfdf2>:
c00286b7:	55                   	push   ebp
c00286b8:	89 e5                	mov    ebp,esp
c00286ba:	57                   	push   edi
c00286bb:	56                   	push   esi
c00286bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00286bf:	89 d1                	mov    ecx,edx
c00286c1:	c1 f9 17             	sar    ecx,0x17
c00286c4:	c1 e2 08             	shl    edx,0x8
c00286c7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00286cd:	89 c8                	mov    eax,ecx
c00286cf:	80 e4 f8             	and    ah,0xf8
c00286d2:	8d 71 01             	lea    esi,[ecx+0x1]
c00286d5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00286db:	75 27                	jne    c0028704 <__extendsfdf2+0x4d>
c00286dd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00286e3:	75 18                	jne    c00286fd <__extendsfdf2+0x46>
c00286e5:	85 d2                	test   edx,edx
c00286e7:	74 20                	je     c0028709 <__extendsfdf2+0x52>
c00286e9:	41                   	inc    ecx
c00286ea:	01 d2                	add    edx,edx
c00286ec:	79 fb                	jns    c00286e9 <__extendsfdf2+0x32>
c00286ee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286f4:	29 c8                	sub    eax,ecx
c00286f6:	05 81 03 00 00       	add    eax,0x381
c00286fb:	eb 0c                	jmp    c0028709 <__extendsfdf2+0x52>
c00286fd:	05 00 07 00 00       	add    eax,0x700
c0028702:	eb 05                	jmp    c0028709 <__extendsfdf2+0x52>
c0028704:	05 80 03 00 00       	add    eax,0x380
c0028709:	c1 e0 14             	shl    eax,0x14
c002870c:	89 c1                	mov    ecx,eax
c002870e:	89 d0                	mov    eax,edx
c0028710:	c1 e8 0b             	shr    eax,0xb
c0028713:	09 c1                	or     ecx,eax
c0028715:	c1 e2 15             	shl    edx,0x15
c0028718:	89 d0                	mov    eax,edx
c002871a:	89 ca                	mov    edx,ecx
c002871c:	5e                   	pop    esi
c002871d:	5f                   	pop    edi
c002871e:	5d                   	pop    ebp
c002871f:	c3                   	ret    

c0028720 <fabs>:
c0028720:	83 ec 0c             	sub    esp,0xc
c0028723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028727:	89 04 24             	mov    DWORD PTR [esp],eax
c002872a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002872e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028737:	dd 04 24             	fld    QWORD PTR [esp]
c002873a:	83 c4 0c             	add    esp,0xc
c002873d:	c3                   	ret    
c002873e:	66 90                	xchg   ax,ax

c0028740 <lrint>:
c0028740:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028744:	83 ec 04             	sub    esp,0x4
c0028747:	db 1c 24             	fistp  DWORD PTR [esp]
c002874a:	58                   	pop    eax
c002874b:	c3                   	ret    

c002874c <lrintf>:
c002874c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028750:	83 ec 04             	sub    esp,0x4
c0028753:	db 1c 24             	fistp  DWORD PTR [esp]
c0028756:	58                   	pop    eax
c0028757:	c3                   	ret    

Disassembly of section .init:

c0028758 <_init>:
c0028758:	55                   	push   ebp
c0028759:	89 e5                	mov    ebp,esp
c002875b:	e8 b8 79 fd ff       	call   c0000118 <frame_dummy>
c0028760:	e8 63 e0 ff ff       	call   c00267c8 <__do_global_ctors_aux>
c0028765:	5d                   	pop    ebp
c0028766:	c3                   	ret    

Disassembly of section .fini:

c0028767 <_fini>:
c0028767:	55                   	push   ebp
c0028768:	89 e5                	mov    ebp,esp
c002876a:	e8 39 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002876f:	5d                   	pop    ebp
c0028770:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028772 <Computer::~Computer()>:
c0028772:	83 ec 0c             	sub    esp,0xc
c0028775:	ba 18 a3 02 c0       	mov    edx,0xc002a318
c002877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877e:	89 10                	mov    DWORD PTR [eax],edx
c0028780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028784:	83 ec 0c             	sub    esp,0xc
c0028787:	50                   	push   eax
c0028788:	e8 73 bb fe ff       	call   c0014300 <Device::~Device()>
c002878d:	83 c4 10             	add    esp,0x10
c0028790:	90                   	nop
c0028791:	83 c4 0c             	add    esp,0xc
c0028794:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028796 <Computer::~Computer()>:
c0028796:	83 ec 0c             	sub    esp,0xc
c0028799:	83 ec 0c             	sub    esp,0xc
c002879c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287a0:	e8 cd ff ff ff       	call   c0028772 <Computer::~Computer()>
c00287a5:	83 c4 10             	add    esp,0x10
c00287a8:	83 ec 08             	sub    esp,0x8
c00287ab:	68 ec 01 00 00       	push   0x1ec
c00287b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287b4:	e8 6e a7 fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00287b9:	83 c4 10             	add    esp,0x10
c00287bc:	83 c4 0c             	add    esp,0xc
c00287bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00287c0 <idleCommon()>:
c00287c0:	83 ec 0c             	sub    esp,0xc
c00287c3:	e8 16 57 ff ff       	call   c001dede <lockScheduler()>
c00287c8:	e8 4d 5a ff ff       	call   c001e21a <schedule()>
c00287cd:	83 c4 0c             	add    esp,0xc
c00287d0:	e9 0b 57 ff ff       	jmp    c001dee0 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00287d6 <LinkedList<UnixFile>::~LinkedList()>:
c00287d6:	90                   	nop
c00287d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00287d8 <LinkedList<UnixFile>::LinkedList()>:
c00287d8:	83 ec 0c             	sub    esp,0xc
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002881b:	83 ec 0c             	sub    esp,0xc
c002881e:	68 12 a6 02 c0       	push   0xc002a612
c0028823:	e8 df a7 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0028828:	83 c4 10             	add    esp,0x10
c002882b:	90                   	nop
c002882c:	83 c4 0c             	add    esp,0xc
c002882f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028830 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028830:	83 ec 0c             	sub    esp,0xc
c0028833:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028838:	75 10                	jne    c002884a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002883a:	83 ec 0c             	sub    esp,0xc
c002883d:	68 2c a6 02 c0       	push   0xc002a62c
c0028842:	e8 72 1e ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028847:	83 c4 10             	add    esp,0x10
c002884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028850:	85 c0                	test   eax,eax
c0028852:	74 34                	je     c0028888 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028858:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885b:	85 c0                	test   eax,eax
c002885d:	74 29                	je     c0028888 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002885f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028863:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028866:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002886a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002886d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028871:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028875:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002887f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028886:	eb 65                	jmp    c00288ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 00                	mov    eax,DWORD PTR [eax]
c002888e:	85 c0                	test   eax,eax
c0028890:	75 4b                	jne    c00288dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	85 c0                	test   eax,eax
c002889b:	75 40                	jne    c00288dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002889d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288a5:	89 10                	mov    DWORD PTR [eax],edx
c00288a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c7:	85 c0                	test   eax,eax
c00288c9:	74 22                	je     c00288ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288cb:	83 ec 0c             	sub    esp,0xc
c00288ce:	68 4e a6 02 c0       	push   0xc002a64e
c00288d3:	e8 e1 1d ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c00288d8:	83 c4 10             	add    esp,0x10
c00288db:	eb 10                	jmp    c00288ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288dd:	83 ec 0c             	sub    esp,0xc
c00288e0:	68 58 a6 02 c0       	push   0xc002a658
c00288e5:	e8 cf 1d ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c00288ea:	83 c4 10             	add    esp,0x10
c00288ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f4:	8d 50 01             	lea    edx,[eax+0x1]
c00288f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288fe:	90                   	nop
c00288ff:	83 c4 0c             	add    esp,0xc
c0028902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028904 <LinkedList<UnixFile>::getFirstElement()>:
c0028904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028908:	8b 00                	mov    eax,DWORD PTR [eax]
c002890a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002890c <LinkedList<UnixFile>::removeFirst()>:
c002890c:	83 ec 0c             	sub    esp,0xc
c002890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028913:	8b 00                	mov    eax,DWORD PTR [eax]
c0028915:	85 c0                	test   eax,eax
c0028917:	75 12                	jne    c002892b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	68 64 a6 02 c0       	push   0xc002a664
c0028921:	e8 93 1d ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028926:	83 c4 10             	add    esp,0x10
c0028929:	eb 7e                	jmp    c00289a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002892b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028932:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028935:	85 c0                	test   eax,eax
c0028937:	74 10                	je     c0028949 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028939:	83 ec 0c             	sub    esp,0xc
c002893c:	68 af a6 02 c0       	push   0xc002a6af
c0028941:	e8 73 1d ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028946:	83 c4 10             	add    esp,0x10
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	8b 00                	mov    eax,DWORD PTR [eax]
c002894f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028952:	85 c0                	test   eax,eax
c0028954:	75 33                	jne    c0028989 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028964:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028972:	83 f8 01             	cmp    eax,0x1
c0028975:	74 21                	je     c0028998 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028977:	83 ec 0c             	sub    esp,0xc
c002897a:	68 88 a6 02 c0       	push   0xc002a688
c002897f:	e8 35 1d ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028984:	83 c4 10             	add    esp,0x10
c0028987:	eb 0f                	jmp    c0028998 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898d:	8b 00                	mov    eax,DWORD PTR [eax]
c002898f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028996:	89 10                	mov    DWORD PTR [eax],edx
c0028998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002899f:	8d 50 ff             	lea    edx,[eax-0x1]
c00289a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289a9:	83 c4 0c             	add    esp,0xc
c00289ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00289ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00289ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00289b6 <DriverlessDevice::~DriverlessDevice()>:
c00289b6:	ba 84 af 02 c0       	mov    edx,0xc002af84
c00289bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289bf:	89 10                	mov    DWORD PTR [eax],edx
c00289c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c5:	50                   	push   eax
c00289c6:	e8 35 b9 fe ff       	call   c0014300 <Device::~Device()>
c00289cb:	83 c4 04             	add    esp,0x4
c00289ce:	90                   	nop
c00289cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00289d0 <DriverlessDevice::~DriverlessDevice()>:
c00289d0:	83 ec 0c             	sub    esp,0xc
c00289d3:	83 ec 0c             	sub    esp,0xc
c00289d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289da:	e8 d7 ff ff ff       	call   c00289b6 <DriverlessDevice::~DriverlessDevice()>
c00289df:	83 c4 10             	add    esp,0x10
c00289e2:	83 ec 08             	sub    esp,0x8
c00289e5:	68 58 01 00 00       	push   0x158
c00289ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ee:	e8 34 a5 fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00289f3:	83 c4 10             	add    esp,0x10
c00289f6:	83 c4 0c             	add    esp,0xc
c00289f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289fa <LinkedList<Device>::addElement(Device*)>:
c00289fa:	83 ec 0c             	sub    esp,0xc
c00289fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a02:	75 10                	jne    c0028a14 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028a04:	83 ec 0c             	sub    esp,0xc
c0028a07:	68 2c a6 02 c0       	push   0xc002a62c
c0028a0c:	e8 a8 1c ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028a11:	83 c4 10             	add    esp,0x10
c0028a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1a:	85 c0                	test   eax,eax
c0028a1c:	74 3a                	je     c0028a58 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a25:	85 c0                	test   eax,eax
c0028a27:	74 2f                	je     c0028a58 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a34:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a42:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a4c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a56:	eb 68                	jmp    c0028ac0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5e:	85 c0                	test   eax,eax
c0028a60:	75 4e                	jne    c0028ab0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a69:	85 c0                	test   eax,eax
c0028a6b:	75 43                	jne    c0028ab0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a75:	89 10                	mov    DWORD PTR [eax],edx
c0028a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a89:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a9a:	85 c0                	test   eax,eax
c0028a9c:	74 22                	je     c0028ac0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a9e:	83 ec 0c             	sub    esp,0xc
c0028aa1:	68 4e a6 02 c0       	push   0xc002a64e
c0028aa6:	e8 0e 1c ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028aab:	83 c4 10             	add    esp,0x10
c0028aae:	eb 10                	jmp    c0028ac0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	68 58 a6 02 c0       	push   0xc002a658
c0028ab8:	e8 fc 1b ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028abd:	83 c4 10             	add    esp,0x10
c0028ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ac7:	8d 50 01             	lea    edx,[eax+0x1]
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ad1:	90                   	nop
c0028ad2:	83 c4 0c             	add    esp,0xc
c0028ad5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028ad6 <LinkedList<Device>::LinkedList()>:
c0028ad6:	83 ec 0c             	sub    esp,0xc
c0028ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028add:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b19:	83 ec 0c             	sub    esp,0xc
c0028b1c:	68 12 a6 02 c0       	push   0xc002a612
c0028b21:	e8 e1 a4 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0028b26:	83 c4 10             	add    esp,0x10
c0028b29:	90                   	nop
c0028b2a:	83 c4 0c             	add    esp,0xc
c0028b2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3c:	85 c0                	test   eax,eax
c0028b3e:	75 0e                	jne    c0028b4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b47:	85 c0                	test   eax,eax
c0028b49:	75 03                	jne    c0028b4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b4b:	b0 01                	mov    al,0x1
c0028b4d:	c3                   	ret    
c0028b4e:	b0 00                	mov    al,0x0
c0028b50:	90                   	nop
c0028b51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b52:	83 ec 0c             	sub    esp,0xc
c0028b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b59:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5b:	85 c0                	test   eax,eax
c0028b5d:	75 15                	jne    c0028b74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b5f:	83 ec 0c             	sub    esp,0xc
c0028b62:	68 64 a6 02 c0       	push   0xc002a664
c0028b67:	e8 4d 1b ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028b6c:	83 c4 10             	add    esp,0x10
c0028b6f:	e9 88 00 00 00       	jmp    c0028bfc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b7e:	85 c0                	test   eax,eax
c0028b80:	0f 95 c0             	setne  al
c0028b83:	84 c0                	test   al,al
c0028b85:	74 10                	je     c0028b97 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b87:	83 ec 0c             	sub    esp,0xc
c0028b8a:	68 af a6 02 c0       	push   0xc002a6af
c0028b8f:	e8 25 1b ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028b94:	83 c4 10             	add    esp,0x10
c0028b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ba0:	85 c0                	test   eax,eax
c0028ba2:	0f 94 c0             	sete   al
c0028ba5:	84 c0                	test   al,al
c0028ba7:	74 33                	je     c0028bdc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc5:	83 f8 01             	cmp    eax,0x1
c0028bc8:	74 21                	je     c0028beb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bca:	83 ec 0c             	sub    esp,0xc
c0028bcd:	68 88 a6 02 c0       	push   0xc002a688
c0028bd2:	e8 e2 1a ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028bd7:	83 c4 10             	add    esp,0x10
c0028bda:	eb 0f                	jmp    c0028beb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028be2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be9:	89 10                	mov    DWORD PTR [eax],edx
c0028beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bf2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bfc:	83 c4 0c             	add    esp,0xc
c0028bff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028c00:	83 ec 0c             	sub    esp,0xc
c0028c03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028c08:	75 10                	jne    c0028c1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028c0a:	83 ec 0c             	sub    esp,0xc
c0028c0d:	68 2c a6 02 c0       	push   0xc002a62c
c0028c12:	e8 a2 1a ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028c17:	83 c4 10             	add    esp,0x10
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c20:	85 c0                	test   eax,eax
c0028c22:	74 34                	je     c0028c58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c2b:	85 c0                	test   eax,eax
c0028c2d:	74 29                	je     c0028c58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c56:	eb 65                	jmp    c0028cbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c5e:	85 c0                	test   eax,eax
c0028c60:	75 4b                	jne    c0028cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c69:	85 c0                	test   eax,eax
c0028c6b:	75 40                	jne    c0028cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c75:	89 10                	mov    DWORD PTR [eax],edx
c0028c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c97:	85 c0                	test   eax,eax
c0028c99:	74 22                	je     c0028cbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c9b:	83 ec 0c             	sub    esp,0xc
c0028c9e:	68 4e a6 02 c0       	push   0xc002a64e
c0028ca3:	e8 11 1a ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028ca8:	83 c4 10             	add    esp,0x10
c0028cab:	eb 10                	jmp    c0028cbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028cad:	83 ec 0c             	sub    esp,0xc
c0028cb0:	68 58 a6 02 c0       	push   0xc002a658
c0028cb5:	e8 ff 19 ff ff       	call   c001a6b9 <Krnl::panic(char const*)>
c0028cba:	83 c4 10             	add    esp,0x10
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cc4:	8d 50 01             	lea    edx,[eax+0x1]
c0028cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cce:	90                   	nop
c0028ccf:	83 c4 0c             	add    esp,0xc
c0028cd2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028cd4 <ACPI::~ACPI()>:
c0028cd4:	83 ec 0c             	sub    esp,0xc
c0028cd7:	ba d8 b8 02 c0       	mov    edx,0xc002b8d8
c0028cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce0:	89 10                	mov    DWORD PTR [eax],edx
c0028ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce6:	83 ec 0c             	sub    esp,0xc
c0028ce9:	50                   	push   eax
c0028cea:	e8 11 b6 fe ff       	call   c0014300 <Device::~Device()>
c0028cef:	83 c4 10             	add    esp,0x10
c0028cf2:	90                   	nop
c0028cf3:	83 c4 0c             	add    esp,0xc
c0028cf6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028cf8 <ACPI::~ACPI()>:
c0028cf8:	83 ec 0c             	sub    esp,0xc
c0028cfb:	83 ec 0c             	sub    esp,0xc
c0028cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d02:	e8 cd ff ff ff       	call   c0028cd4 <ACPI::~ACPI()>
c0028d07:	83 c4 10             	add    esp,0x10
c0028d0a:	83 ec 08             	sub    esp,0x8
c0028d0d:	68 68 12 00 00       	push   0x1268
c0028d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d16:	e8 0c a2 fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	83 c4 0c             	add    esp,0xc
c0028d21:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028d22 <CPU::~CPU()>:
c0028d22:	83 ec 0c             	sub    esp,0xc
c0028d25:	ba c8 bc 02 c0       	mov    edx,0xc002bcc8
c0028d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2e:	89 10                	mov    DWORD PTR [eax],edx
c0028d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d34:	83 ec 0c             	sub    esp,0xc
c0028d37:	50                   	push   eax
c0028d38:	e8 c3 b5 fe ff       	call   c0014300 <Device::~Device()>
c0028d3d:	83 c4 10             	add    esp,0x10
c0028d40:	90                   	nop
c0028d41:	83 c4 0c             	add    esp,0xc
c0028d44:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d46 <CPU::~CPU()>:
c0028d46:	83 ec 0c             	sub    esp,0xc
c0028d49:	83 ec 0c             	sub    esp,0xc
c0028d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d50:	e8 cd ff ff ff       	call   c0028d22 <CPU::~CPU()>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	83 ec 08             	sub    esp,0x8
c0028d5b:	68 98 11 00 00       	push   0x1198
c0028d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d64:	e8 be a1 fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028d69:	83 c4 10             	add    esp,0x10
c0028d6c:	83 c4 0c             	add    esp,0xc
c0028d6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d70 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d70:	90                   	nop
c0028d71:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d72 <ThreadControlBlock::ThreadControlBlock()>:
c0028d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d76:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d81:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d8c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d97:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028da2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028daa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028dae:	90                   	nop
c0028daf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028db0:	83 ec 0c             	sub    esp,0xc
c0028db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028df3:	83 ec 0c             	sub    esp,0xc
c0028df6:	68 12 a6 02 c0       	push   0xc002a612
c0028dfb:	e8 07 a2 fe ff       	call   c0013007 <Dbg::kprintf(char const*, ...)>
c0028e00:	83 c4 10             	add    esp,0x10
c0028e03:	90                   	nop
c0028e04:	83 c4 0c             	add    esp,0xc
c0028e07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028e08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e0f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028e10 <Vm::_FPUState::_FPUState()>:
c0028e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e14:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028e1b:	90                   	nop
c0028e1c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028e1e <PCI::~PCI()>:
c0028e1e:	83 ec 0c             	sub    esp,0xc
c0028e21:	ba bc cd 02 c0       	mov    edx,0xc002cdbc
c0028e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2a:	89 10                	mov    DWORD PTR [eax],edx
c0028e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	50                   	push   eax
c0028e34:	e8 9f ae fe ff       	call   c0013cd8 <Bus::~Bus()>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	90                   	nop
c0028e3d:	83 c4 0c             	add    esp,0xc
c0028e40:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e42 <PCI::~PCI()>:
c0028e42:	83 ec 0c             	sub    esp,0xc
c0028e45:	83 ec 0c             	sub    esp,0xc
c0028e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4c:	e8 cd ff ff ff       	call   c0028e1e <PCI::~PCI()>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	83 ec 08             	sub    esp,0x8
c0028e57:	68 58 01 00 00       	push   0x158
c0028e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e60:	e8 c2 a0 fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028e65:	83 c4 10             	add    esp,0x10
c0028e68:	83 c4 0c             	add    esp,0xc
c0028e6b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e6c <IDE::~IDE()>:
c0028e6c:	83 ec 0c             	sub    esp,0xc
c0028e6f:	ba 20 d0 02 c0       	mov    edx,0xc002d020
c0028e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e78:	89 10                	mov    DWORD PTR [eax],edx
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	83 ec 0c             	sub    esp,0xc
c0028e81:	50                   	push   eax
c0028e82:	e8 69 b9 fe ff       	call   c00147f0 <HardDiskController::~HardDiskController()>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	90                   	nop
c0028e8b:	83 c4 0c             	add    esp,0xc
c0028e8e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e90 <IDE::~IDE()>:
c0028e90:	83 ec 0c             	sub    esp,0xc
c0028e93:	83 ec 0c             	sub    esp,0xc
c0028e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9a:	e8 cd ff ff ff       	call   c0028e6c <IDE::~IDE()>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	83 ec 08             	sub    esp,0x8
c0028ea5:	68 70 02 00 00       	push   0x270
c0028eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eae:	e8 74 a0 fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028eb3:	83 c4 10             	add    esp,0x10
c0028eb6:	83 c4 0c             	add    esp,0xc
c0028eb9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028eba <SATABus::~SATABus()>:
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	ba 00 d1 02 c0       	mov    edx,0xc002d100
c0028ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec6:	89 10                	mov    DWORD PTR [eax],edx
c0028ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecc:	83 ec 0c             	sub    esp,0xc
c0028ecf:	50                   	push   eax
c0028ed0:	e8 1b b9 fe ff       	call   c00147f0 <HardDiskController::~HardDiskController()>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	90                   	nop
c0028ed9:	83 c4 0c             	add    esp,0xc
c0028edc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ede <SATABus::~SATABus()>:
c0028ede:	83 ec 0c             	sub    esp,0xc
c0028ee1:	83 ec 0c             	sub    esp,0xc
c0028ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee8:	e8 cd ff ff ff       	call   c0028eba <SATABus::~SATABus()>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	83 ec 08             	sub    esp,0x8
c0028ef3:	68 64 01 00 00       	push   0x164
c0028ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efc:	e8 26 a0 fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028f01:	83 c4 10             	add    esp,0x10
c0028f04:	83 c4 0c             	add    esp,0xc
c0028f07:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028f08 <ATA::~ATA()>:
c0028f08:	83 ec 0c             	sub    esp,0xc
c0028f0b:	ba 4c d1 02 c0       	mov    edx,0xc002d14c
c0028f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f14:	89 10                	mov    DWORD PTR [eax],edx
c0028f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1a:	83 ec 0c             	sub    esp,0xc
c0028f1d:	50                   	push   eax
c0028f1e:	e8 bf b9 fe ff       	call   c00148e2 <PhysicalDisk::~PhysicalDisk()>
c0028f23:	83 c4 10             	add    esp,0x10
c0028f26:	90                   	nop
c0028f27:	83 c4 0c             	add    esp,0xc
c0028f2a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028f2c <ATA::~ATA()>:
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	83 ec 0c             	sub    esp,0xc
c0028f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f36:	e8 cd ff ff ff       	call   c0028f08 <ATA::~ATA()>
c0028f3b:	83 c4 10             	add    esp,0x10
c0028f3e:	83 ec 08             	sub    esp,0x8
c0028f41:	68 7c 01 00 00       	push   0x17c
c0028f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4a:	e8 d8 9f fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028f4f:	83 c4 10             	add    esp,0x10
c0028f52:	83 c4 0c             	add    esp,0xc
c0028f55:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f56 <ATAPI::~ATAPI()>:
c0028f56:	83 ec 0c             	sub    esp,0xc
c0028f59:	ba 84 d1 02 c0       	mov    edx,0xc002d184
c0028f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f62:	89 10                	mov    DWORD PTR [eax],edx
c0028f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f68:	83 ec 0c             	sub    esp,0xc
c0028f6b:	50                   	push   eax
c0028f6c:	e8 71 b9 fe ff       	call   c00148e2 <PhysicalDisk::~PhysicalDisk()>
c0028f71:	83 c4 10             	add    esp,0x10
c0028f74:	90                   	nop
c0028f75:	83 c4 0c             	add    esp,0xc
c0028f78:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f7a <ATAPI::~ATAPI()>:
c0028f7a:	83 ec 0c             	sub    esp,0xc
c0028f7d:	83 ec 0c             	sub    esp,0xc
c0028f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f84:	e8 cd ff ff ff       	call   c0028f56 <ATAPI::~ATAPI()>
c0028f89:	83 c4 10             	add    esp,0x10
c0028f8c:	83 ec 08             	sub    esp,0x8
c0028f8f:	68 80 01 00 00       	push   0x180
c0028f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f98:	e8 8a 9f fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028f9d:	83 c4 10             	add    esp,0x10
c0028fa0:	83 c4 0c             	add    esp,0xc
c0028fa3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028fa4 <SATA::~SATA()>:
c0028fa4:	83 ec 0c             	sub    esp,0xc
c0028fa7:	ba 38 d2 02 c0       	mov    edx,0xc002d238
c0028fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb0:	89 10                	mov    DWORD PTR [eax],edx
c0028fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	50                   	push   eax
c0028fba:	e8 23 b9 fe ff       	call   c00148e2 <PhysicalDisk::~PhysicalDisk()>
c0028fbf:	83 c4 10             	add    esp,0x10
c0028fc2:	90                   	nop
c0028fc3:	83 c4 0c             	add    esp,0xc
c0028fc6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028fc8 <SATA::~SATA()>:
c0028fc8:	83 ec 0c             	sub    esp,0xc
c0028fcb:	83 ec 0c             	sub    esp,0xc
c0028fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd2:	e8 cd ff ff ff       	call   c0028fa4 <SATA::~SATA()>
c0028fd7:	83 c4 10             	add    esp,0x10
c0028fda:	83 ec 08             	sub    esp,0x8
c0028fdd:	68 7c 01 00 00       	push   0x17c
c0028fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe6:	e8 3c 9f fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0028feb:	83 c4 10             	add    esp,0x10
c0028fee:	83 c4 0c             	add    esp,0xc
c0028ff1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ff2 <SATAPI::~SATAPI()>:
c0028ff2:	83 ec 0c             	sub    esp,0xc
c0028ff5:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c0028ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffe:	89 10                	mov    DWORD PTR [eax],edx
c0029000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	50                   	push   eax
c0029008:	e8 d5 b8 fe ff       	call   c00148e2 <PhysicalDisk::~PhysicalDisk()>
c002900d:	83 c4 10             	add    esp,0x10
c0029010:	90                   	nop
c0029011:	83 c4 0c             	add    esp,0xc
c0029014:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029016 <SATAPI::~SATAPI()>:
c0029016:	83 ec 0c             	sub    esp,0xc
c0029019:	83 ec 0c             	sub    esp,0xc
c002901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029020:	e8 cd ff ff ff       	call   c0028ff2 <SATAPI::~SATAPI()>
c0029025:	83 c4 10             	add    esp,0x10
c0029028:	83 ec 08             	sub    esp,0x8
c002902b:	68 80 01 00 00       	push   0x180
c0029030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029034:	e8 ee 9e fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0029039:	83 c4 10             	add    esp,0x10
c002903c:	83 c4 0c             	add    esp,0xc
c002903f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029040 <AVX::~AVX()>:
c0029040:	83 ec 0c             	sub    esp,0xc
c0029043:	ba 54 d3 02 c0       	mov    edx,0xc002d354
c0029048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904c:	89 10                	mov    DWORD PTR [eax],edx
c002904e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029052:	83 ec 0c             	sub    esp,0xc
c0029055:	50                   	push   eax
c0029056:	e8 0b b9 fe ff       	call   c0014966 <FPU::~FPU()>
c002905b:	83 c4 10             	add    esp,0x10
c002905e:	90                   	nop
c002905f:	83 c4 0c             	add    esp,0xc
c0029062:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029064 <AVX::~AVX()>:
c0029064:	83 ec 0c             	sub    esp,0xc
c0029067:	83 ec 0c             	sub    esp,0xc
c002906a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906e:	e8 cd ff ff ff       	call   c0029040 <AVX::~AVX()>
c0029073:	83 c4 10             	add    esp,0x10
c0029076:	83 ec 08             	sub    esp,0x8
c0029079:	68 58 01 00 00       	push   0x158
c002907e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029082:	e8 a0 9e fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0029087:	83 c4 10             	add    esp,0x10
c002908a:	83 c4 0c             	add    esp,0xc
c002908d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002908e <MMX::~MMX()>:
c002908e:	83 ec 0c             	sub    esp,0xc
c0029091:	ba 94 d3 02 c0       	mov    edx,0xc002d394
c0029096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909a:	89 10                	mov    DWORD PTR [eax],edx
c002909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	50                   	push   eax
c00290a4:	e8 bd b8 fe ff       	call   c0014966 <FPU::~FPU()>
c00290a9:	83 c4 10             	add    esp,0x10
c00290ac:	90                   	nop
c00290ad:	83 c4 0c             	add    esp,0xc
c00290b0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00290b2 <MMX::~MMX()>:
c00290b2:	83 ec 0c             	sub    esp,0xc
c00290b5:	83 ec 0c             	sub    esp,0xc
c00290b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290bc:	e8 cd ff ff ff       	call   c002908e <MMX::~MMX()>
c00290c1:	83 c4 10             	add    esp,0x10
c00290c4:	83 ec 08             	sub    esp,0x8
c00290c7:	68 58 01 00 00       	push   0x158
c00290cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d0:	e8 52 9e fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00290d5:	83 c4 10             	add    esp,0x10
c00290d8:	83 c4 0c             	add    esp,0xc
c00290db:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00290dc <SSE::~SSE()>:
c00290dc:	83 ec 0c             	sub    esp,0xc
c00290df:	ba d4 d3 02 c0       	mov    edx,0xc002d3d4
c00290e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e8:	89 10                	mov    DWORD PTR [eax],edx
c00290ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ee:	83 ec 0c             	sub    esp,0xc
c00290f1:	50                   	push   eax
c00290f2:	e8 6f b8 fe ff       	call   c0014966 <FPU::~FPU()>
c00290f7:	83 c4 10             	add    esp,0x10
c00290fa:	90                   	nop
c00290fb:	83 c4 0c             	add    esp,0xc
c00290fe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029100 <SSE::~SSE()>:
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	83 ec 0c             	sub    esp,0xc
c0029106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002910a:	e8 cd ff ff ff       	call   c00290dc <SSE::~SSE()>
c002910f:	83 c4 10             	add    esp,0x10
c0029112:	83 ec 08             	sub    esp,0x8
c0029115:	68 58 01 00 00       	push   0x158
c002911a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911e:	e8 04 9e fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0029123:	83 c4 10             	add    esp,0x10
c0029126:	83 c4 0c             	add    esp,0xc
c0029129:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002912a <x87::~x87()>:
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	ba 14 d4 02 c0       	mov    edx,0xc002d414
c0029132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029136:	89 10                	mov    DWORD PTR [eax],edx
c0029138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	50                   	push   eax
c0029140:	e8 21 b8 fe ff       	call   c0014966 <FPU::~FPU()>
c0029145:	83 c4 10             	add    esp,0x10
c0029148:	90                   	nop
c0029149:	83 c4 0c             	add    esp,0xc
c002914c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002914e <x87::~x87()>:
c002914e:	83 ec 0c             	sub    esp,0xc
c0029151:	83 ec 0c             	sub    esp,0xc
c0029154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029158:	e8 cd ff ff ff       	call   c002912a <x87::~x87()>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	83 ec 08             	sub    esp,0x8
c0029163:	68 58 01 00 00       	push   0x158
c0029168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002916c:	e8 b6 9d fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c0029171:	83 c4 10             	add    esp,0x10
c0029174:	83 c4 0c             	add    esp,0xc
c0029177:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029178 <IOAPIC::~IOAPIC()>:
c0029178:	83 ec 0c             	sub    esp,0xc
c002917b:	ba 6c d5 02 c0       	mov    edx,0xc002d56c
c0029180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029184:	89 10                	mov    DWORD PTR [eax],edx
c0029186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918a:	83 ec 0c             	sub    esp,0xc
c002918d:	50                   	push   eax
c002918e:	e8 6d b1 fe ff       	call   c0014300 <Device::~Device()>
c0029193:	83 c4 10             	add    esp,0x10
c0029196:	90                   	nop
c0029197:	83 c4 0c             	add    esp,0xc
c002919a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002919c <IOAPIC::~IOAPIC()>:
c002919c:	83 ec 0c             	sub    esp,0xc
c002919f:	83 ec 0c             	sub    esp,0xc
c00291a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a6:	e8 cd ff ff ff       	call   c0029178 <IOAPIC::~IOAPIC()>
c00291ab:	83 c4 10             	add    esp,0x10
c00291ae:	83 ec 08             	sub    esp,0x8
c00291b1:	68 68 01 00 00       	push   0x168
c00291b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ba:	e8 68 9d fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00291bf:	83 c4 10             	add    esp,0x10
c00291c2:	83 c4 0c             	add    esp,0xc
c00291c5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00291c6 <APIC::~APIC()>:
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	ba 24 d5 02 c0       	mov    edx,0xc002d524
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	89 10                	mov    DWORD PTR [eax],edx
c00291d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d8:	83 ec 0c             	sub    esp,0xc
c00291db:	50                   	push   eax
c00291dc:	e8 4f bc fe ff       	call   c0014e30 <InterruptController::~InterruptController()>
c00291e1:	83 c4 10             	add    esp,0x10
c00291e4:	90                   	nop
c00291e5:	83 c4 0c             	add    esp,0xc
c00291e8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00291ea <APIC::~APIC()>:
c00291ea:	83 ec 0c             	sub    esp,0xc
c00291ed:	83 ec 0c             	sub    esp,0xc
c00291f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f4:	e8 cd ff ff ff       	call   c00291c6 <APIC::~APIC()>
c00291f9:	83 c4 10             	add    esp,0x10
c00291fc:	83 ec 08             	sub    esp,0x8
c00291ff:	68 58 21 00 00       	push   0x2158
c0029204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029208:	e8 1a 9d fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c002920d:	83 c4 10             	add    esp,0x10
c0029210:	83 c4 0c             	add    esp,0xc
c0029213:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029214 <PIC::~PIC()>:
c0029214:	83 ec 0c             	sub    esp,0xc
c0029217:	ba bc d5 02 c0       	mov    edx,0xc002d5bc
c002921c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029220:	89 10                	mov    DWORD PTR [eax],edx
c0029222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029226:	83 ec 0c             	sub    esp,0xc
c0029229:	50                   	push   eax
c002922a:	e8 01 bc fe ff       	call   c0014e30 <InterruptController::~InterruptController()>
c002922f:	83 c4 10             	add    esp,0x10
c0029232:	90                   	nop
c0029233:	83 c4 0c             	add    esp,0xc
c0029236:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029238 <PIC::~PIC()>:
c0029238:	83 ec 0c             	sub    esp,0xc
c002923b:	83 ec 0c             	sub    esp,0xc
c002923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029242:	e8 cd ff ff ff       	call   c0029214 <PIC::~PIC()>
c0029247:	83 c4 10             	add    esp,0x10
c002924a:	83 ec 08             	sub    esp,0x8
c002924d:	68 58 21 00 00       	push   0x2158
c0029252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029256:	e8 cc 9c fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c002925b:	83 c4 10             	add    esp,0x10
c002925e:	83 c4 0c             	add    esp,0xc
c0029261:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029262 <APICTimer::~APICTimer()>:
c0029262:	83 ec 0c             	sub    esp,0xc
c0029265:	ba 10 d6 02 c0       	mov    edx,0xc002d610
c002926a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926e:	89 10                	mov    DWORD PTR [eax],edx
c0029270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029274:	83 ec 0c             	sub    esp,0xc
c0029277:	50                   	push   eax
c0029278:	e8 0f db fe ff       	call   c0016d8c <Timer::~Timer()>
c002927d:	83 c4 10             	add    esp,0x10
c0029280:	90                   	nop
c0029281:	83 c4 0c             	add    esp,0xc
c0029284:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029286 <APICTimer::~APICTimer()>:
c0029286:	83 ec 0c             	sub    esp,0xc
c0029289:	83 ec 0c             	sub    esp,0xc
c002928c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029290:	e8 cd ff ff ff       	call   c0029262 <APICTimer::~APICTimer()>
c0029295:	83 c4 10             	add    esp,0x10
c0029298:	83 ec 08             	sub    esp,0x8
c002929b:	68 60 01 00 00       	push   0x160
c00292a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292a4:	e8 7e 9c fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00292a9:	83 c4 10             	add    esp,0x10
c00292ac:	83 c4 0c             	add    esp,0xc
c00292af:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00292b0 <PIT::~PIT()>:
c00292b0:	83 ec 0c             	sub    esp,0xc
c00292b3:	ba 60 d6 02 c0       	mov    edx,0xc002d660
c00292b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292bc:	89 10                	mov    DWORD PTR [eax],edx
c00292be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c2:	83 ec 0c             	sub    esp,0xc
c00292c5:	50                   	push   eax
c00292c6:	e8 c1 da fe ff       	call   c0016d8c <Timer::~Timer()>
c00292cb:	83 c4 10             	add    esp,0x10
c00292ce:	90                   	nop
c00292cf:	83 c4 0c             	add    esp,0xc
c00292d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00292d4 <PIT::~PIT()>:
c00292d4:	83 ec 0c             	sub    esp,0xc
c00292d7:	83 ec 0c             	sub    esp,0xc
c00292da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292de:	e8 cd ff ff ff       	call   c00292b0 <PIT::~PIT()>
c00292e3:	83 c4 10             	add    esp,0x10
c00292e6:	83 ec 08             	sub    esp,0x8
c00292e9:	68 5c 01 00 00       	push   0x15c
c00292ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292f2:	e8 30 9c fe ff       	call   c0012f27 <operator delete(void*, unsigned long)>
c00292f7:	83 c4 10             	add    esp,0x10
c00292fa:	83 c4 0c             	add    esp,0xc
c00292fd:	c3                   	ret    
